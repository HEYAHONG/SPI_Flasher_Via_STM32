
STM32F103C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e30  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08005f3c  08005f3c  00015f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f88  08005f88  00020188  2**0
                  CONTENTS
  4 .ARM          00000000  08005f88  08005f88  00020188  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f88  08005f88  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f88  08005f88  00015f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f8c  08005f8c  00015f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  08005f90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001230  20000188  08006118  00020188  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013b8  08006118  000213b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016933  00000000  00000000  000201b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003208  00000000  00000000  00036ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010f8  00000000  00000000  00039cf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f90  00000000  00000000  0003ade8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001710f  00000000  00000000  0003bd78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fe3a  00000000  00000000  00052e87  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000734f3  00000000  00000000  00062cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d61b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045a8  00000000  00000000  000d6230  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000188 	.word	0x20000188
 8000128:	00000000 	.word	0x00000000
 800012c:	08005f24 	.word	0x08005f24

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000018c 	.word	0x2000018c
 8000148:	08005f24 	.word	0x08005f24

0800014c <loop_user_call>:
};

WorkMode_t WorkMode=Mode_UART;

void loop_user_call()//在Main函数里循环调用此函数
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if(linecode.IsUpdate)
 8000150:	4b41      	ldr	r3, [pc, #260]	; (8000258 <loop_user_call+0x10c>)
 8000152:	7a1b      	ldrb	r3, [r3, #8]
 8000154:	2b00      	cmp	r3, #0
 8000156:	d07c      	beq.n	8000252 <loop_user_call+0x106>
	{
		HAL_Delay(20);//延时20ms设置通信参数
 8000158:	2014      	movs	r0, #20
 800015a:	f000 fbc9 	bl	80008f0 <HAL_Delay>
		if(linecode.Rate<1500000)//速率小于1.5Mbps，为串口模式(及其有限的串口支持)
 800015e:	4b3e      	ldr	r3, [pc, #248]	; (8000258 <loop_user_call+0x10c>)
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	4a3e      	ldr	r2, [pc, #248]	; (800025c <loop_user_call+0x110>)
 8000164:	4293      	cmp	r3, r2
 8000166:	d871      	bhi.n	800024c <loop_user_call+0x100>
		{//重新初始化串口
			HAL_UART_DeInit(&huart2);
 8000168:	483d      	ldr	r0, [pc, #244]	; (8000260 <loop_user_call+0x114>)
 800016a:	f002 fc91 	bl	8002a90 <HAL_UART_DeInit>
			huart2.Instance = USART2;
 800016e:	4b3c      	ldr	r3, [pc, #240]	; (8000260 <loop_user_call+0x114>)
 8000170:	4a3c      	ldr	r2, [pc, #240]	; (8000264 <loop_user_call+0x118>)
 8000172:	601a      	str	r2, [r3, #0]

			huart2.Init.BaudRate = linecode.Rate;//linecode的速率
 8000174:	4b38      	ldr	r3, [pc, #224]	; (8000258 <loop_user_call+0x10c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a39      	ldr	r2, [pc, #228]	; (8000260 <loop_user_call+0x114>)
 800017a:	6053      	str	r3, [r2, #4]

			huart2.Init.WordLength = UART_WORDLENGTH_8B;//只支持8/9数据位（包括校验位）
 800017c:	4b38      	ldr	r3, [pc, #224]	; (8000260 <loop_user_call+0x114>)
 800017e:	2200      	movs	r2, #0
 8000180:	609a      	str	r2, [r3, #8]
			if(linecode.DataBits==8 && linecode.Parity!=0)
 8000182:	4b35      	ldr	r3, [pc, #212]	; (8000258 <loop_user_call+0x10c>)
 8000184:	88db      	ldrh	r3, [r3, #6]
 8000186:	2b08      	cmp	r3, #8
 8000188:	d107      	bne.n	800019a <loop_user_call+0x4e>
 800018a:	4b33      	ldr	r3, [pc, #204]	; (8000258 <loop_user_call+0x10c>)
 800018c:	795b      	ldrb	r3, [r3, #5]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d003      	beq.n	800019a <loop_user_call+0x4e>
			{
				huart2.Init.WordLength=UART_WORDLENGTH_9B;
 8000192:	4b33      	ldr	r3, [pc, #204]	; (8000260 <loop_user_call+0x114>)
 8000194:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000198:	609a      	str	r2, [r3, #8]
			}

			huart2.Init.StopBits = UART_STOPBITS_1;
 800019a:	4b31      	ldr	r3, [pc, #196]	; (8000260 <loop_user_call+0x114>)
 800019c:	2200      	movs	r2, #0
 800019e:	60da      	str	r2, [r3, #12]
			if(linecode.StopBits==2)
 80001a0:	4b2d      	ldr	r3, [pc, #180]	; (8000258 <loop_user_call+0x10c>)
 80001a2:	791b      	ldrb	r3, [r3, #4]
 80001a4:	2b02      	cmp	r3, #2
 80001a6:	d103      	bne.n	80001b0 <loop_user_call+0x64>
			{
				huart2.Init.StopBits=UART_STOPBITS_2;
 80001a8:	4b2d      	ldr	r3, [pc, #180]	; (8000260 <loop_user_call+0x114>)
 80001aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80001ae:	60da      	str	r2, [r3, #12]
			}


			huart2.Init.Parity = UART_PARITY_NONE;
 80001b0:	4b2b      	ldr	r3, [pc, #172]	; (8000260 <loop_user_call+0x114>)
 80001b2:	2200      	movs	r2, #0
 80001b4:	611a      	str	r2, [r3, #16]
			if(linecode.Parity==1)
 80001b6:	4b28      	ldr	r3, [pc, #160]	; (8000258 <loop_user_call+0x10c>)
 80001b8:	795b      	ldrb	r3, [r3, #5]
 80001ba:	2b01      	cmp	r3, #1
 80001bc:	d103      	bne.n	80001c6 <loop_user_call+0x7a>
				huart2.Init.Parity = UART_PARITY_ODD;
 80001be:	4b28      	ldr	r3, [pc, #160]	; (8000260 <loop_user_call+0x114>)
 80001c0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80001c4:	611a      	str	r2, [r3, #16]
			if(linecode.Parity==1)
 80001c6:	4b24      	ldr	r3, [pc, #144]	; (8000258 <loop_user_call+0x10c>)
 80001c8:	795b      	ldrb	r3, [r3, #5]
 80001ca:	2b01      	cmp	r3, #1
 80001cc:	d103      	bne.n	80001d6 <loop_user_call+0x8a>
				huart2.Init.Parity = UART_PARITY_EVEN;
 80001ce:	4b24      	ldr	r3, [pc, #144]	; (8000260 <loop_user_call+0x114>)
 80001d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80001d4:	611a      	str	r2, [r3, #16]



			huart2.Init.Mode = UART_MODE_TX_RX;
 80001d6:	4b22      	ldr	r3, [pc, #136]	; (8000260 <loop_user_call+0x114>)
 80001d8:	220c      	movs	r2, #12
 80001da:	615a      	str	r2, [r3, #20]

			huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;//不支持流控
 80001dc:	4b20      	ldr	r3, [pc, #128]	; (8000260 <loop_user_call+0x114>)
 80001de:	2200      	movs	r2, #0
 80001e0:	619a      	str	r2, [r3, #24]

			huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80001e2:	4b1f      	ldr	r3, [pc, #124]	; (8000260 <loop_user_call+0x114>)
 80001e4:	2200      	movs	r2, #0
 80001e6:	61da      	str	r2, [r3, #28]

			 if (HAL_UART_Init(&huart2) != HAL_OK)
 80001e8:	481d      	ldr	r0, [pc, #116]	; (8000260 <loop_user_call+0x114>)
 80001ea:	f002 fc04 	bl	80029f6 <HAL_UART_Init>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d02b      	beq.n	800024c <loop_user_call+0x100>
			  {//打开失败则使用默认设置
				  HAL_UART_DeInit(&huart2);
 80001f4:	481a      	ldr	r0, [pc, #104]	; (8000260 <loop_user_call+0x114>)
 80001f6:	f002 fc4b 	bl	8002a90 <HAL_UART_DeInit>
				  huart2.Instance = USART2;
 80001fa:	4b19      	ldr	r3, [pc, #100]	; (8000260 <loop_user_call+0x114>)
 80001fc:	4a19      	ldr	r2, [pc, #100]	; (8000264 <loop_user_call+0x118>)
 80001fe:	601a      	str	r2, [r3, #0]
				  huart2.Init.BaudRate = 115200;
 8000200:	4b17      	ldr	r3, [pc, #92]	; (8000260 <loop_user_call+0x114>)
 8000202:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000206:	605a      	str	r2, [r3, #4]
				  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000208:	4b15      	ldr	r3, [pc, #84]	; (8000260 <loop_user_call+0x114>)
 800020a:	2200      	movs	r2, #0
 800020c:	609a      	str	r2, [r3, #8]
				  huart2.Init.StopBits = UART_STOPBITS_1;
 800020e:	4b14      	ldr	r3, [pc, #80]	; (8000260 <loop_user_call+0x114>)
 8000210:	2200      	movs	r2, #0
 8000212:	60da      	str	r2, [r3, #12]
				  huart2.Init.Parity = UART_PARITY_NONE;
 8000214:	4b12      	ldr	r3, [pc, #72]	; (8000260 <loop_user_call+0x114>)
 8000216:	2200      	movs	r2, #0
 8000218:	611a      	str	r2, [r3, #16]
				  huart2.Init.Mode = UART_MODE_TX_RX;
 800021a:	4b11      	ldr	r3, [pc, #68]	; (8000260 <loop_user_call+0x114>)
 800021c:	220c      	movs	r2, #12
 800021e:	615a      	str	r2, [r3, #20]
				  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000220:	4b0f      	ldr	r3, [pc, #60]	; (8000260 <loop_user_call+0x114>)
 8000222:	2200      	movs	r2, #0
 8000224:	619a      	str	r2, [r3, #24]
				  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000226:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <loop_user_call+0x114>)
 8000228:	2200      	movs	r2, #0
 800022a:	61da      	str	r2, [r3, #28]
				  HAL_UART_Init(&huart2);
 800022c:	480c      	ldr	r0, [pc, #48]	; (8000260 <loop_user_call+0x114>)
 800022e:	f002 fbe2 	bl	80029f6 <HAL_UART_Init>
				  linecode.DataBits=8;
 8000232:	4b09      	ldr	r3, [pc, #36]	; (8000258 <loop_user_call+0x10c>)
 8000234:	2208      	movs	r2, #8
 8000236:	80da      	strh	r2, [r3, #6]
				  linecode.Parity=0;
 8000238:	4b07      	ldr	r3, [pc, #28]	; (8000258 <loop_user_call+0x10c>)
 800023a:	2200      	movs	r2, #0
 800023c:	715a      	strb	r2, [r3, #5]
				  linecode.Rate=115200;
 800023e:	4b06      	ldr	r3, [pc, #24]	; (8000258 <loop_user_call+0x10c>)
 8000240:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000244:	601a      	str	r2, [r3, #0]
				  linecode.StopBits=0;
 8000246:	4b04      	ldr	r3, [pc, #16]	; (8000258 <loop_user_call+0x10c>)
 8000248:	2200      	movs	r2, #0
 800024a:	711a      	strb	r2, [r3, #4]
			  }
		}
		linecode.IsUpdate=0;
 800024c:	4b02      	ldr	r3, [pc, #8]	; (8000258 <loop_user_call+0x10c>)
 800024e:	2200      	movs	r2, #0
 8000250:	721a      	strb	r2, [r3, #8]
	}
}
 8000252:	bf00      	nop
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	20000000 	.word	0x20000000
 800025c:	0016e35f 	.word	0x0016e35f
 8000260:	20000474 	.word	0x20000474
 8000264:	40004400 	.word	0x40004400

08000268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800026c:	f000 fade 	bl	800082c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000270:	f000 f80d 	bl	800028e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000274:	f000 f902 	bl	800047c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000278:	f000 f860 	bl	800033c <MX_I2C1_Init>
  MX_SPI1_Init();
 800027c:	f000 f89e 	bl	80003bc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000280:	f000 f8d2 	bl	8000428 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000284:	f005 f990 	bl	80055a8 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_user_call();
 8000288:	f7ff ff60 	bl	800014c <loop_user_call>
 800028c:	e7fc      	b.n	8000288 <main+0x20>

0800028e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028e:	b580      	push	{r7, lr}
 8000290:	b094      	sub	sp, #80	; 0x50
 8000292:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000294:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000298:	2228      	movs	r2, #40	; 0x28
 800029a:	2100      	movs	r1, #0
 800029c:	4618      	mov	r0, r3
 800029e:	f005 fe38 	bl	8005f12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a2:	f107 0314 	add.w	r3, r7, #20
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]
 80002b0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
 80002bc:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002be:	2302      	movs	r3, #2
 80002c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c2:	2301      	movs	r3, #1
 80002c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c6:	2310      	movs	r3, #16
 80002c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ca:	2302      	movs	r3, #2
 80002cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002ce:	2300      	movs	r3, #0
 80002d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002d2:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 80002d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002dc:	4618      	mov	r0, r3
 80002de:	f001 fe57 	bl	8001f90 <HAL_RCC_OscConfig>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002e8:	f000 f8ea 	bl	80004c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ec:	230f      	movs	r3, #15
 80002ee:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f0:	2302      	movs	r3, #2
 80002f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f4:	2300      	movs	r3, #0
 80002f6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002fc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fe:	2300      	movs	r3, #0
 8000300:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000302:	f107 0314 	add.w	r3, r7, #20
 8000306:	2101      	movs	r1, #1
 8000308:	4618      	mov	r0, r3
 800030a:	f002 f8c1 	bl	8002490 <HAL_RCC_ClockConfig>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000314:	f000 f8d4 	bl	80004c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000318:	2310      	movs	r3, #16
 800031a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800031c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000320:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	4618      	mov	r0, r3
 8000326:	f002 fa4f 	bl	80027c8 <HAL_RCCEx_PeriphCLKConfig>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000330:	f000 f8c6 	bl	80004c0 <Error_Handler>
  }
}
 8000334:	bf00      	nop
 8000336:	3750      	adds	r7, #80	; 0x50
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}

0800033c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  __HAL_RCC_I2C1_CLK_ENABLE();
 8000342:	4b1a      	ldr	r3, [pc, #104]	; (80003ac <MX_I2C1_Init+0x70>)
 8000344:	69db      	ldr	r3, [r3, #28]
 8000346:	4a19      	ldr	r2, [pc, #100]	; (80003ac <MX_I2C1_Init+0x70>)
 8000348:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800034c:	61d3      	str	r3, [r2, #28]
 800034e:	4b17      	ldr	r3, [pc, #92]	; (80003ac <MX_I2C1_Init+0x70>)
 8000350:	69db      	ldr	r3, [r3, #28]
 8000352:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000356:	607b      	str	r3, [r7, #4]
 8000358:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800035a:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <MX_I2C1_Init+0x74>)
 800035c:	4a15      	ldr	r2, [pc, #84]	; (80003b4 <MX_I2C1_Init+0x78>)
 800035e:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000360:	4b13      	ldr	r3, [pc, #76]	; (80003b0 <MX_I2C1_Init+0x74>)
 8000362:	4a15      	ldr	r2, [pc, #84]	; (80003b8 <MX_I2C1_Init+0x7c>)
 8000364:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000366:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <MX_I2C1_Init+0x74>)
 8000368:	2200      	movs	r2, #0
 800036a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800036c:	4b10      	ldr	r3, [pc, #64]	; (80003b0 <MX_I2C1_Init+0x74>)
 800036e:	2200      	movs	r2, #0
 8000370:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000372:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <MX_I2C1_Init+0x74>)
 8000374:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000378:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800037a:	4b0d      	ldr	r3, [pc, #52]	; (80003b0 <MX_I2C1_Init+0x74>)
 800037c:	2200      	movs	r2, #0
 800037e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000380:	4b0b      	ldr	r3, [pc, #44]	; (80003b0 <MX_I2C1_Init+0x74>)
 8000382:	2200      	movs	r2, #0
 8000384:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000386:	4b0a      	ldr	r3, [pc, #40]	; (80003b0 <MX_I2C1_Init+0x74>)
 8000388:	2200      	movs	r2, #0
 800038a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800038c:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <MX_I2C1_Init+0x74>)
 800038e:	2200      	movs	r2, #0
 8000390:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000392:	4807      	ldr	r0, [pc, #28]	; (80003b0 <MX_I2C1_Init+0x74>)
 8000394:	f000 fdf2 	bl	8000f7c <HAL_I2C_Init>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_I2C1_Init+0x66>
  {
    Error_Handler();
 800039e:	f000 f88f 	bl	80004c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003a2:	bf00      	nop
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40021000 	.word	0x40021000
 80003b0:	200003c8 	.word	0x200003c8
 80003b4:	40005400 	.word	0x40005400
 80003b8:	000186a0 	.word	0x000186a0

080003bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003c0:	4b17      	ldr	r3, [pc, #92]	; (8000420 <MX_SPI1_Init+0x64>)
 80003c2:	4a18      	ldr	r2, [pc, #96]	; (8000424 <MX_SPI1_Init+0x68>)
 80003c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003c6:	4b16      	ldr	r3, [pc, #88]	; (8000420 <MX_SPI1_Init+0x64>)
 80003c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003ce:	4b14      	ldr	r3, [pc, #80]	; (8000420 <MX_SPI1_Init+0x64>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003d4:	4b12      	ldr	r3, [pc, #72]	; (8000420 <MX_SPI1_Init+0x64>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003da:	4b11      	ldr	r3, [pc, #68]	; (8000420 <MX_SPI1_Init+0x64>)
 80003dc:	2200      	movs	r2, #0
 80003de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003e0:	4b0f      	ldr	r3, [pc, #60]	; (8000420 <MX_SPI1_Init+0x64>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80003e6:	4b0e      	ldr	r3, [pc, #56]	; (8000420 <MX_SPI1_Init+0x64>)
 80003e8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80003ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80003ee:	4b0c      	ldr	r3, [pc, #48]	; (8000420 <MX_SPI1_Init+0x64>)
 80003f0:	2220      	movs	r2, #32
 80003f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003f4:	4b0a      	ldr	r3, [pc, #40]	; (8000420 <MX_SPI1_Init+0x64>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003fa:	4b09      	ldr	r3, [pc, #36]	; (8000420 <MX_SPI1_Init+0x64>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000400:	4b07      	ldr	r3, [pc, #28]	; (8000420 <MX_SPI1_Init+0x64>)
 8000402:	2200      	movs	r2, #0
 8000404:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000406:	4b06      	ldr	r3, [pc, #24]	; (8000420 <MX_SPI1_Init+0x64>)
 8000408:	220a      	movs	r2, #10
 800040a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800040c:	4804      	ldr	r0, [pc, #16]	; (8000420 <MX_SPI1_Init+0x64>)
 800040e:	f002 fa91 	bl	8002934 <HAL_SPI_Init>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000418:	f000 f852 	bl	80004c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800041c:	bf00      	nop
 800041e:	bd80      	pop	{r7, pc}
 8000420:	2000041c 	.word	0x2000041c
 8000424:	40013000 	.word	0x40013000

08000428 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800042c:	4b11      	ldr	r3, [pc, #68]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 800042e:	4a12      	ldr	r2, [pc, #72]	; (8000478 <MX_USART2_UART_Init+0x50>)
 8000430:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000432:	4b10      	ldr	r3, [pc, #64]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 8000434:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000438:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800043a:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 800043c:	2200      	movs	r2, #0
 800043e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000440:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 8000442:	2200      	movs	r2, #0
 8000444:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000446:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 8000448:	2200      	movs	r2, #0
 800044a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800044c:	4b09      	ldr	r3, [pc, #36]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 800044e:	220c      	movs	r2, #12
 8000450:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000452:	4b08      	ldr	r3, [pc, #32]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 8000454:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000458:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800045a:	4b06      	ldr	r3, [pc, #24]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 800045c:	2200      	movs	r2, #0
 800045e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000460:	4804      	ldr	r0, [pc, #16]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 8000462:	f002 fac8 	bl	80029f6 <HAL_UART_Init>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 800046c:	f000 f828 	bl	80004c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}
 8000474:	20000474 	.word	0x20000474
 8000478:	40004400 	.word	0x40004400

0800047c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000482:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <MX_GPIO_Init+0x40>)
 8000484:	699b      	ldr	r3, [r3, #24]
 8000486:	4a0d      	ldr	r2, [pc, #52]	; (80004bc <MX_GPIO_Init+0x40>)
 8000488:	f043 0304 	orr.w	r3, r3, #4
 800048c:	6193      	str	r3, [r2, #24]
 800048e:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <MX_GPIO_Init+0x40>)
 8000490:	699b      	ldr	r3, [r3, #24]
 8000492:	f003 0304 	and.w	r3, r3, #4
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800049a:	4b08      	ldr	r3, [pc, #32]	; (80004bc <MX_GPIO_Init+0x40>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	4a07      	ldr	r2, [pc, #28]	; (80004bc <MX_GPIO_Init+0x40>)
 80004a0:	f043 0308 	orr.w	r3, r3, #8
 80004a4:	6193      	str	r3, [r2, #24]
 80004a6:	4b05      	ldr	r3, [pc, #20]	; (80004bc <MX_GPIO_Init+0x40>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	f003 0308 	and.w	r3, r3, #8
 80004ae:	603b      	str	r3, [r7, #0]
 80004b0:	683b      	ldr	r3, [r7, #0]

}
 80004b2:	bf00      	nop
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr
 80004bc:	40021000 	.word	0x40021000

080004c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr

080004cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004d2:	4b15      	ldr	r3, [pc, #84]	; (8000528 <HAL_MspInit+0x5c>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	4a14      	ldr	r2, [pc, #80]	; (8000528 <HAL_MspInit+0x5c>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	6193      	str	r3, [r2, #24]
 80004de:	4b12      	ldr	r3, [pc, #72]	; (8000528 <HAL_MspInit+0x5c>)
 80004e0:	699b      	ldr	r3, [r3, #24]
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ea:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <HAL_MspInit+0x5c>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	4a0e      	ldr	r2, [pc, #56]	; (8000528 <HAL_MspInit+0x5c>)
 80004f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004f4:	61d3      	str	r3, [r2, #28]
 80004f6:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <HAL_MspInit+0x5c>)
 80004f8:	69db      	ldr	r3, [r3, #28]
 80004fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000502:	4b0a      	ldr	r3, [pc, #40]	; (800052c <HAL_MspInit+0x60>)
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	4a04      	ldr	r2, [pc, #16]	; (800052c <HAL_MspInit+0x60>)
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr
 8000528:	40021000 	.word	0x40021000
 800052c:	40010000 	.word	0x40010000

08000530 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000538:	f107 0310 	add.w	r3, r7, #16
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a15      	ldr	r2, [pc, #84]	; (80005a0 <HAL_I2C_MspInit+0x70>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d123      	bne.n	8000598 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000550:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <HAL_I2C_MspInit+0x74>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	4a13      	ldr	r2, [pc, #76]	; (80005a4 <HAL_I2C_MspInit+0x74>)
 8000556:	f043 0308 	orr.w	r3, r3, #8
 800055a:	6193      	str	r3, [r2, #24]
 800055c:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <HAL_I2C_MspInit+0x74>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	f003 0308 	and.w	r3, r3, #8
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000568:	23c0      	movs	r3, #192	; 0xc0
 800056a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800056c:	2312      	movs	r3, #18
 800056e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000570:	2303      	movs	r3, #3
 8000572:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000574:	f107 0310 	add.w	r3, r7, #16
 8000578:	4619      	mov	r1, r3
 800057a:	480b      	ldr	r0, [pc, #44]	; (80005a8 <HAL_I2C_MspInit+0x78>)
 800057c:	f000 fae8 	bl	8000b50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000580:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <HAL_I2C_MspInit+0x74>)
 8000582:	69db      	ldr	r3, [r3, #28]
 8000584:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <HAL_I2C_MspInit+0x74>)
 8000586:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800058a:	61d3      	str	r3, [r2, #28]
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <HAL_I2C_MspInit+0x74>)
 800058e:	69db      	ldr	r3, [r3, #28]
 8000590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000598:	bf00      	nop
 800059a:	3720      	adds	r7, #32
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40005400 	.word	0x40005400
 80005a4:	40021000 	.word	0x40021000
 80005a8:	40010c00 	.word	0x40010c00

080005ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b4:	f107 0310 	add.w	r3, r7, #16
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a1b      	ldr	r2, [pc, #108]	; (8000634 <HAL_SPI_MspInit+0x88>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d12f      	bne.n	800062c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005cc:	4b1a      	ldr	r3, [pc, #104]	; (8000638 <HAL_SPI_MspInit+0x8c>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	4a19      	ldr	r2, [pc, #100]	; (8000638 <HAL_SPI_MspInit+0x8c>)
 80005d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005d6:	6193      	str	r3, [r2, #24]
 80005d8:	4b17      	ldr	r3, [pc, #92]	; (8000638 <HAL_SPI_MspInit+0x8c>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e4:	4b14      	ldr	r3, [pc, #80]	; (8000638 <HAL_SPI_MspInit+0x8c>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	4a13      	ldr	r2, [pc, #76]	; (8000638 <HAL_SPI_MspInit+0x8c>)
 80005ea:	f043 0304 	orr.w	r3, r3, #4
 80005ee:	6193      	str	r3, [r2, #24]
 80005f0:	4b11      	ldr	r3, [pc, #68]	; (8000638 <HAL_SPI_MspInit+0x8c>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	f003 0304 	and.w	r3, r3, #4
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80005fc:	23b0      	movs	r3, #176	; 0xb0
 80005fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000600:	2302      	movs	r3, #2
 8000602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000604:	2303      	movs	r3, #3
 8000606:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000608:	f107 0310 	add.w	r3, r7, #16
 800060c:	4619      	mov	r1, r3
 800060e:	480b      	ldr	r0, [pc, #44]	; (800063c <HAL_SPI_MspInit+0x90>)
 8000610:	f000 fa9e 	bl	8000b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000614:	2340      	movs	r3, #64	; 0x40
 8000616:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	4619      	mov	r1, r3
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <HAL_SPI_MspInit+0x90>)
 8000628:	f000 fa92 	bl	8000b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800062c:	bf00      	nop
 800062e:	3720      	adds	r7, #32
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40013000 	.word	0x40013000
 8000638:	40021000 	.word	0x40021000
 800063c:	40010800 	.word	0x40010800

08000640 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 0310 	add.w	r3, r7, #16
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a1b      	ldr	r2, [pc, #108]	; (80006c8 <HAL_UART_MspInit+0x88>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d12f      	bne.n	80006c0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000660:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <HAL_UART_MspInit+0x8c>)
 8000662:	69db      	ldr	r3, [r3, #28]
 8000664:	4a19      	ldr	r2, [pc, #100]	; (80006cc <HAL_UART_MspInit+0x8c>)
 8000666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800066a:	61d3      	str	r3, [r2, #28]
 800066c:	4b17      	ldr	r3, [pc, #92]	; (80006cc <HAL_UART_MspInit+0x8c>)
 800066e:	69db      	ldr	r3, [r3, #28]
 8000670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000678:	4b14      	ldr	r3, [pc, #80]	; (80006cc <HAL_UART_MspInit+0x8c>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	4a13      	ldr	r2, [pc, #76]	; (80006cc <HAL_UART_MspInit+0x8c>)
 800067e:	f043 0304 	orr.w	r3, r3, #4
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b11      	ldr	r3, [pc, #68]	; (80006cc <HAL_UART_MspInit+0x8c>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f003 0304 	and.w	r3, r3, #4
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> USART2_CTS
    PA1     ------> USART2_RTS
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000690:	2309      	movs	r3, #9
 8000692:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069c:	f107 0310 	add.w	r3, r7, #16
 80006a0:	4619      	mov	r1, r3
 80006a2:	480b      	ldr	r0, [pc, #44]	; (80006d0 <HAL_UART_MspInit+0x90>)
 80006a4:	f000 fa54 	bl	8000b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80006a8:	2306      	movs	r3, #6
 80006aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ac:	2302      	movs	r3, #2
 80006ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b0:	2303      	movs	r3, #3
 80006b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	4619      	mov	r1, r3
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <HAL_UART_MspInit+0x90>)
 80006bc:	f000 fa48 	bl	8000b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006c0:	bf00      	nop
 80006c2:	3720      	adds	r7, #32
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40004400 	.word	0x40004400
 80006cc:	40021000 	.word	0x40021000
 80006d0:	40010800 	.word	0x40010800

080006d4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a08      	ldr	r2, [pc, #32]	; (8000704 <HAL_UART_MspDeInit+0x30>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d109      	bne.n	80006fa <HAL_UART_MspDeInit+0x26>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <HAL_UART_MspDeInit+0x34>)
 80006e8:	69db      	ldr	r3, [r3, #28]
 80006ea:	4a07      	ldr	r2, [pc, #28]	; (8000708 <HAL_UART_MspDeInit+0x34>)
 80006ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80006f0:	61d3      	str	r3, [r2, #28]
    PA0-WKUP     ------> USART2_CTS
    PA1     ------> USART2_RTS
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 80006f2:	210f      	movs	r1, #15
 80006f4:	4805      	ldr	r0, [pc, #20]	; (800070c <HAL_UART_MspDeInit+0x38>)
 80006f6:	f000 fb85 	bl	8000e04 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40004400 	.word	0x40004400
 8000708:	40021000 	.word	0x40021000
 800070c:	40010800 	.word	0x40010800

08000710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <HardFault_Handler+0x4>

08000722 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000726:	e7fe      	b.n	8000726 <MemManage_Handler+0x4>

08000728 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800072c:	e7fe      	b.n	800072c <BusFault_Handler+0x4>

0800072e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000732:	e7fe      	b.n	8000732 <UsageFault_Handler+0x4>

08000734 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr

08000740 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr

08000758 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800075c:	f000 f8ac 	bl	80008b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}

08000764 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000768:	4802      	ldr	r0, [pc, #8]	; (8000774 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800076a:	f000 fe36 	bl	80013da <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	2000114c 	.word	0x2000114c

08000778 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <SystemInit+0x5c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a14      	ldr	r2, [pc, #80]	; (80007d4 <SystemInit+0x5c>)
 8000782:	f043 0301 	orr.w	r3, r3, #1
 8000786:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <SystemInit+0x5c>)
 800078a:	685a      	ldr	r2, [r3, #4]
 800078c:	4911      	ldr	r1, [pc, #68]	; (80007d4 <SystemInit+0x5c>)
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <SystemInit+0x60>)
 8000790:	4013      	ands	r3, r2
 8000792:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <SystemInit+0x5c>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a0e      	ldr	r2, [pc, #56]	; (80007d4 <SystemInit+0x5c>)
 800079a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800079e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007a2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007a4:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <SystemInit+0x5c>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <SystemInit+0x5c>)
 80007aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007ae:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <SystemInit+0x5c>)
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	4a07      	ldr	r2, [pc, #28]	; (80007d4 <SystemInit+0x5c>)
 80007b6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80007ba:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <SystemInit+0x5c>)
 80007be:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80007c2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <SystemInit+0x64>)
 80007c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007ca:	609a      	str	r2, [r3, #8]
#endif 
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr
 80007d4:	40021000 	.word	0x40021000
 80007d8:	f8ff0000 	.word	0xf8ff0000
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80007e0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007e2:	e003      	b.n	80007ec <LoopCopyDataInit>

080007e4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80007e4:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80007e6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80007e8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80007ea:	3104      	adds	r1, #4

080007ec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80007ec:	480a      	ldr	r0, [pc, #40]	; (8000818 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80007f0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007f2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80007f4:	d3f6      	bcc.n	80007e4 <CopyDataInit>
  ldr r2, =_sbss
 80007f6:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80007f8:	e002      	b.n	8000800 <LoopFillZerobss>

080007fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007fa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80007fc:	f842 3b04 	str.w	r3, [r2], #4

08000800 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000802:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000804:	d3f9      	bcc.n	80007fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000806:	f7ff ffb7 	bl	8000778 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800080a:	f005 fb53 	bl	8005eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800080e:	f7ff fd2b 	bl	8000268 <main>
  bx lr
 8000812:	4770      	bx	lr
  ldr r3, =_sidata
 8000814:	08005f90 	.word	0x08005f90
  ldr r0, =_sdata
 8000818:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800081c:	20000188 	.word	0x20000188
  ldr r2, =_sbss
 8000820:	20000188 	.word	0x20000188
  ldr r3, = _ebss
 8000824:	200013b8 	.word	0x200013b8

08000828 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000828:	e7fe      	b.n	8000828 <ADC1_2_IRQHandler>
	...

0800082c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000830:	4b08      	ldr	r3, [pc, #32]	; (8000854 <HAL_Init+0x28>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a07      	ldr	r2, [pc, #28]	; (8000854 <HAL_Init+0x28>)
 8000836:	f043 0310 	orr.w	r3, r3, #16
 800083a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800083c:	2003      	movs	r0, #3
 800083e:	f000 f945 	bl	8000acc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000842:	2000      	movs	r0, #0
 8000844:	f000 f808 	bl	8000858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000848:	f7ff fe40 	bl	80004cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40022000 	.word	0x40022000

08000858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <HAL_InitTick+0x54>)
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <HAL_InitTick+0x58>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4619      	mov	r1, r3
 800086a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800086e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000872:	fbb2 f3f3 	udiv	r3, r2, r3
 8000876:	4618      	mov	r0, r3
 8000878:	f000 f95d 	bl	8000b36 <HAL_SYSTICK_Config>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000882:	2301      	movs	r3, #1
 8000884:	e00e      	b.n	80008a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2b0f      	cmp	r3, #15
 800088a:	d80a      	bhi.n	80008a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800088c:	2200      	movs	r2, #0
 800088e:	6879      	ldr	r1, [r7, #4]
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	f000 f925 	bl	8000ae2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000898:	4a06      	ldr	r2, [pc, #24]	; (80008b4 <HAL_InitTick+0x5c>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800089e:	2300      	movs	r3, #0
 80008a0:	e000      	b.n	80008a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	2000000c 	.word	0x2000000c
 80008b0:	20000014 	.word	0x20000014
 80008b4:	20000010 	.word	0x20000010

080008b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <HAL_IncTick+0x1c>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	461a      	mov	r2, r3
 80008c2:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <HAL_IncTick+0x20>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4413      	add	r3, r2
 80008c8:	4a03      	ldr	r2, [pc, #12]	; (80008d8 <HAL_IncTick+0x20>)
 80008ca:	6013      	str	r3, [r2, #0]
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr
 80008d4:	20000014 	.word	0x20000014
 80008d8:	200004b4 	.word	0x200004b4

080008dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  return uwTick;
 80008e0:	4b02      	ldr	r3, [pc, #8]	; (80008ec <HAL_GetTick+0x10>)
 80008e2:	681b      	ldr	r3, [r3, #0]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr
 80008ec:	200004b4 	.word	0x200004b4

080008f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008f8:	f7ff fff0 	bl	80008dc <HAL_GetTick>
 80008fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000908:	d005      	beq.n	8000916 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_Delay+0x40>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	461a      	mov	r2, r3
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	4413      	add	r3, r2
 8000914:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000916:	bf00      	nop
 8000918:	f7ff ffe0 	bl	80008dc <HAL_GetTick>
 800091c:	4602      	mov	r2, r0
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	68fa      	ldr	r2, [r7, #12]
 8000924:	429a      	cmp	r2, r3
 8000926:	d8f7      	bhi.n	8000918 <HAL_Delay+0x28>
  {
  }
}
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000014 	.word	0x20000014

08000934 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	f003 0307 	and.w	r3, r3, #7
 8000942:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <__NVIC_SetPriorityGrouping+0x44>)
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800094a:	68ba      	ldr	r2, [r7, #8]
 800094c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000950:	4013      	ands	r3, r2
 8000952:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800095c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000966:	4a04      	ldr	r2, [pc, #16]	; (8000978 <__NVIC_SetPriorityGrouping+0x44>)
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	60d3      	str	r3, [r2, #12]
}
 800096c:	bf00      	nop
 800096e:	3714      	adds	r7, #20
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000980:	4b04      	ldr	r3, [pc, #16]	; (8000994 <__NVIC_GetPriorityGrouping+0x18>)
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	0a1b      	lsrs	r3, r3, #8
 8000986:	f003 0307 	and.w	r3, r3, #7
}
 800098a:	4618      	mov	r0, r3
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	db0b      	blt.n	80009c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	f003 021f 	and.w	r2, r3, #31
 80009b0:	4906      	ldr	r1, [pc, #24]	; (80009cc <__NVIC_EnableIRQ+0x34>)
 80009b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b6:	095b      	lsrs	r3, r3, #5
 80009b8:	2001      	movs	r0, #1
 80009ba:	fa00 f202 	lsl.w	r2, r0, r2
 80009be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr
 80009cc:	e000e100 	.word	0xe000e100

080009d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	6039      	str	r1, [r7, #0]
 80009da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	db0a      	blt.n	80009fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	490c      	ldr	r1, [pc, #48]	; (8000a1c <__NVIC_SetPriority+0x4c>)
 80009ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ee:	0112      	lsls	r2, r2, #4
 80009f0:	b2d2      	uxtb	r2, r2
 80009f2:	440b      	add	r3, r1
 80009f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009f8:	e00a      	b.n	8000a10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	b2da      	uxtb	r2, r3
 80009fe:	4908      	ldr	r1, [pc, #32]	; (8000a20 <__NVIC_SetPriority+0x50>)
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	f003 030f 	and.w	r3, r3, #15
 8000a06:	3b04      	subs	r3, #4
 8000a08:	0112      	lsls	r2, r2, #4
 8000a0a:	b2d2      	uxtb	r2, r2
 8000a0c:	440b      	add	r3, r1
 8000a0e:	761a      	strb	r2, [r3, #24]
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bc80      	pop	{r7}
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000e100 	.word	0xe000e100
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b089      	sub	sp, #36	; 0x24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	f1c3 0307 	rsb	r3, r3, #7
 8000a3e:	2b04      	cmp	r3, #4
 8000a40:	bf28      	it	cs
 8000a42:	2304      	movcs	r3, #4
 8000a44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	3304      	adds	r3, #4
 8000a4a:	2b06      	cmp	r3, #6
 8000a4c:	d902      	bls.n	8000a54 <NVIC_EncodePriority+0x30>
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	3b03      	subs	r3, #3
 8000a52:	e000      	b.n	8000a56 <NVIC_EncodePriority+0x32>
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a58:	f04f 32ff 	mov.w	r2, #4294967295
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	43da      	mvns	r2, r3
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	401a      	ands	r2, r3
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	fa01 f303 	lsl.w	r3, r1, r3
 8000a76:	43d9      	mvns	r1, r3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a7c:	4313      	orrs	r3, r2
         );
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3724      	adds	r7, #36	; 0x24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr

08000a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a98:	d301      	bcc.n	8000a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e00f      	b.n	8000abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ac8 <SysTick_Config+0x40>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aa6:	210f      	movs	r1, #15
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	f7ff ff90 	bl	80009d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <SysTick_Config+0x40>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ab6:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <SysTick_Config+0x40>)
 8000ab8:	2207      	movs	r2, #7
 8000aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	e000e010 	.word	0xe000e010

08000acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f7ff ff2d 	bl	8000934 <__NVIC_SetPriorityGrouping>
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b086      	sub	sp, #24
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	4603      	mov	r3, r0
 8000aea:	60b9      	str	r1, [r7, #8]
 8000aec:	607a      	str	r2, [r7, #4]
 8000aee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000af4:	f7ff ff42 	bl	800097c <__NVIC_GetPriorityGrouping>
 8000af8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	68b9      	ldr	r1, [r7, #8]
 8000afe:	6978      	ldr	r0, [r7, #20]
 8000b00:	f7ff ff90 	bl	8000a24 <NVIC_EncodePriority>
 8000b04:	4602      	mov	r2, r0
 8000b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ff5f 	bl	80009d0 <__NVIC_SetPriority>
}
 8000b12:	bf00      	nop
 8000b14:	3718      	adds	r7, #24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b082      	sub	sp, #8
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	4603      	mov	r3, r0
 8000b22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ff35 	bl	8000998 <__NVIC_EnableIRQ>
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f7ff ffa2 	bl	8000a88 <SysTick_Config>
 8000b44:	4603      	mov	r3, r0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b08b      	sub	sp, #44	; 0x2c
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b62:	e127      	b.n	8000db4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b64:	2201      	movs	r2, #1
 8000b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	69fa      	ldr	r2, [r7, #28]
 8000b74:	4013      	ands	r3, r2
 8000b76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b78:	69ba      	ldr	r2, [r7, #24]
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	f040 8116 	bne.w	8000dae <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	2b12      	cmp	r3, #18
 8000b88:	d034      	beq.n	8000bf4 <HAL_GPIO_Init+0xa4>
 8000b8a:	2b12      	cmp	r3, #18
 8000b8c:	d80d      	bhi.n	8000baa <HAL_GPIO_Init+0x5a>
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d02b      	beq.n	8000bea <HAL_GPIO_Init+0x9a>
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	d804      	bhi.n	8000ba0 <HAL_GPIO_Init+0x50>
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d031      	beq.n	8000bfe <HAL_GPIO_Init+0xae>
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d01c      	beq.n	8000bd8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b9e:	e048      	b.n	8000c32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ba0:	2b03      	cmp	r3, #3
 8000ba2:	d043      	beq.n	8000c2c <HAL_GPIO_Init+0xdc>
 8000ba4:	2b11      	cmp	r3, #17
 8000ba6:	d01b      	beq.n	8000be0 <HAL_GPIO_Init+0x90>
          break;
 8000ba8:	e043      	b.n	8000c32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000baa:	4a89      	ldr	r2, [pc, #548]	; (8000dd0 <HAL_GPIO_Init+0x280>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d026      	beq.n	8000bfe <HAL_GPIO_Init+0xae>
 8000bb0:	4a87      	ldr	r2, [pc, #540]	; (8000dd0 <HAL_GPIO_Init+0x280>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d806      	bhi.n	8000bc4 <HAL_GPIO_Init+0x74>
 8000bb6:	4a87      	ldr	r2, [pc, #540]	; (8000dd4 <HAL_GPIO_Init+0x284>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d020      	beq.n	8000bfe <HAL_GPIO_Init+0xae>
 8000bbc:	4a86      	ldr	r2, [pc, #536]	; (8000dd8 <HAL_GPIO_Init+0x288>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d01d      	beq.n	8000bfe <HAL_GPIO_Init+0xae>
          break;
 8000bc2:	e036      	b.n	8000c32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000bc4:	4a85      	ldr	r2, [pc, #532]	; (8000ddc <HAL_GPIO_Init+0x28c>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d019      	beq.n	8000bfe <HAL_GPIO_Init+0xae>
 8000bca:	4a85      	ldr	r2, [pc, #532]	; (8000de0 <HAL_GPIO_Init+0x290>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d016      	beq.n	8000bfe <HAL_GPIO_Init+0xae>
 8000bd0:	4a84      	ldr	r2, [pc, #528]	; (8000de4 <HAL_GPIO_Init+0x294>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d013      	beq.n	8000bfe <HAL_GPIO_Init+0xae>
          break;
 8000bd6:	e02c      	b.n	8000c32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	623b      	str	r3, [r7, #32]
          break;
 8000bde:	e028      	b.n	8000c32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	3304      	adds	r3, #4
 8000be6:	623b      	str	r3, [r7, #32]
          break;
 8000be8:	e023      	b.n	8000c32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	3308      	adds	r3, #8
 8000bf0:	623b      	str	r3, [r7, #32]
          break;
 8000bf2:	e01e      	b.n	8000c32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	330c      	adds	r3, #12
 8000bfa:	623b      	str	r3, [r7, #32]
          break;
 8000bfc:	e019      	b.n	8000c32 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d102      	bne.n	8000c0c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c06:	2304      	movs	r3, #4
 8000c08:	623b      	str	r3, [r7, #32]
          break;
 8000c0a:	e012      	b.n	8000c32 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d105      	bne.n	8000c20 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c14:	2308      	movs	r3, #8
 8000c16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	69fa      	ldr	r2, [r7, #28]
 8000c1c:	611a      	str	r2, [r3, #16]
          break;
 8000c1e:	e008      	b.n	8000c32 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c20:	2308      	movs	r3, #8
 8000c22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	69fa      	ldr	r2, [r7, #28]
 8000c28:	615a      	str	r2, [r3, #20]
          break;
 8000c2a:	e002      	b.n	8000c32 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	623b      	str	r3, [r7, #32]
          break;
 8000c30:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	2bff      	cmp	r3, #255	; 0xff
 8000c36:	d801      	bhi.n	8000c3c <HAL_GPIO_Init+0xec>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	e001      	b.n	8000c40 <HAL_GPIO_Init+0xf0>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3304      	adds	r3, #4
 8000c40:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	2bff      	cmp	r3, #255	; 0xff
 8000c46:	d802      	bhi.n	8000c4e <HAL_GPIO_Init+0xfe>
 8000c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	e002      	b.n	8000c54 <HAL_GPIO_Init+0x104>
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c50:	3b08      	subs	r3, #8
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	210f      	movs	r1, #15
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c62:	43db      	mvns	r3, r3
 8000c64:	401a      	ands	r2, r3
 8000c66:	6a39      	ldr	r1, [r7, #32]
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6e:	431a      	orrs	r2, r3
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	f000 8096 	beq.w	8000dae <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c82:	4b59      	ldr	r3, [pc, #356]	; (8000de8 <HAL_GPIO_Init+0x298>)
 8000c84:	699b      	ldr	r3, [r3, #24]
 8000c86:	4a58      	ldr	r2, [pc, #352]	; (8000de8 <HAL_GPIO_Init+0x298>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6193      	str	r3, [r2, #24]
 8000c8e:	4b56      	ldr	r3, [pc, #344]	; (8000de8 <HAL_GPIO_Init+0x298>)
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c9a:	4a54      	ldr	r2, [pc, #336]	; (8000dec <HAL_GPIO_Init+0x29c>)
 8000c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9e:	089b      	lsrs	r3, r3, #2
 8000ca0:	3302      	adds	r3, #2
 8000ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000caa:	f003 0303 	and.w	r3, r3, #3
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	220f      	movs	r2, #15
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a4b      	ldr	r2, [pc, #300]	; (8000df0 <HAL_GPIO_Init+0x2a0>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d013      	beq.n	8000cee <HAL_GPIO_Init+0x19e>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a4a      	ldr	r2, [pc, #296]	; (8000df4 <HAL_GPIO_Init+0x2a4>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d00d      	beq.n	8000cea <HAL_GPIO_Init+0x19a>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a49      	ldr	r2, [pc, #292]	; (8000df8 <HAL_GPIO_Init+0x2a8>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d007      	beq.n	8000ce6 <HAL_GPIO_Init+0x196>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a48      	ldr	r2, [pc, #288]	; (8000dfc <HAL_GPIO_Init+0x2ac>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d101      	bne.n	8000ce2 <HAL_GPIO_Init+0x192>
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e006      	b.n	8000cf0 <HAL_GPIO_Init+0x1a0>
 8000ce2:	2304      	movs	r3, #4
 8000ce4:	e004      	b.n	8000cf0 <HAL_GPIO_Init+0x1a0>
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	e002      	b.n	8000cf0 <HAL_GPIO_Init+0x1a0>
 8000cea:	2301      	movs	r3, #1
 8000cec:	e000      	b.n	8000cf0 <HAL_GPIO_Init+0x1a0>
 8000cee:	2300      	movs	r3, #0
 8000cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cf2:	f002 0203 	and.w	r2, r2, #3
 8000cf6:	0092      	lsls	r2, r2, #2
 8000cf8:	4093      	lsls	r3, r2
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d00:	493a      	ldr	r1, [pc, #232]	; (8000dec <HAL_GPIO_Init+0x29c>)
 8000d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d04:	089b      	lsrs	r3, r3, #2
 8000d06:	3302      	adds	r3, #2
 8000d08:	68fa      	ldr	r2, [r7, #12]
 8000d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d006      	beq.n	8000d28 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d1a:	4b39      	ldr	r3, [pc, #228]	; (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	4938      	ldr	r1, [pc, #224]	; (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	600b      	str	r3, [r1, #0]
 8000d26:	e006      	b.n	8000d36 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d28:	4b35      	ldr	r3, [pc, #212]	; (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	4933      	ldr	r1, [pc, #204]	; (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000d32:	4013      	ands	r3, r2
 8000d34:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d006      	beq.n	8000d50 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d42:	4b2f      	ldr	r3, [pc, #188]	; (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	492e      	ldr	r1, [pc, #184]	; (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	604b      	str	r3, [r1, #4]
 8000d4e:	e006      	b.n	8000d5e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d50:	4b2b      	ldr	r3, [pc, #172]	; (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000d52:	685a      	ldr	r2, [r3, #4]
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	43db      	mvns	r3, r3
 8000d58:	4929      	ldr	r1, [pc, #164]	; (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d006      	beq.n	8000d78 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d6a:	4b25      	ldr	r3, [pc, #148]	; (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000d6c:	689a      	ldr	r2, [r3, #8]
 8000d6e:	4924      	ldr	r1, [pc, #144]	; (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	608b      	str	r3, [r1, #8]
 8000d76:	e006      	b.n	8000d86 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d78:	4b21      	ldr	r3, [pc, #132]	; (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	491f      	ldr	r1, [pc, #124]	; (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000d82:	4013      	ands	r3, r2
 8000d84:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d006      	beq.n	8000da0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d92:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000d94:	68da      	ldr	r2, [r3, #12]
 8000d96:	491a      	ldr	r1, [pc, #104]	; (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	60cb      	str	r3, [r1, #12]
 8000d9e:	e006      	b.n	8000dae <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000da0:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000da2:	68da      	ldr	r2, [r3, #12]
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	43db      	mvns	r3, r3
 8000da8:	4915      	ldr	r1, [pc, #84]	; (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000daa:	4013      	ands	r3, r2
 8000dac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	3301      	adds	r3, #1
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dba:	fa22 f303 	lsr.w	r3, r2, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f47f aed0 	bne.w	8000b64 <HAL_GPIO_Init+0x14>
  }
}
 8000dc4:	bf00      	nop
 8000dc6:	372c      	adds	r7, #44	; 0x2c
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	10210000 	.word	0x10210000
 8000dd4:	10110000 	.word	0x10110000
 8000dd8:	10120000 	.word	0x10120000
 8000ddc:	10310000 	.word	0x10310000
 8000de0:	10320000 	.word	0x10320000
 8000de4:	10220000 	.word	0x10220000
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40010000 	.word	0x40010000
 8000df0:	40010800 	.word	0x40010800
 8000df4:	40010c00 	.word	0x40010c00
 8000df8:	40011000 	.word	0x40011000
 8000dfc:	40011400 	.word	0x40011400
 8000e00:	40010400 	.word	0x40010400

08000e04 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	; 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8000e12:	e09a      	b.n	8000f4a <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000e14:	2201      	movs	r2, #1
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	683a      	ldr	r2, [r7, #0]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	f000 808d 	beq.w	8000f44 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8000e2a:	4a4e      	ldr	r2, [pc, #312]	; (8000f64 <HAL_GPIO_DeInit+0x160>)
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	089b      	lsrs	r3, r3, #2
 8000e30:	3302      	adds	r3, #2
 8000e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e36:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f003 0303 	and.w	r3, r3, #3
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	220f      	movs	r2, #15
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	697a      	ldr	r2, [r7, #20]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a46      	ldr	r2, [pc, #280]	; (8000f68 <HAL_GPIO_DeInit+0x164>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d013      	beq.n	8000e7c <HAL_GPIO_DeInit+0x78>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a45      	ldr	r2, [pc, #276]	; (8000f6c <HAL_GPIO_DeInit+0x168>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d00d      	beq.n	8000e78 <HAL_GPIO_DeInit+0x74>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a44      	ldr	r2, [pc, #272]	; (8000f70 <HAL_GPIO_DeInit+0x16c>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d007      	beq.n	8000e74 <HAL_GPIO_DeInit+0x70>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a43      	ldr	r2, [pc, #268]	; (8000f74 <HAL_GPIO_DeInit+0x170>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d101      	bne.n	8000e70 <HAL_GPIO_DeInit+0x6c>
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	e006      	b.n	8000e7e <HAL_GPIO_DeInit+0x7a>
 8000e70:	2304      	movs	r3, #4
 8000e72:	e004      	b.n	8000e7e <HAL_GPIO_DeInit+0x7a>
 8000e74:	2302      	movs	r3, #2
 8000e76:	e002      	b.n	8000e7e <HAL_GPIO_DeInit+0x7a>
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e000      	b.n	8000e7e <HAL_GPIO_DeInit+0x7a>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	69fa      	ldr	r2, [r7, #28]
 8000e80:	f002 0203 	and.w	r2, r2, #3
 8000e84:	0092      	lsls	r2, r2, #2
 8000e86:	4093      	lsls	r3, r2
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d132      	bne.n	8000ef4 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	f003 0303 	and.w	r3, r3, #3
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	220f      	movs	r2, #15
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8000e9e:	4a31      	ldr	r2, [pc, #196]	; (8000f64 <HAL_GPIO_DeInit+0x160>)
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	3302      	adds	r3, #2
 8000ea6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	43da      	mvns	r2, r3
 8000eae:	482d      	ldr	r0, [pc, #180]	; (8000f64 <HAL_GPIO_DeInit+0x160>)
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	089b      	lsrs	r3, r3, #2
 8000eb4:	400a      	ands	r2, r1
 8000eb6:	3302      	adds	r3, #2
 8000eb8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8000ebc:	4b2e      	ldr	r3, [pc, #184]	; (8000f78 <HAL_GPIO_DeInit+0x174>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	492c      	ldr	r1, [pc, #176]	; (8000f78 <HAL_GPIO_DeInit+0x174>)
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8000eca:	4b2b      	ldr	r3, [pc, #172]	; (8000f78 <HAL_GPIO_DeInit+0x174>)
 8000ecc:	685a      	ldr	r2, [r3, #4]
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	4929      	ldr	r1, [pc, #164]	; (8000f78 <HAL_GPIO_DeInit+0x174>)
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8000ed8:	4b27      	ldr	r3, [pc, #156]	; (8000f78 <HAL_GPIO_DeInit+0x174>)
 8000eda:	689a      	ldr	r2, [r3, #8]
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	4925      	ldr	r1, [pc, #148]	; (8000f78 <HAL_GPIO_DeInit+0x174>)
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8000ee6:	4b24      	ldr	r3, [pc, #144]	; (8000f78 <HAL_GPIO_DeInit+0x174>)
 8000ee8:	68da      	ldr	r2, [r3, #12]
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	4922      	ldr	r1, [pc, #136]	; (8000f78 <HAL_GPIO_DeInit+0x174>)
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	2bff      	cmp	r3, #255	; 0xff
 8000ef8:	d801      	bhi.n	8000efe <HAL_GPIO_DeInit+0xfa>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	e001      	b.n	8000f02 <HAL_GPIO_DeInit+0xfe>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	3304      	adds	r3, #4
 8000f02:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	2bff      	cmp	r3, #255	; 0xff
 8000f08:	d802      	bhi.n	8000f10 <HAL_GPIO_DeInit+0x10c>
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	e002      	b.n	8000f16 <HAL_GPIO_DeInit+0x112>
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	3b08      	subs	r3, #8
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	210f      	movs	r1, #15
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	fa01 f303 	lsl.w	r3, r1, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	401a      	ands	r2, r3
 8000f28:	2104      	movs	r1, #4
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f30:	431a      	orrs	r2, r3
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	68da      	ldr	r2, [r3, #12]
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	401a      	ands	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	60da      	str	r2, [r3, #12]
    }

    position++;
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	3301      	adds	r3, #1
 8000f48:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8000f4a:	683a      	ldr	r2, [r7, #0]
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f47f af5e 	bne.w	8000e14 <HAL_GPIO_DeInit+0x10>
  }
}
 8000f58:	bf00      	nop
 8000f5a:	3724      	adds	r7, #36	; 0x24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	40010000 	.word	0x40010000
 8000f68:	40010800 	.word	0x40010800
 8000f6c:	40010c00 	.word	0x40010c00
 8000f70:	40011000 	.word	0x40011000
 8000f74:	40011400 	.word	0x40011400
 8000f78:	40010400 	.word	0x40010400

08000f7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d101      	bne.n	8000f8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e10f      	b.n	80011ae <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d106      	bne.n	8000fa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff fac4 	bl	8000530 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2224      	movs	r2, #36	; 0x24
 8000fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f022 0201 	bic.w	r2, r2, #1
 8000fbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000fc0:	f001 fbbc 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 8000fc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	4a7b      	ldr	r2, [pc, #492]	; (80011b8 <HAL_I2C_Init+0x23c>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d807      	bhi.n	8000fe0 <HAL_I2C_Init+0x64>
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4a7a      	ldr	r2, [pc, #488]	; (80011bc <HAL_I2C_Init+0x240>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	bf94      	ite	ls
 8000fd8:	2301      	movls	r3, #1
 8000fda:	2300      	movhi	r3, #0
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	e006      	b.n	8000fee <HAL_I2C_Init+0x72>
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4a77      	ldr	r2, [pc, #476]	; (80011c0 <HAL_I2C_Init+0x244>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	bf94      	ite	ls
 8000fe8:	2301      	movls	r3, #1
 8000fea:	2300      	movhi	r3, #0
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e0db      	b.n	80011ae <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	4a72      	ldr	r2, [pc, #456]	; (80011c4 <HAL_I2C_Init+0x248>)
 8000ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffe:	0c9b      	lsrs	r3, r3, #18
 8001000:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	68ba      	ldr	r2, [r7, #8]
 8001012:	430a      	orrs	r2, r1
 8001014:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6a1b      	ldr	r3, [r3, #32]
 800101c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	4a64      	ldr	r2, [pc, #400]	; (80011b8 <HAL_I2C_Init+0x23c>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d802      	bhi.n	8001030 <HAL_I2C_Init+0xb4>
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	3301      	adds	r3, #1
 800102e:	e009      	b.n	8001044 <HAL_I2C_Init+0xc8>
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001036:	fb02 f303 	mul.w	r3, r2, r3
 800103a:	4a63      	ldr	r2, [pc, #396]	; (80011c8 <HAL_I2C_Init+0x24c>)
 800103c:	fba2 2303 	umull	r2, r3, r2, r3
 8001040:	099b      	lsrs	r3, r3, #6
 8001042:	3301      	adds	r3, #1
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	6812      	ldr	r2, [r2, #0]
 8001048:	430b      	orrs	r3, r1
 800104a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001056:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	4956      	ldr	r1, [pc, #344]	; (80011b8 <HAL_I2C_Init+0x23c>)
 8001060:	428b      	cmp	r3, r1
 8001062:	d80d      	bhi.n	8001080 <HAL_I2C_Init+0x104>
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	1e59      	subs	r1, r3, #1
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001072:	3301      	adds	r3, #1
 8001074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001078:	2b04      	cmp	r3, #4
 800107a:	bf38      	it	cc
 800107c:	2304      	movcc	r3, #4
 800107e:	e04f      	b.n	8001120 <HAL_I2C_Init+0x1a4>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d111      	bne.n	80010ac <HAL_I2C_Init+0x130>
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	1e58      	subs	r0, r3, #1
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6859      	ldr	r1, [r3, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	440b      	add	r3, r1
 8001096:	fbb0 f3f3 	udiv	r3, r0, r3
 800109a:	3301      	adds	r3, #1
 800109c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	bf0c      	ite	eq
 80010a4:	2301      	moveq	r3, #1
 80010a6:	2300      	movne	r3, #0
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	e012      	b.n	80010d2 <HAL_I2C_Init+0x156>
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	1e58      	subs	r0, r3, #1
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6859      	ldr	r1, [r3, #4]
 80010b4:	460b      	mov	r3, r1
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	0099      	lsls	r1, r3, #2
 80010bc:	440b      	add	r3, r1
 80010be:	fbb0 f3f3 	udiv	r3, r0, r3
 80010c2:	3301      	adds	r3, #1
 80010c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	bf0c      	ite	eq
 80010cc:	2301      	moveq	r3, #1
 80010ce:	2300      	movne	r3, #0
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_I2C_Init+0x15e>
 80010d6:	2301      	movs	r3, #1
 80010d8:	e022      	b.n	8001120 <HAL_I2C_Init+0x1a4>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d10e      	bne.n	8001100 <HAL_I2C_Init+0x184>
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	1e58      	subs	r0, r3, #1
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6859      	ldr	r1, [r3, #4]
 80010ea:	460b      	mov	r3, r1
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	440b      	add	r3, r1
 80010f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80010f4:	3301      	adds	r3, #1
 80010f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010fe:	e00f      	b.n	8001120 <HAL_I2C_Init+0x1a4>
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	1e58      	subs	r0, r3, #1
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6859      	ldr	r1, [r3, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	440b      	add	r3, r1
 800110e:	0099      	lsls	r1, r3, #2
 8001110:	440b      	add	r3, r1
 8001112:	fbb0 f3f3 	udiv	r3, r0, r3
 8001116:	3301      	adds	r3, #1
 8001118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800111c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	6809      	ldr	r1, [r1, #0]
 8001124:	4313      	orrs	r3, r2
 8001126:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69da      	ldr	r2, [r3, #28]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a1b      	ldr	r3, [r3, #32]
 800113a:	431a      	orrs	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	430a      	orrs	r2, r1
 8001142:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800114e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	6911      	ldr	r1, [r2, #16]
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	68d2      	ldr	r2, [r2, #12]
 800115a:	4311      	orrs	r1, r2
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	6812      	ldr	r2, [r2, #0]
 8001160:	430b      	orrs	r3, r1
 8001162:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	695a      	ldr	r2, [r3, #20]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	431a      	orrs	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	430a      	orrs	r2, r1
 800117e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f042 0201 	orr.w	r2, r2, #1
 800118e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2220      	movs	r2, #32
 800119a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	000186a0 	.word	0x000186a0
 80011bc:	001e847f 	.word	0x001e847f
 80011c0:	003d08ff 	.word	0x003d08ff
 80011c4:	431bde83 	.word	0x431bde83
 80011c8:	10624dd3 	.word	0x10624dd3

080011cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ce:	b08b      	sub	sp, #44	; 0x2c
 80011d0:	af06      	add	r7, sp, #24
 80011d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d101      	bne.n	80011de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e0d3      	b.n	8001386 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d106      	bne.n	80011f8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f004 fbc0 	bl	8005978 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2203      	movs	r2, #3
 80011fc:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f001 fd70 	bl	8002cea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	603b      	str	r3, [r7, #0]
 8001210:	687e      	ldr	r6, [r7, #4]
 8001212:	466d      	mov	r5, sp
 8001214:	f106 0410 	add.w	r4, r6, #16
 8001218:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800121a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800121c:	6823      	ldr	r3, [r4, #0]
 800121e:	602b      	str	r3, [r5, #0]
 8001220:	1d33      	adds	r3, r6, #4
 8001222:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001224:	6838      	ldr	r0, [r7, #0]
 8001226:	f001 fd39 	bl	8002c9c <USB_CoreInit>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d005      	beq.n	800123c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2202      	movs	r2, #2
 8001234:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e0a4      	b.n	8001386 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f001 fd6d 	bl	8002d22 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001248:	2300      	movs	r3, #0
 800124a:	73fb      	strb	r3, [r7, #15]
 800124c:	e035      	b.n	80012ba <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	015b      	lsls	r3, r3, #5
 8001254:	4413      	add	r3, r2
 8001256:	3329      	adds	r3, #41	; 0x29
 8001258:	2201      	movs	r2, #1
 800125a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	015b      	lsls	r3, r3, #5
 8001262:	4413      	add	r3, r2
 8001264:	3328      	adds	r3, #40	; 0x28
 8001266:	7bfa      	ldrb	r2, [r7, #15]
 8001268:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	7bfa      	ldrb	r2, [r7, #15]
 800126e:	b291      	uxth	r1, r2
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	015b      	lsls	r3, r3, #5
 8001274:	4413      	add	r3, r2
 8001276:	3336      	adds	r3, #54	; 0x36
 8001278:	460a      	mov	r2, r1
 800127a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	015b      	lsls	r3, r3, #5
 8001282:	4413      	add	r3, r2
 8001284:	332b      	adds	r3, #43	; 0x2b
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	015b      	lsls	r3, r3, #5
 8001290:	4413      	add	r3, r2
 8001292:	3338      	adds	r3, #56	; 0x38
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	015b      	lsls	r3, r3, #5
 800129e:	4413      	add	r3, r2
 80012a0:	333c      	adds	r3, #60	; 0x3c
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	3302      	adds	r3, #2
 80012ac:	015b      	lsls	r3, r3, #5
 80012ae:	4413      	add	r3, r2
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	3301      	adds	r3, #1
 80012b8:	73fb      	strb	r3, [r7, #15]
 80012ba:	7bfa      	ldrb	r2, [r7, #15]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d3c4      	bcc.n	800124e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012c4:	2300      	movs	r3, #0
 80012c6:	73fb      	strb	r3, [r7, #15]
 80012c8:	e031      	b.n	800132e <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	015b      	lsls	r3, r3, #5
 80012d0:	4413      	add	r3, r2
 80012d2:	f203 1329 	addw	r3, r3, #297	; 0x129
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012da:	7bfb      	ldrb	r3, [r7, #15]
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	015b      	lsls	r3, r3, #5
 80012e0:	4413      	add	r3, r2
 80012e2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80012e6:	7bfa      	ldrb	r2, [r7, #15]
 80012e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	015b      	lsls	r3, r3, #5
 80012f0:	4413      	add	r3, r2
 80012f2:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	015b      	lsls	r3, r3, #5
 8001300:	4413      	add	r3, r2
 8001302:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	015b      	lsls	r3, r3, #5
 8001310:	4413      	add	r3, r2
 8001312:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	330a      	adds	r3, #10
 8001320:	015b      	lsls	r3, r3, #5
 8001322:	4413      	add	r3, r2
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	3301      	adds	r3, #1
 800132c:	73fb      	strb	r3, [r7, #15]
 800132e:	7bfa      	ldrb	r2, [r7, #15]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	429a      	cmp	r2, r3
 8001336:	d3c8      	bcc.n	80012ca <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	603b      	str	r3, [r7, #0]
 800133e:	687e      	ldr	r6, [r7, #4]
 8001340:	466d      	mov	r5, sp
 8001342:	f106 0410 	add.w	r4, r6, #16
 8001346:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001348:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800134a:	6823      	ldr	r3, [r4, #0]
 800134c:	602b      	str	r3, [r5, #0]
 800134e:	1d33      	adds	r3, r6, #4
 8001350:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001352:	6838      	ldr	r0, [r7, #0]
 8001354:	f001 fcf1 	bl	8002d3a <USB_DevInit>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d005      	beq.n	800136a <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2202      	movs	r2, #2
 8001362:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e00d      	b.n	8001386 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f002 fd2f 	bl	8003de2 <USB_DevDisconnect>

  return HAL_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800138e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800139c:	2b01      	cmp	r3, #1
 800139e:	d101      	bne.n	80013a4 <HAL_PCD_Start+0x16>
 80013a0:	2302      	movs	r3, #2
 80013a2:	e016      	b.n	80013d2 <HAL_PCD_Start+0x44>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80013ac:	2101      	movs	r1, #1
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f004 fd49 	bl	8005e46 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f002 fd08 	bl	8003dce <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f001 fc7a 	bl	8002cbc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f002 fd05 	bl	8003df6 <USB_ReadInterrupts>
 80013ec:	4603      	mov	r3, r0
 80013ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013f6:	d102      	bne.n	80013fe <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 faf3 	bl	80019e4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f002 fcf7 	bl	8003df6 <USB_ReadInterrupts>
 8001408:	4603      	mov	r3, r0
 800140a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800140e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001412:	d112      	bne.n	800143a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800141c:	b29a      	uxth	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001426:	b292      	uxth	r2, r2
 8001428:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f004 fb18 	bl	8005a62 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001432:	2100      	movs	r1, #0
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f000 f8de 	bl	80015f6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f002 fcd9 	bl	8003df6 <USB_ReadInterrupts>
 8001444:	4603      	mov	r3, r0
 8001446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800144e:	d10b      	bne.n	8001468 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001458:	b29a      	uxth	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001462:	b292      	uxth	r2, r2
 8001464:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f002 fcc2 	bl	8003df6 <USB_ReadInterrupts>
 8001472:	4603      	mov	r3, r0
 8001474:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800147c:	d10b      	bne.n	8001496 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001486:	b29a      	uxth	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001490:	b292      	uxth	r2, r2
 8001492:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f002 fcab 	bl	8003df6 <USB_ReadInterrupts>
 80014a0:	4603      	mov	r3, r0
 80014a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014aa:	d126      	bne.n	80014fa <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f022 0204 	bic.w	r2, r2, #4
 80014be:	b292      	uxth	r2, r2
 80014c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 0208 	bic.w	r2, r2, #8
 80014d6:	b292      	uxth	r2, r2
 80014d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f004 faf9 	bl	8005ad4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80014f4:	b292      	uxth	r2, r2
 80014f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f002 fc79 	bl	8003df6 <USB_ReadInterrupts>
 8001504:	4603      	mov	r3, r0
 8001506:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800150a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800150e:	d13d      	bne.n	800158c <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001518:	b29a      	uxth	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f042 0208 	orr.w	r2, r2, #8
 8001522:	b292      	uxth	r2, r2
 8001524:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001530:	b29a      	uxth	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800153a:	b292      	uxth	r2, r2
 800153c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001548:	b29a      	uxth	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f042 0204 	orr.w	r2, r2, #4
 8001552:	b292      	uxth	r2, r2
 8001554:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f002 fc4a 	bl	8003df6 <USB_ReadInterrupts>
 8001562:	4603      	mov	r3, r0
 8001564:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800156c:	d10b      	bne.n	8001586 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001576:	b29a      	uxth	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001580:	b292      	uxth	r2, r2
 8001582:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f004 fa8a 	bl	8005aa0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f002 fc30 	bl	8003df6 <USB_ReadInterrupts>
 8001596:	4603      	mov	r3, r0
 8001598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800159c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015a0:	d10e      	bne.n	80015c0 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015b4:	b292      	uxth	r2, r2
 80015b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f004 fa43 	bl	8005a46 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f002 fc16 	bl	8003df6 <USB_ReadInterrupts>
 80015ca:	4603      	mov	r3, r0
 80015cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015d4:	d10b      	bne.n	80015ee <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015de:	b29a      	uxth	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015e8:	b292      	uxth	r2, r2
 80015ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	460b      	mov	r3, r1
 8001600:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001608:	2b01      	cmp	r3, #1
 800160a:	d101      	bne.n	8001610 <HAL_PCD_SetAddress+0x1a>
 800160c:	2302      	movs	r3, #2
 800160e:	e013      	b.n	8001638 <HAL_PCD_SetAddress+0x42>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2201      	movs	r2, #1
 8001614:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	78fa      	ldrb	r2, [r7, #3]
 800161c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	78fa      	ldrb	r2, [r7, #3]
 8001626:	4611      	mov	r1, r2
 8001628:	4618      	mov	r0, r3
 800162a:	f002 fbbd 	bl	8003da8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	4608      	mov	r0, r1
 800164a:	4611      	mov	r1, r2
 800164c:	461a      	mov	r2, r3
 800164e:	4603      	mov	r3, r0
 8001650:	70fb      	strb	r3, [r7, #3]
 8001652:	460b      	mov	r3, r1
 8001654:	803b      	strh	r3, [r7, #0]
 8001656:	4613      	mov	r3, r2
 8001658:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800165a:	2300      	movs	r3, #0
 800165c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800165e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001662:	2b00      	cmp	r3, #0
 8001664:	da0b      	bge.n	800167e <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001666:	78fb      	ldrb	r3, [r7, #3]
 8001668:	f003 0307 	and.w	r3, r3, #7
 800166c:	015b      	lsls	r3, r3, #5
 800166e:	3328      	adds	r3, #40	; 0x28
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	4413      	add	r3, r2
 8001674:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2201      	movs	r2, #1
 800167a:	705a      	strb	r2, [r3, #1]
 800167c:	e00b      	b.n	8001696 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800167e:	78fb      	ldrb	r3, [r7, #3]
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	015b      	lsls	r3, r3, #5
 8001686:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2200      	movs	r2, #0
 8001694:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001696:	78fb      	ldrb	r3, [r7, #3]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	b2da      	uxtb	r2, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80016a2:	883a      	ldrh	r2, [r7, #0]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	78ba      	ldrb	r2, [r7, #2]
 80016ac:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	785b      	ldrb	r3, [r3, #1]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d004      	beq.n	80016c0 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80016c0:	78bb      	ldrb	r3, [r7, #2]
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d102      	bne.n	80016cc <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2200      	movs	r2, #0
 80016ca:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d101      	bne.n	80016da <HAL_PCD_EP_Open+0x9a>
 80016d6:	2302      	movs	r3, #2
 80016d8:	e00e      	b.n	80016f8 <HAL_PCD_EP_Open+0xb8>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68f9      	ldr	r1, [r7, #12]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f001 fb4b 	bl	8002d84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80016f6:	7afb      	ldrb	r3, [r7, #11]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800170c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001710:	2b00      	cmp	r3, #0
 8001712:	da0b      	bge.n	800172c <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001714:	78fb      	ldrb	r3, [r7, #3]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	015b      	lsls	r3, r3, #5
 800171c:	3328      	adds	r3, #40	; 0x28
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	4413      	add	r3, r2
 8001722:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2201      	movs	r2, #1
 8001728:	705a      	strb	r2, [r3, #1]
 800172a:	e00b      	b.n	8001744 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800172c:	78fb      	ldrb	r3, [r7, #3]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	015b      	lsls	r3, r3, #5
 8001734:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	4413      	add	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2200      	movs	r2, #0
 8001742:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001744:	78fb      	ldrb	r3, [r7, #3]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	b2da      	uxtb	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001756:	2b01      	cmp	r3, #1
 8001758:	d101      	bne.n	800175e <HAL_PCD_EP_Close+0x5e>
 800175a:	2302      	movs	r3, #2
 800175c:	e00e      	b.n	800177c <HAL_PCD_EP_Close+0x7c>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2201      	movs	r2, #1
 8001762:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68f9      	ldr	r1, [r7, #12]
 800176c:	4618      	mov	r0, r3
 800176e:	f001 fdf7 	bl	8003360 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	607a      	str	r2, [r7, #4]
 800178e:	603b      	str	r3, [r7, #0]
 8001790:	460b      	mov	r3, r1
 8001792:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001794:	7afb      	ldrb	r3, [r7, #11]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	015b      	lsls	r3, r3, #5
 800179c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	4413      	add	r3, r2
 80017a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	2200      	movs	r2, #0
 80017b6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	2200      	movs	r2, #0
 80017bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017be:	7afb      	ldrb	r3, [r7, #11]
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80017ca:	7afb      	ldrb	r3, [r7, #11]
 80017cc:	f003 0307 	and.w	r3, r3, #7
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d106      	bne.n	80017e2 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6979      	ldr	r1, [r7, #20]
 80017da:	4618      	mov	r0, r3
 80017dc:	f001 ff56 	bl	800368c <USB_EPStartXfer>
 80017e0:	e005      	b.n	80017ee <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6979      	ldr	r1, [r7, #20]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f001 ff4f 	bl	800368c <USB_EPStartXfer>
  }

  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	460b      	mov	r3, r1
 8001802:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001804:	78fb      	ldrb	r3, [r7, #3]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	330a      	adds	r3, #10
 800180e:	015b      	lsls	r3, r3, #5
 8001810:	4413      	add	r3, r2
 8001812:	3304      	adds	r3, #4
 8001814:	681b      	ldr	r3, [r3, #0]
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr

08001820 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	460b      	mov	r3, r1
 800182e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001830:	7afb      	ldrb	r3, [r7, #11]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	015b      	lsls	r3, r3, #5
 8001838:	3328      	adds	r3, #40	; 0x28
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	4413      	add	r3, r2
 800183e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	2201      	movs	r2, #1
 8001856:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001858:	7afb      	ldrb	r3, [r7, #11]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	b2da      	uxtb	r2, r3
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001864:	7afb      	ldrb	r3, [r7, #11]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	2b00      	cmp	r3, #0
 800186c:	d106      	bne.n	800187c <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6979      	ldr	r1, [r7, #20]
 8001874:	4618      	mov	r0, r3
 8001876:	f001 ff09 	bl	800368c <USB_EPStartXfer>
 800187a:	e005      	b.n	8001888 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6979      	ldr	r1, [r7, #20]
 8001882:	4618      	mov	r0, r3
 8001884:	f001 ff02 	bl	800368c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b084      	sub	sp, #16
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	460b      	mov	r3, r1
 800189c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800189e:	78fb      	ldrb	r3, [r7, #3]
 80018a0:	f003 0207 	and.w	r2, r3, #7
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d901      	bls.n	80018b0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e046      	b.n	800193e <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80018b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	da0b      	bge.n	80018d0 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018b8:	78fb      	ldrb	r3, [r7, #3]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	015b      	lsls	r3, r3, #5
 80018c0:	3328      	adds	r3, #40	; 0x28
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2201      	movs	r2, #1
 80018cc:	705a      	strb	r2, [r3, #1]
 80018ce:	e009      	b.n	80018e4 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80018d0:	78fb      	ldrb	r3, [r7, #3]
 80018d2:	015b      	lsls	r3, r3, #5
 80018d4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	4413      	add	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2200      	movs	r2, #0
 80018e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2201      	movs	r2, #1
 80018e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018ea:	78fb      	ldrb	r3, [r7, #3]
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d101      	bne.n	8001904 <HAL_PCD_EP_SetStall+0x72>
 8001900:	2302      	movs	r3, #2
 8001902:	e01c      	b.n	800193e <HAL_PCD_EP_SetStall+0xac>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68f9      	ldr	r1, [r7, #12]
 8001912:	4618      	mov	r0, r3
 8001914:	f002 f972 	bl	8003bfc <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001918:	78fb      	ldrb	r3, [r7, #3]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	2b00      	cmp	r3, #0
 8001920:	d108      	bne.n	8001934 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800192c:	4619      	mov	r1, r3
 800192e:	4610      	mov	r0, r2
 8001930:	f002 fa70 	bl	8003e14 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b084      	sub	sp, #16
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	460b      	mov	r3, r1
 8001950:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001952:	78fb      	ldrb	r3, [r7, #3]
 8001954:	f003 020f 	and.w	r2, r3, #15
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	429a      	cmp	r2, r3
 800195e:	d901      	bls.n	8001964 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e03a      	b.n	80019da <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001964:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001968:	2b00      	cmp	r3, #0
 800196a:	da0b      	bge.n	8001984 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800196c:	78fb      	ldrb	r3, [r7, #3]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	015b      	lsls	r3, r3, #5
 8001974:	3328      	adds	r3, #40	; 0x28
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2201      	movs	r2, #1
 8001980:	705a      	strb	r2, [r3, #1]
 8001982:	e00b      	b.n	800199c <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001984:	78fb      	ldrb	r3, [r7, #3]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	015b      	lsls	r3, r3, #5
 800198c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	4413      	add	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2200      	movs	r2, #0
 800199a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2200      	movs	r2, #0
 80019a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019a2:	78fb      	ldrb	r3, [r7, #3]
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d101      	bne.n	80019bc <HAL_PCD_EP_ClrStall+0x76>
 80019b8:	2302      	movs	r3, #2
 80019ba:	e00e      	b.n	80019da <HAL_PCD_EP_ClrStall+0x94>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68f9      	ldr	r1, [r7, #12]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f002 f958 	bl	8003c80 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80019e4:	b590      	push	{r4, r7, lr}
 80019e6:	b089      	sub	sp, #36	; 0x24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80019ec:	e282      	b.n	8001ef4 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019f6:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80019f8:	8afb      	ldrh	r3, [r7, #22]
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	f003 030f 	and.w	r3, r3, #15
 8001a00:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8001a02:	7d7b      	ldrb	r3, [r7, #21]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f040 8142 	bne.w	8001c8e <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001a0a:	8afb      	ldrh	r3, [r7, #22]
 8001a0c:	f003 0310 	and.w	r3, r3, #16
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d151      	bne.n	8001ab8 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a24:	b29c      	uxth	r4, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001a2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3328      	adds	r3, #40	; 0x28
 8001a3a:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	461a      	mov	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	4413      	add	r3, r2
 8001a50:	3302      	adds	r3, #2
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6812      	ldr	r2, [r2, #0]
 8001a58:	4413      	add	r3, r2
 8001a5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	695a      	ldr	r2, [r3, #20]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	441a      	add	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001a76:	2100      	movs	r1, #0
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f003 ffcd 	bl	8005a18 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 8234 	beq.w	8001ef4 <PCD_EP_ISR_Handler+0x510>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f040 822f 	bne.w	8001ef4 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	b292      	uxth	r2, r2
 8001aaa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001ab6:	e21d      	b.n	8001ef4 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001abe:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001ac8:	8a7b      	ldrh	r3, [r7, #18]
 8001aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d033      	beq.n	8001b3a <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	461a      	mov	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	3306      	adds	r3, #6
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	6812      	ldr	r2, [r2, #0]
 8001aee:	4413      	add	r3, r2
 8001af0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6818      	ldr	r0, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	f002 f9ce 	bl	8003eb2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b22:	4013      	ands	r3, r2
 8001b24:	b29c      	uxth	r4, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001b2e:	b292      	uxth	r2, r2
 8001b30:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f003 ff46 	bl	80059c4 <HAL_PCD_SetupStageCallback>
 8001b38:	e1dc      	b.n	8001ef4 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b3a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f280 81d8 	bge.w	8001ef4 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b50:	4013      	ands	r3, r2
 8001b52:	b29c      	uxth	r4, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001b5c:	b292      	uxth	r2, r2
 8001b5e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	4413      	add	r3, r2
 8001b74:	3306      	adds	r3, #6
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6812      	ldr	r2, [r2, #0]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	69db      	ldr	r3, [r3, #28]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d019      	beq.n	8001bc8 <PCD_EP_ISR_Handler+0x1e4>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d015      	beq.n	8001bc8 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6818      	ldr	r0, [r3, #0]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6959      	ldr	r1, [r3, #20]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	f002 f980 	bl	8003eb2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	695a      	ldr	r2, [r3, #20]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	441a      	add	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f003 ff10 	bl	80059e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	461c      	mov	r4, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	441c      	add	r4, r3
 8001bda:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8001bde:	461c      	mov	r4, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d10e      	bne.n	8001c06 <PCD_EP_ISR_Handler+0x222>
 8001be8:	8823      	ldrh	r3, [r4, #0]
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	8023      	strh	r3, [r4, #0]
 8001bf4:	8823      	ldrh	r3, [r4, #0]
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	8023      	strh	r3, [r4, #0]
 8001c04:	e02d      	b.n	8001c62 <PCD_EP_ISR_Handler+0x27e>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	2b3e      	cmp	r3, #62	; 0x3e
 8001c0c:	d812      	bhi.n	8001c34 <PCD_EP_ISR_Handler+0x250>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	085b      	lsrs	r3, r3, #1
 8001c14:	61bb      	str	r3, [r7, #24]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d002      	beq.n	8001c28 <PCD_EP_ISR_Handler+0x244>
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	3301      	adds	r3, #1
 8001c26:	61bb      	str	r3, [r7, #24]
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	029b      	lsls	r3, r3, #10
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	8023      	strh	r3, [r4, #0]
 8001c32:	e016      	b.n	8001c62 <PCD_EP_ISR_Handler+0x27e>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	095b      	lsrs	r3, r3, #5
 8001c3a:	61bb      	str	r3, [r7, #24]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	f003 031f 	and.w	r3, r3, #31
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d102      	bne.n	8001c4e <PCD_EP_ISR_Handler+0x26a>
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	61bb      	str	r3, [r7, #24]
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	029b      	lsls	r3, r3, #10
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c72:	b29c      	uxth	r4, r3
 8001c74:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001c78:	b29c      	uxth	r4, r3
 8001c7a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001c7e:	b29c      	uxth	r4, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4ba2      	ldr	r3, [pc, #648]	; (8001f10 <PCD_EP_ISR_Handler+0x52c>)
 8001c86:	4323      	orrs	r3, r4
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	8013      	strh	r3, [r2, #0]
 8001c8c:	e132      	b.n	8001ef4 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	7d7b      	ldrb	r3, [r7, #21]
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c9e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f280 80d1 	bge.w	8001e4a <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	7d7b      	ldrb	r3, [r7, #21]
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	881b      	ldrh	r3, [r3, #0]
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	b29c      	uxth	r4, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	7d7b      	ldrb	r3, [r7, #21]
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001cd0:	b292      	uxth	r2, r2
 8001cd2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001cd4:	7d7b      	ldrb	r3, [r7, #21]
 8001cd6:	015b      	lsls	r3, r3, #5
 8001cd8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	4413      	add	r3, r2
 8001ce0:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	7b1b      	ldrb	r3, [r3, #12]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d121      	bne.n	8001d2e <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3306      	adds	r3, #6
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6812      	ldr	r2, [r2, #0]
 8001d06:	4413      	add	r3, r2
 8001d08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d12:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8001d14:	8bfb      	ldrh	r3, [r7, #30]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d072      	beq.n	8001e00 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6818      	ldr	r0, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6959      	ldr	r1, [r3, #20]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	88da      	ldrh	r2, [r3, #6]
 8001d26:	8bfb      	ldrh	r3, [r7, #30]
 8001d28:	f002 f8c3 	bl	8003eb2 <USB_ReadPMA>
 8001d2c:	e068      	b.n	8001e00 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d021      	beq.n	8001d8c <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	461a      	mov	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3302      	adds	r3, #2
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6812      	ldr	r2, [r2, #0]
 8001d64:	4413      	add	r3, r2
 8001d66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d70:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001d72:	8bfb      	ldrh	r3, [r7, #30]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d02a      	beq.n	8001dce <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6818      	ldr	r0, [r3, #0]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6959      	ldr	r1, [r3, #20]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	891a      	ldrh	r2, [r3, #8]
 8001d84:	8bfb      	ldrh	r3, [r7, #30]
 8001d86:	f002 f894 	bl	8003eb2 <USB_ReadPMA>
 8001d8a:	e020      	b.n	8001dce <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	461a      	mov	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	4413      	add	r3, r2
 8001da0:	3306      	adds	r3, #6
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6812      	ldr	r2, [r2, #0]
 8001da8:	4413      	add	r3, r2
 8001daa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001db4:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001db6:	8bfb      	ldrh	r3, [r7, #30]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d008      	beq.n	8001dce <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6818      	ldr	r0, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6959      	ldr	r1, [r3, #20]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	895a      	ldrh	r2, [r3, #10]
 8001dc8:	8bfb      	ldrh	r3, [r7, #30]
 8001dca:	f002 f872 	bl	8003eb2 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001de8:	b29c      	uxth	r4, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	441a      	add	r2, r3
 8001df8:	4b46      	ldr	r3, [pc, #280]	; (8001f14 <PCD_EP_ISR_Handler+0x530>)
 8001dfa:	4323      	orrs	r3, r4
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	69da      	ldr	r2, [r3, #28]
 8001e04:	8bfb      	ldrh	r3, [r7, #30]
 8001e06:	441a      	add	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	695a      	ldr	r2, [r3, #20]
 8001e10:	8bfb      	ldrh	r3, [r7, #30]
 8001e12:	441a      	add	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d004      	beq.n	8001e2a <PCD_EP_ISR_Handler+0x446>
 8001e20:	8bfa      	ldrh	r2, [r7, #30]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d206      	bcs.n	8001e38 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	4619      	mov	r1, r3
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f003 fdd9 	bl	80059e8 <HAL_PCD_DataOutStageCallback>
 8001e36:	e008      	b.n	8001e4a <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	7819      	ldrb	r1, [r3, #0]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	695a      	ldr	r2, [r3, #20]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff fc9d 	bl	8001784 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001e4a:	8a7b      	ldrh	r3, [r7, #18]
 8001e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d04f      	beq.n	8001ef4 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8001e54:	7d7b      	ldrb	r3, [r7, #21]
 8001e56:	015b      	lsls	r3, r3, #5
 8001e58:	3328      	adds	r3, #40	; 0x28
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	461a      	mov	r2, r3
 8001e66:	7d7b      	ldrb	r3, [r7, #21]
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	881b      	ldrh	r3, [r3, #0]
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e78:	b29c      	uxth	r4, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	7d7b      	ldrb	r3, [r7, #21]
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	441a      	add	r2, r3
 8001e86:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001e8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3302      	adds	r3, #2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	4413      	add	r3, r2
 8001eb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	695a      	ldr	r2, [r3, #20]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	441a      	add	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d106      	bne.n	8001ee2 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	4619      	mov	r1, r3
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f003 fd9c 	bl	8005a18 <HAL_PCD_DataInStageCallback>
 8001ee0:	e008      	b.n	8001ef4 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	7819      	ldrb	r1, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	695a      	ldr	r2, [r3, #20]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff fc96 	bl	8001820 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	b21b      	sxth	r3, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f6ff ad74 	blt.w	80019ee <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3724      	adds	r7, #36	; 0x24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd90      	pop	{r4, r7, pc}
 8001f10:	ffff8080 	.word	0xffff8080
 8001f14:	ffff80c0 	.word	0xffff80c0

08001f18 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b087      	sub	sp, #28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	607b      	str	r3, [r7, #4]
 8001f22:	460b      	mov	r3, r1
 8001f24:	817b      	strh	r3, [r7, #10]
 8001f26:	4613      	mov	r3, r2
 8001f28:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001f2a:	897b      	ldrh	r3, [r7, #10]
 8001f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d008      	beq.n	8001f48 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f36:	897b      	ldrh	r3, [r7, #10]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	015b      	lsls	r3, r3, #5
 8001f3e:	3328      	adds	r3, #40	; 0x28
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	4413      	add	r3, r2
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	e006      	b.n	8001f56 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f48:	897b      	ldrh	r3, [r7, #10]
 8001f4a:	015b      	lsls	r3, r3, #5
 8001f4c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	4413      	add	r3, r2
 8001f54:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001f56:	893b      	ldrh	r3, [r7, #8]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d107      	bne.n	8001f6c <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	80da      	strh	r2, [r3, #6]
 8001f6a:	e00b      	b.n	8001f84 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	0c1b      	lsrs	r3, r3, #16
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	371c      	adds	r7, #28
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr

08001f90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e26c      	b.n	800247c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 8087 	beq.w	80020be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fb0:	4b92      	ldr	r3, [pc, #584]	; (80021fc <HAL_RCC_OscConfig+0x26c>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 030c 	and.w	r3, r3, #12
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d00c      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fbc:	4b8f      	ldr	r3, [pc, #572]	; (80021fc <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 030c 	and.w	r3, r3, #12
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d112      	bne.n	8001fee <HAL_RCC_OscConfig+0x5e>
 8001fc8:	4b8c      	ldr	r3, [pc, #560]	; (80021fc <HAL_RCC_OscConfig+0x26c>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd4:	d10b      	bne.n	8001fee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd6:	4b89      	ldr	r3, [pc, #548]	; (80021fc <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d06c      	beq.n	80020bc <HAL_RCC_OscConfig+0x12c>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d168      	bne.n	80020bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e246      	b.n	800247c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff6:	d106      	bne.n	8002006 <HAL_RCC_OscConfig+0x76>
 8001ff8:	4b80      	ldr	r3, [pc, #512]	; (80021fc <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a7f      	ldr	r2, [pc, #508]	; (80021fc <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	e02e      	b.n	8002064 <HAL_RCC_OscConfig+0xd4>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10c      	bne.n	8002028 <HAL_RCC_OscConfig+0x98>
 800200e:	4b7b      	ldr	r3, [pc, #492]	; (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a7a      	ldr	r2, [pc, #488]	; (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	4b78      	ldr	r3, [pc, #480]	; (80021fc <HAL_RCC_OscConfig+0x26c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a77      	ldr	r2, [pc, #476]	; (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002020:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	e01d      	b.n	8002064 <HAL_RCC_OscConfig+0xd4>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002030:	d10c      	bne.n	800204c <HAL_RCC_OscConfig+0xbc>
 8002032:	4b72      	ldr	r3, [pc, #456]	; (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a71      	ldr	r2, [pc, #452]	; (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002038:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800203c:	6013      	str	r3, [r2, #0]
 800203e:	4b6f      	ldr	r3, [pc, #444]	; (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a6e      	ldr	r2, [pc, #440]	; (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	e00b      	b.n	8002064 <HAL_RCC_OscConfig+0xd4>
 800204c:	4b6b      	ldr	r3, [pc, #428]	; (80021fc <HAL_RCC_OscConfig+0x26c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a6a      	ldr	r2, [pc, #424]	; (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002056:	6013      	str	r3, [r2, #0]
 8002058:	4b68      	ldr	r3, [pc, #416]	; (80021fc <HAL_RCC_OscConfig+0x26c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a67      	ldr	r2, [pc, #412]	; (80021fc <HAL_RCC_OscConfig+0x26c>)
 800205e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002062:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d013      	beq.n	8002094 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206c:	f7fe fc36 	bl	80008dc <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002074:	f7fe fc32 	bl	80008dc <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b64      	cmp	r3, #100	; 0x64
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e1fa      	b.n	800247c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002086:	4b5d      	ldr	r3, [pc, #372]	; (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0f0      	beq.n	8002074 <HAL_RCC_OscConfig+0xe4>
 8002092:	e014      	b.n	80020be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002094:	f7fe fc22 	bl	80008dc <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800209c:	f7fe fc1e 	bl	80008dc <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b64      	cmp	r3, #100	; 0x64
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e1e6      	b.n	800247c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ae:	4b53      	ldr	r3, [pc, #332]	; (80021fc <HAL_RCC_OscConfig+0x26c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0x10c>
 80020ba:	e000      	b.n	80020be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d063      	beq.n	8002192 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020ca:	4b4c      	ldr	r3, [pc, #304]	; (80021fc <HAL_RCC_OscConfig+0x26c>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 030c 	and.w	r3, r3, #12
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00b      	beq.n	80020ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020d6:	4b49      	ldr	r3, [pc, #292]	; (80021fc <HAL_RCC_OscConfig+0x26c>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 030c 	and.w	r3, r3, #12
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d11c      	bne.n	800211c <HAL_RCC_OscConfig+0x18c>
 80020e2:	4b46      	ldr	r3, [pc, #280]	; (80021fc <HAL_RCC_OscConfig+0x26c>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d116      	bne.n	800211c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ee:	4b43      	ldr	r3, [pc, #268]	; (80021fc <HAL_RCC_OscConfig+0x26c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d005      	beq.n	8002106 <HAL_RCC_OscConfig+0x176>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d001      	beq.n	8002106 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e1ba      	b.n	800247c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002106:	4b3d      	ldr	r3, [pc, #244]	; (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	4939      	ldr	r1, [pc, #228]	; (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002116:	4313      	orrs	r3, r2
 8002118:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800211a:	e03a      	b.n	8002192 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d020      	beq.n	8002166 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002124:	4b36      	ldr	r3, [pc, #216]	; (8002200 <HAL_RCC_OscConfig+0x270>)
 8002126:	2201      	movs	r2, #1
 8002128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212a:	f7fe fbd7 	bl	80008dc <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002132:	f7fe fbd3 	bl	80008dc <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e19b      	b.n	800247c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002144:	4b2d      	ldr	r3, [pc, #180]	; (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0f0      	beq.n	8002132 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002150:	4b2a      	ldr	r3, [pc, #168]	; (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	4927      	ldr	r1, [pc, #156]	; (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002160:	4313      	orrs	r3, r2
 8002162:	600b      	str	r3, [r1, #0]
 8002164:	e015      	b.n	8002192 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002166:	4b26      	ldr	r3, [pc, #152]	; (8002200 <HAL_RCC_OscConfig+0x270>)
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216c:	f7fe fbb6 	bl	80008dc <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002174:	f7fe fbb2 	bl	80008dc <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e17a      	b.n	800247c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002186:	4b1d      	ldr	r3, [pc, #116]	; (80021fc <HAL_RCC_OscConfig+0x26c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f0      	bne.n	8002174 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	2b00      	cmp	r3, #0
 800219c:	d03a      	beq.n	8002214 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d019      	beq.n	80021da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021a6:	4b17      	ldr	r3, [pc, #92]	; (8002204 <HAL_RCC_OscConfig+0x274>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ac:	f7fe fb96 	bl	80008dc <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b4:	f7fe fb92 	bl	80008dc <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e15a      	b.n	800247c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021c6:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <HAL_RCC_OscConfig+0x26c>)
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021d2:	2001      	movs	r0, #1
 80021d4:	f000 fada 	bl	800278c <RCC_Delay>
 80021d8:	e01c      	b.n	8002214 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021da:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <HAL_RCC_OscConfig+0x274>)
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e0:	f7fe fb7c 	bl	80008dc <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e6:	e00f      	b.n	8002208 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e8:	f7fe fb78 	bl	80008dc <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d908      	bls.n	8002208 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e140      	b.n	800247c <HAL_RCC_OscConfig+0x4ec>
 80021fa:	bf00      	nop
 80021fc:	40021000 	.word	0x40021000
 8002200:	42420000 	.word	0x42420000
 8002204:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002208:	4b9e      	ldr	r3, [pc, #632]	; (8002484 <HAL_RCC_OscConfig+0x4f4>)
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1e9      	bne.n	80021e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 80a6 	beq.w	800236e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002222:	2300      	movs	r3, #0
 8002224:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002226:	4b97      	ldr	r3, [pc, #604]	; (8002484 <HAL_RCC_OscConfig+0x4f4>)
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10d      	bne.n	800224e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002232:	4b94      	ldr	r3, [pc, #592]	; (8002484 <HAL_RCC_OscConfig+0x4f4>)
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	4a93      	ldr	r2, [pc, #588]	; (8002484 <HAL_RCC_OscConfig+0x4f4>)
 8002238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800223c:	61d3      	str	r3, [r2, #28]
 800223e:	4b91      	ldr	r3, [pc, #580]	; (8002484 <HAL_RCC_OscConfig+0x4f4>)
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800224a:	2301      	movs	r3, #1
 800224c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224e:	4b8e      	ldr	r3, [pc, #568]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002256:	2b00      	cmp	r3, #0
 8002258:	d118      	bne.n	800228c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800225a:	4b8b      	ldr	r3, [pc, #556]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a8a      	ldr	r2, [pc, #552]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 8002260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002264:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002266:	f7fe fb39 	bl	80008dc <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800226e:	f7fe fb35 	bl	80008dc <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b64      	cmp	r3, #100	; 0x64
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e0fd      	b.n	800247c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002280:	4b81      	ldr	r3, [pc, #516]	; (8002488 <HAL_RCC_OscConfig+0x4f8>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0f0      	beq.n	800226e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d106      	bne.n	80022a2 <HAL_RCC_OscConfig+0x312>
 8002294:	4b7b      	ldr	r3, [pc, #492]	; (8002484 <HAL_RCC_OscConfig+0x4f4>)
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	4a7a      	ldr	r2, [pc, #488]	; (8002484 <HAL_RCC_OscConfig+0x4f4>)
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	6213      	str	r3, [r2, #32]
 80022a0:	e02d      	b.n	80022fe <HAL_RCC_OscConfig+0x36e>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10c      	bne.n	80022c4 <HAL_RCC_OscConfig+0x334>
 80022aa:	4b76      	ldr	r3, [pc, #472]	; (8002484 <HAL_RCC_OscConfig+0x4f4>)
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	4a75      	ldr	r2, [pc, #468]	; (8002484 <HAL_RCC_OscConfig+0x4f4>)
 80022b0:	f023 0301 	bic.w	r3, r3, #1
 80022b4:	6213      	str	r3, [r2, #32]
 80022b6:	4b73      	ldr	r3, [pc, #460]	; (8002484 <HAL_RCC_OscConfig+0x4f4>)
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	4a72      	ldr	r2, [pc, #456]	; (8002484 <HAL_RCC_OscConfig+0x4f4>)
 80022bc:	f023 0304 	bic.w	r3, r3, #4
 80022c0:	6213      	str	r3, [r2, #32]
 80022c2:	e01c      	b.n	80022fe <HAL_RCC_OscConfig+0x36e>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	2b05      	cmp	r3, #5
 80022ca:	d10c      	bne.n	80022e6 <HAL_RCC_OscConfig+0x356>
 80022cc:	4b6d      	ldr	r3, [pc, #436]	; (8002484 <HAL_RCC_OscConfig+0x4f4>)
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	4a6c      	ldr	r2, [pc, #432]	; (8002484 <HAL_RCC_OscConfig+0x4f4>)
 80022d2:	f043 0304 	orr.w	r3, r3, #4
 80022d6:	6213      	str	r3, [r2, #32]
 80022d8:	4b6a      	ldr	r3, [pc, #424]	; (8002484 <HAL_RCC_OscConfig+0x4f4>)
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	4a69      	ldr	r2, [pc, #420]	; (8002484 <HAL_RCC_OscConfig+0x4f4>)
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	6213      	str	r3, [r2, #32]
 80022e4:	e00b      	b.n	80022fe <HAL_RCC_OscConfig+0x36e>
 80022e6:	4b67      	ldr	r3, [pc, #412]	; (8002484 <HAL_RCC_OscConfig+0x4f4>)
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	4a66      	ldr	r2, [pc, #408]	; (8002484 <HAL_RCC_OscConfig+0x4f4>)
 80022ec:	f023 0301 	bic.w	r3, r3, #1
 80022f0:	6213      	str	r3, [r2, #32]
 80022f2:	4b64      	ldr	r3, [pc, #400]	; (8002484 <HAL_RCC_OscConfig+0x4f4>)
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	4a63      	ldr	r2, [pc, #396]	; (8002484 <HAL_RCC_OscConfig+0x4f4>)
 80022f8:	f023 0304 	bic.w	r3, r3, #4
 80022fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d015      	beq.n	8002332 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002306:	f7fe fae9 	bl	80008dc <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800230c:	e00a      	b.n	8002324 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800230e:	f7fe fae5 	bl	80008dc <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	f241 3288 	movw	r2, #5000	; 0x1388
 800231c:	4293      	cmp	r3, r2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e0ab      	b.n	800247c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002324:	4b57      	ldr	r3, [pc, #348]	; (8002484 <HAL_RCC_OscConfig+0x4f4>)
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0ee      	beq.n	800230e <HAL_RCC_OscConfig+0x37e>
 8002330:	e014      	b.n	800235c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002332:	f7fe fad3 	bl	80008dc <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002338:	e00a      	b.n	8002350 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233a:	f7fe facf 	bl	80008dc <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	f241 3288 	movw	r2, #5000	; 0x1388
 8002348:	4293      	cmp	r3, r2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e095      	b.n	800247c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002350:	4b4c      	ldr	r3, [pc, #304]	; (8002484 <HAL_RCC_OscConfig+0x4f4>)
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1ee      	bne.n	800233a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800235c:	7dfb      	ldrb	r3, [r7, #23]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d105      	bne.n	800236e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002362:	4b48      	ldr	r3, [pc, #288]	; (8002484 <HAL_RCC_OscConfig+0x4f4>)
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	4a47      	ldr	r2, [pc, #284]	; (8002484 <HAL_RCC_OscConfig+0x4f4>)
 8002368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800236c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 8081 	beq.w	800247a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002378:	4b42      	ldr	r3, [pc, #264]	; (8002484 <HAL_RCC_OscConfig+0x4f4>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 030c 	and.w	r3, r3, #12
 8002380:	2b08      	cmp	r3, #8
 8002382:	d061      	beq.n	8002448 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	2b02      	cmp	r3, #2
 800238a:	d146      	bne.n	800241a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800238c:	4b3f      	ldr	r3, [pc, #252]	; (800248c <HAL_RCC_OscConfig+0x4fc>)
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002392:	f7fe faa3 	bl	80008dc <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239a:	f7fe fa9f 	bl	80008dc <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e067      	b.n	800247c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ac:	4b35      	ldr	r3, [pc, #212]	; (8002484 <HAL_RCC_OscConfig+0x4f4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1f0      	bne.n	800239a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c0:	d108      	bne.n	80023d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023c2:	4b30      	ldr	r3, [pc, #192]	; (8002484 <HAL_RCC_OscConfig+0x4f4>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	492d      	ldr	r1, [pc, #180]	; (8002484 <HAL_RCC_OscConfig+0x4f4>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023d4:	4b2b      	ldr	r3, [pc, #172]	; (8002484 <HAL_RCC_OscConfig+0x4f4>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a19      	ldr	r1, [r3, #32]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	430b      	orrs	r3, r1
 80023e6:	4927      	ldr	r1, [pc, #156]	; (8002484 <HAL_RCC_OscConfig+0x4f4>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ec:	4b27      	ldr	r3, [pc, #156]	; (800248c <HAL_RCC_OscConfig+0x4fc>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f2:	f7fe fa73 	bl	80008dc <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023fa:	f7fe fa6f 	bl	80008dc <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e037      	b.n	800247c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800240c:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <HAL_RCC_OscConfig+0x4f4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f0      	beq.n	80023fa <HAL_RCC_OscConfig+0x46a>
 8002418:	e02f      	b.n	800247a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800241a:	4b1c      	ldr	r3, [pc, #112]	; (800248c <HAL_RCC_OscConfig+0x4fc>)
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002420:	f7fe fa5c 	bl	80008dc <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002428:	f7fe fa58 	bl	80008dc <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e020      	b.n	800247c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800243a:	4b12      	ldr	r3, [pc, #72]	; (8002484 <HAL_RCC_OscConfig+0x4f4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f0      	bne.n	8002428 <HAL_RCC_OscConfig+0x498>
 8002446:	e018      	b.n	800247a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d101      	bne.n	8002454 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e013      	b.n	800247c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_RCC_OscConfig+0x4f4>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	429a      	cmp	r2, r3
 8002466:	d106      	bne.n	8002476 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002472:	429a      	cmp	r2, r3
 8002474:	d001      	beq.n	800247a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e000      	b.n	800247c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40021000 	.word	0x40021000
 8002488:	40007000 	.word	0x40007000
 800248c:	42420060 	.word	0x42420060

08002490 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e0d0      	b.n	8002646 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024a4:	4b6a      	ldr	r3, [pc, #424]	; (8002650 <HAL_RCC_ClockConfig+0x1c0>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d910      	bls.n	80024d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b2:	4b67      	ldr	r3, [pc, #412]	; (8002650 <HAL_RCC_ClockConfig+0x1c0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f023 0207 	bic.w	r2, r3, #7
 80024ba:	4965      	ldr	r1, [pc, #404]	; (8002650 <HAL_RCC_ClockConfig+0x1c0>)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	4313      	orrs	r3, r2
 80024c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c2:	4b63      	ldr	r3, [pc, #396]	; (8002650 <HAL_RCC_ClockConfig+0x1c0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d001      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e0b8      	b.n	8002646 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d020      	beq.n	8002522 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d005      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024ec:	4b59      	ldr	r3, [pc, #356]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	4a58      	ldr	r2, [pc, #352]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0308 	and.w	r3, r3, #8
 8002500:	2b00      	cmp	r3, #0
 8002502:	d005      	beq.n	8002510 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002504:	4b53      	ldr	r3, [pc, #332]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	4a52      	ldr	r2, [pc, #328]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 800250a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800250e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002510:	4b50      	ldr	r3, [pc, #320]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	494d      	ldr	r1, [pc, #308]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 800251e:	4313      	orrs	r3, r2
 8002520:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d040      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d107      	bne.n	8002546 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002536:	4b47      	ldr	r3, [pc, #284]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d115      	bne.n	800256e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e07f      	b.n	8002646 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d107      	bne.n	800255e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800254e:	4b41      	ldr	r3, [pc, #260]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d109      	bne.n	800256e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e073      	b.n	8002646 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255e:	4b3d      	ldr	r3, [pc, #244]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e06b      	b.n	8002646 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800256e:	4b39      	ldr	r3, [pc, #228]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f023 0203 	bic.w	r2, r3, #3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	4936      	ldr	r1, [pc, #216]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 800257c:	4313      	orrs	r3, r2
 800257e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002580:	f7fe f9ac 	bl	80008dc <HAL_GetTick>
 8002584:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002586:	e00a      	b.n	800259e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002588:	f7fe f9a8 	bl	80008dc <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	f241 3288 	movw	r2, #5000	; 0x1388
 8002596:	4293      	cmp	r3, r2
 8002598:	d901      	bls.n	800259e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e053      	b.n	8002646 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259e:	4b2d      	ldr	r3, [pc, #180]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f003 020c 	and.w	r2, r3, #12
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d1eb      	bne.n	8002588 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025b0:	4b27      	ldr	r3, [pc, #156]	; (8002650 <HAL_RCC_ClockConfig+0x1c0>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d210      	bcs.n	80025e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025be:	4b24      	ldr	r3, [pc, #144]	; (8002650 <HAL_RCC_ClockConfig+0x1c0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f023 0207 	bic.w	r2, r3, #7
 80025c6:	4922      	ldr	r1, [pc, #136]	; (8002650 <HAL_RCC_ClockConfig+0x1c0>)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ce:	4b20      	ldr	r3, [pc, #128]	; (8002650 <HAL_RCC_ClockConfig+0x1c0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d001      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e032      	b.n	8002646 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d008      	beq.n	80025fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025ec:	4b19      	ldr	r3, [pc, #100]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	4916      	ldr	r1, [pc, #88]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	2b00      	cmp	r3, #0
 8002608:	d009      	beq.n	800261e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800260a:	4b12      	ldr	r3, [pc, #72]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	490e      	ldr	r1, [pc, #56]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 800261a:	4313      	orrs	r3, r2
 800261c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800261e:	f000 f821 	bl	8002664 <HAL_RCC_GetSysClockFreq>
 8002622:	4601      	mov	r1, r0
 8002624:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	091b      	lsrs	r3, r3, #4
 800262a:	f003 030f 	and.w	r3, r3, #15
 800262e:	4a0a      	ldr	r2, [pc, #40]	; (8002658 <HAL_RCC_ClockConfig+0x1c8>)
 8002630:	5cd3      	ldrb	r3, [r2, r3]
 8002632:	fa21 f303 	lsr.w	r3, r1, r3
 8002636:	4a09      	ldr	r2, [pc, #36]	; (800265c <HAL_RCC_ClockConfig+0x1cc>)
 8002638:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800263a:	4b09      	ldr	r3, [pc, #36]	; (8002660 <HAL_RCC_ClockConfig+0x1d0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f7fe f90a 	bl	8000858 <HAL_InitTick>

  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40022000 	.word	0x40022000
 8002654:	40021000 	.word	0x40021000
 8002658:	08005f70 	.word	0x08005f70
 800265c:	2000000c 	.word	0x2000000c
 8002660:	20000010 	.word	0x20000010

08002664 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002664:	b490      	push	{r4, r7}
 8002666:	b08a      	sub	sp, #40	; 0x28
 8002668:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800266a:	4b2a      	ldr	r3, [pc, #168]	; (8002714 <HAL_RCC_GetSysClockFreq+0xb0>)
 800266c:	1d3c      	adds	r4, r7, #4
 800266e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002670:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002674:	4b28      	ldr	r3, [pc, #160]	; (8002718 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
 800267e:	2300      	movs	r3, #0
 8002680:	61bb      	str	r3, [r7, #24]
 8002682:	2300      	movs	r3, #0
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
 8002686:	2300      	movs	r3, #0
 8002688:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800268e:	4b23      	ldr	r3, [pc, #140]	; (800271c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f003 030c 	and.w	r3, r3, #12
 800269a:	2b04      	cmp	r3, #4
 800269c:	d002      	beq.n	80026a4 <HAL_RCC_GetSysClockFreq+0x40>
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d003      	beq.n	80026aa <HAL_RCC_GetSysClockFreq+0x46>
 80026a2:	e02d      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026a4:	4b1e      	ldr	r3, [pc, #120]	; (8002720 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026a6:	623b      	str	r3, [r7, #32]
      break;
 80026a8:	e02d      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	0c9b      	lsrs	r3, r3, #18
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80026b6:	4413      	add	r3, r2
 80026b8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026bc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d013      	beq.n	80026f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026c8:	4b14      	ldr	r3, [pc, #80]	; (800271c <HAL_RCC_GetSysClockFreq+0xb8>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	0c5b      	lsrs	r3, r3, #17
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80026d6:	4413      	add	r3, r2
 80026d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80026dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	4a0f      	ldr	r2, [pc, #60]	; (8002720 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026e2:	fb02 f203 	mul.w	r2, r2, r3
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
 80026ee:	e004      	b.n	80026fa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	4a0c      	ldr	r2, [pc, #48]	; (8002724 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026f4:	fb02 f303 	mul.w	r3, r2, r3
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	623b      	str	r3, [r7, #32]
      break;
 80026fe:	e002      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002700:	4b07      	ldr	r3, [pc, #28]	; (8002720 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002702:	623b      	str	r3, [r7, #32]
      break;
 8002704:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002706:	6a3b      	ldr	r3, [r7, #32]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3728      	adds	r7, #40	; 0x28
 800270c:	46bd      	mov	sp, r7
 800270e:	bc90      	pop	{r4, r7}
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	08005f3c 	.word	0x08005f3c
 8002718:	08005f4c 	.word	0x08005f4c
 800271c:	40021000 	.word	0x40021000
 8002720:	007a1200 	.word	0x007a1200
 8002724:	003d0900 	.word	0x003d0900

08002728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800272c:	4b02      	ldr	r3, [pc, #8]	; (8002738 <HAL_RCC_GetHCLKFreq+0x10>)
 800272e:	681b      	ldr	r3, [r3, #0]
}
 8002730:	4618      	mov	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr
 8002738:	2000000c 	.word	0x2000000c

0800273c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002740:	f7ff fff2 	bl	8002728 <HAL_RCC_GetHCLKFreq>
 8002744:	4601      	mov	r1, r0
 8002746:	4b05      	ldr	r3, [pc, #20]	; (800275c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	0a1b      	lsrs	r3, r3, #8
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	4a03      	ldr	r2, [pc, #12]	; (8002760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002752:	5cd3      	ldrb	r3, [r2, r3]
 8002754:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002758:	4618      	mov	r0, r3
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40021000 	.word	0x40021000
 8002760:	08005f80 	.word	0x08005f80

08002764 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002768:	f7ff ffde 	bl	8002728 <HAL_RCC_GetHCLKFreq>
 800276c:	4601      	mov	r1, r0
 800276e:	4b05      	ldr	r3, [pc, #20]	; (8002784 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	0adb      	lsrs	r3, r3, #11
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	4a03      	ldr	r2, [pc, #12]	; (8002788 <HAL_RCC_GetPCLK2Freq+0x24>)
 800277a:	5cd3      	ldrb	r3, [r2, r3]
 800277c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002780:	4618      	mov	r0, r3
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40021000 	.word	0x40021000
 8002788:	08005f80 	.word	0x08005f80

0800278c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002794:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <RCC_Delay+0x34>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a0a      	ldr	r2, [pc, #40]	; (80027c4 <RCC_Delay+0x38>)
 800279a:	fba2 2303 	umull	r2, r3, r2, r3
 800279e:	0a5b      	lsrs	r3, r3, #9
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	fb02 f303 	mul.w	r3, r2, r3
 80027a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027a8:	bf00      	nop
  }
  while (Delay --);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	1e5a      	subs	r2, r3, #1
 80027ae:	60fa      	str	r2, [r7, #12]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1f9      	bne.n	80027a8 <RCC_Delay+0x1c>
}
 80027b4:	bf00      	nop
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	2000000c 	.word	0x2000000c
 80027c4:	10624dd3 	.word	0x10624dd3

080027c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	2300      	movs	r3, #0
 80027d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d07d      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80027e4:	2300      	movs	r3, #0
 80027e6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027e8:	4b4f      	ldr	r3, [pc, #316]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10d      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027f4:	4b4c      	ldr	r3, [pc, #304]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	4a4b      	ldr	r2, [pc, #300]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027fe:	61d3      	str	r3, [r2, #28]
 8002800:	4b49      	ldr	r3, [pc, #292]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800280c:	2301      	movs	r3, #1
 800280e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002810:	4b46      	ldr	r3, [pc, #280]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002818:	2b00      	cmp	r3, #0
 800281a:	d118      	bne.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800281c:	4b43      	ldr	r3, [pc, #268]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a42      	ldr	r2, [pc, #264]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002826:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002828:	f7fe f858 	bl	80008dc <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800282e:	e008      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002830:	f7fe f854 	bl	80008dc <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b64      	cmp	r3, #100	; 0x64
 800283c:	d901      	bls.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e06d      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002842:	4b3a      	ldr	r3, [pc, #232]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800284e:	4b36      	ldr	r3, [pc, #216]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002856:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d02e      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	429a      	cmp	r2, r3
 800286a:	d027      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800286c:	4b2e      	ldr	r3, [pc, #184]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002874:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002876:	4b2e      	ldr	r3, [pc, #184]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002878:	2201      	movs	r2, #1
 800287a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800287c:	4b2c      	ldr	r3, [pc, #176]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002882:	4a29      	ldr	r2, [pc, #164]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d014      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002892:	f7fe f823 	bl	80008dc <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002898:	e00a      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289a:	f7fe f81f 	bl	80008dc <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e036      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b0:	4b1d      	ldr	r3, [pc, #116]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0ee      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028bc:	4b1a      	ldr	r3, [pc, #104]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	4917      	ldr	r1, [pc, #92]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028ce:	7dfb      	ldrb	r3, [r7, #23]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d105      	bne.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d4:	4b14      	ldr	r3, [pc, #80]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028d6:	69db      	ldr	r3, [r3, #28]
 80028d8:	4a13      	ldr	r2, [pc, #76]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028de:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d008      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028ec:	4b0e      	ldr	r3, [pc, #56]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	490b      	ldr	r1, [pc, #44]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0310 	and.w	r3, r3, #16
 8002906:	2b00      	cmp	r3, #0
 8002908:	d008      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800290a:	4b07      	ldr	r3, [pc, #28]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	4904      	ldr	r1, [pc, #16]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002918:	4313      	orrs	r3, r2
 800291a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40021000 	.word	0x40021000
 800292c:	40007000 	.word	0x40007000
 8002930:	42420440 	.word	0x42420440

08002934 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e053      	b.n	80029ee <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b00      	cmp	r3, #0
 8002956:	d106      	bne.n	8002966 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7fd fe23 	bl	80005ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2202      	movs	r2, #2
 800296a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800297c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	431a      	orrs	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	431a      	orrs	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	431a      	orrs	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	431a      	orrs	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	ea42 0103 	orr.w	r1, r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	0c1a      	lsrs	r2, r3, #16
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f002 0204 	and.w	r2, r2, #4
 80029cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	69da      	ldr	r2, [r3, #28]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e03f      	b.n	8002a88 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d106      	bne.n	8002a22 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7fd fe0f 	bl	8000640 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2224      	movs	r2, #36	; 0x24
 8002a26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68da      	ldr	r2, [r3, #12]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a38:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f854 	bl	8002ae8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691a      	ldr	r2, [r3, #16]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a4e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	695a      	ldr	r2, [r3, #20]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a5e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a6e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2220      	movs	r2, #32
 8002a82:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e01e      	b.n	8002ae0 <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2224      	movs	r2, #36	; 0x24
 8002aa6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ab8:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7fd fe0a 	bl	80006d4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b22:	f023 030c 	bic.w	r3, r3, #12
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6812      	ldr	r2, [r2, #0]
 8002b2a:	68f9      	ldr	r1, [r7, #12]
 8002b2c:	430b      	orrs	r3, r1
 8002b2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	699a      	ldr	r2, [r3, #24]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a52      	ldr	r2, [pc, #328]	; (8002c94 <UART_SetConfig+0x1ac>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d14e      	bne.n	8002bee <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b50:	f7ff fe08 	bl	8002764 <HAL_RCC_GetPCLK2Freq>
 8002b54:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	009a      	lsls	r2, r3, #2
 8002b60:	441a      	add	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6c:	4a4a      	ldr	r2, [pc, #296]	; (8002c98 <UART_SetConfig+0x1b0>)
 8002b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b72:	095b      	lsrs	r3, r3, #5
 8002b74:	0119      	lsls	r1, r3, #4
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	009a      	lsls	r2, r3, #2
 8002b80:	441a      	add	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b8c:	4b42      	ldr	r3, [pc, #264]	; (8002c98 <UART_SetConfig+0x1b0>)
 8002b8e:	fba3 0302 	umull	r0, r3, r3, r2
 8002b92:	095b      	lsrs	r3, r3, #5
 8002b94:	2064      	movs	r0, #100	; 0x64
 8002b96:	fb00 f303 	mul.w	r3, r0, r3
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	011b      	lsls	r3, r3, #4
 8002b9e:	3332      	adds	r3, #50	; 0x32
 8002ba0:	4a3d      	ldr	r2, [pc, #244]	; (8002c98 <UART_SetConfig+0x1b0>)
 8002ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bac:	4419      	add	r1, r3
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009a      	lsls	r2, r3, #2
 8002bb8:	441a      	add	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bc4:	4b34      	ldr	r3, [pc, #208]	; (8002c98 <UART_SetConfig+0x1b0>)
 8002bc6:	fba3 0302 	umull	r0, r3, r3, r2
 8002bca:	095b      	lsrs	r3, r3, #5
 8002bcc:	2064      	movs	r0, #100	; 0x64
 8002bce:	fb00 f303 	mul.w	r3, r0, r3
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	3332      	adds	r3, #50	; 0x32
 8002bd8:	4a2f      	ldr	r2, [pc, #188]	; (8002c98 <UART_SetConfig+0x1b0>)
 8002bda:	fba2 2303 	umull	r2, r3, r2, r3
 8002bde:	095b      	lsrs	r3, r3, #5
 8002be0:	f003 020f 	and.w	r2, r3, #15
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	440a      	add	r2, r1
 8002bea:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002bec:	e04d      	b.n	8002c8a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002bee:	f7ff fda5 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 8002bf2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	009a      	lsls	r2, r3, #2
 8002bfe:	441a      	add	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0a:	4a23      	ldr	r2, [pc, #140]	; (8002c98 <UART_SetConfig+0x1b0>)
 8002c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c10:	095b      	lsrs	r3, r3, #5
 8002c12:	0119      	lsls	r1, r3, #4
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	4613      	mov	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	009a      	lsls	r2, r3, #2
 8002c1e:	441a      	add	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c2a:	4b1b      	ldr	r3, [pc, #108]	; (8002c98 <UART_SetConfig+0x1b0>)
 8002c2c:	fba3 0302 	umull	r0, r3, r3, r2
 8002c30:	095b      	lsrs	r3, r3, #5
 8002c32:	2064      	movs	r0, #100	; 0x64
 8002c34:	fb00 f303 	mul.w	r3, r0, r3
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	3332      	adds	r3, #50	; 0x32
 8002c3e:	4a16      	ldr	r2, [pc, #88]	; (8002c98 <UART_SetConfig+0x1b0>)
 8002c40:	fba2 2303 	umull	r2, r3, r2, r3
 8002c44:	095b      	lsrs	r3, r3, #5
 8002c46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c4a:	4419      	add	r1, r3
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4413      	add	r3, r2
 8002c54:	009a      	lsls	r2, r3, #2
 8002c56:	441a      	add	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c62:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <UART_SetConfig+0x1b0>)
 8002c64:	fba3 0302 	umull	r0, r3, r3, r2
 8002c68:	095b      	lsrs	r3, r3, #5
 8002c6a:	2064      	movs	r0, #100	; 0x64
 8002c6c:	fb00 f303 	mul.w	r3, r0, r3
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	3332      	adds	r3, #50	; 0x32
 8002c76:	4a08      	ldr	r2, [pc, #32]	; (8002c98 <UART_SetConfig+0x1b0>)
 8002c78:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7c:	095b      	lsrs	r3, r3, #5
 8002c7e:	f003 020f 	and.w	r2, r3, #15
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	440a      	add	r2, r1
 8002c88:	609a      	str	r2, [r3, #8]
}
 8002c8a:	bf00      	nop
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40013800 	.word	0x40013800
 8002c98:	51eb851f 	.word	0x51eb851f

08002c9c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002c9c:	b084      	sub	sp, #16
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	f107 0014 	add.w	r0, r7, #20
 8002caa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	b004      	add	sp, #16
 8002cba:	4770      	bx	lr

08002cbc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002cc4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002cc8:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	89fb      	ldrh	r3, [r7, #14]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr

08002cea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b085      	sub	sp, #20
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002cf2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002cf6:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	b21a      	sxth	r2, r3
 8002d02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d06:	43db      	mvns	r3, r3
 8002d08:	b21b      	sxth	r3, r3
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	b21b      	sxth	r3, r3
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr

08002d22 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr

08002d3a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	f107 0014 	add.w	r0, r7, #20
 8002d48:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff ffa5 	bl	8002cbc <USB_EnableGlobalInt>

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d7e:	b004      	add	sp, #16
 8002d80:	4770      	bx	lr
	...

08002d84 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002d84:	b490      	push	{r4, r7}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da8:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	78db      	ldrb	r3, [r3, #3]
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	d819      	bhi.n	8002de6 <USB_ActivateEndpoint+0x62>
 8002db2:	a201      	add	r2, pc, #4	; (adr r2, 8002db8 <USB_ActivateEndpoint+0x34>)
 8002db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db8:	08002dc9 	.word	0x08002dc9
 8002dbc:	08002ddd 	.word	0x08002ddd
 8002dc0:	08002ded 	.word	0x08002ded
 8002dc4:	08002dd3 	.word	0x08002dd3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002dc8:	89bb      	ldrh	r3, [r7, #12]
 8002dca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dce:	81bb      	strh	r3, [r7, #12]
      break;
 8002dd0:	e00d      	b.n	8002dee <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002dd2:	89bb      	ldrh	r3, [r7, #12]
 8002dd4:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002dd8:	81bb      	strh	r3, [r7, #12]
      break;
 8002dda:	e008      	b.n	8002dee <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002ddc:	89bb      	ldrh	r3, [r7, #12]
 8002dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002de2:	81bb      	strh	r3, [r7, #12]
      break;
 8002de4:	e003      	b.n	8002dee <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	73fb      	strb	r3, [r7, #15]
      break;
 8002dea:	e000      	b.n	8002dee <USB_ActivateEndpoint+0x6a>
      break;
 8002dec:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	441a      	add	r2, r3
 8002df8:	89bb      	ldrh	r3, [r7, #12]
 8002dfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	b29c      	uxth	r4, r3
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	441a      	add	r2, r3
 8002e3a:	4b8a      	ldr	r3, [pc, #552]	; (8003064 <USB_ActivateEndpoint+0x2e0>)
 8002e3c:	4323      	orrs	r3, r4
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	7b1b      	ldrb	r3, [r3, #12]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f040 8112 	bne.w	8003070 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	785b      	ldrb	r3, [r3, #1]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d067      	beq.n	8002f24 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002e54:	687c      	ldr	r4, [r7, #4]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	441c      	add	r4, r3
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	4423      	add	r3, r4
 8002e68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e6c:	461c      	mov	r4, r3
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	88db      	ldrh	r3, [r3, #6]
 8002e72:	085b      	lsrs	r3, r3, #1
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	881b      	ldrh	r3, [r3, #0]
 8002e88:	b29c      	uxth	r4, r3
 8002e8a:	4623      	mov	r3, r4
 8002e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d014      	beq.n	8002ebe <USB_ActivateEndpoint+0x13a>
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	881b      	ldrh	r3, [r3, #0]
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eaa:	b29c      	uxth	r4, r3
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	441a      	add	r2, r3
 8002eb6:	4b6c      	ldr	r3, [pc, #432]	; (8003068 <USB_ActivateEndpoint+0x2e4>)
 8002eb8:	4323      	orrs	r3, r4
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	78db      	ldrb	r3, [r3, #3]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d018      	beq.n	8002ef8 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002edc:	b29c      	uxth	r4, r3
 8002ede:	f084 0320 	eor.w	r3, r4, #32
 8002ee2:	b29c      	uxth	r4, r3
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	441a      	add	r2, r3
 8002eee:	4b5d      	ldr	r3, [pc, #372]	; (8003064 <USB_ActivateEndpoint+0x2e0>)
 8002ef0:	4323      	orrs	r3, r4
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	8013      	strh	r3, [r2, #0]
 8002ef6:	e22b      	b.n	8003350 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	881b      	ldrh	r3, [r3, #0]
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f0e:	b29c      	uxth	r4, r3
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	441a      	add	r2, r3
 8002f1a:	4b52      	ldr	r3, [pc, #328]	; (8003064 <USB_ActivateEndpoint+0x2e0>)
 8002f1c:	4323      	orrs	r3, r4
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	8013      	strh	r3, [r2, #0]
 8002f22:	e215      	b.n	8003350 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002f24:	687c      	ldr	r4, [r7, #4]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	441c      	add	r4, r3
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	4423      	add	r3, r4
 8002f38:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002f3c:	461c      	mov	r4, r3
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	88db      	ldrh	r3, [r3, #6]
 8002f42:	085b      	lsrs	r3, r3, #1
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002f4c:	687c      	ldr	r4, [r7, #4]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	441c      	add	r4, r3
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	4423      	add	r3, r4
 8002f60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f64:	461c      	mov	r4, r3
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10e      	bne.n	8002f8c <USB_ActivateEndpoint+0x208>
 8002f6e:	8823      	ldrh	r3, [r4, #0]
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	8023      	strh	r3, [r4, #0]
 8002f7a:	8823      	ldrh	r3, [r4, #0]
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	8023      	strh	r3, [r4, #0]
 8002f8a:	e02d      	b.n	8002fe8 <USB_ActivateEndpoint+0x264>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	2b3e      	cmp	r3, #62	; 0x3e
 8002f92:	d812      	bhi.n	8002fba <USB_ActivateEndpoint+0x236>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	085b      	lsrs	r3, r3, #1
 8002f9a:	60bb      	str	r3, [r7, #8]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d002      	beq.n	8002fae <USB_ActivateEndpoint+0x22a>
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	3301      	adds	r3, #1
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	029b      	lsls	r3, r3, #10
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	8023      	strh	r3, [r4, #0]
 8002fb8:	e016      	b.n	8002fe8 <USB_ActivateEndpoint+0x264>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	095b      	lsrs	r3, r3, #5
 8002fc0:	60bb      	str	r3, [r7, #8]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	f003 031f 	and.w	r3, r3, #31
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d102      	bne.n	8002fd4 <USB_ActivateEndpoint+0x250>
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	60bb      	str	r3, [r7, #8]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	029b      	lsls	r3, r3, #10
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fe0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	b29c      	uxth	r4, r3
 8002ff6:	4623      	mov	r3, r4
 8002ff8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d014      	beq.n	800302a <USB_ActivateEndpoint+0x2a6>
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	b29b      	uxth	r3, r3
 800300e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003016:	b29c      	uxth	r4, r3
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	441a      	add	r2, r3
 8003022:	4b12      	ldr	r3, [pc, #72]	; (800306c <USB_ActivateEndpoint+0x2e8>)
 8003024:	4323      	orrs	r3, r4
 8003026:	b29b      	uxth	r3, r3
 8003028:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	881b      	ldrh	r3, [r3, #0]
 8003036:	b29b      	uxth	r3, r3
 8003038:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800303c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003040:	b29c      	uxth	r4, r3
 8003042:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003046:	b29c      	uxth	r4, r3
 8003048:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800304c:	b29c      	uxth	r4, r3
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	441a      	add	r2, r3
 8003058:	4b02      	ldr	r3, [pc, #8]	; (8003064 <USB_ActivateEndpoint+0x2e0>)
 800305a:	4323      	orrs	r3, r4
 800305c:	b29b      	uxth	r3, r3
 800305e:	8013      	strh	r3, [r2, #0]
 8003060:	e176      	b.n	8003350 <USB_ActivateEndpoint+0x5cc>
 8003062:	bf00      	nop
 8003064:	ffff8080 	.word	0xffff8080
 8003068:	ffff80c0 	.word	0xffff80c0
 800306c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4413      	add	r3, r2
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	b29b      	uxth	r3, r3
 800307e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003086:	b29c      	uxth	r4, r3
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	441a      	add	r2, r3
 8003092:	4b96      	ldr	r3, [pc, #600]	; (80032ec <USB_ActivateEndpoint+0x568>)
 8003094:	4323      	orrs	r3, r4
 8003096:	b29b      	uxth	r3, r3
 8003098:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800309a:	687c      	ldr	r4, [r7, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	441c      	add	r4, r3
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	011b      	lsls	r3, r3, #4
 80030ac:	4423      	add	r3, r4
 80030ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030b2:	461c      	mov	r4, r3
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	891b      	ldrh	r3, [r3, #8]
 80030b8:	085b      	lsrs	r3, r3, #1
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	b29b      	uxth	r3, r3
 80030c0:	8023      	strh	r3, [r4, #0]
 80030c2:	687c      	ldr	r4, [r7, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	441c      	add	r4, r3
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	4423      	add	r3, r4
 80030d6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80030da:	461c      	mov	r4, r3
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	895b      	ldrh	r3, [r3, #10]
 80030e0:	085b      	lsrs	r3, r3, #1
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	785b      	ldrb	r3, [r3, #1]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f040 8088 	bne.w	8003204 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	b29c      	uxth	r4, r3
 8003102:	4623      	mov	r3, r4
 8003104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d014      	beq.n	8003136 <USB_ActivateEndpoint+0x3b2>
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	b29b      	uxth	r3, r3
 800311a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800311e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003122:	b29c      	uxth	r4, r3
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	441a      	add	r2, r3
 800312e:	4b70      	ldr	r3, [pc, #448]	; (80032f0 <USB_ActivateEndpoint+0x56c>)
 8003130:	4323      	orrs	r3, r4
 8003132:	b29b      	uxth	r3, r3
 8003134:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	b29c      	uxth	r4, r3
 8003144:	4623      	mov	r3, r4
 8003146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314a:	2b00      	cmp	r3, #0
 800314c:	d014      	beq.n	8003178 <USB_ActivateEndpoint+0x3f4>
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	881b      	ldrh	r3, [r3, #0]
 800315a:	b29b      	uxth	r3, r3
 800315c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003164:	b29c      	uxth	r4, r3
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	441a      	add	r2, r3
 8003170:	4b60      	ldr	r3, [pc, #384]	; (80032f4 <USB_ActivateEndpoint+0x570>)
 8003172:	4323      	orrs	r3, r4
 8003174:	b29b      	uxth	r3, r3
 8003176:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	881b      	ldrh	r3, [r3, #0]
 8003184:	b29b      	uxth	r3, r3
 8003186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800318a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800318e:	b29c      	uxth	r4, r3
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	441a      	add	r2, r3
 800319a:	4b56      	ldr	r3, [pc, #344]	; (80032f4 <USB_ActivateEndpoint+0x570>)
 800319c:	4323      	orrs	r3, r4
 800319e:	b29b      	uxth	r3, r3
 80031a0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b8:	b29c      	uxth	r4, r3
 80031ba:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80031be:	b29c      	uxth	r4, r3
 80031c0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80031c4:	b29c      	uxth	r4, r3
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	441a      	add	r2, r3
 80031d0:	4b49      	ldr	r3, [pc, #292]	; (80032f8 <USB_ActivateEndpoint+0x574>)
 80031d2:	4323      	orrs	r3, r4
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031ee:	b29c      	uxth	r4, r3
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	441a      	add	r2, r3
 80031fa:	4b3f      	ldr	r3, [pc, #252]	; (80032f8 <USB_ActivateEndpoint+0x574>)
 80031fc:	4323      	orrs	r3, r4
 80031fe:	b29b      	uxth	r3, r3
 8003200:	8013      	strh	r3, [r2, #0]
 8003202:	e0a5      	b.n	8003350 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	b29c      	uxth	r4, r3
 8003212:	4623      	mov	r3, r4
 8003214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d014      	beq.n	8003246 <USB_ActivateEndpoint+0x4c2>
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	b29b      	uxth	r3, r3
 800322a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800322e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003232:	b29c      	uxth	r4, r3
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	441a      	add	r2, r3
 800323e:	4b2c      	ldr	r3, [pc, #176]	; (80032f0 <USB_ActivateEndpoint+0x56c>)
 8003240:	4323      	orrs	r3, r4
 8003242:	b29b      	uxth	r3, r3
 8003244:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	b29c      	uxth	r4, r3
 8003254:	4623      	mov	r3, r4
 8003256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325a:	2b00      	cmp	r3, #0
 800325c:	d014      	beq.n	8003288 <USB_ActivateEndpoint+0x504>
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	881b      	ldrh	r3, [r3, #0]
 800326a:	b29b      	uxth	r3, r3
 800326c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003274:	b29c      	uxth	r4, r3
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	441a      	add	r2, r3
 8003280:	4b1c      	ldr	r3, [pc, #112]	; (80032f4 <USB_ActivateEndpoint+0x570>)
 8003282:	4323      	orrs	r3, r4
 8003284:	b29b      	uxth	r3, r3
 8003286:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	881b      	ldrh	r3, [r3, #0]
 8003294:	b29b      	uxth	r3, r3
 8003296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800329a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329e:	b29c      	uxth	r4, r3
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	441a      	add	r2, r3
 80032aa:	4b11      	ldr	r3, [pc, #68]	; (80032f0 <USB_ActivateEndpoint+0x56c>)
 80032ac:	4323      	orrs	r3, r4
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	78db      	ldrb	r3, [r3, #3]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d020      	beq.n	80032fc <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	881b      	ldrh	r3, [r3, #0]
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032d0:	b29c      	uxth	r4, r3
 80032d2:	f084 0320 	eor.w	r3, r4, #32
 80032d6:	b29c      	uxth	r4, r3
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	441a      	add	r2, r3
 80032e2:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <USB_ActivateEndpoint+0x574>)
 80032e4:	4323      	orrs	r3, r4
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	8013      	strh	r3, [r2, #0]
 80032ea:	e01c      	b.n	8003326 <USB_ActivateEndpoint+0x5a2>
 80032ec:	ffff8180 	.word	0xffff8180
 80032f0:	ffffc080 	.word	0xffffc080
 80032f4:	ffff80c0 	.word	0xffff80c0
 80032f8:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	b29b      	uxth	r3, r3
 800330a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800330e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003312:	b29c      	uxth	r4, r3
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	441a      	add	r2, r3
 800331e:	4b0f      	ldr	r3, [pc, #60]	; (800335c <USB_ActivateEndpoint+0x5d8>)
 8003320:	4323      	orrs	r3, r4
 8003322:	b29b      	uxth	r3, r3
 8003324:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	b29b      	uxth	r3, r3
 8003334:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800333c:	b29c      	uxth	r4, r3
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	441a      	add	r2, r3
 8003348:	4b04      	ldr	r3, [pc, #16]	; (800335c <USB_ActivateEndpoint+0x5d8>)
 800334a:	4323      	orrs	r3, r4
 800334c:	b29b      	uxth	r3, r3
 800334e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003350:	7bfb      	ldrb	r3, [r7, #15]
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bc90      	pop	{r4, r7}
 800335a:	4770      	bx	lr
 800335c:	ffff8080 	.word	0xffff8080

08003360 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003360:	b490      	push	{r4, r7}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	7b1b      	ldrb	r3, [r3, #12]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d171      	bne.n	8003456 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	785b      	ldrb	r3, [r3, #1]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d036      	beq.n	80033e8 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	b29c      	uxth	r4, r3
 8003388:	4623      	mov	r3, r4
 800338a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338e:	2b00      	cmp	r3, #0
 8003390:	d014      	beq.n	80033bc <USB_DeactivateEndpoint+0x5c>
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	881b      	ldrh	r3, [r3, #0]
 800339e:	b29b      	uxth	r3, r3
 80033a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a8:	b29c      	uxth	r4, r3
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	441a      	add	r2, r3
 80033b4:	4b6b      	ldr	r3, [pc, #428]	; (8003564 <USB_DeactivateEndpoint+0x204>)
 80033b6:	4323      	orrs	r3, r4
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033d2:	b29c      	uxth	r4, r3
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	441a      	add	r2, r3
 80033de:	4b62      	ldr	r3, [pc, #392]	; (8003568 <USB_DeactivateEndpoint+0x208>)
 80033e0:	4323      	orrs	r3, r4
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	8013      	strh	r3, [r2, #0]
 80033e6:	e144      	b.n	8003672 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	881b      	ldrh	r3, [r3, #0]
 80033f4:	b29c      	uxth	r4, r3
 80033f6:	4623      	mov	r3, r4
 80033f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d014      	beq.n	800342a <USB_DeactivateEndpoint+0xca>
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	881b      	ldrh	r3, [r3, #0]
 800340c:	b29b      	uxth	r3, r3
 800340e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003416:	b29c      	uxth	r4, r3
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	441a      	add	r2, r3
 8003422:	4b52      	ldr	r3, [pc, #328]	; (800356c <USB_DeactivateEndpoint+0x20c>)
 8003424:	4323      	orrs	r3, r4
 8003426:	b29b      	uxth	r3, r3
 8003428:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	881b      	ldrh	r3, [r3, #0]
 8003436:	b29b      	uxth	r3, r3
 8003438:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800343c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003440:	b29c      	uxth	r4, r3
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	441a      	add	r2, r3
 800344c:	4b46      	ldr	r3, [pc, #280]	; (8003568 <USB_DeactivateEndpoint+0x208>)
 800344e:	4323      	orrs	r3, r4
 8003450:	b29b      	uxth	r3, r3
 8003452:	8013      	strh	r3, [r2, #0]
 8003454:	e10d      	b.n	8003672 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	785b      	ldrb	r3, [r3, #1]
 800345a:	2b00      	cmp	r3, #0
 800345c:	f040 8088 	bne.w	8003570 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	b29c      	uxth	r4, r3
 800346e:	4623      	mov	r3, r4
 8003470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d014      	beq.n	80034a2 <USB_DeactivateEndpoint+0x142>
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	881b      	ldrh	r3, [r3, #0]
 8003484:	b29b      	uxth	r3, r3
 8003486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800348a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348e:	b29c      	uxth	r4, r3
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	441a      	add	r2, r3
 800349a:	4b34      	ldr	r3, [pc, #208]	; (800356c <USB_DeactivateEndpoint+0x20c>)
 800349c:	4323      	orrs	r3, r4
 800349e:	b29b      	uxth	r3, r3
 80034a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	b29c      	uxth	r4, r3
 80034b0:	4623      	mov	r3, r4
 80034b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d014      	beq.n	80034e4 <USB_DeactivateEndpoint+0x184>
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d0:	b29c      	uxth	r4, r3
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	441a      	add	r2, r3
 80034dc:	4b21      	ldr	r3, [pc, #132]	; (8003564 <USB_DeactivateEndpoint+0x204>)
 80034de:	4323      	orrs	r3, r4
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	881b      	ldrh	r3, [r3, #0]
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034fa:	b29c      	uxth	r4, r3
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	441a      	add	r2, r3
 8003506:	4b17      	ldr	r3, [pc, #92]	; (8003564 <USB_DeactivateEndpoint+0x204>)
 8003508:	4323      	orrs	r3, r4
 800350a:	b29b      	uxth	r3, r3
 800350c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	b29b      	uxth	r3, r3
 800351c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003524:	b29c      	uxth	r4, r3
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	441a      	add	r2, r3
 8003530:	4b0d      	ldr	r3, [pc, #52]	; (8003568 <USB_DeactivateEndpoint+0x208>)
 8003532:	4323      	orrs	r3, r4
 8003534:	b29b      	uxth	r3, r3
 8003536:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4413      	add	r3, r2
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	b29b      	uxth	r3, r3
 8003546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800354a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800354e:	b29c      	uxth	r4, r3
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	441a      	add	r2, r3
 800355a:	4b03      	ldr	r3, [pc, #12]	; (8003568 <USB_DeactivateEndpoint+0x208>)
 800355c:	4323      	orrs	r3, r4
 800355e:	b29b      	uxth	r3, r3
 8003560:	8013      	strh	r3, [r2, #0]
 8003562:	e086      	b.n	8003672 <USB_DeactivateEndpoint+0x312>
 8003564:	ffff80c0 	.word	0xffff80c0
 8003568:	ffff8080 	.word	0xffff8080
 800356c:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	b29c      	uxth	r4, r3
 800357e:	4623      	mov	r3, r4
 8003580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d014      	beq.n	80035b2 <USB_DeactivateEndpoint+0x252>
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	b29b      	uxth	r3, r3
 8003596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800359a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359e:	b29c      	uxth	r4, r3
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	441a      	add	r2, r3
 80035aa:	4b35      	ldr	r3, [pc, #212]	; (8003680 <USB_DeactivateEndpoint+0x320>)
 80035ac:	4323      	orrs	r3, r4
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	881b      	ldrh	r3, [r3, #0]
 80035be:	b29c      	uxth	r4, r3
 80035c0:	4623      	mov	r3, r4
 80035c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d014      	beq.n	80035f4 <USB_DeactivateEndpoint+0x294>
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	881b      	ldrh	r3, [r3, #0]
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035e0:	b29c      	uxth	r4, r3
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	441a      	add	r2, r3
 80035ec:	4b25      	ldr	r3, [pc, #148]	; (8003684 <USB_DeactivateEndpoint+0x324>)
 80035ee:	4323      	orrs	r3, r4
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	881b      	ldrh	r3, [r3, #0]
 8003600:	b29b      	uxth	r3, r3
 8003602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360a:	b29c      	uxth	r4, r3
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	441a      	add	r2, r3
 8003616:	4b1a      	ldr	r3, [pc, #104]	; (8003680 <USB_DeactivateEndpoint+0x320>)
 8003618:	4323      	orrs	r3, r4
 800361a:	b29b      	uxth	r3, r3
 800361c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	881b      	ldrh	r3, [r3, #0]
 800362a:	b29b      	uxth	r3, r3
 800362c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003634:	b29c      	uxth	r4, r3
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	441a      	add	r2, r3
 8003640:	4b11      	ldr	r3, [pc, #68]	; (8003688 <USB_DeactivateEndpoint+0x328>)
 8003642:	4323      	orrs	r3, r4
 8003644:	b29b      	uxth	r3, r3
 8003646:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	881b      	ldrh	r3, [r3, #0]
 8003654:	b29b      	uxth	r3, r3
 8003656:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800365a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365e:	b29c      	uxth	r4, r3
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	441a      	add	r2, r3
 800366a:	4b07      	ldr	r3, [pc, #28]	; (8003688 <USB_DeactivateEndpoint+0x328>)
 800366c:	4323      	orrs	r3, r4
 800366e:	b29b      	uxth	r3, r3
 8003670:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bc90      	pop	{r4, r7}
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	ffffc080 	.word	0xffffc080
 8003684:	ffff80c0 	.word	0xffff80c0
 8003688:	ffff8080 	.word	0xffff8080

0800368c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800368c:	b590      	push	{r4, r7, lr}
 800368e:	b08d      	sub	sp, #52	; 0x34
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	785b      	ldrb	r3, [r3, #1]
 800369a:	2b01      	cmp	r3, #1
 800369c:	f040 8160 	bne.w	8003960 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	699a      	ldr	r2, [r3, #24]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d909      	bls.n	80036c0 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	699a      	ldr	r2, [r3, #24]
 80036b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b8:	1ad2      	subs	r2, r2, r3
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	619a      	str	r2, [r3, #24]
 80036be:	e005      	b.n	80036cc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	2200      	movs	r2, #0
 80036ca:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	7b1b      	ldrb	r3, [r3, #12]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d119      	bne.n	8003708 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	6959      	ldr	r1, [r3, #20]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	88da      	ldrh	r2, [r3, #6]
 80036dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036de:	b29b      	uxth	r3, r3
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 fba2 	bl	8003e2a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80036e6:	687c      	ldr	r4, [r7, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	441c      	add	r4, r3
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	4423      	add	r3, r4
 80036fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80036fe:	461c      	mov	r4, r3
 8003700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003702:	b29b      	uxth	r3, r3
 8003704:	8023      	strh	r3, [r4, #0]
 8003706:	e10f      	b.n	8003928 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	b29b      	uxth	r3, r3
 8003716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371a:	2b00      	cmp	r3, #0
 800371c:	d065      	beq.n	80037ea <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800371e:	687c      	ldr	r4, [r7, #4]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	785b      	ldrb	r3, [r3, #1]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d148      	bne.n	80037ba <USB_EPStartXfer+0x12e>
 8003728:	687c      	ldr	r4, [r7, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003730:	b29b      	uxth	r3, r3
 8003732:	441c      	add	r4, r3
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	4423      	add	r3, r4
 800373c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003740:	461c      	mov	r4, r3
 8003742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10e      	bne.n	8003766 <USB_EPStartXfer+0xda>
 8003748:	8823      	ldrh	r3, [r4, #0]
 800374a:	b29b      	uxth	r3, r3
 800374c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003750:	b29b      	uxth	r3, r3
 8003752:	8023      	strh	r3, [r4, #0]
 8003754:	8823      	ldrh	r3, [r4, #0]
 8003756:	b29b      	uxth	r3, r3
 8003758:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800375c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003760:	b29b      	uxth	r3, r3
 8003762:	8023      	strh	r3, [r4, #0]
 8003764:	e03d      	b.n	80037e2 <USB_EPStartXfer+0x156>
 8003766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003768:	2b3e      	cmp	r3, #62	; 0x3e
 800376a:	d810      	bhi.n	800378e <USB_EPStartXfer+0x102>
 800376c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376e:	085b      	lsrs	r3, r3, #1
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
 8003772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b00      	cmp	r3, #0
 800377a:	d002      	beq.n	8003782 <USB_EPStartXfer+0xf6>
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	3301      	adds	r3, #1
 8003780:	627b      	str	r3, [r7, #36]	; 0x24
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	b29b      	uxth	r3, r3
 8003786:	029b      	lsls	r3, r3, #10
 8003788:	b29b      	uxth	r3, r3
 800378a:	8023      	strh	r3, [r4, #0]
 800378c:	e029      	b.n	80037e2 <USB_EPStartXfer+0x156>
 800378e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003790:	095b      	lsrs	r3, r3, #5
 8003792:	627b      	str	r3, [r7, #36]	; 0x24
 8003794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003796:	f003 031f 	and.w	r3, r3, #31
 800379a:	2b00      	cmp	r3, #0
 800379c:	d102      	bne.n	80037a4 <USB_EPStartXfer+0x118>
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	3b01      	subs	r3, #1
 80037a2:	627b      	str	r3, [r7, #36]	; 0x24
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	029b      	lsls	r3, r3, #10
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	8023      	strh	r3, [r4, #0]
 80037b8:	e013      	b.n	80037e2 <USB_EPStartXfer+0x156>
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	785b      	ldrb	r3, [r3, #1]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d10f      	bne.n	80037e2 <USB_EPStartXfer+0x156>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	441c      	add	r4, r3
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	4423      	add	r3, r4
 80037d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037dc:	b29a      	uxth	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	895b      	ldrh	r3, [r3, #10]
 80037e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80037e8:	e063      	b.n	80038b2 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	785b      	ldrb	r3, [r3, #1]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d148      	bne.n	8003884 <USB_EPStartXfer+0x1f8>
 80037f2:	687c      	ldr	r4, [r7, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	441c      	add	r4, r3
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	011b      	lsls	r3, r3, #4
 8003804:	4423      	add	r3, r4
 8003806:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800380a:	461c      	mov	r4, r3
 800380c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10e      	bne.n	8003830 <USB_EPStartXfer+0x1a4>
 8003812:	8823      	ldrh	r3, [r4, #0]
 8003814:	b29b      	uxth	r3, r3
 8003816:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800381a:	b29b      	uxth	r3, r3
 800381c:	8023      	strh	r3, [r4, #0]
 800381e:	8823      	ldrh	r3, [r4, #0]
 8003820:	b29b      	uxth	r3, r3
 8003822:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003826:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800382a:	b29b      	uxth	r3, r3
 800382c:	8023      	strh	r3, [r4, #0]
 800382e:	e03d      	b.n	80038ac <USB_EPStartXfer+0x220>
 8003830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003832:	2b3e      	cmp	r3, #62	; 0x3e
 8003834:	d810      	bhi.n	8003858 <USB_EPStartXfer+0x1cc>
 8003836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003838:	085b      	lsrs	r3, r3, #1
 800383a:	623b      	str	r3, [r7, #32]
 800383c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d002      	beq.n	800384c <USB_EPStartXfer+0x1c0>
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	3301      	adds	r3, #1
 800384a:	623b      	str	r3, [r7, #32]
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	b29b      	uxth	r3, r3
 8003850:	029b      	lsls	r3, r3, #10
 8003852:	b29b      	uxth	r3, r3
 8003854:	8023      	strh	r3, [r4, #0]
 8003856:	e029      	b.n	80038ac <USB_EPStartXfer+0x220>
 8003858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385a:	095b      	lsrs	r3, r3, #5
 800385c:	623b      	str	r3, [r7, #32]
 800385e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003860:	f003 031f 	and.w	r3, r3, #31
 8003864:	2b00      	cmp	r3, #0
 8003866:	d102      	bne.n	800386e <USB_EPStartXfer+0x1e2>
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	3b01      	subs	r3, #1
 800386c:	623b      	str	r3, [r7, #32]
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	b29b      	uxth	r3, r3
 8003872:	029b      	lsls	r3, r3, #10
 8003874:	b29b      	uxth	r3, r3
 8003876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800387a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800387e:	b29b      	uxth	r3, r3
 8003880:	8023      	strh	r3, [r4, #0]
 8003882:	e013      	b.n	80038ac <USB_EPStartXfer+0x220>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	785b      	ldrb	r3, [r3, #1]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d10f      	bne.n	80038ac <USB_EPStartXfer+0x220>
 800388c:	687c      	ldr	r4, [r7, #4]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003894:	b29b      	uxth	r3, r3
 8003896:	441c      	add	r4, r3
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	4423      	add	r3, r4
 80038a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80038a4:	461c      	mov	r4, r3
 80038a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	891b      	ldrh	r3, [r3, #8]
 80038b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	6959      	ldr	r1, [r3, #20]
 80038b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 fab4 	bl	8003e2a <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	785b      	ldrb	r3, [r3, #1]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d115      	bne.n	80038f6 <USB_EPStartXfer+0x26a>
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e0:	b29c      	uxth	r4, r3
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	441a      	add	r2, r3
 80038ec:	4b9a      	ldr	r3, [pc, #616]	; (8003b58 <USB_EPStartXfer+0x4cc>)
 80038ee:	4323      	orrs	r3, r4
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	8013      	strh	r3, [r2, #0]
 80038f4:	e018      	b.n	8003928 <USB_EPStartXfer+0x29c>
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	785b      	ldrb	r3, [r3, #1]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d114      	bne.n	8003928 <USB_EPStartXfer+0x29c>
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	881b      	ldrh	r3, [r3, #0]
 800390a:	b29b      	uxth	r3, r3
 800390c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003914:	b29c      	uxth	r4, r3
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	441a      	add	r2, r3
 8003920:	4b8e      	ldr	r3, [pc, #568]	; (8003b5c <USB_EPStartXfer+0x4d0>)
 8003922:	4323      	orrs	r3, r4
 8003924:	b29b      	uxth	r3, r3
 8003926:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	881b      	ldrh	r3, [r3, #0]
 8003934:	b29b      	uxth	r3, r3
 8003936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800393a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800393e:	b29c      	uxth	r4, r3
 8003940:	f084 0310 	eor.w	r3, r4, #16
 8003944:	b29c      	uxth	r4, r3
 8003946:	f084 0320 	eor.w	r3, r4, #32
 800394a:	b29c      	uxth	r4, r3
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	441a      	add	r2, r3
 8003956:	4b82      	ldr	r3, [pc, #520]	; (8003b60 <USB_EPStartXfer+0x4d4>)
 8003958:	4323      	orrs	r3, r4
 800395a:	b29b      	uxth	r3, r3
 800395c:	8013      	strh	r3, [r2, #0]
 800395e:	e146      	b.n	8003bee <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	699a      	ldr	r2, [r3, #24]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	429a      	cmp	r2, r3
 800396a:	d909      	bls.n	8003980 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	699a      	ldr	r2, [r3, #24]
 8003976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003978:	1ad2      	subs	r2, r2, r3
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	619a      	str	r2, [r3, #24]
 800397e:	e005      	b.n	800398c <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2200      	movs	r2, #0
 800398a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	7b1b      	ldrb	r3, [r3, #12]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d148      	bne.n	8003a26 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003994:	687c      	ldr	r4, [r7, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800399c:	b29b      	uxth	r3, r3
 800399e:	441c      	add	r4, r3
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	4423      	add	r3, r4
 80039a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80039ac:	461c      	mov	r4, r3
 80039ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10e      	bne.n	80039d2 <USB_EPStartXfer+0x346>
 80039b4:	8823      	ldrh	r3, [r4, #0]
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039bc:	b29b      	uxth	r3, r3
 80039be:	8023      	strh	r3, [r4, #0]
 80039c0:	8823      	ldrh	r3, [r4, #0]
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	8023      	strh	r3, [r4, #0]
 80039d0:	e0f2      	b.n	8003bb8 <USB_EPStartXfer+0x52c>
 80039d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d4:	2b3e      	cmp	r3, #62	; 0x3e
 80039d6:	d810      	bhi.n	80039fa <USB_EPStartXfer+0x36e>
 80039d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039da:	085b      	lsrs	r3, r3, #1
 80039dc:	61fb      	str	r3, [r7, #28]
 80039de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <USB_EPStartXfer+0x362>
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	3301      	adds	r3, #1
 80039ec:	61fb      	str	r3, [r7, #28]
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	029b      	lsls	r3, r3, #10
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	8023      	strh	r3, [r4, #0]
 80039f8:	e0de      	b.n	8003bb8 <USB_EPStartXfer+0x52c>
 80039fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fc:	095b      	lsrs	r3, r3, #5
 80039fe:	61fb      	str	r3, [r7, #28]
 8003a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a02:	f003 031f 	and.w	r3, r3, #31
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d102      	bne.n	8003a10 <USB_EPStartXfer+0x384>
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	61fb      	str	r3, [r7, #28]
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	029b      	lsls	r3, r3, #10
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	8023      	strh	r3, [r4, #0]
 8003a24:	e0c8      	b.n	8003bb8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	785b      	ldrb	r3, [r3, #1]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d148      	bne.n	8003ac0 <USB_EPStartXfer+0x434>
 8003a2e:	687c      	ldr	r4, [r7, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	441c      	add	r4, r3
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	011b      	lsls	r3, r3, #4
 8003a40:	4423      	add	r3, r4
 8003a42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a46:	461c      	mov	r4, r3
 8003a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10e      	bne.n	8003a6c <USB_EPStartXfer+0x3e0>
 8003a4e:	8823      	ldrh	r3, [r4, #0]
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	8023      	strh	r3, [r4, #0]
 8003a5a:	8823      	ldrh	r3, [r4, #0]
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	8023      	strh	r3, [r4, #0]
 8003a6a:	e03d      	b.n	8003ae8 <USB_EPStartXfer+0x45c>
 8003a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6e:	2b3e      	cmp	r3, #62	; 0x3e
 8003a70:	d810      	bhi.n	8003a94 <USB_EPStartXfer+0x408>
 8003a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a74:	085b      	lsrs	r3, r3, #1
 8003a76:	61bb      	str	r3, [r7, #24]
 8003a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <USB_EPStartXfer+0x3fc>
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	3301      	adds	r3, #1
 8003a86:	61bb      	str	r3, [r7, #24]
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	029b      	lsls	r3, r3, #10
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	8023      	strh	r3, [r4, #0]
 8003a92:	e029      	b.n	8003ae8 <USB_EPStartXfer+0x45c>
 8003a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	61bb      	str	r3, [r7, #24]
 8003a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9c:	f003 031f 	and.w	r3, r3, #31
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d102      	bne.n	8003aaa <USB_EPStartXfer+0x41e>
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	61bb      	str	r3, [r7, #24]
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	029b      	lsls	r3, r3, #10
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ab6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	8023      	strh	r3, [r4, #0]
 8003abe:	e013      	b.n	8003ae8 <USB_EPStartXfer+0x45c>
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	785b      	ldrb	r3, [r3, #1]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d10f      	bne.n	8003ae8 <USB_EPStartXfer+0x45c>
 8003ac8:	687c      	ldr	r4, [r7, #4]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	441c      	add	r4, r3
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	4423      	add	r3, r4
 8003adc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ae0:	461c      	mov	r4, r3
 8003ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	8023      	strh	r3, [r4, #0]
 8003ae8:	687c      	ldr	r4, [r7, #4]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	785b      	ldrb	r3, [r3, #1]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d14e      	bne.n	8003b90 <USB_EPStartXfer+0x504>
 8003af2:	687c      	ldr	r4, [r7, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	441c      	add	r4, r3
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	4423      	add	r3, r4
 8003b06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b0a:	461c      	mov	r4, r3
 8003b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10e      	bne.n	8003b30 <USB_EPStartXfer+0x4a4>
 8003b12:	8823      	ldrh	r3, [r4, #0]
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	8023      	strh	r3, [r4, #0]
 8003b1e:	8823      	ldrh	r3, [r4, #0]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	8023      	strh	r3, [r4, #0]
 8003b2e:	e043      	b.n	8003bb8 <USB_EPStartXfer+0x52c>
 8003b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b32:	2b3e      	cmp	r3, #62	; 0x3e
 8003b34:	d816      	bhi.n	8003b64 <USB_EPStartXfer+0x4d8>
 8003b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b38:	085b      	lsrs	r3, r3, #1
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <USB_EPStartXfer+0x4c0>
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	029b      	lsls	r3, r3, #10
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	8023      	strh	r3, [r4, #0]
 8003b56:	e02f      	b.n	8003bb8 <USB_EPStartXfer+0x52c>
 8003b58:	ffff80c0 	.word	0xffff80c0
 8003b5c:	ffffc080 	.word	0xffffc080
 8003b60:	ffff8080 	.word	0xffff8080
 8003b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b66:	095b      	lsrs	r3, r3, #5
 8003b68:	617b      	str	r3, [r7, #20]
 8003b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6c:	f003 031f 	and.w	r3, r3, #31
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d102      	bne.n	8003b7a <USB_EPStartXfer+0x4ee>
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	3b01      	subs	r3, #1
 8003b78:	617b      	str	r3, [r7, #20]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	029b      	lsls	r3, r3, #10
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	8023      	strh	r3, [r4, #0]
 8003b8e:	e013      	b.n	8003bb8 <USB_EPStartXfer+0x52c>
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	785b      	ldrb	r3, [r3, #1]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d10f      	bne.n	8003bb8 <USB_EPStartXfer+0x52c>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	441c      	add	r4, r3
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	011b      	lsls	r3, r3, #4
 8003ba8:	4423      	add	r3, r4
 8003baa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003bae:	613b      	str	r3, [r7, #16]
 8003bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	881b      	ldrh	r3, [r3, #0]
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bce:	b29c      	uxth	r4, r3
 8003bd0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003bd4:	b29c      	uxth	r4, r3
 8003bd6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003bda:	b29c      	uxth	r4, r3
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	441a      	add	r2, r3
 8003be6:	4b04      	ldr	r3, [pc, #16]	; (8003bf8 <USB_EPStartXfer+0x56c>)
 8003be8:	4323      	orrs	r3, r4
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3734      	adds	r7, #52	; 0x34
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd90      	pop	{r4, r7, pc}
 8003bf8:	ffff8080 	.word	0xffff8080

08003bfc <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003bfc:	b490      	push	{r4, r7}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	785b      	ldrb	r3, [r3, #1]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d018      	beq.n	8003c40 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	881b      	ldrh	r3, [r3, #0]
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c24:	b29c      	uxth	r4, r3
 8003c26:	f084 0310 	eor.w	r3, r4, #16
 8003c2a:	b29c      	uxth	r4, r3
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	441a      	add	r2, r3
 8003c36:	4b11      	ldr	r3, [pc, #68]	; (8003c7c <USB_EPSetStall+0x80>)
 8003c38:	4323      	orrs	r3, r4
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	8013      	strh	r3, [r2, #0]
 8003c3e:	e017      	b.n	8003c70 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	881b      	ldrh	r3, [r3, #0]
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c56:	b29c      	uxth	r4, r3
 8003c58:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003c5c:	b29c      	uxth	r4, r3
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	441a      	add	r2, r3
 8003c68:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <USB_EPSetStall+0x80>)
 8003c6a:	4323      	orrs	r3, r4
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc90      	pop	{r4, r7}
 8003c7a:	4770      	bx	lr
 8003c7c:	ffff8080 	.word	0xffff8080

08003c80 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003c80:	b490      	push	{r4, r7}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	7b1b      	ldrb	r3, [r3, #12]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d17d      	bne.n	8003d8e <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	785b      	ldrb	r3, [r3, #1]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d03d      	beq.n	8003d16 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4413      	add	r3, r2
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	b29c      	uxth	r4, r3
 8003ca8:	4623      	mov	r3, r4
 8003caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d014      	beq.n	8003cdc <USB_EPClearStall+0x5c>
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4413      	add	r3, r2
 8003cbc:	881b      	ldrh	r3, [r3, #0]
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc8:	b29c      	uxth	r4, r3
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	441a      	add	r2, r3
 8003cd4:	4b31      	ldr	r3, [pc, #196]	; (8003d9c <USB_EPClearStall+0x11c>)
 8003cd6:	4323      	orrs	r3, r4
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	78db      	ldrb	r3, [r3, #3]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d054      	beq.n	8003d8e <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4413      	add	r3, r2
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cfa:	b29c      	uxth	r4, r3
 8003cfc:	f084 0320 	eor.w	r3, r4, #32
 8003d00:	b29c      	uxth	r4, r3
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	441a      	add	r2, r3
 8003d0c:	4b24      	ldr	r3, [pc, #144]	; (8003da0 <USB_EPClearStall+0x120>)
 8003d0e:	4323      	orrs	r3, r4
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	8013      	strh	r3, [r2, #0]
 8003d14:	e03b      	b.n	8003d8e <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	b29c      	uxth	r4, r3
 8003d24:	4623      	mov	r3, r4
 8003d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d014      	beq.n	8003d58 <USB_EPClearStall+0xd8>
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4413      	add	r3, r2
 8003d38:	881b      	ldrh	r3, [r3, #0]
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d44:	b29c      	uxth	r4, r3
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	441a      	add	r2, r3
 8003d50:	4b14      	ldr	r3, [pc, #80]	; (8003da4 <USB_EPClearStall+0x124>)
 8003d52:	4323      	orrs	r3, r4
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4413      	add	r3, r2
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d6e:	b29c      	uxth	r4, r3
 8003d70:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003d74:	b29c      	uxth	r4, r3
 8003d76:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003d7a:	b29c      	uxth	r4, r3
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	441a      	add	r2, r3
 8003d86:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <USB_EPClearStall+0x120>)
 8003d88:	4323      	orrs	r3, r4
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bc90      	pop	{r4, r7}
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	ffff80c0 	.word	0xffff80c0
 8003da0:	ffff8080 	.word	0xffff8080
 8003da4:	ffffc080 	.word	0xffffc080

08003da8 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	460b      	mov	r3, r1
 8003db2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8003db4:	78fb      	ldrb	r3, [r7, #3]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d103      	bne.n	8003dc2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2280      	movs	r2, #128	; 0x80
 8003dbe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bc80      	pop	{r7}
 8003dcc:	4770      	bx	lr

08003dce <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bc80      	pop	{r7}
 8003de0:	4770      	bx	lr

08003de2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bc80      	pop	{r7}
 8003df4:	4770      	bx	lr

08003df6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b085      	sub	sp, #20
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8003e08:	68fb      	ldr	r3, [r7, #12]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bc80      	pop	{r7}
 8003e12:	4770      	bx	lr

08003e14 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bc80      	pop	{r7}
 8003e28:	4770      	bx	lr

08003e2a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b08d      	sub	sp, #52	; 0x34
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	60f8      	str	r0, [r7, #12]
 8003e32:	60b9      	str	r1, [r7, #8]
 8003e34:	4611      	mov	r1, r2
 8003e36:	461a      	mov	r2, r3
 8003e38:	460b      	mov	r3, r1
 8003e3a:	80fb      	strh	r3, [r7, #6]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003e40:	88bb      	ldrh	r3, [r7, #4]
 8003e42:	3301      	adds	r3, #1
 8003e44:	085b      	lsrs	r3, r3, #1
 8003e46:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003e50:	88fb      	ldrh	r3, [r7, #6]
 8003e52:	005a      	lsls	r2, r3, #1
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e5c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e62:	e01e      	b.n	8003ea2 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	021b      	lsls	r3, r3, #8
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e88:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8003e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8c:	3302      	adds	r3, #2
 8003e8e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8003e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e92:	3302      	adds	r3, #2
 8003e94:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	3301      	adds	r3, #1
 8003e9a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8003e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1dd      	bne.n	8003e64 <USB_WritePMA+0x3a>
  }
}
 8003ea8:	bf00      	nop
 8003eaa:	3734      	adds	r7, #52	; 0x34
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bc80      	pop	{r7}
 8003eb0:	4770      	bx	lr

08003eb2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b08b      	sub	sp, #44	; 0x2c
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	60f8      	str	r0, [r7, #12]
 8003eba:	60b9      	str	r1, [r7, #8]
 8003ebc:	4611      	mov	r1, r2
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	80fb      	strh	r3, [r7, #6]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003ec8:	88bb      	ldrh	r3, [r7, #4]
 8003eca:	085b      	lsrs	r3, r3, #1
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003ed8:	88fb      	ldrh	r3, [r7, #6]
 8003eda:	005a      	lsls	r2, r3, #1
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ee4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eea:	e01b      	b.n	8003f24 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	881b      	ldrh	r3, [r3, #0]
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	3302      	adds	r3, #2
 8003ef8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	b2da      	uxtb	r2, r3
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	3301      	adds	r3, #1
 8003f06:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	0a1b      	lsrs	r3, r3, #8
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	3301      	adds	r3, #1
 8003f16:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8003f18:	6a3b      	ldr	r3, [r7, #32]
 8003f1a:	3302      	adds	r3, #2
 8003f1c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	3b01      	subs	r3, #1
 8003f22:	627b      	str	r3, [r7, #36]	; 0x24
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1e0      	bne.n	8003eec <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003f2a:	88bb      	ldrh	r3, [r7, #4]
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d007      	beq.n	8003f46 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	881b      	ldrh	r3, [r3, #0]
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	701a      	strb	r2, [r3, #0]
  }
}
 8003f46:	bf00      	nop
 8003f48:	372c      	adds	r7, #44	; 0x2c
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bc80      	pop	{r7}
 8003f4e:	4770      	bx	lr

08003f50 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	460b      	mov	r3, r1
 8003f5a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	7c1b      	ldrb	r3, [r3, #16]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d115      	bne.n	8003f94 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003f68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	2181      	movs	r1, #129	; 0x81
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f001 fe32 	bl	8005bda <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003f7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f80:	2202      	movs	r2, #2
 8003f82:	2101      	movs	r1, #1
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f001 fe28 	bl	8005bda <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8003f92:	e012      	b.n	8003fba <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003f94:	2340      	movs	r3, #64	; 0x40
 8003f96:	2202      	movs	r2, #2
 8003f98:	2181      	movs	r1, #129	; 0x81
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f001 fe1d 	bl	8005bda <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003fa6:	2340      	movs	r3, #64	; 0x40
 8003fa8:	2202      	movs	r2, #2
 8003faa:	2101      	movs	r1, #1
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f001 fe14 	bl	8005bda <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003fba:	2308      	movs	r3, #8
 8003fbc:	2203      	movs	r2, #3
 8003fbe:	2182      	movs	r1, #130	; 0x82
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f001 fe0a 	bl	8005bda <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003fcc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003fd0:	f001 ff24 	bl	8005e1c <USBD_static_malloc>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d102      	bne.n	8003fec <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	73fb      	strb	r3, [r7, #15]
 8003fea:	e026      	b.n	800403a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003ff2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	2200      	movs	r2, #0
 8004002:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2200      	movs	r2, #0
 800400a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	7c1b      	ldrb	r3, [r3, #16]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d109      	bne.n	800402a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800401c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004020:	2101      	movs	r1, #1
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f001 fec3 	bl	8005dae <USBD_LL_PrepareReceive>
 8004028:	e007      	b.n	800403a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004030:	2340      	movs	r3, #64	; 0x40
 8004032:	2101      	movs	r1, #1
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f001 feba 	bl	8005dae <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800403a:	7bfb      	ldrb	r3, [r7, #15]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	460b      	mov	r3, r1
 800404e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004050:	2300      	movs	r3, #0
 8004052:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004054:	2181      	movs	r1, #129	; 0x81
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f001 fde5 	bl	8005c26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004062:	2101      	movs	r1, #1
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f001 fdde 	bl	8005c26 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004072:	2182      	movs	r1, #130	; 0x82
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f001 fdd6 	bl	8005c26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00e      	beq.n	80040a8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800409a:	4618      	mov	r0, r3
 800409c:	f001 feca 	bl	8005e34 <USBD_static_free>
    pdev->pClassData = NULL;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b086      	sub	sp, #24
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80040c2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80040c4:	2300      	movs	r3, #0
 80040c6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80040c8:	2300      	movs	r3, #0
 80040ca:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80040cc:	2300      	movs	r3, #0
 80040ce:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d039      	beq.n	8004150 <USBD_CDC_Setup+0x9e>
 80040dc:	2b20      	cmp	r3, #32
 80040de:	d17c      	bne.n	80041da <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	88db      	ldrh	r3, [r3, #6]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d029      	beq.n	800413c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	b25b      	sxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	da11      	bge.n	8004116 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80040fe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	88d2      	ldrh	r2, [r2, #6]
 8004104:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004106:	6939      	ldr	r1, [r7, #16]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	88db      	ldrh	r3, [r3, #6]
 800410c:	461a      	mov	r2, r3
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f001 f9c6 	bl	80054a0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004114:	e068      	b.n	80041e8 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	785a      	ldrb	r2, [r3, #1]
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	88db      	ldrh	r3, [r3, #6]
 8004124:	b2da      	uxtb	r2, r3
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800412c:	6939      	ldr	r1, [r7, #16]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	88db      	ldrh	r3, [r3, #6]
 8004132:	461a      	mov	r2, r3
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f001 f9e1 	bl	80054fc <USBD_CtlPrepareRx>
      break;
 800413a:	e055      	b.n	80041e8 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	7850      	ldrb	r0, [r2, #1]
 8004148:	2200      	movs	r2, #0
 800414a:	6839      	ldr	r1, [r7, #0]
 800414c:	4798      	blx	r3
      break;
 800414e:	e04b      	b.n	80041e8 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	785b      	ldrb	r3, [r3, #1]
 8004154:	2b0a      	cmp	r3, #10
 8004156:	d017      	beq.n	8004188 <USBD_CDC_Setup+0xd6>
 8004158:	2b0b      	cmp	r3, #11
 800415a:	d029      	beq.n	80041b0 <USBD_CDC_Setup+0xfe>
 800415c:	2b00      	cmp	r3, #0
 800415e:	d133      	bne.n	80041c8 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004166:	2b03      	cmp	r3, #3
 8004168:	d107      	bne.n	800417a <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800416a:	f107 030c 	add.w	r3, r7, #12
 800416e:	2202      	movs	r2, #2
 8004170:	4619      	mov	r1, r3
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f001 f994 	bl	80054a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004178:	e02e      	b.n	80041d8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800417a:	6839      	ldr	r1, [r7, #0]
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f001 f925 	bl	80053cc <USBD_CtlError>
            ret = USBD_FAIL;
 8004182:	2302      	movs	r3, #2
 8004184:	75fb      	strb	r3, [r7, #23]
          break;
 8004186:	e027      	b.n	80041d8 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800418e:	2b03      	cmp	r3, #3
 8004190:	d107      	bne.n	80041a2 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004192:	f107 030f 	add.w	r3, r7, #15
 8004196:	2201      	movs	r2, #1
 8004198:	4619      	mov	r1, r3
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f001 f980 	bl	80054a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80041a0:	e01a      	b.n	80041d8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80041a2:	6839      	ldr	r1, [r7, #0]
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f001 f911 	bl	80053cc <USBD_CtlError>
            ret = USBD_FAIL;
 80041aa:	2302      	movs	r3, #2
 80041ac:	75fb      	strb	r3, [r7, #23]
          break;
 80041ae:	e013      	b.n	80041d8 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80041b6:	2b03      	cmp	r3, #3
 80041b8:	d00d      	beq.n	80041d6 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80041ba:	6839      	ldr	r1, [r7, #0]
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f001 f905 	bl	80053cc <USBD_CtlError>
            ret = USBD_FAIL;
 80041c2:	2302      	movs	r3, #2
 80041c4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80041c6:	e006      	b.n	80041d6 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80041c8:	6839      	ldr	r1, [r7, #0]
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f001 f8fe 	bl	80053cc <USBD_CtlError>
          ret = USBD_FAIL;
 80041d0:	2302      	movs	r3, #2
 80041d2:	75fb      	strb	r3, [r7, #23]
          break;
 80041d4:	e000      	b.n	80041d8 <USBD_CDC_Setup+0x126>
          break;
 80041d6:	bf00      	nop
      }
      break;
 80041d8:	e006      	b.n	80041e8 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80041da:	6839      	ldr	r1, [r7, #0]
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f001 f8f5 	bl	80053cc <USBD_CtlError>
      ret = USBD_FAIL;
 80041e2:	2302      	movs	r3, #2
 80041e4:	75fb      	strb	r3, [r7, #23]
      break;
 80041e6:	bf00      	nop
  }

  return ret;
 80041e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b084      	sub	sp, #16
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
 80041fa:	460b      	mov	r3, r1
 80041fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004204:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800420c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004214:	2b00      	cmp	r3, #0
 8004216:	d037      	beq.n	8004288 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004218:	78fa      	ldrb	r2, [r7, #3]
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	4613      	mov	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	331c      	adds	r3, #28
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d026      	beq.n	800427c <USBD_CDC_DataIn+0x8a>
 800422e:	78fa      	ldrb	r2, [r7, #3]
 8004230:	6879      	ldr	r1, [r7, #4]
 8004232:	4613      	mov	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4413      	add	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	440b      	add	r3, r1
 800423c:	331c      	adds	r3, #28
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	78fa      	ldrb	r2, [r7, #3]
 8004242:	68b9      	ldr	r1, [r7, #8]
 8004244:	0152      	lsls	r2, r2, #5
 8004246:	440a      	add	r2, r1
 8004248:	3238      	adds	r2, #56	; 0x38
 800424a:	6812      	ldr	r2, [r2, #0]
 800424c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004250:	fb02 f201 	mul.w	r2, r2, r1
 8004254:	1a9b      	subs	r3, r3, r2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d110      	bne.n	800427c <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800425a:	78fa      	ldrb	r2, [r7, #3]
 800425c:	6879      	ldr	r1, [r7, #4]
 800425e:	4613      	mov	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	440b      	add	r3, r1
 8004268:	331c      	adds	r3, #28
 800426a:	2200      	movs	r2, #0
 800426c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800426e:	78f9      	ldrb	r1, [r7, #3]
 8004270:	2300      	movs	r3, #0
 8004272:	2200      	movs	r2, #0
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f001 fd77 	bl	8005d68 <USBD_LL_Transmit>
 800427a:	e003      	b.n	8004284 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8004284:	2300      	movs	r3, #0
 8004286:	e000      	b.n	800428a <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8004288:	2302      	movs	r3, #2
  }
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b084      	sub	sp, #16
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
 800429a:	460b      	mov	r3, r1
 800429c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80042a4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80042a6:	78fb      	ldrb	r3, [r7, #3]
 80042a8:	4619      	mov	r1, r3
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f001 fda2 	bl	8005df4 <USBD_LL_GetRxDataSize>
 80042b0:	4602      	mov	r2, r0
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00d      	beq.n	80042de <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80042d6:	4611      	mov	r1, r2
 80042d8:	4798      	blx	r3

    return USBD_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	e000      	b.n	80042e0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80042de:	2302      	movs	r3, #2
  }
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80042f6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d015      	beq.n	800432e <USBD_CDC_EP0_RxReady+0x46>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004308:	2bff      	cmp	r3, #255	; 0xff
 800430a:	d010      	beq.n	800432e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800431a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004322:	b292      	uxth	r2, r2
 8004324:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	22ff      	movs	r2, #255	; 0xff
 800432a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2243      	movs	r2, #67	; 0x43
 8004344:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004346:	4b03      	ldr	r3, [pc, #12]	; (8004354 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004348:	4618      	mov	r0, r3
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	bc80      	pop	{r7}
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	200000a0 	.word	0x200000a0

08004358 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2243      	movs	r2, #67	; 0x43
 8004364:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8004366:	4b03      	ldr	r3, [pc, #12]	; (8004374 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004368:	4618      	mov	r0, r3
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	bc80      	pop	{r7}
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	2000005c 	.word	0x2000005c

08004378 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2243      	movs	r2, #67	; 0x43
 8004384:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8004386:	4b03      	ldr	r3, [pc, #12]	; (8004394 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004388:	4618      	mov	r0, r3
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	bc80      	pop	{r7}
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	200000e4 	.word	0x200000e4

08004398 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	220a      	movs	r2, #10
 80043a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80043a6:	4b03      	ldr	r3, [pc, #12]	; (80043b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bc80      	pop	{r7}
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	20000018 	.word	0x20000018

080043b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80043c2:	2302      	movs	r3, #2
 80043c4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d005      	beq.n	80043d8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80043d4:	2300      	movs	r3, #0
 80043d6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	bc80      	pop	{r7}
 80043e2:	4770      	bx	lr

080043e4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b087      	sub	sp, #28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	4613      	mov	r3, r2
 80043f0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80043f8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004402:	88fa      	ldrh	r2, [r7, #6]
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	371c      	adds	r7, #28
 8004410:	46bd      	mov	sp, r7
 8004412:	bc80      	pop	{r7}
 8004414:	4770      	bx	lr

08004416 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8004416:	b480      	push	{r7}
 8004418:	b085      	sub	sp, #20
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
 800441e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004426:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	bc80      	pop	{r7}
 800443a:	4770      	bx	lr

0800443c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800444a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004452:	2b00      	cmp	r3, #0
 8004454:	d017      	beq.n	8004486 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	7c1b      	ldrb	r3, [r3, #16]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d109      	bne.n	8004472 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004464:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004468:	2101      	movs	r1, #1
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f001 fc9f 	bl	8005dae <USBD_LL_PrepareReceive>
 8004470:	e007      	b.n	8004482 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004478:	2340      	movs	r3, #64	; 0x40
 800447a:	2101      	movs	r1, #1
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f001 fc96 	bl	8005dae <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004482:	2300      	movs	r3, #0
 8004484:	e000      	b.n	8004488 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8004486:	2302      	movs	r3, #2
  }
}
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	4613      	mov	r3, r2
 800449c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80044a4:	2302      	movs	r3, #2
 80044a6:	e01a      	b.n	80044de <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d003      	beq.n	80044c8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	79fa      	ldrb	r2, [r7, #7]
 80044d4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f001 fb0a 	bl	8005af0 <USBD_LL_Init>

  return USBD_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b085      	sub	sp, #20
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
 80044ee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80044f0:	2300      	movs	r3, #0
 80044f2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d006      	beq.n	8004508 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8004502:	2300      	movs	r3, #0
 8004504:	73fb      	strb	r3, [r7, #15]
 8004506:	e001      	b.n	800450c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004508:	2302      	movs	r3, #2
 800450a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800450c:	7bfb      	ldrb	r3, [r7, #15]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	bc80      	pop	{r7}
 8004516:	4770      	bx	lr

08004518 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f001 fb3f 	bl	8005ba4 <USBD_LL_Start>

  return USBD_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	bc80      	pop	{r7}
 8004542:	4770      	bx	lr

08004544 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	460b      	mov	r3, r1
 800454e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004550:	2302      	movs	r3, #2
 8004552:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00c      	beq.n	8004578 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	78fa      	ldrb	r2, [r7, #3]
 8004568:	4611      	mov	r1, r2
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	4798      	blx	r3
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004574:	2300      	movs	r3, #0
 8004576:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8004578:	7bfb      	ldrb	r3, [r7, #15]
}
 800457a:	4618      	mov	r0, r3
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b082      	sub	sp, #8
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
 800458a:	460b      	mov	r3, r1
 800458c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	78fa      	ldrb	r2, [r7, #3]
 8004598:	4611      	mov	r1, r2
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	4798      	blx	r3

  return USBD_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80045b8:	6839      	ldr	r1, [r7, #0]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 feca 	bl	8005354 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80045ce:	461a      	mov	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80045dc:	f003 031f 	and.w	r3, r3, #31
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d00c      	beq.n	80045fe <USBD_LL_SetupStage+0x56>
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d302      	bcc.n	80045ee <USBD_LL_SetupStage+0x46>
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d010      	beq.n	800460e <USBD_LL_SetupStage+0x66>
 80045ec:	e017      	b.n	800461e <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80045f4:	4619      	mov	r1, r3
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f9ca 	bl	8004990 <USBD_StdDevReq>
      break;
 80045fc:	e01a      	b.n	8004634 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004604:	4619      	mov	r1, r3
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 fa2c 	bl	8004a64 <USBD_StdItfReq>
      break;
 800460c:	e012      	b.n	8004634 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004614:	4619      	mov	r1, r3
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fa6a 	bl	8004af0 <USBD_StdEPReq>
      break;
 800461c:	e00a      	b.n	8004634 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004624:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004628:	b2db      	uxtb	r3, r3
 800462a:	4619      	mov	r1, r3
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f001 fb19 	bl	8005c64 <USBD_LL_StallEP>
      break;
 8004632:	bf00      	nop
  }

  return USBD_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b086      	sub	sp, #24
 8004642:	af00      	add	r7, sp, #0
 8004644:	60f8      	str	r0, [r7, #12]
 8004646:	460b      	mov	r3, r1
 8004648:	607a      	str	r2, [r7, #4]
 800464a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800464c:	7afb      	ldrb	r3, [r7, #11]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d14b      	bne.n	80046ea <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004658:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004660:	2b03      	cmp	r3, #3
 8004662:	d134      	bne.n	80046ce <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	68da      	ldr	r2, [r3, #12]
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	429a      	cmp	r2, r3
 800466e:	d919      	bls.n	80046a4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	68da      	ldr	r2, [r3, #12]
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	1ad2      	subs	r2, r2, r3
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	68da      	ldr	r2, [r3, #12]
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004686:	429a      	cmp	r2, r3
 8004688:	d203      	bcs.n	8004692 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800468e:	b29b      	uxth	r3, r3
 8004690:	e002      	b.n	8004698 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004696:	b29b      	uxth	r3, r3
 8004698:	461a      	mov	r2, r3
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 ff4b 	bl	8005538 <USBD_CtlContinueRx>
 80046a2:	e038      	b.n	8004716 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00a      	beq.n	80046c6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	d105      	bne.n	80046c6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 ff48 	bl	800555c <USBD_CtlSendStatus>
 80046cc:	e023      	b.n	8004716 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80046d4:	2b05      	cmp	r3, #5
 80046d6:	d11e      	bne.n	8004716 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80046e0:	2100      	movs	r1, #0
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f001 fabe 	bl	8005c64 <USBD_LL_StallEP>
 80046e8:	e015      	b.n	8004716 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00d      	beq.n	8004712 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d108      	bne.n	8004712 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	7afa      	ldrb	r2, [r7, #11]
 800470a:	4611      	mov	r1, r2
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	4798      	blx	r3
 8004710:	e001      	b.n	8004716 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004712:	2302      	movs	r3, #2
 8004714:	e000      	b.n	8004718 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3718      	adds	r7, #24
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	460b      	mov	r3, r1
 800472a:	607a      	str	r2, [r7, #4]
 800472c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800472e:	7afb      	ldrb	r3, [r7, #11]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d17f      	bne.n	8004834 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	3314      	adds	r3, #20
 8004738:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004740:	2b02      	cmp	r3, #2
 8004742:	d15c      	bne.n	80047fe <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	68da      	ldr	r2, [r3, #12]
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	429a      	cmp	r2, r3
 800474e:	d915      	bls.n	800477c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	68da      	ldr	r2, [r3, #12]
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	1ad2      	subs	r2, r2, r3
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	b29b      	uxth	r3, r3
 8004764:	461a      	mov	r2, r3
 8004766:	6879      	ldr	r1, [r7, #4]
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f000 feb5 	bl	80054d8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800476e:	2300      	movs	r3, #0
 8004770:	2200      	movs	r2, #0
 8004772:	2100      	movs	r1, #0
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f001 fb1a 	bl	8005dae <USBD_LL_PrepareReceive>
 800477a:	e04e      	b.n	800481a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	6912      	ldr	r2, [r2, #16]
 8004784:	fbb3 f1f2 	udiv	r1, r3, r2
 8004788:	fb02 f201 	mul.w	r2, r2, r1
 800478c:	1a9b      	subs	r3, r3, r2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d11c      	bne.n	80047cc <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	689a      	ldr	r2, [r3, #8]
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800479a:	429a      	cmp	r2, r3
 800479c:	d316      	bcc.n	80047cc <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	689a      	ldr	r2, [r3, #8]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d20f      	bcs.n	80047cc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80047ac:	2200      	movs	r2, #0
 80047ae:	2100      	movs	r1, #0
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 fe91 	bl	80054d8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80047be:	2300      	movs	r3, #0
 80047c0:	2200      	movs	r2, #0
 80047c2:	2100      	movs	r1, #0
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f001 faf2 	bl	8005dae <USBD_LL_PrepareReceive>
 80047ca:	e026      	b.n	800481a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00a      	beq.n	80047ee <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80047de:	2b03      	cmp	r3, #3
 80047e0:	d105      	bne.n	80047ee <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80047ee:	2180      	movs	r1, #128	; 0x80
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f001 fa37 	bl	8005c64 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 fec3 	bl	8005582 <USBD_CtlReceiveStatus>
 80047fc:	e00d      	b.n	800481a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004804:	2b04      	cmp	r3, #4
 8004806:	d004      	beq.n	8004812 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800480e:	2b00      	cmp	r3, #0
 8004810:	d103      	bne.n	800481a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004812:	2180      	movs	r1, #128	; 0x80
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f001 fa25 	bl	8005c64 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004820:	2b01      	cmp	r3, #1
 8004822:	d11d      	bne.n	8004860 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f7ff fe83 	bl	8004530 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004832:	e015      	b.n	8004860 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00d      	beq.n	800485c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004846:	2b03      	cmp	r3, #3
 8004848:	d108      	bne.n	800485c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	7afa      	ldrb	r2, [r7, #11]
 8004854:	4611      	mov	r1, r2
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	4798      	blx	r3
 800485a:	e001      	b.n	8004860 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800485c:	2302      	movs	r3, #2
 800485e:	e000      	b.n	8004862 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3718      	adds	r7, #24
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b082      	sub	sp, #8
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004872:	2340      	movs	r3, #64	; 0x40
 8004874:	2200      	movs	r2, #0
 8004876:	2100      	movs	r1, #0
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f001 f9ae 	bl	8005bda <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2240      	movs	r2, #64	; 0x40
 800488a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800488e:	2340      	movs	r3, #64	; 0x40
 8004890:	2200      	movs	r2, #0
 8004892:	2180      	movs	r1, #128	; 0x80
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f001 f9a0 	bl	8005bda <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2240      	movs	r2, #64	; 0x40
 80048a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d009      	beq.n	80048e2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6852      	ldr	r2, [r2, #4]
 80048da:	b2d2      	uxtb	r2, r2
 80048dc:	4611      	mov	r1, r2
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	4798      	blx	r3
  }

  return USBD_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	460b      	mov	r3, r1
 80048f6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	78fa      	ldrb	r2, [r7, #3]
 80048fc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	bc80      	pop	{r7}
 8004908:	4770      	bx	lr

0800490a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2204      	movs	r2, #4
 8004922:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	bc80      	pop	{r7}
 8004930:	4770      	bx	lr

08004932 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004940:	2b04      	cmp	r3, #4
 8004942:	d105      	bne.n	8004950 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	bc80      	pop	{r7}
 800495a:	4770      	bx	lr

0800495c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800496a:	2b03      	cmp	r3, #3
 800496c:	d10b      	bne.n	8004986 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d005      	beq.n	8004986 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800499a:	2300      	movs	r3, #0
 800499c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80049a6:	2b20      	cmp	r3, #32
 80049a8:	d004      	beq.n	80049b4 <USBD_StdDevReq+0x24>
 80049aa:	2b40      	cmp	r3, #64	; 0x40
 80049ac:	d002      	beq.n	80049b4 <USBD_StdDevReq+0x24>
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d008      	beq.n	80049c4 <USBD_StdDevReq+0x34>
 80049b2:	e04c      	b.n	8004a4e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	6839      	ldr	r1, [r7, #0]
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	4798      	blx	r3
      break;
 80049c2:	e049      	b.n	8004a58 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	785b      	ldrb	r3, [r3, #1]
 80049c8:	2b09      	cmp	r3, #9
 80049ca:	d83a      	bhi.n	8004a42 <USBD_StdDevReq+0xb2>
 80049cc:	a201      	add	r2, pc, #4	; (adr r2, 80049d4 <USBD_StdDevReq+0x44>)
 80049ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d2:	bf00      	nop
 80049d4:	08004a25 	.word	0x08004a25
 80049d8:	08004a39 	.word	0x08004a39
 80049dc:	08004a43 	.word	0x08004a43
 80049e0:	08004a2f 	.word	0x08004a2f
 80049e4:	08004a43 	.word	0x08004a43
 80049e8:	08004a07 	.word	0x08004a07
 80049ec:	080049fd 	.word	0x080049fd
 80049f0:	08004a43 	.word	0x08004a43
 80049f4:	08004a1b 	.word	0x08004a1b
 80049f8:	08004a11 	.word	0x08004a11
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80049fc:	6839      	ldr	r1, [r7, #0]
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f9d4 	bl	8004dac <USBD_GetDescriptor>
          break;
 8004a04:	e022      	b.n	8004a4c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004a06:	6839      	ldr	r1, [r7, #0]
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 fb37 	bl	800507c <USBD_SetAddress>
          break;
 8004a0e:	e01d      	b.n	8004a4c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8004a10:	6839      	ldr	r1, [r7, #0]
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 fb74 	bl	8005100 <USBD_SetConfig>
          break;
 8004a18:	e018      	b.n	8004a4c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004a1a:	6839      	ldr	r1, [r7, #0]
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 fbfd 	bl	800521c <USBD_GetConfig>
          break;
 8004a22:	e013      	b.n	8004a4c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004a24:	6839      	ldr	r1, [r7, #0]
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 fc2c 	bl	8005284 <USBD_GetStatus>
          break;
 8004a2c:	e00e      	b.n	8004a4c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004a2e:	6839      	ldr	r1, [r7, #0]
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 fc5a 	bl	80052ea <USBD_SetFeature>
          break;
 8004a36:	e009      	b.n	8004a4c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004a38:	6839      	ldr	r1, [r7, #0]
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 fc69 	bl	8005312 <USBD_ClrFeature>
          break;
 8004a40:	e004      	b.n	8004a4c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8004a42:	6839      	ldr	r1, [r7, #0]
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 fcc1 	bl	80053cc <USBD_CtlError>
          break;
 8004a4a:	bf00      	nop
      }
      break;
 8004a4c:	e004      	b.n	8004a58 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8004a4e:	6839      	ldr	r1, [r7, #0]
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 fcbb 	bl	80053cc <USBD_CtlError>
      break;
 8004a56:	bf00      	nop
  }

  return ret;
 8004a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop

08004a64 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004a7a:	2b20      	cmp	r3, #32
 8004a7c:	d003      	beq.n	8004a86 <USBD_StdItfReq+0x22>
 8004a7e:	2b40      	cmp	r3, #64	; 0x40
 8004a80:	d001      	beq.n	8004a86 <USBD_StdItfReq+0x22>
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d12a      	bne.n	8004adc <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d81d      	bhi.n	8004ace <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	889b      	ldrh	r3, [r3, #4]
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d813      	bhi.n	8004ac4 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	6839      	ldr	r1, [r7, #0]
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	4798      	blx	r3
 8004aaa:	4603      	mov	r3, r0
 8004aac:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	88db      	ldrh	r3, [r3, #6]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d110      	bne.n	8004ad8 <USBD_StdItfReq+0x74>
 8004ab6:	7bfb      	ldrb	r3, [r7, #15]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10d      	bne.n	8004ad8 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 fd4d 	bl	800555c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004ac2:	e009      	b.n	8004ad8 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8004ac4:	6839      	ldr	r1, [r7, #0]
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 fc80 	bl	80053cc <USBD_CtlError>
          break;
 8004acc:	e004      	b.n	8004ad8 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8004ace:	6839      	ldr	r1, [r7, #0]
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 fc7b 	bl	80053cc <USBD_CtlError>
          break;
 8004ad6:	e000      	b.n	8004ada <USBD_StdItfReq+0x76>
          break;
 8004ad8:	bf00      	nop
      }
      break;
 8004ada:	e004      	b.n	8004ae6 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8004adc:	6839      	ldr	r1, [r7, #0]
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 fc74 	bl	80053cc <USBD_CtlError>
      break;
 8004ae4:	bf00      	nop
  }

  return USBD_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004afa:	2300      	movs	r3, #0
 8004afc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	889b      	ldrh	r3, [r3, #4]
 8004b02:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004b0c:	2b20      	cmp	r3, #32
 8004b0e:	d004      	beq.n	8004b1a <USBD_StdEPReq+0x2a>
 8004b10:	2b40      	cmp	r3, #64	; 0x40
 8004b12:	d002      	beq.n	8004b1a <USBD_StdEPReq+0x2a>
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d008      	beq.n	8004b2a <USBD_StdEPReq+0x3a>
 8004b18:	e13d      	b.n	8004d96 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	6839      	ldr	r1, [r7, #0]
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	4798      	blx	r3
      break;
 8004b28:	e13a      	b.n	8004da0 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004b32:	2b20      	cmp	r3, #32
 8004b34:	d10a      	bne.n	8004b4c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	6839      	ldr	r1, [r7, #0]
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	4798      	blx	r3
 8004b44:	4603      	mov	r3, r0
 8004b46:	73fb      	strb	r3, [r7, #15]

        return ret;
 8004b48:	7bfb      	ldrb	r3, [r7, #15]
 8004b4a:	e12a      	b.n	8004da2 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	785b      	ldrb	r3, [r3, #1]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d03e      	beq.n	8004bd2 <USBD_StdEPReq+0xe2>
 8004b54:	2b03      	cmp	r3, #3
 8004b56:	d002      	beq.n	8004b5e <USBD_StdEPReq+0x6e>
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d070      	beq.n	8004c3e <USBD_StdEPReq+0x14e>
 8004b5c:	e115      	b.n	8004d8a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d002      	beq.n	8004b6e <USBD_StdEPReq+0x7e>
 8004b68:	2b03      	cmp	r3, #3
 8004b6a:	d015      	beq.n	8004b98 <USBD_StdEPReq+0xa8>
 8004b6c:	e02b      	b.n	8004bc6 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004b6e:	7bbb      	ldrb	r3, [r7, #14]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00c      	beq.n	8004b8e <USBD_StdEPReq+0x9e>
 8004b74:	7bbb      	ldrb	r3, [r7, #14]
 8004b76:	2b80      	cmp	r3, #128	; 0x80
 8004b78:	d009      	beq.n	8004b8e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004b7a:	7bbb      	ldrb	r3, [r7, #14]
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f001 f870 	bl	8005c64 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004b84:	2180      	movs	r1, #128	; 0x80
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f001 f86c 	bl	8005c64 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004b8c:	e020      	b.n	8004bd0 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8004b8e:	6839      	ldr	r1, [r7, #0]
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 fc1b 	bl	80053cc <USBD_CtlError>
              break;
 8004b96:	e01b      	b.n	8004bd0 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	885b      	ldrh	r3, [r3, #2]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10e      	bne.n	8004bbe <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8004ba0:	7bbb      	ldrb	r3, [r7, #14]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00b      	beq.n	8004bbe <USBD_StdEPReq+0xce>
 8004ba6:	7bbb      	ldrb	r3, [r7, #14]
 8004ba8:	2b80      	cmp	r3, #128	; 0x80
 8004baa:	d008      	beq.n	8004bbe <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	88db      	ldrh	r3, [r3, #6]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d104      	bne.n	8004bbe <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8004bb4:	7bbb      	ldrb	r3, [r7, #14]
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f001 f853 	bl	8005c64 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 fccc 	bl	800555c <USBD_CtlSendStatus>

              break;
 8004bc4:	e004      	b.n	8004bd0 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8004bc6:	6839      	ldr	r1, [r7, #0]
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 fbff 	bl	80053cc <USBD_CtlError>
              break;
 8004bce:	bf00      	nop
          }
          break;
 8004bd0:	e0e0      	b.n	8004d94 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d002      	beq.n	8004be2 <USBD_StdEPReq+0xf2>
 8004bdc:	2b03      	cmp	r3, #3
 8004bde:	d015      	beq.n	8004c0c <USBD_StdEPReq+0x11c>
 8004be0:	e026      	b.n	8004c30 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004be2:	7bbb      	ldrb	r3, [r7, #14]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00c      	beq.n	8004c02 <USBD_StdEPReq+0x112>
 8004be8:	7bbb      	ldrb	r3, [r7, #14]
 8004bea:	2b80      	cmp	r3, #128	; 0x80
 8004bec:	d009      	beq.n	8004c02 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004bee:	7bbb      	ldrb	r3, [r7, #14]
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f001 f836 	bl	8005c64 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004bf8:	2180      	movs	r1, #128	; 0x80
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f001 f832 	bl	8005c64 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004c00:	e01c      	b.n	8004c3c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8004c02:	6839      	ldr	r1, [r7, #0]
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 fbe1 	bl	80053cc <USBD_CtlError>
              break;
 8004c0a:	e017      	b.n	8004c3c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	885b      	ldrh	r3, [r3, #2]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d112      	bne.n	8004c3a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8004c14:	7bbb      	ldrb	r3, [r7, #14]
 8004c16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d004      	beq.n	8004c28 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8004c1e:	7bbb      	ldrb	r3, [r7, #14]
 8004c20:	4619      	mov	r1, r3
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f001 f83d 	bl	8005ca2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 fc97 	bl	800555c <USBD_CtlSendStatus>
              }
              break;
 8004c2e:	e004      	b.n	8004c3a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8004c30:	6839      	ldr	r1, [r7, #0]
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 fbca 	bl	80053cc <USBD_CtlError>
              break;
 8004c38:	e000      	b.n	8004c3c <USBD_StdEPReq+0x14c>
              break;
 8004c3a:	bf00      	nop
          }
          break;
 8004c3c:	e0aa      	b.n	8004d94 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d002      	beq.n	8004c4e <USBD_StdEPReq+0x15e>
 8004c48:	2b03      	cmp	r3, #3
 8004c4a:	d032      	beq.n	8004cb2 <USBD_StdEPReq+0x1c2>
 8004c4c:	e097      	b.n	8004d7e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004c4e:	7bbb      	ldrb	r3, [r7, #14]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d007      	beq.n	8004c64 <USBD_StdEPReq+0x174>
 8004c54:	7bbb      	ldrb	r3, [r7, #14]
 8004c56:	2b80      	cmp	r3, #128	; 0x80
 8004c58:	d004      	beq.n	8004c64 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8004c5a:	6839      	ldr	r1, [r7, #0]
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 fbb5 	bl	80053cc <USBD_CtlError>
                break;
 8004c62:	e091      	b.n	8004d88 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004c64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	da0b      	bge.n	8004c84 <USBD_StdEPReq+0x194>
 8004c6c:	7bbb      	ldrb	r3, [r7, #14]
 8004c6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c72:	4613      	mov	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4413      	add	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	3310      	adds	r3, #16
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	4413      	add	r3, r2
 8004c80:	3304      	adds	r3, #4
 8004c82:	e00b      	b.n	8004c9c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004c84:	7bbb      	ldrb	r3, [r7, #14]
 8004c86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	4413      	add	r3, r2
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	4619      	mov	r1, r3
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 fbf8 	bl	80054a0 <USBD_CtlSendData>
              break;
 8004cb0:	e06a      	b.n	8004d88 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8004cb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	da11      	bge.n	8004cde <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004cba:	7bbb      	ldrb	r3, [r7, #14]
 8004cbc:	f003 020f 	and.w	r2, r3, #15
 8004cc0:	6879      	ldr	r1, [r7, #4]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	440b      	add	r3, r1
 8004ccc:	3318      	adds	r3, #24
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d117      	bne.n	8004d04 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8004cd4:	6839      	ldr	r1, [r7, #0]
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 fb78 	bl	80053cc <USBD_CtlError>
                  break;
 8004cdc:	e054      	b.n	8004d88 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004cde:	7bbb      	ldrb	r3, [r7, #14]
 8004ce0:	f003 020f 	and.w	r2, r3, #15
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4413      	add	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	440b      	add	r3, r1
 8004cf0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d104      	bne.n	8004d04 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8004cfa:	6839      	ldr	r1, [r7, #0]
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 fb65 	bl	80053cc <USBD_CtlError>
                  break;
 8004d02:	e041      	b.n	8004d88 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004d04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	da0b      	bge.n	8004d24 <USBD_StdEPReq+0x234>
 8004d0c:	7bbb      	ldrb	r3, [r7, #14]
 8004d0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d12:	4613      	mov	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	3310      	adds	r3, #16
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	4413      	add	r3, r2
 8004d20:	3304      	adds	r3, #4
 8004d22:	e00b      	b.n	8004d3c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004d24:	7bbb      	ldrb	r3, [r7, #14]
 8004d26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	4413      	add	r3, r2
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004d3e:	7bbb      	ldrb	r3, [r7, #14]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d002      	beq.n	8004d4a <USBD_StdEPReq+0x25a>
 8004d44:	7bbb      	ldrb	r3, [r7, #14]
 8004d46:	2b80      	cmp	r3, #128	; 0x80
 8004d48:	d103      	bne.n	8004d52 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	e00e      	b.n	8004d70 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8004d52:	7bbb      	ldrb	r3, [r7, #14]
 8004d54:	4619      	mov	r1, r3
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 ffc2 	bl	8005ce0 <USBD_LL_IsStallEP>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	2201      	movs	r2, #1
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	e002      	b.n	8004d70 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2202      	movs	r2, #2
 8004d74:	4619      	mov	r1, r3
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 fb92 	bl	80054a0 <USBD_CtlSendData>
              break;
 8004d7c:	e004      	b.n	8004d88 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8004d7e:	6839      	ldr	r1, [r7, #0]
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 fb23 	bl	80053cc <USBD_CtlError>
              break;
 8004d86:	bf00      	nop
          }
          break;
 8004d88:	e004      	b.n	8004d94 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8004d8a:	6839      	ldr	r1, [r7, #0]
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 fb1d 	bl	80053cc <USBD_CtlError>
          break;
 8004d92:	bf00      	nop
      }
      break;
 8004d94:	e004      	b.n	8004da0 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8004d96:	6839      	ldr	r1, [r7, #0]
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 fb17 	bl	80053cc <USBD_CtlError>
      break;
 8004d9e:	bf00      	nop
  }

  return ret;
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
	...

08004dac <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	885b      	ldrh	r3, [r3, #2]
 8004dc6:	0a1b      	lsrs	r3, r3, #8
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	2b06      	cmp	r3, #6
 8004dce:	f200 8128 	bhi.w	8005022 <USBD_GetDescriptor+0x276>
 8004dd2:	a201      	add	r2, pc, #4	; (adr r2, 8004dd8 <USBD_GetDescriptor+0x2c>)
 8004dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd8:	08004df5 	.word	0x08004df5
 8004ddc:	08004e0d 	.word	0x08004e0d
 8004de0:	08004e4d 	.word	0x08004e4d
 8004de4:	08005023 	.word	0x08005023
 8004de8:	08005023 	.word	0x08005023
 8004dec:	08004fc3 	.word	0x08004fc3
 8004df0:	08004fef 	.word	0x08004fef
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	7c12      	ldrb	r2, [r2, #16]
 8004e00:	f107 0108 	add.w	r1, r7, #8
 8004e04:	4610      	mov	r0, r2
 8004e06:	4798      	blx	r3
 8004e08:	60f8      	str	r0, [r7, #12]
      break;
 8004e0a:	e112      	b.n	8005032 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	7c1b      	ldrb	r3, [r3, #16]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10d      	bne.n	8004e30 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1c:	f107 0208 	add.w	r2, r7, #8
 8004e20:	4610      	mov	r0, r2
 8004e22:	4798      	blx	r3
 8004e24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8004e2e:	e100      	b.n	8005032 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e38:	f107 0208 	add.w	r2, r7, #8
 8004e3c:	4610      	mov	r0, r2
 8004e3e:	4798      	blx	r3
 8004e40:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	3301      	adds	r3, #1
 8004e46:	2202      	movs	r2, #2
 8004e48:	701a      	strb	r2, [r3, #0]
      break;
 8004e4a:	e0f2      	b.n	8005032 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	885b      	ldrh	r3, [r3, #2]
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b05      	cmp	r3, #5
 8004e54:	f200 80ac 	bhi.w	8004fb0 <USBD_GetDescriptor+0x204>
 8004e58:	a201      	add	r2, pc, #4	; (adr r2, 8004e60 <USBD_GetDescriptor+0xb4>)
 8004e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5e:	bf00      	nop
 8004e60:	08004e79 	.word	0x08004e79
 8004e64:	08004ead 	.word	0x08004ead
 8004e68:	08004ee1 	.word	0x08004ee1
 8004e6c:	08004f15 	.word	0x08004f15
 8004e70:	08004f49 	.word	0x08004f49
 8004e74:	08004f7d 	.word	0x08004f7d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00b      	beq.n	8004e9c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	7c12      	ldrb	r2, [r2, #16]
 8004e90:	f107 0108 	add.w	r1, r7, #8
 8004e94:	4610      	mov	r0, r2
 8004e96:	4798      	blx	r3
 8004e98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004e9a:	e091      	b.n	8004fc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004e9c:	6839      	ldr	r1, [r7, #0]
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 fa94 	bl	80053cc <USBD_CtlError>
            err++;
 8004ea4:	7afb      	ldrb	r3, [r7, #11]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	72fb      	strb	r3, [r7, #11]
          break;
 8004eaa:	e089      	b.n	8004fc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00b      	beq.n	8004ed0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	7c12      	ldrb	r2, [r2, #16]
 8004ec4:	f107 0108 	add.w	r1, r7, #8
 8004ec8:	4610      	mov	r0, r2
 8004eca:	4798      	blx	r3
 8004ecc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004ece:	e077      	b.n	8004fc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004ed0:	6839      	ldr	r1, [r7, #0]
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 fa7a 	bl	80053cc <USBD_CtlError>
            err++;
 8004ed8:	7afb      	ldrb	r3, [r7, #11]
 8004eda:	3301      	adds	r3, #1
 8004edc:	72fb      	strb	r3, [r7, #11]
          break;
 8004ede:	e06f      	b.n	8004fc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00b      	beq.n	8004f04 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	7c12      	ldrb	r2, [r2, #16]
 8004ef8:	f107 0108 	add.w	r1, r7, #8
 8004efc:	4610      	mov	r0, r2
 8004efe:	4798      	blx	r3
 8004f00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004f02:	e05d      	b.n	8004fc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004f04:	6839      	ldr	r1, [r7, #0]
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 fa60 	bl	80053cc <USBD_CtlError>
            err++;
 8004f0c:	7afb      	ldrb	r3, [r7, #11]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	72fb      	strb	r3, [r7, #11]
          break;
 8004f12:	e055      	b.n	8004fc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00b      	beq.n	8004f38 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	7c12      	ldrb	r2, [r2, #16]
 8004f2c:	f107 0108 	add.w	r1, r7, #8
 8004f30:	4610      	mov	r0, r2
 8004f32:	4798      	blx	r3
 8004f34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004f36:	e043      	b.n	8004fc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004f38:	6839      	ldr	r1, [r7, #0]
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 fa46 	bl	80053cc <USBD_CtlError>
            err++;
 8004f40:	7afb      	ldrb	r3, [r7, #11]
 8004f42:	3301      	adds	r3, #1
 8004f44:	72fb      	strb	r3, [r7, #11]
          break;
 8004f46:	e03b      	b.n	8004fc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00b      	beq.n	8004f6c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	7c12      	ldrb	r2, [r2, #16]
 8004f60:	f107 0108 	add.w	r1, r7, #8
 8004f64:	4610      	mov	r0, r2
 8004f66:	4798      	blx	r3
 8004f68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004f6a:	e029      	b.n	8004fc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004f6c:	6839      	ldr	r1, [r7, #0]
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 fa2c 	bl	80053cc <USBD_CtlError>
            err++;
 8004f74:	7afb      	ldrb	r3, [r7, #11]
 8004f76:	3301      	adds	r3, #1
 8004f78:	72fb      	strb	r3, [r7, #11]
          break;
 8004f7a:	e021      	b.n	8004fc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00b      	beq.n	8004fa0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	7c12      	ldrb	r2, [r2, #16]
 8004f94:	f107 0108 	add.w	r1, r7, #8
 8004f98:	4610      	mov	r0, r2
 8004f9a:	4798      	blx	r3
 8004f9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004f9e:	e00f      	b.n	8004fc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004fa0:	6839      	ldr	r1, [r7, #0]
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 fa12 	bl	80053cc <USBD_CtlError>
            err++;
 8004fa8:	7afb      	ldrb	r3, [r7, #11]
 8004faa:	3301      	adds	r3, #1
 8004fac:	72fb      	strb	r3, [r7, #11]
          break;
 8004fae:	e007      	b.n	8004fc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8004fb0:	6839      	ldr	r1, [r7, #0]
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 fa0a 	bl	80053cc <USBD_CtlError>
          err++;
 8004fb8:	7afb      	ldrb	r3, [r7, #11]
 8004fba:	3301      	adds	r3, #1
 8004fbc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8004fbe:	e038      	b.n	8005032 <USBD_GetDescriptor+0x286>
 8004fc0:	e037      	b.n	8005032 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	7c1b      	ldrb	r3, [r3, #16]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d109      	bne.n	8004fde <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd2:	f107 0208 	add.w	r2, r7, #8
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	4798      	blx	r3
 8004fda:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004fdc:	e029      	b.n	8005032 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8004fde:	6839      	ldr	r1, [r7, #0]
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f9f3 	bl	80053cc <USBD_CtlError>
        err++;
 8004fe6:	7afb      	ldrb	r3, [r7, #11]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	72fb      	strb	r3, [r7, #11]
      break;
 8004fec:	e021      	b.n	8005032 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	7c1b      	ldrb	r3, [r3, #16]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10d      	bne.n	8005012 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffe:	f107 0208 	add.w	r2, r7, #8
 8005002:	4610      	mov	r0, r2
 8005004:	4798      	blx	r3
 8005006:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	3301      	adds	r3, #1
 800500c:	2207      	movs	r2, #7
 800500e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005010:	e00f      	b.n	8005032 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005012:	6839      	ldr	r1, [r7, #0]
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f9d9 	bl	80053cc <USBD_CtlError>
        err++;
 800501a:	7afb      	ldrb	r3, [r7, #11]
 800501c:	3301      	adds	r3, #1
 800501e:	72fb      	strb	r3, [r7, #11]
      break;
 8005020:	e007      	b.n	8005032 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005022:	6839      	ldr	r1, [r7, #0]
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f9d1 	bl	80053cc <USBD_CtlError>
      err++;
 800502a:	7afb      	ldrb	r3, [r7, #11]
 800502c:	3301      	adds	r3, #1
 800502e:	72fb      	strb	r3, [r7, #11]
      break;
 8005030:	bf00      	nop
  }

  if (err != 0U)
 8005032:	7afb      	ldrb	r3, [r7, #11]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d11c      	bne.n	8005072 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005038:	893b      	ldrh	r3, [r7, #8]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d011      	beq.n	8005062 <USBD_GetDescriptor+0x2b6>
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	88db      	ldrh	r3, [r3, #6]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00d      	beq.n	8005062 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	88da      	ldrh	r2, [r3, #6]
 800504a:	893b      	ldrh	r3, [r7, #8]
 800504c:	4293      	cmp	r3, r2
 800504e:	bf28      	it	cs
 8005050:	4613      	movcs	r3, r2
 8005052:	b29b      	uxth	r3, r3
 8005054:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005056:	893b      	ldrh	r3, [r7, #8]
 8005058:	461a      	mov	r2, r3
 800505a:	68f9      	ldr	r1, [r7, #12]
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 fa1f 	bl	80054a0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	88db      	ldrh	r3, [r3, #6]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d104      	bne.n	8005074 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 fa76 	bl	800555c <USBD_CtlSendStatus>
 8005070:	e000      	b.n	8005074 <USBD_GetDescriptor+0x2c8>
    return;
 8005072:	bf00      	nop
    }
  }
}
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop

0800507c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	889b      	ldrh	r3, [r3, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d130      	bne.n	80050f0 <USBD_SetAddress+0x74>
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	88db      	ldrh	r3, [r3, #6]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d12c      	bne.n	80050f0 <USBD_SetAddress+0x74>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	885b      	ldrh	r3, [r3, #2]
 800509a:	2b7f      	cmp	r3, #127	; 0x7f
 800509c:	d828      	bhi.n	80050f0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	885b      	ldrh	r3, [r3, #2]
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050b0:	2b03      	cmp	r3, #3
 80050b2:	d104      	bne.n	80050be <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80050b4:	6839      	ldr	r1, [r7, #0]
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f988 	bl	80053cc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050bc:	e01c      	b.n	80050f8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	7bfa      	ldrb	r2, [r7, #15]
 80050c2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80050c6:	7bfb      	ldrb	r3, [r7, #15]
 80050c8:	4619      	mov	r1, r3
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 fe2d 	bl	8005d2a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 fa43 	bl	800555c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80050d6:	7bfb      	ldrb	r3, [r7, #15]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d004      	beq.n	80050e6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2202      	movs	r2, #2
 80050e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050e4:	e008      	b.n	80050f8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050ee:	e003      	b.n	80050f8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80050f0:	6839      	ldr	r1, [r7, #0]
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f96a 	bl	80053cc <USBD_CtlError>
  }
}
 80050f8:	bf00      	nop
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	885b      	ldrh	r3, [r3, #2]
 800510e:	b2da      	uxtb	r2, r3
 8005110:	4b41      	ldr	r3, [pc, #260]	; (8005218 <USBD_SetConfig+0x118>)
 8005112:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005114:	4b40      	ldr	r3, [pc, #256]	; (8005218 <USBD_SetConfig+0x118>)
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d904      	bls.n	8005126 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800511c:	6839      	ldr	r1, [r7, #0]
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f954 	bl	80053cc <USBD_CtlError>
 8005124:	e075      	b.n	8005212 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800512c:	2b02      	cmp	r3, #2
 800512e:	d002      	beq.n	8005136 <USBD_SetConfig+0x36>
 8005130:	2b03      	cmp	r3, #3
 8005132:	d023      	beq.n	800517c <USBD_SetConfig+0x7c>
 8005134:	e062      	b.n	80051fc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005136:	4b38      	ldr	r3, [pc, #224]	; (8005218 <USBD_SetConfig+0x118>)
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d01a      	beq.n	8005174 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800513e:	4b36      	ldr	r3, [pc, #216]	; (8005218 <USBD_SetConfig+0x118>)
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	461a      	mov	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2203      	movs	r2, #3
 800514c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005150:	4b31      	ldr	r3, [pc, #196]	; (8005218 <USBD_SetConfig+0x118>)
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	4619      	mov	r1, r3
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7ff f9f4 	bl	8004544 <USBD_SetClassConfig>
 800515c:	4603      	mov	r3, r0
 800515e:	2b02      	cmp	r3, #2
 8005160:	d104      	bne.n	800516c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005162:	6839      	ldr	r1, [r7, #0]
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 f931 	bl	80053cc <USBD_CtlError>
            return;
 800516a:	e052      	b.n	8005212 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 f9f5 	bl	800555c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005172:	e04e      	b.n	8005212 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f9f1 	bl	800555c <USBD_CtlSendStatus>
        break;
 800517a:	e04a      	b.n	8005212 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800517c:	4b26      	ldr	r3, [pc, #152]	; (8005218 <USBD_SetConfig+0x118>)
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d112      	bne.n	80051aa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800518c:	4b22      	ldr	r3, [pc, #136]	; (8005218 <USBD_SetConfig+0x118>)
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	461a      	mov	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005196:	4b20      	ldr	r3, [pc, #128]	; (8005218 <USBD_SetConfig+0x118>)
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	4619      	mov	r1, r3
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f7ff f9f0 	bl	8004582 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f9da 	bl	800555c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80051a8:	e033      	b.n	8005212 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80051aa:	4b1b      	ldr	r3, [pc, #108]	; (8005218 <USBD_SetConfig+0x118>)
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d01d      	beq.n	80051f4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	4619      	mov	r1, r3
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f7ff f9de 	bl	8004582 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80051c6:	4b14      	ldr	r3, [pc, #80]	; (8005218 <USBD_SetConfig+0x118>)
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	461a      	mov	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80051d0:	4b11      	ldr	r3, [pc, #68]	; (8005218 <USBD_SetConfig+0x118>)
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	4619      	mov	r1, r3
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7ff f9b4 	bl	8004544 <USBD_SetClassConfig>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d104      	bne.n	80051ec <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80051e2:	6839      	ldr	r1, [r7, #0]
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f8f1 	bl	80053cc <USBD_CtlError>
            return;
 80051ea:	e012      	b.n	8005212 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f9b5 	bl	800555c <USBD_CtlSendStatus>
        break;
 80051f2:	e00e      	b.n	8005212 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 f9b1 	bl	800555c <USBD_CtlSendStatus>
        break;
 80051fa:	e00a      	b.n	8005212 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80051fc:	6839      	ldr	r1, [r7, #0]
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f8e4 	bl	80053cc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005204:	4b04      	ldr	r3, [pc, #16]	; (8005218 <USBD_SetConfig+0x118>)
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	4619      	mov	r1, r3
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7ff f9b9 	bl	8004582 <USBD_ClrClassConfig>
        break;
 8005210:	bf00      	nop
    }
  }
}
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	200001a4 	.word	0x200001a4

0800521c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	88db      	ldrh	r3, [r3, #6]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d004      	beq.n	8005238 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800522e:	6839      	ldr	r1, [r7, #0]
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 f8cb 	bl	80053cc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005236:	e021      	b.n	800527c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800523e:	2b01      	cmp	r3, #1
 8005240:	db17      	blt.n	8005272 <USBD_GetConfig+0x56>
 8005242:	2b02      	cmp	r3, #2
 8005244:	dd02      	ble.n	800524c <USBD_GetConfig+0x30>
 8005246:	2b03      	cmp	r3, #3
 8005248:	d00b      	beq.n	8005262 <USBD_GetConfig+0x46>
 800524a:	e012      	b.n	8005272 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	3308      	adds	r3, #8
 8005256:	2201      	movs	r2, #1
 8005258:	4619      	mov	r1, r3
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f920 	bl	80054a0 <USBD_CtlSendData>
        break;
 8005260:	e00c      	b.n	800527c <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	3304      	adds	r3, #4
 8005266:	2201      	movs	r2, #1
 8005268:	4619      	mov	r1, r3
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f918 	bl	80054a0 <USBD_CtlSendData>
        break;
 8005270:	e004      	b.n	800527c <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8005272:	6839      	ldr	r1, [r7, #0]
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f8a9 	bl	80053cc <USBD_CtlError>
        break;
 800527a:	bf00      	nop
}
 800527c:	bf00      	nop
 800527e:	3708      	adds	r7, #8
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005294:	3b01      	subs	r3, #1
 8005296:	2b02      	cmp	r3, #2
 8005298:	d81e      	bhi.n	80052d8 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	88db      	ldrh	r3, [r3, #6]
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d004      	beq.n	80052ac <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80052a2:	6839      	ldr	r1, [r7, #0]
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 f891 	bl	80053cc <USBD_CtlError>
        break;
 80052aa:	e01a      	b.n	80052e2 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d005      	beq.n	80052c8 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	f043 0202 	orr.w	r2, r3, #2
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	330c      	adds	r3, #12
 80052cc:	2202      	movs	r2, #2
 80052ce:	4619      	mov	r1, r3
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f8e5 	bl	80054a0 <USBD_CtlSendData>
      break;
 80052d6:	e004      	b.n	80052e2 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80052d8:	6839      	ldr	r1, [r7, #0]
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f876 	bl	80053cc <USBD_CtlError>
      break;
 80052e0:	bf00      	nop
  }
}
 80052e2:	bf00      	nop
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b082      	sub	sp, #8
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
 80052f2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	885b      	ldrh	r3, [r3, #2]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d106      	bne.n	800530a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 f929 	bl	800555c <USBD_CtlSendStatus>
  }
}
 800530a:	bf00      	nop
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b082      	sub	sp, #8
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
 800531a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005322:	3b01      	subs	r3, #1
 8005324:	2b02      	cmp	r3, #2
 8005326:	d80b      	bhi.n	8005340 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	885b      	ldrh	r3, [r3, #2]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d10c      	bne.n	800534a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f90f 	bl	800555c <USBD_CtlSendStatus>
      }
      break;
 800533e:	e004      	b.n	800534a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005340:	6839      	ldr	r1, [r7, #0]
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f842 	bl	80053cc <USBD_CtlError>
      break;
 8005348:	e000      	b.n	800534c <USBD_ClrFeature+0x3a>
      break;
 800534a:	bf00      	nop
  }
}
 800534c:	bf00      	nop
 800534e:	3708      	adds	r7, #8
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	781a      	ldrb	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	785a      	ldrb	r2, [r3, #1]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	3302      	adds	r3, #2
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	b29a      	uxth	r2, r3
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	3303      	adds	r3, #3
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	b29b      	uxth	r3, r3
 800537e:	021b      	lsls	r3, r3, #8
 8005380:	b29b      	uxth	r3, r3
 8005382:	4413      	add	r3, r2
 8005384:	b29a      	uxth	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	3304      	adds	r3, #4
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	b29a      	uxth	r2, r3
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	3305      	adds	r3, #5
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	b29b      	uxth	r3, r3
 800539a:	021b      	lsls	r3, r3, #8
 800539c:	b29b      	uxth	r3, r3
 800539e:	4413      	add	r3, r2
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	3306      	adds	r3, #6
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	3307      	adds	r3, #7
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	021b      	lsls	r3, r3, #8
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	4413      	add	r3, r2
 80053bc:	b29a      	uxth	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	80da      	strh	r2, [r3, #6]

}
 80053c2:	bf00      	nop
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bc80      	pop	{r7}
 80053ca:	4770      	bx	lr

080053cc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80053d6:	2180      	movs	r1, #128	; 0x80
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 fc43 	bl	8005c64 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80053de:	2100      	movs	r1, #0
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 fc3f 	bl	8005c64 <USBD_LL_StallEP>
}
 80053e6:	bf00      	nop
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b086      	sub	sp, #24
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	60f8      	str	r0, [r7, #12]
 80053f6:	60b9      	str	r1, [r7, #8]
 80053f8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80053fa:	2300      	movs	r3, #0
 80053fc:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d032      	beq.n	800546a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 f834 	bl	8005472 <USBD_GetLen>
 800540a:	4603      	mov	r3, r0
 800540c:	3301      	adds	r3, #1
 800540e:	b29b      	uxth	r3, r3
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	b29a      	uxth	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005418:	7dfb      	ldrb	r3, [r7, #23]
 800541a:	1c5a      	adds	r2, r3, #1
 800541c:	75fa      	strb	r2, [r7, #23]
 800541e:	461a      	mov	r2, r3
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	4413      	add	r3, r2
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	7812      	ldrb	r2, [r2, #0]
 8005428:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800542a:	7dfb      	ldrb	r3, [r7, #23]
 800542c:	1c5a      	adds	r2, r3, #1
 800542e:	75fa      	strb	r2, [r7, #23]
 8005430:	461a      	mov	r2, r3
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	4413      	add	r3, r2
 8005436:	2203      	movs	r2, #3
 8005438:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800543a:	e012      	b.n	8005462 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	1c5a      	adds	r2, r3, #1
 8005440:	60fa      	str	r2, [r7, #12]
 8005442:	7dfa      	ldrb	r2, [r7, #23]
 8005444:	1c51      	adds	r1, r2, #1
 8005446:	75f9      	strb	r1, [r7, #23]
 8005448:	4611      	mov	r1, r2
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	440a      	add	r2, r1
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8005452:	7dfb      	ldrb	r3, [r7, #23]
 8005454:	1c5a      	adds	r2, r3, #1
 8005456:	75fa      	strb	r2, [r7, #23]
 8005458:	461a      	mov	r2, r3
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	4413      	add	r3, r2
 800545e:	2200      	movs	r2, #0
 8005460:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1e8      	bne.n	800543c <USBD_GetString+0x4e>
    }
  }
}
 800546a:	bf00      	nop
 800546c:	3718      	adds	r7, #24
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005472:	b480      	push	{r7}
 8005474:	b085      	sub	sp, #20
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800547a:	2300      	movs	r3, #0
 800547c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800547e:	e005      	b.n	800548c <USBD_GetLen+0x1a>
  {
    len++;
 8005480:	7bfb      	ldrb	r3, [r7, #15]
 8005482:	3301      	adds	r3, #1
 8005484:	73fb      	strb	r3, [r7, #15]
    buf++;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	3301      	adds	r3, #1
 800548a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1f5      	bne.n	8005480 <USBD_GetLen+0xe>
  }

  return len;
 8005494:	7bfb      	ldrb	r3, [r7, #15]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	bc80      	pop	{r7}
 800549e:	4770      	bx	lr

080054a0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	4613      	mov	r3, r2
 80054ac:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2202      	movs	r2, #2
 80054b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80054b6:	88fa      	ldrh	r2, [r7, #6]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80054bc:	88fa      	ldrh	r2, [r7, #6]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80054c2:	88fb      	ldrh	r3, [r7, #6]
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	2100      	movs	r1, #0
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 fc4d 	bl	8005d68 <USBD_LL_Transmit>

  return USBD_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	4613      	mov	r3, r2
 80054e4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80054e6:	88fb      	ldrh	r3, [r7, #6]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	2100      	movs	r1, #0
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f000 fc3b 	bl	8005d68 <USBD_LL_Transmit>

  return USBD_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3710      	adds	r7, #16
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	4613      	mov	r3, r2
 8005508:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2203      	movs	r2, #3
 800550e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005512:	88fa      	ldrh	r2, [r7, #6]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800551a:	88fa      	ldrh	r2, [r7, #6]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005522:	88fb      	ldrh	r3, [r7, #6]
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	2100      	movs	r1, #0
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f000 fc40 	bl	8005dae <USBD_LL_PrepareReceive>

  return USBD_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	4613      	mov	r3, r2
 8005544:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005546:	88fb      	ldrh	r3, [r7, #6]
 8005548:	68ba      	ldr	r2, [r7, #8]
 800554a:	2100      	movs	r1, #0
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f000 fc2e 	bl	8005dae <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2204      	movs	r2, #4
 8005568:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800556c:	2300      	movs	r3, #0
 800556e:	2200      	movs	r2, #0
 8005570:	2100      	movs	r1, #0
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 fbf8 	bl	8005d68 <USBD_LL_Transmit>

  return USBD_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b082      	sub	sp, #8
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2205      	movs	r2, #5
 800558e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005592:	2300      	movs	r3, #0
 8005594:	2200      	movs	r2, #0
 8005596:	2100      	movs	r1, #0
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 fc08 	bl	8005dae <USBD_LL_PrepareReceive>

  return USBD_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80055ac:	2200      	movs	r2, #0
 80055ae:	4912      	ldr	r1, [pc, #72]	; (80055f8 <MX_USB_DEVICE_Init+0x50>)
 80055b0:	4812      	ldr	r0, [pc, #72]	; (80055fc <MX_USB_DEVICE_Init+0x54>)
 80055b2:	f7fe ff6d 	bl	8004490 <USBD_Init>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80055bc:	f7fa ff80 	bl	80004c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80055c0:	490f      	ldr	r1, [pc, #60]	; (8005600 <MX_USB_DEVICE_Init+0x58>)
 80055c2:	480e      	ldr	r0, [pc, #56]	; (80055fc <MX_USB_DEVICE_Init+0x54>)
 80055c4:	f7fe ff8f 	bl	80044e6 <USBD_RegisterClass>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80055ce:	f7fa ff77 	bl	80004c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80055d2:	490c      	ldr	r1, [pc, #48]	; (8005604 <MX_USB_DEVICE_Init+0x5c>)
 80055d4:	4809      	ldr	r0, [pc, #36]	; (80055fc <MX_USB_DEVICE_Init+0x54>)
 80055d6:	f7fe feef 	bl	80043b8 <USBD_CDC_RegisterInterface>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d001      	beq.n	80055e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80055e0:	f7fa ff6e 	bl	80004c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80055e4:	4805      	ldr	r0, [pc, #20]	; (80055fc <MX_USB_DEVICE_Init+0x54>)
 80055e6:	f7fe ff97 	bl	8004518 <USBD_Start>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80055f0:	f7fa ff66 	bl	80004c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80055f4:	bf00      	nop
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	20000138 	.word	0x20000138
 80055fc:	200004b8 	.word	0x200004b8
 8005600:	20000024 	.word	0x20000024
 8005604:	20000128 	.word	0x20000128

08005608 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800560c:	2200      	movs	r2, #0
 800560e:	4905      	ldr	r1, [pc, #20]	; (8005624 <CDC_Init_FS+0x1c>)
 8005610:	4805      	ldr	r0, [pc, #20]	; (8005628 <CDC_Init_FS+0x20>)
 8005612:	f7fe fee7 	bl	80043e4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005616:	4905      	ldr	r1, [pc, #20]	; (800562c <CDC_Init_FS+0x24>)
 8005618:	4803      	ldr	r0, [pc, #12]	; (8005628 <CDC_Init_FS+0x20>)
 800561a:	f7fe fefc 	bl	8004416 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800561e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005620:	4618      	mov	r0, r3
 8005622:	bd80      	pop	{r7, pc}
 8005624:	20000b64 	.word	0x20000b64
 8005628:	200004b8 	.word	0x200004b8
 800562c:	2000077c 	.word	0x2000077c

08005630 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005630:	b480      	push	{r7}
 8005632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005634:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005636:	4618      	mov	r0, r3
 8005638:	46bd      	mov	sp, r7
 800563a:	bc80      	pop	{r7}
 800563c:	4770      	bx	lr
	...

08005640 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	4603      	mov	r3, r0
 8005648:	6039      	str	r1, [r7, #0]
 800564a:	71fb      	strb	r3, [r7, #7]
 800564c:	4613      	mov	r3, r2
 800564e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005650:	79fb      	ldrb	r3, [r7, #7]
 8005652:	2b23      	cmp	r3, #35	; 0x23
 8005654:	d866      	bhi.n	8005724 <CDC_Control_FS+0xe4>
 8005656:	a201      	add	r2, pc, #4	; (adr r2, 800565c <CDC_Control_FS+0x1c>)
 8005658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565c:	08005725 	.word	0x08005725
 8005660:	08005725 	.word	0x08005725
 8005664:	08005725 	.word	0x08005725
 8005668:	08005725 	.word	0x08005725
 800566c:	08005725 	.word	0x08005725
 8005670:	08005725 	.word	0x08005725
 8005674:	08005725 	.word	0x08005725
 8005678:	08005725 	.word	0x08005725
 800567c:	08005725 	.word	0x08005725
 8005680:	08005725 	.word	0x08005725
 8005684:	08005725 	.word	0x08005725
 8005688:	08005725 	.word	0x08005725
 800568c:	08005725 	.word	0x08005725
 8005690:	08005725 	.word	0x08005725
 8005694:	08005725 	.word	0x08005725
 8005698:	08005725 	.word	0x08005725
 800569c:	08005725 	.word	0x08005725
 80056a0:	08005725 	.word	0x08005725
 80056a4:	08005725 	.word	0x08005725
 80056a8:	08005725 	.word	0x08005725
 80056ac:	08005725 	.word	0x08005725
 80056b0:	08005725 	.word	0x08005725
 80056b4:	08005725 	.word	0x08005725
 80056b8:	08005725 	.word	0x08005725
 80056bc:	08005725 	.word	0x08005725
 80056c0:	08005725 	.word	0x08005725
 80056c4:	08005725 	.word	0x08005725
 80056c8:	08005725 	.word	0x08005725
 80056cc:	08005725 	.word	0x08005725
 80056d0:	08005725 	.word	0x08005725
 80056d4:	08005725 	.word	0x08005725
 80056d8:	08005725 	.word	0x08005725
 80056dc:	080056ed 	.word	0x080056ed
 80056e0:	0800570f 	.word	0x0800570f
 80056e4:	08005725 	.word	0x08005725
 80056e8:	08005725 	.word	0x08005725
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(&linecode,pbuf,length>sizeof(linecode)?(sizeof(linecode)):(length));
 80056ec:	88bb      	ldrh	r3, [r7, #4]
 80056ee:	2b0c      	cmp	r3, #12
 80056f0:	bf28      	it	cs
 80056f2:	230c      	movcs	r3, #12
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	461a      	mov	r2, r3
 80056f8:	6839      	ldr	r1, [r7, #0]
 80056fa:	480d      	ldr	r0, [pc, #52]	; (8005730 <CDC_Control_FS+0xf0>)
 80056fc:	f000 fbfe 	bl	8005efc <memcpy>
    	linecode.IsUpdate++;
 8005700:	4b0b      	ldr	r3, [pc, #44]	; (8005730 <CDC_Control_FS+0xf0>)
 8005702:	7a1b      	ldrb	r3, [r3, #8]
 8005704:	3301      	adds	r3, #1
 8005706:	b2da      	uxtb	r2, r3
 8005708:	4b09      	ldr	r3, [pc, #36]	; (8005730 <CDC_Control_FS+0xf0>)
 800570a:	721a      	strb	r2, [r3, #8]
    break;
 800570c:	e00b      	b.n	8005726 <CDC_Control_FS+0xe6>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf,&linecode,length>sizeof(linecode)?(sizeof(linecode)):(length));
 800570e:	88bb      	ldrh	r3, [r7, #4]
 8005710:	2b0c      	cmp	r3, #12
 8005712:	bf28      	it	cs
 8005714:	230c      	movcs	r3, #12
 8005716:	b29b      	uxth	r3, r3
 8005718:	461a      	mov	r2, r3
 800571a:	4905      	ldr	r1, [pc, #20]	; (8005730 <CDC_Control_FS+0xf0>)
 800571c:	6838      	ldr	r0, [r7, #0]
 800571e:	f000 fbed 	bl	8005efc <memcpy>
    break;
 8005722:	e000      	b.n	8005726 <CDC_Control_FS+0xe6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005724:	bf00      	nop
  }

  return (USBD_OK);
 8005726:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005728:	4618      	mov	r0, r3
 800572a:	3708      	adds	r7, #8
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	20000000 	.word	0x20000000

08005734 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800573e:	6879      	ldr	r1, [r7, #4]
 8005740:	4805      	ldr	r0, [pc, #20]	; (8005758 <CDC_Receive_FS+0x24>)
 8005742:	f7fe fe68 	bl	8004416 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005746:	4804      	ldr	r0, [pc, #16]	; (8005758 <CDC_Receive_FS+0x24>)
 8005748:	f7fe fe78 	bl	800443c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800574c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800574e:	4618      	mov	r0, r3
 8005750:	3708      	adds	r7, #8
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	200004b8 	.word	0x200004b8

0800575c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	4603      	mov	r3, r0
 8005764:	6039      	str	r1, [r7, #0]
 8005766:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	2212      	movs	r2, #18
 800576c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800576e:	4b03      	ldr	r3, [pc, #12]	; (800577c <USBD_FS_DeviceDescriptor+0x20>)
}
 8005770:	4618      	mov	r0, r3
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	bc80      	pop	{r7}
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	20000154 	.word	0x20000154

08005780 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	4603      	mov	r3, r0
 8005788:	6039      	str	r1, [r7, #0]
 800578a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	2204      	movs	r2, #4
 8005790:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005792:	4b03      	ldr	r3, [pc, #12]	; (80057a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005794:	4618      	mov	r0, r3
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	bc80      	pop	{r7}
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	20000168 	.word	0x20000168

080057a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	4603      	mov	r3, r0
 80057ac:	6039      	str	r1, [r7, #0]
 80057ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80057b0:	79fb      	ldrb	r3, [r7, #7]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d105      	bne.n	80057c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	4907      	ldr	r1, [pc, #28]	; (80057d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80057ba:	4808      	ldr	r0, [pc, #32]	; (80057dc <USBD_FS_ProductStrDescriptor+0x38>)
 80057bc:	f7ff fe17 	bl	80053ee <USBD_GetString>
 80057c0:	e004      	b.n	80057cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	4904      	ldr	r1, [pc, #16]	; (80057d8 <USBD_FS_ProductStrDescriptor+0x34>)
 80057c6:	4805      	ldr	r0, [pc, #20]	; (80057dc <USBD_FS_ProductStrDescriptor+0x38>)
 80057c8:	f7ff fe11 	bl	80053ee <USBD_GetString>
  }
  return USBD_StrDesc;
 80057cc:	4b02      	ldr	r3, [pc, #8]	; (80057d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	20000f4c 	.word	0x20000f4c
 80057dc:	08005f50 	.word	0x08005f50

080057e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	4603      	mov	r3, r0
 80057e8:	6039      	str	r1, [r7, #0]
 80057ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	4904      	ldr	r1, [pc, #16]	; (8005800 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80057f0:	4804      	ldr	r0, [pc, #16]	; (8005804 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80057f2:	f7ff fdfc 	bl	80053ee <USBD_GetString>
  return USBD_StrDesc;
 80057f6:	4b02      	ldr	r3, [pc, #8]	; (8005800 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	20000f4c 	.word	0x20000f4c
 8005804:	08005f50 	.word	0x08005f50

08005808 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	4603      	mov	r3, r0
 8005810:	6039      	str	r1, [r7, #0]
 8005812:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	221a      	movs	r2, #26
 8005818:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800581a:	f000 f843 	bl	80058a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800581e:	4b02      	ldr	r3, [pc, #8]	; (8005828 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005820:	4618      	mov	r0, r3
 8005822:	3708      	adds	r7, #8
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	2000016c 	.word	0x2000016c

0800582c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	4603      	mov	r3, r0
 8005834:	6039      	str	r1, [r7, #0]
 8005836:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005838:	79fb      	ldrb	r3, [r7, #7]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d105      	bne.n	800584a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	4907      	ldr	r1, [pc, #28]	; (8005860 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005842:	4808      	ldr	r0, [pc, #32]	; (8005864 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005844:	f7ff fdd3 	bl	80053ee <USBD_GetString>
 8005848:	e004      	b.n	8005854 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	4904      	ldr	r1, [pc, #16]	; (8005860 <USBD_FS_ConfigStrDescriptor+0x34>)
 800584e:	4805      	ldr	r0, [pc, #20]	; (8005864 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005850:	f7ff fdcd 	bl	80053ee <USBD_GetString>
  }
  return USBD_StrDesc;
 8005854:	4b02      	ldr	r3, [pc, #8]	; (8005860 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005856:	4618      	mov	r0, r3
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	20000f4c 	.word	0x20000f4c
 8005864:	08005f54 	.word	0x08005f54

08005868 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	4603      	mov	r3, r0
 8005870:	6039      	str	r1, [r7, #0]
 8005872:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005874:	79fb      	ldrb	r3, [r7, #7]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d105      	bne.n	8005886 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	4907      	ldr	r1, [pc, #28]	; (800589c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800587e:	4808      	ldr	r0, [pc, #32]	; (80058a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005880:	f7ff fdb5 	bl	80053ee <USBD_GetString>
 8005884:	e004      	b.n	8005890 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	4904      	ldr	r1, [pc, #16]	; (800589c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800588a:	4805      	ldr	r0, [pc, #20]	; (80058a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800588c:	f7ff fdaf 	bl	80053ee <USBD_GetString>
  }
  return USBD_StrDesc;
 8005890:	4b02      	ldr	r3, [pc, #8]	; (800589c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005892:	4618      	mov	r0, r3
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	20000f4c 	.word	0x20000f4c
 80058a0:	08005f60 	.word	0x08005f60

080058a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80058aa:	4b0f      	ldr	r3, [pc, #60]	; (80058e8 <Get_SerialNum+0x44>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80058b0:	4b0e      	ldr	r3, [pc, #56]	; (80058ec <Get_SerialNum+0x48>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80058b6:	4b0e      	ldr	r3, [pc, #56]	; (80058f0 <Get_SerialNum+0x4c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4413      	add	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d009      	beq.n	80058de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80058ca:	2208      	movs	r2, #8
 80058cc:	4909      	ldr	r1, [pc, #36]	; (80058f4 <Get_SerialNum+0x50>)
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f000 f814 	bl	80058fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80058d4:	2204      	movs	r2, #4
 80058d6:	4908      	ldr	r1, [pc, #32]	; (80058f8 <Get_SerialNum+0x54>)
 80058d8:	68b8      	ldr	r0, [r7, #8]
 80058da:	f000 f80f 	bl	80058fc <IntToUnicode>
  }
}
 80058de:	bf00      	nop
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	1ffff7e8 	.word	0x1ffff7e8
 80058ec:	1ffff7ec 	.word	0x1ffff7ec
 80058f0:	1ffff7f0 	.word	0x1ffff7f0
 80058f4:	2000016e 	.word	0x2000016e
 80058f8:	2000017e 	.word	0x2000017e

080058fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b087      	sub	sp, #28
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	4613      	mov	r3, r2
 8005908:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800590a:	2300      	movs	r3, #0
 800590c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800590e:	2300      	movs	r3, #0
 8005910:	75fb      	strb	r3, [r7, #23]
 8005912:	e027      	b.n	8005964 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	0f1b      	lsrs	r3, r3, #28
 8005918:	2b09      	cmp	r3, #9
 800591a:	d80b      	bhi.n	8005934 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	0f1b      	lsrs	r3, r3, #28
 8005920:	b2da      	uxtb	r2, r3
 8005922:	7dfb      	ldrb	r3, [r7, #23]
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	4619      	mov	r1, r3
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	440b      	add	r3, r1
 800592c:	3230      	adds	r2, #48	; 0x30
 800592e:	b2d2      	uxtb	r2, r2
 8005930:	701a      	strb	r2, [r3, #0]
 8005932:	e00a      	b.n	800594a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	0f1b      	lsrs	r3, r3, #28
 8005938:	b2da      	uxtb	r2, r3
 800593a:	7dfb      	ldrb	r3, [r7, #23]
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	4619      	mov	r1, r3
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	440b      	add	r3, r1
 8005944:	3237      	adds	r2, #55	; 0x37
 8005946:	b2d2      	uxtb	r2, r2
 8005948:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	011b      	lsls	r3, r3, #4
 800594e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005950:	7dfb      	ldrb	r3, [r7, #23]
 8005952:	005b      	lsls	r3, r3, #1
 8005954:	3301      	adds	r3, #1
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	4413      	add	r3, r2
 800595a:	2200      	movs	r2, #0
 800595c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800595e:	7dfb      	ldrb	r3, [r7, #23]
 8005960:	3301      	adds	r3, #1
 8005962:	75fb      	strb	r3, [r7, #23]
 8005964:	7dfa      	ldrb	r2, [r7, #23]
 8005966:	79fb      	ldrb	r3, [r7, #7]
 8005968:	429a      	cmp	r2, r3
 800596a:	d3d3      	bcc.n	8005914 <IntToUnicode+0x18>
  }
}
 800596c:	bf00      	nop
 800596e:	371c      	adds	r7, #28
 8005970:	46bd      	mov	sp, r7
 8005972:	bc80      	pop	{r7}
 8005974:	4770      	bx	lr
	...

08005978 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a0d      	ldr	r2, [pc, #52]	; (80059bc <HAL_PCD_MspInit+0x44>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d113      	bne.n	80059b2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800598a:	4b0d      	ldr	r3, [pc, #52]	; (80059c0 <HAL_PCD_MspInit+0x48>)
 800598c:	69db      	ldr	r3, [r3, #28]
 800598e:	4a0c      	ldr	r2, [pc, #48]	; (80059c0 <HAL_PCD_MspInit+0x48>)
 8005990:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005994:	61d3      	str	r3, [r2, #28]
 8005996:	4b0a      	ldr	r3, [pc, #40]	; (80059c0 <HAL_PCD_MspInit+0x48>)
 8005998:	69db      	ldr	r3, [r3, #28]
 800599a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800599e:	60fb      	str	r3, [r7, #12]
 80059a0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80059a2:	2200      	movs	r2, #0
 80059a4:	2100      	movs	r1, #0
 80059a6:	2014      	movs	r0, #20
 80059a8:	f7fb f89b 	bl	8000ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80059ac:	2014      	movs	r0, #20
 80059ae:	f7fb f8b4 	bl	8000b1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80059b2:	bf00      	nop
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	40005c00 	.word	0x40005c00
 80059c0:	40021000 	.word	0x40021000

080059c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80059d8:	4619      	mov	r1, r3
 80059da:	4610      	mov	r0, r2
 80059dc:	f7fe fde4 	bl	80045a8 <USBD_LL_SetupStage>
}
 80059e0:	bf00      	nop
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	460b      	mov	r3, r1
 80059f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80059fa:	78fb      	ldrb	r3, [r7, #3]
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	015b      	lsls	r3, r3, #5
 8005a00:	4413      	add	r3, r2
 8005a02:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	78fb      	ldrb	r3, [r7, #3]
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	f7fe fe17 	bl	800463e <USBD_LL_DataOutStage>
}
 8005a10:	bf00      	nop
 8005a12:	3708      	adds	r7, #8
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	460b      	mov	r3, r1
 8005a22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8005a2a:	78fb      	ldrb	r3, [r7, #3]
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	015b      	lsls	r3, r3, #5
 8005a30:	4413      	add	r3, r2
 8005a32:	333c      	adds	r3, #60	; 0x3c
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	78fb      	ldrb	r3, [r7, #3]
 8005a38:	4619      	mov	r1, r3
 8005a3a:	f7fe fe71 	bl	8004720 <USBD_LL_DataInStage>
}
 8005a3e:	bf00      	nop
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b082      	sub	sp, #8
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7fe ff81 	bl	800495c <USBD_LL_SOF>
}
 8005a5a:	bf00      	nop
 8005a5c:	3708      	adds	r7, #8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b084      	sub	sp, #16
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d001      	beq.n	8005a7a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8005a76:	f7fa fd23 	bl	80004c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005a80:	7bfa      	ldrb	r2, [r7, #15]
 8005a82:	4611      	mov	r1, r2
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7fe ff31 	bl	80048ec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7fe feea 	bl	800486a <USBD_LL_Reset>
}
 8005a96:	bf00      	nop
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
	...

08005aa0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7fe ff2b 	bl	800490a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d005      	beq.n	8005ac8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005abc:	4b04      	ldr	r3, [pc, #16]	; (8005ad0 <HAL_PCD_SuspendCallback+0x30>)
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	4a03      	ldr	r2, [pc, #12]	; (8005ad0 <HAL_PCD_SuspendCallback+0x30>)
 8005ac2:	f043 0306 	orr.w	r3, r3, #6
 8005ac6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005ac8:	bf00      	nop
 8005aca:	3708      	adds	r7, #8
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	e000ed00 	.word	0xe000ed00

08005ad4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7fe ff25 	bl	8004932 <USBD_LL_Resume>
}
 8005ae8:	bf00      	nop
 8005aea:	3708      	adds	r7, #8
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8005af8:	4a28      	ldr	r2, [pc, #160]	; (8005b9c <USBD_LL_Init+0xac>)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a26      	ldr	r2, [pc, #152]	; (8005b9c <USBD_LL_Init+0xac>)
 8005b04:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8005b08:	4b24      	ldr	r3, [pc, #144]	; (8005b9c <USBD_LL_Init+0xac>)
 8005b0a:	4a25      	ldr	r2, [pc, #148]	; (8005ba0 <USBD_LL_Init+0xb0>)
 8005b0c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005b0e:	4b23      	ldr	r3, [pc, #140]	; (8005b9c <USBD_LL_Init+0xac>)
 8005b10:	2208      	movs	r2, #8
 8005b12:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005b14:	4b21      	ldr	r3, [pc, #132]	; (8005b9c <USBD_LL_Init+0xac>)
 8005b16:	2202      	movs	r2, #2
 8005b18:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005b1a:	4b20      	ldr	r3, [pc, #128]	; (8005b9c <USBD_LL_Init+0xac>)
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8005b20:	4b1e      	ldr	r3, [pc, #120]	; (8005b9c <USBD_LL_Init+0xac>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005b26:	4b1d      	ldr	r3, [pc, #116]	; (8005b9c <USBD_LL_Init+0xac>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005b2c:	481b      	ldr	r0, [pc, #108]	; (8005b9c <USBD_LL_Init+0xac>)
 8005b2e:	f7fb fb4d 	bl	80011cc <HAL_PCD_Init>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8005b38:	f7fa fcc2 	bl	80004c0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005b42:	2318      	movs	r3, #24
 8005b44:	2200      	movs	r2, #0
 8005b46:	2100      	movs	r1, #0
 8005b48:	f7fc f9e6 	bl	8001f18 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005b52:	2358      	movs	r3, #88	; 0x58
 8005b54:	2200      	movs	r2, #0
 8005b56:	2180      	movs	r1, #128	; 0x80
 8005b58:	f7fc f9de 	bl	8001f18 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005b62:	23c0      	movs	r3, #192	; 0xc0
 8005b64:	2200      	movs	r2, #0
 8005b66:	2181      	movs	r1, #129	; 0x81
 8005b68:	f7fc f9d6 	bl	8001f18 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005b72:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005b76:	2200      	movs	r2, #0
 8005b78:	2101      	movs	r1, #1
 8005b7a:	f7fc f9cd 	bl	8001f18 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005b84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b88:	2200      	movs	r2, #0
 8005b8a:	2182      	movs	r1, #130	; 0x82
 8005b8c:	f7fc f9c4 	bl	8001f18 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	2000114c 	.word	0x2000114c
 8005ba0:	40005c00 	.word	0x40005c00

08005ba4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005bac:	2300      	movs	r3, #0
 8005bae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7fb fbe7 	bl	800138e <HAL_PCD_Start>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005bc4:	7bfb      	ldrb	r3, [r7, #15]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 f948 	bl	8005e5c <USBD_Get_USB_Status>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005bd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b084      	sub	sp, #16
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	4608      	mov	r0, r1
 8005be4:	4611      	mov	r1, r2
 8005be6:	461a      	mov	r2, r3
 8005be8:	4603      	mov	r3, r0
 8005bea:	70fb      	strb	r3, [r7, #3]
 8005bec:	460b      	mov	r3, r1
 8005bee:	70bb      	strb	r3, [r7, #2]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005c02:	78bb      	ldrb	r3, [r7, #2]
 8005c04:	883a      	ldrh	r2, [r7, #0]
 8005c06:	78f9      	ldrb	r1, [r7, #3]
 8005c08:	f7fb fd1a 	bl	8001640 <HAL_PCD_EP_Open>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005c10:	7bfb      	ldrb	r3, [r7, #15]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 f922 	bl	8005e5c <USBD_Get_USB_Status>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8005c1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b084      	sub	sp, #16
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	460b      	mov	r3, r1
 8005c30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005c32:	2300      	movs	r3, #0
 8005c34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005c36:	2300      	movs	r3, #0
 8005c38:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c40:	78fa      	ldrb	r2, [r7, #3]
 8005c42:	4611      	mov	r1, r2
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7fb fd5b 	bl	8001700 <HAL_PCD_EP_Close>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005c4e:	7bfb      	ldrb	r3, [r7, #15]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f000 f903 	bl	8005e5c <USBD_Get_USB_Status>
 8005c56:	4603      	mov	r3, r0
 8005c58:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8005c5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005c70:	2300      	movs	r3, #0
 8005c72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005c74:	2300      	movs	r3, #0
 8005c76:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c7e:	78fa      	ldrb	r2, [r7, #3]
 8005c80:	4611      	mov	r1, r2
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7fb fe05 	bl	8001892 <HAL_PCD_EP_SetStall>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005c8c:	7bfb      	ldrb	r3, [r7, #15]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 f8e4 	bl	8005e5c <USBD_Get_USB_Status>
 8005c94:	4603      	mov	r3, r0
 8005c96:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005c98:	7bbb      	ldrb	r3, [r7, #14]
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b084      	sub	sp, #16
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
 8005caa:	460b      	mov	r3, r1
 8005cac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005cbc:	78fa      	ldrb	r2, [r7, #3]
 8005cbe:	4611      	mov	r1, r2
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7fb fe40 	bl	8001946 <HAL_PCD_EP_ClrStall>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005cca:	7bfb      	ldrb	r3, [r7, #15]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 f8c5 	bl	8005e5c <USBD_Get_USB_Status>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8005cd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	460b      	mov	r3, r1
 8005cea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005cf2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8005cf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	da08      	bge.n	8005d0e <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005cfc:	78fb      	ldrb	r3, [r7, #3]
 8005cfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	015b      	lsls	r3, r3, #5
 8005d06:	4413      	add	r3, r2
 8005d08:	332a      	adds	r3, #42	; 0x2a
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	e008      	b.n	8005d20 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005d0e:	78fb      	ldrb	r3, [r7, #3]
 8005d10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	015b      	lsls	r3, r3, #5
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8005d1e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3714      	adds	r7, #20
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bc80      	pop	{r7}
 8005d28:	4770      	bx	lr

08005d2a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b084      	sub	sp, #16
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
 8005d32:	460b      	mov	r3, r1
 8005d34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d44:	78fa      	ldrb	r2, [r7, #3]
 8005d46:	4611      	mov	r1, r2
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f7fb fc54 	bl	80015f6 <HAL_PCD_SetAddress>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005d52:	7bfb      	ldrb	r3, [r7, #15]
 8005d54:	4618      	mov	r0, r3
 8005d56:	f000 f881 	bl	8005e5c <USBD_Get_USB_Status>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005d5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b086      	sub	sp, #24
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	607a      	str	r2, [r7, #4]
 8005d72:	461a      	mov	r2, r3
 8005d74:	460b      	mov	r3, r1
 8005d76:	72fb      	strb	r3, [r7, #11]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005d80:	2300      	movs	r3, #0
 8005d82:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005d8a:	893b      	ldrh	r3, [r7, #8]
 8005d8c:	7af9      	ldrb	r1, [r7, #11]
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	f7fb fd46 	bl	8001820 <HAL_PCD_EP_Transmit>
 8005d94:	4603      	mov	r3, r0
 8005d96:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005d98:	7dfb      	ldrb	r3, [r7, #23]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 f85e 	bl	8005e5c <USBD_Get_USB_Status>
 8005da0:	4603      	mov	r3, r0
 8005da2:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8005da4:	7dbb      	ldrb	r3, [r7, #22]
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3718      	adds	r7, #24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b086      	sub	sp, #24
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	60f8      	str	r0, [r7, #12]
 8005db6:	607a      	str	r2, [r7, #4]
 8005db8:	461a      	mov	r2, r3
 8005dba:	460b      	mov	r3, r1
 8005dbc:	72fb      	strb	r3, [r7, #11]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005dd0:	893b      	ldrh	r3, [r7, #8]
 8005dd2:	7af9      	ldrb	r1, [r7, #11]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	f7fb fcd5 	bl	8001784 <HAL_PCD_EP_Receive>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005dde:	7dfb      	ldrb	r3, [r7, #23]
 8005de0:	4618      	mov	r0, r3
 8005de2:	f000 f83b 	bl	8005e5c <USBD_Get_USB_Status>
 8005de6:	4603      	mov	r3, r0
 8005de8:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8005dea:	7dbb      	ldrb	r3, [r7, #22]
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3718      	adds	r7, #24
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e06:	78fa      	ldrb	r2, [r7, #3]
 8005e08:	4611      	mov	r1, r2
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fb fcf4 	bl	80017f8 <HAL_PCD_EP_GetRxCount>
 8005e10:	4603      	mov	r3, r0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
	...

08005e1c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8005e24:	4b02      	ldr	r3, [pc, #8]	; (8005e30 <USBD_static_malloc+0x14>)
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	370c      	adds	r7, #12
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bc80      	pop	{r7}
 8005e2e:	4770      	bx	lr
 8005e30:	200001a8 	.word	0x200001a8

08005e34 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]

}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bc80      	pop	{r7}
 8005e44:	4770      	bx	lr

08005e46 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e46:	b480      	push	{r7}
 8005e48:	b083      	sub	sp, #12
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
 8005e4e:	460b      	mov	r3, r1
 8005e50:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8005e52:	bf00      	nop
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bc80      	pop	{r7}
 8005e5a:	4770      	bx	lr

08005e5c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	4603      	mov	r3, r0
 8005e64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005e66:	2300      	movs	r3, #0
 8005e68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005e6a:	79fb      	ldrb	r3, [r7, #7]
 8005e6c:	2b03      	cmp	r3, #3
 8005e6e:	d817      	bhi.n	8005ea0 <USBD_Get_USB_Status+0x44>
 8005e70:	a201      	add	r2, pc, #4	; (adr r2, 8005e78 <USBD_Get_USB_Status+0x1c>)
 8005e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e76:	bf00      	nop
 8005e78:	08005e89 	.word	0x08005e89
 8005e7c:	08005e8f 	.word	0x08005e8f
 8005e80:	08005e95 	.word	0x08005e95
 8005e84:	08005e9b 	.word	0x08005e9b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	73fb      	strb	r3, [r7, #15]
    break;
 8005e8c:	e00b      	b.n	8005ea6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005e8e:	2302      	movs	r3, #2
 8005e90:	73fb      	strb	r3, [r7, #15]
    break;
 8005e92:	e008      	b.n	8005ea6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005e94:	2301      	movs	r3, #1
 8005e96:	73fb      	strb	r3, [r7, #15]
    break;
 8005e98:	e005      	b.n	8005ea6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	73fb      	strb	r3, [r7, #15]
    break;
 8005e9e:	e002      	b.n	8005ea6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	73fb      	strb	r3, [r7, #15]
    break;
 8005ea4:	bf00      	nop
  }
  return usb_status;
 8005ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3714      	adds	r7, #20
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bc80      	pop	{r7}
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop

08005eb4 <__libc_init_array>:
 8005eb4:	b570      	push	{r4, r5, r6, lr}
 8005eb6:	2500      	movs	r5, #0
 8005eb8:	4e0c      	ldr	r6, [pc, #48]	; (8005eec <__libc_init_array+0x38>)
 8005eba:	4c0d      	ldr	r4, [pc, #52]	; (8005ef0 <__libc_init_array+0x3c>)
 8005ebc:	1ba4      	subs	r4, r4, r6
 8005ebe:	10a4      	asrs	r4, r4, #2
 8005ec0:	42a5      	cmp	r5, r4
 8005ec2:	d109      	bne.n	8005ed8 <__libc_init_array+0x24>
 8005ec4:	f000 f82e 	bl	8005f24 <_init>
 8005ec8:	2500      	movs	r5, #0
 8005eca:	4e0a      	ldr	r6, [pc, #40]	; (8005ef4 <__libc_init_array+0x40>)
 8005ecc:	4c0a      	ldr	r4, [pc, #40]	; (8005ef8 <__libc_init_array+0x44>)
 8005ece:	1ba4      	subs	r4, r4, r6
 8005ed0:	10a4      	asrs	r4, r4, #2
 8005ed2:	42a5      	cmp	r5, r4
 8005ed4:	d105      	bne.n	8005ee2 <__libc_init_array+0x2e>
 8005ed6:	bd70      	pop	{r4, r5, r6, pc}
 8005ed8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005edc:	4798      	blx	r3
 8005ede:	3501      	adds	r5, #1
 8005ee0:	e7ee      	b.n	8005ec0 <__libc_init_array+0xc>
 8005ee2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ee6:	4798      	blx	r3
 8005ee8:	3501      	adds	r5, #1
 8005eea:	e7f2      	b.n	8005ed2 <__libc_init_array+0x1e>
 8005eec:	08005f88 	.word	0x08005f88
 8005ef0:	08005f88 	.word	0x08005f88
 8005ef4:	08005f88 	.word	0x08005f88
 8005ef8:	08005f8c 	.word	0x08005f8c

08005efc <memcpy>:
 8005efc:	b510      	push	{r4, lr}
 8005efe:	1e43      	subs	r3, r0, #1
 8005f00:	440a      	add	r2, r1
 8005f02:	4291      	cmp	r1, r2
 8005f04:	d100      	bne.n	8005f08 <memcpy+0xc>
 8005f06:	bd10      	pop	{r4, pc}
 8005f08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f10:	e7f7      	b.n	8005f02 <memcpy+0x6>

08005f12 <memset>:
 8005f12:	4603      	mov	r3, r0
 8005f14:	4402      	add	r2, r0
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d100      	bne.n	8005f1c <memset+0xa>
 8005f1a:	4770      	bx	lr
 8005f1c:	f803 1b01 	strb.w	r1, [r3], #1
 8005f20:	e7f9      	b.n	8005f16 <memset+0x4>
	...

08005f24 <_init>:
 8005f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f26:	bf00      	nop
 8005f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f2a:	bc08      	pop	{r3}
 8005f2c:	469e      	mov	lr, r3
 8005f2e:	4770      	bx	lr

08005f30 <_fini>:
 8005f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f32:	bf00      	nop
 8005f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f36:	bc08      	pop	{r3}
 8005f38:	469e      	mov	lr, r3
 8005f3a:	4770      	bx	lr
