
STM32F103C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b28  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08005c34  08005c34  00015c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c80  08005c80  00020188  2**0
                  CONTENTS
  4 .ARM          00000000  08005c80  08005c80  00020188  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c80  08005c80  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c80  08005c80  00015c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c84  08005c84  00015c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  08005c88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001230  20000188  08005e10  00020188  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013b8  08005e10  000213b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f69  00000000  00000000  000201b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003187  00000000  00000000  0003611a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010f8  00000000  00000000  000392a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f90  00000000  00000000  0003a3a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001710f  00000000  00000000  0003b330  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fe12  00000000  00000000  0005243f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000734d5  00000000  00000000  00062251  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d5726  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045a8  00000000  00000000  000d57a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000188 	.word	0x20000188
 8000128:	00000000 	.word	0x00000000
 800012c:	08005c1c 	.word	0x08005c1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000018c 	.word	0x2000018c
 8000148:	08005c1c 	.word	0x08005c1c

0800014c <loop_user_call>:
.DataBits=8,
.IsUpdate=0
};

void loop_user_call()//在Main函数里循环调用此函数
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if(linecode.IsUpdate)
 8000150:	4b05      	ldr	r3, [pc, #20]	; (8000168 <loop_user_call+0x1c>)
 8000152:	7a1b      	ldrb	r3, [r3, #8]
 8000154:	2b00      	cmp	r3, #0
 8000156:	d005      	beq.n	8000164 <loop_user_call+0x18>
	{
		HAL_Delay(20);//延时20ms设置通信参数
 8000158:	2014      	movs	r0, #20
 800015a:	f000 fb2d 	bl	80007b8 <HAL_Delay>

		linecode.IsUpdate=0;
 800015e:	4b02      	ldr	r3, [pc, #8]	; (8000168 <loop_user_call+0x1c>)
 8000160:	2200      	movs	r2, #0
 8000162:	721a      	strb	r2, [r3, #8]
	}
}
 8000164:	bf00      	nop
 8000166:	bd80      	pop	{r7, pc}
 8000168:	20000000 	.word	0x20000000

0800016c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800016c:	b580      	push	{r7, lr}
 800016e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000170:	f000 fac0 	bl	80006f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000174:	f000 f80d 	bl	8000192 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000178:	f000 f902 	bl	8000380 <MX_GPIO_Init>
  MX_I2C1_Init();
 800017c:	f000 f860 	bl	8000240 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000180:	f000 f89e 	bl	80002c0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000184:	f000 f8d2 	bl	800032c <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000188:	f005 f88a 	bl	80052a0 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_user_call();
 800018c:	f7ff ffde 	bl	800014c <loop_user_call>
 8000190:	e7fc      	b.n	800018c <main+0x20>

08000192 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000192:	b580      	push	{r7, lr}
 8000194:	b094      	sub	sp, #80	; 0x50
 8000196:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000198:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800019c:	2228      	movs	r2, #40	; 0x28
 800019e:	2100      	movs	r1, #0
 80001a0:	4618      	mov	r0, r3
 80001a2:	f005 fd32 	bl	8005c0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a6:	f107 0314 	add.w	r3, r7, #20
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]
 80001ae:	605a      	str	r2, [r3, #4]
 80001b0:	609a      	str	r2, [r3, #8]
 80001b2:	60da      	str	r2, [r3, #12]
 80001b4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001b6:	1d3b      	adds	r3, r7, #4
 80001b8:	2200      	movs	r2, #0
 80001ba:	601a      	str	r2, [r3, #0]
 80001bc:	605a      	str	r2, [r3, #4]
 80001be:	609a      	str	r2, [r3, #8]
 80001c0:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001c2:	2302      	movs	r3, #2
 80001c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c6:	2301      	movs	r3, #1
 80001c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ca:	2310      	movs	r3, #16
 80001cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ce:	2302      	movs	r3, #2
 80001d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001d2:	2300      	movs	r3, #0
 80001d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80001d6:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 80001da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001e0:	4618      	mov	r0, r3
 80001e2:	f001 fd7d 	bl	8001ce0 <HAL_RCC_OscConfig>
 80001e6:	4603      	mov	r3, r0
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d001      	beq.n	80001f0 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80001ec:	f000 f8ea 	bl	80003c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f0:	230f      	movs	r3, #15
 80001f2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001f4:	2302      	movs	r3, #2
 80001f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f8:	2300      	movs	r3, #0
 80001fa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000200:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000206:	f107 0314 	add.w	r3, r7, #20
 800020a:	2101      	movs	r1, #1
 800020c:	4618      	mov	r0, r3
 800020e:	f001 ffe7 	bl	80021e0 <HAL_RCC_ClockConfig>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d001      	beq.n	800021c <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000218:	f000 f8d4 	bl	80003c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800021c:	2310      	movs	r3, #16
 800021e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000220:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000224:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f002 f975 	bl	8002518 <HAL_RCCEx_PeriphCLKConfig>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d001      	beq.n	8000238 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000234:	f000 f8c6 	bl	80003c4 <Error_Handler>
  }
}
 8000238:	bf00      	nop
 800023a:	3750      	adds	r7, #80	; 0x50
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}

08000240 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  __HAL_RCC_I2C1_CLK_ENABLE();
 8000246:	4b1a      	ldr	r3, [pc, #104]	; (80002b0 <MX_I2C1_Init+0x70>)
 8000248:	69db      	ldr	r3, [r3, #28]
 800024a:	4a19      	ldr	r2, [pc, #100]	; (80002b0 <MX_I2C1_Init+0x70>)
 800024c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000250:	61d3      	str	r3, [r2, #28]
 8000252:	4b17      	ldr	r3, [pc, #92]	; (80002b0 <MX_I2C1_Init+0x70>)
 8000254:	69db      	ldr	r3, [r3, #28]
 8000256:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800025a:	607b      	str	r3, [r7, #4]
 800025c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800025e:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <MX_I2C1_Init+0x74>)
 8000260:	4a15      	ldr	r2, [pc, #84]	; (80002b8 <MX_I2C1_Init+0x78>)
 8000262:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000264:	4b13      	ldr	r3, [pc, #76]	; (80002b4 <MX_I2C1_Init+0x74>)
 8000266:	4a15      	ldr	r2, [pc, #84]	; (80002bc <MX_I2C1_Init+0x7c>)
 8000268:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800026a:	4b12      	ldr	r3, [pc, #72]	; (80002b4 <MX_I2C1_Init+0x74>)
 800026c:	2200      	movs	r2, #0
 800026e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000270:	4b10      	ldr	r3, [pc, #64]	; (80002b4 <MX_I2C1_Init+0x74>)
 8000272:	2200      	movs	r2, #0
 8000274:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000276:	4b0f      	ldr	r3, [pc, #60]	; (80002b4 <MX_I2C1_Init+0x74>)
 8000278:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800027c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800027e:	4b0d      	ldr	r3, [pc, #52]	; (80002b4 <MX_I2C1_Init+0x74>)
 8000280:	2200      	movs	r2, #0
 8000282:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000284:	4b0b      	ldr	r3, [pc, #44]	; (80002b4 <MX_I2C1_Init+0x74>)
 8000286:	2200      	movs	r2, #0
 8000288:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800028a:	4b0a      	ldr	r3, [pc, #40]	; (80002b4 <MX_I2C1_Init+0x74>)
 800028c:	2200      	movs	r2, #0
 800028e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000290:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <MX_I2C1_Init+0x74>)
 8000292:	2200      	movs	r2, #0
 8000294:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000296:	4807      	ldr	r0, [pc, #28]	; (80002b4 <MX_I2C1_Init+0x74>)
 8000298:	f000 fd18 	bl	8000ccc <HAL_I2C_Init>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <MX_I2C1_Init+0x66>
  {
    Error_Handler();
 80002a2:	f000 f88f 	bl	80003c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002a6:	bf00      	nop
 80002a8:	3708      	adds	r7, #8
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	40021000 	.word	0x40021000
 80002b4:	200003c8 	.word	0x200003c8
 80002b8:	40005400 	.word	0x40005400
 80002bc:	000186a0 	.word	0x000186a0

080002c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002c4:	4b17      	ldr	r3, [pc, #92]	; (8000324 <MX_SPI1_Init+0x64>)
 80002c6:	4a18      	ldr	r2, [pc, #96]	; (8000328 <MX_SPI1_Init+0x68>)
 80002c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002ca:	4b16      	ldr	r3, [pc, #88]	; (8000324 <MX_SPI1_Init+0x64>)
 80002cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002d2:	4b14      	ldr	r3, [pc, #80]	; (8000324 <MX_SPI1_Init+0x64>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002d8:	4b12      	ldr	r3, [pc, #72]	; (8000324 <MX_SPI1_Init+0x64>)
 80002da:	2200      	movs	r2, #0
 80002dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002de:	4b11      	ldr	r3, [pc, #68]	; (8000324 <MX_SPI1_Init+0x64>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002e4:	4b0f      	ldr	r3, [pc, #60]	; (8000324 <MX_SPI1_Init+0x64>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80002ea:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <MX_SPI1_Init+0x64>)
 80002ec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80002f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80002f2:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <MX_SPI1_Init+0x64>)
 80002f4:	2220      	movs	r2, #32
 80002f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002f8:	4b0a      	ldr	r3, [pc, #40]	; (8000324 <MX_SPI1_Init+0x64>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002fe:	4b09      	ldr	r3, [pc, #36]	; (8000324 <MX_SPI1_Init+0x64>)
 8000300:	2200      	movs	r2, #0
 8000302:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000304:	4b07      	ldr	r3, [pc, #28]	; (8000324 <MX_SPI1_Init+0x64>)
 8000306:	2200      	movs	r2, #0
 8000308:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800030a:	4b06      	ldr	r3, [pc, #24]	; (8000324 <MX_SPI1_Init+0x64>)
 800030c:	220a      	movs	r2, #10
 800030e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000310:	4804      	ldr	r0, [pc, #16]	; (8000324 <MX_SPI1_Init+0x64>)
 8000312:	f002 f9b7 	bl	8002684 <HAL_SPI_Init>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800031c:	f000 f852 	bl	80003c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}
 8000324:	2000041c 	.word	0x2000041c
 8000328:	40013000 	.word	0x40013000

0800032c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000330:	4b11      	ldr	r3, [pc, #68]	; (8000378 <MX_USART2_UART_Init+0x4c>)
 8000332:	4a12      	ldr	r2, [pc, #72]	; (800037c <MX_USART2_UART_Init+0x50>)
 8000334:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000336:	4b10      	ldr	r3, [pc, #64]	; (8000378 <MX_USART2_UART_Init+0x4c>)
 8000338:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800033c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800033e:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <MX_USART2_UART_Init+0x4c>)
 8000340:	2200      	movs	r2, #0
 8000342:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000344:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <MX_USART2_UART_Init+0x4c>)
 8000346:	2200      	movs	r2, #0
 8000348:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800034a:	4b0b      	ldr	r3, [pc, #44]	; (8000378 <MX_USART2_UART_Init+0x4c>)
 800034c:	2200      	movs	r2, #0
 800034e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000350:	4b09      	ldr	r3, [pc, #36]	; (8000378 <MX_USART2_UART_Init+0x4c>)
 8000352:	220c      	movs	r2, #12
 8000354:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000356:	4b08      	ldr	r3, [pc, #32]	; (8000378 <MX_USART2_UART_Init+0x4c>)
 8000358:	f44f 7240 	mov.w	r2, #768	; 0x300
 800035c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800035e:	4b06      	ldr	r3, [pc, #24]	; (8000378 <MX_USART2_UART_Init+0x4c>)
 8000360:	2200      	movs	r2, #0
 8000362:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000364:	4804      	ldr	r0, [pc, #16]	; (8000378 <MX_USART2_UART_Init+0x4c>)
 8000366:	f002 f9ee 	bl	8002746 <HAL_UART_Init>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8000370:	f000 f828 	bl	80003c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	20000474 	.word	0x20000474
 800037c:	40004400 	.word	0x40004400

08000380 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000386:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <MX_GPIO_Init+0x40>)
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	4a0d      	ldr	r2, [pc, #52]	; (80003c0 <MX_GPIO_Init+0x40>)
 800038c:	f043 0304 	orr.w	r3, r3, #4
 8000390:	6193      	str	r3, [r2, #24]
 8000392:	4b0b      	ldr	r3, [pc, #44]	; (80003c0 <MX_GPIO_Init+0x40>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	f003 0304 	and.w	r3, r3, #4
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800039e:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <MX_GPIO_Init+0x40>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	4a07      	ldr	r2, [pc, #28]	; (80003c0 <MX_GPIO_Init+0x40>)
 80003a4:	f043 0308 	orr.w	r3, r3, #8
 80003a8:	6193      	str	r3, [r2, #24]
 80003aa:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <MX_GPIO_Init+0x40>)
 80003ac:	699b      	ldr	r3, [r3, #24]
 80003ae:	f003 0308 	and.w	r3, r3, #8
 80003b2:	603b      	str	r3, [r7, #0]
 80003b4:	683b      	ldr	r3, [r7, #0]

}
 80003b6:	bf00      	nop
 80003b8:	370c      	adds	r7, #12
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr
 80003c0:	40021000 	.word	0x40021000

080003c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr

080003d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003d6:	4b15      	ldr	r3, [pc, #84]	; (800042c <HAL_MspInit+0x5c>)
 80003d8:	699b      	ldr	r3, [r3, #24]
 80003da:	4a14      	ldr	r2, [pc, #80]	; (800042c <HAL_MspInit+0x5c>)
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	6193      	str	r3, [r2, #24]
 80003e2:	4b12      	ldr	r3, [pc, #72]	; (800042c <HAL_MspInit+0x5c>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	f003 0301 	and.w	r3, r3, #1
 80003ea:	60bb      	str	r3, [r7, #8]
 80003ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ee:	4b0f      	ldr	r3, [pc, #60]	; (800042c <HAL_MspInit+0x5c>)
 80003f0:	69db      	ldr	r3, [r3, #28]
 80003f2:	4a0e      	ldr	r2, [pc, #56]	; (800042c <HAL_MspInit+0x5c>)
 80003f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003f8:	61d3      	str	r3, [r2, #28]
 80003fa:	4b0c      	ldr	r3, [pc, #48]	; (800042c <HAL_MspInit+0x5c>)
 80003fc:	69db      	ldr	r3, [r3, #28]
 80003fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000406:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <HAL_MspInit+0x60>)
 8000408:	685b      	ldr	r3, [r3, #4]
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	4a04      	ldr	r2, [pc, #16]	; (8000430 <HAL_MspInit+0x60>)
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000422:	bf00      	nop
 8000424:	3714      	adds	r7, #20
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr
 800042c:	40021000 	.word	0x40021000
 8000430:	40010000 	.word	0x40010000

08000434 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b088      	sub	sp, #32
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043c:	f107 0310 	add.w	r3, r7, #16
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
 8000444:	605a      	str	r2, [r3, #4]
 8000446:	609a      	str	r2, [r3, #8]
 8000448:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4a15      	ldr	r2, [pc, #84]	; (80004a4 <HAL_I2C_MspInit+0x70>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d123      	bne.n	800049c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000454:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <HAL_I2C_MspInit+0x74>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a13      	ldr	r2, [pc, #76]	; (80004a8 <HAL_I2C_MspInit+0x74>)
 800045a:	f043 0308 	orr.w	r3, r3, #8
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <HAL_I2C_MspInit+0x74>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f003 0308 	and.w	r3, r3, #8
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800046c:	23c0      	movs	r3, #192	; 0xc0
 800046e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000470:	2312      	movs	r3, #18
 8000472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000474:	2303      	movs	r3, #3
 8000476:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000478:	f107 0310 	add.w	r3, r7, #16
 800047c:	4619      	mov	r1, r3
 800047e:	480b      	ldr	r0, [pc, #44]	; (80004ac <HAL_I2C_MspInit+0x78>)
 8000480:	f000 faca 	bl	8000a18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000484:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <HAL_I2C_MspInit+0x74>)
 8000486:	69db      	ldr	r3, [r3, #28]
 8000488:	4a07      	ldr	r2, [pc, #28]	; (80004a8 <HAL_I2C_MspInit+0x74>)
 800048a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800048e:	61d3      	str	r3, [r2, #28]
 8000490:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <HAL_I2C_MspInit+0x74>)
 8000492:	69db      	ldr	r3, [r3, #28]
 8000494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000498:	60bb      	str	r3, [r7, #8]
 800049a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800049c:	bf00      	nop
 800049e:	3720      	adds	r7, #32
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40005400 	.word	0x40005400
 80004a8:	40021000 	.word	0x40021000
 80004ac:	40010c00 	.word	0x40010c00

080004b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b088      	sub	sp, #32
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b8:	f107 0310 	add.w	r3, r7, #16
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
 80004c0:	605a      	str	r2, [r3, #4]
 80004c2:	609a      	str	r2, [r3, #8]
 80004c4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a1b      	ldr	r2, [pc, #108]	; (8000538 <HAL_SPI_MspInit+0x88>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d12f      	bne.n	8000530 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004d0:	4b1a      	ldr	r3, [pc, #104]	; (800053c <HAL_SPI_MspInit+0x8c>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	4a19      	ldr	r2, [pc, #100]	; (800053c <HAL_SPI_MspInit+0x8c>)
 80004d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004da:	6193      	str	r3, [r2, #24]
 80004dc:	4b17      	ldr	r3, [pc, #92]	; (800053c <HAL_SPI_MspInit+0x8c>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004e4:	60fb      	str	r3, [r7, #12]
 80004e6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e8:	4b14      	ldr	r3, [pc, #80]	; (800053c <HAL_SPI_MspInit+0x8c>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	4a13      	ldr	r2, [pc, #76]	; (800053c <HAL_SPI_MspInit+0x8c>)
 80004ee:	f043 0304 	orr.w	r3, r3, #4
 80004f2:	6193      	str	r3, [r2, #24]
 80004f4:	4b11      	ldr	r3, [pc, #68]	; (800053c <HAL_SPI_MspInit+0x8c>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	f003 0304 	and.w	r3, r3, #4
 80004fc:	60bb      	str	r3, [r7, #8]
 80004fe:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000500:	23b0      	movs	r3, #176	; 0xb0
 8000502:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000504:	2302      	movs	r3, #2
 8000506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000508:	2303      	movs	r3, #3
 800050a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050c:	f107 0310 	add.w	r3, r7, #16
 8000510:	4619      	mov	r1, r3
 8000512:	480b      	ldr	r0, [pc, #44]	; (8000540 <HAL_SPI_MspInit+0x90>)
 8000514:	f000 fa80 	bl	8000a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000518:	2340      	movs	r3, #64	; 0x40
 800051a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	2300      	movs	r3, #0
 8000522:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000524:	f107 0310 	add.w	r3, r7, #16
 8000528:	4619      	mov	r1, r3
 800052a:	4805      	ldr	r0, [pc, #20]	; (8000540 <HAL_SPI_MspInit+0x90>)
 800052c:	f000 fa74 	bl	8000a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000530:	bf00      	nop
 8000532:	3720      	adds	r7, #32
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40013000 	.word	0x40013000
 800053c:	40021000 	.word	0x40021000
 8000540:	40010800 	.word	0x40010800

08000544 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054c:	f107 0310 	add.w	r3, r7, #16
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a1b      	ldr	r2, [pc, #108]	; (80005cc <HAL_UART_MspInit+0x88>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d12f      	bne.n	80005c4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000564:	4b1a      	ldr	r3, [pc, #104]	; (80005d0 <HAL_UART_MspInit+0x8c>)
 8000566:	69db      	ldr	r3, [r3, #28]
 8000568:	4a19      	ldr	r2, [pc, #100]	; (80005d0 <HAL_UART_MspInit+0x8c>)
 800056a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800056e:	61d3      	str	r3, [r2, #28]
 8000570:	4b17      	ldr	r3, [pc, #92]	; (80005d0 <HAL_UART_MspInit+0x8c>)
 8000572:	69db      	ldr	r3, [r3, #28]
 8000574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800057c:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <HAL_UART_MspInit+0x8c>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a13      	ldr	r2, [pc, #76]	; (80005d0 <HAL_UART_MspInit+0x8c>)
 8000582:	f043 0304 	orr.w	r3, r3, #4
 8000586:	6193      	str	r3, [r2, #24]
 8000588:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <HAL_UART_MspInit+0x8c>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	f003 0304 	and.w	r3, r3, #4
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> USART2_CTS
    PA1     ------> USART2_RTS
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000594:	2309      	movs	r3, #9
 8000596:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a0:	f107 0310 	add.w	r3, r7, #16
 80005a4:	4619      	mov	r1, r3
 80005a6:	480b      	ldr	r0, [pc, #44]	; (80005d4 <HAL_UART_MspInit+0x90>)
 80005a8:	f000 fa36 	bl	8000a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80005ac:	2306      	movs	r3, #6
 80005ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b0:	2302      	movs	r3, #2
 80005b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005b4:	2303      	movs	r3, #3
 80005b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b8:	f107 0310 	add.w	r3, r7, #16
 80005bc:	4619      	mov	r1, r3
 80005be:	4805      	ldr	r0, [pc, #20]	; (80005d4 <HAL_UART_MspInit+0x90>)
 80005c0:	f000 fa2a 	bl	8000a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005c4:	bf00      	nop
 80005c6:	3720      	adds	r7, #32
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40004400 	.word	0x40004400
 80005d0:	40021000 	.word	0x40021000
 80005d4:	40010800 	.word	0x40010800

080005d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr

080005e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <HardFault_Handler+0x4>

080005ea <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005ee:	e7fe      	b.n	80005ee <MemManage_Handler+0x4>

080005f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <BusFault_Handler+0x4>

080005f6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005fa:	e7fe      	b.n	80005fa <UsageFault_Handler+0x4>

080005fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr

08000608 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr

08000614 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr

08000620 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000624:	f000 f8ac 	bl	8000780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}

0800062c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000630:	4802      	ldr	r0, [pc, #8]	; (800063c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000632:	f000 fd7a 	bl	800112a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	2000114c 	.word	0x2000114c

08000640 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000644:	4b15      	ldr	r3, [pc, #84]	; (800069c <SystemInit+0x5c>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a14      	ldr	r2, [pc, #80]	; (800069c <SystemInit+0x5c>)
 800064a:	f043 0301 	orr.w	r3, r3, #1
 800064e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <SystemInit+0x5c>)
 8000652:	685a      	ldr	r2, [r3, #4]
 8000654:	4911      	ldr	r1, [pc, #68]	; (800069c <SystemInit+0x5c>)
 8000656:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <SystemInit+0x60>)
 8000658:	4013      	ands	r3, r2
 800065a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <SystemInit+0x5c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a0e      	ldr	r2, [pc, #56]	; (800069c <SystemInit+0x5c>)
 8000662:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800066a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800066c:	4b0b      	ldr	r3, [pc, #44]	; (800069c <SystemInit+0x5c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a0a      	ldr	r2, [pc, #40]	; (800069c <SystemInit+0x5c>)
 8000672:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000676:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <SystemInit+0x5c>)
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	4a07      	ldr	r2, [pc, #28]	; (800069c <SystemInit+0x5c>)
 800067e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000682:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000684:	4b05      	ldr	r3, [pc, #20]	; (800069c <SystemInit+0x5c>)
 8000686:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800068a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800068c:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <SystemInit+0x64>)
 800068e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000692:	609a      	str	r2, [r3, #8]
#endif 
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr
 800069c:	40021000 	.word	0x40021000
 80006a0:	f8ff0000 	.word	0xf8ff0000
 80006a4:	e000ed00 	.word	0xe000ed00

080006a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80006a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80006aa:	e003      	b.n	80006b4 <LoopCopyDataInit>

080006ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80006ac:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80006ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80006b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80006b2:	3104      	adds	r1, #4

080006b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006b4:	480a      	ldr	r0, [pc, #40]	; (80006e0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80006b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006bc:	d3f6      	bcc.n	80006ac <CopyDataInit>
  ldr r2, =_sbss
 80006be:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80006c0:	e002      	b.n	80006c8 <LoopFillZerobss>

080006c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80006c4:	f842 3b04 	str.w	r3, [r2], #4

080006c8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80006c8:	4b08      	ldr	r3, [pc, #32]	; (80006ec <LoopFillZerobss+0x24>)
  cmp r2, r3
 80006ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006cc:	d3f9      	bcc.n	80006c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006ce:	f7ff ffb7 	bl	8000640 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006d2:	f005 fa6b 	bl	8005bac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006d6:	f7ff fd49 	bl	800016c <main>
  bx lr
 80006da:	4770      	bx	lr
  ldr r3, =_sidata
 80006dc:	08005c88 	.word	0x08005c88
  ldr r0, =_sdata
 80006e0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80006e4:	20000188 	.word	0x20000188
  ldr r2, =_sbss
 80006e8:	20000188 	.word	0x20000188
  ldr r3, = _ebss
 80006ec:	200013b8 	.word	0x200013b8

080006f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f0:	e7fe      	b.n	80006f0 <ADC1_2_IRQHandler>
	...

080006f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f8:	4b08      	ldr	r3, [pc, #32]	; (800071c <HAL_Init+0x28>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a07      	ldr	r2, [pc, #28]	; (800071c <HAL_Init+0x28>)
 80006fe:	f043 0310 	orr.w	r3, r3, #16
 8000702:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000704:	2003      	movs	r0, #3
 8000706:	f000 f945 	bl	8000994 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800070a:	2000      	movs	r0, #0
 800070c:	f000 f808 	bl	8000720 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000710:	f7ff fe5e 	bl	80003d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000714:	2300      	movs	r3, #0
}
 8000716:	4618      	mov	r0, r3
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40022000 	.word	0x40022000

08000720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <HAL_InitTick+0x54>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <HAL_InitTick+0x58>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	4619      	mov	r1, r3
 8000732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000736:	fbb3 f3f1 	udiv	r3, r3, r1
 800073a:	fbb2 f3f3 	udiv	r3, r2, r3
 800073e:	4618      	mov	r0, r3
 8000740:	f000 f95d 	bl	80009fe <HAL_SYSTICK_Config>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800074a:	2301      	movs	r3, #1
 800074c:	e00e      	b.n	800076c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2b0f      	cmp	r3, #15
 8000752:	d80a      	bhi.n	800076a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000754:	2200      	movs	r2, #0
 8000756:	6879      	ldr	r1, [r7, #4]
 8000758:	f04f 30ff 	mov.w	r0, #4294967295
 800075c:	f000 f925 	bl	80009aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000760:	4a06      	ldr	r2, [pc, #24]	; (800077c <HAL_InitTick+0x5c>)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000766:	2300      	movs	r3, #0
 8000768:	e000      	b.n	800076c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800076a:	2301      	movs	r3, #1
}
 800076c:	4618      	mov	r0, r3
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	2000000c 	.word	0x2000000c
 8000778:	20000014 	.word	0x20000014
 800077c:	20000010 	.word	0x20000010

08000780 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <HAL_IncTick+0x1c>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	461a      	mov	r2, r3
 800078a:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <HAL_IncTick+0x20>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4413      	add	r3, r2
 8000790:	4a03      	ldr	r2, [pc, #12]	; (80007a0 <HAL_IncTick+0x20>)
 8000792:	6013      	str	r3, [r2, #0]
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr
 800079c:	20000014 	.word	0x20000014
 80007a0:	200004b4 	.word	0x200004b4

080007a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  return uwTick;
 80007a8:	4b02      	ldr	r3, [pc, #8]	; (80007b4 <HAL_GetTick+0x10>)
 80007aa:	681b      	ldr	r3, [r3, #0]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr
 80007b4:	200004b4 	.word	0x200004b4

080007b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007c0:	f7ff fff0 	bl	80007a4 <HAL_GetTick>
 80007c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007d0:	d005      	beq.n	80007de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <HAL_Delay+0x40>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	461a      	mov	r2, r3
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	4413      	add	r3, r2
 80007dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007de:	bf00      	nop
 80007e0:	f7ff ffe0 	bl	80007a4 <HAL_GetTick>
 80007e4:	4602      	mov	r2, r0
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	1ad3      	subs	r3, r2, r3
 80007ea:	68fa      	ldr	r2, [r7, #12]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d8f7      	bhi.n	80007e0 <HAL_Delay+0x28>
  {
  }
}
 80007f0:	bf00      	nop
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000014 	.word	0x20000014

080007fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f003 0307 	and.w	r3, r3, #7
 800080a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <__NVIC_SetPriorityGrouping+0x44>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000812:	68ba      	ldr	r2, [r7, #8]
 8000814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000818:	4013      	ands	r3, r2
 800081a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000824:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800082c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800082e:	4a04      	ldr	r2, [pc, #16]	; (8000840 <__NVIC_SetPriorityGrouping+0x44>)
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	60d3      	str	r3, [r2, #12]
}
 8000834:	bf00      	nop
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000848:	4b04      	ldr	r3, [pc, #16]	; (800085c <__NVIC_GetPriorityGrouping+0x18>)
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	0a1b      	lsrs	r3, r3, #8
 800084e:	f003 0307 	and.w	r3, r3, #7
}
 8000852:	4618      	mov	r0, r3
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800086a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086e:	2b00      	cmp	r3, #0
 8000870:	db0b      	blt.n	800088a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	f003 021f 	and.w	r2, r3, #31
 8000878:	4906      	ldr	r1, [pc, #24]	; (8000894 <__NVIC_EnableIRQ+0x34>)
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	095b      	lsrs	r3, r3, #5
 8000880:	2001      	movs	r0, #1
 8000882:	fa00 f202 	lsl.w	r2, r0, r2
 8000886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr
 8000894:	e000e100 	.word	0xe000e100

08000898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	6039      	str	r1, [r7, #0]
 80008a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	db0a      	blt.n	80008c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	490c      	ldr	r1, [pc, #48]	; (80008e4 <__NVIC_SetPriority+0x4c>)
 80008b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b6:	0112      	lsls	r2, r2, #4
 80008b8:	b2d2      	uxtb	r2, r2
 80008ba:	440b      	add	r3, r1
 80008bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008c0:	e00a      	b.n	80008d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	4908      	ldr	r1, [pc, #32]	; (80008e8 <__NVIC_SetPriority+0x50>)
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	f003 030f 	and.w	r3, r3, #15
 80008ce:	3b04      	subs	r3, #4
 80008d0:	0112      	lsls	r2, r2, #4
 80008d2:	b2d2      	uxtb	r2, r2
 80008d4:	440b      	add	r3, r1
 80008d6:	761a      	strb	r2, [r3, #24]
}
 80008d8:	bf00      	nop
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000e100 	.word	0xe000e100
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b089      	sub	sp, #36	; 0x24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	f003 0307 	and.w	r3, r3, #7
 80008fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	f1c3 0307 	rsb	r3, r3, #7
 8000906:	2b04      	cmp	r3, #4
 8000908:	bf28      	it	cs
 800090a:	2304      	movcs	r3, #4
 800090c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	3304      	adds	r3, #4
 8000912:	2b06      	cmp	r3, #6
 8000914:	d902      	bls.n	800091c <NVIC_EncodePriority+0x30>
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	3b03      	subs	r3, #3
 800091a:	e000      	b.n	800091e <NVIC_EncodePriority+0x32>
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000920:	f04f 32ff 	mov.w	r2, #4294967295
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	43da      	mvns	r2, r3
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	401a      	ands	r2, r3
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000934:	f04f 31ff 	mov.w	r1, #4294967295
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	fa01 f303 	lsl.w	r3, r1, r3
 800093e:	43d9      	mvns	r1, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000944:	4313      	orrs	r3, r2
         );
}
 8000946:	4618      	mov	r0, r3
 8000948:	3724      	adds	r7, #36	; 0x24
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr

08000950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3b01      	subs	r3, #1
 800095c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000960:	d301      	bcc.n	8000966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000962:	2301      	movs	r3, #1
 8000964:	e00f      	b.n	8000986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000966:	4a0a      	ldr	r2, [pc, #40]	; (8000990 <SysTick_Config+0x40>)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3b01      	subs	r3, #1
 800096c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800096e:	210f      	movs	r1, #15
 8000970:	f04f 30ff 	mov.w	r0, #4294967295
 8000974:	f7ff ff90 	bl	8000898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <SysTick_Config+0x40>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800097e:	4b04      	ldr	r3, [pc, #16]	; (8000990 <SysTick_Config+0x40>)
 8000980:	2207      	movs	r2, #7
 8000982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	e000e010 	.word	0xe000e010

08000994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f7ff ff2d 	bl	80007fc <__NVIC_SetPriorityGrouping>
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b086      	sub	sp, #24
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	4603      	mov	r3, r0
 80009b2:	60b9      	str	r1, [r7, #8]
 80009b4:	607a      	str	r2, [r7, #4]
 80009b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009bc:	f7ff ff42 	bl	8000844 <__NVIC_GetPriorityGrouping>
 80009c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	68b9      	ldr	r1, [r7, #8]
 80009c6:	6978      	ldr	r0, [r7, #20]
 80009c8:	f7ff ff90 	bl	80008ec <NVIC_EncodePriority>
 80009cc:	4602      	mov	r2, r0
 80009ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009d2:	4611      	mov	r1, r2
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff ff5f 	bl	8000898 <__NVIC_SetPriority>
}
 80009da:	bf00      	nop
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b082      	sub	sp, #8
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	4603      	mov	r3, r0
 80009ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff35 	bl	8000860 <__NVIC_EnableIRQ>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f7ff ffa2 	bl	8000950 <SysTick_Config>
 8000a0c:	4603      	mov	r3, r0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b08b      	sub	sp, #44	; 0x2c
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a2a:	e127      	b.n	8000c7c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	69fa      	ldr	r2, [r7, #28]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a40:	69ba      	ldr	r2, [r7, #24]
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	f040 8116 	bne.w	8000c76 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	2b12      	cmp	r3, #18
 8000a50:	d034      	beq.n	8000abc <HAL_GPIO_Init+0xa4>
 8000a52:	2b12      	cmp	r3, #18
 8000a54:	d80d      	bhi.n	8000a72 <HAL_GPIO_Init+0x5a>
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	d02b      	beq.n	8000ab2 <HAL_GPIO_Init+0x9a>
 8000a5a:	2b02      	cmp	r3, #2
 8000a5c:	d804      	bhi.n	8000a68 <HAL_GPIO_Init+0x50>
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d031      	beq.n	8000ac6 <HAL_GPIO_Init+0xae>
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d01c      	beq.n	8000aa0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a66:	e048      	b.n	8000afa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a68:	2b03      	cmp	r3, #3
 8000a6a:	d043      	beq.n	8000af4 <HAL_GPIO_Init+0xdc>
 8000a6c:	2b11      	cmp	r3, #17
 8000a6e:	d01b      	beq.n	8000aa8 <HAL_GPIO_Init+0x90>
          break;
 8000a70:	e043      	b.n	8000afa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a72:	4a89      	ldr	r2, [pc, #548]	; (8000c98 <HAL_GPIO_Init+0x280>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d026      	beq.n	8000ac6 <HAL_GPIO_Init+0xae>
 8000a78:	4a87      	ldr	r2, [pc, #540]	; (8000c98 <HAL_GPIO_Init+0x280>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d806      	bhi.n	8000a8c <HAL_GPIO_Init+0x74>
 8000a7e:	4a87      	ldr	r2, [pc, #540]	; (8000c9c <HAL_GPIO_Init+0x284>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d020      	beq.n	8000ac6 <HAL_GPIO_Init+0xae>
 8000a84:	4a86      	ldr	r2, [pc, #536]	; (8000ca0 <HAL_GPIO_Init+0x288>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d01d      	beq.n	8000ac6 <HAL_GPIO_Init+0xae>
          break;
 8000a8a:	e036      	b.n	8000afa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a8c:	4a85      	ldr	r2, [pc, #532]	; (8000ca4 <HAL_GPIO_Init+0x28c>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d019      	beq.n	8000ac6 <HAL_GPIO_Init+0xae>
 8000a92:	4a85      	ldr	r2, [pc, #532]	; (8000ca8 <HAL_GPIO_Init+0x290>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d016      	beq.n	8000ac6 <HAL_GPIO_Init+0xae>
 8000a98:	4a84      	ldr	r2, [pc, #528]	; (8000cac <HAL_GPIO_Init+0x294>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d013      	beq.n	8000ac6 <HAL_GPIO_Init+0xae>
          break;
 8000a9e:	e02c      	b.n	8000afa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	623b      	str	r3, [r7, #32]
          break;
 8000aa6:	e028      	b.n	8000afa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	3304      	adds	r3, #4
 8000aae:	623b      	str	r3, [r7, #32]
          break;
 8000ab0:	e023      	b.n	8000afa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	68db      	ldr	r3, [r3, #12]
 8000ab6:	3308      	adds	r3, #8
 8000ab8:	623b      	str	r3, [r7, #32]
          break;
 8000aba:	e01e      	b.n	8000afa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	330c      	adds	r3, #12
 8000ac2:	623b      	str	r3, [r7, #32]
          break;
 8000ac4:	e019      	b.n	8000afa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d102      	bne.n	8000ad4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ace:	2304      	movs	r3, #4
 8000ad0:	623b      	str	r3, [r7, #32]
          break;
 8000ad2:	e012      	b.n	8000afa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d105      	bne.n	8000ae8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000adc:	2308      	movs	r3, #8
 8000ade:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	69fa      	ldr	r2, [r7, #28]
 8000ae4:	611a      	str	r2, [r3, #16]
          break;
 8000ae6:	e008      	b.n	8000afa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ae8:	2308      	movs	r3, #8
 8000aea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	69fa      	ldr	r2, [r7, #28]
 8000af0:	615a      	str	r2, [r3, #20]
          break;
 8000af2:	e002      	b.n	8000afa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000af4:	2300      	movs	r3, #0
 8000af6:	623b      	str	r3, [r7, #32]
          break;
 8000af8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	2bff      	cmp	r3, #255	; 0xff
 8000afe:	d801      	bhi.n	8000b04 <HAL_GPIO_Init+0xec>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	e001      	b.n	8000b08 <HAL_GPIO_Init+0xf0>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3304      	adds	r3, #4
 8000b08:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	2bff      	cmp	r3, #255	; 0xff
 8000b0e:	d802      	bhi.n	8000b16 <HAL_GPIO_Init+0xfe>
 8000b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	e002      	b.n	8000b1c <HAL_GPIO_Init+0x104>
 8000b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b18:	3b08      	subs	r3, #8
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	210f      	movs	r1, #15
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	401a      	ands	r2, r3
 8000b2e:	6a39      	ldr	r1, [r7, #32]
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	fa01 f303 	lsl.w	r3, r1, r3
 8000b36:	431a      	orrs	r2, r3
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	f000 8096 	beq.w	8000c76 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b4a:	4b59      	ldr	r3, [pc, #356]	; (8000cb0 <HAL_GPIO_Init+0x298>)
 8000b4c:	699b      	ldr	r3, [r3, #24]
 8000b4e:	4a58      	ldr	r2, [pc, #352]	; (8000cb0 <HAL_GPIO_Init+0x298>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6193      	str	r3, [r2, #24]
 8000b56:	4b56      	ldr	r3, [pc, #344]	; (8000cb0 <HAL_GPIO_Init+0x298>)
 8000b58:	699b      	ldr	r3, [r3, #24]
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b62:	4a54      	ldr	r2, [pc, #336]	; (8000cb4 <HAL_GPIO_Init+0x29c>)
 8000b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b66:	089b      	lsrs	r3, r3, #2
 8000b68:	3302      	adds	r3, #2
 8000b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b6e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b72:	f003 0303 	and.w	r3, r3, #3
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	220f      	movs	r2, #15
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	68fa      	ldr	r2, [r7, #12]
 8000b82:	4013      	ands	r3, r2
 8000b84:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4a4b      	ldr	r2, [pc, #300]	; (8000cb8 <HAL_GPIO_Init+0x2a0>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d013      	beq.n	8000bb6 <HAL_GPIO_Init+0x19e>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a4a      	ldr	r2, [pc, #296]	; (8000cbc <HAL_GPIO_Init+0x2a4>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d00d      	beq.n	8000bb2 <HAL_GPIO_Init+0x19a>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a49      	ldr	r2, [pc, #292]	; (8000cc0 <HAL_GPIO_Init+0x2a8>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d007      	beq.n	8000bae <HAL_GPIO_Init+0x196>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4a48      	ldr	r2, [pc, #288]	; (8000cc4 <HAL_GPIO_Init+0x2ac>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d101      	bne.n	8000baa <HAL_GPIO_Init+0x192>
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	e006      	b.n	8000bb8 <HAL_GPIO_Init+0x1a0>
 8000baa:	2304      	movs	r3, #4
 8000bac:	e004      	b.n	8000bb8 <HAL_GPIO_Init+0x1a0>
 8000bae:	2302      	movs	r3, #2
 8000bb0:	e002      	b.n	8000bb8 <HAL_GPIO_Init+0x1a0>
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e000      	b.n	8000bb8 <HAL_GPIO_Init+0x1a0>
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bba:	f002 0203 	and.w	r2, r2, #3
 8000bbe:	0092      	lsls	r2, r2, #2
 8000bc0:	4093      	lsls	r3, r2
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bc8:	493a      	ldr	r1, [pc, #232]	; (8000cb4 <HAL_GPIO_Init+0x29c>)
 8000bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bcc:	089b      	lsrs	r3, r3, #2
 8000bce:	3302      	adds	r3, #2
 8000bd0:	68fa      	ldr	r2, [r7, #12]
 8000bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d006      	beq.n	8000bf0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000be2:	4b39      	ldr	r3, [pc, #228]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	4938      	ldr	r1, [pc, #224]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	600b      	str	r3, [r1, #0]
 8000bee:	e006      	b.n	8000bfe <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bf0:	4b35      	ldr	r3, [pc, #212]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	4933      	ldr	r1, [pc, #204]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d006      	beq.n	8000c18 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c0a:	4b2f      	ldr	r3, [pc, #188]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	492e      	ldr	r1, [pc, #184]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	604b      	str	r3, [r1, #4]
 8000c16:	e006      	b.n	8000c26 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c18:	4b2b      	ldr	r3, [pc, #172]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000c1a:	685a      	ldr	r2, [r3, #4]
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	4929      	ldr	r1, [pc, #164]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000c22:	4013      	ands	r3, r2
 8000c24:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d006      	beq.n	8000c40 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c32:	4b25      	ldr	r3, [pc, #148]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000c34:	689a      	ldr	r2, [r3, #8]
 8000c36:	4924      	ldr	r1, [pc, #144]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	608b      	str	r3, [r1, #8]
 8000c3e:	e006      	b.n	8000c4e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c40:	4b21      	ldr	r3, [pc, #132]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000c42:	689a      	ldr	r2, [r3, #8]
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	43db      	mvns	r3, r3
 8000c48:	491f      	ldr	r1, [pc, #124]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d006      	beq.n	8000c68 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c5a:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000c5c:	68da      	ldr	r2, [r3, #12]
 8000c5e:	491a      	ldr	r1, [pc, #104]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	60cb      	str	r3, [r1, #12]
 8000c66:	e006      	b.n	8000c76 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c68:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000c6a:	68da      	ldr	r2, [r3, #12]
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	4915      	ldr	r1, [pc, #84]	; (8000cc8 <HAL_GPIO_Init+0x2b0>)
 8000c72:	4013      	ands	r3, r2
 8000c74:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c78:	3301      	adds	r3, #1
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c82:	fa22 f303 	lsr.w	r3, r2, r3
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f47f aed0 	bne.w	8000a2c <HAL_GPIO_Init+0x14>
  }
}
 8000c8c:	bf00      	nop
 8000c8e:	372c      	adds	r7, #44	; 0x2c
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	10210000 	.word	0x10210000
 8000c9c:	10110000 	.word	0x10110000
 8000ca0:	10120000 	.word	0x10120000
 8000ca4:	10310000 	.word	0x10310000
 8000ca8:	10320000 	.word	0x10320000
 8000cac:	10220000 	.word	0x10220000
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40010000 	.word	0x40010000
 8000cb8:	40010800 	.word	0x40010800
 8000cbc:	40010c00 	.word	0x40010c00
 8000cc0:	40011000 	.word	0x40011000
 8000cc4:	40011400 	.word	0x40011400
 8000cc8:	40010400 	.word	0x40010400

08000ccc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d101      	bne.n	8000cde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e10f      	b.n	8000efe <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d106      	bne.n	8000cf8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2200      	movs	r2, #0
 8000cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff fb9e 	bl	8000434 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2224      	movs	r2, #36	; 0x24
 8000cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f022 0201 	bic.w	r2, r2, #1
 8000d0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000d10:	f001 fbbc 	bl	800248c <HAL_RCC_GetPCLK1Freq>
 8000d14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	4a7b      	ldr	r2, [pc, #492]	; (8000f08 <HAL_I2C_Init+0x23c>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d807      	bhi.n	8000d30 <HAL_I2C_Init+0x64>
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	4a7a      	ldr	r2, [pc, #488]	; (8000f0c <HAL_I2C_Init+0x240>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	bf94      	ite	ls
 8000d28:	2301      	movls	r3, #1
 8000d2a:	2300      	movhi	r3, #0
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	e006      	b.n	8000d3e <HAL_I2C_Init+0x72>
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	4a77      	ldr	r2, [pc, #476]	; (8000f10 <HAL_I2C_Init+0x244>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	bf94      	ite	ls
 8000d38:	2301      	movls	r3, #1
 8000d3a:	2300      	movhi	r3, #0
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e0db      	b.n	8000efe <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	4a72      	ldr	r2, [pc, #456]	; (8000f14 <HAL_I2C_Init+0x248>)
 8000d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4e:	0c9b      	lsrs	r3, r3, #18
 8000d50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	68ba      	ldr	r2, [r7, #8]
 8000d62:	430a      	orrs	r2, r1
 8000d64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	6a1b      	ldr	r3, [r3, #32]
 8000d6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	4a64      	ldr	r2, [pc, #400]	; (8000f08 <HAL_I2C_Init+0x23c>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d802      	bhi.n	8000d80 <HAL_I2C_Init+0xb4>
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	e009      	b.n	8000d94 <HAL_I2C_Init+0xc8>
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d86:	fb02 f303 	mul.w	r3, r2, r3
 8000d8a:	4a63      	ldr	r2, [pc, #396]	; (8000f18 <HAL_I2C_Init+0x24c>)
 8000d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d90:	099b      	lsrs	r3, r3, #6
 8000d92:	3301      	adds	r3, #1
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	6812      	ldr	r2, [r2, #0]
 8000d98:	430b      	orrs	r3, r1
 8000d9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	69db      	ldr	r3, [r3, #28]
 8000da2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000da6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	4956      	ldr	r1, [pc, #344]	; (8000f08 <HAL_I2C_Init+0x23c>)
 8000db0:	428b      	cmp	r3, r1
 8000db2:	d80d      	bhi.n	8000dd0 <HAL_I2C_Init+0x104>
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	1e59      	subs	r1, r3, #1
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dc8:	2b04      	cmp	r3, #4
 8000dca:	bf38      	it	cc
 8000dcc:	2304      	movcc	r3, #4
 8000dce:	e04f      	b.n	8000e70 <HAL_I2C_Init+0x1a4>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d111      	bne.n	8000dfc <HAL_I2C_Init+0x130>
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	1e58      	subs	r0, r3, #1
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6859      	ldr	r1, [r3, #4]
 8000de0:	460b      	mov	r3, r1
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	440b      	add	r3, r1
 8000de6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dea:	3301      	adds	r3, #1
 8000dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	bf0c      	ite	eq
 8000df4:	2301      	moveq	r3, #1
 8000df6:	2300      	movne	r3, #0
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	e012      	b.n	8000e22 <HAL_I2C_Init+0x156>
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	1e58      	subs	r0, r3, #1
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6859      	ldr	r1, [r3, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	440b      	add	r3, r1
 8000e0a:	0099      	lsls	r1, r3, #2
 8000e0c:	440b      	add	r3, r1
 8000e0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e12:	3301      	adds	r3, #1
 8000e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	bf0c      	ite	eq
 8000e1c:	2301      	moveq	r3, #1
 8000e1e:	2300      	movne	r3, #0
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_I2C_Init+0x15e>
 8000e26:	2301      	movs	r3, #1
 8000e28:	e022      	b.n	8000e70 <HAL_I2C_Init+0x1a4>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d10e      	bne.n	8000e50 <HAL_I2C_Init+0x184>
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	1e58      	subs	r0, r3, #1
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6859      	ldr	r1, [r3, #4]
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	440b      	add	r3, r1
 8000e40:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e44:	3301      	adds	r3, #1
 8000e46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e4e:	e00f      	b.n	8000e70 <HAL_I2C_Init+0x1a4>
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	1e58      	subs	r0, r3, #1
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6859      	ldr	r1, [r3, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	440b      	add	r3, r1
 8000e5e:	0099      	lsls	r1, r3, #2
 8000e60:	440b      	add	r3, r1
 8000e62:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e66:	3301      	adds	r3, #1
 8000e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e70:	6879      	ldr	r1, [r7, #4]
 8000e72:	6809      	ldr	r1, [r1, #0]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	69da      	ldr	r2, [r3, #28]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6a1b      	ldr	r3, [r3, #32]
 8000e8a:	431a      	orrs	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	430a      	orrs	r2, r1
 8000e92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000e9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	6911      	ldr	r1, [r2, #16]
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	68d2      	ldr	r2, [r2, #12]
 8000eaa:	4311      	orrs	r1, r2
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	6812      	ldr	r2, [r2, #0]
 8000eb0:	430b      	orrs	r3, r1
 8000eb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	695a      	ldr	r2, [r3, #20]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f042 0201 	orr.w	r2, r2, #1
 8000ede:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2220      	movs	r2, #32
 8000eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	000186a0 	.word	0x000186a0
 8000f0c:	001e847f 	.word	0x001e847f
 8000f10:	003d08ff 	.word	0x003d08ff
 8000f14:	431bde83 	.word	0x431bde83
 8000f18:	10624dd3 	.word	0x10624dd3

08000f1c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f1e:	b08b      	sub	sp, #44	; 0x2c
 8000f20:	af06      	add	r7, sp, #24
 8000f22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d101      	bne.n	8000f2e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e0d3      	b.n	80010d6 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d106      	bne.n	8000f48 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f004 fb94 	bl	8005670 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f001 fd44 	bl	80029e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	687e      	ldr	r6, [r7, #4]
 8000f62:	466d      	mov	r5, sp
 8000f64:	f106 0410 	add.w	r4, r6, #16
 8000f68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f6c:	6823      	ldr	r3, [r4, #0]
 8000f6e:	602b      	str	r3, [r5, #0]
 8000f70:	1d33      	adds	r3, r6, #4
 8000f72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f74:	6838      	ldr	r0, [r7, #0]
 8000f76:	f001 fd0d 	bl	8002994 <USB_CoreInit>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d005      	beq.n	8000f8c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2202      	movs	r2, #2
 8000f84:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e0a4      	b.n	80010d6 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f001 fd41 	bl	8002a1a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f98:	2300      	movs	r3, #0
 8000f9a:	73fb      	strb	r3, [r7, #15]
 8000f9c:	e035      	b.n	800100a <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	015b      	lsls	r3, r3, #5
 8000fa4:	4413      	add	r3, r2
 8000fa6:	3329      	adds	r3, #41	; 0x29
 8000fa8:	2201      	movs	r2, #1
 8000faa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	015b      	lsls	r3, r3, #5
 8000fb2:	4413      	add	r3, r2
 8000fb4:	3328      	adds	r3, #40	; 0x28
 8000fb6:	7bfa      	ldrb	r2, [r7, #15]
 8000fb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	7bfa      	ldrb	r2, [r7, #15]
 8000fbe:	b291      	uxth	r1, r2
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	015b      	lsls	r3, r3, #5
 8000fc4:	4413      	add	r3, r2
 8000fc6:	3336      	adds	r3, #54	; 0x36
 8000fc8:	460a      	mov	r2, r1
 8000fca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	015b      	lsls	r3, r3, #5
 8000fd2:	4413      	add	r3, r2
 8000fd4:	332b      	adds	r3, #43	; 0x2b
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	015b      	lsls	r3, r3, #5
 8000fe0:	4413      	add	r3, r2
 8000fe2:	3338      	adds	r3, #56	; 0x38
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	015b      	lsls	r3, r3, #5
 8000fee:	4413      	add	r3, r2
 8000ff0:	333c      	adds	r3, #60	; 0x3c
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	015b      	lsls	r3, r3, #5
 8000ffe:	4413      	add	r3, r2
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	3301      	adds	r3, #1
 8001008:	73fb      	strb	r3, [r7, #15]
 800100a:	7bfa      	ldrb	r2, [r7, #15]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	429a      	cmp	r2, r3
 8001012:	d3c4      	bcc.n	8000f9e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001014:	2300      	movs	r3, #0
 8001016:	73fb      	strb	r3, [r7, #15]
 8001018:	e031      	b.n	800107e <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	015b      	lsls	r3, r3, #5
 8001020:	4413      	add	r3, r2
 8001022:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	015b      	lsls	r3, r3, #5
 8001030:	4413      	add	r3, r2
 8001032:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	015b      	lsls	r3, r3, #5
 8001040:	4413      	add	r3, r2
 8001042:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	015b      	lsls	r3, r3, #5
 8001050:	4413      	add	r3, r2
 8001052:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	015b      	lsls	r3, r3, #5
 8001060:	4413      	add	r3, r2
 8001062:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	330a      	adds	r3, #10
 8001070:	015b      	lsls	r3, r3, #5
 8001072:	4413      	add	r3, r2
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	3301      	adds	r3, #1
 800107c:	73fb      	strb	r3, [r7, #15]
 800107e:	7bfa      	ldrb	r2, [r7, #15]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	429a      	cmp	r2, r3
 8001086:	d3c8      	bcc.n	800101a <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	603b      	str	r3, [r7, #0]
 800108e:	687e      	ldr	r6, [r7, #4]
 8001090:	466d      	mov	r5, sp
 8001092:	f106 0410 	add.w	r4, r6, #16
 8001096:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001098:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800109a:	6823      	ldr	r3, [r4, #0]
 800109c:	602b      	str	r3, [r5, #0]
 800109e:	1d33      	adds	r3, r6, #4
 80010a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010a2:	6838      	ldr	r0, [r7, #0]
 80010a4:	f001 fcc5 	bl	8002a32 <USB_DevInit>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d005      	beq.n	80010ba <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2202      	movs	r2, #2
 80010b2:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00d      	b.n	80010d6 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2201      	movs	r2, #1
 80010c6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f002 fd03 	bl	8003ada <USB_DevDisconnect>

  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010de <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d101      	bne.n	80010f4 <HAL_PCD_Start+0x16>
 80010f0:	2302      	movs	r3, #2
 80010f2:	e016      	b.n	8001122 <HAL_PCD_Start+0x44>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2201      	movs	r2, #1
 80010f8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80010fc:	2101      	movs	r1, #1
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f004 fd1d 	bl	8005b3e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f002 fcdc 	bl	8003ac6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4618      	mov	r0, r3
 8001114:	f001 fc4e 	bl	80029b4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f002 fcd9 	bl	8003aee <USB_ReadInterrupts>
 800113c:	4603      	mov	r3, r0
 800113e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001146:	d102      	bne.n	800114e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 faf3 	bl	8001734 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f002 fccb 	bl	8003aee <USB_ReadInterrupts>
 8001158:	4603      	mov	r3, r0
 800115a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800115e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001162:	d112      	bne.n	800118a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800116c:	b29a      	uxth	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001176:	b292      	uxth	r2, r2
 8001178:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f004 faec 	bl	800575a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001182:	2100      	movs	r1, #0
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 f8de 	bl	8001346 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f002 fcad 	bl	8003aee <USB_ReadInterrupts>
 8001194:	4603      	mov	r3, r0
 8001196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800119a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800119e:	d10b      	bne.n	80011b8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80011b2:	b292      	uxth	r2, r2
 80011b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f002 fc96 	bl	8003aee <USB_ReadInterrupts>
 80011c2:	4603      	mov	r3, r0
 80011c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011cc:	d10b      	bne.n	80011e6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80011e0:	b292      	uxth	r2, r2
 80011e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f002 fc7f 	bl	8003aee <USB_ReadInterrupts>
 80011f0:	4603      	mov	r3, r0
 80011f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011fa:	d126      	bne.n	800124a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001204:	b29a      	uxth	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 0204 	bic.w	r2, r2, #4
 800120e:	b292      	uxth	r2, r2
 8001210:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800121c:	b29a      	uxth	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f022 0208 	bic.w	r2, r2, #8
 8001226:	b292      	uxth	r2, r2
 8001228:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f004 facd 	bl	80057cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800123a:	b29a      	uxth	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001244:	b292      	uxth	r2, r2
 8001246:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f002 fc4d 	bl	8003aee <USB_ReadInterrupts>
 8001254:	4603      	mov	r3, r0
 8001256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800125a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800125e:	d13d      	bne.n	80012dc <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001268:	b29a      	uxth	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f042 0208 	orr.w	r2, r2, #8
 8001272:	b292      	uxth	r2, r2
 8001274:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001280:	b29a      	uxth	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800128a:	b292      	uxth	r2, r2
 800128c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001298:	b29a      	uxth	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f042 0204 	orr.w	r2, r2, #4
 80012a2:	b292      	uxth	r2, r2
 80012a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f002 fc1e 	bl	8003aee <USB_ReadInterrupts>
 80012b2:	4603      	mov	r3, r0
 80012b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012bc:	d10b      	bne.n	80012d6 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80012d0:	b292      	uxth	r2, r2
 80012d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f004 fa5e 	bl	8005798 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f002 fc04 	bl	8003aee <USB_ReadInterrupts>
 80012e6:	4603      	mov	r3, r0
 80012e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012f0:	d10e      	bne.n	8001310 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001304:	b292      	uxth	r2, r2
 8001306:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f004 fa17 	bl	800573e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f002 fbea 	bl	8003aee <USB_ReadInterrupts>
 800131a:	4603      	mov	r3, r0
 800131c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001324:	d10b      	bne.n	800133e <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800132e:	b29a      	uxth	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001338:	b292      	uxth	r2, r2
 800133a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	460b      	mov	r3, r1
 8001350:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001358:	2b01      	cmp	r3, #1
 800135a:	d101      	bne.n	8001360 <HAL_PCD_SetAddress+0x1a>
 800135c:	2302      	movs	r3, #2
 800135e:	e013      	b.n	8001388 <HAL_PCD_SetAddress+0x42>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2201      	movs	r2, #1
 8001364:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	78fa      	ldrb	r2, [r7, #3]
 800136c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	78fa      	ldrb	r2, [r7, #3]
 8001376:	4611      	mov	r1, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f002 fb91 	bl	8003aa0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	4608      	mov	r0, r1
 800139a:	4611      	mov	r1, r2
 800139c:	461a      	mov	r2, r3
 800139e:	4603      	mov	r3, r0
 80013a0:	70fb      	strb	r3, [r7, #3]
 80013a2:	460b      	mov	r3, r1
 80013a4:	803b      	strh	r3, [r7, #0]
 80013a6:	4613      	mov	r3, r2
 80013a8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80013ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	da0b      	bge.n	80013ce <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013b6:	78fb      	ldrb	r3, [r7, #3]
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	015b      	lsls	r3, r3, #5
 80013be:	3328      	adds	r3, #40	; 0x28
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	4413      	add	r3, r2
 80013c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2201      	movs	r2, #1
 80013ca:	705a      	strb	r2, [r3, #1]
 80013cc:	e00b      	b.n	80013e6 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013ce:	78fb      	ldrb	r3, [r7, #3]
 80013d0:	f003 0307 	and.w	r3, r3, #7
 80013d4:	015b      	lsls	r3, r3, #5
 80013d6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2200      	movs	r2, #0
 80013e4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80013e6:	78fb      	ldrb	r3, [r7, #3]
 80013e8:	f003 0307 	and.w	r3, r3, #7
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80013f2:	883a      	ldrh	r2, [r7, #0]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	78ba      	ldrb	r2, [r7, #2]
 80013fc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	785b      	ldrb	r3, [r3, #1]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d004      	beq.n	8001410 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	b29a      	uxth	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001410:	78bb      	ldrb	r3, [r7, #2]
 8001412:	2b02      	cmp	r3, #2
 8001414:	d102      	bne.n	800141c <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2200      	movs	r2, #0
 800141a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001422:	2b01      	cmp	r3, #1
 8001424:	d101      	bne.n	800142a <HAL_PCD_EP_Open+0x9a>
 8001426:	2302      	movs	r3, #2
 8001428:	e00e      	b.n	8001448 <HAL_PCD_EP_Open+0xb8>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2201      	movs	r2, #1
 800142e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68f9      	ldr	r1, [r7, #12]
 8001438:	4618      	mov	r0, r3
 800143a:	f001 fb1f 	bl	8002a7c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8001446:	7afb      	ldrb	r3, [r7, #11]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800145c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001460:	2b00      	cmp	r3, #0
 8001462:	da0b      	bge.n	800147c <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001464:	78fb      	ldrb	r3, [r7, #3]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	015b      	lsls	r3, r3, #5
 800146c:	3328      	adds	r3, #40	; 0x28
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2201      	movs	r2, #1
 8001478:	705a      	strb	r2, [r3, #1]
 800147a:	e00b      	b.n	8001494 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800147c:	78fb      	ldrb	r3, [r7, #3]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	015b      	lsls	r3, r3, #5
 8001484:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	4413      	add	r3, r2
 800148c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2200      	movs	r2, #0
 8001492:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001494:	78fb      	ldrb	r3, [r7, #3]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	b2da      	uxtb	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d101      	bne.n	80014ae <HAL_PCD_EP_Close+0x5e>
 80014aa:	2302      	movs	r3, #2
 80014ac:	e00e      	b.n	80014cc <HAL_PCD_EP_Close+0x7c>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	68f9      	ldr	r1, [r7, #12]
 80014bc:	4618      	mov	r0, r3
 80014be:	f001 fdcb 	bl	8003058 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	607a      	str	r2, [r7, #4]
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	460b      	mov	r3, r1
 80014e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014e4:	7afb      	ldrb	r3, [r7, #11]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	015b      	lsls	r3, r3, #5
 80014ec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	4413      	add	r3, r2
 80014f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	2200      	movs	r2, #0
 8001506:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	2200      	movs	r2, #0
 800150c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800150e:	7afb      	ldrb	r3, [r7, #11]
 8001510:	f003 0307 	and.w	r3, r3, #7
 8001514:	b2da      	uxtb	r2, r3
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800151a:	7afb      	ldrb	r3, [r7, #11]
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	2b00      	cmp	r3, #0
 8001522:	d106      	bne.n	8001532 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6979      	ldr	r1, [r7, #20]
 800152a:	4618      	mov	r0, r3
 800152c:	f001 ff2a 	bl	8003384 <USB_EPStartXfer>
 8001530:	e005      	b.n	800153e <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6979      	ldr	r1, [r7, #20]
 8001538:	4618      	mov	r0, r3
 800153a:	f001 ff23 	bl	8003384 <USB_EPStartXfer>
  }

  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001554:	78fb      	ldrb	r3, [r7, #3]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	330a      	adds	r3, #10
 800155e:	015b      	lsls	r3, r3, #5
 8001560:	4413      	add	r3, r2
 8001562:	3304      	adds	r3, #4
 8001564:	681b      	ldr	r3, [r3, #0]
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	460b      	mov	r3, r1
 800157e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001580:	7afb      	ldrb	r3, [r7, #11]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	015b      	lsls	r3, r3, #5
 8001588:	3328      	adds	r3, #40	; 0x28
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	4413      	add	r3, r2
 800158e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	2200      	movs	r2, #0
 80015a0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	2201      	movs	r2, #1
 80015a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015a8:	7afb      	ldrb	r3, [r7, #11]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80015b4:	7afb      	ldrb	r3, [r7, #11]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d106      	bne.n	80015cc <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6979      	ldr	r1, [r7, #20]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f001 fedd 	bl	8003384 <USB_EPStartXfer>
 80015ca:	e005      	b.n	80015d8 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6979      	ldr	r1, [r7, #20]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f001 fed6 	bl	8003384 <USB_EPStartXfer>
  }

  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b084      	sub	sp, #16
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	460b      	mov	r3, r1
 80015ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80015ee:	78fb      	ldrb	r3, [r7, #3]
 80015f0:	f003 0207 	and.w	r2, r3, #7
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d901      	bls.n	8001600 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e046      	b.n	800168e <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001600:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001604:	2b00      	cmp	r3, #0
 8001606:	da0b      	bge.n	8001620 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	015b      	lsls	r3, r3, #5
 8001610:	3328      	adds	r3, #40	; 0x28
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2201      	movs	r2, #1
 800161c:	705a      	strb	r2, [r3, #1]
 800161e:	e009      	b.n	8001634 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001620:	78fb      	ldrb	r3, [r7, #3]
 8001622:	015b      	lsls	r3, r3, #5
 8001624:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	4413      	add	r3, r2
 800162c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2200      	movs	r2, #0
 8001632:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2201      	movs	r2, #1
 8001638:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800163a:	78fb      	ldrb	r3, [r7, #3]
 800163c:	f003 0307 	and.w	r3, r3, #7
 8001640:	b2da      	uxtb	r2, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800164c:	2b01      	cmp	r3, #1
 800164e:	d101      	bne.n	8001654 <HAL_PCD_EP_SetStall+0x72>
 8001650:	2302      	movs	r3, #2
 8001652:	e01c      	b.n	800168e <HAL_PCD_EP_SetStall+0xac>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68f9      	ldr	r1, [r7, #12]
 8001662:	4618      	mov	r0, r3
 8001664:	f002 f946 	bl	80038f4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001668:	78fb      	ldrb	r3, [r7, #3]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	2b00      	cmp	r3, #0
 8001670:	d108      	bne.n	8001684 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800167c:	4619      	mov	r1, r3
 800167e:	4610      	mov	r0, r2
 8001680:	f002 fa44 	bl	8003b0c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b084      	sub	sp, #16
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	460b      	mov	r3, r1
 80016a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80016a2:	78fb      	ldrb	r3, [r7, #3]
 80016a4:	f003 020f 	and.w	r2, r3, #15
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d901      	bls.n	80016b4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e03a      	b.n	800172a <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80016b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	da0b      	bge.n	80016d4 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016bc:	78fb      	ldrb	r3, [r7, #3]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	015b      	lsls	r3, r3, #5
 80016c4:	3328      	adds	r3, #40	; 0x28
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2201      	movs	r2, #1
 80016d0:	705a      	strb	r2, [r3, #1]
 80016d2:	e00b      	b.n	80016ec <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016d4:	78fb      	ldrb	r3, [r7, #3]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	015b      	lsls	r3, r3, #5
 80016dc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	4413      	add	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2200      	movs	r2, #0
 80016ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2200      	movs	r2, #0
 80016f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016f2:	78fb      	ldrb	r3, [r7, #3]
 80016f4:	f003 0307 	and.w	r3, r3, #7
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001704:	2b01      	cmp	r3, #1
 8001706:	d101      	bne.n	800170c <HAL_PCD_EP_ClrStall+0x76>
 8001708:	2302      	movs	r3, #2
 800170a:	e00e      	b.n	800172a <HAL_PCD_EP_ClrStall+0x94>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68f9      	ldr	r1, [r7, #12]
 800171a:	4618      	mov	r0, r3
 800171c:	f002 f92c 	bl	8003978 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001734:	b590      	push	{r4, r7, lr}
 8001736:	b089      	sub	sp, #36	; 0x24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800173c:	e282      	b.n	8001c44 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001746:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001748:	8afb      	ldrh	r3, [r7, #22]
 800174a:	b2db      	uxtb	r3, r3
 800174c:	f003 030f 	and.w	r3, r3, #15
 8001750:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8001752:	7d7b      	ldrb	r3, [r7, #21]
 8001754:	2b00      	cmp	r3, #0
 8001756:	f040 8142 	bne.w	80019de <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800175a:	8afb      	ldrh	r3, [r7, #22]
 800175c:	f003 0310 	and.w	r3, r3, #16
 8001760:	2b00      	cmp	r3, #0
 8001762:	d151      	bne.n	8001808 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	b29b      	uxth	r3, r3
 800176c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001774:	b29c      	uxth	r4, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800177e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001782:	b29b      	uxth	r3, r3
 8001784:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3328      	adds	r3, #40	; 0x28
 800178a:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001794:	b29b      	uxth	r3, r3
 8001796:	461a      	mov	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	4413      	add	r3, r2
 80017a0:	3302      	adds	r3, #2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	6812      	ldr	r2, [r2, #0]
 80017a8:	4413      	add	r3, r2
 80017aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	695a      	ldr	r2, [r3, #20]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	441a      	add	r2, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80017c6:	2100      	movs	r1, #0
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f003 ffa1 	bl	8005710 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 8234 	beq.w	8001c44 <PCD_EP_ISR_Handler+0x510>
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f040 822f 	bne.w	8001c44 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	b292      	uxth	r2, r2
 80017fa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001806:	e21d      	b.n	8001c44 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800180e:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001818:	8a7b      	ldrh	r3, [r7, #18]
 800181a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800181e:	2b00      	cmp	r3, #0
 8001820:	d033      	beq.n	800188a <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800182a:	b29b      	uxth	r3, r3
 800182c:	461a      	mov	r2, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	4413      	add	r3, r2
 8001836:	3306      	adds	r3, #6
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	6812      	ldr	r2, [r2, #0]
 800183e:	4413      	add	r3, r2
 8001840:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6818      	ldr	r0, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001860:	b29b      	uxth	r3, r3
 8001862:	f002 f9a2 	bl	8003baa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	b29a      	uxth	r2, r3
 800186e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001872:	4013      	ands	r3, r2
 8001874:	b29c      	uxth	r4, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800187e:	b292      	uxth	r2, r2
 8001880:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f003 ff1a 	bl	80056bc <HAL_PCD_SetupStageCallback>
 8001888:	e1dc      	b.n	8001c44 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800188a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800188e:	2b00      	cmp	r3, #0
 8001890:	f280 81d8 	bge.w	8001c44 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	b29a      	uxth	r2, r3
 800189c:	f640 738f 	movw	r3, #3983	; 0xf8f
 80018a0:	4013      	ands	r3, r2
 80018a2:	b29c      	uxth	r4, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80018ac:	b292      	uxth	r2, r2
 80018ae:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	461a      	mov	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	4413      	add	r3, r2
 80018c4:	3306      	adds	r3, #6
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6812      	ldr	r2, [r2, #0]
 80018cc:	4413      	add	r3, r2
 80018ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d019      	beq.n	8001918 <PCD_EP_ISR_Handler+0x1e4>
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d015      	beq.n	8001918 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6818      	ldr	r0, [r3, #0]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6959      	ldr	r1, [r3, #20]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	f002 f954 	bl	8003baa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	695a      	ldr	r2, [r3, #20]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	441a      	add	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001910:	2100      	movs	r1, #0
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f003 fee4 	bl	80056e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	461c      	mov	r4, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001926:	b29b      	uxth	r3, r3
 8001928:	441c      	add	r4, r3
 800192a:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 800192e:	461c      	mov	r4, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d10e      	bne.n	8001956 <PCD_EP_ISR_Handler+0x222>
 8001938:	8823      	ldrh	r3, [r4, #0]
 800193a:	b29b      	uxth	r3, r3
 800193c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001940:	b29b      	uxth	r3, r3
 8001942:	8023      	strh	r3, [r4, #0]
 8001944:	8823      	ldrh	r3, [r4, #0]
 8001946:	b29b      	uxth	r3, r3
 8001948:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800194c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001950:	b29b      	uxth	r3, r3
 8001952:	8023      	strh	r3, [r4, #0]
 8001954:	e02d      	b.n	80019b2 <PCD_EP_ISR_Handler+0x27e>
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	2b3e      	cmp	r3, #62	; 0x3e
 800195c:	d812      	bhi.n	8001984 <PCD_EP_ISR_Handler+0x250>
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	085b      	lsrs	r3, r3, #1
 8001964:	61bb      	str	r3, [r7, #24]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b00      	cmp	r3, #0
 8001970:	d002      	beq.n	8001978 <PCD_EP_ISR_Handler+0x244>
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	3301      	adds	r3, #1
 8001976:	61bb      	str	r3, [r7, #24]
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	b29b      	uxth	r3, r3
 800197c:	029b      	lsls	r3, r3, #10
 800197e:	b29b      	uxth	r3, r3
 8001980:	8023      	strh	r3, [r4, #0]
 8001982:	e016      	b.n	80019b2 <PCD_EP_ISR_Handler+0x27e>
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	095b      	lsrs	r3, r3, #5
 800198a:	61bb      	str	r3, [r7, #24]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	f003 031f 	and.w	r3, r3, #31
 8001994:	2b00      	cmp	r3, #0
 8001996:	d102      	bne.n	800199e <PCD_EP_ISR_Handler+0x26a>
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	3b01      	subs	r3, #1
 800199c:	61bb      	str	r3, [r7, #24]
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	029b      	lsls	r3, r3, #10
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	881b      	ldrh	r3, [r3, #0]
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019c2:	b29c      	uxth	r4, r3
 80019c4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80019c8:	b29c      	uxth	r4, r3
 80019ca:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80019ce:	b29c      	uxth	r4, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4ba2      	ldr	r3, [pc, #648]	; (8001c60 <PCD_EP_ISR_Handler+0x52c>)
 80019d6:	4323      	orrs	r3, r4
 80019d8:	b29b      	uxth	r3, r3
 80019da:	8013      	strh	r3, [r2, #0]
 80019dc:	e132      	b.n	8001c44 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	461a      	mov	r2, r3
 80019e4:	7d7b      	ldrb	r3, [r7, #21]
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f280 80d1 	bge.w	8001b9a <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	461a      	mov	r2, r3
 80019fe:	7d7b      	ldrb	r3, [r7, #21]
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	b29c      	uxth	r4, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	7d7b      	ldrb	r3, [r7, #21]
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001a20:	b292      	uxth	r2, r2
 8001a22:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001a24:	7d7b      	ldrb	r3, [r7, #21]
 8001a26:	015b      	lsls	r3, r3, #5
 8001a28:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	4413      	add	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	7b1b      	ldrb	r3, [r3, #12]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d121      	bne.n	8001a7e <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	461a      	mov	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	4413      	add	r3, r2
 8001a4e:	3306      	adds	r3, #6
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6812      	ldr	r2, [r2, #0]
 8001a56:	4413      	add	r3, r2
 8001a58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a62:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8001a64:	8bfb      	ldrh	r3, [r7, #30]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d072      	beq.n	8001b50 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6818      	ldr	r0, [r3, #0]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6959      	ldr	r1, [r3, #20]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	88da      	ldrh	r2, [r3, #6]
 8001a76:	8bfb      	ldrh	r3, [r7, #30]
 8001a78:	f002 f897 	bl	8003baa <USB_ReadPMA>
 8001a7c:	e068      	b.n	8001b50 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d021      	beq.n	8001adc <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	4413      	add	r3, r2
 8001aac:	3302      	adds	r3, #2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6812      	ldr	r2, [r2, #0]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ac0:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001ac2:	8bfb      	ldrh	r3, [r7, #30]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d02a      	beq.n	8001b1e <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6818      	ldr	r0, [r3, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6959      	ldr	r1, [r3, #20]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	891a      	ldrh	r2, [r3, #8]
 8001ad4:	8bfb      	ldrh	r3, [r7, #30]
 8001ad6:	f002 f868 	bl	8003baa <USB_ReadPMA>
 8001ada:	e020      	b.n	8001b1e <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	4413      	add	r3, r2
 8001af0:	3306      	adds	r3, #6
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6812      	ldr	r2, [r2, #0]
 8001af8:	4413      	add	r3, r2
 8001afa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001afe:	881b      	ldrh	r3, [r3, #0]
 8001b00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b04:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001b06:	8bfb      	ldrh	r3, [r7, #30]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d008      	beq.n	8001b1e <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6818      	ldr	r0, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6959      	ldr	r1, [r3, #20]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	895a      	ldrh	r2, [r3, #10]
 8001b18:	8bfb      	ldrh	r3, [r7, #30]
 8001b1a:	f002 f846 	bl	8003baa <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	461a      	mov	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b38:	b29c      	uxth	r4, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	441a      	add	r2, r3
 8001b48:	4b46      	ldr	r3, [pc, #280]	; (8001c64 <PCD_EP_ISR_Handler+0x530>)
 8001b4a:	4323      	orrs	r3, r4
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	69da      	ldr	r2, [r3, #28]
 8001b54:	8bfb      	ldrh	r3, [r7, #30]
 8001b56:	441a      	add	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	695a      	ldr	r2, [r3, #20]
 8001b60:	8bfb      	ldrh	r3, [r7, #30]
 8001b62:	441a      	add	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d004      	beq.n	8001b7a <PCD_EP_ISR_Handler+0x446>
 8001b70:	8bfa      	ldrh	r2, [r7, #30]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d206      	bcs.n	8001b88 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	4619      	mov	r1, r3
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f003 fdad 	bl	80056e0 <HAL_PCD_DataOutStageCallback>
 8001b86:	e008      	b.n	8001b9a <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	7819      	ldrb	r1, [r3, #0]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	695a      	ldr	r2, [r3, #20]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff fc9d 	bl	80014d4 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001b9a:	8a7b      	ldrh	r3, [r7, #18]
 8001b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d04f      	beq.n	8001c44 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8001ba4:	7d7b      	ldrb	r3, [r7, #21]
 8001ba6:	015b      	lsls	r3, r3, #5
 8001ba8:	3328      	adds	r3, #40	; 0x28
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	7d7b      	ldrb	r3, [r7, #21]
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bc8:	b29c      	uxth	r4, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	7d7b      	ldrb	r3, [r7, #21]
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	441a      	add	r2, r3
 8001bd6:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001bda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3302      	adds	r3, #2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6812      	ldr	r2, [r2, #0]
 8001bfe:	4413      	add	r3, r2
 8001c00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	695a      	ldr	r2, [r3, #20]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	441a      	add	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d106      	bne.n	8001c32 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f003 fd70 	bl	8005710 <HAL_PCD_DataInStageCallback>
 8001c30:	e008      	b.n	8001c44 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	7819      	ldrb	r1, [r3, #0]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	695a      	ldr	r2, [r3, #20]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff fc96 	bl	8001570 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	b21b      	sxth	r3, r3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f6ff ad74 	blt.w	800173e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3724      	adds	r7, #36	; 0x24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd90      	pop	{r4, r7, pc}
 8001c60:	ffff8080 	.word	0xffff8080
 8001c64:	ffff80c0 	.word	0xffff80c0

08001c68 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b087      	sub	sp, #28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	460b      	mov	r3, r1
 8001c74:	817b      	strh	r3, [r7, #10]
 8001c76:	4613      	mov	r3, r2
 8001c78:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001c7a:	897b      	ldrh	r3, [r7, #10]
 8001c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d008      	beq.n	8001c98 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c86:	897b      	ldrh	r3, [r7, #10]
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	015b      	lsls	r3, r3, #5
 8001c8e:	3328      	adds	r3, #40	; 0x28
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	4413      	add	r3, r2
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	e006      	b.n	8001ca6 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c98:	897b      	ldrh	r3, [r7, #10]
 8001c9a:	015b      	lsls	r3, r3, #5
 8001c9c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001ca6:	893b      	ldrh	r3, [r7, #8]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d107      	bne.n	8001cbc <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	80da      	strh	r2, [r3, #6]
 8001cba:	e00b      	b.n	8001cd4 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	0c1b      	lsrs	r3, r3, #16
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	371c      	adds	r7, #28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e26c      	b.n	80021cc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 8087 	beq.w	8001e0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d00:	4b92      	ldr	r3, [pc, #584]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 030c 	and.w	r3, r3, #12
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d00c      	beq.n	8001d26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d0c:	4b8f      	ldr	r3, [pc, #572]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 030c 	and.w	r3, r3, #12
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d112      	bne.n	8001d3e <HAL_RCC_OscConfig+0x5e>
 8001d18:	4b8c      	ldr	r3, [pc, #560]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d24:	d10b      	bne.n	8001d3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d26:	4b89      	ldr	r3, [pc, #548]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d06c      	beq.n	8001e0c <HAL_RCC_OscConfig+0x12c>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d168      	bne.n	8001e0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e246      	b.n	80021cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d46:	d106      	bne.n	8001d56 <HAL_RCC_OscConfig+0x76>
 8001d48:	4b80      	ldr	r3, [pc, #512]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a7f      	ldr	r2, [pc, #508]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	e02e      	b.n	8001db4 <HAL_RCC_OscConfig+0xd4>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10c      	bne.n	8001d78 <HAL_RCC_OscConfig+0x98>
 8001d5e:	4b7b      	ldr	r3, [pc, #492]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a7a      	ldr	r2, [pc, #488]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	4b78      	ldr	r3, [pc, #480]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a77      	ldr	r2, [pc, #476]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	e01d      	b.n	8001db4 <HAL_RCC_OscConfig+0xd4>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d80:	d10c      	bne.n	8001d9c <HAL_RCC_OscConfig+0xbc>
 8001d82:	4b72      	ldr	r3, [pc, #456]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a71      	ldr	r2, [pc, #452]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	4b6f      	ldr	r3, [pc, #444]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a6e      	ldr	r2, [pc, #440]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	e00b      	b.n	8001db4 <HAL_RCC_OscConfig+0xd4>
 8001d9c:	4b6b      	ldr	r3, [pc, #428]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a6a      	ldr	r2, [pc, #424]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da6:	6013      	str	r3, [r2, #0]
 8001da8:	4b68      	ldr	r3, [pc, #416]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a67      	ldr	r2, [pc, #412]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001dae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001db2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d013      	beq.n	8001de4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7fe fcf2 	bl	80007a4 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc4:	f7fe fcee 	bl	80007a4 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b64      	cmp	r3, #100	; 0x64
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e1fa      	b.n	80021cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd6:	4b5d      	ldr	r3, [pc, #372]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0xe4>
 8001de2:	e014      	b.n	8001e0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de4:	f7fe fcde 	bl	80007a4 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dec:	f7fe fcda 	bl	80007a4 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b64      	cmp	r3, #100	; 0x64
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e1e6      	b.n	80021cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dfe:	4b53      	ldr	r3, [pc, #332]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x10c>
 8001e0a:	e000      	b.n	8001e0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d063      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e1a:	4b4c      	ldr	r3, [pc, #304]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00b      	beq.n	8001e3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e26:	4b49      	ldr	r3, [pc, #292]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
 8001e2e:	2b08      	cmp	r3, #8
 8001e30:	d11c      	bne.n	8001e6c <HAL_RCC_OscConfig+0x18c>
 8001e32:	4b46      	ldr	r3, [pc, #280]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d116      	bne.n	8001e6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3e:	4b43      	ldr	r3, [pc, #268]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d005      	beq.n	8001e56 <HAL_RCC_OscConfig+0x176>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d001      	beq.n	8001e56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e1ba      	b.n	80021cc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e56:	4b3d      	ldr	r3, [pc, #244]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	4939      	ldr	r1, [pc, #228]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6a:	e03a      	b.n	8001ee2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d020      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e74:	4b36      	ldr	r3, [pc, #216]	; (8001f50 <HAL_RCC_OscConfig+0x270>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7a:	f7fe fc93 	bl	80007a4 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e82:	f7fe fc8f 	bl	80007a4 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e19b      	b.n	80021cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e94:	4b2d      	ldr	r3, [pc, #180]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea0:	4b2a      	ldr	r3, [pc, #168]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	4927      	ldr	r1, [pc, #156]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	600b      	str	r3, [r1, #0]
 8001eb4:	e015      	b.n	8001ee2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eb6:	4b26      	ldr	r3, [pc, #152]	; (8001f50 <HAL_RCC_OscConfig+0x270>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebc:	f7fe fc72 	bl	80007a4 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec4:	f7fe fc6e 	bl	80007a4 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e17a      	b.n	80021cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed6:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d03a      	beq.n	8001f64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d019      	beq.n	8001f2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ef6:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efc:	f7fe fc52 	bl	80007a4 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f04:	f7fe fc4e 	bl	80007a4 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e15a      	b.n	80021cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f16:	4b0d      	ldr	r3, [pc, #52]	; (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f22:	2001      	movs	r0, #1
 8001f24:	f000 fada 	bl	80024dc <RCC_Delay>
 8001f28:	e01c      	b.n	8001f64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f30:	f7fe fc38 	bl	80007a4 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f36:	e00f      	b.n	8001f58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f38:	f7fe fc34 	bl	80007a4 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d908      	bls.n	8001f58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e140      	b.n	80021cc <HAL_RCC_OscConfig+0x4ec>
 8001f4a:	bf00      	nop
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	42420000 	.word	0x42420000
 8001f54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f58:	4b9e      	ldr	r3, [pc, #632]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1e9      	bne.n	8001f38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 80a6 	beq.w	80020be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f72:	2300      	movs	r3, #0
 8001f74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f76:	4b97      	ldr	r3, [pc, #604]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10d      	bne.n	8001f9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f82:	4b94      	ldr	r3, [pc, #592]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	4a93      	ldr	r2, [pc, #588]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8001f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	61d3      	str	r3, [r2, #28]
 8001f8e:	4b91      	ldr	r3, [pc, #580]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9e:	4b8e      	ldr	r3, [pc, #568]	; (80021d8 <HAL_RCC_OscConfig+0x4f8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d118      	bne.n	8001fdc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001faa:	4b8b      	ldr	r3, [pc, #556]	; (80021d8 <HAL_RCC_OscConfig+0x4f8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a8a      	ldr	r2, [pc, #552]	; (80021d8 <HAL_RCC_OscConfig+0x4f8>)
 8001fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fb6:	f7fe fbf5 	bl	80007a4 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fbe:	f7fe fbf1 	bl	80007a4 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b64      	cmp	r3, #100	; 0x64
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e0fd      	b.n	80021cc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd0:	4b81      	ldr	r3, [pc, #516]	; (80021d8 <HAL_RCC_OscConfig+0x4f8>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0f0      	beq.n	8001fbe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d106      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x312>
 8001fe4:	4b7b      	ldr	r3, [pc, #492]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	4a7a      	ldr	r2, [pc, #488]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	6213      	str	r3, [r2, #32]
 8001ff0:	e02d      	b.n	800204e <HAL_RCC_OscConfig+0x36e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10c      	bne.n	8002014 <HAL_RCC_OscConfig+0x334>
 8001ffa:	4b76      	ldr	r3, [pc, #472]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	4a75      	ldr	r2, [pc, #468]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8002000:	f023 0301 	bic.w	r3, r3, #1
 8002004:	6213      	str	r3, [r2, #32]
 8002006:	4b73      	ldr	r3, [pc, #460]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	4a72      	ldr	r2, [pc, #456]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 800200c:	f023 0304 	bic.w	r3, r3, #4
 8002010:	6213      	str	r3, [r2, #32]
 8002012:	e01c      	b.n	800204e <HAL_RCC_OscConfig+0x36e>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2b05      	cmp	r3, #5
 800201a:	d10c      	bne.n	8002036 <HAL_RCC_OscConfig+0x356>
 800201c:	4b6d      	ldr	r3, [pc, #436]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	4a6c      	ldr	r2, [pc, #432]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8002022:	f043 0304 	orr.w	r3, r3, #4
 8002026:	6213      	str	r3, [r2, #32]
 8002028:	4b6a      	ldr	r3, [pc, #424]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	4a69      	ldr	r2, [pc, #420]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6213      	str	r3, [r2, #32]
 8002034:	e00b      	b.n	800204e <HAL_RCC_OscConfig+0x36e>
 8002036:	4b67      	ldr	r3, [pc, #412]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	4a66      	ldr	r2, [pc, #408]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 800203c:	f023 0301 	bic.w	r3, r3, #1
 8002040:	6213      	str	r3, [r2, #32]
 8002042:	4b64      	ldr	r3, [pc, #400]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	4a63      	ldr	r2, [pc, #396]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8002048:	f023 0304 	bic.w	r3, r3, #4
 800204c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d015      	beq.n	8002082 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002056:	f7fe fba5 	bl	80007a4 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205c:	e00a      	b.n	8002074 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800205e:	f7fe fba1 	bl	80007a4 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	f241 3288 	movw	r2, #5000	; 0x1388
 800206c:	4293      	cmp	r3, r2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e0ab      	b.n	80021cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002074:	4b57      	ldr	r3, [pc, #348]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0ee      	beq.n	800205e <HAL_RCC_OscConfig+0x37e>
 8002080:	e014      	b.n	80020ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002082:	f7fe fb8f 	bl	80007a4 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002088:	e00a      	b.n	80020a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208a:	f7fe fb8b 	bl	80007a4 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	f241 3288 	movw	r2, #5000	; 0x1388
 8002098:	4293      	cmp	r3, r2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e095      	b.n	80021cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a0:	4b4c      	ldr	r3, [pc, #304]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1ee      	bne.n	800208a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020ac:	7dfb      	ldrb	r3, [r7, #23]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d105      	bne.n	80020be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b2:	4b48      	ldr	r3, [pc, #288]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	4a47      	ldr	r2, [pc, #284]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 80020b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 8081 	beq.w	80021ca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020c8:	4b42      	ldr	r3, [pc, #264]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 030c 	and.w	r3, r3, #12
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d061      	beq.n	8002198 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d146      	bne.n	800216a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020dc:	4b3f      	ldr	r3, [pc, #252]	; (80021dc <HAL_RCC_OscConfig+0x4fc>)
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e2:	f7fe fb5f 	bl	80007a4 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ea:	f7fe fb5b 	bl	80007a4 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e067      	b.n	80021cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020fc:	4b35      	ldr	r3, [pc, #212]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1f0      	bne.n	80020ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002110:	d108      	bne.n	8002124 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002112:	4b30      	ldr	r3, [pc, #192]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	492d      	ldr	r1, [pc, #180]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8002120:	4313      	orrs	r3, r2
 8002122:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002124:	4b2b      	ldr	r3, [pc, #172]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a19      	ldr	r1, [r3, #32]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	430b      	orrs	r3, r1
 8002136:	4927      	ldr	r1, [pc, #156]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 8002138:	4313      	orrs	r3, r2
 800213a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800213c:	4b27      	ldr	r3, [pc, #156]	; (80021dc <HAL_RCC_OscConfig+0x4fc>)
 800213e:	2201      	movs	r2, #1
 8002140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002142:	f7fe fb2f 	bl	80007a4 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214a:	f7fe fb2b 	bl	80007a4 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e037      	b.n	80021cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800215c:	4b1d      	ldr	r3, [pc, #116]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0f0      	beq.n	800214a <HAL_RCC_OscConfig+0x46a>
 8002168:	e02f      	b.n	80021ca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800216a:	4b1c      	ldr	r3, [pc, #112]	; (80021dc <HAL_RCC_OscConfig+0x4fc>)
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7fe fb18 	bl	80007a4 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002178:	f7fe fb14 	bl	80007a4 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e020      	b.n	80021cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800218a:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x498>
 8002196:	e018      	b.n	80021ca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e013      	b.n	80021cc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021a4:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <HAL_RCC_OscConfig+0x4f4>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d106      	bne.n	80021c6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d001      	beq.n	80021ca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40007000 	.word	0x40007000
 80021dc:	42420060 	.word	0x42420060

080021e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0d0      	b.n	8002396 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021f4:	4b6a      	ldr	r3, [pc, #424]	; (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d910      	bls.n	8002224 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002202:	4b67      	ldr	r3, [pc, #412]	; (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f023 0207 	bic.w	r2, r3, #7
 800220a:	4965      	ldr	r1, [pc, #404]	; (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	4313      	orrs	r3, r2
 8002210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002212:	4b63      	ldr	r3, [pc, #396]	; (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	429a      	cmp	r2, r3
 800221e:	d001      	beq.n	8002224 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e0b8      	b.n	8002396 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d020      	beq.n	8002272 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800223c:	4b59      	ldr	r3, [pc, #356]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	4a58      	ldr	r2, [pc, #352]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002246:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	2b00      	cmp	r3, #0
 8002252:	d005      	beq.n	8002260 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002254:	4b53      	ldr	r3, [pc, #332]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	4a52      	ldr	r2, [pc, #328]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 800225a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800225e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002260:	4b50      	ldr	r3, [pc, #320]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	494d      	ldr	r1, [pc, #308]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 800226e:	4313      	orrs	r3, r2
 8002270:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b00      	cmp	r3, #0
 800227c:	d040      	beq.n	8002300 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d107      	bne.n	8002296 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002286:	4b47      	ldr	r3, [pc, #284]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d115      	bne.n	80022be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e07f      	b.n	8002396 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d107      	bne.n	80022ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800229e:	4b41      	ldr	r3, [pc, #260]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d109      	bne.n	80022be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e073      	b.n	8002396 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ae:	4b3d      	ldr	r3, [pc, #244]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e06b      	b.n	8002396 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022be:	4b39      	ldr	r3, [pc, #228]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f023 0203 	bic.w	r2, r3, #3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	4936      	ldr	r1, [pc, #216]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d0:	f7fe fa68 	bl	80007a4 <HAL_GetTick>
 80022d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d6:	e00a      	b.n	80022ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d8:	f7fe fa64 	bl	80007a4 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e053      	b.n	8002396 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ee:	4b2d      	ldr	r3, [pc, #180]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 020c 	and.w	r2, r3, #12
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d1eb      	bne.n	80022d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002300:	4b27      	ldr	r3, [pc, #156]	; (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d210      	bcs.n	8002330 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b24      	ldr	r3, [pc, #144]	; (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 0207 	bic.w	r2, r3, #7
 8002316:	4922      	ldr	r1, [pc, #136]	; (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	4313      	orrs	r3, r2
 800231c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800231e:	4b20      	ldr	r3, [pc, #128]	; (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e032      	b.n	8002396 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d008      	beq.n	800234e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800233c:	4b19      	ldr	r3, [pc, #100]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	4916      	ldr	r1, [pc, #88]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 800234a:	4313      	orrs	r3, r2
 800234c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b00      	cmp	r3, #0
 8002358:	d009      	beq.n	800236e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800235a:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	490e      	ldr	r1, [pc, #56]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 800236a:	4313      	orrs	r3, r2
 800236c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800236e:	f000 f821 	bl	80023b4 <HAL_RCC_GetSysClockFreq>
 8002372:	4601      	mov	r1, r0
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	091b      	lsrs	r3, r3, #4
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	4a0a      	ldr	r2, [pc, #40]	; (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002380:	5cd3      	ldrb	r3, [r2, r3]
 8002382:	fa21 f303 	lsr.w	r3, r1, r3
 8002386:	4a09      	ldr	r2, [pc, #36]	; (80023ac <HAL_RCC_ClockConfig+0x1cc>)
 8002388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <HAL_RCC_ClockConfig+0x1d0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe f9c6 	bl	8000720 <HAL_InitTick>

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40022000 	.word	0x40022000
 80023a4:	40021000 	.word	0x40021000
 80023a8:	08005c68 	.word	0x08005c68
 80023ac:	2000000c 	.word	0x2000000c
 80023b0:	20000010 	.word	0x20000010

080023b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b4:	b490      	push	{r4, r7}
 80023b6:	b08a      	sub	sp, #40	; 0x28
 80023b8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023ba:	4b2a      	ldr	r3, [pc, #168]	; (8002464 <HAL_RCC_GetSysClockFreq+0xb0>)
 80023bc:	1d3c      	adds	r4, r7, #4
 80023be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023c4:	4b28      	ldr	r3, [pc, #160]	; (8002468 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61fb      	str	r3, [r7, #28]
 80023ce:	2300      	movs	r3, #0
 80023d0:	61bb      	str	r3, [r7, #24]
 80023d2:	2300      	movs	r3, #0
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023da:	2300      	movs	r3, #0
 80023dc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023de:	4b23      	ldr	r3, [pc, #140]	; (800246c <HAL_RCC_GetSysClockFreq+0xb8>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f003 030c 	and.w	r3, r3, #12
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d002      	beq.n	80023f4 <HAL_RCC_GetSysClockFreq+0x40>
 80023ee:	2b08      	cmp	r3, #8
 80023f0:	d003      	beq.n	80023fa <HAL_RCC_GetSysClockFreq+0x46>
 80023f2:	e02d      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023f4:	4b1e      	ldr	r3, [pc, #120]	; (8002470 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023f6:	623b      	str	r3, [r7, #32]
      break;
 80023f8:	e02d      	b.n	8002456 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	0c9b      	lsrs	r3, r3, #18
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002406:	4413      	add	r3, r2
 8002408:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800240c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d013      	beq.n	8002440 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002418:	4b14      	ldr	r3, [pc, #80]	; (800246c <HAL_RCC_GetSysClockFreq+0xb8>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	0c5b      	lsrs	r3, r3, #17
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002426:	4413      	add	r3, r2
 8002428:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800242c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	4a0f      	ldr	r2, [pc, #60]	; (8002470 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002432:	fb02 f203 	mul.w	r2, r2, r3
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	fbb2 f3f3 	udiv	r3, r2, r3
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
 800243e:	e004      	b.n	800244a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	4a0c      	ldr	r2, [pc, #48]	; (8002474 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002444:	fb02 f303 	mul.w	r3, r2, r3
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	623b      	str	r3, [r7, #32]
      break;
 800244e:	e002      	b.n	8002456 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002450:	4b07      	ldr	r3, [pc, #28]	; (8002470 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002452:	623b      	str	r3, [r7, #32]
      break;
 8002454:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002456:	6a3b      	ldr	r3, [r7, #32]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3728      	adds	r7, #40	; 0x28
 800245c:	46bd      	mov	sp, r7
 800245e:	bc90      	pop	{r4, r7}
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	08005c34 	.word	0x08005c34
 8002468:	08005c44 	.word	0x08005c44
 800246c:	40021000 	.word	0x40021000
 8002470:	007a1200 	.word	0x007a1200
 8002474:	003d0900 	.word	0x003d0900

08002478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800247c:	4b02      	ldr	r3, [pc, #8]	; (8002488 <HAL_RCC_GetHCLKFreq+0x10>)
 800247e:	681b      	ldr	r3, [r3, #0]
}
 8002480:	4618      	mov	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr
 8002488:	2000000c 	.word	0x2000000c

0800248c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002490:	f7ff fff2 	bl	8002478 <HAL_RCC_GetHCLKFreq>
 8002494:	4601      	mov	r1, r0
 8002496:	4b05      	ldr	r3, [pc, #20]	; (80024ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	0a1b      	lsrs	r3, r3, #8
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	4a03      	ldr	r2, [pc, #12]	; (80024b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024a2:	5cd3      	ldrb	r3, [r2, r3]
 80024a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40021000 	.word	0x40021000
 80024b0:	08005c78 	.word	0x08005c78

080024b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024b8:	f7ff ffde 	bl	8002478 <HAL_RCC_GetHCLKFreq>
 80024bc:	4601      	mov	r1, r0
 80024be:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	0adb      	lsrs	r3, r3, #11
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	4a03      	ldr	r2, [pc, #12]	; (80024d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ca:	5cd3      	ldrb	r3, [r2, r3]
 80024cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40021000 	.word	0x40021000
 80024d8:	08005c78 	.word	0x08005c78

080024dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024e4:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <RCC_Delay+0x34>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a0a      	ldr	r2, [pc, #40]	; (8002514 <RCC_Delay+0x38>)
 80024ea:	fba2 2303 	umull	r2, r3, r2, r3
 80024ee:	0a5b      	lsrs	r3, r3, #9
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	fb02 f303 	mul.w	r3, r2, r3
 80024f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024f8:	bf00      	nop
  }
  while (Delay --);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	1e5a      	subs	r2, r3, #1
 80024fe:	60fa      	str	r2, [r7, #12]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1f9      	bne.n	80024f8 <RCC_Delay+0x1c>
}
 8002504:	bf00      	nop
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	2000000c 	.word	0x2000000c
 8002514:	10624dd3 	.word	0x10624dd3

08002518 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	613b      	str	r3, [r7, #16]
 8002524:	2300      	movs	r3, #0
 8002526:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b00      	cmp	r3, #0
 8002532:	d07d      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002534:	2300      	movs	r3, #0
 8002536:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002538:	4b4f      	ldr	r3, [pc, #316]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10d      	bne.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002544:	4b4c      	ldr	r3, [pc, #304]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	4a4b      	ldr	r2, [pc, #300]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800254a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800254e:	61d3      	str	r3, [r2, #28]
 8002550:	4b49      	ldr	r3, [pc, #292]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800255c:	2301      	movs	r3, #1
 800255e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002560:	4b46      	ldr	r3, [pc, #280]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002568:	2b00      	cmp	r3, #0
 800256a:	d118      	bne.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800256c:	4b43      	ldr	r3, [pc, #268]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a42      	ldr	r2, [pc, #264]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002576:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002578:	f7fe f914 	bl	80007a4 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257e:	e008      	b.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002580:	f7fe f910 	bl	80007a4 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b64      	cmp	r3, #100	; 0x64
 800258c:	d901      	bls.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e06d      	b.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002592:	4b3a      	ldr	r3, [pc, #232]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800259e:	4b36      	ldr	r3, [pc, #216]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025a6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d02e      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d027      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025bc:	4b2e      	ldr	r3, [pc, #184]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025c4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025c6:	4b2e      	ldr	r3, [pc, #184]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025cc:	4b2c      	ldr	r3, [pc, #176]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80025d2:	4a29      	ldr	r2, [pc, #164]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d014      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e2:	f7fe f8df 	bl	80007a4 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e8:	e00a      	b.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ea:	f7fe f8db 	bl	80007a4 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d901      	bls.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e036      	b.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002600:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0ee      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800260c:	4b1a      	ldr	r3, [pc, #104]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	4917      	ldr	r1, [pc, #92]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800261a:	4313      	orrs	r3, r2
 800261c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800261e:	7dfb      	ldrb	r3, [r7, #23]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d105      	bne.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002624:	4b14      	ldr	r3, [pc, #80]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	4a13      	ldr	r2, [pc, #76]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800262a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800262e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d008      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800263c:	4b0e      	ldr	r3, [pc, #56]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	490b      	ldr	r1, [pc, #44]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800264a:	4313      	orrs	r3, r2
 800264c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0310 	and.w	r3, r3, #16
 8002656:	2b00      	cmp	r3, #0
 8002658:	d008      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800265a:	4b07      	ldr	r3, [pc, #28]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	4904      	ldr	r1, [pc, #16]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002668:	4313      	orrs	r3, r2
 800266a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40021000 	.word	0x40021000
 800267c:	40007000 	.word	0x40007000
 8002680:	42420440 	.word	0x42420440

08002684 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e053      	b.n	800273e <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d106      	bne.n	80026b6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7fd fefd 	bl	80004b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2202      	movs	r2, #2
 80026ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026cc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	431a      	orrs	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	431a      	orrs	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	431a      	orrs	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	ea42 0103 	orr.w	r1, r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	0c1a      	lsrs	r2, r3, #16
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f002 0204 	and.w	r2, r2, #4
 800271c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	69da      	ldr	r2, [r3, #28]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800272c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e03f      	b.n	80027d8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	d106      	bne.n	8002772 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7fd fee9 	bl	8000544 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2224      	movs	r2, #36	; 0x24
 8002776:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002788:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f828 	bl	80027e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	691a      	ldr	r2, [r3, #16]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800279e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	695a      	ldr	r2, [r3, #20]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027ae:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68da      	ldr	r2, [r3, #12]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027be:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2220      	movs	r2, #32
 80027ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2220      	movs	r2, #32
 80027d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	4313      	orrs	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800281a:	f023 030c 	bic.w	r3, r3, #12
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6812      	ldr	r2, [r2, #0]
 8002822:	68f9      	ldr	r1, [r7, #12]
 8002824:	430b      	orrs	r3, r1
 8002826:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	699a      	ldr	r2, [r3, #24]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a52      	ldr	r2, [pc, #328]	; (800298c <UART_SetConfig+0x1ac>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d14e      	bne.n	80028e6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002848:	f7ff fe34 	bl	80024b4 <HAL_RCC_GetPCLK2Freq>
 800284c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	4613      	mov	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	009a      	lsls	r2, r3, #2
 8002858:	441a      	add	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	fbb2 f3f3 	udiv	r3, r2, r3
 8002864:	4a4a      	ldr	r2, [pc, #296]	; (8002990 <UART_SetConfig+0x1b0>)
 8002866:	fba2 2303 	umull	r2, r3, r2, r3
 800286a:	095b      	lsrs	r3, r3, #5
 800286c:	0119      	lsls	r1, r3, #4
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	009a      	lsls	r2, r3, #2
 8002878:	441a      	add	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	fbb2 f2f3 	udiv	r2, r2, r3
 8002884:	4b42      	ldr	r3, [pc, #264]	; (8002990 <UART_SetConfig+0x1b0>)
 8002886:	fba3 0302 	umull	r0, r3, r3, r2
 800288a:	095b      	lsrs	r3, r3, #5
 800288c:	2064      	movs	r0, #100	; 0x64
 800288e:	fb00 f303 	mul.w	r3, r0, r3
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	3332      	adds	r3, #50	; 0x32
 8002898:	4a3d      	ldr	r2, [pc, #244]	; (8002990 <UART_SetConfig+0x1b0>)
 800289a:	fba2 2303 	umull	r2, r3, r2, r3
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028a4:	4419      	add	r1, r3
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	4613      	mov	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	009a      	lsls	r2, r3, #2
 80028b0:	441a      	add	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80028bc:	4b34      	ldr	r3, [pc, #208]	; (8002990 <UART_SetConfig+0x1b0>)
 80028be:	fba3 0302 	umull	r0, r3, r3, r2
 80028c2:	095b      	lsrs	r3, r3, #5
 80028c4:	2064      	movs	r0, #100	; 0x64
 80028c6:	fb00 f303 	mul.w	r3, r0, r3
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	3332      	adds	r3, #50	; 0x32
 80028d0:	4a2f      	ldr	r2, [pc, #188]	; (8002990 <UART_SetConfig+0x1b0>)
 80028d2:	fba2 2303 	umull	r2, r3, r2, r3
 80028d6:	095b      	lsrs	r3, r3, #5
 80028d8:	f003 020f 	and.w	r2, r3, #15
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	440a      	add	r2, r1
 80028e2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80028e4:	e04d      	b.n	8002982 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80028e6:	f7ff fdd1 	bl	800248c <HAL_RCC_GetPCLK1Freq>
 80028ea:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	009a      	lsls	r2, r3, #2
 80028f6:	441a      	add	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002902:	4a23      	ldr	r2, [pc, #140]	; (8002990 <UART_SetConfig+0x1b0>)
 8002904:	fba2 2303 	umull	r2, r3, r2, r3
 8002908:	095b      	lsrs	r3, r3, #5
 800290a:	0119      	lsls	r1, r3, #4
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	4613      	mov	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	009a      	lsls	r2, r3, #2
 8002916:	441a      	add	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002922:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <UART_SetConfig+0x1b0>)
 8002924:	fba3 0302 	umull	r0, r3, r3, r2
 8002928:	095b      	lsrs	r3, r3, #5
 800292a:	2064      	movs	r0, #100	; 0x64
 800292c:	fb00 f303 	mul.w	r3, r0, r3
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	3332      	adds	r3, #50	; 0x32
 8002936:	4a16      	ldr	r2, [pc, #88]	; (8002990 <UART_SetConfig+0x1b0>)
 8002938:	fba2 2303 	umull	r2, r3, r2, r3
 800293c:	095b      	lsrs	r3, r3, #5
 800293e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002942:	4419      	add	r1, r3
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	4613      	mov	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	009a      	lsls	r2, r3, #2
 800294e:	441a      	add	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	fbb2 f2f3 	udiv	r2, r2, r3
 800295a:	4b0d      	ldr	r3, [pc, #52]	; (8002990 <UART_SetConfig+0x1b0>)
 800295c:	fba3 0302 	umull	r0, r3, r3, r2
 8002960:	095b      	lsrs	r3, r3, #5
 8002962:	2064      	movs	r0, #100	; 0x64
 8002964:	fb00 f303 	mul.w	r3, r0, r3
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	3332      	adds	r3, #50	; 0x32
 800296e:	4a08      	ldr	r2, [pc, #32]	; (8002990 <UART_SetConfig+0x1b0>)
 8002970:	fba2 2303 	umull	r2, r3, r2, r3
 8002974:	095b      	lsrs	r3, r3, #5
 8002976:	f003 020f 	and.w	r2, r3, #15
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	440a      	add	r2, r1
 8002980:	609a      	str	r2, [r3, #8]
}
 8002982:	bf00      	nop
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40013800 	.word	0x40013800
 8002990:	51eb851f 	.word	0x51eb851f

08002994 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002994:	b084      	sub	sp, #16
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	f107 0014 	add.w	r0, r7, #20
 80029a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	b004      	add	sp, #16
 80029b2:	4770      	bx	lr

080029b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80029bc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80029c0:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	89fb      	ldrh	r3, [r7, #14]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr

080029e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b085      	sub	sp, #20
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80029ea:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80029ee:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	b21a      	sxth	r2, r3
 80029fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029fe:	43db      	mvns	r3, r3
 8002a00:	b21b      	sxth	r3, r3
 8002a02:	4013      	ands	r3, r2
 8002a04:	b21b      	sxth	r3, r3
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr

08002a1a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	460b      	mov	r3, r1
 8002a24:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bc80      	pop	{r7}
 8002a30:	4770      	bx	lr

08002a32 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002a32:	b084      	sub	sp, #16
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	f107 0014 	add.w	r0, r7, #20
 8002a40:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f7ff ffa5 	bl	80029b4 <USB_EnableGlobalInt>

  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a76:	b004      	add	sp, #16
 8002a78:	4770      	bx	lr
	...

08002a7c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002a7c:	b490      	push	{r4, r7}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002a86:	2300      	movs	r3, #0
 8002a88:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa0:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	78db      	ldrb	r3, [r3, #3]
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d819      	bhi.n	8002ade <USB_ActivateEndpoint+0x62>
 8002aaa:	a201      	add	r2, pc, #4	; (adr r2, 8002ab0 <USB_ActivateEndpoint+0x34>)
 8002aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab0:	08002ac1 	.word	0x08002ac1
 8002ab4:	08002ad5 	.word	0x08002ad5
 8002ab8:	08002ae5 	.word	0x08002ae5
 8002abc:	08002acb 	.word	0x08002acb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002ac0:	89bb      	ldrh	r3, [r7, #12]
 8002ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ac6:	81bb      	strh	r3, [r7, #12]
      break;
 8002ac8:	e00d      	b.n	8002ae6 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002aca:	89bb      	ldrh	r3, [r7, #12]
 8002acc:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002ad0:	81bb      	strh	r3, [r7, #12]
      break;
 8002ad2:	e008      	b.n	8002ae6 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002ad4:	89bb      	ldrh	r3, [r7, #12]
 8002ad6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ada:	81bb      	strh	r3, [r7, #12]
      break;
 8002adc:	e003      	b.n	8002ae6 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ae2:	e000      	b.n	8002ae6 <USB_ActivateEndpoint+0x6a>
      break;
 8002ae4:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	441a      	add	r2, r3
 8002af0:	89bb      	ldrh	r3, [r7, #12]
 8002af2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002af6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	4313      	orrs	r3, r2
 8002b26:	b29c      	uxth	r4, r3
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	441a      	add	r2, r3
 8002b32:	4b8a      	ldr	r3, [pc, #552]	; (8002d5c <USB_ActivateEndpoint+0x2e0>)
 8002b34:	4323      	orrs	r3, r4
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	7b1b      	ldrb	r3, [r3, #12]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f040 8112 	bne.w	8002d68 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	785b      	ldrb	r3, [r3, #1]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d067      	beq.n	8002c1c <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002b4c:	687c      	ldr	r4, [r7, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	441c      	add	r4, r3
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	4423      	add	r3, r4
 8002b60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b64:	461c      	mov	r4, r3
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	88db      	ldrh	r3, [r3, #6]
 8002b6a:	085b      	lsrs	r3, r3, #1
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	b29c      	uxth	r4, r3
 8002b82:	4623      	mov	r3, r4
 8002b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d014      	beq.n	8002bb6 <USB_ActivateEndpoint+0x13a>
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	881b      	ldrh	r3, [r3, #0]
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba2:	b29c      	uxth	r4, r3
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	441a      	add	r2, r3
 8002bae:	4b6c      	ldr	r3, [pc, #432]	; (8002d60 <USB_ActivateEndpoint+0x2e4>)
 8002bb0:	4323      	orrs	r3, r4
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	78db      	ldrb	r3, [r3, #3]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d018      	beq.n	8002bf0 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bd4:	b29c      	uxth	r4, r3
 8002bd6:	f084 0320 	eor.w	r3, r4, #32
 8002bda:	b29c      	uxth	r4, r3
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	441a      	add	r2, r3
 8002be6:	4b5d      	ldr	r3, [pc, #372]	; (8002d5c <USB_ActivateEndpoint+0x2e0>)
 8002be8:	4323      	orrs	r3, r4
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	8013      	strh	r3, [r2, #0]
 8002bee:	e22b      	b.n	8003048 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c06:	b29c      	uxth	r4, r3
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	441a      	add	r2, r3
 8002c12:	4b52      	ldr	r3, [pc, #328]	; (8002d5c <USB_ActivateEndpoint+0x2e0>)
 8002c14:	4323      	orrs	r3, r4
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	8013      	strh	r3, [r2, #0]
 8002c1a:	e215      	b.n	8003048 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002c1c:	687c      	ldr	r4, [r7, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	441c      	add	r4, r3
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	4423      	add	r3, r4
 8002c30:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002c34:	461c      	mov	r4, r3
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	88db      	ldrh	r3, [r3, #6]
 8002c3a:	085b      	lsrs	r3, r3, #1
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002c44:	687c      	ldr	r4, [r7, #4]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	441c      	add	r4, r3
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	4423      	add	r3, r4
 8002c58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c5c:	461c      	mov	r4, r3
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10e      	bne.n	8002c84 <USB_ActivateEndpoint+0x208>
 8002c66:	8823      	ldrh	r3, [r4, #0]
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	8023      	strh	r3, [r4, #0]
 8002c72:	8823      	ldrh	r3, [r4, #0]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	8023      	strh	r3, [r4, #0]
 8002c82:	e02d      	b.n	8002ce0 <USB_ActivateEndpoint+0x264>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	2b3e      	cmp	r3, #62	; 0x3e
 8002c8a:	d812      	bhi.n	8002cb2 <USB_ActivateEndpoint+0x236>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	085b      	lsrs	r3, r3, #1
 8002c92:	60bb      	str	r3, [r7, #8]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <USB_ActivateEndpoint+0x22a>
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	029b      	lsls	r3, r3, #10
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	8023      	strh	r3, [r4, #0]
 8002cb0:	e016      	b.n	8002ce0 <USB_ActivateEndpoint+0x264>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	095b      	lsrs	r3, r3, #5
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	f003 031f 	and.w	r3, r3, #31
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d102      	bne.n	8002ccc <USB_ActivateEndpoint+0x250>
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	60bb      	str	r3, [r7, #8]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	029b      	lsls	r3, r3, #10
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	881b      	ldrh	r3, [r3, #0]
 8002cec:	b29c      	uxth	r4, r3
 8002cee:	4623      	mov	r3, r4
 8002cf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d014      	beq.n	8002d22 <USB_ActivateEndpoint+0x2a6>
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	881b      	ldrh	r3, [r3, #0]
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d0e:	b29c      	uxth	r4, r3
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	441a      	add	r2, r3
 8002d1a:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <USB_ActivateEndpoint+0x2e8>)
 8002d1c:	4323      	orrs	r3, r4
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d38:	b29c      	uxth	r4, r3
 8002d3a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002d3e:	b29c      	uxth	r4, r3
 8002d40:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002d44:	b29c      	uxth	r4, r3
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	441a      	add	r2, r3
 8002d50:	4b02      	ldr	r3, [pc, #8]	; (8002d5c <USB_ActivateEndpoint+0x2e0>)
 8002d52:	4323      	orrs	r3, r4
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	8013      	strh	r3, [r2, #0]
 8002d58:	e176      	b.n	8003048 <USB_ActivateEndpoint+0x5cc>
 8002d5a:	bf00      	nop
 8002d5c:	ffff8080 	.word	0xffff8080
 8002d60:	ffff80c0 	.word	0xffff80c0
 8002d64:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d7e:	b29c      	uxth	r4, r3
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	441a      	add	r2, r3
 8002d8a:	4b96      	ldr	r3, [pc, #600]	; (8002fe4 <USB_ActivateEndpoint+0x568>)
 8002d8c:	4323      	orrs	r3, r4
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002d92:	687c      	ldr	r4, [r7, #4]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	441c      	add	r4, r3
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	4423      	add	r3, r4
 8002da6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002daa:	461c      	mov	r4, r3
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	891b      	ldrh	r3, [r3, #8]
 8002db0:	085b      	lsrs	r3, r3, #1
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	8023      	strh	r3, [r4, #0]
 8002dba:	687c      	ldr	r4, [r7, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	441c      	add	r4, r3
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	4423      	add	r3, r4
 8002dce:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002dd2:	461c      	mov	r4, r3
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	895b      	ldrh	r3, [r3, #10]
 8002dd8:	085b      	lsrs	r3, r3, #1
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	785b      	ldrb	r3, [r3, #1]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f040 8088 	bne.w	8002efc <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	881b      	ldrh	r3, [r3, #0]
 8002df8:	b29c      	uxth	r4, r3
 8002dfa:	4623      	mov	r3, r4
 8002dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d014      	beq.n	8002e2e <USB_ActivateEndpoint+0x3b2>
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	881b      	ldrh	r3, [r3, #0]
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e1a:	b29c      	uxth	r4, r3
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	441a      	add	r2, r3
 8002e26:	4b70      	ldr	r3, [pc, #448]	; (8002fe8 <USB_ActivateEndpoint+0x56c>)
 8002e28:	4323      	orrs	r3, r4
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	b29c      	uxth	r4, r3
 8002e3c:	4623      	mov	r3, r4
 8002e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d014      	beq.n	8002e70 <USB_ActivateEndpoint+0x3f4>
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5c:	b29c      	uxth	r4, r3
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	441a      	add	r2, r3
 8002e68:	4b60      	ldr	r3, [pc, #384]	; (8002fec <USB_ActivateEndpoint+0x570>)
 8002e6a:	4323      	orrs	r3, r4
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	881b      	ldrh	r3, [r3, #0]
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e86:	b29c      	uxth	r4, r3
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	441a      	add	r2, r3
 8002e92:	4b56      	ldr	r3, [pc, #344]	; (8002fec <USB_ActivateEndpoint+0x570>)
 8002e94:	4323      	orrs	r3, r4
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	881b      	ldrh	r3, [r3, #0]
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eb0:	b29c      	uxth	r4, r3
 8002eb2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002eb6:	b29c      	uxth	r4, r3
 8002eb8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002ebc:	b29c      	uxth	r4, r3
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	441a      	add	r2, r3
 8002ec8:	4b49      	ldr	r3, [pc, #292]	; (8002ff0 <USB_ActivateEndpoint+0x574>)
 8002eca:	4323      	orrs	r3, r4
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ee6:	b29c      	uxth	r4, r3
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	441a      	add	r2, r3
 8002ef2:	4b3f      	ldr	r3, [pc, #252]	; (8002ff0 <USB_ActivateEndpoint+0x574>)
 8002ef4:	4323      	orrs	r3, r4
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	8013      	strh	r3, [r2, #0]
 8002efa:	e0a5      	b.n	8003048 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	b29c      	uxth	r4, r3
 8002f0a:	4623      	mov	r3, r4
 8002f0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d014      	beq.n	8002f3e <USB_ActivateEndpoint+0x4c2>
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f2a:	b29c      	uxth	r4, r3
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	441a      	add	r2, r3
 8002f36:	4b2c      	ldr	r3, [pc, #176]	; (8002fe8 <USB_ActivateEndpoint+0x56c>)
 8002f38:	4323      	orrs	r3, r4
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4413      	add	r3, r2
 8002f48:	881b      	ldrh	r3, [r3, #0]
 8002f4a:	b29c      	uxth	r4, r3
 8002f4c:	4623      	mov	r3, r4
 8002f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d014      	beq.n	8002f80 <USB_ActivateEndpoint+0x504>
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f6c:	b29c      	uxth	r4, r3
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	441a      	add	r2, r3
 8002f78:	4b1c      	ldr	r3, [pc, #112]	; (8002fec <USB_ActivateEndpoint+0x570>)
 8002f7a:	4323      	orrs	r3, r4
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f96:	b29c      	uxth	r4, r3
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	441a      	add	r2, r3
 8002fa2:	4b11      	ldr	r3, [pc, #68]	; (8002fe8 <USB_ActivateEndpoint+0x56c>)
 8002fa4:	4323      	orrs	r3, r4
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	78db      	ldrb	r3, [r3, #3]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d020      	beq.n	8002ff4 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fc8:	b29c      	uxth	r4, r3
 8002fca:	f084 0320 	eor.w	r3, r4, #32
 8002fce:	b29c      	uxth	r4, r3
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	441a      	add	r2, r3
 8002fda:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <USB_ActivateEndpoint+0x574>)
 8002fdc:	4323      	orrs	r3, r4
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	8013      	strh	r3, [r2, #0]
 8002fe2:	e01c      	b.n	800301e <USB_ActivateEndpoint+0x5a2>
 8002fe4:	ffff8180 	.word	0xffff8180
 8002fe8:	ffffc080 	.word	0xffffc080
 8002fec:	ffff80c0 	.word	0xffff80c0
 8002ff0:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	b29b      	uxth	r3, r3
 8003002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003006:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800300a:	b29c      	uxth	r4, r3
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	441a      	add	r2, r3
 8003016:	4b0f      	ldr	r3, [pc, #60]	; (8003054 <USB_ActivateEndpoint+0x5d8>)
 8003018:	4323      	orrs	r3, r4
 800301a:	b29b      	uxth	r3, r3
 800301c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	881b      	ldrh	r3, [r3, #0]
 800302a:	b29b      	uxth	r3, r3
 800302c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003034:	b29c      	uxth	r4, r3
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	441a      	add	r2, r3
 8003040:	4b04      	ldr	r3, [pc, #16]	; (8003054 <USB_ActivateEndpoint+0x5d8>)
 8003042:	4323      	orrs	r3, r4
 8003044:	b29b      	uxth	r3, r3
 8003046:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003048:	7bfb      	ldrb	r3, [r7, #15]
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bc90      	pop	{r4, r7}
 8003052:	4770      	bx	lr
 8003054:	ffff8080 	.word	0xffff8080

08003058 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003058:	b490      	push	{r4, r7}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	7b1b      	ldrb	r3, [r3, #12]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d171      	bne.n	800314e <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	785b      	ldrb	r3, [r3, #1]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d036      	beq.n	80030e0 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	b29c      	uxth	r4, r3
 8003080:	4623      	mov	r3, r4
 8003082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003086:	2b00      	cmp	r3, #0
 8003088:	d014      	beq.n	80030b4 <USB_DeactivateEndpoint+0x5c>
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	b29b      	uxth	r3, r3
 8003098:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800309c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a0:	b29c      	uxth	r4, r3
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	441a      	add	r2, r3
 80030ac:	4b6b      	ldr	r3, [pc, #428]	; (800325c <USB_DeactivateEndpoint+0x204>)
 80030ae:	4323      	orrs	r3, r4
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030ca:	b29c      	uxth	r4, r3
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	441a      	add	r2, r3
 80030d6:	4b62      	ldr	r3, [pc, #392]	; (8003260 <USB_DeactivateEndpoint+0x208>)
 80030d8:	4323      	orrs	r3, r4
 80030da:	b29b      	uxth	r3, r3
 80030dc:	8013      	strh	r3, [r2, #0]
 80030de:	e144      	b.n	800336a <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	b29c      	uxth	r4, r3
 80030ee:	4623      	mov	r3, r4
 80030f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d014      	beq.n	8003122 <USB_DeactivateEndpoint+0xca>
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	881b      	ldrh	r3, [r3, #0]
 8003104:	b29b      	uxth	r3, r3
 8003106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800310a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800310e:	b29c      	uxth	r4, r3
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	441a      	add	r2, r3
 800311a:	4b52      	ldr	r3, [pc, #328]	; (8003264 <USB_DeactivateEndpoint+0x20c>)
 800311c:	4323      	orrs	r3, r4
 800311e:	b29b      	uxth	r3, r3
 8003120:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4413      	add	r3, r2
 800312c:	881b      	ldrh	r3, [r3, #0]
 800312e:	b29b      	uxth	r3, r3
 8003130:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003138:	b29c      	uxth	r4, r3
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	441a      	add	r2, r3
 8003144:	4b46      	ldr	r3, [pc, #280]	; (8003260 <USB_DeactivateEndpoint+0x208>)
 8003146:	4323      	orrs	r3, r4
 8003148:	b29b      	uxth	r3, r3
 800314a:	8013      	strh	r3, [r2, #0]
 800314c:	e10d      	b.n	800336a <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	785b      	ldrb	r3, [r3, #1]
 8003152:	2b00      	cmp	r3, #0
 8003154:	f040 8088 	bne.w	8003268 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	881b      	ldrh	r3, [r3, #0]
 8003164:	b29c      	uxth	r4, r3
 8003166:	4623      	mov	r3, r4
 8003168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d014      	beq.n	800319a <USB_DeactivateEndpoint+0x142>
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	881b      	ldrh	r3, [r3, #0]
 800317c:	b29b      	uxth	r3, r3
 800317e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003186:	b29c      	uxth	r4, r3
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	441a      	add	r2, r3
 8003192:	4b34      	ldr	r3, [pc, #208]	; (8003264 <USB_DeactivateEndpoint+0x20c>)
 8003194:	4323      	orrs	r3, r4
 8003196:	b29b      	uxth	r3, r3
 8003198:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	b29c      	uxth	r4, r3
 80031a8:	4623      	mov	r3, r4
 80031aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d014      	beq.n	80031dc <USB_DeactivateEndpoint+0x184>
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	881b      	ldrh	r3, [r3, #0]
 80031be:	b29b      	uxth	r3, r3
 80031c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c8:	b29c      	uxth	r4, r3
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	441a      	add	r2, r3
 80031d4:	4b21      	ldr	r3, [pc, #132]	; (800325c <USB_DeactivateEndpoint+0x204>)
 80031d6:	4323      	orrs	r3, r4
 80031d8:	b29b      	uxth	r3, r3
 80031da:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f2:	b29c      	uxth	r4, r3
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	441a      	add	r2, r3
 80031fe:	4b17      	ldr	r3, [pc, #92]	; (800325c <USB_DeactivateEndpoint+0x204>)
 8003200:	4323      	orrs	r3, r4
 8003202:	b29b      	uxth	r3, r3
 8003204:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4413      	add	r3, r2
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	b29b      	uxth	r3, r3
 8003214:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800321c:	b29c      	uxth	r4, r3
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	441a      	add	r2, r3
 8003228:	4b0d      	ldr	r3, [pc, #52]	; (8003260 <USB_DeactivateEndpoint+0x208>)
 800322a:	4323      	orrs	r3, r4
 800322c:	b29b      	uxth	r3, r3
 800322e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	b29b      	uxth	r3, r3
 800323e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003246:	b29c      	uxth	r4, r3
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	441a      	add	r2, r3
 8003252:	4b03      	ldr	r3, [pc, #12]	; (8003260 <USB_DeactivateEndpoint+0x208>)
 8003254:	4323      	orrs	r3, r4
 8003256:	b29b      	uxth	r3, r3
 8003258:	8013      	strh	r3, [r2, #0]
 800325a:	e086      	b.n	800336a <USB_DeactivateEndpoint+0x312>
 800325c:	ffff80c0 	.word	0xffff80c0
 8003260:	ffff8080 	.word	0xffff8080
 8003264:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	881b      	ldrh	r3, [r3, #0]
 8003274:	b29c      	uxth	r4, r3
 8003276:	4623      	mov	r3, r4
 8003278:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d014      	beq.n	80032aa <USB_DeactivateEndpoint+0x252>
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	881b      	ldrh	r3, [r3, #0]
 800328c:	b29b      	uxth	r3, r3
 800328e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003296:	b29c      	uxth	r4, r3
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	441a      	add	r2, r3
 80032a2:	4b35      	ldr	r3, [pc, #212]	; (8003378 <USB_DeactivateEndpoint+0x320>)
 80032a4:	4323      	orrs	r3, r4
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	b29c      	uxth	r4, r3
 80032b8:	4623      	mov	r3, r4
 80032ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d014      	beq.n	80032ec <USB_DeactivateEndpoint+0x294>
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d8:	b29c      	uxth	r4, r3
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	441a      	add	r2, r3
 80032e4:	4b25      	ldr	r3, [pc, #148]	; (800337c <USB_DeactivateEndpoint+0x324>)
 80032e6:	4323      	orrs	r3, r4
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	881b      	ldrh	r3, [r3, #0]
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003302:	b29c      	uxth	r4, r3
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	441a      	add	r2, r3
 800330e:	4b1a      	ldr	r3, [pc, #104]	; (8003378 <USB_DeactivateEndpoint+0x320>)
 8003310:	4323      	orrs	r3, r4
 8003312:	b29b      	uxth	r3, r3
 8003314:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	881b      	ldrh	r3, [r3, #0]
 8003322:	b29b      	uxth	r3, r3
 8003324:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800332c:	b29c      	uxth	r4, r3
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	441a      	add	r2, r3
 8003338:	4b11      	ldr	r3, [pc, #68]	; (8003380 <USB_DeactivateEndpoint+0x328>)
 800333a:	4323      	orrs	r3, r4
 800333c:	b29b      	uxth	r3, r3
 800333e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	881b      	ldrh	r3, [r3, #0]
 800334c:	b29b      	uxth	r3, r3
 800334e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003356:	b29c      	uxth	r4, r3
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	441a      	add	r2, r3
 8003362:	4b07      	ldr	r3, [pc, #28]	; (8003380 <USB_DeactivateEndpoint+0x328>)
 8003364:	4323      	orrs	r3, r4
 8003366:	b29b      	uxth	r3, r3
 8003368:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bc90      	pop	{r4, r7}
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	ffffc080 	.word	0xffffc080
 800337c:	ffff80c0 	.word	0xffff80c0
 8003380:	ffff8080 	.word	0xffff8080

08003384 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003384:	b590      	push	{r4, r7, lr}
 8003386:	b08d      	sub	sp, #52	; 0x34
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	785b      	ldrb	r3, [r3, #1]
 8003392:	2b01      	cmp	r3, #1
 8003394:	f040 8160 	bne.w	8003658 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	699a      	ldr	r2, [r3, #24]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d909      	bls.n	80033b8 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	699a      	ldr	r2, [r3, #24]
 80033ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b0:	1ad2      	subs	r2, r2, r3
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	619a      	str	r2, [r3, #24]
 80033b6:	e005      	b.n	80033c4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2200      	movs	r2, #0
 80033c2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	7b1b      	ldrb	r3, [r3, #12]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d119      	bne.n	8003400 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	6959      	ldr	r1, [r3, #20]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	88da      	ldrh	r2, [r3, #6]
 80033d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 fba2 	bl	8003b22 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80033de:	687c      	ldr	r4, [r7, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	441c      	add	r4, r3
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	4423      	add	r3, r4
 80033f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80033f6:	461c      	mov	r4, r3
 80033f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	8023      	strh	r3, [r4, #0]
 80033fe:	e10f      	b.n	8003620 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	881b      	ldrh	r3, [r3, #0]
 800340c:	b29b      	uxth	r3, r3
 800340e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003412:	2b00      	cmp	r3, #0
 8003414:	d065      	beq.n	80034e2 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003416:	687c      	ldr	r4, [r7, #4]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	785b      	ldrb	r3, [r3, #1]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d148      	bne.n	80034b2 <USB_EPStartXfer+0x12e>
 8003420:	687c      	ldr	r4, [r7, #4]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003428:	b29b      	uxth	r3, r3
 800342a:	441c      	add	r4, r3
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	4423      	add	r3, r4
 8003434:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003438:	461c      	mov	r4, r3
 800343a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10e      	bne.n	800345e <USB_EPStartXfer+0xda>
 8003440:	8823      	ldrh	r3, [r4, #0]
 8003442:	b29b      	uxth	r3, r3
 8003444:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003448:	b29b      	uxth	r3, r3
 800344a:	8023      	strh	r3, [r4, #0]
 800344c:	8823      	ldrh	r3, [r4, #0]
 800344e:	b29b      	uxth	r3, r3
 8003450:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003454:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003458:	b29b      	uxth	r3, r3
 800345a:	8023      	strh	r3, [r4, #0]
 800345c:	e03d      	b.n	80034da <USB_EPStartXfer+0x156>
 800345e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003460:	2b3e      	cmp	r3, #62	; 0x3e
 8003462:	d810      	bhi.n	8003486 <USB_EPStartXfer+0x102>
 8003464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003466:	085b      	lsrs	r3, r3, #1
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
 800346a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b00      	cmp	r3, #0
 8003472:	d002      	beq.n	800347a <USB_EPStartXfer+0xf6>
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	3301      	adds	r3, #1
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	b29b      	uxth	r3, r3
 800347e:	029b      	lsls	r3, r3, #10
 8003480:	b29b      	uxth	r3, r3
 8003482:	8023      	strh	r3, [r4, #0]
 8003484:	e029      	b.n	80034da <USB_EPStartXfer+0x156>
 8003486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003488:	095b      	lsrs	r3, r3, #5
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
 800348c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348e:	f003 031f 	and.w	r3, r3, #31
 8003492:	2b00      	cmp	r3, #0
 8003494:	d102      	bne.n	800349c <USB_EPStartXfer+0x118>
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	3b01      	subs	r3, #1
 800349a:	627b      	str	r3, [r7, #36]	; 0x24
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	b29b      	uxth	r3, r3
 80034a0:	029b      	lsls	r3, r3, #10
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	8023      	strh	r3, [r4, #0]
 80034b0:	e013      	b.n	80034da <USB_EPStartXfer+0x156>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	785b      	ldrb	r3, [r3, #1]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d10f      	bne.n	80034da <USB_EPStartXfer+0x156>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	441c      	add	r4, r3
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	4423      	add	r3, r4
 80034cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	895b      	ldrh	r3, [r3, #10]
 80034de:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80034e0:	e063      	b.n	80035aa <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	785b      	ldrb	r3, [r3, #1]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d148      	bne.n	800357c <USB_EPStartXfer+0x1f8>
 80034ea:	687c      	ldr	r4, [r7, #4]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	441c      	add	r4, r3
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	4423      	add	r3, r4
 80034fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003502:	461c      	mov	r4, r3
 8003504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10e      	bne.n	8003528 <USB_EPStartXfer+0x1a4>
 800350a:	8823      	ldrh	r3, [r4, #0]
 800350c:	b29b      	uxth	r3, r3
 800350e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003512:	b29b      	uxth	r3, r3
 8003514:	8023      	strh	r3, [r4, #0]
 8003516:	8823      	ldrh	r3, [r4, #0]
 8003518:	b29b      	uxth	r3, r3
 800351a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800351e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003522:	b29b      	uxth	r3, r3
 8003524:	8023      	strh	r3, [r4, #0]
 8003526:	e03d      	b.n	80035a4 <USB_EPStartXfer+0x220>
 8003528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352a:	2b3e      	cmp	r3, #62	; 0x3e
 800352c:	d810      	bhi.n	8003550 <USB_EPStartXfer+0x1cc>
 800352e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003530:	085b      	lsrs	r3, r3, #1
 8003532:	623b      	str	r3, [r7, #32]
 8003534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <USB_EPStartXfer+0x1c0>
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	3301      	adds	r3, #1
 8003542:	623b      	str	r3, [r7, #32]
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	b29b      	uxth	r3, r3
 8003548:	029b      	lsls	r3, r3, #10
 800354a:	b29b      	uxth	r3, r3
 800354c:	8023      	strh	r3, [r4, #0]
 800354e:	e029      	b.n	80035a4 <USB_EPStartXfer+0x220>
 8003550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003552:	095b      	lsrs	r3, r3, #5
 8003554:	623b      	str	r3, [r7, #32]
 8003556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003558:	f003 031f 	and.w	r3, r3, #31
 800355c:	2b00      	cmp	r3, #0
 800355e:	d102      	bne.n	8003566 <USB_EPStartXfer+0x1e2>
 8003560:	6a3b      	ldr	r3, [r7, #32]
 8003562:	3b01      	subs	r3, #1
 8003564:	623b      	str	r3, [r7, #32]
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	b29b      	uxth	r3, r3
 800356a:	029b      	lsls	r3, r3, #10
 800356c:	b29b      	uxth	r3, r3
 800356e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003572:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003576:	b29b      	uxth	r3, r3
 8003578:	8023      	strh	r3, [r4, #0]
 800357a:	e013      	b.n	80035a4 <USB_EPStartXfer+0x220>
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	785b      	ldrb	r3, [r3, #1]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d10f      	bne.n	80035a4 <USB_EPStartXfer+0x220>
 8003584:	687c      	ldr	r4, [r7, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800358c:	b29b      	uxth	r3, r3
 800358e:	441c      	add	r4, r3
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	4423      	add	r3, r4
 8003598:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800359c:	461c      	mov	r4, r3
 800359e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	891b      	ldrh	r3, [r3, #8]
 80035a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	6959      	ldr	r1, [r3, #20]
 80035ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 fab4 	bl	8003b22 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	785b      	ldrb	r3, [r3, #1]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d115      	bne.n	80035ee <USB_EPStartXfer+0x26a>
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	881b      	ldrh	r3, [r3, #0]
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d8:	b29c      	uxth	r4, r3
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	441a      	add	r2, r3
 80035e4:	4b9a      	ldr	r3, [pc, #616]	; (8003850 <USB_EPStartXfer+0x4cc>)
 80035e6:	4323      	orrs	r3, r4
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	8013      	strh	r3, [r2, #0]
 80035ec:	e018      	b.n	8003620 <USB_EPStartXfer+0x29c>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	785b      	ldrb	r3, [r3, #1]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d114      	bne.n	8003620 <USB_EPStartXfer+0x29c>
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	b29b      	uxth	r3, r3
 8003604:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360c:	b29c      	uxth	r4, r3
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	441a      	add	r2, r3
 8003618:	4b8e      	ldr	r3, [pc, #568]	; (8003854 <USB_EPStartXfer+0x4d0>)
 800361a:	4323      	orrs	r3, r4
 800361c:	b29b      	uxth	r3, r3
 800361e:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	b29b      	uxth	r3, r3
 800362e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003632:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003636:	b29c      	uxth	r4, r3
 8003638:	f084 0310 	eor.w	r3, r4, #16
 800363c:	b29c      	uxth	r4, r3
 800363e:	f084 0320 	eor.w	r3, r4, #32
 8003642:	b29c      	uxth	r4, r3
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	441a      	add	r2, r3
 800364e:	4b82      	ldr	r3, [pc, #520]	; (8003858 <USB_EPStartXfer+0x4d4>)
 8003650:	4323      	orrs	r3, r4
 8003652:	b29b      	uxth	r3, r3
 8003654:	8013      	strh	r3, [r2, #0]
 8003656:	e146      	b.n	80038e6 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	699a      	ldr	r2, [r3, #24]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	429a      	cmp	r2, r3
 8003662:	d909      	bls.n	8003678 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	699a      	ldr	r2, [r3, #24]
 800366e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003670:	1ad2      	subs	r2, r2, r3
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	619a      	str	r2, [r3, #24]
 8003676:	e005      	b.n	8003684 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2200      	movs	r2, #0
 8003682:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	7b1b      	ldrb	r3, [r3, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d148      	bne.n	800371e <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800368c:	687c      	ldr	r4, [r7, #4]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003694:	b29b      	uxth	r3, r3
 8003696:	441c      	add	r4, r3
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	4423      	add	r3, r4
 80036a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80036a4:	461c      	mov	r4, r3
 80036a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10e      	bne.n	80036ca <USB_EPStartXfer+0x346>
 80036ac:	8823      	ldrh	r3, [r4, #0]
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	8023      	strh	r3, [r4, #0]
 80036b8:	8823      	ldrh	r3, [r4, #0]
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	8023      	strh	r3, [r4, #0]
 80036c8:	e0f2      	b.n	80038b0 <USB_EPStartXfer+0x52c>
 80036ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036cc:	2b3e      	cmp	r3, #62	; 0x3e
 80036ce:	d810      	bhi.n	80036f2 <USB_EPStartXfer+0x36e>
 80036d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d2:	085b      	lsrs	r3, r3, #1
 80036d4:	61fb      	str	r3, [r7, #28]
 80036d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d002      	beq.n	80036e6 <USB_EPStartXfer+0x362>
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	3301      	adds	r3, #1
 80036e4:	61fb      	str	r3, [r7, #28]
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	029b      	lsls	r3, r3, #10
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	8023      	strh	r3, [r4, #0]
 80036f0:	e0de      	b.n	80038b0 <USB_EPStartXfer+0x52c>
 80036f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f4:	095b      	lsrs	r3, r3, #5
 80036f6:	61fb      	str	r3, [r7, #28]
 80036f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fa:	f003 031f 	and.w	r3, r3, #31
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d102      	bne.n	8003708 <USB_EPStartXfer+0x384>
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	3b01      	subs	r3, #1
 8003706:	61fb      	str	r3, [r7, #28]
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	b29b      	uxth	r3, r3
 800370c:	029b      	lsls	r3, r3, #10
 800370e:	b29b      	uxth	r3, r3
 8003710:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003714:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003718:	b29b      	uxth	r3, r3
 800371a:	8023      	strh	r3, [r4, #0]
 800371c:	e0c8      	b.n	80038b0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	785b      	ldrb	r3, [r3, #1]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d148      	bne.n	80037b8 <USB_EPStartXfer+0x434>
 8003726:	687c      	ldr	r4, [r7, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800372e:	b29b      	uxth	r3, r3
 8003730:	441c      	add	r4, r3
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	4423      	add	r3, r4
 800373a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800373e:	461c      	mov	r4, r3
 8003740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10e      	bne.n	8003764 <USB_EPStartXfer+0x3e0>
 8003746:	8823      	ldrh	r3, [r4, #0]
 8003748:	b29b      	uxth	r3, r3
 800374a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800374e:	b29b      	uxth	r3, r3
 8003750:	8023      	strh	r3, [r4, #0]
 8003752:	8823      	ldrh	r3, [r4, #0]
 8003754:	b29b      	uxth	r3, r3
 8003756:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800375a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800375e:	b29b      	uxth	r3, r3
 8003760:	8023      	strh	r3, [r4, #0]
 8003762:	e03d      	b.n	80037e0 <USB_EPStartXfer+0x45c>
 8003764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003766:	2b3e      	cmp	r3, #62	; 0x3e
 8003768:	d810      	bhi.n	800378c <USB_EPStartXfer+0x408>
 800376a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376c:	085b      	lsrs	r3, r3, #1
 800376e:	61bb      	str	r3, [r7, #24]
 8003770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <USB_EPStartXfer+0x3fc>
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	3301      	adds	r3, #1
 800377e:	61bb      	str	r3, [r7, #24]
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	b29b      	uxth	r3, r3
 8003784:	029b      	lsls	r3, r3, #10
 8003786:	b29b      	uxth	r3, r3
 8003788:	8023      	strh	r3, [r4, #0]
 800378a:	e029      	b.n	80037e0 <USB_EPStartXfer+0x45c>
 800378c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378e:	095b      	lsrs	r3, r3, #5
 8003790:	61bb      	str	r3, [r7, #24]
 8003792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003794:	f003 031f 	and.w	r3, r3, #31
 8003798:	2b00      	cmp	r3, #0
 800379a:	d102      	bne.n	80037a2 <USB_EPStartXfer+0x41e>
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	3b01      	subs	r3, #1
 80037a0:	61bb      	str	r3, [r7, #24]
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	029b      	lsls	r3, r3, #10
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	8023      	strh	r3, [r4, #0]
 80037b6:	e013      	b.n	80037e0 <USB_EPStartXfer+0x45c>
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	785b      	ldrb	r3, [r3, #1]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d10f      	bne.n	80037e0 <USB_EPStartXfer+0x45c>
 80037c0:	687c      	ldr	r4, [r7, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	441c      	add	r4, r3
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	4423      	add	r3, r4
 80037d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80037d8:	461c      	mov	r4, r3
 80037da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037dc:	b29b      	uxth	r3, r3
 80037de:	8023      	strh	r3, [r4, #0]
 80037e0:	687c      	ldr	r4, [r7, #4]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	785b      	ldrb	r3, [r3, #1]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d14e      	bne.n	8003888 <USB_EPStartXfer+0x504>
 80037ea:	687c      	ldr	r4, [r7, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	441c      	add	r4, r3
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	4423      	add	r3, r4
 80037fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003802:	461c      	mov	r4, r3
 8003804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10e      	bne.n	8003828 <USB_EPStartXfer+0x4a4>
 800380a:	8823      	ldrh	r3, [r4, #0]
 800380c:	b29b      	uxth	r3, r3
 800380e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003812:	b29b      	uxth	r3, r3
 8003814:	8023      	strh	r3, [r4, #0]
 8003816:	8823      	ldrh	r3, [r4, #0]
 8003818:	b29b      	uxth	r3, r3
 800381a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800381e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003822:	b29b      	uxth	r3, r3
 8003824:	8023      	strh	r3, [r4, #0]
 8003826:	e043      	b.n	80038b0 <USB_EPStartXfer+0x52c>
 8003828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382a:	2b3e      	cmp	r3, #62	; 0x3e
 800382c:	d816      	bhi.n	800385c <USB_EPStartXfer+0x4d8>
 800382e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003830:	085b      	lsrs	r3, r3, #1
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d002      	beq.n	8003844 <USB_EPStartXfer+0x4c0>
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	3301      	adds	r3, #1
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	b29b      	uxth	r3, r3
 8003848:	029b      	lsls	r3, r3, #10
 800384a:	b29b      	uxth	r3, r3
 800384c:	8023      	strh	r3, [r4, #0]
 800384e:	e02f      	b.n	80038b0 <USB_EPStartXfer+0x52c>
 8003850:	ffff80c0 	.word	0xffff80c0
 8003854:	ffffc080 	.word	0xffffc080
 8003858:	ffff8080 	.word	0xffff8080
 800385c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385e:	095b      	lsrs	r3, r3, #5
 8003860:	617b      	str	r3, [r7, #20]
 8003862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003864:	f003 031f 	and.w	r3, r3, #31
 8003868:	2b00      	cmp	r3, #0
 800386a:	d102      	bne.n	8003872 <USB_EPStartXfer+0x4ee>
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	3b01      	subs	r3, #1
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	b29b      	uxth	r3, r3
 8003876:	029b      	lsls	r3, r3, #10
 8003878:	b29b      	uxth	r3, r3
 800387a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800387e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003882:	b29b      	uxth	r3, r3
 8003884:	8023      	strh	r3, [r4, #0]
 8003886:	e013      	b.n	80038b0 <USB_EPStartXfer+0x52c>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	785b      	ldrb	r3, [r3, #1]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d10f      	bne.n	80038b0 <USB_EPStartXfer+0x52c>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003896:	b29b      	uxth	r3, r3
 8003898:	441c      	add	r4, r3
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	4423      	add	r3, r4
 80038a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80038a6:	613b      	str	r3, [r7, #16]
 80038a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	881b      	ldrh	r3, [r3, #0]
 80038bc:	b29b      	uxth	r3, r3
 80038be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c6:	b29c      	uxth	r4, r3
 80038c8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80038cc:	b29c      	uxth	r4, r3
 80038ce:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80038d2:	b29c      	uxth	r4, r3
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	441a      	add	r2, r3
 80038de:	4b04      	ldr	r3, [pc, #16]	; (80038f0 <USB_EPStartXfer+0x56c>)
 80038e0:	4323      	orrs	r3, r4
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3734      	adds	r7, #52	; 0x34
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd90      	pop	{r4, r7, pc}
 80038f0:	ffff8080 	.word	0xffff8080

080038f4 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80038f4:	b490      	push	{r4, r7}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	785b      	ldrb	r3, [r3, #1]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d018      	beq.n	8003938 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4413      	add	r3, r2
 8003910:	881b      	ldrh	r3, [r3, #0]
 8003912:	b29b      	uxth	r3, r3
 8003914:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800391c:	b29c      	uxth	r4, r3
 800391e:	f084 0310 	eor.w	r3, r4, #16
 8003922:	b29c      	uxth	r4, r3
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	441a      	add	r2, r3
 800392e:	4b11      	ldr	r3, [pc, #68]	; (8003974 <USB_EPSetStall+0x80>)
 8003930:	4323      	orrs	r3, r4
 8003932:	b29b      	uxth	r3, r3
 8003934:	8013      	strh	r3, [r2, #0]
 8003936:	e017      	b.n	8003968 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	881b      	ldrh	r3, [r3, #0]
 8003944:	b29b      	uxth	r3, r3
 8003946:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800394a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800394e:	b29c      	uxth	r4, r3
 8003950:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003954:	b29c      	uxth	r4, r3
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	441a      	add	r2, r3
 8003960:	4b04      	ldr	r3, [pc, #16]	; (8003974 <USB_EPSetStall+0x80>)
 8003962:	4323      	orrs	r3, r4
 8003964:	b29b      	uxth	r3, r3
 8003966:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bc90      	pop	{r4, r7}
 8003972:	4770      	bx	lr
 8003974:	ffff8080 	.word	0xffff8080

08003978 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003978:	b490      	push	{r4, r7}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	7b1b      	ldrb	r3, [r3, #12]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d17d      	bne.n	8003a86 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	785b      	ldrb	r3, [r3, #1]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d03d      	beq.n	8003a0e <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	b29c      	uxth	r4, r3
 80039a0:	4623      	mov	r3, r4
 80039a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d014      	beq.n	80039d4 <USB_EPClearStall+0x5c>
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4413      	add	r3, r2
 80039b4:	881b      	ldrh	r3, [r3, #0]
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c0:	b29c      	uxth	r4, r3
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	441a      	add	r2, r3
 80039cc:	4b31      	ldr	r3, [pc, #196]	; (8003a94 <USB_EPClearStall+0x11c>)
 80039ce:	4323      	orrs	r3, r4
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	78db      	ldrb	r3, [r3, #3]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d054      	beq.n	8003a86 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039f2:	b29c      	uxth	r4, r3
 80039f4:	f084 0320 	eor.w	r3, r4, #32
 80039f8:	b29c      	uxth	r4, r3
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	441a      	add	r2, r3
 8003a04:	4b24      	ldr	r3, [pc, #144]	; (8003a98 <USB_EPClearStall+0x120>)
 8003a06:	4323      	orrs	r3, r4
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	8013      	strh	r3, [r2, #0]
 8003a0c:	e03b      	b.n	8003a86 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	881b      	ldrh	r3, [r3, #0]
 8003a1a:	b29c      	uxth	r4, r3
 8003a1c:	4623      	mov	r3, r4
 8003a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d014      	beq.n	8003a50 <USB_EPClearStall+0xd8>
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	881b      	ldrh	r3, [r3, #0]
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3c:	b29c      	uxth	r4, r3
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	441a      	add	r2, r3
 8003a48:	4b14      	ldr	r3, [pc, #80]	; (8003a9c <USB_EPClearStall+0x124>)
 8003a4a:	4323      	orrs	r3, r4
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a66:	b29c      	uxth	r4, r3
 8003a68:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003a6c:	b29c      	uxth	r4, r3
 8003a6e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003a72:	b29c      	uxth	r4, r3
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	441a      	add	r2, r3
 8003a7e:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <USB_EPClearStall+0x120>)
 8003a80:	4323      	orrs	r3, r4
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bc90      	pop	{r4, r7}
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	ffff80c0 	.word	0xffff80c0
 8003a98:	ffff8080 	.word	0xffff8080
 8003a9c:	ffffc080 	.word	0xffffc080

08003aa0 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8003aac:	78fb      	ldrb	r3, [r7, #3]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d103      	bne.n	8003aba <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2280      	movs	r2, #128	; 0x80
 8003ab6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc80      	pop	{r7}
 8003ac4:	4770      	bx	lr

08003ac6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bc80      	pop	{r7}
 8003ad8:	4770      	bx	lr

08003ada <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bc80      	pop	{r7}
 8003aec:	4770      	bx	lr

08003aee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b085      	sub	sp, #20
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8003b00:	68fb      	ldr	r3, [r7, #12]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr

08003b0c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bc80      	pop	{r7}
 8003b20:	4770      	bx	lr

08003b22 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b08d      	sub	sp, #52	; 0x34
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	60f8      	str	r0, [r7, #12]
 8003b2a:	60b9      	str	r1, [r7, #8]
 8003b2c:	4611      	mov	r1, r2
 8003b2e:	461a      	mov	r2, r3
 8003b30:	460b      	mov	r3, r1
 8003b32:	80fb      	strh	r3, [r7, #6]
 8003b34:	4613      	mov	r3, r2
 8003b36:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003b38:	88bb      	ldrh	r3, [r7, #4]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	085b      	lsrs	r3, r3, #1
 8003b3e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003b48:	88fb      	ldrh	r3, [r7, #6]
 8003b4a:	005a      	lsls	r2, r3, #1
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b54:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b5a:	e01e      	b.n	8003b9a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	3301      	adds	r3, #1
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	021b      	lsls	r3, r3, #8
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	461a      	mov	r2, r3
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b80:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8003b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b84:	3302      	adds	r3, #2
 8003b86:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8003b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8a:	3302      	adds	r3, #2
 8003b8c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	3301      	adds	r3, #1
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8003b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b96:	3b01      	subs	r3, #1
 8003b98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1dd      	bne.n	8003b5c <USB_WritePMA+0x3a>
  }
}
 8003ba0:	bf00      	nop
 8003ba2:	3734      	adds	r7, #52	; 0x34
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bc80      	pop	{r7}
 8003ba8:	4770      	bx	lr

08003baa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b08b      	sub	sp, #44	; 0x2c
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	60f8      	str	r0, [r7, #12]
 8003bb2:	60b9      	str	r1, [r7, #8]
 8003bb4:	4611      	mov	r1, r2
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	460b      	mov	r3, r1
 8003bba:	80fb      	strh	r3, [r7, #6]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003bc0:	88bb      	ldrh	r3, [r7, #4]
 8003bc2:	085b      	lsrs	r3, r3, #1
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003bd0:	88fb      	ldrh	r3, [r7, #6]
 8003bd2:	005a      	lsls	r2, r3, #1
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bdc:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24
 8003be2:	e01b      	b.n	8003c1c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8003be4:	6a3b      	ldr	r3, [r7, #32]
 8003be6:	881b      	ldrh	r3, [r3, #0]
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	3302      	adds	r3, #2
 8003bf0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	0a1b      	lsrs	r3, r3, #8
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	3302      	adds	r3, #2
 8003c14:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1e0      	bne.n	8003be4 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003c22:	88bb      	ldrh	r3, [r7, #4]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d007      	beq.n	8003c3e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	881b      	ldrh	r3, [r3, #0]
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	701a      	strb	r2, [r3, #0]
  }
}
 8003c3e:	bf00      	nop
 8003c40:	372c      	adds	r7, #44	; 0x2c
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bc80      	pop	{r7}
 8003c46:	4770      	bx	lr

08003c48 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	460b      	mov	r3, r1
 8003c52:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	7c1b      	ldrb	r3, [r3, #16]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d115      	bne.n	8003c8c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003c60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c64:	2202      	movs	r2, #2
 8003c66:	2181      	movs	r1, #129	; 0x81
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f001 fe32 	bl	80058d2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003c74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c78:	2202      	movs	r2, #2
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f001 fe28 	bl	80058d2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8003c8a:	e012      	b.n	8003cb2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003c8c:	2340      	movs	r3, #64	; 0x40
 8003c8e:	2202      	movs	r2, #2
 8003c90:	2181      	movs	r1, #129	; 0x81
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f001 fe1d 	bl	80058d2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003c9e:	2340      	movs	r3, #64	; 0x40
 8003ca0:	2202      	movs	r2, #2
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f001 fe14 	bl	80058d2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003cb2:	2308      	movs	r3, #8
 8003cb4:	2203      	movs	r2, #3
 8003cb6:	2182      	movs	r1, #130	; 0x82
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f001 fe0a 	bl	80058d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003cc4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003cc8:	f001 ff24 	bl	8005b14 <USBD_static_malloc>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d102      	bne.n	8003ce4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	73fb      	strb	r3, [r7, #15]
 8003ce2:	e026      	b.n	8003d32 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003cea:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	7c1b      	ldrb	r3, [r3, #16]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d109      	bne.n	8003d22 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003d14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d18:	2101      	movs	r1, #1
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f001 fec3 	bl	8005aa6 <USBD_LL_PrepareReceive>
 8003d20:	e007      	b.n	8003d32 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003d28:	2340      	movs	r3, #64	; 0x40
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f001 feba 	bl	8005aa6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8003d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	460b      	mov	r3, r1
 8003d46:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003d4c:	2181      	movs	r1, #129	; 0x81
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f001 fde5 	bl	800591e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f001 fdde 	bl	800591e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003d6a:	2182      	movs	r1, #130	; 0x82
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f001 fdd6 	bl	800591e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00e      	beq.n	8003da0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003d92:	4618      	mov	r0, r3
 8003d94:	f001 feca 	bl	8005b2c <USBD_static_free>
    pdev->pClassData = NULL;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b086      	sub	sp, #24
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
 8003db2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003dba:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d039      	beq.n	8003e48 <USBD_CDC_Setup+0x9e>
 8003dd4:	2b20      	cmp	r3, #32
 8003dd6:	d17c      	bne.n	8003ed2 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	88db      	ldrh	r3, [r3, #6]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d029      	beq.n	8003e34 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	b25b      	sxtb	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	da11      	bge.n	8003e0e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8003df6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	88d2      	ldrh	r2, [r2, #6]
 8003dfc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003dfe:	6939      	ldr	r1, [r7, #16]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	88db      	ldrh	r3, [r3, #6]
 8003e04:	461a      	mov	r2, r3
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f001 f9c6 	bl	8005198 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8003e0c:	e068      	b.n	8003ee0 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	785a      	ldrb	r2, [r3, #1]
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	88db      	ldrh	r3, [r3, #6]
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003e24:	6939      	ldr	r1, [r7, #16]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	88db      	ldrh	r3, [r3, #6]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f001 f9e1 	bl	80051f4 <USBD_CtlPrepareRx>
      break;
 8003e32:	e055      	b.n	8003ee0 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	7850      	ldrb	r0, [r2, #1]
 8003e40:	2200      	movs	r2, #0
 8003e42:	6839      	ldr	r1, [r7, #0]
 8003e44:	4798      	blx	r3
      break;
 8003e46:	e04b      	b.n	8003ee0 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	785b      	ldrb	r3, [r3, #1]
 8003e4c:	2b0a      	cmp	r3, #10
 8003e4e:	d017      	beq.n	8003e80 <USBD_CDC_Setup+0xd6>
 8003e50:	2b0b      	cmp	r3, #11
 8003e52:	d029      	beq.n	8003ea8 <USBD_CDC_Setup+0xfe>
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d133      	bne.n	8003ec0 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003e5e:	2b03      	cmp	r3, #3
 8003e60:	d107      	bne.n	8003e72 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003e62:	f107 030c 	add.w	r3, r7, #12
 8003e66:	2202      	movs	r2, #2
 8003e68:	4619      	mov	r1, r3
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f001 f994 	bl	8005198 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003e70:	e02e      	b.n	8003ed0 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8003e72:	6839      	ldr	r1, [r7, #0]
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f001 f925 	bl	80050c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	75fb      	strb	r3, [r7, #23]
          break;
 8003e7e:	e027      	b.n	8003ed0 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003e86:	2b03      	cmp	r3, #3
 8003e88:	d107      	bne.n	8003e9a <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8003e8a:	f107 030f 	add.w	r3, r7, #15
 8003e8e:	2201      	movs	r2, #1
 8003e90:	4619      	mov	r1, r3
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f001 f980 	bl	8005198 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003e98:	e01a      	b.n	8003ed0 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8003e9a:	6839      	ldr	r1, [r7, #0]
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f001 f911 	bl	80050c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	75fb      	strb	r3, [r7, #23]
          break;
 8003ea6:	e013      	b.n	8003ed0 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003eae:	2b03      	cmp	r3, #3
 8003eb0:	d00d      	beq.n	8003ece <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8003eb2:	6839      	ldr	r1, [r7, #0]
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f001 f905 	bl	80050c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8003eba:	2302      	movs	r3, #2
 8003ebc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8003ebe:	e006      	b.n	8003ece <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8003ec0:	6839      	ldr	r1, [r7, #0]
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f001 f8fe 	bl	80050c4 <USBD_CtlError>
          ret = USBD_FAIL;
 8003ec8:	2302      	movs	r3, #2
 8003eca:	75fb      	strb	r3, [r7, #23]
          break;
 8003ecc:	e000      	b.n	8003ed0 <USBD_CDC_Setup+0x126>
          break;
 8003ece:	bf00      	nop
      }
      break;
 8003ed0:	e006      	b.n	8003ee0 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8003ed2:	6839      	ldr	r1, [r7, #0]
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f001 f8f5 	bl	80050c4 <USBD_CtlError>
      ret = USBD_FAIL;
 8003eda:	2302      	movs	r3, #2
 8003edc:	75fb      	strb	r3, [r7, #23]
      break;
 8003ede:	bf00      	nop
  }

  return ret;
 8003ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3718      	adds	r7, #24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b084      	sub	sp, #16
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003efc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003f04:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d037      	beq.n	8003f80 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003f10:	78fa      	ldrb	r2, [r7, #3]
 8003f12:	6879      	ldr	r1, [r7, #4]
 8003f14:	4613      	mov	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	331c      	adds	r3, #28
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d026      	beq.n	8003f74 <USBD_CDC_DataIn+0x8a>
 8003f26:	78fa      	ldrb	r2, [r7, #3]
 8003f28:	6879      	ldr	r1, [r7, #4]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	440b      	add	r3, r1
 8003f34:	331c      	adds	r3, #28
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	78fa      	ldrb	r2, [r7, #3]
 8003f3a:	68b9      	ldr	r1, [r7, #8]
 8003f3c:	0152      	lsls	r2, r2, #5
 8003f3e:	440a      	add	r2, r1
 8003f40:	3238      	adds	r2, #56	; 0x38
 8003f42:	6812      	ldr	r2, [r2, #0]
 8003f44:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f48:	fb02 f201 	mul.w	r2, r2, r1
 8003f4c:	1a9b      	subs	r3, r3, r2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d110      	bne.n	8003f74 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8003f52:	78fa      	ldrb	r2, [r7, #3]
 8003f54:	6879      	ldr	r1, [r7, #4]
 8003f56:	4613      	mov	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	440b      	add	r3, r1
 8003f60:	331c      	adds	r3, #28
 8003f62:	2200      	movs	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003f66:	78f9      	ldrb	r1, [r7, #3]
 8003f68:	2300      	movs	r3, #0
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f001 fd77 	bl	8005a60 <USBD_LL_Transmit>
 8003f72:	e003      	b.n	8003f7c <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	e000      	b.n	8003f82 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8003f80:	2302      	movs	r3, #2
  }
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b084      	sub	sp, #16
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	460b      	mov	r3, r1
 8003f94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003f9c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003f9e:	78fb      	ldrb	r3, [r7, #3]
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f001 fda2 	bl	8005aec <USBD_LL_GetRxDataSize>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00d      	beq.n	8003fd6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8003fce:	4611      	mov	r1, r2
 8003fd0:	4798      	blx	r3

    return USBD_OK;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	e000      	b.n	8003fd8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8003fd6:	2302      	movs	r3, #2
  }
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003fee:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d015      	beq.n	8004026 <USBD_CDC_EP0_RxReady+0x46>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004000:	2bff      	cmp	r3, #255	; 0xff
 8004002:	d010      	beq.n	8004026 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8004012:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800401a:	b292      	uxth	r2, r2
 800401c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	22ff      	movs	r2, #255	; 0xff
 8004022:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2243      	movs	r2, #67	; 0x43
 800403c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800403e:	4b03      	ldr	r3, [pc, #12]	; (800404c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004040:	4618      	mov	r0, r3
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	bc80      	pop	{r7}
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	200000a0 	.word	0x200000a0

08004050 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2243      	movs	r2, #67	; 0x43
 800405c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800405e:	4b03      	ldr	r3, [pc, #12]	; (800406c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004060:	4618      	mov	r0, r3
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	bc80      	pop	{r7}
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	2000005c 	.word	0x2000005c

08004070 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2243      	movs	r2, #67	; 0x43
 800407c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800407e:	4b03      	ldr	r3, [pc, #12]	; (800408c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004080:	4618      	mov	r0, r3
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	bc80      	pop	{r7}
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	200000e4 	.word	0x200000e4

08004090 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	220a      	movs	r2, #10
 800409c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800409e:	4b03      	ldr	r3, [pc, #12]	; (80040ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bc80      	pop	{r7}
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	20000018 	.word	0x20000018

080040b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80040ba:	2302      	movs	r3, #2
 80040bc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d005      	beq.n	80040d0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80040cc:	2300      	movs	r3, #0
 80040ce:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bc80      	pop	{r7}
 80040da:	4770      	bx	lr

080040dc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	4613      	mov	r3, r2
 80040e8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80040f0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	68ba      	ldr	r2, [r7, #8]
 80040f6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80040fa:	88fa      	ldrh	r2, [r7, #6]
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	371c      	adds	r7, #28
 8004108:	46bd      	mov	sp, r7
 800410a:	bc80      	pop	{r7}
 800410c:	4770      	bx	lr

0800410e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800410e:	b480      	push	{r7}
 8004110:	b085      	sub	sp, #20
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
 8004116:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800411e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	bc80      	pop	{r7}
 8004132:	4770      	bx	lr

08004134 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004142:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800414a:	2b00      	cmp	r3, #0
 800414c:	d017      	beq.n	800417e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	7c1b      	ldrb	r3, [r3, #16]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d109      	bne.n	800416a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800415c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004160:	2101      	movs	r1, #1
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f001 fc9f 	bl	8005aa6 <USBD_LL_PrepareReceive>
 8004168:	e007      	b.n	800417a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004170:	2340      	movs	r3, #64	; 0x40
 8004172:	2101      	movs	r1, #1
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f001 fc96 	bl	8005aa6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	e000      	b.n	8004180 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800417e:	2302      	movs	r3, #2
  }
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	4613      	mov	r3, r2
 8004194:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800419c:	2302      	movs	r3, #2
 800419e:	e01a      	b.n	80041d6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	79fa      	ldrb	r2, [r7, #7]
 80041cc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f001 fb0a 	bl	80057e8 <USBD_LL_Init>

  return USBD_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80041de:	b480      	push	{r7}
 80041e0:	b085      	sub	sp, #20
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80041e8:	2300      	movs	r3, #0
 80041ea:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d006      	beq.n	8004200 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80041fa:	2300      	movs	r3, #0
 80041fc:	73fb      	strb	r3, [r7, #15]
 80041fe:	e001      	b.n	8004204 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004200:	2302      	movs	r3, #2
 8004202:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004204:	7bfb      	ldrb	r3, [r7, #15]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	bc80      	pop	{r7}
 800420e:	4770      	bx	lr

08004210 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f001 fb3f 	bl	800589c <USBD_LL_Start>

  return USBD_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr

0800423c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	460b      	mov	r3, r1
 8004246:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004248:	2302      	movs	r3, #2
 800424a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00c      	beq.n	8004270 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	78fa      	ldrb	r2, [r7, #3]
 8004260:	4611      	mov	r1, r2
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	4798      	blx	r3
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8004270:	7bfb      	ldrb	r3, [r7, #15]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b082      	sub	sp, #8
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
 8004282:	460b      	mov	r3, r1
 8004284:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	78fa      	ldrb	r2, [r7, #3]
 8004290:	4611      	mov	r1, r2
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	4798      	blx	r3

  return USBD_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80042b0:	6839      	ldr	r1, [r7, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 feca 	bl	800504c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80042c6:	461a      	mov	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80042d4:	f003 031f 	and.w	r3, r3, #31
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d00c      	beq.n	80042f6 <USBD_LL_SetupStage+0x56>
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d302      	bcc.n	80042e6 <USBD_LL_SetupStage+0x46>
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d010      	beq.n	8004306 <USBD_LL_SetupStage+0x66>
 80042e4:	e017      	b.n	8004316 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80042ec:	4619      	mov	r1, r3
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f9ca 	bl	8004688 <USBD_StdDevReq>
      break;
 80042f4:	e01a      	b.n	800432c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80042fc:	4619      	mov	r1, r3
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 fa2c 	bl	800475c <USBD_StdItfReq>
      break;
 8004304:	e012      	b.n	800432c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800430c:	4619      	mov	r1, r3
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 fa6a 	bl	80047e8 <USBD_StdEPReq>
      break;
 8004314:	e00a      	b.n	800432c <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800431c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004320:	b2db      	uxtb	r3, r3
 8004322:	4619      	mov	r1, r3
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f001 fb19 	bl	800595c <USBD_LL_StallEP>
      break;
 800432a:	bf00      	nop
  }

  return USBD_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b086      	sub	sp, #24
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	460b      	mov	r3, r1
 8004340:	607a      	str	r2, [r7, #4]
 8004342:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004344:	7afb      	ldrb	r3, [r7, #11]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d14b      	bne.n	80043e2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004350:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004358:	2b03      	cmp	r3, #3
 800435a:	d134      	bne.n	80043c6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	68da      	ldr	r2, [r3, #12]
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	429a      	cmp	r2, r3
 8004366:	d919      	bls.n	800439c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	68da      	ldr	r2, [r3, #12]
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	1ad2      	subs	r2, r2, r3
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800437e:	429a      	cmp	r2, r3
 8004380:	d203      	bcs.n	800438a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8004386:	b29b      	uxth	r3, r3
 8004388:	e002      	b.n	8004390 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800438e:	b29b      	uxth	r3, r3
 8004390:	461a      	mov	r2, r3
 8004392:	6879      	ldr	r1, [r7, #4]
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 ff4b 	bl	8005230 <USBD_CtlContinueRx>
 800439a:	e038      	b.n	800440e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00a      	beq.n	80043be <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	d105      	bne.n	80043be <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 ff48 	bl	8005254 <USBD_CtlSendStatus>
 80043c4:	e023      	b.n	800440e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80043cc:	2b05      	cmp	r3, #5
 80043ce:	d11e      	bne.n	800440e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80043d8:	2100      	movs	r1, #0
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f001 fabe 	bl	800595c <USBD_LL_StallEP>
 80043e0:	e015      	b.n	800440e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00d      	beq.n	800440a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80043f4:	2b03      	cmp	r3, #3
 80043f6:	d108      	bne.n	800440a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	7afa      	ldrb	r2, [r7, #11]
 8004402:	4611      	mov	r1, r2
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	4798      	blx	r3
 8004408:	e001      	b.n	800440e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800440a:	2302      	movs	r3, #2
 800440c:	e000      	b.n	8004410 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	460b      	mov	r3, r1
 8004422:	607a      	str	r2, [r7, #4]
 8004424:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004426:	7afb      	ldrb	r3, [r7, #11]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d17f      	bne.n	800452c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	3314      	adds	r3, #20
 8004430:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004438:	2b02      	cmp	r3, #2
 800443a:	d15c      	bne.n	80044f6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	68da      	ldr	r2, [r3, #12]
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	429a      	cmp	r2, r3
 8004446:	d915      	bls.n	8004474 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	68da      	ldr	r2, [r3, #12]
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	1ad2      	subs	r2, r2, r3
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	b29b      	uxth	r3, r3
 800445c:	461a      	mov	r2, r3
 800445e:	6879      	ldr	r1, [r7, #4]
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f000 feb5 	bl	80051d0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004466:	2300      	movs	r3, #0
 8004468:	2200      	movs	r2, #0
 800446a:	2100      	movs	r1, #0
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f001 fb1a 	bl	8005aa6 <USBD_LL_PrepareReceive>
 8004472:	e04e      	b.n	8004512 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	6912      	ldr	r2, [r2, #16]
 800447c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004480:	fb02 f201 	mul.w	r2, r2, r1
 8004484:	1a9b      	subs	r3, r3, r2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d11c      	bne.n	80044c4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	689a      	ldr	r2, [r3, #8]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004492:	429a      	cmp	r2, r3
 8004494:	d316      	bcc.n	80044c4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d20f      	bcs.n	80044c4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80044a4:	2200      	movs	r2, #0
 80044a6:	2100      	movs	r1, #0
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 fe91 	bl	80051d0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80044b6:	2300      	movs	r3, #0
 80044b8:	2200      	movs	r2, #0
 80044ba:	2100      	movs	r1, #0
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f001 faf2 	bl	8005aa6 <USBD_LL_PrepareReceive>
 80044c2:	e026      	b.n	8004512 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00a      	beq.n	80044e6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80044d6:	2b03      	cmp	r3, #3
 80044d8:	d105      	bne.n	80044e6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80044e6:	2180      	movs	r1, #128	; 0x80
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f001 fa37 	bl	800595c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 fec3 	bl	800527a <USBD_CtlReceiveStatus>
 80044f4:	e00d      	b.n	8004512 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80044fc:	2b04      	cmp	r3, #4
 80044fe:	d004      	beq.n	800450a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004506:	2b00      	cmp	r3, #0
 8004508:	d103      	bne.n	8004512 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800450a:	2180      	movs	r1, #128	; 0x80
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f001 fa25 	bl	800595c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004518:	2b01      	cmp	r3, #1
 800451a:	d11d      	bne.n	8004558 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f7ff fe83 	bl	8004228 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800452a:	e015      	b.n	8004558 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00d      	beq.n	8004554 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800453e:	2b03      	cmp	r3, #3
 8004540:	d108      	bne.n	8004554 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	7afa      	ldrb	r2, [r7, #11]
 800454c:	4611      	mov	r1, r2
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	4798      	blx	r3
 8004552:	e001      	b.n	8004558 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004554:	2302      	movs	r3, #2
 8004556:	e000      	b.n	800455a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b082      	sub	sp, #8
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800456a:	2340      	movs	r3, #64	; 0x40
 800456c:	2200      	movs	r2, #0
 800456e:	2100      	movs	r1, #0
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f001 f9ae 	bl	80058d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2240      	movs	r2, #64	; 0x40
 8004582:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004586:	2340      	movs	r3, #64	; 0x40
 8004588:	2200      	movs	r2, #0
 800458a:	2180      	movs	r1, #128	; 0x80
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f001 f9a0 	bl	80058d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2240      	movs	r2, #64	; 0x40
 800459c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d009      	beq.n	80045da <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6852      	ldr	r2, [r2, #4]
 80045d2:	b2d2      	uxtb	r2, r2
 80045d4:	4611      	mov	r1, r2
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	4798      	blx	r3
  }

  return USBD_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	460b      	mov	r3, r1
 80045ee:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	78fa      	ldrb	r2, [r7, #3]
 80045f4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bc80      	pop	{r7}
 8004600:	4770      	bx	lr

08004602 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004602:	b480      	push	{r7}
 8004604:	b083      	sub	sp, #12
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2204      	movs	r2, #4
 800461a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	bc80      	pop	{r7}
 8004628:	4770      	bx	lr

0800462a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800462a:	b480      	push	{r7}
 800462c:	b083      	sub	sp, #12
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004638:	2b04      	cmp	r3, #4
 800463a:	d105      	bne.n	8004648 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr

08004654 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004662:	2b03      	cmp	r3, #3
 8004664:	d10b      	bne.n	800467e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d005      	beq.n	800467e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800469e:	2b20      	cmp	r3, #32
 80046a0:	d004      	beq.n	80046ac <USBD_StdDevReq+0x24>
 80046a2:	2b40      	cmp	r3, #64	; 0x40
 80046a4:	d002      	beq.n	80046ac <USBD_StdDevReq+0x24>
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d008      	beq.n	80046bc <USBD_StdDevReq+0x34>
 80046aa:	e04c      	b.n	8004746 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	6839      	ldr	r1, [r7, #0]
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	4798      	blx	r3
      break;
 80046ba:	e049      	b.n	8004750 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	785b      	ldrb	r3, [r3, #1]
 80046c0:	2b09      	cmp	r3, #9
 80046c2:	d83a      	bhi.n	800473a <USBD_StdDevReq+0xb2>
 80046c4:	a201      	add	r2, pc, #4	; (adr r2, 80046cc <USBD_StdDevReq+0x44>)
 80046c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ca:	bf00      	nop
 80046cc:	0800471d 	.word	0x0800471d
 80046d0:	08004731 	.word	0x08004731
 80046d4:	0800473b 	.word	0x0800473b
 80046d8:	08004727 	.word	0x08004727
 80046dc:	0800473b 	.word	0x0800473b
 80046e0:	080046ff 	.word	0x080046ff
 80046e4:	080046f5 	.word	0x080046f5
 80046e8:	0800473b 	.word	0x0800473b
 80046ec:	08004713 	.word	0x08004713
 80046f0:	08004709 	.word	0x08004709
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80046f4:	6839      	ldr	r1, [r7, #0]
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f9d4 	bl	8004aa4 <USBD_GetDescriptor>
          break;
 80046fc:	e022      	b.n	8004744 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80046fe:	6839      	ldr	r1, [r7, #0]
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 fb37 	bl	8004d74 <USBD_SetAddress>
          break;
 8004706:	e01d      	b.n	8004744 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8004708:	6839      	ldr	r1, [r7, #0]
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 fb74 	bl	8004df8 <USBD_SetConfig>
          break;
 8004710:	e018      	b.n	8004744 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004712:	6839      	ldr	r1, [r7, #0]
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 fbfd 	bl	8004f14 <USBD_GetConfig>
          break;
 800471a:	e013      	b.n	8004744 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800471c:	6839      	ldr	r1, [r7, #0]
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 fc2c 	bl	8004f7c <USBD_GetStatus>
          break;
 8004724:	e00e      	b.n	8004744 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004726:	6839      	ldr	r1, [r7, #0]
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 fc5a 	bl	8004fe2 <USBD_SetFeature>
          break;
 800472e:	e009      	b.n	8004744 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004730:	6839      	ldr	r1, [r7, #0]
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 fc69 	bl	800500a <USBD_ClrFeature>
          break;
 8004738:	e004      	b.n	8004744 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800473a:	6839      	ldr	r1, [r7, #0]
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 fcc1 	bl	80050c4 <USBD_CtlError>
          break;
 8004742:	bf00      	nop
      }
      break;
 8004744:	e004      	b.n	8004750 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8004746:	6839      	ldr	r1, [r7, #0]
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 fcbb 	bl	80050c4 <USBD_CtlError>
      break;
 800474e:	bf00      	nop
  }

  return ret;
 8004750:	7bfb      	ldrb	r3, [r7, #15]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop

0800475c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004766:	2300      	movs	r3, #0
 8004768:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004772:	2b20      	cmp	r3, #32
 8004774:	d003      	beq.n	800477e <USBD_StdItfReq+0x22>
 8004776:	2b40      	cmp	r3, #64	; 0x40
 8004778:	d001      	beq.n	800477e <USBD_StdItfReq+0x22>
 800477a:	2b00      	cmp	r3, #0
 800477c:	d12a      	bne.n	80047d4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004784:	3b01      	subs	r3, #1
 8004786:	2b02      	cmp	r3, #2
 8004788:	d81d      	bhi.n	80047c6 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	889b      	ldrh	r3, [r3, #4]
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b01      	cmp	r3, #1
 8004792:	d813      	bhi.n	80047bc <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	6839      	ldr	r1, [r7, #0]
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	4798      	blx	r3
 80047a2:	4603      	mov	r3, r0
 80047a4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	88db      	ldrh	r3, [r3, #6]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d110      	bne.n	80047d0 <USBD_StdItfReq+0x74>
 80047ae:	7bfb      	ldrb	r3, [r7, #15]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10d      	bne.n	80047d0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 fd4d 	bl	8005254 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80047ba:	e009      	b.n	80047d0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80047bc:	6839      	ldr	r1, [r7, #0]
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 fc80 	bl	80050c4 <USBD_CtlError>
          break;
 80047c4:	e004      	b.n	80047d0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80047c6:	6839      	ldr	r1, [r7, #0]
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 fc7b 	bl	80050c4 <USBD_CtlError>
          break;
 80047ce:	e000      	b.n	80047d2 <USBD_StdItfReq+0x76>
          break;
 80047d0:	bf00      	nop
      }
      break;
 80047d2:	e004      	b.n	80047de <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80047d4:	6839      	ldr	r1, [r7, #0]
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 fc74 	bl	80050c4 <USBD_CtlError>
      break;
 80047dc:	bf00      	nop
  }

  return USBD_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80047f2:	2300      	movs	r3, #0
 80047f4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	889b      	ldrh	r3, [r3, #4]
 80047fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004804:	2b20      	cmp	r3, #32
 8004806:	d004      	beq.n	8004812 <USBD_StdEPReq+0x2a>
 8004808:	2b40      	cmp	r3, #64	; 0x40
 800480a:	d002      	beq.n	8004812 <USBD_StdEPReq+0x2a>
 800480c:	2b00      	cmp	r3, #0
 800480e:	d008      	beq.n	8004822 <USBD_StdEPReq+0x3a>
 8004810:	e13d      	b.n	8004a8e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	6839      	ldr	r1, [r7, #0]
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	4798      	blx	r3
      break;
 8004820:	e13a      	b.n	8004a98 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800482a:	2b20      	cmp	r3, #32
 800482c:	d10a      	bne.n	8004844 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	6839      	ldr	r1, [r7, #0]
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	4798      	blx	r3
 800483c:	4603      	mov	r3, r0
 800483e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8004840:	7bfb      	ldrb	r3, [r7, #15]
 8004842:	e12a      	b.n	8004a9a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	785b      	ldrb	r3, [r3, #1]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d03e      	beq.n	80048ca <USBD_StdEPReq+0xe2>
 800484c:	2b03      	cmp	r3, #3
 800484e:	d002      	beq.n	8004856 <USBD_StdEPReq+0x6e>
 8004850:	2b00      	cmp	r3, #0
 8004852:	d070      	beq.n	8004936 <USBD_StdEPReq+0x14e>
 8004854:	e115      	b.n	8004a82 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800485c:	2b02      	cmp	r3, #2
 800485e:	d002      	beq.n	8004866 <USBD_StdEPReq+0x7e>
 8004860:	2b03      	cmp	r3, #3
 8004862:	d015      	beq.n	8004890 <USBD_StdEPReq+0xa8>
 8004864:	e02b      	b.n	80048be <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004866:	7bbb      	ldrb	r3, [r7, #14]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00c      	beq.n	8004886 <USBD_StdEPReq+0x9e>
 800486c:	7bbb      	ldrb	r3, [r7, #14]
 800486e:	2b80      	cmp	r3, #128	; 0x80
 8004870:	d009      	beq.n	8004886 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004872:	7bbb      	ldrb	r3, [r7, #14]
 8004874:	4619      	mov	r1, r3
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f001 f870 	bl	800595c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800487c:	2180      	movs	r1, #128	; 0x80
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f001 f86c 	bl	800595c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004884:	e020      	b.n	80048c8 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8004886:	6839      	ldr	r1, [r7, #0]
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 fc1b 	bl	80050c4 <USBD_CtlError>
              break;
 800488e:	e01b      	b.n	80048c8 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	885b      	ldrh	r3, [r3, #2]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10e      	bne.n	80048b6 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8004898:	7bbb      	ldrb	r3, [r7, #14]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00b      	beq.n	80048b6 <USBD_StdEPReq+0xce>
 800489e:	7bbb      	ldrb	r3, [r7, #14]
 80048a0:	2b80      	cmp	r3, #128	; 0x80
 80048a2:	d008      	beq.n	80048b6 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	88db      	ldrh	r3, [r3, #6]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d104      	bne.n	80048b6 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80048ac:	7bbb      	ldrb	r3, [r7, #14]
 80048ae:	4619      	mov	r1, r3
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f001 f853 	bl	800595c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 fccc 	bl	8005254 <USBD_CtlSendStatus>

              break;
 80048bc:	e004      	b.n	80048c8 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80048be:	6839      	ldr	r1, [r7, #0]
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 fbff 	bl	80050c4 <USBD_CtlError>
              break;
 80048c6:	bf00      	nop
          }
          break;
 80048c8:	e0e0      	b.n	8004a8c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d002      	beq.n	80048da <USBD_StdEPReq+0xf2>
 80048d4:	2b03      	cmp	r3, #3
 80048d6:	d015      	beq.n	8004904 <USBD_StdEPReq+0x11c>
 80048d8:	e026      	b.n	8004928 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80048da:	7bbb      	ldrb	r3, [r7, #14]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00c      	beq.n	80048fa <USBD_StdEPReq+0x112>
 80048e0:	7bbb      	ldrb	r3, [r7, #14]
 80048e2:	2b80      	cmp	r3, #128	; 0x80
 80048e4:	d009      	beq.n	80048fa <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80048e6:	7bbb      	ldrb	r3, [r7, #14]
 80048e8:	4619      	mov	r1, r3
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f001 f836 	bl	800595c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80048f0:	2180      	movs	r1, #128	; 0x80
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f001 f832 	bl	800595c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80048f8:	e01c      	b.n	8004934 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80048fa:	6839      	ldr	r1, [r7, #0]
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 fbe1 	bl	80050c4 <USBD_CtlError>
              break;
 8004902:	e017      	b.n	8004934 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	885b      	ldrh	r3, [r3, #2]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d112      	bne.n	8004932 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800490c:	7bbb      	ldrb	r3, [r7, #14]
 800490e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004912:	2b00      	cmp	r3, #0
 8004914:	d004      	beq.n	8004920 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8004916:	7bbb      	ldrb	r3, [r7, #14]
 8004918:	4619      	mov	r1, r3
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f001 f83d 	bl	800599a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 fc97 	bl	8005254 <USBD_CtlSendStatus>
              }
              break;
 8004926:	e004      	b.n	8004932 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8004928:	6839      	ldr	r1, [r7, #0]
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fbca 	bl	80050c4 <USBD_CtlError>
              break;
 8004930:	e000      	b.n	8004934 <USBD_StdEPReq+0x14c>
              break;
 8004932:	bf00      	nop
          }
          break;
 8004934:	e0aa      	b.n	8004a8c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800493c:	2b02      	cmp	r3, #2
 800493e:	d002      	beq.n	8004946 <USBD_StdEPReq+0x15e>
 8004940:	2b03      	cmp	r3, #3
 8004942:	d032      	beq.n	80049aa <USBD_StdEPReq+0x1c2>
 8004944:	e097      	b.n	8004a76 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004946:	7bbb      	ldrb	r3, [r7, #14]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d007      	beq.n	800495c <USBD_StdEPReq+0x174>
 800494c:	7bbb      	ldrb	r3, [r7, #14]
 800494e:	2b80      	cmp	r3, #128	; 0x80
 8004950:	d004      	beq.n	800495c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8004952:	6839      	ldr	r1, [r7, #0]
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 fbb5 	bl	80050c4 <USBD_CtlError>
                break;
 800495a:	e091      	b.n	8004a80 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800495c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004960:	2b00      	cmp	r3, #0
 8004962:	da0b      	bge.n	800497c <USBD_StdEPReq+0x194>
 8004964:	7bbb      	ldrb	r3, [r7, #14]
 8004966:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800496a:	4613      	mov	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	3310      	adds	r3, #16
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	4413      	add	r3, r2
 8004978:	3304      	adds	r3, #4
 800497a:	e00b      	b.n	8004994 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800497c:	7bbb      	ldrb	r3, [r7, #14]
 800497e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004982:	4613      	mov	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4413      	add	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	4413      	add	r3, r2
 8004992:	3304      	adds	r3, #4
 8004994:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	2202      	movs	r2, #2
 80049a0:	4619      	mov	r1, r3
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 fbf8 	bl	8005198 <USBD_CtlSendData>
              break;
 80049a8:	e06a      	b.n	8004a80 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80049aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	da11      	bge.n	80049d6 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80049b2:	7bbb      	ldrb	r3, [r7, #14]
 80049b4:	f003 020f 	and.w	r2, r3, #15
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	4613      	mov	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	440b      	add	r3, r1
 80049c4:	3318      	adds	r3, #24
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d117      	bne.n	80049fc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80049cc:	6839      	ldr	r1, [r7, #0]
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 fb78 	bl	80050c4 <USBD_CtlError>
                  break;
 80049d4:	e054      	b.n	8004a80 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80049d6:	7bbb      	ldrb	r3, [r7, #14]
 80049d8:	f003 020f 	and.w	r2, r3, #15
 80049dc:	6879      	ldr	r1, [r7, #4]
 80049de:	4613      	mov	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	440b      	add	r3, r1
 80049e8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d104      	bne.n	80049fc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80049f2:	6839      	ldr	r1, [r7, #0]
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 fb65 	bl	80050c4 <USBD_CtlError>
                  break;
 80049fa:	e041      	b.n	8004a80 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80049fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	da0b      	bge.n	8004a1c <USBD_StdEPReq+0x234>
 8004a04:	7bbb      	ldrb	r3, [r7, #14]
 8004a06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	3310      	adds	r3, #16
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	4413      	add	r3, r2
 8004a18:	3304      	adds	r3, #4
 8004a1a:	e00b      	b.n	8004a34 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004a1c:	7bbb      	ldrb	r3, [r7, #14]
 8004a1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004a22:	4613      	mov	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	4413      	add	r3, r2
 8004a32:	3304      	adds	r3, #4
 8004a34:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004a36:	7bbb      	ldrb	r3, [r7, #14]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <USBD_StdEPReq+0x25a>
 8004a3c:	7bbb      	ldrb	r3, [r7, #14]
 8004a3e:	2b80      	cmp	r3, #128	; 0x80
 8004a40:	d103      	bne.n	8004a4a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	e00e      	b.n	8004a68 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8004a4a:	7bbb      	ldrb	r3, [r7, #14]
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 ffc2 	bl	80059d8 <USBD_LL_IsStallEP>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	e002      	b.n	8004a68 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	2200      	movs	r2, #0
 8004a66:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fb92 	bl	8005198 <USBD_CtlSendData>
              break;
 8004a74:	e004      	b.n	8004a80 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8004a76:	6839      	ldr	r1, [r7, #0]
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 fb23 	bl	80050c4 <USBD_CtlError>
              break;
 8004a7e:	bf00      	nop
          }
          break;
 8004a80:	e004      	b.n	8004a8c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8004a82:	6839      	ldr	r1, [r7, #0]
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 fb1d 	bl	80050c4 <USBD_CtlError>
          break;
 8004a8a:	bf00      	nop
      }
      break;
 8004a8c:	e004      	b.n	8004a98 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8004a8e:	6839      	ldr	r1, [r7, #0]
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 fb17 	bl	80050c4 <USBD_CtlError>
      break;
 8004a96:	bf00      	nop
  }

  return ret;
 8004a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
	...

08004aa4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	885b      	ldrh	r3, [r3, #2]
 8004abe:	0a1b      	lsrs	r3, r3, #8
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	2b06      	cmp	r3, #6
 8004ac6:	f200 8128 	bhi.w	8004d1a <USBD_GetDescriptor+0x276>
 8004aca:	a201      	add	r2, pc, #4	; (adr r2, 8004ad0 <USBD_GetDescriptor+0x2c>)
 8004acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad0:	08004aed 	.word	0x08004aed
 8004ad4:	08004b05 	.word	0x08004b05
 8004ad8:	08004b45 	.word	0x08004b45
 8004adc:	08004d1b 	.word	0x08004d1b
 8004ae0:	08004d1b 	.word	0x08004d1b
 8004ae4:	08004cbb 	.word	0x08004cbb
 8004ae8:	08004ce7 	.word	0x08004ce7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	7c12      	ldrb	r2, [r2, #16]
 8004af8:	f107 0108 	add.w	r1, r7, #8
 8004afc:	4610      	mov	r0, r2
 8004afe:	4798      	blx	r3
 8004b00:	60f8      	str	r0, [r7, #12]
      break;
 8004b02:	e112      	b.n	8004d2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	7c1b      	ldrb	r3, [r3, #16]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10d      	bne.n	8004b28 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b14:	f107 0208 	add.w	r2, r7, #8
 8004b18:	4610      	mov	r0, r2
 8004b1a:	4798      	blx	r3
 8004b1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	3301      	adds	r3, #1
 8004b22:	2202      	movs	r2, #2
 8004b24:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8004b26:	e100      	b.n	8004d2a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b30:	f107 0208 	add.w	r2, r7, #8
 8004b34:	4610      	mov	r0, r2
 8004b36:	4798      	blx	r3
 8004b38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	2202      	movs	r2, #2
 8004b40:	701a      	strb	r2, [r3, #0]
      break;
 8004b42:	e0f2      	b.n	8004d2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	885b      	ldrh	r3, [r3, #2]
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b05      	cmp	r3, #5
 8004b4c:	f200 80ac 	bhi.w	8004ca8 <USBD_GetDescriptor+0x204>
 8004b50:	a201      	add	r2, pc, #4	; (adr r2, 8004b58 <USBD_GetDescriptor+0xb4>)
 8004b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b56:	bf00      	nop
 8004b58:	08004b71 	.word	0x08004b71
 8004b5c:	08004ba5 	.word	0x08004ba5
 8004b60:	08004bd9 	.word	0x08004bd9
 8004b64:	08004c0d 	.word	0x08004c0d
 8004b68:	08004c41 	.word	0x08004c41
 8004b6c:	08004c75 	.word	0x08004c75
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00b      	beq.n	8004b94 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	7c12      	ldrb	r2, [r2, #16]
 8004b88:	f107 0108 	add.w	r1, r7, #8
 8004b8c:	4610      	mov	r0, r2
 8004b8e:	4798      	blx	r3
 8004b90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004b92:	e091      	b.n	8004cb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004b94:	6839      	ldr	r1, [r7, #0]
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 fa94 	bl	80050c4 <USBD_CtlError>
            err++;
 8004b9c:	7afb      	ldrb	r3, [r7, #11]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	72fb      	strb	r3, [r7, #11]
          break;
 8004ba2:	e089      	b.n	8004cb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00b      	beq.n	8004bc8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	7c12      	ldrb	r2, [r2, #16]
 8004bbc:	f107 0108 	add.w	r1, r7, #8
 8004bc0:	4610      	mov	r0, r2
 8004bc2:	4798      	blx	r3
 8004bc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004bc6:	e077      	b.n	8004cb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004bc8:	6839      	ldr	r1, [r7, #0]
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 fa7a 	bl	80050c4 <USBD_CtlError>
            err++;
 8004bd0:	7afb      	ldrb	r3, [r7, #11]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	72fb      	strb	r3, [r7, #11]
          break;
 8004bd6:	e06f      	b.n	8004cb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00b      	beq.n	8004bfc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	7c12      	ldrb	r2, [r2, #16]
 8004bf0:	f107 0108 	add.w	r1, r7, #8
 8004bf4:	4610      	mov	r0, r2
 8004bf6:	4798      	blx	r3
 8004bf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004bfa:	e05d      	b.n	8004cb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004bfc:	6839      	ldr	r1, [r7, #0]
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fa60 	bl	80050c4 <USBD_CtlError>
            err++;
 8004c04:	7afb      	ldrb	r3, [r7, #11]
 8004c06:	3301      	adds	r3, #1
 8004c08:	72fb      	strb	r3, [r7, #11]
          break;
 8004c0a:	e055      	b.n	8004cb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00b      	beq.n	8004c30 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	7c12      	ldrb	r2, [r2, #16]
 8004c24:	f107 0108 	add.w	r1, r7, #8
 8004c28:	4610      	mov	r0, r2
 8004c2a:	4798      	blx	r3
 8004c2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004c2e:	e043      	b.n	8004cb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004c30:	6839      	ldr	r1, [r7, #0]
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 fa46 	bl	80050c4 <USBD_CtlError>
            err++;
 8004c38:	7afb      	ldrb	r3, [r7, #11]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	72fb      	strb	r3, [r7, #11]
          break;
 8004c3e:	e03b      	b.n	8004cb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00b      	beq.n	8004c64 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	7c12      	ldrb	r2, [r2, #16]
 8004c58:	f107 0108 	add.w	r1, r7, #8
 8004c5c:	4610      	mov	r0, r2
 8004c5e:	4798      	blx	r3
 8004c60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004c62:	e029      	b.n	8004cb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004c64:	6839      	ldr	r1, [r7, #0]
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 fa2c 	bl	80050c4 <USBD_CtlError>
            err++;
 8004c6c:	7afb      	ldrb	r3, [r7, #11]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	72fb      	strb	r3, [r7, #11]
          break;
 8004c72:	e021      	b.n	8004cb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00b      	beq.n	8004c98 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	7c12      	ldrb	r2, [r2, #16]
 8004c8c:	f107 0108 	add.w	r1, r7, #8
 8004c90:	4610      	mov	r0, r2
 8004c92:	4798      	blx	r3
 8004c94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004c96:	e00f      	b.n	8004cb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004c98:	6839      	ldr	r1, [r7, #0]
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 fa12 	bl	80050c4 <USBD_CtlError>
            err++;
 8004ca0:	7afb      	ldrb	r3, [r7, #11]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	72fb      	strb	r3, [r7, #11]
          break;
 8004ca6:	e007      	b.n	8004cb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8004ca8:	6839      	ldr	r1, [r7, #0]
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 fa0a 	bl	80050c4 <USBD_CtlError>
          err++;
 8004cb0:	7afb      	ldrb	r3, [r7, #11]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8004cb6:	e038      	b.n	8004d2a <USBD_GetDescriptor+0x286>
 8004cb8:	e037      	b.n	8004d2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	7c1b      	ldrb	r3, [r3, #16]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d109      	bne.n	8004cd6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cca:	f107 0208 	add.w	r2, r7, #8
 8004cce:	4610      	mov	r0, r2
 8004cd0:	4798      	blx	r3
 8004cd2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004cd4:	e029      	b.n	8004d2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8004cd6:	6839      	ldr	r1, [r7, #0]
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 f9f3 	bl	80050c4 <USBD_CtlError>
        err++;
 8004cde:	7afb      	ldrb	r3, [r7, #11]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	72fb      	strb	r3, [r7, #11]
      break;
 8004ce4:	e021      	b.n	8004d2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	7c1b      	ldrb	r3, [r3, #16]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10d      	bne.n	8004d0a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf6:	f107 0208 	add.w	r2, r7, #8
 8004cfa:	4610      	mov	r0, r2
 8004cfc:	4798      	blx	r3
 8004cfe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	3301      	adds	r3, #1
 8004d04:	2207      	movs	r2, #7
 8004d06:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004d08:	e00f      	b.n	8004d2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8004d0a:	6839      	ldr	r1, [r7, #0]
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f9d9 	bl	80050c4 <USBD_CtlError>
        err++;
 8004d12:	7afb      	ldrb	r3, [r7, #11]
 8004d14:	3301      	adds	r3, #1
 8004d16:	72fb      	strb	r3, [r7, #11]
      break;
 8004d18:	e007      	b.n	8004d2a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8004d1a:	6839      	ldr	r1, [r7, #0]
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 f9d1 	bl	80050c4 <USBD_CtlError>
      err++;
 8004d22:	7afb      	ldrb	r3, [r7, #11]
 8004d24:	3301      	adds	r3, #1
 8004d26:	72fb      	strb	r3, [r7, #11]
      break;
 8004d28:	bf00      	nop
  }

  if (err != 0U)
 8004d2a:	7afb      	ldrb	r3, [r7, #11]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d11c      	bne.n	8004d6a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8004d30:	893b      	ldrh	r3, [r7, #8]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d011      	beq.n	8004d5a <USBD_GetDescriptor+0x2b6>
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	88db      	ldrh	r3, [r3, #6]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00d      	beq.n	8004d5a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	88da      	ldrh	r2, [r3, #6]
 8004d42:	893b      	ldrh	r3, [r7, #8]
 8004d44:	4293      	cmp	r3, r2
 8004d46:	bf28      	it	cs
 8004d48:	4613      	movcs	r3, r2
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004d4e:	893b      	ldrh	r3, [r7, #8]
 8004d50:	461a      	mov	r2, r3
 8004d52:	68f9      	ldr	r1, [r7, #12]
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 fa1f 	bl	8005198 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	88db      	ldrh	r3, [r3, #6]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d104      	bne.n	8004d6c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fa76 	bl	8005254 <USBD_CtlSendStatus>
 8004d68:	e000      	b.n	8004d6c <USBD_GetDescriptor+0x2c8>
    return;
 8004d6a:	bf00      	nop
    }
  }
}
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop

08004d74 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	889b      	ldrh	r3, [r3, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d130      	bne.n	8004de8 <USBD_SetAddress+0x74>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	88db      	ldrh	r3, [r3, #6]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d12c      	bne.n	8004de8 <USBD_SetAddress+0x74>
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	885b      	ldrh	r3, [r3, #2]
 8004d92:	2b7f      	cmp	r3, #127	; 0x7f
 8004d94:	d828      	bhi.n	8004de8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	885b      	ldrh	r3, [r3, #2]
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004da0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004da8:	2b03      	cmp	r3, #3
 8004daa:	d104      	bne.n	8004db6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8004dac:	6839      	ldr	r1, [r7, #0]
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f988 	bl	80050c4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004db4:	e01c      	b.n	8004df0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	7bfa      	ldrb	r2, [r7, #15]
 8004dba:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004dbe:	7bfb      	ldrb	r3, [r7, #15]
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 fe2d 	bl	8005a22 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 fa43 	bl	8005254 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8004dce:	7bfb      	ldrb	r3, [r7, #15]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d004      	beq.n	8004dde <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ddc:	e008      	b.n	8004df0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004de6:	e003      	b.n	8004df0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8004de8:	6839      	ldr	r1, [r7, #0]
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f96a 	bl	80050c4 <USBD_CtlError>
  }
}
 8004df0:	bf00      	nop
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	885b      	ldrh	r3, [r3, #2]
 8004e06:	b2da      	uxtb	r2, r3
 8004e08:	4b41      	ldr	r3, [pc, #260]	; (8004f10 <USBD_SetConfig+0x118>)
 8004e0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004e0c:	4b40      	ldr	r3, [pc, #256]	; (8004f10 <USBD_SetConfig+0x118>)
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d904      	bls.n	8004e1e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8004e14:	6839      	ldr	r1, [r7, #0]
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f954 	bl	80050c4 <USBD_CtlError>
 8004e1c:	e075      	b.n	8004f0a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d002      	beq.n	8004e2e <USBD_SetConfig+0x36>
 8004e28:	2b03      	cmp	r3, #3
 8004e2a:	d023      	beq.n	8004e74 <USBD_SetConfig+0x7c>
 8004e2c:	e062      	b.n	8004ef4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8004e2e:	4b38      	ldr	r3, [pc, #224]	; (8004f10 <USBD_SetConfig+0x118>)
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d01a      	beq.n	8004e6c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8004e36:	4b36      	ldr	r3, [pc, #216]	; (8004f10 <USBD_SetConfig+0x118>)
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2203      	movs	r2, #3
 8004e44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004e48:	4b31      	ldr	r3, [pc, #196]	; (8004f10 <USBD_SetConfig+0x118>)
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7ff f9f4 	bl	800423c <USBD_SetClassConfig>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d104      	bne.n	8004e64 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8004e5a:	6839      	ldr	r1, [r7, #0]
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f931 	bl	80050c4 <USBD_CtlError>
            return;
 8004e62:	e052      	b.n	8004f0a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 f9f5 	bl	8005254 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8004e6a:	e04e      	b.n	8004f0a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f9f1 	bl	8005254 <USBD_CtlSendStatus>
        break;
 8004e72:	e04a      	b.n	8004f0a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8004e74:	4b26      	ldr	r3, [pc, #152]	; (8004f10 <USBD_SetConfig+0x118>)
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d112      	bne.n	8004ea2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2202      	movs	r2, #2
 8004e80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8004e84:	4b22      	ldr	r3, [pc, #136]	; (8004f10 <USBD_SetConfig+0x118>)
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	461a      	mov	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8004e8e:	4b20      	ldr	r3, [pc, #128]	; (8004f10 <USBD_SetConfig+0x118>)
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	4619      	mov	r1, r3
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7ff f9f0 	bl	800427a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f9da 	bl	8005254 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8004ea0:	e033      	b.n	8004f0a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8004ea2:	4b1b      	ldr	r3, [pc, #108]	; (8004f10 <USBD_SetConfig+0x118>)
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d01d      	beq.n	8004eec <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f7ff f9de 	bl	800427a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8004ebe:	4b14      	ldr	r3, [pc, #80]	; (8004f10 <USBD_SetConfig+0x118>)
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004ec8:	4b11      	ldr	r3, [pc, #68]	; (8004f10 <USBD_SetConfig+0x118>)
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	4619      	mov	r1, r3
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7ff f9b4 	bl	800423c <USBD_SetClassConfig>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d104      	bne.n	8004ee4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8004eda:	6839      	ldr	r1, [r7, #0]
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f8f1 	bl	80050c4 <USBD_CtlError>
            return;
 8004ee2:	e012      	b.n	8004f0a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f9b5 	bl	8005254 <USBD_CtlSendStatus>
        break;
 8004eea:	e00e      	b.n	8004f0a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f9b1 	bl	8005254 <USBD_CtlSendStatus>
        break;
 8004ef2:	e00a      	b.n	8004f0a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8004ef4:	6839      	ldr	r1, [r7, #0]
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f8e4 	bl	80050c4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8004efc:	4b04      	ldr	r3, [pc, #16]	; (8004f10 <USBD_SetConfig+0x118>)
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	4619      	mov	r1, r3
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7ff f9b9 	bl	800427a <USBD_ClrClassConfig>
        break;
 8004f08:	bf00      	nop
    }
  }
}
 8004f0a:	3708      	adds	r7, #8
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	200001a4 	.word	0x200001a4

08004f14 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	88db      	ldrh	r3, [r3, #6]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d004      	beq.n	8004f30 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8004f26:	6839      	ldr	r1, [r7, #0]
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 f8cb 	bl	80050c4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8004f2e:	e021      	b.n	8004f74 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	db17      	blt.n	8004f6a <USBD_GetConfig+0x56>
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	dd02      	ble.n	8004f44 <USBD_GetConfig+0x30>
 8004f3e:	2b03      	cmp	r3, #3
 8004f40:	d00b      	beq.n	8004f5a <USBD_GetConfig+0x46>
 8004f42:	e012      	b.n	8004f6a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	3308      	adds	r3, #8
 8004f4e:	2201      	movs	r2, #1
 8004f50:	4619      	mov	r1, r3
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f920 	bl	8005198 <USBD_CtlSendData>
        break;
 8004f58:	e00c      	b.n	8004f74 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	3304      	adds	r3, #4
 8004f5e:	2201      	movs	r2, #1
 8004f60:	4619      	mov	r1, r3
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f918 	bl	8005198 <USBD_CtlSendData>
        break;
 8004f68:	e004      	b.n	8004f74 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8004f6a:	6839      	ldr	r1, [r7, #0]
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 f8a9 	bl	80050c4 <USBD_CtlError>
        break;
 8004f72:	bf00      	nop
}
 8004f74:	bf00      	nop
 8004f76:	3708      	adds	r7, #8
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d81e      	bhi.n	8004fd0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	88db      	ldrh	r3, [r3, #6]
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d004      	beq.n	8004fa4 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8004f9a:	6839      	ldr	r1, [r7, #0]
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f891 	bl	80050c4 <USBD_CtlError>
        break;
 8004fa2:	e01a      	b.n	8004fda <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d005      	beq.n	8004fc0 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f043 0202 	orr.w	r2, r3, #2
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	330c      	adds	r3, #12
 8004fc4:	2202      	movs	r2, #2
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f8e5 	bl	8005198 <USBD_CtlSendData>
      break;
 8004fce:	e004      	b.n	8004fda <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8004fd0:	6839      	ldr	r1, [r7, #0]
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f876 	bl	80050c4 <USBD_CtlError>
      break;
 8004fd8:	bf00      	nop
  }
}
 8004fda:	bf00      	nop
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b082      	sub	sp, #8
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
 8004fea:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	885b      	ldrh	r3, [r3, #2]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d106      	bne.n	8005002 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 f929 	bl	8005254 <USBD_CtlSendStatus>
  }
}
 8005002:	bf00      	nop
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b082      	sub	sp, #8
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800501a:	3b01      	subs	r3, #1
 800501c:	2b02      	cmp	r3, #2
 800501e:	d80b      	bhi.n	8005038 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	885b      	ldrh	r3, [r3, #2]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d10c      	bne.n	8005042 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 f90f 	bl	8005254 <USBD_CtlSendStatus>
      }
      break;
 8005036:	e004      	b.n	8005042 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005038:	6839      	ldr	r1, [r7, #0]
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f842 	bl	80050c4 <USBD_CtlError>
      break;
 8005040:	e000      	b.n	8005044 <USBD_ClrFeature+0x3a>
      break;
 8005042:	bf00      	nop
  }
}
 8005044:	bf00      	nop
 8005046:	3708      	adds	r7, #8
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	781a      	ldrb	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	785a      	ldrb	r2, [r3, #1]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	3302      	adds	r3, #2
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	b29a      	uxth	r2, r3
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	3303      	adds	r3, #3
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	b29b      	uxth	r3, r3
 8005076:	021b      	lsls	r3, r3, #8
 8005078:	b29b      	uxth	r3, r3
 800507a:	4413      	add	r3, r2
 800507c:	b29a      	uxth	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	3304      	adds	r3, #4
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	b29a      	uxth	r2, r3
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	3305      	adds	r3, #5
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	b29b      	uxth	r3, r3
 8005092:	021b      	lsls	r3, r3, #8
 8005094:	b29b      	uxth	r3, r3
 8005096:	4413      	add	r3, r2
 8005098:	b29a      	uxth	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	3306      	adds	r3, #6
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	3307      	adds	r3, #7
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	021b      	lsls	r3, r3, #8
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	4413      	add	r3, r2
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	80da      	strh	r2, [r3, #6]

}
 80050ba:	bf00      	nop
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	bc80      	pop	{r7}
 80050c2:	4770      	bx	lr

080050c4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80050ce:	2180      	movs	r1, #128	; 0x80
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 fc43 	bl	800595c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80050d6:	2100      	movs	r1, #0
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 fc3f 	bl	800595c <USBD_LL_StallEP>
}
 80050de:	bf00      	nop
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b086      	sub	sp, #24
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	60f8      	str	r0, [r7, #12]
 80050ee:	60b9      	str	r1, [r7, #8]
 80050f0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d032      	beq.n	8005162 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f000 f834 	bl	800516a <USBD_GetLen>
 8005102:	4603      	mov	r3, r0
 8005104:	3301      	adds	r3, #1
 8005106:	b29b      	uxth	r3, r3
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	b29a      	uxth	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005110:	7dfb      	ldrb	r3, [r7, #23]
 8005112:	1c5a      	adds	r2, r3, #1
 8005114:	75fa      	strb	r2, [r7, #23]
 8005116:	461a      	mov	r2, r3
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	4413      	add	r3, r2
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	7812      	ldrb	r2, [r2, #0]
 8005120:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005122:	7dfb      	ldrb	r3, [r7, #23]
 8005124:	1c5a      	adds	r2, r3, #1
 8005126:	75fa      	strb	r2, [r7, #23]
 8005128:	461a      	mov	r2, r3
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	4413      	add	r3, r2
 800512e:	2203      	movs	r2, #3
 8005130:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8005132:	e012      	b.n	800515a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	60fa      	str	r2, [r7, #12]
 800513a:	7dfa      	ldrb	r2, [r7, #23]
 800513c:	1c51      	adds	r1, r2, #1
 800513e:	75f9      	strb	r1, [r7, #23]
 8005140:	4611      	mov	r1, r2
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	440a      	add	r2, r1
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800514a:	7dfb      	ldrb	r3, [r7, #23]
 800514c:	1c5a      	adds	r2, r3, #1
 800514e:	75fa      	strb	r2, [r7, #23]
 8005150:	461a      	mov	r2, r3
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	4413      	add	r3, r2
 8005156:	2200      	movs	r2, #0
 8005158:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1e8      	bne.n	8005134 <USBD_GetString+0x4e>
    }
  }
}
 8005162:	bf00      	nop
 8005164:	3718      	adds	r7, #24
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800516a:	b480      	push	{r7}
 800516c:	b085      	sub	sp, #20
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005172:	2300      	movs	r3, #0
 8005174:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8005176:	e005      	b.n	8005184 <USBD_GetLen+0x1a>
  {
    len++;
 8005178:	7bfb      	ldrb	r3, [r7, #15]
 800517a:	3301      	adds	r3, #1
 800517c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	3301      	adds	r3, #1
 8005182:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1f5      	bne.n	8005178 <USBD_GetLen+0xe>
  }

  return len;
 800518c:	7bfb      	ldrb	r3, [r7, #15]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3714      	adds	r7, #20
 8005192:	46bd      	mov	sp, r7
 8005194:	bc80      	pop	{r7}
 8005196:	4770      	bx	lr

08005198 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	4613      	mov	r3, r2
 80051a4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2202      	movs	r2, #2
 80051aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80051ae:	88fa      	ldrh	r2, [r7, #6]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80051b4:	88fa      	ldrh	r2, [r7, #6]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80051ba:	88fb      	ldrh	r3, [r7, #6]
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	2100      	movs	r1, #0
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f000 fc4d 	bl	8005a60 <USBD_LL_Transmit>

  return USBD_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	4613      	mov	r3, r2
 80051dc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80051de:	88fb      	ldrh	r3, [r7, #6]
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	2100      	movs	r1, #0
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 fc3b 	bl	8005a60 <USBD_LL_Transmit>

  return USBD_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	4613      	mov	r3, r2
 8005200:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2203      	movs	r2, #3
 8005206:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800520a:	88fa      	ldrh	r2, [r7, #6]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8005212:	88fa      	ldrh	r2, [r7, #6]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800521a:	88fb      	ldrh	r3, [r7, #6]
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	2100      	movs	r1, #0
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 fc40 	bl	8005aa6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	4613      	mov	r3, r2
 800523c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800523e:	88fb      	ldrh	r3, [r7, #6]
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	2100      	movs	r1, #0
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 fc2e 	bl	8005aa6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2204      	movs	r2, #4
 8005260:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005264:	2300      	movs	r3, #0
 8005266:	2200      	movs	r2, #0
 8005268:	2100      	movs	r1, #0
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 fbf8 	bl	8005a60 <USBD_LL_Transmit>

  return USBD_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b082      	sub	sp, #8
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2205      	movs	r2, #5
 8005286:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800528a:	2300      	movs	r3, #0
 800528c:	2200      	movs	r2, #0
 800528e:	2100      	movs	r1, #0
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 fc08 	bl	8005aa6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80052a4:	2200      	movs	r2, #0
 80052a6:	4912      	ldr	r1, [pc, #72]	; (80052f0 <MX_USB_DEVICE_Init+0x50>)
 80052a8:	4812      	ldr	r0, [pc, #72]	; (80052f4 <MX_USB_DEVICE_Init+0x54>)
 80052aa:	f7fe ff6d 	bl	8004188 <USBD_Init>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d001      	beq.n	80052b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80052b4:	f7fb f886 	bl	80003c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80052b8:	490f      	ldr	r1, [pc, #60]	; (80052f8 <MX_USB_DEVICE_Init+0x58>)
 80052ba:	480e      	ldr	r0, [pc, #56]	; (80052f4 <MX_USB_DEVICE_Init+0x54>)
 80052bc:	f7fe ff8f 	bl	80041de <USBD_RegisterClass>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80052c6:	f7fb f87d 	bl	80003c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80052ca:	490c      	ldr	r1, [pc, #48]	; (80052fc <MX_USB_DEVICE_Init+0x5c>)
 80052cc:	4809      	ldr	r0, [pc, #36]	; (80052f4 <MX_USB_DEVICE_Init+0x54>)
 80052ce:	f7fe feef 	bl	80040b0 <USBD_CDC_RegisterInterface>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80052d8:	f7fb f874 	bl	80003c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80052dc:	4805      	ldr	r0, [pc, #20]	; (80052f4 <MX_USB_DEVICE_Init+0x54>)
 80052de:	f7fe ff97 	bl	8004210 <USBD_Start>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80052e8:	f7fb f86c 	bl	80003c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80052ec:	bf00      	nop
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	20000138 	.word	0x20000138
 80052f4:	200004b8 	.word	0x200004b8
 80052f8:	20000024 	.word	0x20000024
 80052fc:	20000128 	.word	0x20000128

08005300 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005304:	2200      	movs	r2, #0
 8005306:	4905      	ldr	r1, [pc, #20]	; (800531c <CDC_Init_FS+0x1c>)
 8005308:	4805      	ldr	r0, [pc, #20]	; (8005320 <CDC_Init_FS+0x20>)
 800530a:	f7fe fee7 	bl	80040dc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800530e:	4905      	ldr	r1, [pc, #20]	; (8005324 <CDC_Init_FS+0x24>)
 8005310:	4803      	ldr	r0, [pc, #12]	; (8005320 <CDC_Init_FS+0x20>)
 8005312:	f7fe fefc 	bl	800410e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005316:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005318:	4618      	mov	r0, r3
 800531a:	bd80      	pop	{r7, pc}
 800531c:	20000b64 	.word	0x20000b64
 8005320:	200004b8 	.word	0x200004b8
 8005324:	2000077c 	.word	0x2000077c

08005328 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800532c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800532e:	4618      	mov	r0, r3
 8005330:	46bd      	mov	sp, r7
 8005332:	bc80      	pop	{r7}
 8005334:	4770      	bx	lr
	...

08005338 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	4603      	mov	r3, r0
 8005340:	6039      	str	r1, [r7, #0]
 8005342:	71fb      	strb	r3, [r7, #7]
 8005344:	4613      	mov	r3, r2
 8005346:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005348:	79fb      	ldrb	r3, [r7, #7]
 800534a:	2b23      	cmp	r3, #35	; 0x23
 800534c:	d866      	bhi.n	800541c <CDC_Control_FS+0xe4>
 800534e:	a201      	add	r2, pc, #4	; (adr r2, 8005354 <CDC_Control_FS+0x1c>)
 8005350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005354:	0800541d 	.word	0x0800541d
 8005358:	0800541d 	.word	0x0800541d
 800535c:	0800541d 	.word	0x0800541d
 8005360:	0800541d 	.word	0x0800541d
 8005364:	0800541d 	.word	0x0800541d
 8005368:	0800541d 	.word	0x0800541d
 800536c:	0800541d 	.word	0x0800541d
 8005370:	0800541d 	.word	0x0800541d
 8005374:	0800541d 	.word	0x0800541d
 8005378:	0800541d 	.word	0x0800541d
 800537c:	0800541d 	.word	0x0800541d
 8005380:	0800541d 	.word	0x0800541d
 8005384:	0800541d 	.word	0x0800541d
 8005388:	0800541d 	.word	0x0800541d
 800538c:	0800541d 	.word	0x0800541d
 8005390:	0800541d 	.word	0x0800541d
 8005394:	0800541d 	.word	0x0800541d
 8005398:	0800541d 	.word	0x0800541d
 800539c:	0800541d 	.word	0x0800541d
 80053a0:	0800541d 	.word	0x0800541d
 80053a4:	0800541d 	.word	0x0800541d
 80053a8:	0800541d 	.word	0x0800541d
 80053ac:	0800541d 	.word	0x0800541d
 80053b0:	0800541d 	.word	0x0800541d
 80053b4:	0800541d 	.word	0x0800541d
 80053b8:	0800541d 	.word	0x0800541d
 80053bc:	0800541d 	.word	0x0800541d
 80053c0:	0800541d 	.word	0x0800541d
 80053c4:	0800541d 	.word	0x0800541d
 80053c8:	0800541d 	.word	0x0800541d
 80053cc:	0800541d 	.word	0x0800541d
 80053d0:	0800541d 	.word	0x0800541d
 80053d4:	080053e5 	.word	0x080053e5
 80053d8:	08005407 	.word	0x08005407
 80053dc:	0800541d 	.word	0x0800541d
 80053e0:	0800541d 	.word	0x0800541d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(&linecode,pbuf,length>sizeof(linecode)?(sizeof(linecode)):(length));
 80053e4:	88bb      	ldrh	r3, [r7, #4]
 80053e6:	2b0c      	cmp	r3, #12
 80053e8:	bf28      	it	cs
 80053ea:	230c      	movcs	r3, #12
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	461a      	mov	r2, r3
 80053f0:	6839      	ldr	r1, [r7, #0]
 80053f2:	480d      	ldr	r0, [pc, #52]	; (8005428 <CDC_Control_FS+0xf0>)
 80053f4:	f000 fbfe 	bl	8005bf4 <memcpy>
    	linecode.IsUpdate++;
 80053f8:	4b0b      	ldr	r3, [pc, #44]	; (8005428 <CDC_Control_FS+0xf0>)
 80053fa:	7a1b      	ldrb	r3, [r3, #8]
 80053fc:	3301      	adds	r3, #1
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	4b09      	ldr	r3, [pc, #36]	; (8005428 <CDC_Control_FS+0xf0>)
 8005402:	721a      	strb	r2, [r3, #8]
    break;
 8005404:	e00b      	b.n	800541e <CDC_Control_FS+0xe6>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf,&linecode,length>sizeof(linecode)?(sizeof(linecode)):(length));
 8005406:	88bb      	ldrh	r3, [r7, #4]
 8005408:	2b0c      	cmp	r3, #12
 800540a:	bf28      	it	cs
 800540c:	230c      	movcs	r3, #12
 800540e:	b29b      	uxth	r3, r3
 8005410:	461a      	mov	r2, r3
 8005412:	4905      	ldr	r1, [pc, #20]	; (8005428 <CDC_Control_FS+0xf0>)
 8005414:	6838      	ldr	r0, [r7, #0]
 8005416:	f000 fbed 	bl	8005bf4 <memcpy>
    break;
 800541a:	e000      	b.n	800541e <CDC_Control_FS+0xe6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800541c:	bf00      	nop
  }

  return (USBD_OK);
 800541e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005420:	4618      	mov	r0, r3
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	20000000 	.word	0x20000000

0800542c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005436:	6879      	ldr	r1, [r7, #4]
 8005438:	4805      	ldr	r0, [pc, #20]	; (8005450 <CDC_Receive_FS+0x24>)
 800543a:	f7fe fe68 	bl	800410e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800543e:	4804      	ldr	r0, [pc, #16]	; (8005450 <CDC_Receive_FS+0x24>)
 8005440:	f7fe fe78 	bl	8004134 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005444:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005446:	4618      	mov	r0, r3
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	200004b8 	.word	0x200004b8

08005454 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	4603      	mov	r3, r0
 800545c:	6039      	str	r1, [r7, #0]
 800545e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	2212      	movs	r2, #18
 8005464:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005466:	4b03      	ldr	r3, [pc, #12]	; (8005474 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005468:	4618      	mov	r0, r3
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	bc80      	pop	{r7}
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	20000154 	.word	0x20000154

08005478 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	4603      	mov	r3, r0
 8005480:	6039      	str	r1, [r7, #0]
 8005482:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	2204      	movs	r2, #4
 8005488:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800548a:	4b03      	ldr	r3, [pc, #12]	; (8005498 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800548c:	4618      	mov	r0, r3
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	bc80      	pop	{r7}
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	20000168 	.word	0x20000168

0800549c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	4603      	mov	r3, r0
 80054a4:	6039      	str	r1, [r7, #0]
 80054a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80054a8:	79fb      	ldrb	r3, [r7, #7]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d105      	bne.n	80054ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	4907      	ldr	r1, [pc, #28]	; (80054d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80054b2:	4808      	ldr	r0, [pc, #32]	; (80054d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80054b4:	f7ff fe17 	bl	80050e6 <USBD_GetString>
 80054b8:	e004      	b.n	80054c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	4904      	ldr	r1, [pc, #16]	; (80054d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80054be:	4805      	ldr	r0, [pc, #20]	; (80054d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80054c0:	f7ff fe11 	bl	80050e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80054c4:	4b02      	ldr	r3, [pc, #8]	; (80054d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	20000f4c 	.word	0x20000f4c
 80054d4:	08005c48 	.word	0x08005c48

080054d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	4603      	mov	r3, r0
 80054e0:	6039      	str	r1, [r7, #0]
 80054e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	4904      	ldr	r1, [pc, #16]	; (80054f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80054e8:	4804      	ldr	r0, [pc, #16]	; (80054fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80054ea:	f7ff fdfc 	bl	80050e6 <USBD_GetString>
  return USBD_StrDesc;
 80054ee:	4b02      	ldr	r3, [pc, #8]	; (80054f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3708      	adds	r7, #8
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	20000f4c 	.word	0x20000f4c
 80054fc:	08005c48 	.word	0x08005c48

08005500 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	4603      	mov	r3, r0
 8005508:	6039      	str	r1, [r7, #0]
 800550a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	221a      	movs	r2, #26
 8005510:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005512:	f000 f843 	bl	800559c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005516:	4b02      	ldr	r3, [pc, #8]	; (8005520 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005518:	4618      	mov	r0, r3
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	2000016c 	.word	0x2000016c

08005524 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	4603      	mov	r3, r0
 800552c:	6039      	str	r1, [r7, #0]
 800552e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005530:	79fb      	ldrb	r3, [r7, #7]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d105      	bne.n	8005542 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005536:	683a      	ldr	r2, [r7, #0]
 8005538:	4907      	ldr	r1, [pc, #28]	; (8005558 <USBD_FS_ConfigStrDescriptor+0x34>)
 800553a:	4808      	ldr	r0, [pc, #32]	; (800555c <USBD_FS_ConfigStrDescriptor+0x38>)
 800553c:	f7ff fdd3 	bl	80050e6 <USBD_GetString>
 8005540:	e004      	b.n	800554c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005542:	683a      	ldr	r2, [r7, #0]
 8005544:	4904      	ldr	r1, [pc, #16]	; (8005558 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005546:	4805      	ldr	r0, [pc, #20]	; (800555c <USBD_FS_ConfigStrDescriptor+0x38>)
 8005548:	f7ff fdcd 	bl	80050e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800554c:	4b02      	ldr	r3, [pc, #8]	; (8005558 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800554e:	4618      	mov	r0, r3
 8005550:	3708      	adds	r7, #8
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	20000f4c 	.word	0x20000f4c
 800555c:	08005c4c 	.word	0x08005c4c

08005560 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	4603      	mov	r3, r0
 8005568:	6039      	str	r1, [r7, #0]
 800556a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800556c:	79fb      	ldrb	r3, [r7, #7]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d105      	bne.n	800557e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	4907      	ldr	r1, [pc, #28]	; (8005594 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005576:	4808      	ldr	r0, [pc, #32]	; (8005598 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005578:	f7ff fdb5 	bl	80050e6 <USBD_GetString>
 800557c:	e004      	b.n	8005588 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	4904      	ldr	r1, [pc, #16]	; (8005594 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005582:	4805      	ldr	r0, [pc, #20]	; (8005598 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005584:	f7ff fdaf 	bl	80050e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005588:	4b02      	ldr	r3, [pc, #8]	; (8005594 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800558a:	4618      	mov	r0, r3
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	20000f4c 	.word	0x20000f4c
 8005598:	08005c58 	.word	0x08005c58

0800559c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80055a2:	4b0f      	ldr	r3, [pc, #60]	; (80055e0 <Get_SerialNum+0x44>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80055a8:	4b0e      	ldr	r3, [pc, #56]	; (80055e4 <Get_SerialNum+0x48>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80055ae:	4b0e      	ldr	r3, [pc, #56]	; (80055e8 <Get_SerialNum+0x4c>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4413      	add	r3, r2
 80055ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d009      	beq.n	80055d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80055c2:	2208      	movs	r2, #8
 80055c4:	4909      	ldr	r1, [pc, #36]	; (80055ec <Get_SerialNum+0x50>)
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f000 f814 	bl	80055f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80055cc:	2204      	movs	r2, #4
 80055ce:	4908      	ldr	r1, [pc, #32]	; (80055f0 <Get_SerialNum+0x54>)
 80055d0:	68b8      	ldr	r0, [r7, #8]
 80055d2:	f000 f80f 	bl	80055f4 <IntToUnicode>
  }
}
 80055d6:	bf00      	nop
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	1ffff7e8 	.word	0x1ffff7e8
 80055e4:	1ffff7ec 	.word	0x1ffff7ec
 80055e8:	1ffff7f0 	.word	0x1ffff7f0
 80055ec:	2000016e 	.word	0x2000016e
 80055f0:	2000017e 	.word	0x2000017e

080055f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b087      	sub	sp, #28
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	4613      	mov	r3, r2
 8005600:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005602:	2300      	movs	r3, #0
 8005604:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005606:	2300      	movs	r3, #0
 8005608:	75fb      	strb	r3, [r7, #23]
 800560a:	e027      	b.n	800565c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	0f1b      	lsrs	r3, r3, #28
 8005610:	2b09      	cmp	r3, #9
 8005612:	d80b      	bhi.n	800562c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	0f1b      	lsrs	r3, r3, #28
 8005618:	b2da      	uxtb	r2, r3
 800561a:	7dfb      	ldrb	r3, [r7, #23]
 800561c:	005b      	lsls	r3, r3, #1
 800561e:	4619      	mov	r1, r3
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	440b      	add	r3, r1
 8005624:	3230      	adds	r2, #48	; 0x30
 8005626:	b2d2      	uxtb	r2, r2
 8005628:	701a      	strb	r2, [r3, #0]
 800562a:	e00a      	b.n	8005642 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	0f1b      	lsrs	r3, r3, #28
 8005630:	b2da      	uxtb	r2, r3
 8005632:	7dfb      	ldrb	r3, [r7, #23]
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	4619      	mov	r1, r3
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	440b      	add	r3, r1
 800563c:	3237      	adds	r2, #55	; 0x37
 800563e:	b2d2      	uxtb	r2, r2
 8005640:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	011b      	lsls	r3, r3, #4
 8005646:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005648:	7dfb      	ldrb	r3, [r7, #23]
 800564a:	005b      	lsls	r3, r3, #1
 800564c:	3301      	adds	r3, #1
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	4413      	add	r3, r2
 8005652:	2200      	movs	r2, #0
 8005654:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005656:	7dfb      	ldrb	r3, [r7, #23]
 8005658:	3301      	adds	r3, #1
 800565a:	75fb      	strb	r3, [r7, #23]
 800565c:	7dfa      	ldrb	r2, [r7, #23]
 800565e:	79fb      	ldrb	r3, [r7, #7]
 8005660:	429a      	cmp	r2, r3
 8005662:	d3d3      	bcc.n	800560c <IntToUnicode+0x18>
  }
}
 8005664:	bf00      	nop
 8005666:	371c      	adds	r7, #28
 8005668:	46bd      	mov	sp, r7
 800566a:	bc80      	pop	{r7}
 800566c:	4770      	bx	lr
	...

08005670 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a0d      	ldr	r2, [pc, #52]	; (80056b4 <HAL_PCD_MspInit+0x44>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d113      	bne.n	80056aa <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8005682:	4b0d      	ldr	r3, [pc, #52]	; (80056b8 <HAL_PCD_MspInit+0x48>)
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	4a0c      	ldr	r2, [pc, #48]	; (80056b8 <HAL_PCD_MspInit+0x48>)
 8005688:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800568c:	61d3      	str	r3, [r2, #28]
 800568e:	4b0a      	ldr	r3, [pc, #40]	; (80056b8 <HAL_PCD_MspInit+0x48>)
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005696:	60fb      	str	r3, [r7, #12]
 8005698:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800569a:	2200      	movs	r2, #0
 800569c:	2100      	movs	r1, #0
 800569e:	2014      	movs	r0, #20
 80056a0:	f7fb f983 	bl	80009aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80056a4:	2014      	movs	r0, #20
 80056a6:	f7fb f99c 	bl	80009e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80056aa:	bf00      	nop
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	40005c00 	.word	0x40005c00
 80056b8:	40021000 	.word	0x40021000

080056bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80056d0:	4619      	mov	r1, r3
 80056d2:	4610      	mov	r0, r2
 80056d4:	f7fe fde4 	bl	80042a0 <USBD_LL_SetupStage>
}
 80056d8:	bf00      	nop
 80056da:	3708      	adds	r7, #8
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	460b      	mov	r3, r1
 80056ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80056f2:	78fb      	ldrb	r3, [r7, #3]
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	015b      	lsls	r3, r3, #5
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	78fb      	ldrb	r3, [r7, #3]
 8005702:	4619      	mov	r1, r3
 8005704:	f7fe fe17 	bl	8004336 <USBD_LL_DataOutStage>
}
 8005708:	bf00      	nop
 800570a:	3708      	adds	r7, #8
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	460b      	mov	r3, r1
 800571a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8005722:	78fb      	ldrb	r3, [r7, #3]
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	015b      	lsls	r3, r3, #5
 8005728:	4413      	add	r3, r2
 800572a:	333c      	adds	r3, #60	; 0x3c
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	78fb      	ldrb	r3, [r7, #3]
 8005730:	4619      	mov	r1, r3
 8005732:	f7fe fe71 	bl	8004418 <USBD_LL_DataInStage>
}
 8005736:	bf00      	nop
 8005738:	3708      	adds	r7, #8
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b082      	sub	sp, #8
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800574c:	4618      	mov	r0, r3
 800574e:	f7fe ff81 	bl	8004654 <USBD_LL_SOF>
}
 8005752:	bf00      	nop
 8005754:	3708      	adds	r7, #8
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800575a:	b580      	push	{r7, lr}
 800575c:	b084      	sub	sp, #16
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005762:	2301      	movs	r3, #1
 8005764:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	2b02      	cmp	r3, #2
 800576c:	d001      	beq.n	8005772 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800576e:	f7fa fe29 	bl	80003c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005778:	7bfa      	ldrb	r2, [r7, #15]
 800577a:	4611      	mov	r1, r2
 800577c:	4618      	mov	r0, r3
 800577e:	f7fe ff31 	bl	80045e4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005788:	4618      	mov	r0, r3
 800578a:	f7fe feea 	bl	8004562 <USBD_LL_Reset>
}
 800578e:	bf00      	nop
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
	...

08005798 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7fe ff2b 	bl	8004602 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d005      	beq.n	80057c0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80057b4:	4b04      	ldr	r3, [pc, #16]	; (80057c8 <HAL_PCD_SuspendCallback+0x30>)
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	4a03      	ldr	r2, [pc, #12]	; (80057c8 <HAL_PCD_SuspendCallback+0x30>)
 80057ba:	f043 0306 	orr.w	r3, r3, #6
 80057be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80057c0:	bf00      	nop
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	e000ed00 	.word	0xe000ed00

080057cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80057da:	4618      	mov	r0, r3
 80057dc:	f7fe ff25 	bl	800462a <USBD_LL_Resume>
}
 80057e0:	bf00      	nop
 80057e2:	3708      	adds	r7, #8
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80057f0:	4a28      	ldr	r2, [pc, #160]	; (8005894 <USBD_LL_Init+0xac>)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a26      	ldr	r2, [pc, #152]	; (8005894 <USBD_LL_Init+0xac>)
 80057fc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8005800:	4b24      	ldr	r3, [pc, #144]	; (8005894 <USBD_LL_Init+0xac>)
 8005802:	4a25      	ldr	r2, [pc, #148]	; (8005898 <USBD_LL_Init+0xb0>)
 8005804:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005806:	4b23      	ldr	r3, [pc, #140]	; (8005894 <USBD_LL_Init+0xac>)
 8005808:	2208      	movs	r2, #8
 800580a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800580c:	4b21      	ldr	r3, [pc, #132]	; (8005894 <USBD_LL_Init+0xac>)
 800580e:	2202      	movs	r2, #2
 8005810:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005812:	4b20      	ldr	r3, [pc, #128]	; (8005894 <USBD_LL_Init+0xac>)
 8005814:	2200      	movs	r2, #0
 8005816:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8005818:	4b1e      	ldr	r3, [pc, #120]	; (8005894 <USBD_LL_Init+0xac>)
 800581a:	2200      	movs	r2, #0
 800581c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800581e:	4b1d      	ldr	r3, [pc, #116]	; (8005894 <USBD_LL_Init+0xac>)
 8005820:	2200      	movs	r2, #0
 8005822:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005824:	481b      	ldr	r0, [pc, #108]	; (8005894 <USBD_LL_Init+0xac>)
 8005826:	f7fb fb79 	bl	8000f1c <HAL_PCD_Init>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d001      	beq.n	8005834 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8005830:	f7fa fdc8 	bl	80003c4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800583a:	2318      	movs	r3, #24
 800583c:	2200      	movs	r2, #0
 800583e:	2100      	movs	r1, #0
 8005840:	f7fc fa12 	bl	8001c68 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800584a:	2358      	movs	r3, #88	; 0x58
 800584c:	2200      	movs	r2, #0
 800584e:	2180      	movs	r1, #128	; 0x80
 8005850:	f7fc fa0a 	bl	8001c68 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800585a:	23c0      	movs	r3, #192	; 0xc0
 800585c:	2200      	movs	r2, #0
 800585e:	2181      	movs	r1, #129	; 0x81
 8005860:	f7fc fa02 	bl	8001c68 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800586a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800586e:	2200      	movs	r2, #0
 8005870:	2101      	movs	r1, #1
 8005872:	f7fc f9f9 	bl	8001c68 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800587c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005880:	2200      	movs	r2, #0
 8005882:	2182      	movs	r1, #130	; 0x82
 8005884:	f7fc f9f0 	bl	8001c68 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	2000114c 	.word	0x2000114c
 8005898:	40005c00 	.word	0x40005c00

0800589c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80058a4:	2300      	movs	r3, #0
 80058a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80058a8:	2300      	movs	r3, #0
 80058aa:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7fb fc13 	bl	80010de <HAL_PCD_Start>
 80058b8:	4603      	mov	r3, r0
 80058ba:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80058bc:	7bfb      	ldrb	r3, [r7, #15]
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 f948 	bl	8005b54 <USBD_Get_USB_Status>
 80058c4:	4603      	mov	r3, r0
 80058c6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80058c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b084      	sub	sp, #16
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
 80058da:	4608      	mov	r0, r1
 80058dc:	4611      	mov	r1, r2
 80058de:	461a      	mov	r2, r3
 80058e0:	4603      	mov	r3, r0
 80058e2:	70fb      	strb	r3, [r7, #3]
 80058e4:	460b      	mov	r3, r1
 80058e6:	70bb      	strb	r3, [r7, #2]
 80058e8:	4613      	mov	r3, r2
 80058ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80058ec:	2300      	movs	r3, #0
 80058ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80058f0:	2300      	movs	r3, #0
 80058f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80058fa:	78bb      	ldrb	r3, [r7, #2]
 80058fc:	883a      	ldrh	r2, [r7, #0]
 80058fe:	78f9      	ldrb	r1, [r7, #3]
 8005900:	f7fb fd46 	bl	8001390 <HAL_PCD_EP_Open>
 8005904:	4603      	mov	r3, r0
 8005906:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005908:	7bfb      	ldrb	r3, [r7, #15]
 800590a:	4618      	mov	r0, r3
 800590c:	f000 f922 	bl	8005b54 <USBD_Get_USB_Status>
 8005910:	4603      	mov	r3, r0
 8005912:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8005914:	7bbb      	ldrb	r3, [r7, #14]
}
 8005916:	4618      	mov	r0, r3
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b084      	sub	sp, #16
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
 8005926:	460b      	mov	r3, r1
 8005928:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800592a:	2300      	movs	r3, #0
 800592c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800592e:	2300      	movs	r3, #0
 8005930:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005938:	78fa      	ldrb	r2, [r7, #3]
 800593a:	4611      	mov	r1, r2
 800593c:	4618      	mov	r0, r3
 800593e:	f7fb fd87 	bl	8001450 <HAL_PCD_EP_Close>
 8005942:	4603      	mov	r3, r0
 8005944:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005946:	7bfb      	ldrb	r3, [r7, #15]
 8005948:	4618      	mov	r0, r3
 800594a:	f000 f903 	bl	8005b54 <USBD_Get_USB_Status>
 800594e:	4603      	mov	r3, r0
 8005950:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8005952:	7bbb      	ldrb	r3, [r7, #14]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	460b      	mov	r3, r1
 8005966:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005968:	2300      	movs	r3, #0
 800596a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800596c:	2300      	movs	r3, #0
 800596e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005976:	78fa      	ldrb	r2, [r7, #3]
 8005978:	4611      	mov	r1, r2
 800597a:	4618      	mov	r0, r3
 800597c:	f7fb fe31 	bl	80015e2 <HAL_PCD_EP_SetStall>
 8005980:	4603      	mov	r3, r0
 8005982:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005984:	7bfb      	ldrb	r3, [r7, #15]
 8005986:	4618      	mov	r0, r3
 8005988:	f000 f8e4 	bl	8005b54 <USBD_Get_USB_Status>
 800598c:	4603      	mov	r3, r0
 800598e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005990:	7bbb      	ldrb	r3, [r7, #14]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b084      	sub	sp, #16
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	460b      	mov	r3, r1
 80059a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80059a6:	2300      	movs	r3, #0
 80059a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80059aa:	2300      	movs	r3, #0
 80059ac:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059b4:	78fa      	ldrb	r2, [r7, #3]
 80059b6:	4611      	mov	r1, r2
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7fb fe6c 	bl	8001696 <HAL_PCD_EP_ClrStall>
 80059be:	4603      	mov	r3, r0
 80059c0:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80059c2:	7bfb      	ldrb	r3, [r7, #15]
 80059c4:	4618      	mov	r0, r3
 80059c6:	f000 f8c5 	bl	8005b54 <USBD_Get_USB_Status>
 80059ca:	4603      	mov	r3, r0
 80059cc:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 80059ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	460b      	mov	r3, r1
 80059e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059ea:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80059ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	da08      	bge.n	8005a06 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80059f4:	78fb      	ldrb	r3, [r7, #3]
 80059f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	015b      	lsls	r3, r3, #5
 80059fe:	4413      	add	r3, r2
 8005a00:	332a      	adds	r3, #42	; 0x2a
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	e008      	b.n	8005a18 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005a06:	78fb      	ldrb	r3, [r7, #3]
 8005a08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	015b      	lsls	r3, r3, #5
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8005a16:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3714      	adds	r7, #20
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bc80      	pop	{r7}
 8005a20:	4770      	bx	lr

08005a22 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b084      	sub	sp, #16
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005a32:	2300      	movs	r3, #0
 8005a34:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a3c:	78fa      	ldrb	r2, [r7, #3]
 8005a3e:	4611      	mov	r1, r2
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7fb fc80 	bl	8001346 <HAL_PCD_SetAddress>
 8005a46:	4603      	mov	r3, r0
 8005a48:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005a4a:	7bfb      	ldrb	r3, [r7, #15]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f000 f881 	bl	8005b54 <USBD_Get_USB_Status>
 8005a52:	4603      	mov	r3, r0
 8005a54:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005a56:	7bbb      	ldrb	r3, [r7, #14]
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	607a      	str	r2, [r7, #4]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	72fb      	strb	r3, [r7, #11]
 8005a70:	4613      	mov	r3, r2
 8005a72:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005a74:	2300      	movs	r3, #0
 8005a76:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005a82:	893b      	ldrh	r3, [r7, #8]
 8005a84:	7af9      	ldrb	r1, [r7, #11]
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	f7fb fd72 	bl	8001570 <HAL_PCD_EP_Transmit>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005a90:	7dfb      	ldrb	r3, [r7, #23]
 8005a92:	4618      	mov	r0, r3
 8005a94:	f000 f85e 	bl	8005b54 <USBD_Get_USB_Status>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8005a9c:	7dbb      	ldrb	r3, [r7, #22]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3718      	adds	r7, #24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b086      	sub	sp, #24
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	60f8      	str	r0, [r7, #12]
 8005aae:	607a      	str	r2, [r7, #4]
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	72fb      	strb	r3, [r7, #11]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005aba:	2300      	movs	r3, #0
 8005abc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005ac8:	893b      	ldrh	r3, [r7, #8]
 8005aca:	7af9      	ldrb	r1, [r7, #11]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	f7fb fd01 	bl	80014d4 <HAL_PCD_EP_Receive>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005ad6:	7dfb      	ldrb	r3, [r7, #23]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f000 f83b 	bl	8005b54 <USBD_Get_USB_Status>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8005ae2:	7dbb      	ldrb	r3, [r7, #22]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3718      	adds	r7, #24
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	460b      	mov	r3, r1
 8005af6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005afe:	78fa      	ldrb	r2, [r7, #3]
 8005b00:	4611      	mov	r1, r2
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7fb fd20 	bl	8001548 <HAL_PCD_EP_GetRxCount>
 8005b08:	4603      	mov	r3, r0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
	...

08005b14 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8005b1c:	4b02      	ldr	r3, [pc, #8]	; (8005b28 <USBD_static_malloc+0x14>)
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bc80      	pop	{r7}
 8005b26:	4770      	bx	lr
 8005b28:	200001a8 	.word	0x200001a8

08005b2c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]

}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bc80      	pop	{r7}
 8005b3c:	4770      	bx	lr

08005b3e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b083      	sub	sp, #12
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
 8005b46:	460b      	mov	r3, r1
 8005b48:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8005b4a:	bf00      	nop
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bc80      	pop	{r7}
 8005b52:	4770      	bx	lr

08005b54 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005b62:	79fb      	ldrb	r3, [r7, #7]
 8005b64:	2b03      	cmp	r3, #3
 8005b66:	d817      	bhi.n	8005b98 <USBD_Get_USB_Status+0x44>
 8005b68:	a201      	add	r2, pc, #4	; (adr r2, 8005b70 <USBD_Get_USB_Status+0x1c>)
 8005b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6e:	bf00      	nop
 8005b70:	08005b81 	.word	0x08005b81
 8005b74:	08005b87 	.word	0x08005b87
 8005b78:	08005b8d 	.word	0x08005b8d
 8005b7c:	08005b93 	.word	0x08005b93
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005b80:	2300      	movs	r3, #0
 8005b82:	73fb      	strb	r3, [r7, #15]
    break;
 8005b84:	e00b      	b.n	8005b9e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005b86:	2302      	movs	r3, #2
 8005b88:	73fb      	strb	r3, [r7, #15]
    break;
 8005b8a:	e008      	b.n	8005b9e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	73fb      	strb	r3, [r7, #15]
    break;
 8005b90:	e005      	b.n	8005b9e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005b92:	2302      	movs	r3, #2
 8005b94:	73fb      	strb	r3, [r7, #15]
    break;
 8005b96:	e002      	b.n	8005b9e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8005b98:	2302      	movs	r3, #2
 8005b9a:	73fb      	strb	r3, [r7, #15]
    break;
 8005b9c:	bf00      	nop
  }
  return usb_status;
 8005b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bc80      	pop	{r7}
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop

08005bac <__libc_init_array>:
 8005bac:	b570      	push	{r4, r5, r6, lr}
 8005bae:	2500      	movs	r5, #0
 8005bb0:	4e0c      	ldr	r6, [pc, #48]	; (8005be4 <__libc_init_array+0x38>)
 8005bb2:	4c0d      	ldr	r4, [pc, #52]	; (8005be8 <__libc_init_array+0x3c>)
 8005bb4:	1ba4      	subs	r4, r4, r6
 8005bb6:	10a4      	asrs	r4, r4, #2
 8005bb8:	42a5      	cmp	r5, r4
 8005bba:	d109      	bne.n	8005bd0 <__libc_init_array+0x24>
 8005bbc:	f000 f82e 	bl	8005c1c <_init>
 8005bc0:	2500      	movs	r5, #0
 8005bc2:	4e0a      	ldr	r6, [pc, #40]	; (8005bec <__libc_init_array+0x40>)
 8005bc4:	4c0a      	ldr	r4, [pc, #40]	; (8005bf0 <__libc_init_array+0x44>)
 8005bc6:	1ba4      	subs	r4, r4, r6
 8005bc8:	10a4      	asrs	r4, r4, #2
 8005bca:	42a5      	cmp	r5, r4
 8005bcc:	d105      	bne.n	8005bda <__libc_init_array+0x2e>
 8005bce:	bd70      	pop	{r4, r5, r6, pc}
 8005bd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bd4:	4798      	blx	r3
 8005bd6:	3501      	adds	r5, #1
 8005bd8:	e7ee      	b.n	8005bb8 <__libc_init_array+0xc>
 8005bda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bde:	4798      	blx	r3
 8005be0:	3501      	adds	r5, #1
 8005be2:	e7f2      	b.n	8005bca <__libc_init_array+0x1e>
 8005be4:	08005c80 	.word	0x08005c80
 8005be8:	08005c80 	.word	0x08005c80
 8005bec:	08005c80 	.word	0x08005c80
 8005bf0:	08005c84 	.word	0x08005c84

08005bf4 <memcpy>:
 8005bf4:	b510      	push	{r4, lr}
 8005bf6:	1e43      	subs	r3, r0, #1
 8005bf8:	440a      	add	r2, r1
 8005bfa:	4291      	cmp	r1, r2
 8005bfc:	d100      	bne.n	8005c00 <memcpy+0xc>
 8005bfe:	bd10      	pop	{r4, pc}
 8005c00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c08:	e7f7      	b.n	8005bfa <memcpy+0x6>

08005c0a <memset>:
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	4402      	add	r2, r0
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d100      	bne.n	8005c14 <memset+0xa>
 8005c12:	4770      	bx	lr
 8005c14:	f803 1b01 	strb.w	r1, [r3], #1
 8005c18:	e7f9      	b.n	8005c0e <memset+0x4>
	...

08005c1c <_init>:
 8005c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c1e:	bf00      	nop
 8005c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c22:	bc08      	pop	{r3}
 8005c24:	469e      	mov	lr, r3
 8005c26:	4770      	bx	lr

08005c28 <_fini>:
 8005c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c2a:	bf00      	nop
 8005c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c2e:	bc08      	pop	{r3}
 8005c30:	469e      	mov	lr, r3
 8005c32:	4770      	bx	lr
