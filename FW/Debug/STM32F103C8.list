
STM32F103C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009dd0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08009edc  08009edc  00019edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f28  08009f28  00020194  2**0
                  CONTENTS
  4 .ARM          00000000  08009f28  08009f28  00020194  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009f28  08009f28  00020194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f28  08009f28  00019f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f2c  08009f2c  00019f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  08009f30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001af4  20000194  0800a0c4  00020194  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c88  0800a0c4  00021c88  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 12 .debug_info   000224c9  00000000  00000000  000201bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000428d  00000000  00000000  00042686  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001860  00000000  00000000  00046918  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016d0  00000000  00000000  00048178  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000616a  00000000  00000000  00049848  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015b4b  00000000  00000000  0004f9b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007b629  00000000  00000000  000654fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e0b26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006694  00000000  00000000  000e0ba4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000194 	.word	0x20000194
 8000128:	00000000 	.word	0x00000000
 800012c:	08009ec4 	.word	0x08009ec4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000198 	.word	0x20000198
 8000148:	08009ec4 	.word	0x08009ec4

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2uiz>:
 80008e8:	004a      	lsls	r2, r1, #1
 80008ea:	d211      	bcs.n	8000910 <__aeabi_d2uiz+0x28>
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d211      	bcs.n	8000916 <__aeabi_d2uiz+0x2e>
 80008f2:	d50d      	bpl.n	8000910 <__aeabi_d2uiz+0x28>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d40e      	bmi.n	800091c <__aeabi_d2uiz+0x34>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	fa23 f002 	lsr.w	r0, r3, r2
 800090e:	4770      	bx	lr
 8000910:	f04f 0000 	mov.w	r0, #0
 8000914:	4770      	bx	lr
 8000916:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091a:	d102      	bne.n	8000922 <__aeabi_d2uiz+0x3a>
 800091c:	f04f 30ff 	mov.w	r0, #4294967295
 8000920:	4770      	bx	lr
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	4770      	bx	lr

08000928 <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af02      	add	r7, sp, #8
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 8000932:	f107 020f 	add.w	r2, r7, #15
 8000936:	1df9      	adds	r1, r7, #7
 8000938:	2364      	movs	r3, #100	; 0x64
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	2301      	movs	r3, #1
 800093e:	4804      	ldr	r0, [pc, #16]	; (8000950 <W25qxx_Spi+0x28>)
 8000940:	f004 fef8 	bl	8005734 <HAL_SPI_TransmitReceive>
	return ret;	
 8000944:	7bfb      	ldrb	r3, [r7, #15]
}
 8000946:	4618      	mov	r0, r3
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000cac 	.word	0x20000cac

08000954 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	2300      	movs	r3, #0
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2110      	movs	r1, #16
 800096e:	4813      	ldr	r0, [pc, #76]	; (80009bc <W25qxx_ReadID+0x68>)
 8000970:	f002 ff1e 	bl	80037b0 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x9F);
 8000974:	209f      	movs	r0, #159	; 0x9f
 8000976:	f7ff ffd7 	bl	8000928 <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800097a:	20a5      	movs	r0, #165	; 0xa5
 800097c:	f7ff ffd4 	bl	8000928 <W25qxx_Spi>
 8000980:	4603      	mov	r3, r0
 8000982:	60bb      	str	r3, [r7, #8]
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000984:	20a5      	movs	r0, #165	; 0xa5
 8000986:	f7ff ffcf 	bl	8000928 <W25qxx_Spi>
 800098a:	4603      	mov	r3, r0
 800098c:	607b      	str	r3, [r7, #4]
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800098e:	20a5      	movs	r0, #165	; 0xa5
 8000990:	f7ff ffca 	bl	8000928 <W25qxx_Spi>
 8000994:	4603      	mov	r3, r0
 8000996:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000998:	2201      	movs	r2, #1
 800099a:	2110      	movs	r1, #16
 800099c:	4807      	ldr	r0, [pc, #28]	; (80009bc <W25qxx_ReadID+0x68>)
 800099e:	f002 ff07 	bl	80037b0 <HAL_GPIO_WritePin>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	041a      	lsls	r2, r3, #16
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	021b      	lsls	r3, r3, #8
 80009aa:	4313      	orrs	r3, r2
 80009ac:	683a      	ldr	r2, [r7, #0]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	60fb      	str	r3, [r7, #12]
  return Temp;
 80009b2:	68fb      	ldr	r3, [r7, #12]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3710      	adds	r7, #16
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40010800 	.word	0x40010800

080009c0 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2110      	movs	r1, #16
 80009ca:	4816      	ldr	r0, [pc, #88]	; (8000a24 <W25qxx_ReadUniqID+0x64>)
 80009cc:	f002 fef0 	bl	80037b0 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x4B);
 80009d0:	204b      	movs	r0, #75	; 0x4b
 80009d2:	f7ff ffa9 	bl	8000928 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 80009d6:	2300      	movs	r3, #0
 80009d8:	71fb      	strb	r3, [r7, #7]
 80009da:	e005      	b.n	80009e8 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80009dc:	20a5      	movs	r0, #165	; 0xa5
 80009de:	f7ff ffa3 	bl	8000928 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	3301      	adds	r3, #1
 80009e6:	71fb      	strb	r3, [r7, #7]
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	2b03      	cmp	r3, #3
 80009ec:	d9f6      	bls.n	80009dc <W25qxx_ReadUniqID+0x1c>
	for(uint8_t	i=0;i<8;i++)
 80009ee:	2300      	movs	r3, #0
 80009f0:	71bb      	strb	r3, [r7, #6]
 80009f2:	e00b      	b.n	8000a0c <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80009f4:	79bc      	ldrb	r4, [r7, #6]
 80009f6:	20a5      	movs	r0, #165	; 0xa5
 80009f8:	f7ff ff96 	bl	8000928 <W25qxx_Spi>
 80009fc:	4603      	mov	r3, r0
 80009fe:	461a      	mov	r2, r3
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <W25qxx_ReadUniqID+0x68>)
 8000a02:	4423      	add	r3, r4
 8000a04:	705a      	strb	r2, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 8000a06:	79bb      	ldrb	r3, [r7, #6]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	71bb      	strb	r3, [r7, #6]
 8000a0c:	79bb      	ldrb	r3, [r7, #6]
 8000a0e:	2b07      	cmp	r3, #7
 8000a10:	d9f0      	bls.n	80009f4 <W25qxx_ReadUniqID+0x34>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000a12:	2201      	movs	r2, #1
 8000a14:	2110      	movs	r1, #16
 8000a16:	4803      	ldr	r0, [pc, #12]	; (8000a24 <W25qxx_ReadUniqID+0x64>)
 8000a18:	f002 feca 	bl	80037b0 <HAL_GPIO_WritePin>
}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd90      	pop	{r4, r7, pc}
 8000a24:	40010800 	.word	0x40010800
 8000a28:	200007c0 	.word	0x200007c0

08000a2c <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2110      	movs	r1, #16
 8000a34:	4807      	ldr	r0, [pc, #28]	; (8000a54 <W25qxx_WriteEnable+0x28>)
 8000a36:	f002 febb 	bl	80037b0 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x06);
 8000a3a:	2006      	movs	r0, #6
 8000a3c:	f7ff ff74 	bl	8000928 <W25qxx_Spi>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000a40:	2201      	movs	r2, #1
 8000a42:	2110      	movs	r1, #16
 8000a44:	4803      	ldr	r0, [pc, #12]	; (8000a54 <W25qxx_WriteEnable+0x28>)
 8000a46:	f002 feb3 	bl	80037b0 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	f002 f9b6 	bl	8002dbc <HAL_Delay>
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40010800 	.word	0x40010800

08000a58 <W25qxx_ReadStatusRegister>:
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
	uint8_t	status=0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2110      	movs	r1, #16
 8000a6a:	481c      	ldr	r0, [pc, #112]	; (8000adc <W25qxx_ReadStatusRegister+0x84>)
 8000a6c:	f002 fea0 	bl	80037b0 <HAL_GPIO_WritePin>
	if(SelectStatusRegister_1_2_3==1)
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d10c      	bne.n	8000a90 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8000a76:	2005      	movs	r0, #5
 8000a78:	f7ff ff56 	bl	8000928 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8000a7c:	20a5      	movs	r0, #165	; 0xa5
 8000a7e:	f7ff ff53 	bl	8000928 <W25qxx_Spi>
 8000a82:	4603      	mov	r3, r0
 8000a84:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8000a86:	4a16      	ldr	r2, [pc, #88]	; (8000ae0 <W25qxx_ReadStatusRegister+0x88>)
 8000a88:	7bfb      	ldrb	r3, [r7, #15]
 8000a8a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8000a8e:	e01b      	b.n	8000ac8 <W25qxx_ReadStatusRegister+0x70>
	}
	else if(SelectStatusRegister_1_2_3==2)
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	d10c      	bne.n	8000ab0 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8000a96:	2035      	movs	r0, #53	; 0x35
 8000a98:	f7ff ff46 	bl	8000928 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8000a9c:	20a5      	movs	r0, #165	; 0xa5
 8000a9e:	f7ff ff43 	bl	8000928 <W25qxx_Spi>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8000aa6:	4a0e      	ldr	r2, [pc, #56]	; (8000ae0 <W25qxx_ReadStatusRegister+0x88>)
 8000aa8:	7bfb      	ldrb	r3, [r7, #15]
 8000aaa:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8000aae:	e00b      	b.n	8000ac8 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8000ab0:	2015      	movs	r0, #21
 8000ab2:	f7ff ff39 	bl	8000928 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8000ab6:	20a5      	movs	r0, #165	; 0xa5
 8000ab8:	f7ff ff36 	bl	8000928 <W25qxx_Spi>
 8000abc:	4603      	mov	r3, r0
 8000abe:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8000ac0:	4a07      	ldr	r2, [pc, #28]	; (8000ae0 <W25qxx_ReadStatusRegister+0x88>)
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]
 8000ac4:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}	
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	2110      	movs	r1, #16
 8000acc:	4803      	ldr	r0, [pc, #12]	; (8000adc <W25qxx_ReadStatusRegister+0x84>)
 8000ace:	f002 fe6f 	bl	80037b0 <HAL_GPIO_WritePin>
	return status;
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40010800 	.word	0x40010800
 8000ae0:	200007c0 	.word	0x200007c0

08000ae4 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8000ae8:	2001      	movs	r0, #1
 8000aea:	f002 f967 	bl	8002dbc <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2110      	movs	r1, #16
 8000af2:	480f      	ldr	r0, [pc, #60]	; (8000b30 <W25qxx_WaitForWriteEnd+0x4c>)
 8000af4:	f002 fe5c 	bl	80037b0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8000af8:	2005      	movs	r0, #5
 8000afa:	f7ff ff15 	bl	8000928 <W25qxx_Spi>
  do
  {
    w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000afe:	20a5      	movs	r0, #165	; 0xa5
 8000b00:	f7ff ff12 	bl	8000928 <W25qxx_Spi>
 8000b04:	4603      	mov	r3, r0
 8000b06:	461a      	mov	r2, r3
 8000b08:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <W25qxx_WaitForWriteEnd+0x50>)
 8000b0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8000b0e:	2001      	movs	r0, #1
 8000b10:	f002 f954 	bl	8002dbc <HAL_Delay>
  }
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8000b14:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <W25qxx_WaitForWriteEnd+0x50>)
 8000b16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d1ed      	bne.n	8000afe <W25qxx_WaitForWriteEnd+0x1a>
 HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000b22:	2201      	movs	r2, #1
 8000b24:	2110      	movs	r1, #16
 8000b26:	4802      	ldr	r0, [pc, #8]	; (8000b30 <W25qxx_WaitForWriteEnd+0x4c>)
 8000b28:	f002 fe42 	bl	80037b0 <HAL_GPIO_WritePin>
}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40010800 	.word	0x40010800
 8000b34:	200007c0 	.word	0x200007c0

08000b38 <W25qxx_Init>:
//###################################################################################################################
bool	W25qxx_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
	w25qxx.Lock=1;	
 8000b3e:	4b60      	ldr	r3, [pc, #384]	; (8000cc0 <W25qxx_Init+0x188>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick()<100)
 8000b46:	e002      	b.n	8000b4e <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8000b48:	2001      	movs	r0, #1
 8000b4a:	f002 f937 	bl	8002dbc <HAL_Delay>
	while(HAL_GetTick()<100)
 8000b4e:	f002 f92b 	bl	8002da8 <HAL_GetTick>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b63      	cmp	r3, #99	; 0x63
 8000b56:	d9f7      	bls.n	8000b48 <W25qxx_Init+0x10>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	2110      	movs	r1, #16
 8000b5c:	4859      	ldr	r0, [pc, #356]	; (8000cc4 <W25qxx_Init+0x18c>)
 8000b5e:	f002 fe27 	bl	80037b0 <HAL_GPIO_WritePin>
  W25qxx_Delay(100);
 8000b62:	2064      	movs	r0, #100	; 0x64
 8000b64:	f002 f92a 	bl	8002dbc <HAL_Delay>
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Init Begin...\r\n");
	#endif
	id=W25qxx_ReadID();
 8000b68:	f7ff fef4 	bl	8000954 <W25qxx_ReadID>
 8000b6c:	6078      	str	r0, [r7, #4]
	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ID:0x%X\r\n",id);
	#endif
	switch(id&0x0000FFFF)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8000b76:	3b11      	subs	r3, #17
 8000b78:	2b09      	cmp	r3, #9
 8000b7a:	d860      	bhi.n	8000c3e <W25qxx_Init+0x106>
 8000b7c:	a201      	add	r2, pc, #4	; (adr r2, 8000b84 <W25qxx_Init+0x4c>)
 8000b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b82:	bf00      	nop
 8000b84:	08000c31 	.word	0x08000c31
 8000b88:	08000c23 	.word	0x08000c23
 8000b8c:	08000c15 	.word	0x08000c15
 8000b90:	08000c07 	.word	0x08000c07
 8000b94:	08000bf9 	.word	0x08000bf9
 8000b98:	08000beb 	.word	0x08000beb
 8000b9c:	08000bdd 	.word	0x08000bdd
 8000ba0:	08000bcd 	.word	0x08000bcd
 8000ba4:	08000bbd 	.word	0x08000bbd
 8000ba8:	08000bad 	.word	0x08000bad
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 8000bac:	4b44      	ldr	r3, [pc, #272]	; (8000cc0 <W25qxx_Init+0x188>)
 8000bae:	220a      	movs	r2, #10
 8000bb0:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 8000bb2:	4b43      	ldr	r3, [pc, #268]	; (8000cc0 <W25qxx_Init+0x188>)
 8000bb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bb8:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q512\r\n");
			#endif
		break;
 8000bba:	e046      	b.n	8000c4a <W25qxx_Init+0x112>
		case 0x4019:	// 	w25q256
			w25qxx.ID=W25Q256;
 8000bbc:	4b40      	ldr	r3, [pc, #256]	; (8000cc0 <W25qxx_Init+0x188>)
 8000bbe:	2209      	movs	r2, #9
 8000bc0:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 8000bc2:	4b3f      	ldr	r3, [pc, #252]	; (8000cc0 <W25qxx_Init+0x188>)
 8000bc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc8:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q256\r\n");
			#endif
		break;
 8000bca:	e03e      	b.n	8000c4a <W25qxx_Init+0x112>
		case 0x4018:	// 	w25q128
			w25qxx.ID=W25Q128;
 8000bcc:	4b3c      	ldr	r3, [pc, #240]	; (8000cc0 <W25qxx_Init+0x188>)
 8000bce:	2208      	movs	r2, #8
 8000bd0:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 8000bd2:	4b3b      	ldr	r3, [pc, #236]	; (8000cc0 <W25qxx_Init+0x188>)
 8000bd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bd8:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q128\r\n");
			#endif
		break;
 8000bda:	e036      	b.n	8000c4a <W25qxx_Init+0x112>
		case 0x4017:	//	w25q64
			w25qxx.ID=W25Q64;
 8000bdc:	4b38      	ldr	r3, [pc, #224]	; (8000cc0 <W25qxx_Init+0x188>)
 8000bde:	2207      	movs	r2, #7
 8000be0:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 8000be2:	4b37      	ldr	r3, [pc, #220]	; (8000cc0 <W25qxx_Init+0x188>)
 8000be4:	2280      	movs	r2, #128	; 0x80
 8000be6:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q64\r\n");
			#endif
		break;
 8000be8:	e02f      	b.n	8000c4a <W25qxx_Init+0x112>
		case 0x4016:	//	w25q32
			w25qxx.ID=W25Q32;
 8000bea:	4b35      	ldr	r3, [pc, #212]	; (8000cc0 <W25qxx_Init+0x188>)
 8000bec:	2206      	movs	r2, #6
 8000bee:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 8000bf0:	4b33      	ldr	r3, [pc, #204]	; (8000cc0 <W25qxx_Init+0x188>)
 8000bf2:	2240      	movs	r2, #64	; 0x40
 8000bf4:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q32\r\n");
			#endif
		break;
 8000bf6:	e028      	b.n	8000c4a <W25qxx_Init+0x112>
		case 0x4015:	//	w25q16
			w25qxx.ID=W25Q16;
 8000bf8:	4b31      	ldr	r3, [pc, #196]	; (8000cc0 <W25qxx_Init+0x188>)
 8000bfa:	2205      	movs	r2, #5
 8000bfc:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 8000bfe:	4b30      	ldr	r3, [pc, #192]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c00:	2220      	movs	r2, #32
 8000c02:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q16\r\n");
			#endif
		break;
 8000c04:	e021      	b.n	8000c4a <W25qxx_Init+0x112>
		case 0x4014:	//	w25q80
			w25qxx.ID=W25Q80;
 8000c06:	4b2e      	ldr	r3, [pc, #184]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c08:	2204      	movs	r2, #4
 8000c0a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 8000c0c:	4b2c      	ldr	r3, [pc, #176]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c0e:	2210      	movs	r2, #16
 8000c10:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q80\r\n");
			#endif
		break;
 8000c12:	e01a      	b.n	8000c4a <W25qxx_Init+0x112>
		case 0x4013:	//	w25q40
			w25qxx.ID=W25Q40;
 8000c14:	4b2a      	ldr	r3, [pc, #168]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c16:	2203      	movs	r2, #3
 8000c18:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 8000c1a:	4b29      	ldr	r3, [pc, #164]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c1c:	2208      	movs	r2, #8
 8000c1e:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q40\r\n");
			#endif
		break;
 8000c20:	e013      	b.n	8000c4a <W25qxx_Init+0x112>
		case 0x4012:	//	w25q20
			w25qxx.ID=W25Q20;
 8000c22:	4b27      	ldr	r3, [pc, #156]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c24:	2202      	movs	r2, #2
 8000c26:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 8000c28:	4b25      	ldr	r3, [pc, #148]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c2a:	2204      	movs	r2, #4
 8000c2c:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q20\r\n");
			#endif
		break;
 8000c2e:	e00c      	b.n	8000c4a <W25qxx_Init+0x112>
		case 0x4011:	//	w25q10
			w25qxx.ID=W25Q10;
 8000c30:	4b23      	ldr	r3, [pc, #140]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 8000c36:	4b22      	ldr	r3, [pc, #136]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c38:	2202      	movs	r2, #2
 8000c3a:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q10\r\n");
			#endif
		break;
 8000c3c:	e005      	b.n	8000c4a <W25qxx_Init+0x112>
		default:
				#if (_W25QXX_DEBUG==1)
				printf("w25qxx Unknown ID\r\n");
				#endif
			w25qxx.Lock=0;	
 8000c3e:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return false;
 8000c46:	2300      	movs	r3, #0
 8000c48:	e036      	b.n	8000cb8 <W25qxx_Init+0x180>
				
	}		
	w25qxx.PageSize=256;
 8000c4a:	4b1d      	ldr	r3, [pc, #116]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c50:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize=0x1000;
 8000c52:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c58:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 8000c5a:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	011b      	lsls	r3, r3, #4
 8000c60:	4a17      	ldr	r2, [pc, #92]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c62:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 8000c64:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c66:	695b      	ldr	r3, [r3, #20]
 8000c68:	4a15      	ldr	r2, [pc, #84]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c6a:	6912      	ldr	r2, [r2, #16]
 8000c6c:	fb02 f303 	mul.w	r3, r2, r3
 8000c70:	4a13      	ldr	r2, [pc, #76]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c72:	8952      	ldrh	r2, [r2, #10]
 8000c74:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c78:	4a11      	ldr	r2, [pc, #68]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c7a:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 8000c7c:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c7e:	691b      	ldr	r3, [r3, #16]
 8000c80:	011b      	lsls	r3, r3, #4
 8000c82:	4a0f      	ldr	r2, [pc, #60]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c84:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	4a0d      	ldr	r2, [pc, #52]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c8c:	6912      	ldr	r2, [r2, #16]
 8000c8e:	fb02 f303 	mul.w	r3, r2, r3
 8000c92:	0a9b      	lsrs	r3, r3, #10
 8000c94:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c96:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8000c98:	f7ff fe92 	bl	80009c0 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	f7ff fedb 	bl	8000a58 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8000ca2:	2002      	movs	r0, #2
 8000ca4:	f7ff fed8 	bl	8000a58 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f7ff fed5 	bl	8000a58 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
	#endif
	w25qxx.Lock=0;	
 8000cae:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <W25qxx_Init+0x188>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8000cb6:	2301      	movs	r3, #1
}	
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	200007c0 	.word	0x200007c0
 8000cc4:	40010800 	.word	0x40010800

08000cc8 <W25qxx_EraseChip>:
//###################################################################################################################
void	W25qxx_EraseChip(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
	while(w25qxx.Lock==1)
 8000ccc:	e002      	b.n	8000cd4 <W25qxx_EraseChip+0xc>
		W25qxx_Delay(1);
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f002 f874 	bl	8002dbc <HAL_Delay>
	while(w25qxx.Lock==1)
 8000cd4:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <W25qxx_EraseChip+0x54>)
 8000cd6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d0f7      	beq.n	8000cce <W25qxx_EraseChip+0x6>
	w25qxx.Lock=1;	
 8000cde:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <W25qxx_EraseChip+0x54>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();	
	printf("w25qxx EraseChip Begin...\r\n");
	#endif
	W25qxx_WriteEnable();
 8000ce6:	f7ff fea1 	bl	8000a2c <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2110      	movs	r1, #16
 8000cee:	480c      	ldr	r0, [pc, #48]	; (8000d20 <W25qxx_EraseChip+0x58>)
 8000cf0:	f002 fd5e 	bl	80037b0 <HAL_GPIO_WritePin>
  W25qxx_Spi(0xC7);
 8000cf4:	20c7      	movs	r0, #199	; 0xc7
 8000cf6:	f7ff fe17 	bl	8000928 <W25qxx_Spi>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2110      	movs	r1, #16
 8000cfe:	4808      	ldr	r0, [pc, #32]	; (8000d20 <W25qxx_EraseChip+0x58>)
 8000d00:	f002 fd56 	bl	80037b0 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8000d04:	f7ff feee 	bl	8000ae4 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseBlock done after %d ms!\r\n",HAL_GetTick()-StartTime);
	#endif
	W25qxx_Delay(10);
 8000d08:	200a      	movs	r0, #10
 8000d0a:	f002 f857 	bl	8002dbc <HAL_Delay>
	w25qxx.Lock=0;	
 8000d0e:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <W25qxx_EraseChip+0x54>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200007c0 	.word	0x200007c0
 8000d20:	40010800 	.word	0x40010800

08000d24 <W25qxx_EraseSector>:
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock==1)
 8000d2c:	e002      	b.n	8000d34 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f002 f844 	bl	8002dbc <HAL_Delay>
	while(w25qxx.Lock==1)
 8000d34:	4b23      	ldr	r3, [pc, #140]	; (8000dc4 <W25qxx_EraseSector+0xa0>)
 8000d36:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d0f7      	beq.n	8000d2e <W25qxx_EraseSector+0xa>
	w25qxx.Lock=1;	
 8000d3e:	4b21      	ldr	r3, [pc, #132]	; (8000dc4 <W25qxx_EraseSector+0xa0>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();	
	printf("w25qxx EraseSector %d Begin...\r\n",SectorAddr);
	#endif
	W25qxx_WaitForWriteEnd();
 8000d46:	f7ff fecd 	bl	8000ae4 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8000d4a:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <W25qxx_EraseSector+0xa0>)
 8000d4c:	691a      	ldr	r2, [r3, #16]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	fb02 f303 	mul.w	r3, r2, r3
 8000d54:	607b      	str	r3, [r7, #4]
  W25qxx_WriteEnable();
 8000d56:	f7ff fe69 	bl	8000a2c <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2110      	movs	r1, #16
 8000d5e:	481a      	ldr	r0, [pc, #104]	; (8000dc8 <W25qxx_EraseSector+0xa4>)
 8000d60:	f002 fd26 	bl	80037b0 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x20);
 8000d64:	2020      	movs	r0, #32
 8000d66:	f7ff fddf 	bl	8000928 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8000d6a:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <W25qxx_EraseSector+0xa0>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b08      	cmp	r3, #8
 8000d70:	d905      	bls.n	8000d7e <W25qxx_EraseSector+0x5a>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	0e1b      	lsrs	r3, r3, #24
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fdd5 	bl	8000928 <W25qxx_Spi>
  W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	0c1b      	lsrs	r3, r3, #16
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fdcf 	bl	8000928 <W25qxx_Spi>
  W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	0a1b      	lsrs	r3, r3, #8
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fdc9 	bl	8000928 <W25qxx_Spi>
  W25qxx_Spi(SectorAddr & 0xFF);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fdc4 	bl	8000928 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000da0:	2201      	movs	r2, #1
 8000da2:	2110      	movs	r1, #16
 8000da4:	4808      	ldr	r0, [pc, #32]	; (8000dc8 <W25qxx_EraseSector+0xa4>)
 8000da6:	f002 fd03 	bl	80037b0 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 8000daa:	f7ff fe9b 	bl	8000ae4 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseSector done after %d ms\r\n",HAL_GetTick()-StartTime);
	#endif
	W25qxx_Delay(1);
 8000dae:	2001      	movs	r0, #1
 8000db0:	f002 f804 	bl	8002dbc <HAL_Delay>
	w25qxx.Lock=0;
 8000db4:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <W25qxx_EraseSector+0xa0>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	200007c0 	.word	0x200007c0
 8000dc8:	40010800 	.word	0x40010800

08000dcc <W25qxx_EraseBlock>:
//###################################################################################################################
void W25qxx_EraseBlock(uint32_t BlockAddr)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock==1)
 8000dd4:	e002      	b.n	8000ddc <W25qxx_EraseBlock+0x10>
		W25qxx_Delay(1);
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	f001 fff0 	bl	8002dbc <HAL_Delay>
	while(w25qxx.Lock==1)
 8000ddc:	4b24      	ldr	r3, [pc, #144]	; (8000e70 <W25qxx_EraseBlock+0xa4>)
 8000dde:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d0f7      	beq.n	8000dd6 <W25qxx_EraseBlock+0xa>
	w25qxx.Lock=1;	
 8000de6:	4b22      	ldr	r3, [pc, #136]	; (8000e70 <W25qxx_EraseBlock+0xa4>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseBlock %d Begin...\r\n",BlockAddr);
	W25qxx_Delay(100);
	uint32_t	StartTime=HAL_GetTick();	
	#endif
	W25qxx_WaitForWriteEnd();
 8000dee:	f7ff fe79 	bl	8000ae4 <W25qxx_WaitForWriteEnd>
	BlockAddr = BlockAddr * w25qxx.SectorSize*16;
 8000df2:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <W25qxx_EraseBlock+0xa4>)
 8000df4:	691b      	ldr	r3, [r3, #16]
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	fb02 f303 	mul.w	r3, r2, r3
 8000dfc:	011b      	lsls	r3, r3, #4
 8000dfe:	607b      	str	r3, [r7, #4]
  W25qxx_WriteEnable();
 8000e00:	f7ff fe14 	bl	8000a2c <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2110      	movs	r1, #16
 8000e08:	481a      	ldr	r0, [pc, #104]	; (8000e74 <W25qxx_EraseBlock+0xa8>)
 8000e0a:	f002 fcd1 	bl	80037b0 <HAL_GPIO_WritePin>
  W25qxx_Spi(0xD8);
 8000e0e:	20d8      	movs	r0, #216	; 0xd8
 8000e10:	f7ff fd8a 	bl	8000928 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8000e14:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <W25qxx_EraseBlock+0xa4>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b08      	cmp	r3, #8
 8000e1a:	d905      	bls.n	8000e28 <W25qxx_EraseBlock+0x5c>
		W25qxx_Spi((BlockAddr & 0xFF000000) >> 24);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	0e1b      	lsrs	r3, r3, #24
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fd80 	bl	8000928 <W25qxx_Spi>
  W25qxx_Spi((BlockAddr & 0xFF0000) >> 16);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	0c1b      	lsrs	r3, r3, #16
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff fd7a 	bl	8000928 <W25qxx_Spi>
  W25qxx_Spi((BlockAddr & 0xFF00) >> 8);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	0a1b      	lsrs	r3, r3, #8
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fd74 	bl	8000928 <W25qxx_Spi>
  W25qxx_Spi(BlockAddr & 0xFF);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fd6f 	bl	8000928 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	2110      	movs	r1, #16
 8000e4e:	4809      	ldr	r0, [pc, #36]	; (8000e74 <W25qxx_EraseBlock+0xa8>)
 8000e50:	f002 fcae 	bl	80037b0 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 8000e54:	f7ff fe46 	bl	8000ae4 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseBlock done after %d ms\r\n",HAL_GetTick()-StartTime);
	W25qxx_Delay(100);
	#endif
	W25qxx_Delay(1);
 8000e58:	2001      	movs	r0, #1
 8000e5a:	f001 ffaf 	bl	8002dbc <HAL_Delay>
	w25qxx.Lock=0;
 8000e5e:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <W25qxx_EraseBlock+0xa4>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200007c0 	.word	0x200007c0
 8000e74:	40010800 	.word	0x40010800

08000e78 <W25qxx_SectorToPage>:
{
	return ((SectorAddress*w25qxx.SectorSize)/w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t	W25qxx_SectorToPage(uint32_t	SectorAddress)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	return (SectorAddress*w25qxx.SectorSize)/w25qxx.PageSize;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <W25qxx_SectorToPage+0x24>)
 8000e82:	691b      	ldr	r3, [r3, #16]
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	fb02 f303 	mul.w	r3, r2, r3
 8000e8a:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <W25qxx_SectorToPage+0x24>)
 8000e8c:	8952      	ldrh	r2, [r2, #10]
 8000e8e:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr
 8000e9c:	200007c0 	.word	0x200007c0

08000ea0 <W25qxx_BlockToPage>:
//###################################################################################################################
uint32_t	W25qxx_BlockToPage(uint32_t	BlockAddress)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	return (BlockAddress*w25qxx.BlockSize)/w25qxx.PageSize;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <W25qxx_BlockToPage+0x24>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	fb02 f303 	mul.w	r3, r2, r3
 8000eb2:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <W25qxx_BlockToPage+0x24>)
 8000eb4:	8952      	ldrh	r2, [r2, #10]
 8000eb6:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr
 8000ec4:	200007c0 	.word	0x200007c0

08000ec8 <W25qxx_IsEmptyPage>:
//###################################################################################################################
bool 	W25qxx_IsEmptyPage(uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToCheck_up_to_PageSize)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b090      	sub	sp, #64	; 0x40
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
	while(w25qxx.Lock==1)
 8000ed4:	e002      	b.n	8000edc <W25qxx_IsEmptyPage+0x14>
	W25qxx_Delay(1);
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f001 ff70 	bl	8002dbc <HAL_Delay>
	while(w25qxx.Lock==1)
 8000edc:	4b6d      	ldr	r3, [pc, #436]	; (8001094 <W25qxx_IsEmptyPage+0x1cc>)
 8000ede:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d0f7      	beq.n	8000ed6 <W25qxx_IsEmptyPage+0xe>
	w25qxx.Lock=1;	
 8000ee6:	4b6b      	ldr	r3, [pc, #428]	; (8001094 <W25qxx_IsEmptyPage+0x1cc>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if(((NumByteToCheck_up_to_PageSize+OffsetInByte)>w25qxx.PageSize)||(NumByteToCheck_up_to_PageSize==0))
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	4a67      	ldr	r2, [pc, #412]	; (8001094 <W25qxx_IsEmptyPage+0x1cc>)
 8000ef6:	8952      	ldrh	r2, [r2, #10]
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d802      	bhi.n	8000f02 <W25qxx_IsEmptyPage+0x3a>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d105      	bne.n	8000f0e <W25qxx_IsEmptyPage+0x46>
		NumByteToCheck_up_to_PageSize=w25qxx.PageSize-OffsetInByte;
 8000f02:	4b64      	ldr	r3, [pc, #400]	; (8001094 <W25qxx_IsEmptyPage+0x1cc>)
 8000f04:	895b      	ldrh	r3, [r3, #10]
 8000f06:	461a      	mov	r2, r3
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	607b      	str	r3, [r7, #4]
	uint32_t	StartTime=HAL_GetTick();
	#endif		
	uint8_t	pBuffer[32];
	uint32_t	WorkAddress;
	uint32_t	i;
	for(i=OffsetInByte; i<w25qxx.PageSize; i+=sizeof(pBuffer))
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f12:	e053      	b.n	8000fbc <W25qxx_IsEmptyPage+0xf4>
	{
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2110      	movs	r1, #16
 8000f18:	485f      	ldr	r0, [pc, #380]	; (8001098 <W25qxx_IsEmptyPage+0x1d0>)
 8000f1a:	f002 fc49 	bl	80037b0 <HAL_GPIO_WritePin>
		WorkAddress=(i+Page_Address*w25qxx.PageSize);
 8000f1e:	4b5d      	ldr	r3, [pc, #372]	; (8001094 <W25qxx_IsEmptyPage+0x1cc>)
 8000f20:	895b      	ldrh	r3, [r3, #10]
 8000f22:	461a      	mov	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	fb03 f302 	mul.w	r3, r3, r2
 8000f2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f2c:	4413      	add	r3, r2
 8000f2e:	637b      	str	r3, [r7, #52]	; 0x34
		W25qxx_Spi(0x0B);
 8000f30:	200b      	movs	r0, #11
 8000f32:	f7ff fcf9 	bl	8000928 <W25qxx_Spi>
		if(w25qxx.ID>=W25Q256)
 8000f36:	4b57      	ldr	r3, [pc, #348]	; (8001094 <W25qxx_IsEmptyPage+0x1cc>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b08      	cmp	r3, #8
 8000f3c:	d905      	bls.n	8000f4a <W25qxx_IsEmptyPage+0x82>
			W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 8000f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f40:	0e1b      	lsrs	r3, r3, #24
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fcef 	bl	8000928 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8000f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f4c:	0c1b      	lsrs	r3, r3, #16
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fce9 	bl	8000928 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8000f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f58:	0a1b      	lsrs	r3, r3, #8
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fce3 	bl	8000928 <W25qxx_Spi>
		W25qxx_Spi(WorkAddress & 0xFF);
 8000f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fcde 	bl	8000928 <W25qxx_Spi>
		W25qxx_Spi(0);
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f7ff fcdb 	bl	8000928 <W25qxx_Spi>
		HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,sizeof(pBuffer),100);	
 8000f72:	f107 0114 	add.w	r1, r7, #20
 8000f76:	2364      	movs	r3, #100	; 0x64
 8000f78:	2220      	movs	r2, #32
 8000f7a:	4848      	ldr	r0, [pc, #288]	; (800109c <W25qxx_IsEmptyPage+0x1d4>)
 8000f7c:	f004 fad1 	bl	8005522 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);	
 8000f80:	2201      	movs	r2, #1
 8000f82:	2110      	movs	r1, #16
 8000f84:	4844      	ldr	r0, [pc, #272]	; (8001098 <W25qxx_IsEmptyPage+0x1d0>)
 8000f86:	f002 fc13 	bl	80037b0 <HAL_GPIO_WritePin>
		for(uint8_t x=0;x<sizeof(pBuffer);x++)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000f90:	e00d      	b.n	8000fae <W25qxx_IsEmptyPage+0xe6>
		{
			if(pBuffer[x]!=0xFF)
 8000f92:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f96:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000f9a:	4413      	add	r3, r2
 8000f9c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8000fa0:	2bff      	cmp	r3, #255	; 0xff
 8000fa2:	d16b      	bne.n	800107c <W25qxx_IsEmptyPage+0x1b4>
		for(uint8_t x=0;x<sizeof(pBuffer);x++)
 8000fa4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000fa8:	3301      	adds	r3, #1
 8000faa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000fae:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000fb2:	2b1f      	cmp	r3, #31
 8000fb4:	d9ed      	bls.n	8000f92 <W25qxx_IsEmptyPage+0xca>
	for(i=OffsetInByte; i<w25qxx.PageSize; i+=sizeof(pBuffer))
 8000fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fb8:	3320      	adds	r3, #32
 8000fba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000fbc:	4b35      	ldr	r3, [pc, #212]	; (8001094 <W25qxx_IsEmptyPage+0x1cc>)
 8000fbe:	895b      	ldrh	r3, [r3, #10]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d3a5      	bcc.n	8000f14 <W25qxx_IsEmptyPage+0x4c>
				goto NOT_EMPTY;		
		}			
	}	
	if((w25qxx.PageSize+OffsetInByte)%sizeof(pBuffer)!=0)
 8000fc8:	4b32      	ldr	r3, [pc, #200]	; (8001094 <W25qxx_IsEmptyPage+0x1cc>)
 8000fca:	895b      	ldrh	r3, [r3, #10]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	f003 031f 	and.w	r3, r3, #31
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d04a      	beq.n	8001070 <W25qxx_IsEmptyPage+0x1a8>
	{
		i-=sizeof(pBuffer);
 8000fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fdc:	3b20      	subs	r3, #32
 8000fde:	63fb      	str	r3, [r7, #60]	; 0x3c
		for( ; i<w25qxx.PageSize; i++)
 8000fe0:	e040      	b.n	8001064 <W25qxx_IsEmptyPage+0x19c>
		{
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2110      	movs	r1, #16
 8000fe6:	482c      	ldr	r0, [pc, #176]	; (8001098 <W25qxx_IsEmptyPage+0x1d0>)
 8000fe8:	f002 fbe2 	bl	80037b0 <HAL_GPIO_WritePin>
			WorkAddress=(i+Page_Address*w25qxx.PageSize);
 8000fec:	4b29      	ldr	r3, [pc, #164]	; (8001094 <W25qxx_IsEmptyPage+0x1cc>)
 8000fee:	895b      	ldrh	r3, [r3, #10]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	fb03 f302 	mul.w	r3, r3, r2
 8000ff8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ffa:	4413      	add	r3, r2
 8000ffc:	637b      	str	r3, [r7, #52]	; 0x34
			W25qxx_Spi(0x0B);
 8000ffe:	200b      	movs	r0, #11
 8001000:	f7ff fc92 	bl	8000928 <W25qxx_Spi>
			if(w25qxx.ID>=W25Q256)
 8001004:	4b23      	ldr	r3, [pc, #140]	; (8001094 <W25qxx_IsEmptyPage+0x1cc>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b08      	cmp	r3, #8
 800100a:	d905      	bls.n	8001018 <W25qxx_IsEmptyPage+0x150>
				W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 800100c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800100e:	0e1b      	lsrs	r3, r3, #24
 8001010:	b2db      	uxtb	r3, r3
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fc88 	bl	8000928 <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8001018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800101a:	0c1b      	lsrs	r3, r3, #16
 800101c:	b2db      	uxtb	r3, r3
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fc82 	bl	8000928 <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8001024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001026:	0a1b      	lsrs	r3, r3, #8
 8001028:	b2db      	uxtb	r3, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fc7c 	bl	8000928 <W25qxx_Spi>
			W25qxx_Spi(WorkAddress & 0xFF);
 8001030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001032:	b2db      	uxtb	r3, r3
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fc77 	bl	8000928 <W25qxx_Spi>
			W25qxx_Spi(0);
 800103a:	2000      	movs	r0, #0
 800103c:	f7ff fc74 	bl	8000928 <W25qxx_Spi>
			HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,1,100);	
 8001040:	f107 0114 	add.w	r1, r7, #20
 8001044:	2364      	movs	r3, #100	; 0x64
 8001046:	2201      	movs	r2, #1
 8001048:	4814      	ldr	r0, [pc, #80]	; (800109c <W25qxx_IsEmptyPage+0x1d4>)
 800104a:	f004 fa6a 	bl	8005522 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);	
 800104e:	2201      	movs	r2, #1
 8001050:	2110      	movs	r1, #16
 8001052:	4811      	ldr	r0, [pc, #68]	; (8001098 <W25qxx_IsEmptyPage+0x1d0>)
 8001054:	f002 fbac 	bl	80037b0 <HAL_GPIO_WritePin>
			if(pBuffer[0]!=0xFF)
 8001058:	7d3b      	ldrb	r3, [r7, #20]
 800105a:	2bff      	cmp	r3, #255	; 0xff
 800105c:	d110      	bne.n	8001080 <W25qxx_IsEmptyPage+0x1b8>
		for( ; i<w25qxx.PageSize; i++)
 800105e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001060:	3301      	adds	r3, #1
 8001062:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001064:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <W25qxx_IsEmptyPage+0x1cc>)
 8001066:	895b      	ldrh	r3, [r3, #10]
 8001068:	461a      	mov	r2, r3
 800106a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800106c:	4293      	cmp	r3, r2
 800106e:	d3b8      	bcc.n	8000fe2 <W25qxx_IsEmptyPage+0x11a>
	}	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx CheckPage is Empty in %d ms\r\n",HAL_GetTick()-StartTime);
	W25qxx_Delay(100);
	#endif	
	w25qxx.Lock=0;
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <W25qxx_IsEmptyPage+0x1cc>)
 8001072:	2200      	movs	r2, #0
 8001074:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;	
 8001078:	2301      	movs	r3, #1
 800107a:	e007      	b.n	800108c <W25qxx_IsEmptyPage+0x1c4>
				goto NOT_EMPTY;		
 800107c:	bf00      	nop
 800107e:	e000      	b.n	8001082 <W25qxx_IsEmptyPage+0x1ba>
				goto NOT_EMPTY;
 8001080:	bf00      	nop
	NOT_EMPTY:
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx CheckPage is Not Empty in %d ms\r\n",HAL_GetTick()-StartTime);
	W25qxx_Delay(100);
	#endif	
	w25qxx.Lock=0;
 8001082:	4b04      	ldr	r3, [pc, #16]	; (8001094 <W25qxx_IsEmptyPage+0x1cc>)
 8001084:	2200      	movs	r2, #0
 8001086:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return false;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3740      	adds	r7, #64	; 0x40
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	200007c0 	.word	0x200007c0
 8001098:	40010800 	.word	0x40010800
 800109c:	20000cac 	.word	0x20000cac

080010a0 <W25qxx_IsEmptySector>:
//###################################################################################################################
bool 	W25qxx_IsEmptySector(uint32_t Sector_Address,uint32_t OffsetInByte,uint32_t NumByteToCheck_up_to_SectorSize)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b090      	sub	sp, #64	; 0x40
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
	while(w25qxx.Lock==1)
 80010ac:	e002      	b.n	80010b4 <W25qxx_IsEmptySector+0x14>
	W25qxx_Delay(1);
 80010ae:	2001      	movs	r0, #1
 80010b0:	f001 fe84 	bl	8002dbc <HAL_Delay>
	while(w25qxx.Lock==1)
 80010b4:	4b68      	ldr	r3, [pc, #416]	; (8001258 <W25qxx_IsEmptySector+0x1b8>)
 80010b6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d0f7      	beq.n	80010ae <W25qxx_IsEmptySector+0xe>
	w25qxx.Lock=1;	
 80010be:	4b66      	ldr	r3, [pc, #408]	; (8001258 <W25qxx_IsEmptySector+0x1b8>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if((NumByteToCheck_up_to_SectorSize>w25qxx.SectorSize)||(NumByteToCheck_up_to_SectorSize==0))
 80010c6:	4b64      	ldr	r3, [pc, #400]	; (8001258 <W25qxx_IsEmptySector+0x1b8>)
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d802      	bhi.n	80010d6 <W25qxx_IsEmptySector+0x36>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d102      	bne.n	80010dc <W25qxx_IsEmptySector+0x3c>
		NumByteToCheck_up_to_SectorSize=w25qxx.SectorSize;
 80010d6:	4b60      	ldr	r3, [pc, #384]	; (8001258 <W25qxx_IsEmptySector+0x1b8>)
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	607b      	str	r3, [r7, #4]
	uint32_t	StartTime=HAL_GetTick();
	#endif		
	uint8_t	pBuffer[32];
	uint32_t	WorkAddress;
	uint32_t	i;
	for(i=OffsetInByte; i<w25qxx.SectorSize; i+=sizeof(pBuffer))
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010e0:	e052      	b.n	8001188 <W25qxx_IsEmptySector+0xe8>
	{
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2110      	movs	r1, #16
 80010e6:	485d      	ldr	r0, [pc, #372]	; (800125c <W25qxx_IsEmptySector+0x1bc>)
 80010e8:	f002 fb62 	bl	80037b0 <HAL_GPIO_WritePin>
		WorkAddress=(i+Sector_Address*w25qxx.SectorSize);
 80010ec:	4b5a      	ldr	r3, [pc, #360]	; (8001258 <W25qxx_IsEmptySector+0x1b8>)
 80010ee:	691b      	ldr	r3, [r3, #16]
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	fb02 f303 	mul.w	r3, r2, r3
 80010f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80010f8:	4413      	add	r3, r2
 80010fa:	637b      	str	r3, [r7, #52]	; 0x34
		W25qxx_Spi(0x0B);
 80010fc:	200b      	movs	r0, #11
 80010fe:	f7ff fc13 	bl	8000928 <W25qxx_Spi>
		if(w25qxx.ID>=W25Q256)
 8001102:	4b55      	ldr	r3, [pc, #340]	; (8001258 <W25qxx_IsEmptySector+0x1b8>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b08      	cmp	r3, #8
 8001108:	d905      	bls.n	8001116 <W25qxx_IsEmptySector+0x76>
			W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 800110a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800110c:	0e1b      	lsrs	r3, r3, #24
 800110e:	b2db      	uxtb	r3, r3
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fc09 	bl	8000928 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8001116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001118:	0c1b      	lsrs	r3, r3, #16
 800111a:	b2db      	uxtb	r3, r3
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fc03 	bl	8000928 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8001122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001124:	0a1b      	lsrs	r3, r3, #8
 8001126:	b2db      	uxtb	r3, r3
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fbfd 	bl	8000928 <W25qxx_Spi>
		W25qxx_Spi(WorkAddress & 0xFF);
 800112e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001130:	b2db      	uxtb	r3, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fbf8 	bl	8000928 <W25qxx_Spi>
		W25qxx_Spi(0);
 8001138:	2000      	movs	r0, #0
 800113a:	f7ff fbf5 	bl	8000928 <W25qxx_Spi>
		HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,sizeof(pBuffer),100);	
 800113e:	f107 0114 	add.w	r1, r7, #20
 8001142:	2364      	movs	r3, #100	; 0x64
 8001144:	2220      	movs	r2, #32
 8001146:	4846      	ldr	r0, [pc, #280]	; (8001260 <W25qxx_IsEmptySector+0x1c0>)
 8001148:	f004 f9eb 	bl	8005522 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);	
 800114c:	2201      	movs	r2, #1
 800114e:	2110      	movs	r1, #16
 8001150:	4842      	ldr	r0, [pc, #264]	; (800125c <W25qxx_IsEmptySector+0x1bc>)
 8001152:	f002 fb2d 	bl	80037b0 <HAL_GPIO_WritePin>
		for(uint8_t x=0;x<sizeof(pBuffer);x++)
 8001156:	2300      	movs	r3, #0
 8001158:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800115c:	e00d      	b.n	800117a <W25qxx_IsEmptySector+0xda>
		{
			if(pBuffer[x]!=0xFF)
 800115e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001162:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001166:	4413      	add	r3, r2
 8001168:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800116c:	2bff      	cmp	r3, #255	; 0xff
 800116e:	d167      	bne.n	8001240 <W25qxx_IsEmptySector+0x1a0>
		for(uint8_t x=0;x<sizeof(pBuffer);x++)
 8001170:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001174:	3301      	adds	r3, #1
 8001176:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800117a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800117e:	2b1f      	cmp	r3, #31
 8001180:	d9ed      	bls.n	800115e <W25qxx_IsEmptySector+0xbe>
	for(i=OffsetInByte; i<w25qxx.SectorSize; i+=sizeof(pBuffer))
 8001182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001184:	3320      	adds	r3, #32
 8001186:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001188:	4b33      	ldr	r3, [pc, #204]	; (8001258 <W25qxx_IsEmptySector+0x1b8>)
 800118a:	691b      	ldr	r3, [r3, #16]
 800118c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800118e:	429a      	cmp	r2, r3
 8001190:	d3a7      	bcc.n	80010e2 <W25qxx_IsEmptySector+0x42>
				goto NOT_EMPTY;		
		}			
	}	
	if((w25qxx.SectorSize+OffsetInByte)%sizeof(pBuffer)!=0)
 8001192:	4b31      	ldr	r3, [pc, #196]	; (8001258 <W25qxx_IsEmptySector+0x1b8>)
 8001194:	691a      	ldr	r2, [r3, #16]
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	4413      	add	r3, r2
 800119a:	f003 031f 	and.w	r3, r3, #31
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d048      	beq.n	8001234 <W25qxx_IsEmptySector+0x194>
	{
		i-=sizeof(pBuffer);
 80011a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011a4:	3b20      	subs	r3, #32
 80011a6:	63fb      	str	r3, [r7, #60]	; 0x3c
		for( ; i<w25qxx.SectorSize; i++)
 80011a8:	e03f      	b.n	800122a <W25qxx_IsEmptySector+0x18a>
		{
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2110      	movs	r1, #16
 80011ae:	482b      	ldr	r0, [pc, #172]	; (800125c <W25qxx_IsEmptySector+0x1bc>)
 80011b0:	f002 fafe 	bl	80037b0 <HAL_GPIO_WritePin>
			WorkAddress=(i+Sector_Address*w25qxx.SectorSize);
 80011b4:	4b28      	ldr	r3, [pc, #160]	; (8001258 <W25qxx_IsEmptySector+0x1b8>)
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	fb02 f303 	mul.w	r3, r2, r3
 80011be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80011c0:	4413      	add	r3, r2
 80011c2:	637b      	str	r3, [r7, #52]	; 0x34
			W25qxx_Spi(0x0B);
 80011c4:	200b      	movs	r0, #11
 80011c6:	f7ff fbaf 	bl	8000928 <W25qxx_Spi>
			if(w25qxx.ID>=W25Q256)
 80011ca:	4b23      	ldr	r3, [pc, #140]	; (8001258 <W25qxx_IsEmptySector+0x1b8>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b08      	cmp	r3, #8
 80011d0:	d905      	bls.n	80011de <W25qxx_IsEmptySector+0x13e>
				W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 80011d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011d4:	0e1b      	lsrs	r3, r3, #24
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fba5 	bl	8000928 <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 80011de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011e0:	0c1b      	lsrs	r3, r3, #16
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fb9f 	bl	8000928 <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 80011ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011ec:	0a1b      	lsrs	r3, r3, #8
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fb99 	bl	8000928 <W25qxx_Spi>
			W25qxx_Spi(WorkAddress & 0xFF);
 80011f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff fb94 	bl	8000928 <W25qxx_Spi>
			W25qxx_Spi(0);
 8001200:	2000      	movs	r0, #0
 8001202:	f7ff fb91 	bl	8000928 <W25qxx_Spi>
			HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,1,100);	
 8001206:	f107 0114 	add.w	r1, r7, #20
 800120a:	2364      	movs	r3, #100	; 0x64
 800120c:	2201      	movs	r2, #1
 800120e:	4814      	ldr	r0, [pc, #80]	; (8001260 <W25qxx_IsEmptySector+0x1c0>)
 8001210:	f004 f987 	bl	8005522 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);	
 8001214:	2201      	movs	r2, #1
 8001216:	2110      	movs	r1, #16
 8001218:	4810      	ldr	r0, [pc, #64]	; (800125c <W25qxx_IsEmptySector+0x1bc>)
 800121a:	f002 fac9 	bl	80037b0 <HAL_GPIO_WritePin>
			if(pBuffer[0]!=0xFF)
 800121e:	7d3b      	ldrb	r3, [r7, #20]
 8001220:	2bff      	cmp	r3, #255	; 0xff
 8001222:	d10f      	bne.n	8001244 <W25qxx_IsEmptySector+0x1a4>
		for( ; i<w25qxx.SectorSize; i++)
 8001224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001226:	3301      	adds	r3, #1
 8001228:	63fb      	str	r3, [r7, #60]	; 0x3c
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <W25qxx_IsEmptySector+0x1b8>)
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001230:	429a      	cmp	r2, r3
 8001232:	d3ba      	bcc.n	80011aa <W25qxx_IsEmptySector+0x10a>
	}	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx CheckSector is Empty in %d ms\r\n",HAL_GetTick()-StartTime);
	W25qxx_Delay(100);
	#endif	
	w25qxx.Lock=0;
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <W25qxx_IsEmptySector+0x1b8>)
 8001236:	2200      	movs	r2, #0
 8001238:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;	
 800123c:	2301      	movs	r3, #1
 800123e:	e007      	b.n	8001250 <W25qxx_IsEmptySector+0x1b0>
				goto NOT_EMPTY;		
 8001240:	bf00      	nop
 8001242:	e000      	b.n	8001246 <W25qxx_IsEmptySector+0x1a6>
				goto NOT_EMPTY;
 8001244:	bf00      	nop
	NOT_EMPTY:
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx CheckSector is Not Empty in %d ms\r\n",HAL_GetTick()-StartTime);
	W25qxx_Delay(100);
	#endif	
	w25qxx.Lock=0;
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <W25qxx_IsEmptySector+0x1b8>)
 8001248:	2200      	movs	r2, #0
 800124a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return false;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	3740      	adds	r7, #64	; 0x40
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200007c0 	.word	0x200007c0
 800125c:	40010800 	.word	0x40010800
 8001260:	20000cac 	.word	0x20000cac

08001264 <W25qxx_IsEmptyBlock>:
//###################################################################################################################
bool 	W25qxx_IsEmptyBlock(uint32_t Block_Address,uint32_t OffsetInByte,uint32_t NumByteToCheck_up_to_BlockSize)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b090      	sub	sp, #64	; 0x40
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
	while(w25qxx.Lock==1)
 8001270:	e002      	b.n	8001278 <W25qxx_IsEmptyBlock+0x14>
	W25qxx_Delay(1);
 8001272:	2001      	movs	r0, #1
 8001274:	f001 fda2 	bl	8002dbc <HAL_Delay>
	while(w25qxx.Lock==1)
 8001278:	4b68      	ldr	r3, [pc, #416]	; (800141c <W25qxx_IsEmptyBlock+0x1b8>)
 800127a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800127e:	2b01      	cmp	r3, #1
 8001280:	d0f7      	beq.n	8001272 <W25qxx_IsEmptyBlock+0xe>
	w25qxx.Lock=1;	
 8001282:	4b66      	ldr	r3, [pc, #408]	; (800141c <W25qxx_IsEmptyBlock+0x1b8>)
 8001284:	2201      	movs	r2, #1
 8001286:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if((NumByteToCheck_up_to_BlockSize>w25qxx.BlockSize)||(NumByteToCheck_up_to_BlockSize==0))
 800128a:	4b64      	ldr	r3, [pc, #400]	; (800141c <W25qxx_IsEmptyBlock+0x1b8>)
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	429a      	cmp	r2, r3
 8001292:	d802      	bhi.n	800129a <W25qxx_IsEmptyBlock+0x36>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d102      	bne.n	80012a0 <W25qxx_IsEmptyBlock+0x3c>
		NumByteToCheck_up_to_BlockSize=w25qxx.BlockSize;
 800129a:	4b60      	ldr	r3, [pc, #384]	; (800141c <W25qxx_IsEmptyBlock+0x1b8>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	607b      	str	r3, [r7, #4]
	uint32_t	StartTime=HAL_GetTick();
	#endif		
	uint8_t	pBuffer[32];
	uint32_t	WorkAddress;
	uint32_t	i;
	for(i=OffsetInByte; i<w25qxx.BlockSize; i+=sizeof(pBuffer))
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012a4:	e052      	b.n	800134c <W25qxx_IsEmptyBlock+0xe8>
	{
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2110      	movs	r1, #16
 80012aa:	485d      	ldr	r0, [pc, #372]	; (8001420 <W25qxx_IsEmptyBlock+0x1bc>)
 80012ac:	f002 fa80 	bl	80037b0 <HAL_GPIO_WritePin>
		WorkAddress=(i+Block_Address*w25qxx.BlockSize);
 80012b0:	4b5a      	ldr	r3, [pc, #360]	; (800141c <W25qxx_IsEmptyBlock+0x1b8>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	fb02 f303 	mul.w	r3, r2, r3
 80012ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80012bc:	4413      	add	r3, r2
 80012be:	637b      	str	r3, [r7, #52]	; 0x34
		W25qxx_Spi(0x0B);
 80012c0:	200b      	movs	r0, #11
 80012c2:	f7ff fb31 	bl	8000928 <W25qxx_Spi>
		if(w25qxx.ID>=W25Q256)
 80012c6:	4b55      	ldr	r3, [pc, #340]	; (800141c <W25qxx_IsEmptyBlock+0x1b8>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b08      	cmp	r3, #8
 80012cc:	d905      	bls.n	80012da <W25qxx_IsEmptyBlock+0x76>
			W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 80012ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012d0:	0e1b      	lsrs	r3, r3, #24
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fb27 	bl	8000928 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 80012da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012dc:	0c1b      	lsrs	r3, r3, #16
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fb21 	bl	8000928 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 80012e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012e8:	0a1b      	lsrs	r3, r3, #8
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fb1b 	bl	8000928 <W25qxx_Spi>
		W25qxx_Spi(WorkAddress & 0xFF);
 80012f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fb16 	bl	8000928 <W25qxx_Spi>
		W25qxx_Spi(0);
 80012fc:	2000      	movs	r0, #0
 80012fe:	f7ff fb13 	bl	8000928 <W25qxx_Spi>
		HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,sizeof(pBuffer),100);	
 8001302:	f107 0114 	add.w	r1, r7, #20
 8001306:	2364      	movs	r3, #100	; 0x64
 8001308:	2220      	movs	r2, #32
 800130a:	4846      	ldr	r0, [pc, #280]	; (8001424 <W25qxx_IsEmptyBlock+0x1c0>)
 800130c:	f004 f909 	bl	8005522 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);	
 8001310:	2201      	movs	r2, #1
 8001312:	2110      	movs	r1, #16
 8001314:	4842      	ldr	r0, [pc, #264]	; (8001420 <W25qxx_IsEmptyBlock+0x1bc>)
 8001316:	f002 fa4b 	bl	80037b0 <HAL_GPIO_WritePin>
		for(uint8_t x=0;x<sizeof(pBuffer);x++)
 800131a:	2300      	movs	r3, #0
 800131c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8001320:	e00d      	b.n	800133e <W25qxx_IsEmptyBlock+0xda>
		{
			if(pBuffer[x]!=0xFF)
 8001322:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001326:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800132a:	4413      	add	r3, r2
 800132c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8001330:	2bff      	cmp	r3, #255	; 0xff
 8001332:	d167      	bne.n	8001404 <W25qxx_IsEmptyBlock+0x1a0>
		for(uint8_t x=0;x<sizeof(pBuffer);x++)
 8001334:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001338:	3301      	adds	r3, #1
 800133a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800133e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001342:	2b1f      	cmp	r3, #31
 8001344:	d9ed      	bls.n	8001322 <W25qxx_IsEmptyBlock+0xbe>
	for(i=OffsetInByte; i<w25qxx.BlockSize; i+=sizeof(pBuffer))
 8001346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001348:	3320      	adds	r3, #32
 800134a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800134c:	4b33      	ldr	r3, [pc, #204]	; (800141c <W25qxx_IsEmptyBlock+0x1b8>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001352:	429a      	cmp	r2, r3
 8001354:	d3a7      	bcc.n	80012a6 <W25qxx_IsEmptyBlock+0x42>
				goto NOT_EMPTY;		
		}			
	}	
	if((w25qxx.BlockSize+OffsetInByte)%sizeof(pBuffer)!=0)
 8001356:	4b31      	ldr	r3, [pc, #196]	; (800141c <W25qxx_IsEmptyBlock+0x1b8>)
 8001358:	699a      	ldr	r2, [r3, #24]
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	4413      	add	r3, r2
 800135e:	f003 031f 	and.w	r3, r3, #31
 8001362:	2b00      	cmp	r3, #0
 8001364:	d048      	beq.n	80013f8 <W25qxx_IsEmptyBlock+0x194>
	{
		i-=sizeof(pBuffer);
 8001366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001368:	3b20      	subs	r3, #32
 800136a:	63fb      	str	r3, [r7, #60]	; 0x3c
		for( ; i<w25qxx.BlockSize; i++)
 800136c:	e03f      	b.n	80013ee <W25qxx_IsEmptyBlock+0x18a>
		{
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	2110      	movs	r1, #16
 8001372:	482b      	ldr	r0, [pc, #172]	; (8001420 <W25qxx_IsEmptyBlock+0x1bc>)
 8001374:	f002 fa1c 	bl	80037b0 <HAL_GPIO_WritePin>
			WorkAddress=(i+Block_Address*w25qxx.BlockSize);
 8001378:	4b28      	ldr	r3, [pc, #160]	; (800141c <W25qxx_IsEmptyBlock+0x1b8>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	fb02 f303 	mul.w	r3, r2, r3
 8001382:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001384:	4413      	add	r3, r2
 8001386:	637b      	str	r3, [r7, #52]	; 0x34
			W25qxx_Spi(0x0B);
 8001388:	200b      	movs	r0, #11
 800138a:	f7ff facd 	bl	8000928 <W25qxx_Spi>
			if(w25qxx.ID>=W25Q256)
 800138e:	4b23      	ldr	r3, [pc, #140]	; (800141c <W25qxx_IsEmptyBlock+0x1b8>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b08      	cmp	r3, #8
 8001394:	d905      	bls.n	80013a2 <W25qxx_IsEmptyBlock+0x13e>
				W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 8001396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001398:	0e1b      	lsrs	r3, r3, #24
 800139a:	b2db      	uxtb	r3, r3
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fac3 	bl	8000928 <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 80013a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013a4:	0c1b      	lsrs	r3, r3, #16
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fabd 	bl	8000928 <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 80013ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013b0:	0a1b      	lsrs	r3, r3, #8
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fab7 	bl	8000928 <W25qxx_Spi>
			W25qxx_Spi(WorkAddress & 0xFF);
 80013ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fab2 	bl	8000928 <W25qxx_Spi>
			W25qxx_Spi(0);
 80013c4:	2000      	movs	r0, #0
 80013c6:	f7ff faaf 	bl	8000928 <W25qxx_Spi>
			HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,1,100);	
 80013ca:	f107 0114 	add.w	r1, r7, #20
 80013ce:	2364      	movs	r3, #100	; 0x64
 80013d0:	2201      	movs	r2, #1
 80013d2:	4814      	ldr	r0, [pc, #80]	; (8001424 <W25qxx_IsEmptyBlock+0x1c0>)
 80013d4:	f004 f8a5 	bl	8005522 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);	
 80013d8:	2201      	movs	r2, #1
 80013da:	2110      	movs	r1, #16
 80013dc:	4810      	ldr	r0, [pc, #64]	; (8001420 <W25qxx_IsEmptyBlock+0x1bc>)
 80013de:	f002 f9e7 	bl	80037b0 <HAL_GPIO_WritePin>
			if(pBuffer[0]!=0xFF)
 80013e2:	7d3b      	ldrb	r3, [r7, #20]
 80013e4:	2bff      	cmp	r3, #255	; 0xff
 80013e6:	d10f      	bne.n	8001408 <W25qxx_IsEmptyBlock+0x1a4>
		for( ; i<w25qxx.BlockSize; i++)
 80013e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013ea:	3301      	adds	r3, #1
 80013ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <W25qxx_IsEmptyBlock+0x1b8>)
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d3ba      	bcc.n	800136e <W25qxx_IsEmptyBlock+0x10a>
	}	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx CheckBlock is Empty in %d ms\r\n",HAL_GetTick()-StartTime);
	W25qxx_Delay(100);
	#endif	
	w25qxx.Lock=0;
 80013f8:	4b08      	ldr	r3, [pc, #32]	; (800141c <W25qxx_IsEmptyBlock+0x1b8>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;	
 8001400:	2301      	movs	r3, #1
 8001402:	e007      	b.n	8001414 <W25qxx_IsEmptyBlock+0x1b0>
				goto NOT_EMPTY;		
 8001404:	bf00      	nop
 8001406:	e000      	b.n	800140a <W25qxx_IsEmptyBlock+0x1a6>
				goto NOT_EMPTY;
 8001408:	bf00      	nop
	NOT_EMPTY:
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx CheckBlock is Not Empty in %d ms\r\n",HAL_GetTick()-StartTime);
	W25qxx_Delay(100);
	#endif	
	w25qxx.Lock=0;
 800140a:	4b04      	ldr	r3, [pc, #16]	; (800141c <W25qxx_IsEmptyBlock+0x1b8>)
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return false;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3740      	adds	r7, #64	; 0x40
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	200007c0 	.word	0x200007c0
 8001420:	40010800 	.word	0x40010800
 8001424:	20000cac 	.word	0x20000cac

08001428 <W25qxx_WriteByte>:
//###################################################################################################################
void W25qxx_WriteByte(uint8_t pBuffer, uint32_t WriteAddr_inBytes)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	6039      	str	r1, [r7, #0]
 8001432:	71fb      	strb	r3, [r7, #7]
	while(w25qxx.Lock==1)
 8001434:	e002      	b.n	800143c <W25qxx_WriteByte+0x14>
		W25qxx_Delay(1);
 8001436:	2001      	movs	r0, #1
 8001438:	f001 fcc0 	bl	8002dbc <HAL_Delay>
	while(w25qxx.Lock==1)
 800143c:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <W25qxx_WriteByte+0x9c>)
 800143e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001442:	2b01      	cmp	r3, #1
 8001444:	d0f7      	beq.n	8001436 <W25qxx_WriteByte+0xe>
	w25qxx.Lock=1;
 8001446:	4b1f      	ldr	r3, [pc, #124]	; (80014c4 <W25qxx_WriteByte+0x9c>)
 8001448:	2201      	movs	r2, #1
 800144a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();
	printf("w25qxx WriteByte 0x%02X at address %d begin...",pBuffer,WriteAddr_inBytes);
	#endif
	W25qxx_WaitForWriteEnd();
 800144e:	f7ff fb49 	bl	8000ae4 <W25qxx_WaitForWriteEnd>
  W25qxx_WriteEnable();
 8001452:	f7ff faeb 	bl	8000a2c <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	2110      	movs	r1, #16
 800145a:	481b      	ldr	r0, [pc, #108]	; (80014c8 <W25qxx_WriteByte+0xa0>)
 800145c:	f002 f9a8 	bl	80037b0 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x02);
 8001460:	2002      	movs	r0, #2
 8001462:	f7ff fa61 	bl	8000928 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8001466:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <W25qxx_WriteByte+0x9c>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b08      	cmp	r3, #8
 800146c:	d905      	bls.n	800147a <W25qxx_WriteByte+0x52>
		W25qxx_Spi((WriteAddr_inBytes & 0xFF000000) >> 24);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	0e1b      	lsrs	r3, r3, #24
 8001472:	b2db      	uxtb	r3, r3
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fa57 	bl	8000928 <W25qxx_Spi>
  W25qxx_Spi((WriteAddr_inBytes & 0xFF0000) >> 16);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	0c1b      	lsrs	r3, r3, #16
 800147e:	b2db      	uxtb	r3, r3
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff fa51 	bl	8000928 <W25qxx_Spi>
  W25qxx_Spi((WriteAddr_inBytes & 0xFF00) >> 8);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	0a1b      	lsrs	r3, r3, #8
 800148a:	b2db      	uxtb	r3, r3
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fa4b 	bl	8000928 <W25qxx_Spi>
  W25qxx_Spi(WriteAddr_inBytes & 0xFF);
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fa46 	bl	8000928 <W25qxx_Spi>
  W25qxx_Spi(pBuffer);
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fa42 	bl	8000928 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80014a4:	2201      	movs	r2, #1
 80014a6:	2110      	movs	r1, #16
 80014a8:	4807      	ldr	r0, [pc, #28]	; (80014c8 <W25qxx_WriteByte+0xa0>)
 80014aa:	f002 f981 	bl	80037b0 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 80014ae:	f7ff fb19 	bl	8000ae4 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx WriteByte done after %d ms\r\n",HAL_GetTick()-StartTime);
	#endif
	w25qxx.Lock=0;
 80014b2:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <W25qxx_WriteByte+0x9c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200007c0 	.word	0x200007c0
 80014c8:	40010800 	.word	0x40010800

080014cc <W25qxx_WritePage>:
//###################################################################################################################
void 	W25qxx_WritePage(uint8_t *pBuffer	,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToWrite_up_to_PageSize)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
 80014d8:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 80014da:	e002      	b.n	80014e2 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 80014dc:	2001      	movs	r0, #1
 80014de:	f001 fc6d 	bl	8002dbc <HAL_Delay>
	while(w25qxx.Lock==1)
 80014e2:	4b37      	ldr	r3, [pc, #220]	; (80015c0 <W25qxx_WritePage+0xf4>)
 80014e4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d0f7      	beq.n	80014dc <W25qxx_WritePage+0x10>
	w25qxx.Lock=1;
 80014ec:	4b34      	ldr	r3, [pc, #208]	; (80015c0 <W25qxx_WritePage+0xf4>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if(((NumByteToWrite_up_to_PageSize+OffsetInByte)>w25qxx.PageSize)||(NumByteToWrite_up_to_PageSize==0))
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	4a31      	ldr	r2, [pc, #196]	; (80015c0 <W25qxx_WritePage+0xf4>)
 80014fc:	8952      	ldrh	r2, [r2, #10]
 80014fe:	4293      	cmp	r3, r2
 8001500:	d802      	bhi.n	8001508 <W25qxx_WritePage+0x3c>
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d105      	bne.n	8001514 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize=w25qxx.PageSize-OffsetInByte;
 8001508:	4b2d      	ldr	r3, [pc, #180]	; (80015c0 <W25qxx_WritePage+0xf4>)
 800150a:	895b      	ldrh	r3, [r3, #10]
 800150c:	461a      	mov	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	603b      	str	r3, [r7, #0]
	if((OffsetInByte+NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	4413      	add	r3, r2
 800151a:	4a29      	ldr	r2, [pc, #164]	; (80015c0 <W25qxx_WritePage+0xf4>)
 800151c:	8952      	ldrh	r2, [r2, #10]
 800151e:	4293      	cmp	r3, r2
 8001520:	d905      	bls.n	800152e <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 8001522:	4b27      	ldr	r3, [pc, #156]	; (80015c0 <W25qxx_WritePage+0xf4>)
 8001524:	895b      	ldrh	r3, [r3, #10]
 8001526:	461a      	mov	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t	StartTime=HAL_GetTick();
	#endif	
	W25qxx_WaitForWriteEnd();
 800152e:	f7ff fad9 	bl	8000ae4 <W25qxx_WaitForWriteEnd>
  W25qxx_WriteEnable();
 8001532:	f7ff fa7b 	bl	8000a2c <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	2110      	movs	r1, #16
 800153a:	4822      	ldr	r0, [pc, #136]	; (80015c4 <W25qxx_WritePage+0xf8>)
 800153c:	f002 f938 	bl	80037b0 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x02);
 8001540:	2002      	movs	r0, #2
 8001542:	f7ff f9f1 	bl	8000928 <W25qxx_Spi>
	Page_Address = (Page_Address*w25qxx.PageSize)+OffsetInByte;	
 8001546:	4b1e      	ldr	r3, [pc, #120]	; (80015c0 <W25qxx_WritePage+0xf4>)
 8001548:	895b      	ldrh	r3, [r3, #10]
 800154a:	461a      	mov	r2, r3
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	fb03 f302 	mul.w	r3, r3, r2
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	60bb      	str	r3, [r7, #8]
	if(w25qxx.ID>=W25Q256)
 8001558:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <W25qxx_WritePage+0xf4>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b08      	cmp	r3, #8
 800155e:	d905      	bls.n	800156c <W25qxx_WritePage+0xa0>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	0e1b      	lsrs	r3, r3, #24
 8001564:	b2db      	uxtb	r3, r3
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff f9de 	bl	8000928 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	0c1b      	lsrs	r3, r3, #16
 8001570:	b2db      	uxtb	r3, r3
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff f9d8 	bl	8000928 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	0a1b      	lsrs	r3, r3, #8
 800157c:	b2db      	uxtb	r3, r3
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff f9d2 	bl	8000928 <W25qxx_Spi>
  W25qxx_Spi(Page_Address&0xFF);
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	b2db      	uxtb	r3, r3
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff f9cd 	bl	8000928 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI,pBuffer,NumByteToWrite_up_to_PageSize,100);	
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	b29a      	uxth	r2, r3
 8001592:	2364      	movs	r3, #100	; 0x64
 8001594:	68f9      	ldr	r1, [r7, #12]
 8001596:	480c      	ldr	r0, [pc, #48]	; (80015c8 <W25qxx_WritePage+0xfc>)
 8001598:	f003 fe8f 	bl	80052ba <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800159c:	2201      	movs	r2, #1
 800159e:	2110      	movs	r1, #16
 80015a0:	4808      	ldr	r0, [pc, #32]	; (80015c4 <W25qxx_WritePage+0xf8>)
 80015a2:	f002 f905 	bl	80037b0 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 80015a6:	f7ff fa9d 	bl	8000ae4 <W25qxx_WaitForWriteEnd>
	}	
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif	
	W25qxx_Delay(1);
 80015aa:	2001      	movs	r0, #1
 80015ac:	f001 fc06 	bl	8002dbc <HAL_Delay>
	w25qxx.Lock=0;
 80015b0:	4b03      	ldr	r3, [pc, #12]	; (80015c0 <W25qxx_WritePage+0xf4>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80015b8:	bf00      	nop
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	200007c0 	.word	0x200007c0
 80015c4:	40010800 	.word	0x40010800
 80015c8:	20000cac 	.word	0x20000cac

080015cc <W25qxx_WriteSector>:
//###################################################################################################################
void 	W25qxx_WriteSector(uint8_t *pBuffer	,uint32_t Sector_Address,uint32_t OffsetInByte	,uint32_t NumByteToWrite_up_to_SectorSize)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
 80015d8:	603b      	str	r3, [r7, #0]
	if((NumByteToWrite_up_to_SectorSize>w25qxx.SectorSize)||(NumByteToWrite_up_to_SectorSize==0))
 80015da:	4b2b      	ldr	r3, [pc, #172]	; (8001688 <W25qxx_WriteSector+0xbc>)
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d802      	bhi.n	80015ea <W25qxx_WriteSector+0x1e>
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d102      	bne.n	80015f0 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize=w25qxx.SectorSize;
 80015ea:	4b27      	ldr	r3, [pc, #156]	; (8001688 <W25qxx_WriteSector+0xbc>)
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n",Sector_Address,OffsetInByte,NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
	#endif	
	if(OffsetInByte>=w25qxx.SectorSize)
 80015f0:	4b25      	ldr	r3, [pc, #148]	; (8001688 <W25qxx_WriteSector+0xbc>)
 80015f2:	691b      	ldr	r3, [r3, #16]
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d241      	bcs.n	800167e <W25qxx_WriteSector+0xb2>
		return;
	}	
	uint32_t	StartPage;
	int32_t		BytesToWrite;
	uint32_t	LocalOffset;	
	if((OffsetInByte+NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	441a      	add	r2, r3
 8001600:	4b21      	ldr	r3, [pc, #132]	; (8001688 <W25qxx_WriteSector+0xbc>)
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	429a      	cmp	r2, r3
 8001606:	d905      	bls.n	8001614 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize-OffsetInByte;
 8001608:	4b1f      	ldr	r3, [pc, #124]	; (8001688 <W25qxx_WriteSector+0xbc>)
 800160a:	691a      	ldr	r2, [r3, #16]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	61bb      	str	r3, [r7, #24]
 8001612:	e001      	b.n	8001618 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;	
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address)+(OffsetInByte/w25qxx.PageSize);
 8001618:	68b8      	ldr	r0, [r7, #8]
 800161a:	f7ff fc2d 	bl	8000e78 <W25qxx_SectorToPage>
 800161e:	4602      	mov	r2, r0
 8001620:	4b19      	ldr	r3, [pc, #100]	; (8001688 <W25qxx_WriteSector+0xbc>)
 8001622:	895b      	ldrh	r3, [r3, #10]
 8001624:	4619      	mov	r1, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	fbb3 f3f1 	udiv	r3, r3, r1
 800162c:	4413      	add	r3, r2
 800162e:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;	
 8001630:	4b15      	ldr	r3, [pc, #84]	; (8001688 <W25qxx_WriteSector+0xbc>)
 8001632:	895b      	ldrh	r3, [r3, #10]
 8001634:	461a      	mov	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	fbb3 f1f2 	udiv	r1, r3, r2
 800163c:	fb02 f201 	mul.w	r2, r2, r1
 8001640:	1a9b      	subs	r3, r3, r2
 8001642:	617b      	str	r3, [r7, #20]
	do
	{		
		W25qxx_WritePage(pBuffer,StartPage,LocalOffset,BytesToWrite);
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	69f9      	ldr	r1, [r7, #28]
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f7ff ff3e 	bl	80014cc <W25qxx_WritePage>
		StartPage++;
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	3301      	adds	r3, #1
 8001654:	61fb      	str	r3, [r7, #28]
		BytesToWrite-=w25qxx.PageSize-LocalOffset;
 8001656:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <W25qxx_WriteSector+0xbc>)
 8001658:	895b      	ldrh	r3, [r3, #10]
 800165a:	461a      	mov	r2, r3
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	1a9a      	subs	r2, r3, r2
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	4413      	add	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
		pBuffer+=w25qxx.PageSize;	
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <W25qxx_WriteSector+0xbc>)
 8001668:	895b      	ldrh	r3, [r3, #10]
 800166a:	461a      	mov	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4413      	add	r3, r2
 8001670:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
	}while(BytesToWrite>0);		
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	2b00      	cmp	r3, #0
 800167a:	dce3      	bgt.n	8001644 <W25qxx_WriteSector+0x78>
 800167c:	e000      	b.n	8001680 <W25qxx_WriteSector+0xb4>
		return;
 800167e:	bf00      	nop
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
	#endif	
}
 8001680:	3720      	adds	r7, #32
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200007c0 	.word	0x200007c0

0800168c <W25qxx_WriteBlock>:
//###################################################################################################################
void 	W25qxx_WriteBlock	(uint8_t* pBuffer ,uint32_t Block_Address	,uint32_t OffsetInByte	,uint32_t	NumByteToWrite_up_to_BlockSize)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b088      	sub	sp, #32
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
 8001698:	603b      	str	r3, [r7, #0]
	if((NumByteToWrite_up_to_BlockSize>w25qxx.BlockSize)||(NumByteToWrite_up_to_BlockSize==0))
 800169a:	4b2b      	ldr	r3, [pc, #172]	; (8001748 <W25qxx_WriteBlock+0xbc>)
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d802      	bhi.n	80016aa <W25qxx_WriteBlock+0x1e>
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d102      	bne.n	80016b0 <W25qxx_WriteBlock+0x24>
		NumByteToWrite_up_to_BlockSize=w25qxx.BlockSize;
 80016aa:	4b27      	ldr	r3, [pc, #156]	; (8001748 <W25qxx_WriteBlock+0xbc>)
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx WriteBlock:%d, Offset:%d ,Write %d Bytes, begin...\r\n",Block_Address,OffsetInByte,NumByteToWrite_up_to_BlockSize);
	W25qxx_Delay(100);
	#endif	
	if(OffsetInByte>=w25qxx.BlockSize)
 80016b0:	4b25      	ldr	r3, [pc, #148]	; (8001748 <W25qxx_WriteBlock+0xbc>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d241      	bcs.n	800173e <W25qxx_WriteBlock+0xb2>
		return;
	}	
	uint32_t	StartPage;
	int32_t		BytesToWrite;
	uint32_t	LocalOffset;	
	if((OffsetInByte+NumByteToWrite_up_to_BlockSize) > w25qxx.BlockSize)
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	441a      	add	r2, r3
 80016c0:	4b21      	ldr	r3, [pc, #132]	; (8001748 <W25qxx_WriteBlock+0xbc>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d905      	bls.n	80016d4 <W25qxx_WriteBlock+0x48>
		BytesToWrite = w25qxx.BlockSize-OffsetInByte;
 80016c8:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <W25qxx_WriteBlock+0xbc>)
 80016ca:	699a      	ldr	r2, [r3, #24]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	61bb      	str	r3, [r7, #24]
 80016d2:	e001      	b.n	80016d8 <W25qxx_WriteBlock+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_BlockSize;	
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_BlockToPage(Block_Address)+(OffsetInByte/w25qxx.PageSize);
 80016d8:	68b8      	ldr	r0, [r7, #8]
 80016da:	f7ff fbe1 	bl	8000ea0 <W25qxx_BlockToPage>
 80016de:	4602      	mov	r2, r0
 80016e0:	4b19      	ldr	r3, [pc, #100]	; (8001748 <W25qxx_WriteBlock+0xbc>)
 80016e2:	895b      	ldrh	r3, [r3, #10]
 80016e4:	4619      	mov	r1, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ec:	4413      	add	r3, r2
 80016ee:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;	
 80016f0:	4b15      	ldr	r3, [pc, #84]	; (8001748 <W25qxx_WriteBlock+0xbc>)
 80016f2:	895b      	ldrh	r3, [r3, #10]
 80016f4:	461a      	mov	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80016fc:	fb02 f201 	mul.w	r2, r2, r1
 8001700:	1a9b      	subs	r3, r3, r2
 8001702:	617b      	str	r3, [r7, #20]
	do
	{		
		W25qxx_WritePage(pBuffer,StartPage,LocalOffset,BytesToWrite);
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	69f9      	ldr	r1, [r7, #28]
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	f7ff fede 	bl	80014cc <W25qxx_WritePage>
		StartPage++;
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	3301      	adds	r3, #1
 8001714:	61fb      	str	r3, [r7, #28]
		BytesToWrite-=w25qxx.PageSize-LocalOffset;
 8001716:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <W25qxx_WriteBlock+0xbc>)
 8001718:	895b      	ldrh	r3, [r3, #10]
 800171a:	461a      	mov	r2, r3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	1a9a      	subs	r2, r3, r2
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	4413      	add	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
		pBuffer+=w25qxx.PageSize;	
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <W25qxx_WriteBlock+0xbc>)
 8001728:	895b      	ldrh	r3, [r3, #10]
 800172a:	461a      	mov	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4413      	add	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
	}while(BytesToWrite>0);		
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	2b00      	cmp	r3, #0
 800173a:	dce3      	bgt.n	8001704 <W25qxx_WriteBlock+0x78>
 800173c:	e000      	b.n	8001740 <W25qxx_WriteBlock+0xb4>
		return;
 800173e:	bf00      	nop
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx WriteBlock Done\r\n");
	W25qxx_Delay(100);
	#endif	
}
 8001740:	3720      	adds	r7, #32
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200007c0 	.word	0x200007c0

0800174c <W25qxx_ReadByte>:
//###################################################################################################################
void 	W25qxx_ReadByte(uint8_t *pBuffer,uint32_t Bytes_Address)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
	while(w25qxx.Lock==1)
 8001756:	e002      	b.n	800175e <W25qxx_ReadByte+0x12>
		W25qxx_Delay(1);
 8001758:	2001      	movs	r0, #1
 800175a:	f001 fb2f 	bl	8002dbc <HAL_Delay>
	while(w25qxx.Lock==1)
 800175e:	4b21      	ldr	r3, [pc, #132]	; (80017e4 <W25qxx_ReadByte+0x98>)
 8001760:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001764:	2b01      	cmp	r3, #1
 8001766:	d0f7      	beq.n	8001758 <W25qxx_ReadByte+0xc>
	w25qxx.Lock=1;
 8001768:	4b1e      	ldr	r3, [pc, #120]	; (80017e4 <W25qxx_ReadByte+0x98>)
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();
	printf("w25qxx ReadByte at address %d begin...\r\n",Bytes_Address);
	#endif
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001770:	2200      	movs	r2, #0
 8001772:	2110      	movs	r1, #16
 8001774:	481c      	ldr	r0, [pc, #112]	; (80017e8 <W25qxx_ReadByte+0x9c>)
 8001776:	f002 f81b 	bl	80037b0 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x0B);
 800177a:	200b      	movs	r0, #11
 800177c:	f7ff f8d4 	bl	8000928 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8001780:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <W25qxx_ReadByte+0x98>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b08      	cmp	r3, #8
 8001786:	d905      	bls.n	8001794 <W25qxx_ReadByte+0x48>
		W25qxx_Spi((Bytes_Address & 0xFF000000) >> 24);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	0e1b      	lsrs	r3, r3, #24
 800178c:	b2db      	uxtb	r3, r3
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff f8ca 	bl	8000928 <W25qxx_Spi>
  W25qxx_Spi((Bytes_Address & 0xFF0000) >> 16);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	0c1b      	lsrs	r3, r3, #16
 8001798:	b2db      	uxtb	r3, r3
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff f8c4 	bl	8000928 <W25qxx_Spi>
  W25qxx_Spi((Bytes_Address& 0xFF00) >> 8);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	0a1b      	lsrs	r3, r3, #8
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff f8be 	bl	8000928 <W25qxx_Spi>
  W25qxx_Spi(Bytes_Address & 0xFF);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff f8b9 	bl	8000928 <W25qxx_Spi>
	W25qxx_Spi(0);
 80017b6:	2000      	movs	r0, #0
 80017b8:	f7ff f8b6 	bl	8000928 <W25qxx_Spi>
	*pBuffer = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80017bc:	20a5      	movs	r0, #165	; 0xa5
 80017be:	f7ff f8b3 	bl	8000928 <W25qxx_Spi>
 80017c2:	4603      	mov	r3, r0
 80017c4:	461a      	mov	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);	
 80017ca:	2201      	movs	r2, #1
 80017cc:	2110      	movs	r1, #16
 80017ce:	4806      	ldr	r0, [pc, #24]	; (80017e8 <W25qxx_ReadByte+0x9c>)
 80017d0:	f001 ffee 	bl	80037b0 <HAL_GPIO_WritePin>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ReadByte 0x%02X done after %d ms\r\n",*pBuffer,HAL_GetTick()-StartTime);
	#endif
	w25qxx.Lock=0;
 80017d4:	4b03      	ldr	r3, [pc, #12]	; (80017e4 <W25qxx_ReadByte+0x98>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	200007c0 	.word	0x200007c0
 80017e8:	40010800 	.word	0x40010800

080017ec <W25qxx_ReadBytes>:
//###################################################################################################################
void W25qxx_ReadBytes(uint8_t* pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
	while(w25qxx.Lock==1)
 80017f8:	e002      	b.n	8001800 <W25qxx_ReadBytes+0x14>
		W25qxx_Delay(1);
 80017fa:	2001      	movs	r0, #1
 80017fc:	f001 fade 	bl	8002dbc <HAL_Delay>
	while(w25qxx.Lock==1)
 8001800:	4b23      	ldr	r3, [pc, #140]	; (8001890 <W25qxx_ReadBytes+0xa4>)
 8001802:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001806:	2b01      	cmp	r3, #1
 8001808:	d0f7      	beq.n	80017fa <W25qxx_ReadBytes+0xe>
	w25qxx.Lock=1;
 800180a:	4b21      	ldr	r3, [pc, #132]	; (8001890 <W25qxx_ReadBytes+0xa4>)
 800180c:	2201      	movs	r2, #1
 800180e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();
	printf("w25qxx ReadBytes at Address:%d, %d Bytes  begin...\r\n",ReadAddr,NumByteToRead);
	#endif	
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001812:	2200      	movs	r2, #0
 8001814:	2110      	movs	r1, #16
 8001816:	481f      	ldr	r0, [pc, #124]	; (8001894 <W25qxx_ReadBytes+0xa8>)
 8001818:	f001 ffca 	bl	80037b0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x0B);
 800181c:	200b      	movs	r0, #11
 800181e:	f7ff f883 	bl	8000928 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8001822:	4b1b      	ldr	r3, [pc, #108]	; (8001890 <W25qxx_ReadBytes+0xa4>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b08      	cmp	r3, #8
 8001828:	d905      	bls.n	8001836 <W25qxx_ReadBytes+0x4a>
		W25qxx_Spi((ReadAddr & 0xFF000000) >> 24);
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	0e1b      	lsrs	r3, r3, #24
 800182e:	b2db      	uxtb	r3, r3
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff f879 	bl	8000928 <W25qxx_Spi>
  W25qxx_Spi((ReadAddr & 0xFF0000) >> 16);
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	0c1b      	lsrs	r3, r3, #16
 800183a:	b2db      	uxtb	r3, r3
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff f873 	bl	8000928 <W25qxx_Spi>
  W25qxx_Spi((ReadAddr& 0xFF00) >> 8);
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	0a1b      	lsrs	r3, r3, #8
 8001846:	b2db      	uxtb	r3, r3
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff f86d 	bl	8000928 <W25qxx_Spi>
  W25qxx_Spi(ReadAddr & 0xFF);
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	b2db      	uxtb	r3, r3
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff f868 	bl	8000928 <W25qxx_Spi>
	W25qxx_Spi(0);
 8001858:	2000      	movs	r0, #0
 800185a:	f7ff f865 	bl	8000928 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,NumByteToRead,2000);	
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	b29a      	uxth	r2, r3
 8001862:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001866:	68f9      	ldr	r1, [r7, #12]
 8001868:	480b      	ldr	r0, [pc, #44]	; (8001898 <W25qxx_ReadBytes+0xac>)
 800186a:	f003 fe5a 	bl	8005522 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800186e:	2201      	movs	r2, #1
 8001870:	2110      	movs	r1, #16
 8001872:	4808      	ldr	r0, [pc, #32]	; (8001894 <W25qxx_ReadBytes+0xa8>)
 8001874:	f001 ff9c 	bl	80037b0 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadBytes done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif	
	W25qxx_Delay(1);
 8001878:	2001      	movs	r0, #1
 800187a:	f001 fa9f 	bl	8002dbc <HAL_Delay>
	w25qxx.Lock=0;
 800187e:	4b04      	ldr	r3, [pc, #16]	; (8001890 <W25qxx_ReadBytes+0xa4>)
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001886:	bf00      	nop
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200007c0 	.word	0x200007c0
 8001894:	40010800 	.word	0x40010800
 8001898:	20000cac 	.word	0x20000cac

0800189c <W25qxx_ReadPage>:
//###################################################################################################################
void 	W25qxx_ReadPage(uint8_t *pBuffer,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToRead_up_to_PageSize)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
 80018a8:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 80018aa:	e002      	b.n	80018b2 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 80018ac:	2001      	movs	r0, #1
 80018ae:	f001 fa85 	bl	8002dbc <HAL_Delay>
	while(w25qxx.Lock==1)
 80018b2:	4b34      	ldr	r3, [pc, #208]	; (8001984 <W25qxx_ReadPage+0xe8>)
 80018b4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d0f7      	beq.n	80018ac <W25qxx_ReadPage+0x10>
	w25qxx.Lock=1;
 80018bc:	4b31      	ldr	r3, [pc, #196]	; (8001984 <W25qxx_ReadPage+0xe8>)
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if((NumByteToRead_up_to_PageSize>w25qxx.PageSize)||(NumByteToRead_up_to_PageSize==0))
 80018c4:	4b2f      	ldr	r3, [pc, #188]	; (8001984 <W25qxx_ReadPage+0xe8>)
 80018c6:	895b      	ldrh	r3, [r3, #10]
 80018c8:	461a      	mov	r2, r3
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d802      	bhi.n	80018d6 <W25qxx_ReadPage+0x3a>
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d102      	bne.n	80018dc <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize=w25qxx.PageSize;
 80018d6:	4b2b      	ldr	r3, [pc, #172]	; (8001984 <W25qxx_ReadPage+0xe8>)
 80018d8:	895b      	ldrh	r3, [r3, #10]
 80018da:	603b      	str	r3, [r7, #0]
	if((OffsetInByte+NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	4413      	add	r3, r2
 80018e2:	4a28      	ldr	r2, [pc, #160]	; (8001984 <W25qxx_ReadPage+0xe8>)
 80018e4:	8952      	ldrh	r2, [r2, #10]
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d905      	bls.n	80018f6 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 80018ea:	4b26      	ldr	r3, [pc, #152]	; (8001984 <W25qxx_ReadPage+0xe8>)
 80018ec:	895b      	ldrh	r3, [r3, #10]
 80018ee:	461a      	mov	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t	StartTime=HAL_GetTick();
	#endif	
	Page_Address = Page_Address*w25qxx.PageSize+OffsetInByte;
 80018f6:	4b23      	ldr	r3, [pc, #140]	; (8001984 <W25qxx_ReadPage+0xe8>)
 80018f8:	895b      	ldrh	r3, [r3, #10]
 80018fa:	461a      	mov	r2, r3
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	fb03 f302 	mul.w	r3, r3, r2
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	4413      	add	r3, r2
 8001906:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001908:	2200      	movs	r2, #0
 800190a:	2110      	movs	r1, #16
 800190c:	481e      	ldr	r0, [pc, #120]	; (8001988 <W25qxx_ReadPage+0xec>)
 800190e:	f001 ff4f 	bl	80037b0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x0B);
 8001912:	200b      	movs	r0, #11
 8001914:	f7ff f808 	bl	8000928 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8001918:	4b1a      	ldr	r3, [pc, #104]	; (8001984 <W25qxx_ReadPage+0xe8>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b08      	cmp	r3, #8
 800191e:	d905      	bls.n	800192c <W25qxx_ReadPage+0x90>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	0e1b      	lsrs	r3, r3, #24
 8001924:	b2db      	uxtb	r3, r3
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fffe 	bl	8000928 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	0c1b      	lsrs	r3, r3, #16
 8001930:	b2db      	uxtb	r3, r3
 8001932:	4618      	mov	r0, r3
 8001934:	f7fe fff8 	bl	8000928 <W25qxx_Spi>
  W25qxx_Spi((Page_Address& 0xFF00) >> 8);
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	0a1b      	lsrs	r3, r3, #8
 800193c:	b2db      	uxtb	r3, r3
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fff2 	bl	8000928 <W25qxx_Spi>
  W25qxx_Spi(Page_Address & 0xFF);
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	b2db      	uxtb	r3, r3
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe ffed 	bl	8000928 <W25qxx_Spi>
	W25qxx_Spi(0);
 800194e:	2000      	movs	r0, #0
 8001950:	f7fe ffea 	bl	8000928 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,NumByteToRead_up_to_PageSize,100);	
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	b29a      	uxth	r2, r3
 8001958:	2364      	movs	r3, #100	; 0x64
 800195a:	68f9      	ldr	r1, [r7, #12]
 800195c:	480b      	ldr	r0, [pc, #44]	; (800198c <W25qxx_ReadPage+0xf0>)
 800195e:	f003 fde0 	bl	8005522 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001962:	2201      	movs	r2, #1
 8001964:	2110      	movs	r1, #16
 8001966:	4808      	ldr	r0, [pc, #32]	; (8001988 <W25qxx_ReadPage+0xec>)
 8001968:	f001 ff22 	bl	80037b0 <HAL_GPIO_WritePin>
	}	
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif	
	W25qxx_Delay(1);
 800196c:	2001      	movs	r0, #1
 800196e:	f001 fa25 	bl	8002dbc <HAL_Delay>
	w25qxx.Lock=0;
 8001972:	4b04      	ldr	r3, [pc, #16]	; (8001984 <W25qxx_ReadPage+0xe8>)
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	200007c0 	.word	0x200007c0
 8001988:	40010800 	.word	0x40010800
 800198c:	20000cac 	.word	0x20000cac

08001990 <W25qxx_ReadSector>:
//###################################################################################################################
void 	W25qxx_ReadSector(uint8_t *pBuffer,uint32_t Sector_Address,uint32_t OffsetInByte,uint32_t NumByteToRead_up_to_SectorSize)
{	
 8001990:	b580      	push	{r7, lr}
 8001992:	b088      	sub	sp, #32
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
 800199c:	603b      	str	r3, [r7, #0]
	if((NumByteToRead_up_to_SectorSize>w25qxx.SectorSize)||(NumByteToRead_up_to_SectorSize==0))
 800199e:	4b2b      	ldr	r3, [pc, #172]	; (8001a4c <W25qxx_ReadSector+0xbc>)
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d802      	bhi.n	80019ae <W25qxx_ReadSector+0x1e>
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d102      	bne.n	80019b4 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize=w25qxx.SectorSize;
 80019ae:	4b27      	ldr	r3, [pc, #156]	; (8001a4c <W25qxx_ReadSector+0xbc>)
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n",Sector_Address,OffsetInByte,NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
	#endif	
	if(OffsetInByte>=w25qxx.SectorSize)
 80019b4:	4b25      	ldr	r3, [pc, #148]	; (8001a4c <W25qxx_ReadSector+0xbc>)
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d241      	bcs.n	8001a42 <W25qxx_ReadSector+0xb2>
		return;
	}	
	uint32_t	StartPage;
	int32_t		BytesToRead;
	uint32_t	LocalOffset;	
	if((OffsetInByte+NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	441a      	add	r2, r3
 80019c4:	4b21      	ldr	r3, [pc, #132]	; (8001a4c <W25qxx_ReadSector+0xbc>)
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d905      	bls.n	80019d8 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize-OffsetInByte;
 80019cc:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <W25qxx_ReadSector+0xbc>)
 80019ce:	691a      	ldr	r2, [r3, #16]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	61bb      	str	r3, [r7, #24]
 80019d6:	e001      	b.n	80019dc <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;	
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address)+(OffsetInByte/w25qxx.PageSize);
 80019dc:	68b8      	ldr	r0, [r7, #8]
 80019de:	f7ff fa4b 	bl	8000e78 <W25qxx_SectorToPage>
 80019e2:	4602      	mov	r2, r0
 80019e4:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <W25qxx_ReadSector+0xbc>)
 80019e6:	895b      	ldrh	r3, [r3, #10]
 80019e8:	4619      	mov	r1, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80019f0:	4413      	add	r3, r2
 80019f2:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;	
 80019f4:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <W25qxx_ReadSector+0xbc>)
 80019f6:	895b      	ldrh	r3, [r3, #10]
 80019f8:	461a      	mov	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a00:	fb02 f201 	mul.w	r2, r2, r1
 8001a04:	1a9b      	subs	r3, r3, r2
 8001a06:	617b      	str	r3, [r7, #20]
	do
	{		
		W25qxx_ReadPage(pBuffer,StartPage,LocalOffset,BytesToRead);
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	69f9      	ldr	r1, [r7, #28]
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f7ff ff44 	bl	800189c <W25qxx_ReadPage>
		StartPage++;
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	3301      	adds	r3, #1
 8001a18:	61fb      	str	r3, [r7, #28]
		BytesToRead-=w25qxx.PageSize-LocalOffset;
 8001a1a:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <W25qxx_ReadSector+0xbc>)
 8001a1c:	895b      	ldrh	r3, [r3, #10]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	1a9a      	subs	r2, r3, r2
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	4413      	add	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
		pBuffer+=w25qxx.PageSize;	
 8001a2a:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <W25qxx_ReadSector+0xbc>)
 8001a2c:	895b      	ldrh	r3, [r3, #10]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4413      	add	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
	}while(BytesToRead>0);		
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	dce3      	bgt.n	8001a08 <W25qxx_ReadSector+0x78>
 8001a40:	e000      	b.n	8001a44 <W25qxx_ReadSector+0xb4>
		return;
 8001a42:	bf00      	nop
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
	#endif	
}
 8001a44:	3720      	adds	r7, #32
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200007c0 	.word	0x200007c0

08001a50 <W25qxx_ReadBlock>:
//###################################################################################################################
void 	W25qxx_ReadBlock(uint8_t* pBuffer,uint32_t Block_Address,uint32_t OffsetInByte,uint32_t	NumByteToRead_up_to_BlockSize)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	603b      	str	r3, [r7, #0]
	if((NumByteToRead_up_to_BlockSize>w25qxx.BlockSize)||(NumByteToRead_up_to_BlockSize==0))
 8001a5e:	4b2b      	ldr	r3, [pc, #172]	; (8001b0c <W25qxx_ReadBlock+0xbc>)
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d802      	bhi.n	8001a6e <W25qxx_ReadBlock+0x1e>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d102      	bne.n	8001a74 <W25qxx_ReadBlock+0x24>
		NumByteToRead_up_to_BlockSize=w25qxx.BlockSize;
 8001a6e:	4b27      	ldr	r3, [pc, #156]	; (8001b0c <W25qxx_ReadBlock+0xbc>)
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx ReadBlock:%d, Offset:%d ,Read %d Bytes, begin...\r\n",Block_Address,OffsetInByte,NumByteToRead_up_to_BlockSize);
	W25qxx_Delay(100);
	#endif	
	if(OffsetInByte>=w25qxx.BlockSize)
 8001a74:	4b25      	ldr	r3, [pc, #148]	; (8001b0c <W25qxx_ReadBlock+0xbc>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d241      	bcs.n	8001b02 <W25qxx_ReadBlock+0xb2>
		return;
	}	
	uint32_t	StartPage;
	int32_t		BytesToRead;
	uint32_t	LocalOffset;	
	if((OffsetInByte+NumByteToRead_up_to_BlockSize) > w25qxx.BlockSize)
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	441a      	add	r2, r3
 8001a84:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <W25qxx_ReadBlock+0xbc>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d905      	bls.n	8001a98 <W25qxx_ReadBlock+0x48>
		BytesToRead = w25qxx.BlockSize-OffsetInByte;
 8001a8c:	4b1f      	ldr	r3, [pc, #124]	; (8001b0c <W25qxx_ReadBlock+0xbc>)
 8001a8e:	699a      	ldr	r2, [r3, #24]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	61bb      	str	r3, [r7, #24]
 8001a96:	e001      	b.n	8001a9c <W25qxx_ReadBlock+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_BlockSize;	
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_BlockToPage(Block_Address)+(OffsetInByte/w25qxx.PageSize);
 8001a9c:	68b8      	ldr	r0, [r7, #8]
 8001a9e:	f7ff f9ff 	bl	8000ea0 <W25qxx_BlockToPage>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <W25qxx_ReadBlock+0xbc>)
 8001aa6:	895b      	ldrh	r3, [r3, #10]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ab0:	4413      	add	r3, r2
 8001ab2:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;	
 8001ab4:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <W25qxx_ReadBlock+0xbc>)
 8001ab6:	895b      	ldrh	r3, [r3, #10]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ac0:	fb02 f201 	mul.w	r2, r2, r1
 8001ac4:	1a9b      	subs	r3, r3, r2
 8001ac6:	617b      	str	r3, [r7, #20]
	do
	{		
		W25qxx_ReadPage(pBuffer,StartPage,LocalOffset,BytesToRead);
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	69f9      	ldr	r1, [r7, #28]
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f7ff fee4 	bl	800189c <W25qxx_ReadPage>
		StartPage++;
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	61fb      	str	r3, [r7, #28]
		BytesToRead-=w25qxx.PageSize-LocalOffset;
 8001ada:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <W25qxx_ReadBlock+0xbc>)
 8001adc:	895b      	ldrh	r3, [r3, #10]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	1a9a      	subs	r2, r3, r2
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
		pBuffer+=w25qxx.PageSize;	
 8001aea:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <W25qxx_ReadBlock+0xbc>)
 8001aec:	895b      	ldrh	r3, [r3, #10]
 8001aee:	461a      	mov	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4413      	add	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
	}while(BytesToRead>0);		
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	dce3      	bgt.n	8001ac8 <W25qxx_ReadBlock+0x78>
 8001b00:	e000      	b.n	8001b04 <W25qxx_ReadBlock+0xb4>
		return;
 8001b02:	bf00      	nop
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx ReadBlock Done\r\n");
	W25qxx_Delay(100);
	#endif	
}
 8001b04:	3720      	adds	r7, #32
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200007c0 	.word	0x200007c0

08001b10 <init_user_call>:
};

WorkMode_t WorkMode=Mode_UART;

void init_user_call()//在硬件初始化完成后调用
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart2,UART_IT_IDLE);//打开总线空闲中断
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <init_user_call+0x1c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68da      	ldr	r2, [r3, #12]
 8001b1a:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <init_user_call+0x1c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0210 	orr.w	r2, r2, #16
 8001b22:	60da      	str	r2, [r3, #12]
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr
 8001b2c:	20000d04 	.word	0x20000d04

08001b30 <loop_user_call>:

void loop_user_call()//在Main函数里循环调用此函数
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
	if(linecode.IsUpdate)
 8001b34:	4b4b      	ldr	r3, [pc, #300]	; (8001c64 <loop_user_call+0x134>)
 8001b36:	7a1b      	ldrb	r3, [r3, #8]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 808b 	beq.w	8001c54 <loop_user_call+0x124>
	{
		HAL_Delay(20);//延时20ms设置通信参数
 8001b3e:	2014      	movs	r0, #20
 8001b40:	f001 f93c 	bl	8002dbc <HAL_Delay>
		if(linecode.Rate<1500000)//速率小于1.5Mbps，为串口模式(极其有限的串口支持)
 8001b44:	4b47      	ldr	r3, [pc, #284]	; (8001c64 <loop_user_call+0x134>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a47      	ldr	r2, [pc, #284]	; (8001c68 <loop_user_call+0x138>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d870      	bhi.n	8001c30 <loop_user_call+0x100>
		{//重新初始化串口
			WorkMode=Mode_UART;
 8001b4e:	4b47      	ldr	r3, [pc, #284]	; (8001c6c <loop_user_call+0x13c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]
			huart2.Instance = USART2;
 8001b54:	4b46      	ldr	r3, [pc, #280]	; (8001c70 <loop_user_call+0x140>)
 8001b56:	4a47      	ldr	r2, [pc, #284]	; (8001c74 <loop_user_call+0x144>)
 8001b58:	601a      	str	r2, [r3, #0]

			huart2.Init.BaudRate = linecode.Rate;//linecode的速率
 8001b5a:	4b42      	ldr	r3, [pc, #264]	; (8001c64 <loop_user_call+0x134>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a44      	ldr	r2, [pc, #272]	; (8001c70 <loop_user_call+0x140>)
 8001b60:	6053      	str	r3, [r2, #4]

			huart2.Init.WordLength = UART_WORDLENGTH_8B;//只支持8/9数据位（包括校验位）
 8001b62:	4b43      	ldr	r3, [pc, #268]	; (8001c70 <loop_user_call+0x140>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
			if(linecode.DataBits==8 && linecode.Parity!=0)
 8001b68:	4b3e      	ldr	r3, [pc, #248]	; (8001c64 <loop_user_call+0x134>)
 8001b6a:	88db      	ldrh	r3, [r3, #6]
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	d107      	bne.n	8001b80 <loop_user_call+0x50>
 8001b70:	4b3c      	ldr	r3, [pc, #240]	; (8001c64 <loop_user_call+0x134>)
 8001b72:	795b      	ldrb	r3, [r3, #5]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <loop_user_call+0x50>
			{
				huart2.Init.WordLength=UART_WORDLENGTH_9B;
 8001b78:	4b3d      	ldr	r3, [pc, #244]	; (8001c70 <loop_user_call+0x140>)
 8001b7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b7e:	609a      	str	r2, [r3, #8]
			}

			huart2.Init.StopBits = UART_STOPBITS_1;
 8001b80:	4b3b      	ldr	r3, [pc, #236]	; (8001c70 <loop_user_call+0x140>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	60da      	str	r2, [r3, #12]
			if(linecode.StopBits==2)
 8001b86:	4b37      	ldr	r3, [pc, #220]	; (8001c64 <loop_user_call+0x134>)
 8001b88:	791b      	ldrb	r3, [r3, #4]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d103      	bne.n	8001b96 <loop_user_call+0x66>
			{
				huart2.Init.StopBits=UART_STOPBITS_2;
 8001b8e:	4b38      	ldr	r3, [pc, #224]	; (8001c70 <loop_user_call+0x140>)
 8001b90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b94:	60da      	str	r2, [r3, #12]
			}


			huart2.Init.Parity = UART_PARITY_NONE;
 8001b96:	4b36      	ldr	r3, [pc, #216]	; (8001c70 <loop_user_call+0x140>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
			if(linecode.Parity==1)
 8001b9c:	4b31      	ldr	r3, [pc, #196]	; (8001c64 <loop_user_call+0x134>)
 8001b9e:	795b      	ldrb	r3, [r3, #5]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d103      	bne.n	8001bac <loop_user_call+0x7c>
				huart2.Init.Parity = UART_PARITY_ODD;
 8001ba4:	4b32      	ldr	r3, [pc, #200]	; (8001c70 <loop_user_call+0x140>)
 8001ba6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001baa:	611a      	str	r2, [r3, #16]
			if(linecode.Parity==2)
 8001bac:	4b2d      	ldr	r3, [pc, #180]	; (8001c64 <loop_user_call+0x134>)
 8001bae:	795b      	ldrb	r3, [r3, #5]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d103      	bne.n	8001bbc <loop_user_call+0x8c>
				huart2.Init.Parity = UART_PARITY_EVEN;
 8001bb4:	4b2e      	ldr	r3, [pc, #184]	; (8001c70 <loop_user_call+0x140>)
 8001bb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bba:	611a      	str	r2, [r3, #16]



			huart2.Init.Mode = UART_MODE_TX_RX;
 8001bbc:	4b2c      	ldr	r3, [pc, #176]	; (8001c70 <loop_user_call+0x140>)
 8001bbe:	220c      	movs	r2, #12
 8001bc0:	615a      	str	r2, [r3, #20]

			huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;//不支持流控
 8001bc2:	4b2b      	ldr	r3, [pc, #172]	; (8001c70 <loop_user_call+0x140>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]

			huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc8:	4b29      	ldr	r3, [pc, #164]	; (8001c70 <loop_user_call+0x140>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	61da      	str	r2, [r3, #28]

			 if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bce:	4828      	ldr	r0, [pc, #160]	; (8001c70 <loop_user_call+0x140>)
 8001bd0:	f004 fa24 	bl	800601c <HAL_UART_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d028      	beq.n	8001c2c <loop_user_call+0xfc>
			  {//打开失败则使用默认设置
				  huart2.Instance = USART2;
 8001bda:	4b25      	ldr	r3, [pc, #148]	; (8001c70 <loop_user_call+0x140>)
 8001bdc:	4a25      	ldr	r2, [pc, #148]	; (8001c74 <loop_user_call+0x144>)
 8001bde:	601a      	str	r2, [r3, #0]
				  huart2.Init.BaudRate = 115200;
 8001be0:	4b23      	ldr	r3, [pc, #140]	; (8001c70 <loop_user_call+0x140>)
 8001be2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001be6:	605a      	str	r2, [r3, #4]
				  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001be8:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <loop_user_call+0x140>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
				  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bee:	4b20      	ldr	r3, [pc, #128]	; (8001c70 <loop_user_call+0x140>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	60da      	str	r2, [r3, #12]
				  huart2.Init.Parity = UART_PARITY_NONE;
 8001bf4:	4b1e      	ldr	r3, [pc, #120]	; (8001c70 <loop_user_call+0x140>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	611a      	str	r2, [r3, #16]
				  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bfa:	4b1d      	ldr	r3, [pc, #116]	; (8001c70 <loop_user_call+0x140>)
 8001bfc:	220c      	movs	r2, #12
 8001bfe:	615a      	str	r2, [r3, #20]
				  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c00:	4b1b      	ldr	r3, [pc, #108]	; (8001c70 <loop_user_call+0x140>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	619a      	str	r2, [r3, #24]
				  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c06:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <loop_user_call+0x140>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	61da      	str	r2, [r3, #28]
				  HAL_UART_Init(&huart2);
 8001c0c:	4818      	ldr	r0, [pc, #96]	; (8001c70 <loop_user_call+0x140>)
 8001c0e:	f004 fa05 	bl	800601c <HAL_UART_Init>
				  linecode.DataBits=8;
 8001c12:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <loop_user_call+0x134>)
 8001c14:	2208      	movs	r2, #8
 8001c16:	80da      	strh	r2, [r3, #6]
				  linecode.Parity=0;
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <loop_user_call+0x134>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	715a      	strb	r2, [r3, #5]
				  linecode.Rate=115200;
 8001c1e:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <loop_user_call+0x134>)
 8001c20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c24:	601a      	str	r2, [r3, #0]
				  linecode.StopBits=0;
 8001c26:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <loop_user_call+0x134>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	711a      	strb	r2, [r3, #4]
			  }
			 uart_start_receive();
 8001c2c:	f000 fc0c 	bl	8002448 <uart_start_receive>
		}

		if(linecode.Rate>=2000000)//切换为spi模式
 8001c30:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <loop_user_call+0x134>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a10      	ldr	r2, [pc, #64]	; (8001c78 <loop_user_call+0x148>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d909      	bls.n	8001c4e <loop_user_call+0x11e>
		{
			WorkMode=Mode_SPI_RAW;
 8001c3a:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <loop_user_call+0x13c>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	701a      	strb	r2, [r3, #0]

			if(linecode.StopBits!=0)
 8001c40:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <loop_user_call+0x134>)
 8001c42:	791b      	ldrb	r3, [r3, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d002      	beq.n	8001c4e <loop_user_call+0x11e>
			{
				WorkMode=Mode_SPI_CMD;
 8001c48:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <loop_user_call+0x13c>)
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	701a      	strb	r2, [r3, #0]
			}
		}
		linecode.IsUpdate=0;
 8001c4e:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <loop_user_call+0x134>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	721a      	strb	r2, [r3, #8]
	}

	if(WorkMode==Mode_SPI_CMD)
 8001c54:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <loop_user_call+0x13c>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d101      	bne.n	8001c60 <loop_user_call+0x130>
			spi_cmd_process_call();//调用spi命令处理函数（不在中断中处理）
 8001c5c:	f000 f8c2 	bl	8001de4 <spi_cmd_process_call>
}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000000 	.word	0x20000000
 8001c68:	0016e35f 	.word	0x0016e35f
 8001c6c:	200001b0 	.word	0x200001b0
 8001c70:	20000d04 	.word	0x20000d04
 8001c74:	40004400 	.word	0x40004400
 8001c78:	001e847f 	.word	0x001e847f

08001c7c <cdc_receive_call>:

void cdc_receive_call(uint8_t* Buf, uint32_t Len)//由USB CDC/ACM接收数据时调用
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
	switch(WorkMode)
 8001c86:	4b18      	ldr	r3, [pc, #96]	; (8001ce8 <cdc_receive_call+0x6c>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d006      	beq.n	8001c9c <cdc_receive_call+0x20>
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d010      	beq.n	8001cb4 <cdc_receive_call+0x38>
	{
	default:
		uart_transmit(Buf,Len);
 8001c92:	6839      	ldr	r1, [r7, #0]
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 fb9f 	bl	80023d8 <uart_transmit>
		break;
 8001c9a:	e021      	b.n	8001ce0 <cdc_receive_call+0x64>
	case Mode_SPI_RAW:
		CDC_Transmit_FS(spi_transmitReceive(Buf,Len),Len);
 8001c9c:	6839      	ldr	r1, [r7, #0]
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f868 	bl	8001d74 <spi_transmitReceive>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	4619      	mov	r1, r3
 8001cac:	4610      	mov	r0, r2
 8001cae:	f007 fcff 	bl	80096b0 <CDC_Transmit_FS>
		break;
 8001cb2:	e015      	b.n	8001ce0 <cdc_receive_call+0x64>
	case Mode_SPI_CMD:
		if(spi_cmd_data.IsUpdate!=0) break;//上条命令未处理，忽略下一条命令
 8001cb4:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <cdc_receive_call+0x70>)
 8001cb6:	791b      	ldrb	r3, [r3, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d110      	bne.n	8001cde <cdc_receive_call+0x62>
		spi_cmd_data.length=Len;
 8001cbc:	4a0b      	ldr	r2, [pc, #44]	; (8001cec <cdc_receive_call+0x70>)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	6013      	str	r3, [r2, #0]
		memcpy(spi_cmd_data.data,Buf,Len);
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <cdc_receive_call+0x70>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f008 f8e6 	bl	8009e9c <memcpy>
		spi_cmd_data.IsUpdate++;
 8001cd0:	4b06      	ldr	r3, [pc, #24]	; (8001cec <cdc_receive_call+0x70>)
 8001cd2:	791b      	ldrb	r3, [r3, #4]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	4b04      	ldr	r3, [pc, #16]	; (8001cec <cdc_receive_call+0x70>)
 8001cda:	711a      	strb	r2, [r3, #4]
		break;
 8001cdc:	e000      	b.n	8001ce0 <cdc_receive_call+0x64>
		if(spi_cmd_data.IsUpdate!=0) break;//上条命令未处理，忽略下一条命令
 8001cde:	bf00      	nop

	}
}
 8001ce0:	bf00      	nop
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	200001b0 	.word	0x200001b0
 8001cec:	2000000c 	.word	0x2000000c

08001cf0 <uart_receive_call>:

void uart_receive_call(void * buf,size_t len)//接收数据完成后调用此函数
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
	if(WorkMode!=Mode_UART)
 8001cfa:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <uart_receive_call+0x28>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d106      	bne.n	8001d10 <uart_receive_call+0x20>
		return;//检查模式
	CDC_Transmit_FS(buf,len);//发送给上位机
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	4619      	mov	r1, r3
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f007 fcd1 	bl	80096b0 <CDC_Transmit_FS>
 8001d0e:	e000      	b.n	8001d12 <uart_receive_call+0x22>
		return;//检查模式
 8001d10:	bf00      	nop
}
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	200001b0 	.word	0x200001b0

08001d1c <U8A2U32>:
#include "w25qxx.h"
#include "userapp.h"

//uint8数组转uint32函数,小端模式
static uint32_t U8A2U32(void * p)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
	uint8_t * data=(uint8_t *)p;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	60fb      	str	r3, [r7, #12]
	return (((uint32_t)data[3])<<24)+(((uint32_t)data[2])<<16)+(((uint32_t)data[1])<<8)+(((uint32_t)data[0])<<0);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	3303      	adds	r3, #3
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	061a      	lsls	r2, r3, #24
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	3302      	adds	r3, #2
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	041b      	lsls	r3, r3, #16
 8001d38:	441a      	add	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	021b      	lsls	r3, r3, #8
 8001d42:	4413      	add	r3, r2
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	7812      	ldrb	r2, [r2, #0]
 8001d48:	4413      	add	r3, r2
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr

08001d54 <delay>:
.data=spi_rx_buff,
.length=0
};

void delay(size_t delay)//中断中不能调用HAL_Delay时使用
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
while(delay--);
 8001d5c:	bf00      	nop
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	1e5a      	subs	r2, r3, #1
 8001d62:	607a      	str	r2, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1fa      	bne.n	8001d5e <delay+0xa>
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr
	...

08001d74 <spi_transmitReceive>:
void * spi_transmitReceive(void * txbuff,size_t len)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af02      	add	r7, sp, #8
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
	 SPI_CS_HIGH();
 8001d7e:	2201      	movs	r2, #1
 8001d80:	2110      	movs	r1, #16
 8001d82:	4815      	ldr	r0, [pc, #84]	; (8001dd8 <spi_transmitReceive+0x64>)
 8001d84:	f001 fd14 	bl	80037b0 <HAL_GPIO_WritePin>
	 delay(48*5);//
 8001d88:	20f0      	movs	r0, #240	; 0xf0
 8001d8a:	f7ff ffe3 	bl	8001d54 <delay>
	 SPI_CS_LOW();
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2110      	movs	r1, #16
 8001d92:	4811      	ldr	r0, [pc, #68]	; (8001dd8 <spi_transmitReceive+0x64>)
 8001d94:	f001 fd0c 	bl	80037b0 <HAL_GPIO_WritePin>
	 delay(48*5);
 8001d98:	20f0      	movs	r0, #240	; 0xf0
 8001d9a:	f7ff ffdb 	bl	8001d54 <delay>
	 memset(spi_rx_buff,0,sizeof(spi_rx_buff));
 8001d9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001da2:	2100      	movs	r1, #0
 8001da4:	480d      	ldr	r0, [pc, #52]	; (8001ddc <spi_transmitReceive+0x68>)
 8001da6:	f008 f884 	bl	8009eb2 <memset>
	 HAL_SPI_TransmitReceive(&hspi1,txbuff,spi_rx_buff,len,1000+len);
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	4613      	mov	r3, r2
 8001db8:	4a08      	ldr	r2, [pc, #32]	; (8001ddc <spi_transmitReceive+0x68>)
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	4808      	ldr	r0, [pc, #32]	; (8001de0 <spi_transmitReceive+0x6c>)
 8001dbe:	f003 fcb9 	bl	8005734 <HAL_SPI_TransmitReceive>
	 SPI_CS_HIGH();
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	2110      	movs	r1, #16
 8001dc6:	4804      	ldr	r0, [pc, #16]	; (8001dd8 <spi_transmitReceive+0x64>)
 8001dc8:	f001 fcf2 	bl	80037b0 <HAL_GPIO_WritePin>
	 return spi_rx_buff;
 8001dcc:	4b03      	ldr	r3, [pc, #12]	; (8001ddc <spi_transmitReceive+0x68>)
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40010800 	.word	0x40010800
 8001ddc:	200001b4 	.word	0x200001b4
 8001de0:	20000cac 	.word	0x20000cac

08001de4 <spi_cmd_process_call>:

void spi_cmd_process_call()//spi命令模式处理函数
{
 8001de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001de6:	af00      	add	r7, sp, #0
	if(spi_cmd_data.IsUpdate)//有新的命令
 8001de8:	4baa      	ldr	r3, [pc, #680]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8001dea:	791b      	ldrb	r3, [r3, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 82ef 	beq.w	80023d0 <spi_cmd_process_call+0x5ec>
	{

		switch(spi_cmd_data.data[0])//判断命令号
 8001df2:	4ba8      	ldr	r3, [pc, #672]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b10      	cmp	r3, #16
 8001dfa:	d825      	bhi.n	8001e48 <spi_cmd_process_call+0x64>
 8001dfc:	a201      	add	r2, pc, #4	; (adr r2, 8001e04 <spi_cmd_process_call+0x20>)
 8001dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e02:	bf00      	nop
 8001e04:	08001e59 	.word	0x08001e59
 8001e08:	08001ebb 	.word	0x08001ebb
 8001e0c:	08001eed 	.word	0x08001eed
 8001e10:	08001ef3 	.word	0x08001ef3
 8001e14:	08001f21 	.word	0x08001f21
 8001e18:	08001f4f 	.word	0x08001f4f
 8001e1c:	08001fa9 	.word	0x08001fa9
 8001e20:	08002003 	.word	0x08002003
 8001e24:	0800205d 	.word	0x0800205d
 8001e28:	080020a1 	.word	0x080020a1
 8001e2c:	080020ed 	.word	0x080020ed
 8001e30:	08002139 	.word	0x08002139
 8001e34:	08002185 	.word	0x08002185
 8001e38:	080021c1 	.word	0x080021c1
 8001e3c:	08002231 	.word	0x08002231
 8001e40:	080022af 	.word	0x080022af
 8001e44:	08002331 	.word	0x08002331
		{
		default:
			spi_cmd_data.data[0]=0xff;//无效命令的返回
 8001e48:	4b92      	ldr	r3, [pc, #584]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	22ff      	movs	r2, #255	; 0xff
 8001e4e:	701a      	strb	r2, [r3, #0]
			spi_cmd_data.length=0x01;
 8001e50:	4b90      	ldr	r3, [pc, #576]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	601a      	str	r2, [r3, #0]
			break;
 8001e56:	e2af      	b.n	80023b8 <spi_cmd_process_call+0x5d4>
		case 0://0号命令，设置spi通信参数，字节1为CPOL,字节2为CPHA,字节3字节序(MSB/LSB))
			if(spi_cmd_data.length>=2)
 8001e58:	4b8e      	ldr	r3, [pc, #568]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d90a      	bls.n	8001e76 <spi_cmd_process_call+0x92>
				hspi1.Init.CLKPolarity=spi_cmd_data.data[1]?SPI_POLARITY_HIGH:SPI_POLARITY_LOW;
 8001e60:	4b8c      	ldr	r3, [pc, #560]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	3301      	adds	r3, #1
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <spi_cmd_process_call+0x8c>
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	e000      	b.n	8001e72 <spi_cmd_process_call+0x8e>
 8001e70:	2300      	movs	r3, #0
 8001e72:	4a89      	ldr	r2, [pc, #548]	; (8002098 <spi_cmd_process_call+0x2b4>)
 8001e74:	6113      	str	r3, [r2, #16]
			if(spi_cmd_data.length>=3)
 8001e76:	4b87      	ldr	r3, [pc, #540]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d90a      	bls.n	8001e94 <spi_cmd_process_call+0xb0>
				hspi1.Init.CLKPhase=spi_cmd_data.data[2]?SPI_PHASE_2EDGE:SPI_PHASE_1EDGE;
 8001e7e:	4b85      	ldr	r3, [pc, #532]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	3302      	adds	r3, #2
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <spi_cmd_process_call+0xaa>
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <spi_cmd_process_call+0xac>
 8001e8e:	2300      	movs	r3, #0
 8001e90:	4a81      	ldr	r2, [pc, #516]	; (8002098 <spi_cmd_process_call+0x2b4>)
 8001e92:	6153      	str	r3, [r2, #20]
			if(spi_cmd_data.length>=4)
 8001e94:	4b7f      	ldr	r3, [pc, #508]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b03      	cmp	r3, #3
 8001e9a:	d90a      	bls.n	8001eb2 <spi_cmd_process_call+0xce>
				hspi1.Init.FirstBit=spi_cmd_data.data[3]?SPI_FIRSTBIT_LSB:SPI_FIRSTBIT_MSB;
 8001e9c:	4b7d      	ldr	r3, [pc, #500]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	3303      	adds	r3, #3
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <spi_cmd_process_call+0xc8>
 8001ea8:	2380      	movs	r3, #128	; 0x80
 8001eaa:	e000      	b.n	8001eae <spi_cmd_process_call+0xca>
 8001eac:	2300      	movs	r3, #0
 8001eae:	4a7a      	ldr	r2, [pc, #488]	; (8002098 <spi_cmd_process_call+0x2b4>)
 8001eb0:	6213      	str	r3, [r2, #32]
			HAL_SPI_Init(&hspi1);
 8001eb2:	4879      	ldr	r0, [pc, #484]	; (8002098 <spi_cmd_process_call+0x2b4>)
 8001eb4:	f003 f9a0 	bl	80051f8 <HAL_SPI_Init>

			break;
 8001eb8:	e27e      	b.n	80023b8 <spi_cmd_process_call+0x5d4>
		case 1://1号命令，重新初始化spi flash通信
			if(W25qxx_Init())
 8001eba:	f7fe fe3d 	bl	8000b38 <W25qxx_Init>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00b      	beq.n	8001edc <spi_cmd_process_call+0xf8>
			{
				memcpy(&(spi_cmd_data.data[1]),&w25qxx,sizeof(w25qxx));
 8001ec4:	4b73      	ldr	r3, [pc, #460]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	2228      	movs	r2, #40	; 0x28
 8001ecc:	4973      	ldr	r1, [pc, #460]	; (800209c <spi_cmd_process_call+0x2b8>)
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f007 ffe4 	bl	8009e9c <memcpy>
				spi_cmd_data.length=sizeof(w25qxx)+1;
 8001ed4:	4b6f      	ldr	r3, [pc, #444]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8001ed6:	2229      	movs	r2, #41	; 0x29
 8001ed8:	601a      	str	r2, [r3, #0]
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
				spi_cmd_data.length=0x01;
			}

			break;
 8001eda:	e26d      	b.n	80023b8 <spi_cmd_process_call+0x5d4>
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 8001edc:	4b6d      	ldr	r3, [pc, #436]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	22ff      	movs	r2, #255	; 0xff
 8001ee2:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 8001ee4:	4b6b      	ldr	r3, [pc, #428]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]
			break;
 8001eea:	e265      	b.n	80023b8 <spi_cmd_process_call+0x5d4>

		case 2://2号命令，W25qxx_EraseChip,芯片擦除
			W25qxx_EraseChip();
 8001eec:	f7fe feec 	bl	8000cc8 <W25qxx_EraseChip>

			break;
 8001ef0:	e262      	b.n	80023b8 <spi_cmd_process_call+0x5d4>
		case 3://3号命令,W25qxx_EraseSector,擦除扇区，前四字节为扇区地址（小端模式）
			if(spi_cmd_data.length>=5)
 8001ef2:	4b68      	ldr	r3, [pc, #416]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	d90a      	bls.n	8001f10 <spi_cmd_process_call+0x12c>
				W25qxx_EraseSector(U8A2U32(&(spi_cmd_data.data[1])));
 8001efa:	4b66      	ldr	r3, [pc, #408]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	3301      	adds	r3, #1
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff0b 	bl	8001d1c <U8A2U32>
 8001f06:	4603      	mov	r3, r0
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe ff0b 	bl	8000d24 <W25qxx_EraseSector>
						spi_cmd_data.data[0]=0xff;//失败命令的返回
						spi_cmd_data.length=0x01;

				}

			break;
 8001f0e:	e253      	b.n	80023b8 <spi_cmd_process_call+0x5d4>
						spi_cmd_data.data[0]=0xff;//失败命令的返回
 8001f10:	4b60      	ldr	r3, [pc, #384]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	22ff      	movs	r2, #255	; 0xff
 8001f16:	701a      	strb	r2, [r3, #0]
						spi_cmd_data.length=0x01;
 8001f18:	4b5e      	ldr	r3, [pc, #376]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	601a      	str	r2, [r3, #0]
			break;
 8001f1e:	e24b      	b.n	80023b8 <spi_cmd_process_call+0x5d4>
		case 4://4号命令，W25qxx_EraseBlock，擦除块，，前四字节为块地址（小端模式）
			if(spi_cmd_data.length>=5)
 8001f20:	4b5c      	ldr	r3, [pc, #368]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b04      	cmp	r3, #4
 8001f26:	d90a      	bls.n	8001f3e <spi_cmd_process_call+0x15a>
				W25qxx_EraseBlock(U8A2U32(&(spi_cmd_data.data[1])));
 8001f28:	4b5a      	ldr	r3, [pc, #360]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff fef4 	bl	8001d1c <U8A2U32>
 8001f34:	4603      	mov	r3, r0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe ff48 	bl	8000dcc <W25qxx_EraseBlock>
					spi_cmd_data.data[0]=0xff;//失败命令的返回
					spi_cmd_data.length=0x01;

				}

			break;
 8001f3c:	e23c      	b.n	80023b8 <spi_cmd_process_call+0x5d4>
					spi_cmd_data.data[0]=0xff;//失败命令的返回
 8001f3e:	4b55      	ldr	r3, [pc, #340]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	22ff      	movs	r2, #255	; 0xff
 8001f44:	701a      	strb	r2, [r3, #0]
					spi_cmd_data.length=0x01;
 8001f46:	4b53      	ldr	r3, [pc, #332]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]
			break;
 8001f4c:	e234      	b.n	80023b8 <spi_cmd_process_call+0x5d4>
		case 5://5号命令，W25qxx_IsEmptyPage，检查页是否为空,地址(4字节)+偏移(4字节)+数量(4字节)，均为小端模式
			if(!(spi_cmd_data.length>=13 && W25qxx_IsEmptyPage(U8A2U32(&(spi_cmd_data.data[1])),U8A2U32(&(spi_cmd_data.data[5])),U8A2U32(&(spi_cmd_data.data[9])))))
 8001f4e:	4b51      	ldr	r3, [pc, #324]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2b0c      	cmp	r3, #12
 8001f54:	d920      	bls.n	8001f98 <spi_cmd_process_call+0x1b4>
 8001f56:	4b4f      	ldr	r3, [pc, #316]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff fedd 	bl	8001d1c <U8A2U32>
 8001f62:	4604      	mov	r4, r0
 8001f64:	4b4b      	ldr	r3, [pc, #300]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	3305      	adds	r3, #5
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff fed6 	bl	8001d1c <U8A2U32>
 8001f70:	4605      	mov	r5, r0
 8001f72:	4b48      	ldr	r3, [pc, #288]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	3309      	adds	r3, #9
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fecf 	bl	8001d1c <U8A2U32>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	461a      	mov	r2, r3
 8001f82:	4629      	mov	r1, r5
 8001f84:	4620      	mov	r0, r4
 8001f86:	f7fe ff9f 	bl	8000ec8 <W25qxx_IsEmptyPage>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	f083 0301 	eor.w	r3, r3, #1
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 820b 	beq.w	80023ae <spi_cmd_process_call+0x5ca>
			{
					spi_cmd_data.data[0]=0xff;//失败命令的返回
 8001f98:	4b3e      	ldr	r3, [pc, #248]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	22ff      	movs	r2, #255	; 0xff
 8001f9e:	701a      	strb	r2, [r3, #0]
					spi_cmd_data.length=0x01;
 8001fa0:	4b3c      	ldr	r3, [pc, #240]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	601a      	str	r2, [r3, #0]
			}

			break;
 8001fa6:	e202      	b.n	80023ae <spi_cmd_process_call+0x5ca>
		case 6://6号命令，W25qxx_IsEmptySector,检查扇区是否为空,地址(4字节)+偏移(4字节)+数量(4字节)，均为小端模式
			if(!(spi_cmd_data.length>=13 && W25qxx_IsEmptySector(U8A2U32(&(spi_cmd_data.data[1])),U8A2U32(&(spi_cmd_data.data[5])),U8A2U32(&(spi_cmd_data.data[9])))))
 8001fa8:	4b3a      	ldr	r3, [pc, #232]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b0c      	cmp	r3, #12
 8001fae:	d920      	bls.n	8001ff2 <spi_cmd_process_call+0x20e>
 8001fb0:	4b38      	ldr	r3, [pc, #224]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff feb0 	bl	8001d1c <U8A2U32>
 8001fbc:	4604      	mov	r4, r0
 8001fbe:	4b35      	ldr	r3, [pc, #212]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	3305      	adds	r3, #5
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff fea9 	bl	8001d1c <U8A2U32>
 8001fca:	4605      	mov	r5, r0
 8001fcc:	4b31      	ldr	r3, [pc, #196]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	3309      	adds	r3, #9
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff fea2 	bl	8001d1c <U8A2U32>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4629      	mov	r1, r5
 8001fde:	4620      	mov	r0, r4
 8001fe0:	f7ff f85e 	bl	80010a0 <W25qxx_IsEmptySector>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	f083 0301 	eor.w	r3, r3, #1
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 81e0 	beq.w	80023b2 <spi_cmd_process_call+0x5ce>
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 8001ff2:	4b28      	ldr	r3, [pc, #160]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	22ff      	movs	r2, #255	; 0xff
 8001ff8:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 8001ffa:	4b26      	ldr	r3, [pc, #152]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]
			}

			break;
 8002000:	e1d7      	b.n	80023b2 <spi_cmd_process_call+0x5ce>
		case 7://7号命令，W25qxx_IsEmptyBlock，检查块是否为空,地址(4字节)+偏移(4字节)+数量(4字节)，均为小端模式
			if(!(spi_cmd_data.length>=13 && W25qxx_IsEmptyBlock(U8A2U32(&(spi_cmd_data.data[1])),U8A2U32(&(spi_cmd_data.data[5])),U8A2U32(&(spi_cmd_data.data[9])))))
 8002002:	4b24      	ldr	r3, [pc, #144]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2b0c      	cmp	r3, #12
 8002008:	d920      	bls.n	800204c <spi_cmd_process_call+0x268>
 800200a:	4b22      	ldr	r3, [pc, #136]	; (8002094 <spi_cmd_process_call+0x2b0>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	3301      	adds	r3, #1
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff fe83 	bl	8001d1c <U8A2U32>
 8002016:	4604      	mov	r4, r0
 8002018:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <spi_cmd_process_call+0x2b0>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	3305      	adds	r3, #5
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fe7c 	bl	8001d1c <U8A2U32>
 8002024:	4605      	mov	r5, r0
 8002026:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	3309      	adds	r3, #9
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff fe75 	bl	8001d1c <U8A2U32>
 8002032:	4603      	mov	r3, r0
 8002034:	461a      	mov	r2, r3
 8002036:	4629      	mov	r1, r5
 8002038:	4620      	mov	r0, r4
 800203a:	f7ff f913 	bl	8001264 <W25qxx_IsEmptyBlock>
 800203e:	4603      	mov	r3, r0
 8002040:	f083 0301 	eor.w	r3, r3, #1
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 81b5 	beq.w	80023b6 <spi_cmd_process_call+0x5d2>
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <spi_cmd_process_call+0x2b0>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	22ff      	movs	r2, #255	; 0xff
 8002052:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 8002054:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8002056:	2201      	movs	r2, #1
 8002058:	601a      	str	r2, [r3, #0]
			}

			break;
 800205a:	e1ac      	b.n	80023b6 <spi_cmd_process_call+0x5d2>
		case 8://8号命令，W25qxx_WriteByte，写入1字节数据(需要先手动擦除)，地址(4字节)+数据(1字节)
			if(spi_cmd_data.length>=6)
 800205c:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <spi_cmd_process_call+0x2b0>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b05      	cmp	r3, #5
 8002062:	d90f      	bls.n	8002084 <spi_cmd_process_call+0x2a0>
			{
				W25qxx_WriteByte(spi_cmd_data.data[5],U8A2U32(&(spi_cmd_data.data[1])));
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	3305      	adds	r3, #5
 800206a:	781c      	ldrb	r4, [r3, #0]
 800206c:	4b09      	ldr	r3, [pc, #36]	; (8002094 <spi_cmd_process_call+0x2b0>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	3301      	adds	r3, #1
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fe52 	bl	8001d1c <U8A2U32>
 8002078:	4603      	mov	r3, r0
 800207a:	4619      	mov	r1, r3
 800207c:	4620      	mov	r0, r4
 800207e:	f7ff f9d3 	bl	8001428 <W25qxx_WriteByte>
			else
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
				spi_cmd_data.length=0x01;
			}
			break;
 8002082:	e199      	b.n	80023b8 <spi_cmd_process_call+0x5d4>
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 8002084:	4b03      	ldr	r3, [pc, #12]	; (8002094 <spi_cmd_process_call+0x2b0>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	22ff      	movs	r2, #255	; 0xff
 800208a:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 800208c:	4b01      	ldr	r3, [pc, #4]	; (8002094 <spi_cmd_process_call+0x2b0>)
 800208e:	2201      	movs	r2, #1
 8002090:	601a      	str	r2, [r3, #0]
			break;
 8002092:	e191      	b.n	80023b8 <spi_cmd_process_call+0x5d4>
 8002094:	2000000c 	.word	0x2000000c
 8002098:	20000cac 	.word	0x20000cac
 800209c:	200007c0 	.word	0x200007c0
		case 9://9号命令，W25qxx_WritePage,按页写入数据，地址(4字节)+偏移(4字节)+数据(不定字节)，均为小端模式
			if(spi_cmd_data.length>=10)
 80020a0:	4ba2      	ldr	r3, [pc, #648]	; (800232c <spi_cmd_process_call+0x548>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b09      	cmp	r3, #9
 80020a6:	d919      	bls.n	80020dc <spi_cmd_process_call+0x2f8>
			{
				W25qxx_WritePage(&(spi_cmd_data.data[9]),U8A2U32(&(spi_cmd_data.data[1])),U8A2U32(&(spi_cmd_data.data[5])),spi_cmd_data.length-9);
 80020a8:	4ba0      	ldr	r3, [pc, #640]	; (800232c <spi_cmd_process_call+0x548>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f103 0409 	add.w	r4, r3, #9
 80020b0:	4b9e      	ldr	r3, [pc, #632]	; (800232c <spi_cmd_process_call+0x548>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	3301      	adds	r3, #1
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fe30 	bl	8001d1c <U8A2U32>
 80020bc:	4605      	mov	r5, r0
 80020be:	4b9b      	ldr	r3, [pc, #620]	; (800232c <spi_cmd_process_call+0x548>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	3305      	adds	r3, #5
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fe29 	bl	8001d1c <U8A2U32>
 80020ca:	4602      	mov	r2, r0
 80020cc:	4b97      	ldr	r3, [pc, #604]	; (800232c <spi_cmd_process_call+0x548>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	3b09      	subs	r3, #9
 80020d2:	4629      	mov	r1, r5
 80020d4:	4620      	mov	r0, r4
 80020d6:	f7ff f9f9 	bl	80014cc <W25qxx_WritePage>
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
				spi_cmd_data.length=0x01;
			}

			break;
 80020da:	e16d      	b.n	80023b8 <spi_cmd_process_call+0x5d4>
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 80020dc:	4b93      	ldr	r3, [pc, #588]	; (800232c <spi_cmd_process_call+0x548>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	22ff      	movs	r2, #255	; 0xff
 80020e2:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 80020e4:	4b91      	ldr	r3, [pc, #580]	; (800232c <spi_cmd_process_call+0x548>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	601a      	str	r2, [r3, #0]
			break;
 80020ea:	e165      	b.n	80023b8 <spi_cmd_process_call+0x5d4>
		case 10://10号命令,W25qxx_WriteSector,按扇区写入数据，地址(4字节)+偏移(4字节)+数据(不定字节)，均为小端模式
			if(spi_cmd_data.length>=10)
 80020ec:	4b8f      	ldr	r3, [pc, #572]	; (800232c <spi_cmd_process_call+0x548>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b09      	cmp	r3, #9
 80020f2:	d919      	bls.n	8002128 <spi_cmd_process_call+0x344>
			{
				W25qxx_WriteSector(&(spi_cmd_data.data[9]),U8A2U32(&(spi_cmd_data.data[1])),U8A2U32(&(spi_cmd_data.data[5])),spi_cmd_data.length-9);
 80020f4:	4b8d      	ldr	r3, [pc, #564]	; (800232c <spi_cmd_process_call+0x548>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f103 0409 	add.w	r4, r3, #9
 80020fc:	4b8b      	ldr	r3, [pc, #556]	; (800232c <spi_cmd_process_call+0x548>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	3301      	adds	r3, #1
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff fe0a 	bl	8001d1c <U8A2U32>
 8002108:	4605      	mov	r5, r0
 800210a:	4b88      	ldr	r3, [pc, #544]	; (800232c <spi_cmd_process_call+0x548>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	3305      	adds	r3, #5
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff fe03 	bl	8001d1c <U8A2U32>
 8002116:	4602      	mov	r2, r0
 8002118:	4b84      	ldr	r3, [pc, #528]	; (800232c <spi_cmd_process_call+0x548>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	3b09      	subs	r3, #9
 800211e:	4629      	mov	r1, r5
 8002120:	4620      	mov	r0, r4
 8002122:	f7ff fa53 	bl	80015cc <W25qxx_WriteSector>
			else
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
				spi_cmd_data.length=0x01;
			}
			break;
 8002126:	e147      	b.n	80023b8 <spi_cmd_process_call+0x5d4>
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 8002128:	4b80      	ldr	r3, [pc, #512]	; (800232c <spi_cmd_process_call+0x548>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	22ff      	movs	r2, #255	; 0xff
 800212e:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 8002130:	4b7e      	ldr	r3, [pc, #504]	; (800232c <spi_cmd_process_call+0x548>)
 8002132:	2201      	movs	r2, #1
 8002134:	601a      	str	r2, [r3, #0]
			break;
 8002136:	e13f      	b.n	80023b8 <spi_cmd_process_call+0x5d4>
		case 11://11号命令,W25qxx_WriteBlock,按块写入数据，地址(4字节)+偏移(4字节)+数据(不定字节)，均为小端模式
			if(spi_cmd_data.length>=10)
 8002138:	4b7c      	ldr	r3, [pc, #496]	; (800232c <spi_cmd_process_call+0x548>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b09      	cmp	r3, #9
 800213e:	d919      	bls.n	8002174 <spi_cmd_process_call+0x390>
			{
				W25qxx_WriteBlock(&(spi_cmd_data.data[9]),U8A2U32(&(spi_cmd_data.data[1])),U8A2U32(&(spi_cmd_data.data[5])),spi_cmd_data.length-9);
 8002140:	4b7a      	ldr	r3, [pc, #488]	; (800232c <spi_cmd_process_call+0x548>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f103 0409 	add.w	r4, r3, #9
 8002148:	4b78      	ldr	r3, [pc, #480]	; (800232c <spi_cmd_process_call+0x548>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	3301      	adds	r3, #1
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff fde4 	bl	8001d1c <U8A2U32>
 8002154:	4605      	mov	r5, r0
 8002156:	4b75      	ldr	r3, [pc, #468]	; (800232c <spi_cmd_process_call+0x548>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	3305      	adds	r3, #5
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fddd 	bl	8001d1c <U8A2U32>
 8002162:	4602      	mov	r2, r0
 8002164:	4b71      	ldr	r3, [pc, #452]	; (800232c <spi_cmd_process_call+0x548>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	3b09      	subs	r3, #9
 800216a:	4629      	mov	r1, r5
 800216c:	4620      	mov	r0, r4
 800216e:	f7ff fa8d 	bl	800168c <W25qxx_WriteBlock>
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
				spi_cmd_data.length=0x01;
			}

			break;
 8002172:	e121      	b.n	80023b8 <spi_cmd_process_call+0x5d4>
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 8002174:	4b6d      	ldr	r3, [pc, #436]	; (800232c <spi_cmd_process_call+0x548>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	22ff      	movs	r2, #255	; 0xff
 800217a:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 800217c:	4b6b      	ldr	r3, [pc, #428]	; (800232c <spi_cmd_process_call+0x548>)
 800217e:	2201      	movs	r2, #1
 8002180:	601a      	str	r2, [r3, #0]
			break;
 8002182:	e119      	b.n	80023b8 <spi_cmd_process_call+0x5d4>
		case 12://12号命令，W25qxx_ReadByte，读取1字节数据，地址(4字节)
			if(spi_cmd_data.length>=5)
 8002184:	4b69      	ldr	r3, [pc, #420]	; (800232c <spi_cmd_process_call+0x548>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b04      	cmp	r3, #4
 800218a:	d911      	bls.n	80021b0 <spi_cmd_process_call+0x3cc>
			{
				W25qxx_ReadByte(&spi_cmd_data.data[5],U8A2U32(&spi_cmd_data.data[1]));
 800218c:	4b67      	ldr	r3, [pc, #412]	; (800232c <spi_cmd_process_call+0x548>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	1d5c      	adds	r4, r3, #5
 8002192:	4b66      	ldr	r3, [pc, #408]	; (800232c <spi_cmd_process_call+0x548>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	3301      	adds	r3, #1
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fdbf 	bl	8001d1c <U8A2U32>
 800219e:	4603      	mov	r3, r0
 80021a0:	4619      	mov	r1, r3
 80021a2:	4620      	mov	r0, r4
 80021a4:	f7ff fad2 	bl	800174c <W25qxx_ReadByte>
				spi_cmd_data.length=6;
 80021a8:	4b60      	ldr	r3, [pc, #384]	; (800232c <spi_cmd_process_call+0x548>)
 80021aa:	2206      	movs	r2, #6
 80021ac:	601a      	str	r2, [r3, #0]
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
				spi_cmd_data.length=0x01;
			}

			break;
 80021ae:	e103      	b.n	80023b8 <spi_cmd_process_call+0x5d4>
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 80021b0:	4b5e      	ldr	r3, [pc, #376]	; (800232c <spi_cmd_process_call+0x548>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	22ff      	movs	r2, #255	; 0xff
 80021b6:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 80021b8:	4b5c      	ldr	r3, [pc, #368]	; (800232c <spi_cmd_process_call+0x548>)
 80021ba:	2201      	movs	r2, #1
 80021bc:	601a      	str	r2, [r3, #0]
			break;
 80021be:	e0fb      	b.n	80023b8 <spi_cmd_process_call+0x5d4>
		case 13://13号命令，W25qxx_ReadBytes，读多字节数据，地址(4字节)+数量(4字节)
			if(spi_cmd_data.length>=9 && U8A2U32(&spi_cmd_data.data[5]) <= 512)//1次最多读512字节
 80021c0:	4b5a      	ldr	r3, [pc, #360]	; (800232c <spi_cmd_process_call+0x548>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d92b      	bls.n	8002220 <spi_cmd_process_call+0x43c>
 80021c8:	4b58      	ldr	r3, [pc, #352]	; (800232c <spi_cmd_process_call+0x548>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	3305      	adds	r3, #5
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff fda4 	bl	8001d1c <U8A2U32>
 80021d4:	4603      	mov	r3, r0
 80021d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021da:	d821      	bhi.n	8002220 <spi_cmd_process_call+0x43c>
			{
				W25qxx_ReadBytes(&spi_cmd_data.data[9],U8A2U32(&spi_cmd_data.data[1]),U8A2U32(&spi_cmd_data.data[5]));
 80021dc:	4b53      	ldr	r3, [pc, #332]	; (800232c <spi_cmd_process_call+0x548>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f103 0409 	add.w	r4, r3, #9
 80021e4:	4b51      	ldr	r3, [pc, #324]	; (800232c <spi_cmd_process_call+0x548>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	3301      	adds	r3, #1
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff fd96 	bl	8001d1c <U8A2U32>
 80021f0:	4605      	mov	r5, r0
 80021f2:	4b4e      	ldr	r3, [pc, #312]	; (800232c <spi_cmd_process_call+0x548>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	3305      	adds	r3, #5
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff fd8f 	bl	8001d1c <U8A2U32>
 80021fe:	4603      	mov	r3, r0
 8002200:	461a      	mov	r2, r3
 8002202:	4629      	mov	r1, r5
 8002204:	4620      	mov	r0, r4
 8002206:	f7ff faf1 	bl	80017ec <W25qxx_ReadBytes>
				spi_cmd_data.length=9+U8A2U32(&spi_cmd_data.data[5]);
 800220a:	4b48      	ldr	r3, [pc, #288]	; (800232c <spi_cmd_process_call+0x548>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	3305      	adds	r3, #5
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff fd83 	bl	8001d1c <U8A2U32>
 8002216:	4603      	mov	r3, r0
 8002218:	3309      	adds	r3, #9
 800221a:	4a44      	ldr	r2, [pc, #272]	; (800232c <spi_cmd_process_call+0x548>)
 800221c:	6013      	str	r3, [r2, #0]
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
				spi_cmd_data.length=0x01;
			}

			break;
 800221e:	e0cb      	b.n	80023b8 <spi_cmd_process_call+0x5d4>
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 8002220:	4b42      	ldr	r3, [pc, #264]	; (800232c <spi_cmd_process_call+0x548>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	22ff      	movs	r2, #255	; 0xff
 8002226:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 8002228:	4b40      	ldr	r3, [pc, #256]	; (800232c <spi_cmd_process_call+0x548>)
 800222a:	2201      	movs	r2, #1
 800222c:	601a      	str	r2, [r3, #0]
			break;
 800222e:	e0c3      	b.n	80023b8 <spi_cmd_process_call+0x5d4>
		case 14://14号命令，W25qxx_ReadPage，按页读多字节数据，地址(4字节)+偏移(4字节)+数量(4字节),数量需要大于0
			if(spi_cmd_data.length>=13 && U8A2U32(&spi_cmd_data.data[9]) <= 512)//1次最多读512字节
 8002230:	4b3e      	ldr	r3, [pc, #248]	; (800232c <spi_cmd_process_call+0x548>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b0c      	cmp	r3, #12
 8002236:	d932      	bls.n	800229e <spi_cmd_process_call+0x4ba>
 8002238:	4b3c      	ldr	r3, [pc, #240]	; (800232c <spi_cmd_process_call+0x548>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	3309      	adds	r3, #9
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff fd6c 	bl	8001d1c <U8A2U32>
 8002244:	4603      	mov	r3, r0
 8002246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800224a:	d828      	bhi.n	800229e <spi_cmd_process_call+0x4ba>
			{
				W25qxx_ReadPage(&spi_cmd_data.data[13],U8A2U32(&spi_cmd_data.data[1]),U8A2U32(&spi_cmd_data.data[5]),U8A2U32(&spi_cmd_data.data[9]));
 800224c:	4b37      	ldr	r3, [pc, #220]	; (800232c <spi_cmd_process_call+0x548>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f103 040d 	add.w	r4, r3, #13
 8002254:	4b35      	ldr	r3, [pc, #212]	; (800232c <spi_cmd_process_call+0x548>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	3301      	adds	r3, #1
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff fd5e 	bl	8001d1c <U8A2U32>
 8002260:	4605      	mov	r5, r0
 8002262:	4b32      	ldr	r3, [pc, #200]	; (800232c <spi_cmd_process_call+0x548>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	3305      	adds	r3, #5
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff fd57 	bl	8001d1c <U8A2U32>
 800226e:	4606      	mov	r6, r0
 8002270:	4b2e      	ldr	r3, [pc, #184]	; (800232c <spi_cmd_process_call+0x548>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	3309      	adds	r3, #9
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff fd50 	bl	8001d1c <U8A2U32>
 800227c:	4603      	mov	r3, r0
 800227e:	4632      	mov	r2, r6
 8002280:	4629      	mov	r1, r5
 8002282:	4620      	mov	r0, r4
 8002284:	f7ff fb0a 	bl	800189c <W25qxx_ReadPage>
				spi_cmd_data.length=13+U8A2U32(&spi_cmd_data.data[9]);
 8002288:	4b28      	ldr	r3, [pc, #160]	; (800232c <spi_cmd_process_call+0x548>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	3309      	adds	r3, #9
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff fd44 	bl	8001d1c <U8A2U32>
 8002294:	4603      	mov	r3, r0
 8002296:	330d      	adds	r3, #13
 8002298:	4a24      	ldr	r2, [pc, #144]	; (800232c <spi_cmd_process_call+0x548>)
 800229a:	6013      	str	r3, [r2, #0]
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
				spi_cmd_data.length=0x01;
			}

			break;
 800229c:	e08c      	b.n	80023b8 <spi_cmd_process_call+0x5d4>
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 800229e:	4b23      	ldr	r3, [pc, #140]	; (800232c <spi_cmd_process_call+0x548>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	22ff      	movs	r2, #255	; 0xff
 80022a4:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 80022a6:	4b21      	ldr	r3, [pc, #132]	; (800232c <spi_cmd_process_call+0x548>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	601a      	str	r2, [r3, #0]
			break;
 80022ac:	e084      	b.n	80023b8 <spi_cmd_process_call+0x5d4>

		case 15://15号命令，W25qxx_ReadSector，按页读多字节数据，地址(4字节)+偏移(4字节)+数量(4字节),数量需要大于0
			if(spi_cmd_data.length>=13 && U8A2U32(&spi_cmd_data.data[9]) <= 512)//1次最多读512字节
 80022ae:	4b1f      	ldr	r3, [pc, #124]	; (800232c <spi_cmd_process_call+0x548>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2b0c      	cmp	r3, #12
 80022b4:	d932      	bls.n	800231c <spi_cmd_process_call+0x538>
 80022b6:	4b1d      	ldr	r3, [pc, #116]	; (800232c <spi_cmd_process_call+0x548>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	3309      	adds	r3, #9
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fd2d 	bl	8001d1c <U8A2U32>
 80022c2:	4603      	mov	r3, r0
 80022c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022c8:	d828      	bhi.n	800231c <spi_cmd_process_call+0x538>
			{
				W25qxx_ReadSector(&spi_cmd_data.data[13],U8A2U32(&spi_cmd_data.data[1]),U8A2U32(&spi_cmd_data.data[5]),U8A2U32(&spi_cmd_data.data[9]));
 80022ca:	4b18      	ldr	r3, [pc, #96]	; (800232c <spi_cmd_process_call+0x548>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f103 040d 	add.w	r4, r3, #13
 80022d2:	4b16      	ldr	r3, [pc, #88]	; (800232c <spi_cmd_process_call+0x548>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	3301      	adds	r3, #1
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff fd1f 	bl	8001d1c <U8A2U32>
 80022de:	4605      	mov	r5, r0
 80022e0:	4b12      	ldr	r3, [pc, #72]	; (800232c <spi_cmd_process_call+0x548>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	3305      	adds	r3, #5
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff fd18 	bl	8001d1c <U8A2U32>
 80022ec:	4606      	mov	r6, r0
 80022ee:	4b0f      	ldr	r3, [pc, #60]	; (800232c <spi_cmd_process_call+0x548>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	3309      	adds	r3, #9
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff fd11 	bl	8001d1c <U8A2U32>
 80022fa:	4603      	mov	r3, r0
 80022fc:	4632      	mov	r2, r6
 80022fe:	4629      	mov	r1, r5
 8002300:	4620      	mov	r0, r4
 8002302:	f7ff fb45 	bl	8001990 <W25qxx_ReadSector>
				spi_cmd_data.length=13+U8A2U32(&spi_cmd_data.data[9]);
 8002306:	4b09      	ldr	r3, [pc, #36]	; (800232c <spi_cmd_process_call+0x548>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	3309      	adds	r3, #9
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff fd05 	bl	8001d1c <U8A2U32>
 8002312:	4603      	mov	r3, r0
 8002314:	330d      	adds	r3, #13
 8002316:	4a05      	ldr	r2, [pc, #20]	; (800232c <spi_cmd_process_call+0x548>)
 8002318:	6013      	str	r3, [r2, #0]
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
				spi_cmd_data.length=0x01;
			}

			break;
 800231a:	e04d      	b.n	80023b8 <spi_cmd_process_call+0x5d4>
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 800231c:	4b03      	ldr	r3, [pc, #12]	; (800232c <spi_cmd_process_call+0x548>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	22ff      	movs	r2, #255	; 0xff
 8002322:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 8002324:	4b01      	ldr	r3, [pc, #4]	; (800232c <spi_cmd_process_call+0x548>)
 8002326:	2201      	movs	r2, #1
 8002328:	601a      	str	r2, [r3, #0]
			break;
 800232a:	e045      	b.n	80023b8 <spi_cmd_process_call+0x5d4>
 800232c:	2000000c 	.word	0x2000000c

		case 16://16号命令，W25qxx_ReadBlock，按页读多字节数据，地址(4字节)+偏移(4字节)+数量(4字节),数量需要大于0
			if(spi_cmd_data.length>=13 && U8A2U32(&spi_cmd_data.data[9]) <= 512)
 8002330:	4b28      	ldr	r3, [pc, #160]	; (80023d4 <spi_cmd_process_call+0x5f0>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b0c      	cmp	r3, #12
 8002336:	d932      	bls.n	800239e <spi_cmd_process_call+0x5ba>
 8002338:	4b26      	ldr	r3, [pc, #152]	; (80023d4 <spi_cmd_process_call+0x5f0>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	3309      	adds	r3, #9
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff fcec 	bl	8001d1c <U8A2U32>
 8002344:	4603      	mov	r3, r0
 8002346:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800234a:	d828      	bhi.n	800239e <spi_cmd_process_call+0x5ba>
			{
				W25qxx_ReadBlock(&spi_cmd_data.data[13],U8A2U32(&spi_cmd_data.data[1]),U8A2U32(&spi_cmd_data.data[5]),U8A2U32(&spi_cmd_data.data[9]));
 800234c:	4b21      	ldr	r3, [pc, #132]	; (80023d4 <spi_cmd_process_call+0x5f0>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f103 040d 	add.w	r4, r3, #13
 8002354:	4b1f      	ldr	r3, [pc, #124]	; (80023d4 <spi_cmd_process_call+0x5f0>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	3301      	adds	r3, #1
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff fcde 	bl	8001d1c <U8A2U32>
 8002360:	4605      	mov	r5, r0
 8002362:	4b1c      	ldr	r3, [pc, #112]	; (80023d4 <spi_cmd_process_call+0x5f0>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	3305      	adds	r3, #5
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff fcd7 	bl	8001d1c <U8A2U32>
 800236e:	4606      	mov	r6, r0
 8002370:	4b18      	ldr	r3, [pc, #96]	; (80023d4 <spi_cmd_process_call+0x5f0>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	3309      	adds	r3, #9
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fcd0 	bl	8001d1c <U8A2U32>
 800237c:	4603      	mov	r3, r0
 800237e:	4632      	mov	r2, r6
 8002380:	4629      	mov	r1, r5
 8002382:	4620      	mov	r0, r4
 8002384:	f7ff fb64 	bl	8001a50 <W25qxx_ReadBlock>
				spi_cmd_data.length=13+U8A2U32(&spi_cmd_data.data[9]);
 8002388:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <spi_cmd_process_call+0x5f0>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	3309      	adds	r3, #9
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff fcc4 	bl	8001d1c <U8A2U32>
 8002394:	4603      	mov	r3, r0
 8002396:	330d      	adds	r3, #13
 8002398:	4a0e      	ldr	r2, [pc, #56]	; (80023d4 <spi_cmd_process_call+0x5f0>)
 800239a:	6013      	str	r3, [r2, #0]
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
				spi_cmd_data.length=0x01;
			}

			break;
 800239c:	e00c      	b.n	80023b8 <spi_cmd_process_call+0x5d4>
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 800239e:	4b0d      	ldr	r3, [pc, #52]	; (80023d4 <spi_cmd_process_call+0x5f0>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	22ff      	movs	r2, #255	; 0xff
 80023a4:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 80023a6:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <spi_cmd_process_call+0x5f0>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	601a      	str	r2, [r3, #0]
			break;
 80023ac:	e004      	b.n	80023b8 <spi_cmd_process_call+0x5d4>
			break;
 80023ae:	bf00      	nop
 80023b0:	e002      	b.n	80023b8 <spi_cmd_process_call+0x5d4>
			break;
 80023b2:	bf00      	nop
 80023b4:	e000      	b.n	80023b8 <spi_cmd_process_call+0x5d4>
			break;
 80023b6:	bf00      	nop
		}

		CDC_Transmit_FS(spi_cmd_data.data,spi_cmd_data.length);
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <spi_cmd_process_call+0x5f0>)
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <spi_cmd_process_call+0x5f0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	4619      	mov	r1, r3
 80023c4:	4610      	mov	r0, r2
 80023c6:	f007 f973 	bl	80096b0 <CDC_Transmit_FS>
		spi_cmd_data.IsUpdate=0;
 80023ca:	4b02      	ldr	r3, [pc, #8]	; (80023d4 <spi_cmd_process_call+0x5f0>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	711a      	strb	r2, [r3, #4]
	}
}
 80023d0:	bf00      	nop
 80023d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023d4:	2000000c 	.word	0x2000000c

080023d8 <uart_transmit>:

#include "userapp.h"
uint8_t uart_rx_buff[1000];//接收缓冲
//uint8_t uart_tx_buff[1000];//发送缓冲
uint8_t uart_transmit(void * buf,size_t len)//发送数据到串口
{
 80023d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2,buf,len,(uint32_t)(len*(1000.0/linecode.Rate))+1000);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	b29c      	uxth	r4, r3
 80023e6:	6838      	ldr	r0, [r7, #0]
 80023e8:	f7fd fff2 	bl	80003d0 <__aeabi_ui2d>
 80023ec:	4605      	mov	r5, r0
 80023ee:	460e      	mov	r6, r1
 80023f0:	4b12      	ldr	r3, [pc, #72]	; (800243c <uart_transmit+0x64>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7fd ffeb 	bl	80003d0 <__aeabi_ui2d>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	f04f 0000 	mov.w	r0, #0
 8002402:	490f      	ldr	r1, [pc, #60]	; (8002440 <uart_transmit+0x68>)
 8002404:	f7fe f988 	bl	8000718 <__aeabi_ddiv>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4628      	mov	r0, r5
 800240e:	4631      	mov	r1, r6
 8002410:	f7fe f858 	bl	80004c4 <__aeabi_dmul>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	4610      	mov	r0, r2
 800241a:	4619      	mov	r1, r3
 800241c:	f7fe fa64 	bl	80008e8 <__aeabi_d2uiz>
 8002420:	4603      	mov	r3, r0
 8002422:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002426:	4622      	mov	r2, r4
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	4806      	ldr	r0, [pc, #24]	; (8002444 <uart_transmit+0x6c>)
 800242c:	f003 fe43 	bl	80060b6 <HAL_UART_Transmit>
	return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800243a:	bf00      	nop
 800243c:	20000000 	.word	0x20000000
 8002440:	408f4000 	.word	0x408f4000
 8002444:	20000d04 	.word	0x20000d04

08002448 <uart_start_receive>:

void uart_start_receive()
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
	if(huart2.gState !=HAL_UART_STATE_READY && huart2.gState != HAL_UART_STATE_BUSY_TX)
 800244c:	4b11      	ldr	r3, [pc, #68]	; (8002494 <uart_start_receive+0x4c>)
 800244e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b20      	cmp	r3, #32
 8002456:	d008      	beq.n	800246a <uart_start_receive+0x22>
 8002458:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <uart_start_receive+0x4c>)
 800245a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b21      	cmp	r3, #33	; 0x21
 8002462:	d002      	beq.n	800246a <uart_start_receive+0x22>
			HAL_UART_DMAStop(&huart2);
 8002464:	480b      	ldr	r0, [pc, #44]	; (8002494 <uart_start_receive+0x4c>)
 8002466:	f003 ff3f 	bl	80062e8 <HAL_UART_DMAStop>
	if(huart2.gState == HAL_UART_STATE_BUSY_TX)
 800246a:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <uart_start_receive+0x4c>)
 800246c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b21      	cmp	r3, #33	; 0x21
 8002474:	d106      	bne.n	8002484 <uart_start_receive+0x3c>
			while(huart2.gState!=HAL_UART_STATE_READY);//等待发送完成
 8002476:	bf00      	nop
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <uart_start_receive+0x4c>)
 800247a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b20      	cmp	r3, #32
 8002482:	d1f9      	bne.n	8002478 <uart_start_receive+0x30>
	HAL_UART_Receive_DMA(&huart2,uart_rx_buff,sizeof(uart_rx_buff));
 8002484:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002488:	4903      	ldr	r1, [pc, #12]	; (8002498 <uart_start_receive+0x50>)
 800248a:	4802      	ldr	r0, [pc, #8]	; (8002494 <uart_start_receive+0x4c>)
 800248c:	f003 feac 	bl	80061e8 <HAL_UART_Receive_DMA>
}
 8002490:	bf00      	nop
 8002492:	bd80      	pop	{r7, pc}
 8002494:	20000d04 	.word	0x20000d04
 8002498:	200007e8 	.word	0x200007e8

0800249c <uart_finish_receive>:

void uart_finish_receive()
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
	if(huart2.gState !=HAL_UART_STATE_READY && huart2.gState != HAL_UART_STATE_BUSY_TX)
 80024a2:	4b1a      	ldr	r3, [pc, #104]	; (800250c <uart_finish_receive+0x70>)
 80024a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b20      	cmp	r3, #32
 80024ac:	d008      	beq.n	80024c0 <uart_finish_receive+0x24>
 80024ae:	4b17      	ldr	r3, [pc, #92]	; (800250c <uart_finish_receive+0x70>)
 80024b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b21      	cmp	r3, #33	; 0x21
 80024b8:	d002      	beq.n	80024c0 <uart_finish_receive+0x24>
		HAL_UART_DMAStop(&huart2);
 80024ba:	4814      	ldr	r0, [pc, #80]	; (800250c <uart_finish_receive+0x70>)
 80024bc:	f003 ff14 	bl	80062e8 <HAL_UART_DMAStop>
	if(huart2.gState == HAL_UART_STATE_BUSY_TX)
 80024c0:	4b12      	ldr	r3, [pc, #72]	; (800250c <uart_finish_receive+0x70>)
 80024c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b21      	cmp	r3, #33	; 0x21
 80024ca:	d106      	bne.n	80024da <uart_finish_receive+0x3e>
		while(huart2.gState!=HAL_UART_STATE_READY);//等待发送完成
 80024cc:	bf00      	nop
 80024ce:	4b0f      	ldr	r3, [pc, #60]	; (800250c <uart_finish_receive+0x70>)
 80024d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b20      	cmp	r3, #32
 80024d8:	d1f9      	bne.n	80024ce <uart_finish_receive+0x32>
	size_t count=sizeof(uart_rx_buff)-huart2.hdmarx->Instance->CNDTR;
 80024da:	4b0c      	ldr	r3, [pc, #48]	; (800250c <uart_finish_receive+0x70>)
 80024dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80024e6:	607b      	str	r3, [r7, #4]
	 uart_receive_call(uart_rx_buff,count);
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	4809      	ldr	r0, [pc, #36]	; (8002510 <uart_finish_receive+0x74>)
 80024ec:	f7ff fc00 	bl	8001cf0 <uart_receive_call>
	HAL_UART_DMAStop(&huart2);
 80024f0:	4806      	ldr	r0, [pc, #24]	; (800250c <uart_finish_receive+0x70>)
 80024f2:	f003 fef9 	bl	80062e8 <HAL_UART_DMAStop>
	HAL_UART_Receive_DMA(&huart2,uart_rx_buff,sizeof(uart_rx_buff));
 80024f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024fa:	4905      	ldr	r1, [pc, #20]	; (8002510 <uart_finish_receive+0x74>)
 80024fc:	4803      	ldr	r0, [pc, #12]	; (800250c <uart_finish_receive+0x70>)
 80024fe:	f003 fe73 	bl	80061e8 <HAL_UART_Receive_DMA>
}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000d04 	.word	0x20000d04
 8002510:	200007e8 	.word	0x200007e8

08002514 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//DMA接收全满
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
	 UNUSED(huart);
	 uart_finish_receive();
 800251c:	f7ff ffbe 	bl	800249c <uart_finish_receive>
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_UART_RxHalfCpltCallback>:
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)//DMA接收半满
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
	 UNUSED(huart);
	 uart_finish_receive();
 8002530:	f7ff ffb4 	bl	800249c <uart_finish_receive>
}
 8002534:	bf00      	nop
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002540:	f000 fc0a 	bl	8002d58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002544:	f000 f811 	bl	800256a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002548:	f000 f92c 	bl	80027a4 <MX_GPIO_Init>
  MX_DMA_Init();
 800254c:	f000 f904 	bl	8002758 <MX_DMA_Init>
  MX_I2C1_Init();
 8002550:	f000 f862 	bl	8002618 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002554:	f000 f8a0 	bl	8002698 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002558:	f000 f8d4 	bl	8002704 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 800255c:	f006 ffc8 	bl	80094f0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  init_user_call();
 8002560:	f7ff fad6 	bl	8001b10 <init_user_call>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_user_call();
 8002564:	f7ff fae4 	bl	8001b30 <loop_user_call>
 8002568:	e7fc      	b.n	8002564 <main+0x28>

0800256a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b094      	sub	sp, #80	; 0x50
 800256e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002570:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002574:	2228      	movs	r2, #40	; 0x28
 8002576:	2100      	movs	r1, #0
 8002578:	4618      	mov	r0, r3
 800257a:	f007 fc9a 	bl	8009eb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800257e:	f107 0314 	add.w	r3, r7, #20
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	605a      	str	r2, [r3, #4]
 8002588:	609a      	str	r2, [r3, #8]
 800258a:	60da      	str	r2, [r3, #12]
 800258c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800258e:	1d3b      	adds	r3, r7, #4
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800259a:	2302      	movs	r3, #2
 800259c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800259e:	2301      	movs	r3, #1
 80025a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025a2:	2310      	movs	r3, #16
 80025a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025a6:	2302      	movs	r3, #2
 80025a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80025aa:	2300      	movs	r3, #0
 80025ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80025ae:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 80025b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025b8:	4618      	mov	r0, r3
 80025ba:	f002 f91b 	bl	80047f4 <HAL_RCC_OscConfig>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80025c4:	f000 f93e 	bl	8002844 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025c8:	230f      	movs	r3, #15
 80025ca:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025cc:	2302      	movs	r3, #2
 80025ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025d0:	2300      	movs	r3, #0
 80025d2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025d8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025da:	2300      	movs	r3, #0
 80025dc:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80025de:	f107 0314 	add.w	r3, r7, #20
 80025e2:	2101      	movs	r1, #1
 80025e4:	4618      	mov	r0, r3
 80025e6:	f002 fb85 	bl	8004cf4 <HAL_RCC_ClockConfig>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80025f0:	f000 f928 	bl	8002844 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80025f4:	2310      	movs	r3, #16
 80025f6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80025f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025fc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025fe:	1d3b      	adds	r3, r7, #4
 8002600:	4618      	mov	r0, r3
 8002602:	f002 fd43 	bl	800508c <HAL_RCCEx_PeriphCLKConfig>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800260c:	f000 f91a 	bl	8002844 <Error_Handler>
  }
}
 8002610:	bf00      	nop
 8002612:	3750      	adds	r7, #80	; 0x50
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  __HAL_RCC_I2C1_CLK_ENABLE();
 800261e:	4b1a      	ldr	r3, [pc, #104]	; (8002688 <MX_I2C1_Init+0x70>)
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	4a19      	ldr	r2, [pc, #100]	; (8002688 <MX_I2C1_Init+0x70>)
 8002624:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002628:	61d3      	str	r3, [r2, #28]
 800262a:	4b17      	ldr	r3, [pc, #92]	; (8002688 <MX_I2C1_Init+0x70>)
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002632:	607b      	str	r3, [r7, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002636:	4b15      	ldr	r3, [pc, #84]	; (800268c <MX_I2C1_Init+0x74>)
 8002638:	4a15      	ldr	r2, [pc, #84]	; (8002690 <MX_I2C1_Init+0x78>)
 800263a:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800263c:	4b13      	ldr	r3, [pc, #76]	; (800268c <MX_I2C1_Init+0x74>)
 800263e:	4a15      	ldr	r2, [pc, #84]	; (8002694 <MX_I2C1_Init+0x7c>)
 8002640:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002642:	4b12      	ldr	r3, [pc, #72]	; (800268c <MX_I2C1_Init+0x74>)
 8002644:	2200      	movs	r2, #0
 8002646:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002648:	4b10      	ldr	r3, [pc, #64]	; (800268c <MX_I2C1_Init+0x74>)
 800264a:	2200      	movs	r2, #0
 800264c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800264e:	4b0f      	ldr	r3, [pc, #60]	; (800268c <MX_I2C1_Init+0x74>)
 8002650:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002654:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002656:	4b0d      	ldr	r3, [pc, #52]	; (800268c <MX_I2C1_Init+0x74>)
 8002658:	2200      	movs	r2, #0
 800265a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800265c:	4b0b      	ldr	r3, [pc, #44]	; (800268c <MX_I2C1_Init+0x74>)
 800265e:	2200      	movs	r2, #0
 8002660:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002662:	4b0a      	ldr	r3, [pc, #40]	; (800268c <MX_I2C1_Init+0x74>)
 8002664:	2200      	movs	r2, #0
 8002666:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002668:	4b08      	ldr	r3, [pc, #32]	; (800268c <MX_I2C1_Init+0x74>)
 800266a:	2200      	movs	r2, #0
 800266c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800266e:	4807      	ldr	r0, [pc, #28]	; (800268c <MX_I2C1_Init+0x74>)
 8002670:	f001 f8b6 	bl	80037e0 <HAL_I2C_Init>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_I2C1_Init+0x66>
  {
    Error_Handler();
 800267a:	f000 f8e3 	bl	8002844 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40021000 	.word	0x40021000
 800268c:	20000c14 	.word	0x20000c14
 8002690:	40005400 	.word	0x40005400
 8002694:	000186a0 	.word	0x000186a0

08002698 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800269c:	4b17      	ldr	r3, [pc, #92]	; (80026fc <MX_SPI1_Init+0x64>)
 800269e:	4a18      	ldr	r2, [pc, #96]	; (8002700 <MX_SPI1_Init+0x68>)
 80026a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80026a2:	4b16      	ldr	r3, [pc, #88]	; (80026fc <MX_SPI1_Init+0x64>)
 80026a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80026a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80026aa:	4b14      	ldr	r3, [pc, #80]	; (80026fc <MX_SPI1_Init+0x64>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80026b0:	4b12      	ldr	r3, [pc, #72]	; (80026fc <MX_SPI1_Init+0x64>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026b6:	4b11      	ldr	r3, [pc, #68]	; (80026fc <MX_SPI1_Init+0x64>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026bc:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <MX_SPI1_Init+0x64>)
 80026be:	2200      	movs	r2, #0
 80026c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80026c2:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <MX_SPI1_Init+0x64>)
 80026c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80026ca:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <MX_SPI1_Init+0x64>)
 80026cc:	2220      	movs	r2, #32
 80026ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026d0:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <MX_SPI1_Init+0x64>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80026d6:	4b09      	ldr	r3, [pc, #36]	; (80026fc <MX_SPI1_Init+0x64>)
 80026d8:	2200      	movs	r2, #0
 80026da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026dc:	4b07      	ldr	r3, [pc, #28]	; (80026fc <MX_SPI1_Init+0x64>)
 80026de:	2200      	movs	r2, #0
 80026e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80026e2:	4b06      	ldr	r3, [pc, #24]	; (80026fc <MX_SPI1_Init+0x64>)
 80026e4:	220a      	movs	r2, #10
 80026e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80026e8:	4804      	ldr	r0, [pc, #16]	; (80026fc <MX_SPI1_Init+0x64>)
 80026ea:	f002 fd85 	bl	80051f8 <HAL_SPI_Init>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80026f4:	f000 f8a6 	bl	8002844 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80026f8:	bf00      	nop
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	20000cac 	.word	0x20000cac
 8002700:	40013000 	.word	0x40013000

08002704 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002708:	4b11      	ldr	r3, [pc, #68]	; (8002750 <MX_USART2_UART_Init+0x4c>)
 800270a:	4a12      	ldr	r2, [pc, #72]	; (8002754 <MX_USART2_UART_Init+0x50>)
 800270c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800270e:	4b10      	ldr	r3, [pc, #64]	; (8002750 <MX_USART2_UART_Init+0x4c>)
 8002710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002714:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002716:	4b0e      	ldr	r3, [pc, #56]	; (8002750 <MX_USART2_UART_Init+0x4c>)
 8002718:	2200      	movs	r2, #0
 800271a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800271c:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <MX_USART2_UART_Init+0x4c>)
 800271e:	2200      	movs	r2, #0
 8002720:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002722:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <MX_USART2_UART_Init+0x4c>)
 8002724:	2200      	movs	r2, #0
 8002726:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002728:	4b09      	ldr	r3, [pc, #36]	; (8002750 <MX_USART2_UART_Init+0x4c>)
 800272a:	220c      	movs	r2, #12
 800272c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800272e:	4b08      	ldr	r3, [pc, #32]	; (8002750 <MX_USART2_UART_Init+0x4c>)
 8002730:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002734:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002736:	4b06      	ldr	r3, [pc, #24]	; (8002750 <MX_USART2_UART_Init+0x4c>)
 8002738:	2200      	movs	r2, #0
 800273a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800273c:	4804      	ldr	r0, [pc, #16]	; (8002750 <MX_USART2_UART_Init+0x4c>)
 800273e:	f003 fc6d 	bl	800601c <HAL_UART_Init>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8002748:	f000 f87c 	bl	8002844 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800274c:	bf00      	nop
 800274e:	bd80      	pop	{r7, pc}
 8002750:	20000d04 	.word	0x20000d04
 8002754:	40004400 	.word	0x40004400

08002758 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800275e:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <MX_DMA_Init+0x48>)
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	4a0f      	ldr	r2, [pc, #60]	; (80027a0 <MX_DMA_Init+0x48>)
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	6153      	str	r3, [r2, #20]
 800276a:	4b0d      	ldr	r3, [pc, #52]	; (80027a0 <MX_DMA_Init+0x48>)
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	607b      	str	r3, [r7, #4]
 8002774:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002776:	2200      	movs	r2, #0
 8002778:	2100      	movs	r1, #0
 800277a:	2010      	movs	r0, #16
 800277c:	f000 fbf5 	bl	8002f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002780:	2010      	movs	r0, #16
 8002782:	f000 fc0e 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002786:	2200      	movs	r2, #0
 8002788:	2100      	movs	r1, #0
 800278a:	2011      	movs	r0, #17
 800278c:	f000 fbed 	bl	8002f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002790:	2011      	movs	r0, #17
 8002792:	f000 fc06 	bl	8002fa2 <HAL_NVIC_EnableIRQ>

}
 8002796:	bf00      	nop
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40021000 	.word	0x40021000

080027a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027aa:	f107 0308 	add.w	r3, r7, #8
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	605a      	str	r2, [r3, #4]
 80027b4:	609a      	str	r2, [r3, #8]
 80027b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b8:	4b17      	ldr	r3, [pc, #92]	; (8002818 <MX_GPIO_Init+0x74>)
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	4a16      	ldr	r2, [pc, #88]	; (8002818 <MX_GPIO_Init+0x74>)
 80027be:	f043 0304 	orr.w	r3, r3, #4
 80027c2:	6193      	str	r3, [r2, #24]
 80027c4:	4b14      	ldr	r3, [pc, #80]	; (8002818 <MX_GPIO_Init+0x74>)
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	607b      	str	r3, [r7, #4]
 80027ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d0:	4b11      	ldr	r3, [pc, #68]	; (8002818 <MX_GPIO_Init+0x74>)
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	4a10      	ldr	r2, [pc, #64]	; (8002818 <MX_GPIO_Init+0x74>)
 80027d6:	f043 0308 	orr.w	r3, r3, #8
 80027da:	6193      	str	r3, [r2, #24]
 80027dc:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <MX_GPIO_Init+0x74>)
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	f003 0308 	and.w	r3, r3, #8
 80027e4:	603b      	str	r3, [r7, #0]
 80027e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80027e8:	2201      	movs	r2, #1
 80027ea:	2110      	movs	r1, #16
 80027ec:	480b      	ldr	r0, [pc, #44]	; (800281c <MX_GPIO_Init+0x78>)
 80027ee:	f000 ffdf 	bl	80037b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80027f2:	2310      	movs	r3, #16
 80027f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f6:	2301      	movs	r3, #1
 80027f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027fe:	2303      	movs	r3, #3
 8002800:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002802:	f107 0308 	add.w	r3, r7, #8
 8002806:	4619      	mov	r1, r3
 8002808:	4804      	ldr	r0, [pc, #16]	; (800281c <MX_GPIO_Init+0x78>)
 800280a:	f000 fe77 	bl	80034fc <HAL_GPIO_Init>

}
 800280e:	bf00      	nop
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40021000 	.word	0x40021000
 800281c:	40010800 	.word	0x40010800

08002820 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a04      	ldr	r2, [pc, #16]	; (8002840 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d101      	bne.n	8002836 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002832:	f000 faa7 	bl	8002d84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002836:	bf00      	nop
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40000800 	.word	0x40000800

08002844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr

08002850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002856:	4b15      	ldr	r3, [pc, #84]	; (80028ac <HAL_MspInit+0x5c>)
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	4a14      	ldr	r2, [pc, #80]	; (80028ac <HAL_MspInit+0x5c>)
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	6193      	str	r3, [r2, #24]
 8002862:	4b12      	ldr	r3, [pc, #72]	; (80028ac <HAL_MspInit+0x5c>)
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800286e:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <HAL_MspInit+0x5c>)
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	4a0e      	ldr	r2, [pc, #56]	; (80028ac <HAL_MspInit+0x5c>)
 8002874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002878:	61d3      	str	r3, [r2, #28]
 800287a:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <HAL_MspInit+0x5c>)
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002882:	607b      	str	r3, [r7, #4]
 8002884:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002886:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <HAL_MspInit+0x60>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	4a04      	ldr	r2, [pc, #16]	; (80028b0 <HAL_MspInit+0x60>)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028a2:	bf00      	nop
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr
 80028ac:	40021000 	.word	0x40021000
 80028b0:	40010000 	.word	0x40010000

080028b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028bc:	f107 0310 	add.w	r3, r7, #16
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a15      	ldr	r2, [pc, #84]	; (8002924 <HAL_I2C_MspInit+0x70>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d123      	bne.n	800291c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d4:	4b14      	ldr	r3, [pc, #80]	; (8002928 <HAL_I2C_MspInit+0x74>)
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	4a13      	ldr	r2, [pc, #76]	; (8002928 <HAL_I2C_MspInit+0x74>)
 80028da:	f043 0308 	orr.w	r3, r3, #8
 80028de:	6193      	str	r3, [r2, #24]
 80028e0:	4b11      	ldr	r3, [pc, #68]	; (8002928 <HAL_I2C_MspInit+0x74>)
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	f003 0308 	and.w	r3, r3, #8
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028ec:	23c0      	movs	r3, #192	; 0xc0
 80028ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028f0:	2312      	movs	r3, #18
 80028f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028f4:	2303      	movs	r3, #3
 80028f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f8:	f107 0310 	add.w	r3, r7, #16
 80028fc:	4619      	mov	r1, r3
 80028fe:	480b      	ldr	r0, [pc, #44]	; (800292c <HAL_I2C_MspInit+0x78>)
 8002900:	f000 fdfc 	bl	80034fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002904:	4b08      	ldr	r3, [pc, #32]	; (8002928 <HAL_I2C_MspInit+0x74>)
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	4a07      	ldr	r2, [pc, #28]	; (8002928 <HAL_I2C_MspInit+0x74>)
 800290a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800290e:	61d3      	str	r3, [r2, #28]
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <HAL_I2C_MspInit+0x74>)
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800291c:	bf00      	nop
 800291e:	3720      	adds	r7, #32
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40005400 	.word	0x40005400
 8002928:	40021000 	.word	0x40021000
 800292c:	40010c00 	.word	0x40010c00

08002930 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b088      	sub	sp, #32
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002938:	f107 0310 	add.w	r3, r7, #16
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	605a      	str	r2, [r3, #4]
 8002942:	609a      	str	r2, [r3, #8]
 8002944:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a1b      	ldr	r2, [pc, #108]	; (80029b8 <HAL_SPI_MspInit+0x88>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d12f      	bne.n	80029b0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002950:	4b1a      	ldr	r3, [pc, #104]	; (80029bc <HAL_SPI_MspInit+0x8c>)
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	4a19      	ldr	r2, [pc, #100]	; (80029bc <HAL_SPI_MspInit+0x8c>)
 8002956:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800295a:	6193      	str	r3, [r2, #24]
 800295c:	4b17      	ldr	r3, [pc, #92]	; (80029bc <HAL_SPI_MspInit+0x8c>)
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002968:	4b14      	ldr	r3, [pc, #80]	; (80029bc <HAL_SPI_MspInit+0x8c>)
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	4a13      	ldr	r2, [pc, #76]	; (80029bc <HAL_SPI_MspInit+0x8c>)
 800296e:	f043 0304 	orr.w	r3, r3, #4
 8002972:	6193      	str	r3, [r2, #24]
 8002974:	4b11      	ldr	r3, [pc, #68]	; (80029bc <HAL_SPI_MspInit+0x8c>)
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002980:	23a0      	movs	r3, #160	; 0xa0
 8002982:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002984:	2302      	movs	r3, #2
 8002986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002988:	2303      	movs	r3, #3
 800298a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800298c:	f107 0310 	add.w	r3, r7, #16
 8002990:	4619      	mov	r1, r3
 8002992:	480b      	ldr	r0, [pc, #44]	; (80029c0 <HAL_SPI_MspInit+0x90>)
 8002994:	f000 fdb2 	bl	80034fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002998:	2340      	movs	r3, #64	; 0x40
 800299a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a4:	f107 0310 	add.w	r3, r7, #16
 80029a8:	4619      	mov	r1, r3
 80029aa:	4805      	ldr	r0, [pc, #20]	; (80029c0 <HAL_SPI_MspInit+0x90>)
 80029ac:	f000 fda6 	bl	80034fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80029b0:	bf00      	nop
 80029b2:	3720      	adds	r7, #32
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40013000 	.word	0x40013000
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40010800 	.word	0x40010800

080029c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029cc:	f107 0310 	add.w	r3, r7, #16
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a4c      	ldr	r2, [pc, #304]	; (8002b10 <HAL_UART_MspInit+0x14c>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	f040 8091 	bne.w	8002b08 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029e6:	4b4b      	ldr	r3, [pc, #300]	; (8002b14 <HAL_UART_MspInit+0x150>)
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	4a4a      	ldr	r2, [pc, #296]	; (8002b14 <HAL_UART_MspInit+0x150>)
 80029ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029f0:	61d3      	str	r3, [r2, #28]
 80029f2:	4b48      	ldr	r3, [pc, #288]	; (8002b14 <HAL_UART_MspInit+0x150>)
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029fe:	4b45      	ldr	r3, [pc, #276]	; (8002b14 <HAL_UART_MspInit+0x150>)
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	4a44      	ldr	r2, [pc, #272]	; (8002b14 <HAL_UART_MspInit+0x150>)
 8002a04:	f043 0304 	orr.w	r3, r3, #4
 8002a08:	6193      	str	r3, [r2, #24]
 8002a0a:	4b42      	ldr	r3, [pc, #264]	; (8002b14 <HAL_UART_MspInit+0x150>)
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	60bb      	str	r3, [r7, #8]
 8002a14:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> USART2_CTS
    PA1     ------> USART2_RTS
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a16:	2301      	movs	r3, #1
 8002a18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a22:	f107 0310 	add.w	r3, r7, #16
 8002a26:	4619      	mov	r1, r3
 8002a28:	483b      	ldr	r0, [pc, #236]	; (8002b18 <HAL_UART_MspInit+0x154>)
 8002a2a:	f000 fd67 	bl	80034fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002a2e:	2306      	movs	r3, #6
 8002a30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a32:	2302      	movs	r3, #2
 8002a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a36:	2303      	movs	r3, #3
 8002a38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a3a:	f107 0310 	add.w	r3, r7, #16
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4835      	ldr	r0, [pc, #212]	; (8002b18 <HAL_UART_MspInit+0x154>)
 8002a42:	f000 fd5b 	bl	80034fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a46:	2308      	movs	r3, #8
 8002a48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a52:	f107 0310 	add.w	r3, r7, #16
 8002a56:	4619      	mov	r1, r3
 8002a58:	482f      	ldr	r0, [pc, #188]	; (8002b18 <HAL_UART_MspInit+0x154>)
 8002a5a:	f000 fd4f 	bl	80034fc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002a5e:	4b2f      	ldr	r3, [pc, #188]	; (8002b1c <HAL_UART_MspInit+0x158>)
 8002a60:	4a2f      	ldr	r2, [pc, #188]	; (8002b20 <HAL_UART_MspInit+0x15c>)
 8002a62:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a64:	4b2d      	ldr	r3, [pc, #180]	; (8002b1c <HAL_UART_MspInit+0x158>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a6a:	4b2c      	ldr	r3, [pc, #176]	; (8002b1c <HAL_UART_MspInit+0x158>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a70:	4b2a      	ldr	r3, [pc, #168]	; (8002b1c <HAL_UART_MspInit+0x158>)
 8002a72:	2280      	movs	r2, #128	; 0x80
 8002a74:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a76:	4b29      	ldr	r3, [pc, #164]	; (8002b1c <HAL_UART_MspInit+0x158>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a7c:	4b27      	ldr	r3, [pc, #156]	; (8002b1c <HAL_UART_MspInit+0x158>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002a82:	4b26      	ldr	r3, [pc, #152]	; (8002b1c <HAL_UART_MspInit+0x158>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002a88:	4b24      	ldr	r3, [pc, #144]	; (8002b1c <HAL_UART_MspInit+0x158>)
 8002a8a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002a8e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002a90:	4822      	ldr	r0, [pc, #136]	; (8002b1c <HAL_UART_MspInit+0x158>)
 8002a92:	f000 fa95 	bl	8002fc0 <HAL_DMA_Init>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_UART_MspInit+0xdc>
    {
      Error_Handler();
 8002a9c:	f7ff fed2 	bl	8002844 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a1e      	ldr	r2, [pc, #120]	; (8002b1c <HAL_UART_MspInit+0x158>)
 8002aa4:	635a      	str	r2, [r3, #52]	; 0x34
 8002aa6:	4a1d      	ldr	r2, [pc, #116]	; (8002b1c <HAL_UART_MspInit+0x158>)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002aac:	4b1d      	ldr	r3, [pc, #116]	; (8002b24 <HAL_UART_MspInit+0x160>)
 8002aae:	4a1e      	ldr	r2, [pc, #120]	; (8002b28 <HAL_UART_MspInit+0x164>)
 8002ab0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ab2:	4b1c      	ldr	r3, [pc, #112]	; (8002b24 <HAL_UART_MspInit+0x160>)
 8002ab4:	2210      	movs	r2, #16
 8002ab6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ab8:	4b1a      	ldr	r3, [pc, #104]	; (8002b24 <HAL_UART_MspInit+0x160>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002abe:	4b19      	ldr	r3, [pc, #100]	; (8002b24 <HAL_UART_MspInit+0x160>)
 8002ac0:	2280      	movs	r2, #128	; 0x80
 8002ac2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ac4:	4b17      	ldr	r3, [pc, #92]	; (8002b24 <HAL_UART_MspInit+0x160>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002aca:	4b16      	ldr	r3, [pc, #88]	; (8002b24 <HAL_UART_MspInit+0x160>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002ad0:	4b14      	ldr	r3, [pc, #80]	; (8002b24 <HAL_UART_MspInit+0x160>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ad6:	4b13      	ldr	r3, [pc, #76]	; (8002b24 <HAL_UART_MspInit+0x160>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002adc:	4811      	ldr	r0, [pc, #68]	; (8002b24 <HAL_UART_MspInit+0x160>)
 8002ade:	f000 fa6f 	bl	8002fc0 <HAL_DMA_Init>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8002ae8:	f7ff feac 	bl	8002844 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a0d      	ldr	r2, [pc, #52]	; (8002b24 <HAL_UART_MspInit+0x160>)
 8002af0:	631a      	str	r2, [r3, #48]	; 0x30
 8002af2:	4a0c      	ldr	r2, [pc, #48]	; (8002b24 <HAL_UART_MspInit+0x160>)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002af8:	2200      	movs	r2, #0
 8002afa:	2100      	movs	r1, #0
 8002afc:	2026      	movs	r0, #38	; 0x26
 8002afe:	f000 fa34 	bl	8002f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b02:	2026      	movs	r0, #38	; 0x26
 8002b04:	f000 fa4d 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b08:	bf00      	nop
 8002b0a:	3720      	adds	r7, #32
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40004400 	.word	0x40004400
 8002b14:	40021000 	.word	0x40021000
 8002b18:	40010800 	.word	0x40010800
 8002b1c:	20000bd0 	.word	0x20000bd0
 8002b20:	4002006c 	.word	0x4002006c
 8002b24:	20000c68 	.word	0x20000c68
 8002b28:	40020080 	.word	0x40020080

08002b2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08c      	sub	sp, #48	; 0x30
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002b34:	2300      	movs	r3, #0
 8002b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	201e      	movs	r0, #30
 8002b42:	f000 fa12 	bl	8002f6a <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8002b46:	201e      	movs	r0, #30
 8002b48:	f000 fa2b 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002b4c:	4b1f      	ldr	r3, [pc, #124]	; (8002bcc <HAL_InitTick+0xa0>)
 8002b4e:	69db      	ldr	r3, [r3, #28]
 8002b50:	4a1e      	ldr	r2, [pc, #120]	; (8002bcc <HAL_InitTick+0xa0>)
 8002b52:	f043 0304 	orr.w	r3, r3, #4
 8002b56:	61d3      	str	r3, [r2, #28]
 8002b58:	4b1c      	ldr	r3, [pc, #112]	; (8002bcc <HAL_InitTick+0xa0>)
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b64:	f107 0210 	add.w	r2, r7, #16
 8002b68:	f107 0314 	add.w	r3, r7, #20
 8002b6c:	4611      	mov	r1, r2
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f002 fa3e 	bl	8004ff0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002b74:	f002 fa14 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b80:	4a13      	ldr	r2, [pc, #76]	; (8002bd0 <HAL_InitTick+0xa4>)
 8002b82:	fba2 2303 	umull	r2, r3, r2, r3
 8002b86:	0c9b      	lsrs	r3, r3, #18
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002b8c:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <HAL_InitTick+0xa8>)
 8002b8e:	4a12      	ldr	r2, [pc, #72]	; (8002bd8 <HAL_InitTick+0xac>)
 8002b90:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8002b92:	4b10      	ldr	r3, [pc, #64]	; (8002bd4 <HAL_InitTick+0xa8>)
 8002b94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b98:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002b9a:	4a0e      	ldr	r2, [pc, #56]	; (8002bd4 <HAL_InitTick+0xa8>)
 8002b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <HAL_InitTick+0xa8>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ba6:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <HAL_InitTick+0xa8>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8002bac:	4809      	ldr	r0, [pc, #36]	; (8002bd4 <HAL_InitTick+0xa8>)
 8002bae:	f003 f83d 	bl	8005c2c <HAL_TIM_Base_Init>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d104      	bne.n	8002bc2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8002bb8:	4806      	ldr	r0, [pc, #24]	; (8002bd4 <HAL_InitTick+0xa8>)
 8002bba:	f003 f86b 	bl	8005c94 <HAL_TIM_Base_Start_IT>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	e000      	b.n	8002bc4 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3730      	adds	r7, #48	; 0x30
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	431bde83 	.word	0x431bde83
 8002bd4:	20000d44 	.word	0x20000d44
 8002bd8:	40000800 	.word	0x40000800

08002bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002be0:	bf00      	nop
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr

08002be8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bec:	e7fe      	b.n	8002bec <HardFault_Handler+0x4>

08002bee <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bf2:	e7fe      	b.n	8002bf2 <MemManage_Handler+0x4>

08002bf4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bf8:	e7fe      	b.n	8002bf8 <BusFault_Handler+0x4>

08002bfa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bfe:	e7fe      	b.n	8002bfe <UsageFault_Handler+0x4>

08002c00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c04:	bf00      	nop
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr

08002c0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c10:	bf00      	nop
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr

08002c18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c1c:	bf00      	nop
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr

08002c24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c28:	bf00      	nop
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr

08002c30 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002c34:	4802      	ldr	r0, [pc, #8]	; (8002c40 <DMA1_Channel6_IRQHandler+0x10>)
 8002c36:	f000 fb2d 	bl	8003294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000bd0 	.word	0x20000bd0

08002c44 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002c48:	4802      	ldr	r0, [pc, #8]	; (8002c54 <DMA1_Channel7_IRQHandler+0x10>)
 8002c4a:	f000 fb23 	bl	8003294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	20000c68 	.word	0x20000c68

08002c58 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002c5c:	4802      	ldr	r0, [pc, #8]	; (8002c68 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002c5e:	f000 ffee 	bl	8003c3e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002c62:	bf00      	nop
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	20001a1c 	.word	0x20001a1c

08002c6c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002c70:	4802      	ldr	r0, [pc, #8]	; (8002c7c <TIM4_IRQHandler+0x10>)
 8002c72:	f003 f832 	bl	8005cda <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000d44 	.word	0x20000d44

08002c80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  if(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_IDLE))
 8002c84:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <USART2_IRQHandler+0x20>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0310 	and.w	r3, r3, #16
 8002c8e:	2b10      	cmp	r3, #16
 8002c90:	d101      	bne.n	8002c96 <USART2_IRQHandler+0x16>
	  uart_finish_receive();//空闲中断
 8002c92:	f7ff fc03 	bl	800249c <uart_finish_receive>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c96:	4802      	ldr	r0, [pc, #8]	; (8002ca0 <USART2_IRQHandler+0x20>)
 8002c98:	f003 fb82 	bl	80063a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c9c:	bf00      	nop
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	20000d04 	.word	0x20000d04

08002ca4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002ca8:	4b15      	ldr	r3, [pc, #84]	; (8002d00 <SystemInit+0x5c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a14      	ldr	r2, [pc, #80]	; (8002d00 <SystemInit+0x5c>)
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002cb4:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <SystemInit+0x5c>)
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	4911      	ldr	r1, [pc, #68]	; (8002d00 <SystemInit+0x5c>)
 8002cba:	4b12      	ldr	r3, [pc, #72]	; (8002d04 <SystemInit+0x60>)
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <SystemInit+0x5c>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a0e      	ldr	r2, [pc, #56]	; (8002d00 <SystemInit+0x5c>)
 8002cc6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cce:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <SystemInit+0x5c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a0a      	ldr	r2, [pc, #40]	; (8002d00 <SystemInit+0x5c>)
 8002cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cda:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002cdc:	4b08      	ldr	r3, [pc, #32]	; (8002d00 <SystemInit+0x5c>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	4a07      	ldr	r2, [pc, #28]	; (8002d00 <SystemInit+0x5c>)
 8002ce2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002ce6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <SystemInit+0x5c>)
 8002cea:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002cee:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002cf0:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <SystemInit+0x64>)
 8002cf2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cf6:	609a      	str	r2, [r3, #8]
#endif 
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr
 8002d00:	40021000 	.word	0x40021000
 8002d04:	f8ff0000 	.word	0xf8ff0000
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002d0c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002d0e:	e003      	b.n	8002d18 <LoopCopyDataInit>

08002d10 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002d10:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002d12:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002d14:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002d16:	3104      	adds	r1, #4

08002d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002d18:	480a      	ldr	r0, [pc, #40]	; (8002d44 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002d1a:	4b0b      	ldr	r3, [pc, #44]	; (8002d48 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002d1c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002d1e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002d20:	d3f6      	bcc.n	8002d10 <CopyDataInit>
  ldr r2, =_sbss
 8002d22:	4a0a      	ldr	r2, [pc, #40]	; (8002d4c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002d24:	e002      	b.n	8002d2c <LoopFillZerobss>

08002d26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002d26:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002d28:	f842 3b04 	str.w	r3, [r2], #4

08002d2c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002d2c:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002d2e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002d30:	d3f9      	bcc.n	8002d26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d32:	f7ff ffb7 	bl	8002ca4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d36:	f007 f88d 	bl	8009e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d3a:	f7ff fbff 	bl	800253c <main>
  bx lr
 8002d3e:	4770      	bx	lr
  ldr r3, =_sidata
 8002d40:	08009f30 	.word	0x08009f30
  ldr r0, =_sdata
 8002d44:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002d48:	20000194 	.word	0x20000194
  ldr r2, =_sbss
 8002d4c:	20000194 	.word	0x20000194
  ldr r3, = _ebss
 8002d50:	20001c88 	.word	0x20001c88

08002d54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d54:	e7fe      	b.n	8002d54 <ADC1_2_IRQHandler>
	...

08002d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d5c:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <HAL_Init+0x28>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a07      	ldr	r2, [pc, #28]	; (8002d80 <HAL_Init+0x28>)
 8002d62:	f043 0310 	orr.w	r3, r3, #16
 8002d66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d68:	2003      	movs	r0, #3
 8002d6a:	f000 f8f3 	bl	8002f54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d6e:	2000      	movs	r0, #0
 8002d70:	f7ff fedc 	bl	8002b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d74:	f7ff fd6c 	bl	8002850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40022000 	.word	0x40022000

08002d84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d88:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <HAL_IncTick+0x1c>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <HAL_IncTick+0x20>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4413      	add	r3, r2
 8002d94:	4a03      	ldr	r2, [pc, #12]	; (8002da4 <HAL_IncTick+0x20>)
 8002d96:	6013      	str	r3, [r2, #0]
}
 8002d98:	bf00      	nop
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr
 8002da0:	20000020 	.word	0x20000020
 8002da4:	20000d84 	.word	0x20000d84

08002da8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return uwTick;
 8002dac:	4b02      	ldr	r3, [pc, #8]	; (8002db8 <HAL_GetTick+0x10>)
 8002dae:	681b      	ldr	r3, [r3, #0]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr
 8002db8:	20000d84 	.word	0x20000d84

08002dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dc4:	f7ff fff0 	bl	8002da8 <HAL_GetTick>
 8002dc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd4:	d005      	beq.n	8002de2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dd6:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <HAL_Delay+0x40>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4413      	add	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002de2:	bf00      	nop
 8002de4:	f7ff ffe0 	bl	8002da8 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d8f7      	bhi.n	8002de4 <HAL_Delay+0x28>
  {
  }
}
 8002df4:	bf00      	nop
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	20000020 	.word	0x20000020

08002e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e10:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <__NVIC_SetPriorityGrouping+0x44>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e32:	4a04      	ldr	r2, [pc, #16]	; (8002e44 <__NVIC_SetPriorityGrouping+0x44>)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	60d3      	str	r3, [r2, #12]
}
 8002e38:	bf00      	nop
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bc80      	pop	{r7}
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	e000ed00 	.word	0xe000ed00

08002e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e4c:	4b04      	ldr	r3, [pc, #16]	; (8002e60 <__NVIC_GetPriorityGrouping+0x18>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	0a1b      	lsrs	r3, r3, #8
 8002e52:	f003 0307 	and.w	r3, r3, #7
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	e000ed00 	.word	0xe000ed00

08002e64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	db0b      	blt.n	8002e8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e76:	79fb      	ldrb	r3, [r7, #7]
 8002e78:	f003 021f 	and.w	r2, r3, #31
 8002e7c:	4906      	ldr	r1, [pc, #24]	; (8002e98 <__NVIC_EnableIRQ+0x34>)
 8002e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e82:	095b      	lsrs	r3, r3, #5
 8002e84:	2001      	movs	r0, #1
 8002e86:	fa00 f202 	lsl.w	r2, r0, r2
 8002e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bc80      	pop	{r7}
 8002e96:	4770      	bx	lr
 8002e98:	e000e100 	.word	0xe000e100

08002e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	6039      	str	r1, [r7, #0]
 8002ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	db0a      	blt.n	8002ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	490c      	ldr	r1, [pc, #48]	; (8002ee8 <__NVIC_SetPriority+0x4c>)
 8002eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eba:	0112      	lsls	r2, r2, #4
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ec4:	e00a      	b.n	8002edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	b2da      	uxtb	r2, r3
 8002eca:	4908      	ldr	r1, [pc, #32]	; (8002eec <__NVIC_SetPriority+0x50>)
 8002ecc:	79fb      	ldrb	r3, [r7, #7]
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	3b04      	subs	r3, #4
 8002ed4:	0112      	lsls	r2, r2, #4
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	440b      	add	r3, r1
 8002eda:	761a      	strb	r2, [r3, #24]
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bc80      	pop	{r7}
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	e000e100 	.word	0xe000e100
 8002eec:	e000ed00 	.word	0xe000ed00

08002ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b089      	sub	sp, #36	; 0x24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	f1c3 0307 	rsb	r3, r3, #7
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	bf28      	it	cs
 8002f0e:	2304      	movcs	r3, #4
 8002f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	3304      	adds	r3, #4
 8002f16:	2b06      	cmp	r3, #6
 8002f18:	d902      	bls.n	8002f20 <NVIC_EncodePriority+0x30>
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	3b03      	subs	r3, #3
 8002f1e:	e000      	b.n	8002f22 <NVIC_EncodePriority+0x32>
 8002f20:	2300      	movs	r3, #0
 8002f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f24:	f04f 32ff 	mov.w	r2, #4294967295
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43da      	mvns	r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	401a      	ands	r2, r3
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f38:	f04f 31ff 	mov.w	r1, #4294967295
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f42:	43d9      	mvns	r1, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f48:	4313      	orrs	r3, r2
         );
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3724      	adds	r7, #36	; 0x24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr

08002f54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f7ff ff4f 	bl	8002e00 <__NVIC_SetPriorityGrouping>
}
 8002f62:	bf00      	nop
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b086      	sub	sp, #24
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	4603      	mov	r3, r0
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	607a      	str	r2, [r7, #4]
 8002f76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f7c:	f7ff ff64 	bl	8002e48 <__NVIC_GetPriorityGrouping>
 8002f80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	68b9      	ldr	r1, [r7, #8]
 8002f86:	6978      	ldr	r0, [r7, #20]
 8002f88:	f7ff ffb2 	bl	8002ef0 <NVIC_EncodePriority>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f92:	4611      	mov	r1, r2
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff ff81 	bl	8002e9c <__NVIC_SetPriority>
}
 8002f9a:	bf00      	nop
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b082      	sub	sp, #8
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	4603      	mov	r3, r0
 8002faa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff ff57 	bl	8002e64 <__NVIC_EnableIRQ>
}
 8002fb6:	bf00      	nop
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e043      	b.n	800305e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	4b22      	ldr	r3, [pc, #136]	; (8003068 <HAL_DMA_Init+0xa8>)
 8002fde:	4413      	add	r3, r2
 8002fe0:	4a22      	ldr	r2, [pc, #136]	; (800306c <HAL_DMA_Init+0xac>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	091b      	lsrs	r3, r3, #4
 8002fe8:	009a      	lsls	r2, r3, #2
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a1f      	ldr	r2, [pc, #124]	; (8003070 <HAL_DMA_Init+0xb0>)
 8002ff2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800300a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800300e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003018:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003024:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003030:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	4313      	orrs	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr
 8003068:	bffdfff8 	.word	0xbffdfff8
 800306c:	cccccccd 	.word	0xcccccccd
 8003070:	40020000 	.word	0x40020000

08003074 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
 8003080:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f893 3020 	ldrb.w	r3, [r3, #32]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_DMA_Start_IT+0x20>
 8003090:	2302      	movs	r3, #2
 8003092:	e04a      	b.n	800312a <HAL_DMA_Start_IT+0xb6>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d13a      	bne.n	800311c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2202      	movs	r2, #2
 80030aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0201 	bic.w	r2, r2, #1
 80030c2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	68b9      	ldr	r1, [r7, #8]
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 f9e8 	bl	80034a0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d008      	beq.n	80030ea <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 020e 	orr.w	r2, r2, #14
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	e00f      	b.n	800310a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0204 	bic.w	r2, r2, #4
 80030f8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f042 020a 	orr.w	r2, r2, #10
 8003108:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f042 0201 	orr.w	r2, r2, #1
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	e005      	b.n	8003128 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003124:	2302      	movs	r3, #2
 8003126:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003128:	7dfb      	ldrb	r3, [r7, #23]
}
 800312a:	4618      	mov	r0, r3
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003132:	b480      	push	{r7}
 8003134:	b085      	sub	sp, #20
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800313a:	2300      	movs	r3, #0
 800313c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003144:	2b02      	cmp	r3, #2
 8003146:	d008      	beq.n	800315a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2204      	movs	r2, #4
 800314c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e020      	b.n	800319c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 020e 	bic.w	r2, r2, #14
 8003168:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0201 	bic.w	r2, r2, #1
 8003178:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003182:	2101      	movs	r1, #1
 8003184:	fa01 f202 	lsl.w	r2, r1, r2
 8003188:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800319a:	7bfb      	ldrb	r3, [r7, #15]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr
	...

080031a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d005      	beq.n	80031ca <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2204      	movs	r2, #4
 80031c2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	73fb      	strb	r3, [r7, #15]
 80031c8:	e051      	b.n	800326e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 020e 	bic.w	r2, r2, #14
 80031d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 0201 	bic.w	r2, r2, #1
 80031e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a22      	ldr	r2, [pc, #136]	; (8003278 <HAL_DMA_Abort_IT+0xd0>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d029      	beq.n	8003248 <HAL_DMA_Abort_IT+0xa0>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a20      	ldr	r2, [pc, #128]	; (800327c <HAL_DMA_Abort_IT+0xd4>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d022      	beq.n	8003244 <HAL_DMA_Abort_IT+0x9c>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a1f      	ldr	r2, [pc, #124]	; (8003280 <HAL_DMA_Abort_IT+0xd8>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d01a      	beq.n	800323e <HAL_DMA_Abort_IT+0x96>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a1d      	ldr	r2, [pc, #116]	; (8003284 <HAL_DMA_Abort_IT+0xdc>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d012      	beq.n	8003238 <HAL_DMA_Abort_IT+0x90>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a1c      	ldr	r2, [pc, #112]	; (8003288 <HAL_DMA_Abort_IT+0xe0>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d00a      	beq.n	8003232 <HAL_DMA_Abort_IT+0x8a>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a1a      	ldr	r2, [pc, #104]	; (800328c <HAL_DMA_Abort_IT+0xe4>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d102      	bne.n	800322c <HAL_DMA_Abort_IT+0x84>
 8003226:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800322a:	e00e      	b.n	800324a <HAL_DMA_Abort_IT+0xa2>
 800322c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003230:	e00b      	b.n	800324a <HAL_DMA_Abort_IT+0xa2>
 8003232:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003236:	e008      	b.n	800324a <HAL_DMA_Abort_IT+0xa2>
 8003238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800323c:	e005      	b.n	800324a <HAL_DMA_Abort_IT+0xa2>
 800323e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003242:	e002      	b.n	800324a <HAL_DMA_Abort_IT+0xa2>
 8003244:	2310      	movs	r3, #16
 8003246:	e000      	b.n	800324a <HAL_DMA_Abort_IT+0xa2>
 8003248:	2301      	movs	r3, #1
 800324a:	4a11      	ldr	r2, [pc, #68]	; (8003290 <HAL_DMA_Abort_IT+0xe8>)
 800324c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	4798      	blx	r3
    } 
  }
  return status;
 800326e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40020008 	.word	0x40020008
 800327c:	4002001c 	.word	0x4002001c
 8003280:	40020030 	.word	0x40020030
 8003284:	40020044 	.word	0x40020044
 8003288:	40020058 	.word	0x40020058
 800328c:	4002006c 	.word	0x4002006c
 8003290:	40020000 	.word	0x40020000

08003294 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	2204      	movs	r2, #4
 80032b2:	409a      	lsls	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4013      	ands	r3, r2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d04f      	beq.n	800335c <HAL_DMA_IRQHandler+0xc8>
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	f003 0304 	and.w	r3, r3, #4
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d04a      	beq.n	800335c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0320 	and.w	r3, r3, #32
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d107      	bne.n	80032e4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0204 	bic.w	r2, r2, #4
 80032e2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a66      	ldr	r2, [pc, #408]	; (8003484 <HAL_DMA_IRQHandler+0x1f0>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d029      	beq.n	8003342 <HAL_DMA_IRQHandler+0xae>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a65      	ldr	r2, [pc, #404]	; (8003488 <HAL_DMA_IRQHandler+0x1f4>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d022      	beq.n	800333e <HAL_DMA_IRQHandler+0xaa>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a63      	ldr	r2, [pc, #396]	; (800348c <HAL_DMA_IRQHandler+0x1f8>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d01a      	beq.n	8003338 <HAL_DMA_IRQHandler+0xa4>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a62      	ldr	r2, [pc, #392]	; (8003490 <HAL_DMA_IRQHandler+0x1fc>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d012      	beq.n	8003332 <HAL_DMA_IRQHandler+0x9e>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a60      	ldr	r2, [pc, #384]	; (8003494 <HAL_DMA_IRQHandler+0x200>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d00a      	beq.n	800332c <HAL_DMA_IRQHandler+0x98>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a5f      	ldr	r2, [pc, #380]	; (8003498 <HAL_DMA_IRQHandler+0x204>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d102      	bne.n	8003326 <HAL_DMA_IRQHandler+0x92>
 8003320:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003324:	e00e      	b.n	8003344 <HAL_DMA_IRQHandler+0xb0>
 8003326:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800332a:	e00b      	b.n	8003344 <HAL_DMA_IRQHandler+0xb0>
 800332c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003330:	e008      	b.n	8003344 <HAL_DMA_IRQHandler+0xb0>
 8003332:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003336:	e005      	b.n	8003344 <HAL_DMA_IRQHandler+0xb0>
 8003338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800333c:	e002      	b.n	8003344 <HAL_DMA_IRQHandler+0xb0>
 800333e:	2340      	movs	r3, #64	; 0x40
 8003340:	e000      	b.n	8003344 <HAL_DMA_IRQHandler+0xb0>
 8003342:	2304      	movs	r3, #4
 8003344:	4a55      	ldr	r2, [pc, #340]	; (800349c <HAL_DMA_IRQHandler+0x208>)
 8003346:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 8094 	beq.w	800347a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800335a:	e08e      	b.n	800347a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	2202      	movs	r2, #2
 8003362:	409a      	lsls	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4013      	ands	r3, r2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d056      	beq.n	800341a <HAL_DMA_IRQHandler+0x186>
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d051      	beq.n	800341a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0320 	and.w	r3, r3, #32
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10b      	bne.n	800339c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 020a 	bic.w	r2, r2, #10
 8003392:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a38      	ldr	r2, [pc, #224]	; (8003484 <HAL_DMA_IRQHandler+0x1f0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d029      	beq.n	80033fa <HAL_DMA_IRQHandler+0x166>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a37      	ldr	r2, [pc, #220]	; (8003488 <HAL_DMA_IRQHandler+0x1f4>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d022      	beq.n	80033f6 <HAL_DMA_IRQHandler+0x162>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a35      	ldr	r2, [pc, #212]	; (800348c <HAL_DMA_IRQHandler+0x1f8>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d01a      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x15c>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a34      	ldr	r2, [pc, #208]	; (8003490 <HAL_DMA_IRQHandler+0x1fc>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d012      	beq.n	80033ea <HAL_DMA_IRQHandler+0x156>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a32      	ldr	r2, [pc, #200]	; (8003494 <HAL_DMA_IRQHandler+0x200>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d00a      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x150>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a31      	ldr	r2, [pc, #196]	; (8003498 <HAL_DMA_IRQHandler+0x204>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d102      	bne.n	80033de <HAL_DMA_IRQHandler+0x14a>
 80033d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80033dc:	e00e      	b.n	80033fc <HAL_DMA_IRQHandler+0x168>
 80033de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033e2:	e00b      	b.n	80033fc <HAL_DMA_IRQHandler+0x168>
 80033e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033e8:	e008      	b.n	80033fc <HAL_DMA_IRQHandler+0x168>
 80033ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033ee:	e005      	b.n	80033fc <HAL_DMA_IRQHandler+0x168>
 80033f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033f4:	e002      	b.n	80033fc <HAL_DMA_IRQHandler+0x168>
 80033f6:	2320      	movs	r3, #32
 80033f8:	e000      	b.n	80033fc <HAL_DMA_IRQHandler+0x168>
 80033fa:	2302      	movs	r3, #2
 80033fc:	4a27      	ldr	r2, [pc, #156]	; (800349c <HAL_DMA_IRQHandler+0x208>)
 80033fe:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340c:	2b00      	cmp	r3, #0
 800340e:	d034      	beq.n	800347a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003418:	e02f      	b.n	800347a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	2208      	movs	r2, #8
 8003420:	409a      	lsls	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	4013      	ands	r3, r2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d028      	beq.n	800347c <HAL_DMA_IRQHandler+0x1e8>
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	f003 0308 	and.w	r3, r3, #8
 8003430:	2b00      	cmp	r3, #0
 8003432:	d023      	beq.n	800347c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 020e 	bic.w	r2, r2, #14
 8003442:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344c:	2101      	movs	r1, #1
 800344e:	fa01 f202 	lsl.w	r2, r1, r2
 8003452:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	2b00      	cmp	r3, #0
 8003470:	d004      	beq.n	800347c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	4798      	blx	r3
    }
  }
  return;
 800347a:	bf00      	nop
 800347c:	bf00      	nop
}
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40020008 	.word	0x40020008
 8003488:	4002001c 	.word	0x4002001c
 800348c:	40020030 	.word	0x40020030
 8003490:	40020044 	.word	0x40020044
 8003494:	40020058 	.word	0x40020058
 8003498:	4002006c 	.word	0x4002006c
 800349c:	40020000 	.word	0x40020000

080034a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
 80034ac:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b6:	2101      	movs	r1, #1
 80034b8:	fa01 f202 	lsl.w	r2, r1, r2
 80034bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b10      	cmp	r3, #16
 80034cc:	d108      	bne.n	80034e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034de:	e007      	b.n	80034f0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	60da      	str	r2, [r3, #12]
}
 80034f0:	bf00      	nop
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bc80      	pop	{r7}
 80034f8:	4770      	bx	lr
	...

080034fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b08b      	sub	sp, #44	; 0x2c
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003506:	2300      	movs	r3, #0
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800350a:	2300      	movs	r3, #0
 800350c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800350e:	e127      	b.n	8003760 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003510:	2201      	movs	r2, #1
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	69fa      	ldr	r2, [r7, #28]
 8003520:	4013      	ands	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	429a      	cmp	r2, r3
 800352a:	f040 8116 	bne.w	800375a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b12      	cmp	r3, #18
 8003534:	d034      	beq.n	80035a0 <HAL_GPIO_Init+0xa4>
 8003536:	2b12      	cmp	r3, #18
 8003538:	d80d      	bhi.n	8003556 <HAL_GPIO_Init+0x5a>
 800353a:	2b02      	cmp	r3, #2
 800353c:	d02b      	beq.n	8003596 <HAL_GPIO_Init+0x9a>
 800353e:	2b02      	cmp	r3, #2
 8003540:	d804      	bhi.n	800354c <HAL_GPIO_Init+0x50>
 8003542:	2b00      	cmp	r3, #0
 8003544:	d031      	beq.n	80035aa <HAL_GPIO_Init+0xae>
 8003546:	2b01      	cmp	r3, #1
 8003548:	d01c      	beq.n	8003584 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800354a:	e048      	b.n	80035de <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800354c:	2b03      	cmp	r3, #3
 800354e:	d043      	beq.n	80035d8 <HAL_GPIO_Init+0xdc>
 8003550:	2b11      	cmp	r3, #17
 8003552:	d01b      	beq.n	800358c <HAL_GPIO_Init+0x90>
          break;
 8003554:	e043      	b.n	80035de <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003556:	4a89      	ldr	r2, [pc, #548]	; (800377c <HAL_GPIO_Init+0x280>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d026      	beq.n	80035aa <HAL_GPIO_Init+0xae>
 800355c:	4a87      	ldr	r2, [pc, #540]	; (800377c <HAL_GPIO_Init+0x280>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d806      	bhi.n	8003570 <HAL_GPIO_Init+0x74>
 8003562:	4a87      	ldr	r2, [pc, #540]	; (8003780 <HAL_GPIO_Init+0x284>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d020      	beq.n	80035aa <HAL_GPIO_Init+0xae>
 8003568:	4a86      	ldr	r2, [pc, #536]	; (8003784 <HAL_GPIO_Init+0x288>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d01d      	beq.n	80035aa <HAL_GPIO_Init+0xae>
          break;
 800356e:	e036      	b.n	80035de <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003570:	4a85      	ldr	r2, [pc, #532]	; (8003788 <HAL_GPIO_Init+0x28c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d019      	beq.n	80035aa <HAL_GPIO_Init+0xae>
 8003576:	4a85      	ldr	r2, [pc, #532]	; (800378c <HAL_GPIO_Init+0x290>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d016      	beq.n	80035aa <HAL_GPIO_Init+0xae>
 800357c:	4a84      	ldr	r2, [pc, #528]	; (8003790 <HAL_GPIO_Init+0x294>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d013      	beq.n	80035aa <HAL_GPIO_Init+0xae>
          break;
 8003582:	e02c      	b.n	80035de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	623b      	str	r3, [r7, #32]
          break;
 800358a:	e028      	b.n	80035de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	3304      	adds	r3, #4
 8003592:	623b      	str	r3, [r7, #32]
          break;
 8003594:	e023      	b.n	80035de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	3308      	adds	r3, #8
 800359c:	623b      	str	r3, [r7, #32]
          break;
 800359e:	e01e      	b.n	80035de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	330c      	adds	r3, #12
 80035a6:	623b      	str	r3, [r7, #32]
          break;
 80035a8:	e019      	b.n	80035de <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d102      	bne.n	80035b8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80035b2:	2304      	movs	r3, #4
 80035b4:	623b      	str	r3, [r7, #32]
          break;
 80035b6:	e012      	b.n	80035de <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d105      	bne.n	80035cc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035c0:	2308      	movs	r3, #8
 80035c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	69fa      	ldr	r2, [r7, #28]
 80035c8:	611a      	str	r2, [r3, #16]
          break;
 80035ca:	e008      	b.n	80035de <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035cc:	2308      	movs	r3, #8
 80035ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	69fa      	ldr	r2, [r7, #28]
 80035d4:	615a      	str	r2, [r3, #20]
          break;
 80035d6:	e002      	b.n	80035de <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80035d8:	2300      	movs	r3, #0
 80035da:	623b      	str	r3, [r7, #32]
          break;
 80035dc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	2bff      	cmp	r3, #255	; 0xff
 80035e2:	d801      	bhi.n	80035e8 <HAL_GPIO_Init+0xec>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	e001      	b.n	80035ec <HAL_GPIO_Init+0xf0>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3304      	adds	r3, #4
 80035ec:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	2bff      	cmp	r3, #255	; 0xff
 80035f2:	d802      	bhi.n	80035fa <HAL_GPIO_Init+0xfe>
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	e002      	b.n	8003600 <HAL_GPIO_Init+0x104>
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	3b08      	subs	r3, #8
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	210f      	movs	r1, #15
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	fa01 f303 	lsl.w	r3, r1, r3
 800360e:	43db      	mvns	r3, r3
 8003610:	401a      	ands	r2, r3
 8003612:	6a39      	ldr	r1, [r7, #32]
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	fa01 f303 	lsl.w	r3, r1, r3
 800361a:	431a      	orrs	r2, r3
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 8096 	beq.w	800375a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800362e:	4b59      	ldr	r3, [pc, #356]	; (8003794 <HAL_GPIO_Init+0x298>)
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	4a58      	ldr	r2, [pc, #352]	; (8003794 <HAL_GPIO_Init+0x298>)
 8003634:	f043 0301 	orr.w	r3, r3, #1
 8003638:	6193      	str	r3, [r2, #24]
 800363a:	4b56      	ldr	r3, [pc, #344]	; (8003794 <HAL_GPIO_Init+0x298>)
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	60bb      	str	r3, [r7, #8]
 8003644:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003646:	4a54      	ldr	r2, [pc, #336]	; (8003798 <HAL_GPIO_Init+0x29c>)
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	089b      	lsrs	r3, r3, #2
 800364c:	3302      	adds	r3, #2
 800364e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003652:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	220f      	movs	r2, #15
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	43db      	mvns	r3, r3
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	4013      	ands	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a4b      	ldr	r2, [pc, #300]	; (800379c <HAL_GPIO_Init+0x2a0>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d013      	beq.n	800369a <HAL_GPIO_Init+0x19e>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a4a      	ldr	r2, [pc, #296]	; (80037a0 <HAL_GPIO_Init+0x2a4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d00d      	beq.n	8003696 <HAL_GPIO_Init+0x19a>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a49      	ldr	r2, [pc, #292]	; (80037a4 <HAL_GPIO_Init+0x2a8>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d007      	beq.n	8003692 <HAL_GPIO_Init+0x196>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a48      	ldr	r2, [pc, #288]	; (80037a8 <HAL_GPIO_Init+0x2ac>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d101      	bne.n	800368e <HAL_GPIO_Init+0x192>
 800368a:	2303      	movs	r3, #3
 800368c:	e006      	b.n	800369c <HAL_GPIO_Init+0x1a0>
 800368e:	2304      	movs	r3, #4
 8003690:	e004      	b.n	800369c <HAL_GPIO_Init+0x1a0>
 8003692:	2302      	movs	r3, #2
 8003694:	e002      	b.n	800369c <HAL_GPIO_Init+0x1a0>
 8003696:	2301      	movs	r3, #1
 8003698:	e000      	b.n	800369c <HAL_GPIO_Init+0x1a0>
 800369a:	2300      	movs	r3, #0
 800369c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800369e:	f002 0203 	and.w	r2, r2, #3
 80036a2:	0092      	lsls	r2, r2, #2
 80036a4:	4093      	lsls	r3, r2
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80036ac:	493a      	ldr	r1, [pc, #232]	; (8003798 <HAL_GPIO_Init+0x29c>)
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	089b      	lsrs	r3, r3, #2
 80036b2:	3302      	adds	r3, #2
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d006      	beq.n	80036d4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80036c6:	4b39      	ldr	r3, [pc, #228]	; (80037ac <HAL_GPIO_Init+0x2b0>)
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	4938      	ldr	r1, [pc, #224]	; (80037ac <HAL_GPIO_Init+0x2b0>)
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	600b      	str	r3, [r1, #0]
 80036d2:	e006      	b.n	80036e2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80036d4:	4b35      	ldr	r3, [pc, #212]	; (80037ac <HAL_GPIO_Init+0x2b0>)
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	43db      	mvns	r3, r3
 80036dc:	4933      	ldr	r1, [pc, #204]	; (80037ac <HAL_GPIO_Init+0x2b0>)
 80036de:	4013      	ands	r3, r2
 80036e0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d006      	beq.n	80036fc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80036ee:	4b2f      	ldr	r3, [pc, #188]	; (80037ac <HAL_GPIO_Init+0x2b0>)
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	492e      	ldr	r1, [pc, #184]	; (80037ac <HAL_GPIO_Init+0x2b0>)
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	604b      	str	r3, [r1, #4]
 80036fa:	e006      	b.n	800370a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80036fc:	4b2b      	ldr	r3, [pc, #172]	; (80037ac <HAL_GPIO_Init+0x2b0>)
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	43db      	mvns	r3, r3
 8003704:	4929      	ldr	r1, [pc, #164]	; (80037ac <HAL_GPIO_Init+0x2b0>)
 8003706:	4013      	ands	r3, r2
 8003708:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d006      	beq.n	8003724 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003716:	4b25      	ldr	r3, [pc, #148]	; (80037ac <HAL_GPIO_Init+0x2b0>)
 8003718:	689a      	ldr	r2, [r3, #8]
 800371a:	4924      	ldr	r1, [pc, #144]	; (80037ac <HAL_GPIO_Init+0x2b0>)
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	4313      	orrs	r3, r2
 8003720:	608b      	str	r3, [r1, #8]
 8003722:	e006      	b.n	8003732 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003724:	4b21      	ldr	r3, [pc, #132]	; (80037ac <HAL_GPIO_Init+0x2b0>)
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	43db      	mvns	r3, r3
 800372c:	491f      	ldr	r1, [pc, #124]	; (80037ac <HAL_GPIO_Init+0x2b0>)
 800372e:	4013      	ands	r3, r2
 8003730:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d006      	beq.n	800374c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800373e:	4b1b      	ldr	r3, [pc, #108]	; (80037ac <HAL_GPIO_Init+0x2b0>)
 8003740:	68da      	ldr	r2, [r3, #12]
 8003742:	491a      	ldr	r1, [pc, #104]	; (80037ac <HAL_GPIO_Init+0x2b0>)
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	4313      	orrs	r3, r2
 8003748:	60cb      	str	r3, [r1, #12]
 800374a:	e006      	b.n	800375a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800374c:	4b17      	ldr	r3, [pc, #92]	; (80037ac <HAL_GPIO_Init+0x2b0>)
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	43db      	mvns	r3, r3
 8003754:	4915      	ldr	r1, [pc, #84]	; (80037ac <HAL_GPIO_Init+0x2b0>)
 8003756:	4013      	ands	r3, r2
 8003758:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	3301      	adds	r3, #1
 800375e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	fa22 f303 	lsr.w	r3, r2, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	f47f aed0 	bne.w	8003510 <HAL_GPIO_Init+0x14>
  }
}
 8003770:	bf00      	nop
 8003772:	372c      	adds	r7, #44	; 0x2c
 8003774:	46bd      	mov	sp, r7
 8003776:	bc80      	pop	{r7}
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	10210000 	.word	0x10210000
 8003780:	10110000 	.word	0x10110000
 8003784:	10120000 	.word	0x10120000
 8003788:	10310000 	.word	0x10310000
 800378c:	10320000 	.word	0x10320000
 8003790:	10220000 	.word	0x10220000
 8003794:	40021000 	.word	0x40021000
 8003798:	40010000 	.word	0x40010000
 800379c:	40010800 	.word	0x40010800
 80037a0:	40010c00 	.word	0x40010c00
 80037a4:	40011000 	.word	0x40011000
 80037a8:	40011400 	.word	0x40011400
 80037ac:	40010400 	.word	0x40010400

080037b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	460b      	mov	r3, r1
 80037ba:	807b      	strh	r3, [r7, #2]
 80037bc:	4613      	mov	r3, r2
 80037be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037c0:	787b      	ldrb	r3, [r7, #1]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037c6:	887a      	ldrh	r2, [r7, #2]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80037cc:	e003      	b.n	80037d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80037ce:	887b      	ldrh	r3, [r7, #2]
 80037d0:	041a      	lsls	r2, r3, #16
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	611a      	str	r2, [r3, #16]
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	bc80      	pop	{r7}
 80037de:	4770      	bx	lr

080037e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e10f      	b.n	8003a12 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d106      	bne.n	800380c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7ff f854 	bl	80028b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2224      	movs	r2, #36	; 0x24
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0201 	bic.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003824:	f001 fbbc 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8003828:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	4a7b      	ldr	r2, [pc, #492]	; (8003a1c <HAL_I2C_Init+0x23c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d807      	bhi.n	8003844 <HAL_I2C_Init+0x64>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4a7a      	ldr	r2, [pc, #488]	; (8003a20 <HAL_I2C_Init+0x240>)
 8003838:	4293      	cmp	r3, r2
 800383a:	bf94      	ite	ls
 800383c:	2301      	movls	r3, #1
 800383e:	2300      	movhi	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	e006      	b.n	8003852 <HAL_I2C_Init+0x72>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4a77      	ldr	r2, [pc, #476]	; (8003a24 <HAL_I2C_Init+0x244>)
 8003848:	4293      	cmp	r3, r2
 800384a:	bf94      	ite	ls
 800384c:	2301      	movls	r3, #1
 800384e:	2300      	movhi	r3, #0
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e0db      	b.n	8003a12 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	4a72      	ldr	r2, [pc, #456]	; (8003a28 <HAL_I2C_Init+0x248>)
 800385e:	fba2 2303 	umull	r2, r3, r2, r3
 8003862:	0c9b      	lsrs	r3, r3, #18
 8003864:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	430a      	orrs	r2, r1
 8003878:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	4a64      	ldr	r2, [pc, #400]	; (8003a1c <HAL_I2C_Init+0x23c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d802      	bhi.n	8003894 <HAL_I2C_Init+0xb4>
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	3301      	adds	r3, #1
 8003892:	e009      	b.n	80038a8 <HAL_I2C_Init+0xc8>
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800389a:	fb02 f303 	mul.w	r3, r2, r3
 800389e:	4a63      	ldr	r2, [pc, #396]	; (8003a2c <HAL_I2C_Init+0x24c>)
 80038a0:	fba2 2303 	umull	r2, r3, r2, r3
 80038a4:	099b      	lsrs	r3, r3, #6
 80038a6:	3301      	adds	r3, #1
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6812      	ldr	r2, [r2, #0]
 80038ac:	430b      	orrs	r3, r1
 80038ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80038ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	4956      	ldr	r1, [pc, #344]	; (8003a1c <HAL_I2C_Init+0x23c>)
 80038c4:	428b      	cmp	r3, r1
 80038c6:	d80d      	bhi.n	80038e4 <HAL_I2C_Init+0x104>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	1e59      	subs	r1, r3, #1
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80038d6:	3301      	adds	r3, #1
 80038d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038dc:	2b04      	cmp	r3, #4
 80038de:	bf38      	it	cc
 80038e0:	2304      	movcc	r3, #4
 80038e2:	e04f      	b.n	8003984 <HAL_I2C_Init+0x1a4>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d111      	bne.n	8003910 <HAL_I2C_Init+0x130>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	1e58      	subs	r0, r3, #1
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6859      	ldr	r1, [r3, #4]
 80038f4:	460b      	mov	r3, r1
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	440b      	add	r3, r1
 80038fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80038fe:	3301      	adds	r3, #1
 8003900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003904:	2b00      	cmp	r3, #0
 8003906:	bf0c      	ite	eq
 8003908:	2301      	moveq	r3, #1
 800390a:	2300      	movne	r3, #0
 800390c:	b2db      	uxtb	r3, r3
 800390e:	e012      	b.n	8003936 <HAL_I2C_Init+0x156>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	1e58      	subs	r0, r3, #1
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6859      	ldr	r1, [r3, #4]
 8003918:	460b      	mov	r3, r1
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	440b      	add	r3, r1
 800391e:	0099      	lsls	r1, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	fbb0 f3f3 	udiv	r3, r0, r3
 8003926:	3301      	adds	r3, #1
 8003928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800392c:	2b00      	cmp	r3, #0
 800392e:	bf0c      	ite	eq
 8003930:	2301      	moveq	r3, #1
 8003932:	2300      	movne	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <HAL_I2C_Init+0x15e>
 800393a:	2301      	movs	r3, #1
 800393c:	e022      	b.n	8003984 <HAL_I2C_Init+0x1a4>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10e      	bne.n	8003964 <HAL_I2C_Init+0x184>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	1e58      	subs	r0, r3, #1
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6859      	ldr	r1, [r3, #4]
 800394e:	460b      	mov	r3, r1
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	440b      	add	r3, r1
 8003954:	fbb0 f3f3 	udiv	r3, r0, r3
 8003958:	3301      	adds	r3, #1
 800395a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800395e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003962:	e00f      	b.n	8003984 <HAL_I2C_Init+0x1a4>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	1e58      	subs	r0, r3, #1
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6859      	ldr	r1, [r3, #4]
 800396c:	460b      	mov	r3, r1
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	0099      	lsls	r1, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	fbb0 f3f3 	udiv	r3, r0, r3
 800397a:	3301      	adds	r3, #1
 800397c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003980:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	6809      	ldr	r1, [r1, #0]
 8003988:	4313      	orrs	r3, r2
 800398a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	69da      	ldr	r2, [r3, #28]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80039b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6911      	ldr	r1, [r2, #16]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	68d2      	ldr	r2, [r2, #12]
 80039be:	4311      	orrs	r1, r2
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6812      	ldr	r2, [r2, #0]
 80039c4:	430b      	orrs	r3, r1
 80039c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695a      	ldr	r2, [r3, #20]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0201 	orr.w	r2, r2, #1
 80039f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2220      	movs	r2, #32
 80039fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	000186a0 	.word	0x000186a0
 8003a20:	001e847f 	.word	0x001e847f
 8003a24:	003d08ff 	.word	0x003d08ff
 8003a28:	431bde83 	.word	0x431bde83
 8003a2c:	10624dd3 	.word	0x10624dd3

08003a30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a32:	b08b      	sub	sp, #44	; 0x2c
 8003a34:	af06      	add	r7, sp, #24
 8003a36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e0d3      	b.n	8003bea <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f005 ff5e 	bl	8009918 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2203      	movs	r2, #3
 8003a60:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f003 f8b2 	bl	8006bd2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	603b      	str	r3, [r7, #0]
 8003a74:	687e      	ldr	r6, [r7, #4]
 8003a76:	466d      	mov	r5, sp
 8003a78:	f106 0410 	add.w	r4, r6, #16
 8003a7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a80:	6823      	ldr	r3, [r4, #0]
 8003a82:	602b      	str	r3, [r5, #0]
 8003a84:	1d33      	adds	r3, r6, #4
 8003a86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a88:	6838      	ldr	r0, [r7, #0]
 8003a8a:	f003 f87b 	bl	8006b84 <USB_CoreInit>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d005      	beq.n	8003aa0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e0a4      	b.n	8003bea <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f003 f8af 	bl	8006c0a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aac:	2300      	movs	r3, #0
 8003aae:	73fb      	strb	r3, [r7, #15]
 8003ab0:	e035      	b.n	8003b1e <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	015b      	lsls	r3, r3, #5
 8003ab8:	4413      	add	r3, r2
 8003aba:	3329      	adds	r3, #41	; 0x29
 8003abc:	2201      	movs	r2, #1
 8003abe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	015b      	lsls	r3, r3, #5
 8003ac6:	4413      	add	r3, r2
 8003ac8:	3328      	adds	r3, #40	; 0x28
 8003aca:	7bfa      	ldrb	r2, [r7, #15]
 8003acc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
 8003ad0:	7bfa      	ldrb	r2, [r7, #15]
 8003ad2:	b291      	uxth	r1, r2
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	015b      	lsls	r3, r3, #5
 8003ad8:	4413      	add	r3, r2
 8003ada:	3336      	adds	r3, #54	; 0x36
 8003adc:	460a      	mov	r2, r1
 8003ade:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	015b      	lsls	r3, r3, #5
 8003ae6:	4413      	add	r3, r2
 8003ae8:	332b      	adds	r3, #43	; 0x2b
 8003aea:	2200      	movs	r2, #0
 8003aec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	015b      	lsls	r3, r3, #5
 8003af4:	4413      	add	r3, r2
 8003af6:	3338      	adds	r3, #56	; 0x38
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	015b      	lsls	r3, r3, #5
 8003b02:	4413      	add	r3, r2
 8003b04:	333c      	adds	r3, #60	; 0x3c
 8003b06:	2200      	movs	r2, #0
 8003b08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b0a:	7bfb      	ldrb	r3, [r7, #15]
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	3302      	adds	r3, #2
 8003b10:	015b      	lsls	r3, r3, #5
 8003b12:	4413      	add	r3, r2
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	73fb      	strb	r3, [r7, #15]
 8003b1e:	7bfa      	ldrb	r2, [r7, #15]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d3c4      	bcc.n	8003ab2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b28:	2300      	movs	r3, #0
 8003b2a:	73fb      	strb	r3, [r7, #15]
 8003b2c:	e031      	b.n	8003b92 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	015b      	lsls	r3, r3, #5
 8003b34:	4413      	add	r3, r2
 8003b36:	f203 1329 	addw	r3, r3, #297	; 0x129
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b3e:	7bfb      	ldrb	r3, [r7, #15]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	015b      	lsls	r3, r3, #5
 8003b44:	4413      	add	r3, r2
 8003b46:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003b4a:	7bfa      	ldrb	r2, [r7, #15]
 8003b4c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	015b      	lsls	r3, r3, #5
 8003b54:	4413      	add	r3, r2
 8003b56:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b5e:	7bfb      	ldrb	r3, [r7, #15]
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	015b      	lsls	r3, r3, #5
 8003b64:	4413      	add	r3, r2
 8003b66:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b6e:	7bfb      	ldrb	r3, [r7, #15]
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	015b      	lsls	r3, r3, #5
 8003b74:	4413      	add	r3, r2
 8003b76:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b7e:	7bfb      	ldrb	r3, [r7, #15]
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	330a      	adds	r3, #10
 8003b84:	015b      	lsls	r3, r3, #5
 8003b86:	4413      	add	r3, r2
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b8c:	7bfb      	ldrb	r3, [r7, #15]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	73fb      	strb	r3, [r7, #15]
 8003b92:	7bfa      	ldrb	r2, [r7, #15]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d3c8      	bcc.n	8003b2e <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	603b      	str	r3, [r7, #0]
 8003ba2:	687e      	ldr	r6, [r7, #4]
 8003ba4:	466d      	mov	r5, sp
 8003ba6:	f106 0410 	add.w	r4, r6, #16
 8003baa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	602b      	str	r3, [r5, #0]
 8003bb2:	1d33      	adds	r3, r6, #4
 8003bb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bb6:	6838      	ldr	r0, [r7, #0]
 8003bb8:	f003 f833 	bl	8006c22 <USB_DevInit>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d005      	beq.n	8003bce <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e00d      	b.n	8003bea <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f004 f871 	bl	8007cca <USB_DevDisconnect>

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bf2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b082      	sub	sp, #8
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_PCD_Start+0x16>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e016      	b.n	8003c36 <HAL_PCD_Start+0x44>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003c10:	2101      	movs	r1, #1
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f006 f8e7 	bl	8009de6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f004 f84a 	bl	8007cb6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f002 ffbc 	bl	8006ba4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b082      	sub	sp, #8
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f004 f847 	bl	8007cde <USB_ReadInterrupts>
 8003c50:	4603      	mov	r3, r0
 8003c52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c5a:	d102      	bne.n	8003c62 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 faf3 	bl	8004248 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f004 f839 	bl	8007cde <USB_ReadInterrupts>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c76:	d112      	bne.n	8003c9e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c8a:	b292      	uxth	r2, r2
 8003c8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f005 feb6 	bl	8009a02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003c96:	2100      	movs	r1, #0
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f8de 	bl	8003e5a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f004 f81b 	bl	8007cde <USB_ReadInterrupts>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cb2:	d10b      	bne.n	8003ccc <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003cc6:	b292      	uxth	r2, r2
 8003cc8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f004 f804 	bl	8007cde <USB_ReadInterrupts>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ce0:	d10b      	bne.n	8003cfa <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cf4:	b292      	uxth	r2, r2
 8003cf6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f003 ffed 	bl	8007cde <USB_ReadInterrupts>
 8003d04:	4603      	mov	r3, r0
 8003d06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d0e:	d126      	bne.n	8003d5e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0204 	bic.w	r2, r2, #4
 8003d22:	b292      	uxth	r2, r2
 8003d24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0208 	bic.w	r2, r2, #8
 8003d3a:	b292      	uxth	r2, r2
 8003d3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f005 fe97 	bl	8009a74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d58:	b292      	uxth	r2, r2
 8003d5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f003 ffbb 	bl	8007cde <USB_ReadInterrupts>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d72:	d13d      	bne.n	8003df0 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f042 0208 	orr.w	r2, r2, #8
 8003d86:	b292      	uxth	r2, r2
 8003d88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d9e:	b292      	uxth	r2, r2
 8003da0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0204 	orr.w	r2, r2, #4
 8003db6:	b292      	uxth	r2, r2
 8003db8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f003 ff8c 	bl	8007cde <USB_ReadInterrupts>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd0:	d10b      	bne.n	8003dea <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003de4:	b292      	uxth	r2, r2
 8003de6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f005 fe28 	bl	8009a40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f003 ff72 	bl	8007cde <USB_ReadInterrupts>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e04:	d10e      	bne.n	8003e24 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e18:	b292      	uxth	r2, r2
 8003e1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f005 fde1 	bl	80099e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f003 ff58 	bl	8007cde <USB_ReadInterrupts>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e38:	d10b      	bne.n	8003e52 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e4c:	b292      	uxth	r2, r2
 8003e4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003e52:	bf00      	nop
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b082      	sub	sp, #8
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
 8003e62:	460b      	mov	r3, r1
 8003e64:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_PCD_SetAddress+0x1a>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e013      	b.n	8003e9c <HAL_PCD_SetAddress+0x42>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	78fa      	ldrb	r2, [r7, #3]
 8003e80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	78fa      	ldrb	r2, [r7, #3]
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f003 feff 	bl	8007c90 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	4608      	mov	r0, r1
 8003eae:	4611      	mov	r1, r2
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	70fb      	strb	r3, [r7, #3]
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	803b      	strh	r3, [r7, #0]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ec2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	da0b      	bge.n	8003ee2 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eca:	78fb      	ldrb	r3, [r7, #3]
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	015b      	lsls	r3, r3, #5
 8003ed2:	3328      	adds	r3, #40	; 0x28
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2201      	movs	r2, #1
 8003ede:	705a      	strb	r2, [r3, #1]
 8003ee0:	e00b      	b.n	8003efa <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ee2:	78fb      	ldrb	r3, [r7, #3]
 8003ee4:	f003 0307 	and.w	r3, r3, #7
 8003ee8:	015b      	lsls	r3, r3, #5
 8003eea:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003efa:	78fb      	ldrb	r3, [r7, #3]
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003f06:	883a      	ldrh	r2, [r7, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	78ba      	ldrb	r2, [r7, #2]
 8003f10:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	785b      	ldrb	r3, [r3, #1]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d004      	beq.n	8003f24 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003f24:	78bb      	ldrb	r3, [r7, #2]
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d102      	bne.n	8003f30 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d101      	bne.n	8003f3e <HAL_PCD_EP_Open+0x9a>
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	e00e      	b.n	8003f5c <HAL_PCD_EP_Open+0xb8>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68f9      	ldr	r1, [r7, #12]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f002 fe8d 	bl	8006c6c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8003f5a:	7afb      	ldrb	r3, [r7, #11]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	da0b      	bge.n	8003f90 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f78:	78fb      	ldrb	r3, [r7, #3]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	015b      	lsls	r3, r3, #5
 8003f80:	3328      	adds	r3, #40	; 0x28
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	4413      	add	r3, r2
 8003f86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	705a      	strb	r2, [r3, #1]
 8003f8e:	e00b      	b.n	8003fa8 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f90:	78fb      	ldrb	r3, [r7, #3]
 8003f92:	f003 0307 	and.w	r3, r3, #7
 8003f96:	015b      	lsls	r3, r3, #5
 8003f98:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003fa8:	78fb      	ldrb	r3, [r7, #3]
 8003faa:	f003 0307 	and.w	r3, r3, #7
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d101      	bne.n	8003fc2 <HAL_PCD_EP_Close+0x5e>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	e00e      	b.n	8003fe0 <HAL_PCD_EP_Close+0x7c>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68f9      	ldr	r1, [r7, #12]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f003 f939 	bl	8007248 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	607a      	str	r2, [r7, #4]
 8003ff2:	603b      	str	r3, [r7, #0]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ff8:	7afb      	ldrb	r3, [r7, #11]
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	015b      	lsls	r3, r3, #5
 8004000:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	4413      	add	r3, r2
 8004008:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	2200      	movs	r2, #0
 800401a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	2200      	movs	r2, #0
 8004020:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004022:	7afb      	ldrb	r3, [r7, #11]
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	b2da      	uxtb	r2, r3
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800402e:	7afb      	ldrb	r3, [r7, #11]
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	2b00      	cmp	r3, #0
 8004036:	d106      	bne.n	8004046 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6979      	ldr	r1, [r7, #20]
 800403e:	4618      	mov	r0, r3
 8004040:	f003 fa98 	bl	8007574 <USB_EPStartXfer>
 8004044:	e005      	b.n	8004052 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6979      	ldr	r1, [r7, #20]
 800404c:	4618      	mov	r0, r3
 800404e:	f003 fa91 	bl	8007574 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3718      	adds	r7, #24
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	460b      	mov	r3, r1
 8004066:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004068:	78fb      	ldrb	r3, [r7, #3]
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	330a      	adds	r3, #10
 8004072:	015b      	lsls	r3, r3, #5
 8004074:	4413      	add	r3, r2
 8004076:	3304      	adds	r3, #4
 8004078:	681b      	ldr	r3, [r3, #0]
}
 800407a:	4618      	mov	r0, r3
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	bc80      	pop	{r7}
 8004082:	4770      	bx	lr

08004084 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	607a      	str	r2, [r7, #4]
 800408e:	603b      	str	r3, [r7, #0]
 8004090:	460b      	mov	r3, r1
 8004092:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004094:	7afb      	ldrb	r3, [r7, #11]
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	015b      	lsls	r3, r3, #5
 800409c:	3328      	adds	r3, #40	; 0x28
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	4413      	add	r3, r2
 80040a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	2200      	movs	r2, #0
 80040b4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2201      	movs	r2, #1
 80040ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040bc:	7afb      	ldrb	r3, [r7, #11]
 80040be:	f003 0307 	and.w	r3, r3, #7
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040c8:	7afb      	ldrb	r3, [r7, #11]
 80040ca:	f003 0307 	and.w	r3, r3, #7
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d106      	bne.n	80040e0 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6979      	ldr	r1, [r7, #20]
 80040d8:	4618      	mov	r0, r3
 80040da:	f003 fa4b 	bl	8007574 <USB_EPStartXfer>
 80040de:	e005      	b.n	80040ec <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6979      	ldr	r1, [r7, #20]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f003 fa44 	bl	8007574 <USB_EPStartXfer>
  }

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3718      	adds	r7, #24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b084      	sub	sp, #16
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
 80040fe:	460b      	mov	r3, r1
 8004100:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004102:	78fb      	ldrb	r3, [r7, #3]
 8004104:	f003 0207 	and.w	r2, r3, #7
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	429a      	cmp	r2, r3
 800410e:	d901      	bls.n	8004114 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e046      	b.n	80041a2 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004114:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004118:	2b00      	cmp	r3, #0
 800411a:	da0b      	bge.n	8004134 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800411c:	78fb      	ldrb	r3, [r7, #3]
 800411e:	f003 0307 	and.w	r3, r3, #7
 8004122:	015b      	lsls	r3, r3, #5
 8004124:	3328      	adds	r3, #40	; 0x28
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	4413      	add	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2201      	movs	r2, #1
 8004130:	705a      	strb	r2, [r3, #1]
 8004132:	e009      	b.n	8004148 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004134:	78fb      	ldrb	r3, [r7, #3]
 8004136:	015b      	lsls	r3, r3, #5
 8004138:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	4413      	add	r3, r2
 8004140:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2201      	movs	r2, #1
 800414c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800414e:	78fb      	ldrb	r3, [r7, #3]
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	b2da      	uxtb	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <HAL_PCD_EP_SetStall+0x72>
 8004164:	2302      	movs	r3, #2
 8004166:	e01c      	b.n	80041a2 <HAL_PCD_EP_SetStall+0xac>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68f9      	ldr	r1, [r7, #12]
 8004176:	4618      	mov	r0, r3
 8004178:	f003 fcb4 	bl	8007ae4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800417c:	78fb      	ldrb	r3, [r7, #3]
 800417e:	f003 0307 	and.w	r3, r3, #7
 8004182:	2b00      	cmp	r3, #0
 8004184:	d108      	bne.n	8004198 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004190:	4619      	mov	r1, r3
 8004192:	4610      	mov	r0, r2
 8004194:	f003 fdb2 	bl	8007cfc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b084      	sub	sp, #16
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	460b      	mov	r3, r1
 80041b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80041b6:	78fb      	ldrb	r3, [r7, #3]
 80041b8:	f003 020f 	and.w	r2, r3, #15
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d901      	bls.n	80041c8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e03a      	b.n	800423e <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	da0b      	bge.n	80041e8 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041d0:	78fb      	ldrb	r3, [r7, #3]
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	015b      	lsls	r3, r3, #5
 80041d8:	3328      	adds	r3, #40	; 0x28
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	4413      	add	r3, r2
 80041de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2201      	movs	r2, #1
 80041e4:	705a      	strb	r2, [r3, #1]
 80041e6:	e00b      	b.n	8004200 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041e8:	78fb      	ldrb	r3, [r7, #3]
 80041ea:	f003 0307 	and.w	r3, r3, #7
 80041ee:	015b      	lsls	r3, r3, #5
 80041f0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	4413      	add	r3, r2
 80041f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004206:	78fb      	ldrb	r3, [r7, #3]
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	b2da      	uxtb	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004218:	2b01      	cmp	r3, #1
 800421a:	d101      	bne.n	8004220 <HAL_PCD_EP_ClrStall+0x76>
 800421c:	2302      	movs	r3, #2
 800421e:	e00e      	b.n	800423e <HAL_PCD_EP_ClrStall+0x94>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68f9      	ldr	r1, [r7, #12]
 800422e:	4618      	mov	r0, r3
 8004230:	f003 fc9a 	bl	8007b68 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
	...

08004248 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004248:	b590      	push	{r4, r7, lr}
 800424a:	b089      	sub	sp, #36	; 0x24
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004250:	e282      	b.n	8004758 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800425a:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800425c:	8afb      	ldrh	r3, [r7, #22]
 800425e:	b2db      	uxtb	r3, r3
 8004260:	f003 030f 	and.w	r3, r3, #15
 8004264:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8004266:	7d7b      	ldrb	r3, [r7, #21]
 8004268:	2b00      	cmp	r3, #0
 800426a:	f040 8142 	bne.w	80044f2 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800426e:	8afb      	ldrh	r3, [r7, #22]
 8004270:	f003 0310 	and.w	r3, r3, #16
 8004274:	2b00      	cmp	r3, #0
 8004276:	d151      	bne.n	800431c <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	881b      	ldrh	r3, [r3, #0]
 800427e:	b29b      	uxth	r3, r3
 8004280:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004288:	b29c      	uxth	r4, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8004292:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004296:	b29b      	uxth	r3, r3
 8004298:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	3328      	adds	r3, #40	; 0x28
 800429e:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	461a      	mov	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	4413      	add	r3, r2
 80042b4:	3302      	adds	r3, #2
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6812      	ldr	r2, [r2, #0]
 80042bc:	4413      	add	r3, r2
 80042be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	695a      	ldr	r2, [r3, #20]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	69db      	ldr	r3, [r3, #28]
 80042d4:	441a      	add	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80042da:	2100      	movs	r1, #0
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f005 fb6b 	bl	80099b8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 8234 	beq.w	8004758 <PCD_EP_ISR_Handler+0x510>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f040 822f 	bne.w	8004758 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004300:	b2db      	uxtb	r3, r3
 8004302:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004306:	b2da      	uxtb	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	b292      	uxth	r2, r2
 800430e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800431a:	e21d      	b.n	8004758 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004322:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800432c:	8a7b      	ldrh	r3, [r7, #18]
 800432e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004332:	2b00      	cmp	r3, #0
 8004334:	d033      	beq.n	800439e <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800433e:	b29b      	uxth	r3, r3
 8004340:	461a      	mov	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	4413      	add	r3, r2
 800434a:	3306      	adds	r3, #6
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	6812      	ldr	r2, [r2, #0]
 8004352:	4413      	add	r3, r2
 8004354:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004358:	881b      	ldrh	r3, [r3, #0]
 800435a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6818      	ldr	r0, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f503 710c 	add.w	r1, r3, #560	; 0x230
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004374:	b29b      	uxth	r3, r3
 8004376:	f003 fd10 	bl	8007d9a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	881b      	ldrh	r3, [r3, #0]
 8004380:	b29a      	uxth	r2, r3
 8004382:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004386:	4013      	ands	r3, r2
 8004388:	b29c      	uxth	r4, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004392:	b292      	uxth	r2, r2
 8004394:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f005 fae4 	bl	8009964 <HAL_PCD_SetupStageCallback>
 800439c:	e1dc      	b.n	8004758 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800439e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f280 81d8 	bge.w	8004758 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80043b4:	4013      	ands	r3, r2
 80043b6:	b29c      	uxth	r4, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80043c0:	b292      	uxth	r2, r2
 80043c2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	461a      	mov	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	00db      	lsls	r3, r3, #3
 80043d6:	4413      	add	r3, r2
 80043d8:	3306      	adds	r3, #6
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	6812      	ldr	r2, [r2, #0]
 80043e0:	4413      	add	r3, r2
 80043e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043e6:	881b      	ldrh	r3, [r3, #0]
 80043e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d019      	beq.n	800442c <PCD_EP_ISR_Handler+0x1e4>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d015      	beq.n	800442c <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6818      	ldr	r0, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6959      	ldr	r1, [r3, #20]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004410:	b29b      	uxth	r3, r3
 8004412:	f003 fcc2 	bl	8007d9a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	695a      	ldr	r2, [r3, #20]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	441a      	add	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004424:	2100      	movs	r1, #0
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f005 faae 	bl	8009988 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	461c      	mov	r4, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800443a:	b29b      	uxth	r3, r3
 800443c:	441c      	add	r4, r3
 800443e:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8004442:	461c      	mov	r4, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10e      	bne.n	800446a <PCD_EP_ISR_Handler+0x222>
 800444c:	8823      	ldrh	r3, [r4, #0]
 800444e:	b29b      	uxth	r3, r3
 8004450:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004454:	b29b      	uxth	r3, r3
 8004456:	8023      	strh	r3, [r4, #0]
 8004458:	8823      	ldrh	r3, [r4, #0]
 800445a:	b29b      	uxth	r3, r3
 800445c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004460:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004464:	b29b      	uxth	r3, r3
 8004466:	8023      	strh	r3, [r4, #0]
 8004468:	e02d      	b.n	80044c6 <PCD_EP_ISR_Handler+0x27e>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	2b3e      	cmp	r3, #62	; 0x3e
 8004470:	d812      	bhi.n	8004498 <PCD_EP_ISR_Handler+0x250>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	085b      	lsrs	r3, r3, #1
 8004478:	61bb      	str	r3, [r7, #24]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <PCD_EP_ISR_Handler+0x244>
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	3301      	adds	r3, #1
 800448a:	61bb      	str	r3, [r7, #24]
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	b29b      	uxth	r3, r3
 8004490:	029b      	lsls	r3, r3, #10
 8004492:	b29b      	uxth	r3, r3
 8004494:	8023      	strh	r3, [r4, #0]
 8004496:	e016      	b.n	80044c6 <PCD_EP_ISR_Handler+0x27e>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	095b      	lsrs	r3, r3, #5
 800449e:	61bb      	str	r3, [r7, #24]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	f003 031f 	and.w	r3, r3, #31
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d102      	bne.n	80044b2 <PCD_EP_ISR_Handler+0x26a>
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	61bb      	str	r3, [r7, #24]
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	029b      	lsls	r3, r3, #10
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d6:	b29c      	uxth	r4, r3
 80044d8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80044dc:	b29c      	uxth	r4, r3
 80044de:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80044e2:	b29c      	uxth	r4, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	4ba2      	ldr	r3, [pc, #648]	; (8004774 <PCD_EP_ISR_Handler+0x52c>)
 80044ea:	4323      	orrs	r3, r4
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	8013      	strh	r3, [r2, #0]
 80044f0:	e132      	b.n	8004758 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	461a      	mov	r2, r3
 80044f8:	7d7b      	ldrb	r3, [r7, #21]
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	881b      	ldrh	r3, [r3, #0]
 8004500:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004502:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004506:	2b00      	cmp	r3, #0
 8004508:	f280 80d1 	bge.w	80046ae <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	461a      	mov	r2, r3
 8004512:	7d7b      	ldrb	r3, [r7, #21]
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	881b      	ldrh	r3, [r3, #0]
 800451a:	b29a      	uxth	r2, r3
 800451c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004520:	4013      	ands	r3, r2
 8004522:	b29c      	uxth	r4, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	461a      	mov	r2, r3
 800452a:	7d7b      	ldrb	r3, [r7, #21]
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4413      	add	r3, r2
 8004530:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004534:	b292      	uxth	r2, r2
 8004536:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004538:	7d7b      	ldrb	r3, [r7, #21]
 800453a:	015b      	lsls	r3, r3, #5
 800453c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	4413      	add	r3, r2
 8004544:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	7b1b      	ldrb	r3, [r3, #12]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d121      	bne.n	8004592 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004556:	b29b      	uxth	r3, r3
 8004558:	461a      	mov	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	4413      	add	r3, r2
 8004562:	3306      	adds	r3, #6
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6812      	ldr	r2, [r2, #0]
 800456a:	4413      	add	r3, r2
 800456c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004576:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8004578:	8bfb      	ldrh	r3, [r7, #30]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d072      	beq.n	8004664 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6818      	ldr	r0, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6959      	ldr	r1, [r3, #20]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	88da      	ldrh	r2, [r3, #6]
 800458a:	8bfb      	ldrh	r3, [r7, #30]
 800458c:	f003 fc05 	bl	8007d9a <USB_ReadPMA>
 8004590:	e068      	b.n	8004664 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	461a      	mov	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4413      	add	r3, r2
 80045a0:	881b      	ldrh	r3, [r3, #0]
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d021      	beq.n	80045f0 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	461a      	mov	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	4413      	add	r3, r2
 80045c0:	3302      	adds	r3, #2
 80045c2:	005b      	lsls	r3, r3, #1
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6812      	ldr	r2, [r2, #0]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045ce:	881b      	ldrh	r3, [r3, #0]
 80045d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045d4:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80045d6:	8bfb      	ldrh	r3, [r7, #30]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d02a      	beq.n	8004632 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6818      	ldr	r0, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6959      	ldr	r1, [r3, #20]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	891a      	ldrh	r2, [r3, #8]
 80045e8:	8bfb      	ldrh	r3, [r7, #30]
 80045ea:	f003 fbd6 	bl	8007d9a <USB_ReadPMA>
 80045ee:	e020      	b.n	8004632 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	461a      	mov	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	00db      	lsls	r3, r3, #3
 8004602:	4413      	add	r3, r2
 8004604:	3306      	adds	r3, #6
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	6812      	ldr	r2, [r2, #0]
 800460c:	4413      	add	r3, r2
 800460e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004612:	881b      	ldrh	r3, [r3, #0]
 8004614:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004618:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800461a:	8bfb      	ldrh	r3, [r7, #30]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d008      	beq.n	8004632 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6818      	ldr	r0, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6959      	ldr	r1, [r3, #20]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	895a      	ldrh	r2, [r3, #10]
 800462c:	8bfb      	ldrh	r3, [r7, #30]
 800462e:	f003 fbb4 	bl	8007d9a <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	461a      	mov	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4413      	add	r3, r2
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	b29b      	uxth	r3, r3
 8004644:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464c:	b29c      	uxth	r4, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	461a      	mov	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	441a      	add	r2, r3
 800465c:	4b46      	ldr	r3, [pc, #280]	; (8004778 <PCD_EP_ISR_Handler+0x530>)
 800465e:	4323      	orrs	r3, r4
 8004660:	b29b      	uxth	r3, r3
 8004662:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	69da      	ldr	r2, [r3, #28]
 8004668:	8bfb      	ldrh	r3, [r7, #30]
 800466a:	441a      	add	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	695a      	ldr	r2, [r3, #20]
 8004674:	8bfb      	ldrh	r3, [r7, #30]
 8004676:	441a      	add	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d004      	beq.n	800468e <PCD_EP_ISR_Handler+0x446>
 8004684:	8bfa      	ldrh	r2, [r7, #30]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	429a      	cmp	r2, r3
 800468c:	d206      	bcs.n	800469c <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	4619      	mov	r1, r3
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f005 f977 	bl	8009988 <HAL_PCD_DataOutStageCallback>
 800469a:	e008      	b.n	80046ae <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	7819      	ldrb	r1, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	695a      	ldr	r2, [r3, #20]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f7ff fc9d 	bl	8003fe8 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80046ae:	8a7b      	ldrh	r3, [r7, #18]
 80046b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d04f      	beq.n	8004758 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 80046b8:	7d7b      	ldrb	r3, [r7, #21]
 80046ba:	015b      	lsls	r3, r3, #5
 80046bc:	3328      	adds	r3, #40	; 0x28
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	4413      	add	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	461a      	mov	r2, r3
 80046ca:	7d7b      	ldrb	r3, [r7, #21]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80046d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046dc:	b29c      	uxth	r4, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	461a      	mov	r2, r3
 80046e4:	7d7b      	ldrb	r3, [r7, #21]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	441a      	add	r2, r3
 80046ea:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80046ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046fe:	b29b      	uxth	r3, r3
 8004700:	461a      	mov	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	4413      	add	r3, r2
 800470a:	3302      	adds	r3, #2
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	6812      	ldr	r2, [r2, #0]
 8004712:	4413      	add	r3, r2
 8004714:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004718:	881b      	ldrh	r3, [r3, #0]
 800471a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	695a      	ldr	r2, [r3, #20]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	441a      	add	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d106      	bne.n	8004746 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	4619      	mov	r1, r3
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f005 f93a 	bl	80099b8 <HAL_PCD_DataInStageCallback>
 8004744:	e008      	b.n	8004758 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	7819      	ldrb	r1, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	695a      	ldr	r2, [r3, #20]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7ff fc96 	bl	8004084 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004760:	b29b      	uxth	r3, r3
 8004762:	b21b      	sxth	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	f6ff ad74 	blt.w	8004252 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3724      	adds	r7, #36	; 0x24
 8004770:	46bd      	mov	sp, r7
 8004772:	bd90      	pop	{r4, r7, pc}
 8004774:	ffff8080 	.word	0xffff8080
 8004778:	ffff80c0 	.word	0xffff80c0

0800477c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 800477c:	b480      	push	{r7}
 800477e:	b087      	sub	sp, #28
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	607b      	str	r3, [r7, #4]
 8004786:	460b      	mov	r3, r1
 8004788:	817b      	strh	r3, [r7, #10]
 800478a:	4613      	mov	r3, r2
 800478c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800478e:	897b      	ldrh	r3, [r7, #10]
 8004790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004794:	b29b      	uxth	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d008      	beq.n	80047ac <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800479a:	897b      	ldrh	r3, [r7, #10]
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	015b      	lsls	r3, r3, #5
 80047a2:	3328      	adds	r3, #40	; 0x28
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	4413      	add	r3, r2
 80047a8:	617b      	str	r3, [r7, #20]
 80047aa:	e006      	b.n	80047ba <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80047ac:	897b      	ldrh	r3, [r7, #10]
 80047ae:	015b      	lsls	r3, r3, #5
 80047b0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	4413      	add	r3, r2
 80047b8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80047ba:	893b      	ldrh	r3, [r7, #8]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d107      	bne.n	80047d0 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	2200      	movs	r2, #0
 80047c4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	80da      	strh	r2, [r3, #6]
 80047ce:	e00b      	b.n	80047e8 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	2201      	movs	r2, #1
 80047d4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	b29a      	uxth	r2, r3
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	0c1b      	lsrs	r3, r3, #16
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	371c      	adds	r7, #28
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bc80      	pop	{r7}
 80047f2:	4770      	bx	lr

080047f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e26c      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 8087 	beq.w	8004922 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004814:	4b92      	ldr	r3, [pc, #584]	; (8004a60 <HAL_RCC_OscConfig+0x26c>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f003 030c 	and.w	r3, r3, #12
 800481c:	2b04      	cmp	r3, #4
 800481e:	d00c      	beq.n	800483a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004820:	4b8f      	ldr	r3, [pc, #572]	; (8004a60 <HAL_RCC_OscConfig+0x26c>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f003 030c 	and.w	r3, r3, #12
 8004828:	2b08      	cmp	r3, #8
 800482a:	d112      	bne.n	8004852 <HAL_RCC_OscConfig+0x5e>
 800482c:	4b8c      	ldr	r3, [pc, #560]	; (8004a60 <HAL_RCC_OscConfig+0x26c>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004838:	d10b      	bne.n	8004852 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800483a:	4b89      	ldr	r3, [pc, #548]	; (8004a60 <HAL_RCC_OscConfig+0x26c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d06c      	beq.n	8004920 <HAL_RCC_OscConfig+0x12c>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d168      	bne.n	8004920 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e246      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800485a:	d106      	bne.n	800486a <HAL_RCC_OscConfig+0x76>
 800485c:	4b80      	ldr	r3, [pc, #512]	; (8004a60 <HAL_RCC_OscConfig+0x26c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a7f      	ldr	r2, [pc, #508]	; (8004a60 <HAL_RCC_OscConfig+0x26c>)
 8004862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004866:	6013      	str	r3, [r2, #0]
 8004868:	e02e      	b.n	80048c8 <HAL_RCC_OscConfig+0xd4>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10c      	bne.n	800488c <HAL_RCC_OscConfig+0x98>
 8004872:	4b7b      	ldr	r3, [pc, #492]	; (8004a60 <HAL_RCC_OscConfig+0x26c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a7a      	ldr	r2, [pc, #488]	; (8004a60 <HAL_RCC_OscConfig+0x26c>)
 8004878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	4b78      	ldr	r3, [pc, #480]	; (8004a60 <HAL_RCC_OscConfig+0x26c>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a77      	ldr	r2, [pc, #476]	; (8004a60 <HAL_RCC_OscConfig+0x26c>)
 8004884:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004888:	6013      	str	r3, [r2, #0]
 800488a:	e01d      	b.n	80048c8 <HAL_RCC_OscConfig+0xd4>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004894:	d10c      	bne.n	80048b0 <HAL_RCC_OscConfig+0xbc>
 8004896:	4b72      	ldr	r3, [pc, #456]	; (8004a60 <HAL_RCC_OscConfig+0x26c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a71      	ldr	r2, [pc, #452]	; (8004a60 <HAL_RCC_OscConfig+0x26c>)
 800489c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048a0:	6013      	str	r3, [r2, #0]
 80048a2:	4b6f      	ldr	r3, [pc, #444]	; (8004a60 <HAL_RCC_OscConfig+0x26c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a6e      	ldr	r2, [pc, #440]	; (8004a60 <HAL_RCC_OscConfig+0x26c>)
 80048a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ac:	6013      	str	r3, [r2, #0]
 80048ae:	e00b      	b.n	80048c8 <HAL_RCC_OscConfig+0xd4>
 80048b0:	4b6b      	ldr	r3, [pc, #428]	; (8004a60 <HAL_RCC_OscConfig+0x26c>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a6a      	ldr	r2, [pc, #424]	; (8004a60 <HAL_RCC_OscConfig+0x26c>)
 80048b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ba:	6013      	str	r3, [r2, #0]
 80048bc:	4b68      	ldr	r3, [pc, #416]	; (8004a60 <HAL_RCC_OscConfig+0x26c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a67      	ldr	r2, [pc, #412]	; (8004a60 <HAL_RCC_OscConfig+0x26c>)
 80048c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d013      	beq.n	80048f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d0:	f7fe fa6a 	bl	8002da8 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048d8:	f7fe fa66 	bl	8002da8 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b64      	cmp	r3, #100	; 0x64
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e1fa      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ea:	4b5d      	ldr	r3, [pc, #372]	; (8004a60 <HAL_RCC_OscConfig+0x26c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0f0      	beq.n	80048d8 <HAL_RCC_OscConfig+0xe4>
 80048f6:	e014      	b.n	8004922 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f8:	f7fe fa56 	bl	8002da8 <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048fe:	e008      	b.n	8004912 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004900:	f7fe fa52 	bl	8002da8 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b64      	cmp	r3, #100	; 0x64
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e1e6      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004912:	4b53      	ldr	r3, [pc, #332]	; (8004a60 <HAL_RCC_OscConfig+0x26c>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1f0      	bne.n	8004900 <HAL_RCC_OscConfig+0x10c>
 800491e:	e000      	b.n	8004922 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004920:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d063      	beq.n	80049f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800492e:	4b4c      	ldr	r3, [pc, #304]	; (8004a60 <HAL_RCC_OscConfig+0x26c>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f003 030c 	and.w	r3, r3, #12
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00b      	beq.n	8004952 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800493a:	4b49      	ldr	r3, [pc, #292]	; (8004a60 <HAL_RCC_OscConfig+0x26c>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f003 030c 	and.w	r3, r3, #12
 8004942:	2b08      	cmp	r3, #8
 8004944:	d11c      	bne.n	8004980 <HAL_RCC_OscConfig+0x18c>
 8004946:	4b46      	ldr	r3, [pc, #280]	; (8004a60 <HAL_RCC_OscConfig+0x26c>)
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d116      	bne.n	8004980 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004952:	4b43      	ldr	r3, [pc, #268]	; (8004a60 <HAL_RCC_OscConfig+0x26c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d005      	beq.n	800496a <HAL_RCC_OscConfig+0x176>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d001      	beq.n	800496a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e1ba      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800496a:	4b3d      	ldr	r3, [pc, #244]	; (8004a60 <HAL_RCC_OscConfig+0x26c>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	4939      	ldr	r1, [pc, #228]	; (8004a60 <HAL_RCC_OscConfig+0x26c>)
 800497a:	4313      	orrs	r3, r2
 800497c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800497e:	e03a      	b.n	80049f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d020      	beq.n	80049ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004988:	4b36      	ldr	r3, [pc, #216]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 800498a:	2201      	movs	r2, #1
 800498c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498e:	f7fe fa0b 	bl	8002da8 <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004994:	e008      	b.n	80049a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004996:	f7fe fa07 	bl	8002da8 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e19b      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049a8:	4b2d      	ldr	r3, [pc, #180]	; (8004a60 <HAL_RCC_OscConfig+0x26c>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d0f0      	beq.n	8004996 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049b4:	4b2a      	ldr	r3, [pc, #168]	; (8004a60 <HAL_RCC_OscConfig+0x26c>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	4927      	ldr	r1, [pc, #156]	; (8004a60 <HAL_RCC_OscConfig+0x26c>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	600b      	str	r3, [r1, #0]
 80049c8:	e015      	b.n	80049f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049ca:	4b26      	ldr	r3, [pc, #152]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d0:	f7fe f9ea 	bl	8002da8 <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049d6:	e008      	b.n	80049ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049d8:	f7fe f9e6 	bl	8002da8 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e17a      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ea:	4b1d      	ldr	r3, [pc, #116]	; (8004a60 <HAL_RCC_OscConfig+0x26c>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1f0      	bne.n	80049d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0308 	and.w	r3, r3, #8
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d03a      	beq.n	8004a78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d019      	beq.n	8004a3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a0a:	4b17      	ldr	r3, [pc, #92]	; (8004a68 <HAL_RCC_OscConfig+0x274>)
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a10:	f7fe f9ca 	bl	8002da8 <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a16:	e008      	b.n	8004a2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a18:	f7fe f9c6 	bl	8002da8 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e15a      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a2a:	4b0d      	ldr	r3, [pc, #52]	; (8004a60 <HAL_RCC_OscConfig+0x26c>)
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0f0      	beq.n	8004a18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004a36:	2001      	movs	r0, #1
 8004a38:	f000 fb0a 	bl	8005050 <RCC_Delay>
 8004a3c:	e01c      	b.n	8004a78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a3e:	4b0a      	ldr	r3, [pc, #40]	; (8004a68 <HAL_RCC_OscConfig+0x274>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a44:	f7fe f9b0 	bl	8002da8 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a4a:	e00f      	b.n	8004a6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a4c:	f7fe f9ac 	bl	8002da8 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d908      	bls.n	8004a6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e140      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4ec>
 8004a5e:	bf00      	nop
 8004a60:	40021000 	.word	0x40021000
 8004a64:	42420000 	.word	0x42420000
 8004a68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a6c:	4b9e      	ldr	r3, [pc, #632]	; (8004ce8 <HAL_RCC_OscConfig+0x4f4>)
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1e9      	bne.n	8004a4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f000 80a6 	beq.w	8004bd2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a86:	2300      	movs	r3, #0
 8004a88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a8a:	4b97      	ldr	r3, [pc, #604]	; (8004ce8 <HAL_RCC_OscConfig+0x4f4>)
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10d      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a96:	4b94      	ldr	r3, [pc, #592]	; (8004ce8 <HAL_RCC_OscConfig+0x4f4>)
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	4a93      	ldr	r2, [pc, #588]	; (8004ce8 <HAL_RCC_OscConfig+0x4f4>)
 8004a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa0:	61d3      	str	r3, [r2, #28]
 8004aa2:	4b91      	ldr	r3, [pc, #580]	; (8004ce8 <HAL_RCC_OscConfig+0x4f4>)
 8004aa4:	69db      	ldr	r3, [r3, #28]
 8004aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aaa:	60bb      	str	r3, [r7, #8]
 8004aac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ab2:	4b8e      	ldr	r3, [pc, #568]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d118      	bne.n	8004af0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004abe:	4b8b      	ldr	r3, [pc, #556]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a8a      	ldr	r2, [pc, #552]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ac8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aca:	f7fe f96d 	bl	8002da8 <HAL_GetTick>
 8004ace:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad0:	e008      	b.n	8004ae4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ad2:	f7fe f969 	bl	8002da8 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b64      	cmp	r3, #100	; 0x64
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e0fd      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ae4:	4b81      	ldr	r3, [pc, #516]	; (8004cec <HAL_RCC_OscConfig+0x4f8>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0f0      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d106      	bne.n	8004b06 <HAL_RCC_OscConfig+0x312>
 8004af8:	4b7b      	ldr	r3, [pc, #492]	; (8004ce8 <HAL_RCC_OscConfig+0x4f4>)
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	4a7a      	ldr	r2, [pc, #488]	; (8004ce8 <HAL_RCC_OscConfig+0x4f4>)
 8004afe:	f043 0301 	orr.w	r3, r3, #1
 8004b02:	6213      	str	r3, [r2, #32]
 8004b04:	e02d      	b.n	8004b62 <HAL_RCC_OscConfig+0x36e>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10c      	bne.n	8004b28 <HAL_RCC_OscConfig+0x334>
 8004b0e:	4b76      	ldr	r3, [pc, #472]	; (8004ce8 <HAL_RCC_OscConfig+0x4f4>)
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	4a75      	ldr	r2, [pc, #468]	; (8004ce8 <HAL_RCC_OscConfig+0x4f4>)
 8004b14:	f023 0301 	bic.w	r3, r3, #1
 8004b18:	6213      	str	r3, [r2, #32]
 8004b1a:	4b73      	ldr	r3, [pc, #460]	; (8004ce8 <HAL_RCC_OscConfig+0x4f4>)
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	4a72      	ldr	r2, [pc, #456]	; (8004ce8 <HAL_RCC_OscConfig+0x4f4>)
 8004b20:	f023 0304 	bic.w	r3, r3, #4
 8004b24:	6213      	str	r3, [r2, #32]
 8004b26:	e01c      	b.n	8004b62 <HAL_RCC_OscConfig+0x36e>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	2b05      	cmp	r3, #5
 8004b2e:	d10c      	bne.n	8004b4a <HAL_RCC_OscConfig+0x356>
 8004b30:	4b6d      	ldr	r3, [pc, #436]	; (8004ce8 <HAL_RCC_OscConfig+0x4f4>)
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	4a6c      	ldr	r2, [pc, #432]	; (8004ce8 <HAL_RCC_OscConfig+0x4f4>)
 8004b36:	f043 0304 	orr.w	r3, r3, #4
 8004b3a:	6213      	str	r3, [r2, #32]
 8004b3c:	4b6a      	ldr	r3, [pc, #424]	; (8004ce8 <HAL_RCC_OscConfig+0x4f4>)
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	4a69      	ldr	r2, [pc, #420]	; (8004ce8 <HAL_RCC_OscConfig+0x4f4>)
 8004b42:	f043 0301 	orr.w	r3, r3, #1
 8004b46:	6213      	str	r3, [r2, #32]
 8004b48:	e00b      	b.n	8004b62 <HAL_RCC_OscConfig+0x36e>
 8004b4a:	4b67      	ldr	r3, [pc, #412]	; (8004ce8 <HAL_RCC_OscConfig+0x4f4>)
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	4a66      	ldr	r2, [pc, #408]	; (8004ce8 <HAL_RCC_OscConfig+0x4f4>)
 8004b50:	f023 0301 	bic.w	r3, r3, #1
 8004b54:	6213      	str	r3, [r2, #32]
 8004b56:	4b64      	ldr	r3, [pc, #400]	; (8004ce8 <HAL_RCC_OscConfig+0x4f4>)
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	4a63      	ldr	r2, [pc, #396]	; (8004ce8 <HAL_RCC_OscConfig+0x4f4>)
 8004b5c:	f023 0304 	bic.w	r3, r3, #4
 8004b60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d015      	beq.n	8004b96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b6a:	f7fe f91d 	bl	8002da8 <HAL_GetTick>
 8004b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b70:	e00a      	b.n	8004b88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b72:	f7fe f919 	bl	8002da8 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e0ab      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b88:	4b57      	ldr	r3, [pc, #348]	; (8004ce8 <HAL_RCC_OscConfig+0x4f4>)
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d0ee      	beq.n	8004b72 <HAL_RCC_OscConfig+0x37e>
 8004b94:	e014      	b.n	8004bc0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b96:	f7fe f907 	bl	8002da8 <HAL_GetTick>
 8004b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b9c:	e00a      	b.n	8004bb4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b9e:	f7fe f903 	bl	8002da8 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d901      	bls.n	8004bb4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e095      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bb4:	4b4c      	ldr	r3, [pc, #304]	; (8004ce8 <HAL_RCC_OscConfig+0x4f4>)
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1ee      	bne.n	8004b9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004bc0:	7dfb      	ldrb	r3, [r7, #23]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d105      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bc6:	4b48      	ldr	r3, [pc, #288]	; (8004ce8 <HAL_RCC_OscConfig+0x4f4>)
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	4a47      	ldr	r2, [pc, #284]	; (8004ce8 <HAL_RCC_OscConfig+0x4f4>)
 8004bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bd0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 8081 	beq.w	8004cde <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bdc:	4b42      	ldr	r3, [pc, #264]	; (8004ce8 <HAL_RCC_OscConfig+0x4f4>)
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f003 030c 	and.w	r3, r3, #12
 8004be4:	2b08      	cmp	r3, #8
 8004be6:	d061      	beq.n	8004cac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	69db      	ldr	r3, [r3, #28]
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d146      	bne.n	8004c7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bf0:	4b3f      	ldr	r3, [pc, #252]	; (8004cf0 <HAL_RCC_OscConfig+0x4fc>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf6:	f7fe f8d7 	bl	8002da8 <HAL_GetTick>
 8004bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bfc:	e008      	b.n	8004c10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bfe:	f7fe f8d3 	bl	8002da8 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e067      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c10:	4b35      	ldr	r3, [pc, #212]	; (8004ce8 <HAL_RCC_OscConfig+0x4f4>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1f0      	bne.n	8004bfe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a1b      	ldr	r3, [r3, #32]
 8004c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c24:	d108      	bne.n	8004c38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004c26:	4b30      	ldr	r3, [pc, #192]	; (8004ce8 <HAL_RCC_OscConfig+0x4f4>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	492d      	ldr	r1, [pc, #180]	; (8004ce8 <HAL_RCC_OscConfig+0x4f4>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c38:	4b2b      	ldr	r3, [pc, #172]	; (8004ce8 <HAL_RCC_OscConfig+0x4f4>)
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a19      	ldr	r1, [r3, #32]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	430b      	orrs	r3, r1
 8004c4a:	4927      	ldr	r1, [pc, #156]	; (8004ce8 <HAL_RCC_OscConfig+0x4f4>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c50:	4b27      	ldr	r3, [pc, #156]	; (8004cf0 <HAL_RCC_OscConfig+0x4fc>)
 8004c52:	2201      	movs	r2, #1
 8004c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c56:	f7fe f8a7 	bl	8002da8 <HAL_GetTick>
 8004c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c5c:	e008      	b.n	8004c70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c5e:	f7fe f8a3 	bl	8002da8 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d901      	bls.n	8004c70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e037      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c70:	4b1d      	ldr	r3, [pc, #116]	; (8004ce8 <HAL_RCC_OscConfig+0x4f4>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0f0      	beq.n	8004c5e <HAL_RCC_OscConfig+0x46a>
 8004c7c:	e02f      	b.n	8004cde <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c7e:	4b1c      	ldr	r3, [pc, #112]	; (8004cf0 <HAL_RCC_OscConfig+0x4fc>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c84:	f7fe f890 	bl	8002da8 <HAL_GetTick>
 8004c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c8c:	f7fe f88c 	bl	8002da8 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e020      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c9e:	4b12      	ldr	r3, [pc, #72]	; (8004ce8 <HAL_RCC_OscConfig+0x4f4>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1f0      	bne.n	8004c8c <HAL_RCC_OscConfig+0x498>
 8004caa:	e018      	b.n	8004cde <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d101      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e013      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004cb8:	4b0b      	ldr	r3, [pc, #44]	; (8004ce8 <HAL_RCC_OscConfig+0x4f4>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d106      	bne.n	8004cda <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d001      	beq.n	8004cde <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e000      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	40007000 	.word	0x40007000
 8004cf0:	42420060 	.word	0x42420060

08004cf4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e0d0      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d08:	4b6a      	ldr	r3, [pc, #424]	; (8004eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0307 	and.w	r3, r3, #7
 8004d10:	683a      	ldr	r2, [r7, #0]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d910      	bls.n	8004d38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d16:	4b67      	ldr	r3, [pc, #412]	; (8004eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f023 0207 	bic.w	r2, r3, #7
 8004d1e:	4965      	ldr	r1, [pc, #404]	; (8004eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d26:	4b63      	ldr	r3, [pc, #396]	; (8004eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0307 	and.w	r3, r3, #7
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d001      	beq.n	8004d38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e0b8      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d020      	beq.n	8004d86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d005      	beq.n	8004d5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d50:	4b59      	ldr	r3, [pc, #356]	; (8004eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	4a58      	ldr	r2, [pc, #352]	; (8004eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004d5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0308 	and.w	r3, r3, #8
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d005      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d68:	4b53      	ldr	r3, [pc, #332]	; (8004eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	4a52      	ldr	r2, [pc, #328]	; (8004eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004d72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d74:	4b50      	ldr	r3, [pc, #320]	; (8004eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	494d      	ldr	r1, [pc, #308]	; (8004eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d040      	beq.n	8004e14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d107      	bne.n	8004daa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d9a:	4b47      	ldr	r3, [pc, #284]	; (8004eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d115      	bne.n	8004dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e07f      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d107      	bne.n	8004dc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004db2:	4b41      	ldr	r3, [pc, #260]	; (8004eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d109      	bne.n	8004dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e073      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dc2:	4b3d      	ldr	r3, [pc, #244]	; (8004eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e06b      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dd2:	4b39      	ldr	r3, [pc, #228]	; (8004eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f023 0203 	bic.w	r2, r3, #3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	4936      	ldr	r1, [pc, #216]	; (8004eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004de4:	f7fd ffe0 	bl	8002da8 <HAL_GetTick>
 8004de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dea:	e00a      	b.n	8004e02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dec:	f7fd ffdc 	bl	8002da8 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e053      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e02:	4b2d      	ldr	r3, [pc, #180]	; (8004eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f003 020c 	and.w	r2, r3, #12
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d1eb      	bne.n	8004dec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e14:	4b27      	ldr	r3, [pc, #156]	; (8004eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0307 	and.w	r3, r3, #7
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d210      	bcs.n	8004e44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e22:	4b24      	ldr	r3, [pc, #144]	; (8004eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f023 0207 	bic.w	r2, r3, #7
 8004e2a:	4922      	ldr	r1, [pc, #136]	; (8004eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e32:	4b20      	ldr	r3, [pc, #128]	; (8004eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0307 	and.w	r3, r3, #7
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d001      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e032      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d008      	beq.n	8004e62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e50:	4b19      	ldr	r3, [pc, #100]	; (8004eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	4916      	ldr	r1, [pc, #88]	; (8004eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0308 	and.w	r3, r3, #8
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d009      	beq.n	8004e82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e6e:	4b12      	ldr	r3, [pc, #72]	; (8004eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	490e      	ldr	r1, [pc, #56]	; (8004eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e82:	f000 f821 	bl	8004ec8 <HAL_RCC_GetSysClockFreq>
 8004e86:	4601      	mov	r1, r0
 8004e88:	4b0b      	ldr	r3, [pc, #44]	; (8004eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	091b      	lsrs	r3, r3, #4
 8004e8e:	f003 030f 	and.w	r3, r3, #15
 8004e92:	4a0a      	ldr	r2, [pc, #40]	; (8004ebc <HAL_RCC_ClockConfig+0x1c8>)
 8004e94:	5cd3      	ldrb	r3, [r2, r3]
 8004e96:	fa21 f303 	lsr.w	r3, r1, r3
 8004e9a:	4a09      	ldr	r2, [pc, #36]	; (8004ec0 <HAL_RCC_ClockConfig+0x1cc>)
 8004e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e9e:	4b09      	ldr	r3, [pc, #36]	; (8004ec4 <HAL_RCC_ClockConfig+0x1d0>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fd fe42 	bl	8002b2c <HAL_InitTick>

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	40022000 	.word	0x40022000
 8004eb8:	40021000 	.word	0x40021000
 8004ebc:	08009f10 	.word	0x08009f10
 8004ec0:	20000018 	.word	0x20000018
 8004ec4:	2000001c 	.word	0x2000001c

08004ec8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ec8:	b490      	push	{r4, r7}
 8004eca:	b08a      	sub	sp, #40	; 0x28
 8004ecc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004ece:	4b2a      	ldr	r3, [pc, #168]	; (8004f78 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004ed0:	1d3c      	adds	r4, r7, #4
 8004ed2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ed4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004ed8:	4b28      	ldr	r3, [pc, #160]	; (8004f7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004eda:	881b      	ldrh	r3, [r3, #0]
 8004edc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61fb      	str	r3, [r7, #28]
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	61bb      	str	r3, [r7, #24]
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eea:	2300      	movs	r3, #0
 8004eec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004ef2:	4b23      	ldr	r3, [pc, #140]	; (8004f80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	f003 030c 	and.w	r3, r3, #12
 8004efe:	2b04      	cmp	r3, #4
 8004f00:	d002      	beq.n	8004f08 <HAL_RCC_GetSysClockFreq+0x40>
 8004f02:	2b08      	cmp	r3, #8
 8004f04:	d003      	beq.n	8004f0e <HAL_RCC_GetSysClockFreq+0x46>
 8004f06:	e02d      	b.n	8004f64 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f08:	4b1e      	ldr	r3, [pc, #120]	; (8004f84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f0a:	623b      	str	r3, [r7, #32]
      break;
 8004f0c:	e02d      	b.n	8004f6a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	0c9b      	lsrs	r3, r3, #18
 8004f12:	f003 030f 	and.w	r3, r3, #15
 8004f16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004f20:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d013      	beq.n	8004f54 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f2c:	4b14      	ldr	r3, [pc, #80]	; (8004f80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	0c5b      	lsrs	r3, r3, #17
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004f40:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	4a0f      	ldr	r2, [pc, #60]	; (8004f84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f46:	fb02 f203 	mul.w	r2, r2, r3
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f50:	627b      	str	r3, [r7, #36]	; 0x24
 8004f52:	e004      	b.n	8004f5e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	4a0c      	ldr	r2, [pc, #48]	; (8004f88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f58:	fb02 f303 	mul.w	r3, r2, r3
 8004f5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f60:	623b      	str	r3, [r7, #32]
      break;
 8004f62:	e002      	b.n	8004f6a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f64:	4b07      	ldr	r3, [pc, #28]	; (8004f84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f66:	623b      	str	r3, [r7, #32]
      break;
 8004f68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f6a:	6a3b      	ldr	r3, [r7, #32]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3728      	adds	r7, #40	; 0x28
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bc90      	pop	{r4, r7}
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	08009edc 	.word	0x08009edc
 8004f7c:	08009eec 	.word	0x08009eec
 8004f80:	40021000 	.word	0x40021000
 8004f84:	007a1200 	.word	0x007a1200
 8004f88:	003d0900 	.word	0x003d0900

08004f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f90:	4b02      	ldr	r3, [pc, #8]	; (8004f9c <HAL_RCC_GetHCLKFreq+0x10>)
 8004f92:	681b      	ldr	r3, [r3, #0]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bc80      	pop	{r7}
 8004f9a:	4770      	bx	lr
 8004f9c:	20000018 	.word	0x20000018

08004fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004fa4:	f7ff fff2 	bl	8004f8c <HAL_RCC_GetHCLKFreq>
 8004fa8:	4601      	mov	r1, r0
 8004faa:	4b05      	ldr	r3, [pc, #20]	; (8004fc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	0a1b      	lsrs	r3, r3, #8
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	4a03      	ldr	r2, [pc, #12]	; (8004fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fb6:	5cd3      	ldrb	r3, [r2, r3]
 8004fb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	40021000 	.word	0x40021000
 8004fc4:	08009f20 	.word	0x08009f20

08004fc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004fcc:	f7ff ffde 	bl	8004f8c <HAL_RCC_GetHCLKFreq>
 8004fd0:	4601      	mov	r1, r0
 8004fd2:	4b05      	ldr	r3, [pc, #20]	; (8004fe8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	0adb      	lsrs	r3, r3, #11
 8004fd8:	f003 0307 	and.w	r3, r3, #7
 8004fdc:	4a03      	ldr	r2, [pc, #12]	; (8004fec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fde:	5cd3      	ldrb	r3, [r2, r3]
 8004fe0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	08009f20 	.word	0x08009f20

08004ff0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	220f      	movs	r2, #15
 8004ffe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005000:	4b11      	ldr	r3, [pc, #68]	; (8005048 <HAL_RCC_GetClockConfig+0x58>)
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f003 0203 	and.w	r2, r3, #3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800500c:	4b0e      	ldr	r3, [pc, #56]	; (8005048 <HAL_RCC_GetClockConfig+0x58>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005018:	4b0b      	ldr	r3, [pc, #44]	; (8005048 <HAL_RCC_GetClockConfig+0x58>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005024:	4b08      	ldr	r3, [pc, #32]	; (8005048 <HAL_RCC_GetClockConfig+0x58>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	08db      	lsrs	r3, r3, #3
 800502a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005032:	4b06      	ldr	r3, [pc, #24]	; (800504c <HAL_RCC_GetClockConfig+0x5c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0207 	and.w	r2, r3, #7
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800503e:	bf00      	nop
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	bc80      	pop	{r7}
 8005046:	4770      	bx	lr
 8005048:	40021000 	.word	0x40021000
 800504c:	40022000 	.word	0x40022000

08005050 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005058:	4b0a      	ldr	r3, [pc, #40]	; (8005084 <RCC_Delay+0x34>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a0a      	ldr	r2, [pc, #40]	; (8005088 <RCC_Delay+0x38>)
 800505e:	fba2 2303 	umull	r2, r3, r2, r3
 8005062:	0a5b      	lsrs	r3, r3, #9
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	fb02 f303 	mul.w	r3, r2, r3
 800506a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800506c:	bf00      	nop
  }
  while (Delay --);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	1e5a      	subs	r2, r3, #1
 8005072:	60fa      	str	r2, [r7, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1f9      	bne.n	800506c <RCC_Delay+0x1c>
}
 8005078:	bf00      	nop
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	bc80      	pop	{r7}
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	20000018 	.word	0x20000018
 8005088:	10624dd3 	.word	0x10624dd3

0800508c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005094:	2300      	movs	r3, #0
 8005096:	613b      	str	r3, [r7, #16]
 8005098:	2300      	movs	r3, #0
 800509a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d07d      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80050a8:	2300      	movs	r3, #0
 80050aa:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050ac:	4b4f      	ldr	r3, [pc, #316]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10d      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050b8:	4b4c      	ldr	r3, [pc, #304]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	4a4b      	ldr	r2, [pc, #300]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c2:	61d3      	str	r3, [r2, #28]
 80050c4:	4b49      	ldr	r3, [pc, #292]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050c6:	69db      	ldr	r3, [r3, #28]
 80050c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050cc:	60bb      	str	r3, [r7, #8]
 80050ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050d0:	2301      	movs	r3, #1
 80050d2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050d4:	4b46      	ldr	r3, [pc, #280]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d118      	bne.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050e0:	4b43      	ldr	r3, [pc, #268]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a42      	ldr	r2, [pc, #264]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050ec:	f7fd fe5c 	bl	8002da8 <HAL_GetTick>
 80050f0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f2:	e008      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050f4:	f7fd fe58 	bl	8002da8 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b64      	cmp	r3, #100	; 0x64
 8005100:	d901      	bls.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e06d      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005106:	4b3a      	ldr	r3, [pc, #232]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510e:	2b00      	cmp	r3, #0
 8005110:	d0f0      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005112:	4b36      	ldr	r3, [pc, #216]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800511a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d02e      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	429a      	cmp	r2, r3
 800512e:	d027      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005130:	4b2e      	ldr	r3, [pc, #184]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005138:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800513a:	4b2e      	ldr	r3, [pc, #184]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800513c:	2201      	movs	r2, #1
 800513e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005140:	4b2c      	ldr	r3, [pc, #176]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005142:	2200      	movs	r2, #0
 8005144:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005146:	4a29      	ldr	r2, [pc, #164]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	2b00      	cmp	r3, #0
 8005154:	d014      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005156:	f7fd fe27 	bl	8002da8 <HAL_GetTick>
 800515a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800515c:	e00a      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800515e:	f7fd fe23 	bl	8002da8 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	f241 3288 	movw	r2, #5000	; 0x1388
 800516c:	4293      	cmp	r3, r2
 800516e:	d901      	bls.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e036      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005174:	4b1d      	ldr	r3, [pc, #116]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d0ee      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005180:	4b1a      	ldr	r3, [pc, #104]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	4917      	ldr	r1, [pc, #92]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800518e:	4313      	orrs	r3, r2
 8005190:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005192:	7dfb      	ldrb	r3, [r7, #23]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d105      	bne.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005198:	4b14      	ldr	r3, [pc, #80]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	4a13      	ldr	r2, [pc, #76]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800519e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d008      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051b0:	4b0e      	ldr	r3, [pc, #56]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	490b      	ldr	r1, [pc, #44]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0310 	and.w	r3, r3, #16
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d008      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051ce:	4b07      	ldr	r3, [pc, #28]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	4904      	ldr	r1, [pc, #16]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3718      	adds	r7, #24
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	40021000 	.word	0x40021000
 80051f0:	40007000 	.word	0x40007000
 80051f4:	42420440 	.word	0x42420440

080051f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e053      	b.n	80052b2 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d106      	bne.n	800522a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f7fd fb83 	bl	8002930 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2202      	movs	r2, #2
 800522e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005240:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685a      	ldr	r2, [r3, #4]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	431a      	orrs	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	431a      	orrs	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	431a      	orrs	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005266:	431a      	orrs	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	69db      	ldr	r3, [r3, #28]
 800526c:	431a      	orrs	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	ea42 0103 	orr.w	r1, r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	0c1a      	lsrs	r2, r3, #16
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f002 0204 	and.w	r2, r2, #4
 8005290:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	69da      	ldr	r2, [r3, #28]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b088      	sub	sp, #32
 80052be:	af00      	add	r7, sp, #0
 80052c0:	60f8      	str	r0, [r7, #12]
 80052c2:	60b9      	str	r1, [r7, #8]
 80052c4:	603b      	str	r3, [r7, #0]
 80052c6:	4613      	mov	r3, r2
 80052c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052ca:	2300      	movs	r3, #0
 80052cc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d101      	bne.n	80052dc <HAL_SPI_Transmit+0x22>
 80052d8:	2302      	movs	r3, #2
 80052da:	e11e      	b.n	800551a <HAL_SPI_Transmit+0x260>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052e4:	f7fd fd60 	bl	8002da8 <HAL_GetTick>
 80052e8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80052ea:	88fb      	ldrh	r3, [r7, #6]
 80052ec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d002      	beq.n	8005300 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80052fa:	2302      	movs	r3, #2
 80052fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80052fe:	e103      	b.n	8005508 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d002      	beq.n	800530c <HAL_SPI_Transmit+0x52>
 8005306:	88fb      	ldrh	r3, [r7, #6]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d102      	bne.n	8005312 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005310:	e0fa      	b.n	8005508 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2203      	movs	r2, #3
 8005316:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	88fa      	ldrh	r2, [r7, #6]
 800532a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	88fa      	ldrh	r2, [r7, #6]
 8005330:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005358:	d107      	bne.n	800536a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005368:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005374:	2b40      	cmp	r3, #64	; 0x40
 8005376:	d007      	beq.n	8005388 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005386:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005390:	d14b      	bne.n	800542a <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d002      	beq.n	80053a0 <HAL_SPI_Transmit+0xe6>
 800539a:	8afb      	ldrh	r3, [r7, #22]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d13e      	bne.n	800541e <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a4:	881a      	ldrh	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b0:	1c9a      	adds	r2, r3, #2
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	3b01      	subs	r3, #1
 80053be:	b29a      	uxth	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80053c4:	e02b      	b.n	800541e <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d112      	bne.n	80053fa <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d8:	881a      	ldrh	r2, [r3, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e4:	1c9a      	adds	r2, r3, #2
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	3b01      	subs	r3, #1
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	86da      	strh	r2, [r3, #54]	; 0x36
 80053f8:	e011      	b.n	800541e <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053fa:	f7fd fcd5 	bl	8002da8 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	429a      	cmp	r2, r3
 8005408:	d803      	bhi.n	8005412 <HAL_SPI_Transmit+0x158>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005410:	d102      	bne.n	8005418 <HAL_SPI_Transmit+0x15e>
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d102      	bne.n	800541e <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800541c:	e074      	b.n	8005508 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005422:	b29b      	uxth	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1ce      	bne.n	80053c6 <HAL_SPI_Transmit+0x10c>
 8005428:	e04c      	b.n	80054c4 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d002      	beq.n	8005438 <HAL_SPI_Transmit+0x17e>
 8005432:	8afb      	ldrh	r3, [r7, #22]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d140      	bne.n	80054ba <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	330c      	adds	r3, #12
 8005442:	7812      	ldrb	r2, [r2, #0]
 8005444:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544a:	1c5a      	adds	r2, r3, #1
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005454:	b29b      	uxth	r3, r3
 8005456:	3b01      	subs	r3, #1
 8005458:	b29a      	uxth	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800545e:	e02c      	b.n	80054ba <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b02      	cmp	r3, #2
 800546c:	d113      	bne.n	8005496 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	330c      	adds	r3, #12
 8005478:	7812      	ldrb	r2, [r2, #0]
 800547a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005480:	1c5a      	adds	r2, r3, #1
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800548a:	b29b      	uxth	r3, r3
 800548c:	3b01      	subs	r3, #1
 800548e:	b29a      	uxth	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	86da      	strh	r2, [r3, #54]	; 0x36
 8005494:	e011      	b.n	80054ba <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005496:	f7fd fc87 	bl	8002da8 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d803      	bhi.n	80054ae <HAL_SPI_Transmit+0x1f4>
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ac:	d102      	bne.n	80054b4 <HAL_SPI_Transmit+0x1fa>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d102      	bne.n	80054ba <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80054b8:	e026      	b.n	8005508 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054be:	b29b      	uxth	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1cd      	bne.n	8005460 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	6839      	ldr	r1, [r7, #0]
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 fb91 	bl	8005bf0 <SPI_EndRxTxTransaction>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2220      	movs	r2, #32
 80054d8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10a      	bne.n	80054f8 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054e2:	2300      	movs	r3, #0
 80054e4:	613b      	str	r3, [r7, #16]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	613b      	str	r3, [r7, #16]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	613b      	str	r3, [r7, #16]
 80054f6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d002      	beq.n	8005506 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	77fb      	strb	r3, [r7, #31]
 8005504:	e000      	b.n	8005508 <HAL_SPI_Transmit+0x24e>
  }

error:
 8005506:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005518:	7ffb      	ldrb	r3, [r7, #31]
}
 800551a:	4618      	mov	r0, r3
 800551c:	3720      	adds	r7, #32
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b088      	sub	sp, #32
 8005526:	af02      	add	r7, sp, #8
 8005528:	60f8      	str	r0, [r7, #12]
 800552a:	60b9      	str	r1, [r7, #8]
 800552c:	603b      	str	r3, [r7, #0]
 800552e:	4613      	mov	r3, r2
 8005530:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005532:	2300      	movs	r3, #0
 8005534:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800553e:	d112      	bne.n	8005566 <HAL_SPI_Receive+0x44>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d10e      	bne.n	8005566 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2204      	movs	r2, #4
 800554c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005550:	88fa      	ldrh	r2, [r7, #6]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	4613      	mov	r3, r2
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	68b9      	ldr	r1, [r7, #8]
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 f8e9 	bl	8005734 <HAL_SPI_TransmitReceive>
 8005562:	4603      	mov	r3, r0
 8005564:	e0e2      	b.n	800572c <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800556c:	2b01      	cmp	r3, #1
 800556e:	d101      	bne.n	8005574 <HAL_SPI_Receive+0x52>
 8005570:	2302      	movs	r3, #2
 8005572:	e0db      	b.n	800572c <HAL_SPI_Receive+0x20a>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800557c:	f7fd fc14 	bl	8002da8 <HAL_GetTick>
 8005580:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b01      	cmp	r3, #1
 800558c:	d002      	beq.n	8005594 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800558e:	2302      	movs	r3, #2
 8005590:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005592:	e0c2      	b.n	800571a <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d002      	beq.n	80055a0 <HAL_SPI_Receive+0x7e>
 800559a:	88fb      	ldrh	r3, [r7, #6]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d102      	bne.n	80055a6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055a4:	e0b9      	b.n	800571a <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2204      	movs	r2, #4
 80055aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	88fa      	ldrh	r2, [r7, #6]
 80055be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	88fa      	ldrh	r2, [r7, #6]
 80055c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ec:	d107      	bne.n	80055fe <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80055fc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005608:	2b40      	cmp	r3, #64	; 0x40
 800560a:	d007      	beq.n	800561c <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800561a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d162      	bne.n	80056ea <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005624:	e02e      	b.n	8005684 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b01      	cmp	r3, #1
 8005632:	d115      	bne.n	8005660 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f103 020c 	add.w	r2, r3, #12
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005640:	7812      	ldrb	r2, [r2, #0]
 8005642:	b2d2      	uxtb	r2, r2
 8005644:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564a:	1c5a      	adds	r2, r3, #1
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005654:	b29b      	uxth	r3, r3
 8005656:	3b01      	subs	r3, #1
 8005658:	b29a      	uxth	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800565e:	e011      	b.n	8005684 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005660:	f7fd fba2 	bl	8002da8 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	683a      	ldr	r2, [r7, #0]
 800566c:	429a      	cmp	r2, r3
 800566e:	d803      	bhi.n	8005678 <HAL_SPI_Receive+0x156>
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005676:	d102      	bne.n	800567e <HAL_SPI_Receive+0x15c>
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d102      	bne.n	8005684 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005682:	e04a      	b.n	800571a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005688:	b29b      	uxth	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1cb      	bne.n	8005626 <HAL_SPI_Receive+0x104>
 800568e:	e031      	b.n	80056f4 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	2b01      	cmp	r3, #1
 800569c:	d113      	bne.n	80056c6 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68da      	ldr	r2, [r3, #12]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a8:	b292      	uxth	r2, r2
 80056aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b0:	1c9a      	adds	r2, r3, #2
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	3b01      	subs	r3, #1
 80056be:	b29a      	uxth	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056c4:	e011      	b.n	80056ea <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056c6:	f7fd fb6f 	bl	8002da8 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d803      	bhi.n	80056de <HAL_SPI_Receive+0x1bc>
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056dc:	d102      	bne.n	80056e4 <HAL_SPI_Receive+0x1c2>
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d102      	bne.n	80056ea <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80056e8:	e017      	b.n	800571a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1cd      	bne.n	8005690 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	6839      	ldr	r1, [r7, #0]
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 fa27 	bl	8005b4c <SPI_EndRxTransaction>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d002      	beq.n	800570a <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2220      	movs	r2, #32
 8005708:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800570e:	2b00      	cmp	r3, #0
 8005710:	d002      	beq.n	8005718 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	75fb      	strb	r3, [r7, #23]
 8005716:	e000      	b.n	800571a <HAL_SPI_Receive+0x1f8>
  }

error :
 8005718:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800572a:	7dfb      	ldrb	r3, [r7, #23]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3718      	adds	r7, #24
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b08c      	sub	sp, #48	; 0x30
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
 8005740:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005742:	2301      	movs	r3, #1
 8005744:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005746:	2300      	movs	r3, #0
 8005748:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005752:	2b01      	cmp	r3, #1
 8005754:	d101      	bne.n	800575a <HAL_SPI_TransmitReceive+0x26>
 8005756:	2302      	movs	r3, #2
 8005758:	e18a      	b.n	8005a70 <HAL_SPI_TransmitReceive+0x33c>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005762:	f7fd fb21 	bl	8002da8 <HAL_GetTick>
 8005766:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800576e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005778:	887b      	ldrh	r3, [r7, #2]
 800577a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800577c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005780:	2b01      	cmp	r3, #1
 8005782:	d00f      	beq.n	80057a4 <HAL_SPI_TransmitReceive+0x70>
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800578a:	d107      	bne.n	800579c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d103      	bne.n	800579c <HAL_SPI_TransmitReceive+0x68>
 8005794:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005798:	2b04      	cmp	r3, #4
 800579a:	d003      	beq.n	80057a4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800579c:	2302      	movs	r3, #2
 800579e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80057a2:	e15b      	b.n	8005a5c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d005      	beq.n	80057b6 <HAL_SPI_TransmitReceive+0x82>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <HAL_SPI_TransmitReceive+0x82>
 80057b0:	887b      	ldrh	r3, [r7, #2]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d103      	bne.n	80057be <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80057bc:	e14e      	b.n	8005a5c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b04      	cmp	r3, #4
 80057c8:	d003      	beq.n	80057d2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2205      	movs	r2, #5
 80057ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	887a      	ldrh	r2, [r7, #2]
 80057e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	887a      	ldrh	r2, [r7, #2]
 80057e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	887a      	ldrh	r2, [r7, #2]
 80057f4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	887a      	ldrh	r2, [r7, #2]
 80057fa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005812:	2b40      	cmp	r3, #64	; 0x40
 8005814:	d007      	beq.n	8005826 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005824:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800582e:	d178      	bne.n	8005922 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d002      	beq.n	800583e <HAL_SPI_TransmitReceive+0x10a>
 8005838:	8b7b      	ldrh	r3, [r7, #26]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d166      	bne.n	800590c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005842:	881a      	ldrh	r2, [r3, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584e:	1c9a      	adds	r2, r3, #2
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005858:	b29b      	uxth	r3, r3
 800585a:	3b01      	subs	r3, #1
 800585c:	b29a      	uxth	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005862:	e053      	b.n	800590c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	2b02      	cmp	r3, #2
 8005870:	d11b      	bne.n	80058aa <HAL_SPI_TransmitReceive+0x176>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005876:	b29b      	uxth	r3, r3
 8005878:	2b00      	cmp	r3, #0
 800587a:	d016      	beq.n	80058aa <HAL_SPI_TransmitReceive+0x176>
 800587c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587e:	2b01      	cmp	r3, #1
 8005880:	d113      	bne.n	80058aa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005886:	881a      	ldrh	r2, [r3, #0]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005892:	1c9a      	adds	r2, r3, #2
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800589c:	b29b      	uxth	r3, r3
 800589e:	3b01      	subs	r3, #1
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058a6:	2300      	movs	r3, #0
 80058a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d119      	bne.n	80058ec <HAL_SPI_TransmitReceive+0x1b8>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058bc:	b29b      	uxth	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d014      	beq.n	80058ec <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058cc:	b292      	uxth	r2, r2
 80058ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d4:	1c9a      	adds	r2, r3, #2
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058de:	b29b      	uxth	r3, r3
 80058e0:	3b01      	subs	r3, #1
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058e8:	2301      	movs	r3, #1
 80058ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80058ec:	f7fd fa5c 	bl	8002da8 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d807      	bhi.n	800590c <HAL_SPI_TransmitReceive+0x1d8>
 80058fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005902:	d003      	beq.n	800590c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800590a:	e0a7      	b.n	8005a5c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005910:	b29b      	uxth	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1a6      	bne.n	8005864 <HAL_SPI_TransmitReceive+0x130>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800591a:	b29b      	uxth	r3, r3
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1a1      	bne.n	8005864 <HAL_SPI_TransmitReceive+0x130>
 8005920:	e07c      	b.n	8005a1c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <HAL_SPI_TransmitReceive+0x1fc>
 800592a:	8b7b      	ldrh	r3, [r7, #26]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d16b      	bne.n	8005a08 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	330c      	adds	r3, #12
 800593a:	7812      	ldrb	r2, [r2, #0]
 800593c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005942:	1c5a      	adds	r2, r3, #1
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800594c:	b29b      	uxth	r3, r3
 800594e:	3b01      	subs	r3, #1
 8005950:	b29a      	uxth	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005956:	e057      	b.n	8005a08 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f003 0302 	and.w	r3, r3, #2
 8005962:	2b02      	cmp	r3, #2
 8005964:	d11c      	bne.n	80059a0 <HAL_SPI_TransmitReceive+0x26c>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800596a:	b29b      	uxth	r3, r3
 800596c:	2b00      	cmp	r3, #0
 800596e:	d017      	beq.n	80059a0 <HAL_SPI_TransmitReceive+0x26c>
 8005970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005972:	2b01      	cmp	r3, #1
 8005974:	d114      	bne.n	80059a0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	330c      	adds	r3, #12
 8005980:	7812      	ldrb	r2, [r2, #0]
 8005982:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005988:	1c5a      	adds	r2, r3, #1
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005992:	b29b      	uxth	r3, r3
 8005994:	3b01      	subs	r3, #1
 8005996:	b29a      	uxth	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800599c:	2300      	movs	r3, #0
 800599e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d119      	bne.n	80059e2 <HAL_SPI_TransmitReceive+0x2ae>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d014      	beq.n	80059e2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68da      	ldr	r2, [r3, #12]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c2:	b2d2      	uxtb	r2, r2
 80059c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ca:	1c5a      	adds	r2, r3, #1
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	3b01      	subs	r3, #1
 80059d8:	b29a      	uxth	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059de:	2301      	movs	r3, #1
 80059e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80059e2:	f7fd f9e1 	bl	8002da8 <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d803      	bhi.n	80059fa <HAL_SPI_TransmitReceive+0x2c6>
 80059f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f8:	d102      	bne.n	8005a00 <HAL_SPI_TransmitReceive+0x2cc>
 80059fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d103      	bne.n	8005a08 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005a06:	e029      	b.n	8005a5c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1a2      	bne.n	8005958 <HAL_SPI_TransmitReceive+0x224>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d19d      	bne.n	8005958 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f000 f8e5 	bl	8005bf0 <SPI_EndRxTxTransaction>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d006      	beq.n	8005a3a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2220      	movs	r2, #32
 8005a36:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005a38:	e010      	b.n	8005a5c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10b      	bne.n	8005a5a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a42:	2300      	movs	r3, #0
 8005a44:	617b      	str	r3, [r7, #20]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	617b      	str	r3, [r7, #20]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	617b      	str	r3, [r7, #20]
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	e000      	b.n	8005a5c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005a5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3730      	adds	r7, #48	; 0x30
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	603b      	str	r3, [r7, #0]
 8005a84:	4613      	mov	r3, r2
 8005a86:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a88:	e04c      	b.n	8005b24 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a90:	d048      	beq.n	8005b24 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005a92:	f7fd f989 	bl	8002da8 <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	683a      	ldr	r2, [r7, #0]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d902      	bls.n	8005aa8 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d13d      	bne.n	8005b24 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ab6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ac0:	d111      	bne.n	8005ae6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aca:	d004      	beq.n	8005ad6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ad4:	d107      	bne.n	8005ae6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ae4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aee:	d10f      	bne.n	8005b10 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005afe:	601a      	str	r2, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b0e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e00f      	b.n	8005b44 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689a      	ldr	r2, [r3, #8]
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	bf0c      	ite	eq
 8005b34:	2301      	moveq	r3, #1
 8005b36:	2300      	movne	r3, #0
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	79fb      	ldrb	r3, [r7, #7]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d1a3      	bne.n	8005a8a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af02      	add	r7, sp, #8
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b60:	d111      	bne.n	8005b86 <SPI_EndRxTransaction+0x3a>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b6a:	d004      	beq.n	8005b76 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b74:	d107      	bne.n	8005b86 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b84:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b8e:	d117      	bne.n	8005bc0 <SPI_EndRxTransaction+0x74>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b98:	d112      	bne.n	8005bc0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	2101      	movs	r1, #1
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f7ff ff67 	bl	8005a78 <SPI_WaitFlagStateUntilTimeout>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d01a      	beq.n	8005be6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb4:	f043 0220 	orr.w	r2, r3, #32
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e013      	b.n	8005be8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	2180      	movs	r1, #128	; 0x80
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f7ff ff54 	bl	8005a78 <SPI_WaitFlagStateUntilTimeout>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d007      	beq.n	8005be6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bda:	f043 0220 	orr.w	r2, r3, #32
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e000      	b.n	8005be8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af02      	add	r7, sp, #8
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	2200      	movs	r2, #0
 8005c04:	2180      	movs	r1, #128	; 0x80
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f7ff ff36 	bl	8005a78 <SPI_WaitFlagStateUntilTimeout>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d007      	beq.n	8005c22 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c16:	f043 0220 	orr.w	r2, r3, #32
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e000      	b.n	8005c24 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e01d      	b.n	8005c7a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d106      	bne.n	8005c58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f815 	bl	8005c82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	3304      	adds	r3, #4
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4610      	mov	r0, r2
 8005c6c:	f000 f962 	bl	8005f34 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3708      	adds	r7, #8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005c8a:	bf00      	nop
 8005c8c:	370c      	adds	r7, #12
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bc80      	pop	{r7}
 8005c92:	4770      	bx	lr

08005c94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68da      	ldr	r2, [r3, #12]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f042 0201 	orr.w	r2, r2, #1
 8005caa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f003 0307 	and.w	r3, r3, #7
 8005cb6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2b06      	cmp	r3, #6
 8005cbc:	d007      	beq.n	8005cce <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f042 0201 	orr.w	r2, r2, #1
 8005ccc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bc80      	pop	{r7}
 8005cd8:	4770      	bx	lr

08005cda <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b082      	sub	sp, #8
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	f003 0302 	and.w	r3, r3, #2
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d122      	bne.n	8005d36 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d11b      	bne.n	8005d36 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f06f 0202 	mvn.w	r2, #2
 8005d06:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	f003 0303 	and.w	r3, r3, #3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d003      	beq.n	8005d24 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 f8ed 	bl	8005efc <HAL_TIM_IC_CaptureCallback>
 8005d22:	e005      	b.n	8005d30 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 f8e0 	bl	8005eea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f8ef 	bl	8005f0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b04      	cmp	r3, #4
 8005d42:	d122      	bne.n	8005d8a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	f003 0304 	and.w	r3, r3, #4
 8005d4e:	2b04      	cmp	r3, #4
 8005d50:	d11b      	bne.n	8005d8a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f06f 0204 	mvn.w	r2, #4
 8005d5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2202      	movs	r2, #2
 8005d60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d003      	beq.n	8005d78 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 f8c3 	bl	8005efc <HAL_TIM_IC_CaptureCallback>
 8005d76:	e005      	b.n	8005d84 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 f8b6 	bl	8005eea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f8c5 	bl	8005f0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	f003 0308 	and.w	r3, r3, #8
 8005d94:	2b08      	cmp	r3, #8
 8005d96:	d122      	bne.n	8005dde <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	f003 0308 	and.w	r3, r3, #8
 8005da2:	2b08      	cmp	r3, #8
 8005da4:	d11b      	bne.n	8005dde <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f06f 0208 	mvn.w	r2, #8
 8005dae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2204      	movs	r2, #4
 8005db4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	69db      	ldr	r3, [r3, #28]
 8005dbc:	f003 0303 	and.w	r3, r3, #3
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d003      	beq.n	8005dcc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 f899 	bl	8005efc <HAL_TIM_IC_CaptureCallback>
 8005dca:	e005      	b.n	8005dd8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 f88c 	bl	8005eea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f89b 	bl	8005f0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	f003 0310 	and.w	r3, r3, #16
 8005de8:	2b10      	cmp	r3, #16
 8005dea:	d122      	bne.n	8005e32 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	f003 0310 	and.w	r3, r3, #16
 8005df6:	2b10      	cmp	r3, #16
 8005df8:	d11b      	bne.n	8005e32 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f06f 0210 	mvn.w	r2, #16
 8005e02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2208      	movs	r2, #8
 8005e08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	69db      	ldr	r3, [r3, #28]
 8005e10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d003      	beq.n	8005e20 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 f86f 	bl	8005efc <HAL_TIM_IC_CaptureCallback>
 8005e1e:	e005      	b.n	8005e2c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 f862 	bl	8005eea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f871 	bl	8005f0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d10e      	bne.n	8005e5e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d107      	bne.n	8005e5e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f06f 0201 	mvn.w	r2, #1
 8005e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f7fc fce1 	bl	8002820 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e68:	2b80      	cmp	r3, #128	; 0x80
 8005e6a:	d10e      	bne.n	8005e8a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e76:	2b80      	cmp	r3, #128	; 0x80
 8005e78:	d107      	bne.n	8005e8a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 f8c0 	bl	800600a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e94:	2b40      	cmp	r3, #64	; 0x40
 8005e96:	d10e      	bne.n	8005eb6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea2:	2b40      	cmp	r3, #64	; 0x40
 8005ea4:	d107      	bne.n	8005eb6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 f835 	bl	8005f20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	f003 0320 	and.w	r3, r3, #32
 8005ec0:	2b20      	cmp	r3, #32
 8005ec2:	d10e      	bne.n	8005ee2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	f003 0320 	and.w	r3, r3, #32
 8005ece:	2b20      	cmp	r3, #32
 8005ed0:	d107      	bne.n	8005ee2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f06f 0220 	mvn.w	r2, #32
 8005eda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 f88b 	bl	8005ff8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ee2:	bf00      	nop
 8005ee4:	3708      	adds	r7, #8
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b083      	sub	sp, #12
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ef2:	bf00      	nop
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bc80      	pop	{r7}
 8005efa:	4770      	bx	lr

08005efc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bc80      	pop	{r7}
 8005f0c:	4770      	bx	lr

08005f0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b083      	sub	sp, #12
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f16:	bf00      	nop
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bc80      	pop	{r7}
 8005f1e:	4770      	bx	lr

08005f20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bc80      	pop	{r7}
 8005f30:	4770      	bx	lr
	...

08005f34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a29      	ldr	r2, [pc, #164]	; (8005fec <TIM_Base_SetConfig+0xb8>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d00b      	beq.n	8005f64 <TIM_Base_SetConfig+0x30>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f52:	d007      	beq.n	8005f64 <TIM_Base_SetConfig+0x30>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a26      	ldr	r2, [pc, #152]	; (8005ff0 <TIM_Base_SetConfig+0xbc>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d003      	beq.n	8005f64 <TIM_Base_SetConfig+0x30>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a25      	ldr	r2, [pc, #148]	; (8005ff4 <TIM_Base_SetConfig+0xc0>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d108      	bne.n	8005f76 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a1c      	ldr	r2, [pc, #112]	; (8005fec <TIM_Base_SetConfig+0xb8>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d00b      	beq.n	8005f96 <TIM_Base_SetConfig+0x62>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f84:	d007      	beq.n	8005f96 <TIM_Base_SetConfig+0x62>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a19      	ldr	r2, [pc, #100]	; (8005ff0 <TIM_Base_SetConfig+0xbc>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d003      	beq.n	8005f96 <TIM_Base_SetConfig+0x62>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a18      	ldr	r2, [pc, #96]	; (8005ff4 <TIM_Base_SetConfig+0xc0>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d108      	bne.n	8005fa8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	689a      	ldr	r2, [r3, #8]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a07      	ldr	r2, [pc, #28]	; (8005fec <TIM_Base_SetConfig+0xb8>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d103      	bne.n	8005fdc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	691a      	ldr	r2, [r3, #16]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	615a      	str	r2, [r3, #20]
}
 8005fe2:	bf00      	nop
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bc80      	pop	{r7}
 8005fea:	4770      	bx	lr
 8005fec:	40012c00 	.word	0x40012c00
 8005ff0:	40000400 	.word	0x40000400
 8005ff4:	40000800 	.word	0x40000800

08005ff8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	bc80      	pop	{r7}
 8006008:	4770      	bx	lr

0800600a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800600a:	b480      	push	{r7}
 800600c:	b083      	sub	sp, #12
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006012:	bf00      	nop
 8006014:	370c      	adds	r7, #12
 8006016:	46bd      	mov	sp, r7
 8006018:	bc80      	pop	{r7}
 800601a:	4770      	bx	lr

0800601c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e03f      	b.n	80060ae <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	d106      	bne.n	8006048 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7fc fcbe 	bl	80029c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2224      	movs	r2, #36	; 0x24
 800604c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68da      	ldr	r2, [r3, #12]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800605e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 fcb5 	bl	80069d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	691a      	ldr	r2, [r3, #16]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006074:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	695a      	ldr	r2, [r3, #20]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006084:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68da      	ldr	r2, [r3, #12]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006094:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2220      	movs	r2, #32
 80060a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2220      	movs	r2, #32
 80060a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3708      	adds	r7, #8
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b088      	sub	sp, #32
 80060ba:	af02      	add	r7, sp, #8
 80060bc:	60f8      	str	r0, [r7, #12]
 80060be:	60b9      	str	r1, [r7, #8]
 80060c0:	603b      	str	r3, [r7, #0]
 80060c2:	4613      	mov	r3, r2
 80060c4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80060c6:	2300      	movs	r3, #0
 80060c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b20      	cmp	r3, #32
 80060d4:	f040 8083 	bne.w	80061de <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d002      	beq.n	80060e4 <HAL_UART_Transmit+0x2e>
 80060de:	88fb      	ldrh	r3, [r7, #6]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d101      	bne.n	80060e8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e07b      	b.n	80061e0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d101      	bne.n	80060f6 <HAL_UART_Transmit+0x40>
 80060f2:	2302      	movs	r3, #2
 80060f4:	e074      	b.n	80061e0 <HAL_UART_Transmit+0x12a>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2221      	movs	r2, #33	; 0x21
 8006108:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800610c:	f7fc fe4c 	bl	8002da8 <HAL_GetTick>
 8006110:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	88fa      	ldrh	r2, [r7, #6]
 8006116:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	88fa      	ldrh	r2, [r7, #6]
 800611c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800611e:	e042      	b.n	80061a6 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006124:	b29b      	uxth	r3, r3
 8006126:	3b01      	subs	r3, #1
 8006128:	b29a      	uxth	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006136:	d122      	bne.n	800617e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	2200      	movs	r2, #0
 8006140:	2180      	movs	r1, #128	; 0x80
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f000 fac6 	bl	80066d4 <UART_WaitOnFlagUntilTimeout>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d001      	beq.n	8006152 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e046      	b.n	80061e0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	881b      	ldrh	r3, [r3, #0]
 800615a:	461a      	mov	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006164:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d103      	bne.n	8006176 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	3302      	adds	r3, #2
 8006172:	60bb      	str	r3, [r7, #8]
 8006174:	e017      	b.n	80061a6 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	3301      	adds	r3, #1
 800617a:	60bb      	str	r3, [r7, #8]
 800617c:	e013      	b.n	80061a6 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	9300      	str	r3, [sp, #0]
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	2200      	movs	r2, #0
 8006186:	2180      	movs	r1, #128	; 0x80
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f000 faa3 	bl	80066d4 <UART_WaitOnFlagUntilTimeout>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d001      	beq.n	8006198 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e023      	b.n	80061e0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	1c5a      	adds	r2, r3, #1
 800619c:	60ba      	str	r2, [r7, #8]
 800619e:	781a      	ldrb	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1b7      	bne.n	8006120 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	2200      	movs	r2, #0
 80061b8:	2140      	movs	r1, #64	; 0x40
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 fa8a 	bl	80066d4 <UART_WaitOnFlagUntilTimeout>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e00a      	b.n	80061e0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2220      	movs	r2, #32
 80061ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80061da:	2300      	movs	r3, #0
 80061dc:	e000      	b.n	80061e0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80061de:	2302      	movs	r3, #2
  }
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3718      	adds	r7, #24
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b086      	sub	sp, #24
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	4613      	mov	r3, r2
 80061f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b20      	cmp	r3, #32
 8006200:	d166      	bne.n	80062d0 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d002      	beq.n	800620e <HAL_UART_Receive_DMA+0x26>
 8006208:	88fb      	ldrh	r3, [r7, #6]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e05f      	b.n	80062d2 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006218:	2b01      	cmp	r3, #1
 800621a:	d101      	bne.n	8006220 <HAL_UART_Receive_DMA+0x38>
 800621c:	2302      	movs	r3, #2
 800621e:	e058      	b.n	80062d2 <HAL_UART_Receive_DMA+0xea>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	88fa      	ldrh	r2, [r7, #6]
 8006232:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2222      	movs	r2, #34	; 0x22
 800623e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006246:	4a25      	ldr	r2, [pc, #148]	; (80062dc <HAL_UART_Receive_DMA+0xf4>)
 8006248:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800624e:	4a24      	ldr	r2, [pc, #144]	; (80062e0 <HAL_UART_Receive_DMA+0xf8>)
 8006250:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006256:	4a23      	ldr	r2, [pc, #140]	; (80062e4 <HAL_UART_Receive_DMA+0xfc>)
 8006258:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800625e:	2200      	movs	r2, #0
 8006260:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8006262:	f107 0308 	add.w	r3, r7, #8
 8006266:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	3304      	adds	r3, #4
 8006272:	4619      	mov	r1, r3
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	88fb      	ldrh	r3, [r7, #6]
 800627a:	f7fc fefb 	bl	8003074 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800627e:	2300      	movs	r3, #0
 8006280:	613b      	str	r3, [r7, #16]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	613b      	str	r3, [r7, #16]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	613b      	str	r3, [r7, #16]
 8006292:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68da      	ldr	r2, [r3, #12]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062aa:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	695a      	ldr	r2, [r3, #20]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f042 0201 	orr.w	r2, r2, #1
 80062ba:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	695a      	ldr	r2, [r3, #20]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062ca:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80062cc:	2300      	movs	r3, #0
 80062ce:	e000      	b.n	80062d2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80062d0:	2302      	movs	r3, #2
  }
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3718      	adds	r7, #24
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	080065bd 	.word	0x080065bd
 80062e0:	08006625 	.word	0x08006625
 80062e4:	08006641 	.word	0x08006641

080062e8 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80062f0:	2300      	movs	r3, #0
 80062f2:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062fe:	2b00      	cmp	r3, #0
 8006300:	bf14      	ite	ne
 8006302:	2301      	movne	r3, #1
 8006304:	2300      	moveq	r3, #0
 8006306:	b2db      	uxtb	r3, r3
 8006308:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006310:	b2db      	uxtb	r3, r3
 8006312:	2b21      	cmp	r3, #33	; 0x21
 8006314:	d116      	bne.n	8006344 <HAL_UART_DMAStop+0x5c>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d013      	beq.n	8006344 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	695a      	ldr	r2, [r3, #20]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800632a:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006330:	2b00      	cmp	r3, #0
 8006332:	d004      	beq.n	800633e <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006338:	4618      	mov	r0, r3
 800633a:	f7fc fefa 	bl	8003132 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fa12 	bl	8006768 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800634e:	2b00      	cmp	r3, #0
 8006350:	bf14      	ite	ne
 8006352:	2301      	movne	r3, #1
 8006354:	2300      	moveq	r3, #0
 8006356:	b2db      	uxtb	r3, r3
 8006358:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b22      	cmp	r3, #34	; 0x22
 8006364:	d116      	bne.n	8006394 <HAL_UART_DMAStop+0xac>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d013      	beq.n	8006394 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	695a      	ldr	r2, [r3, #20]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800637a:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006380:	2b00      	cmp	r3, #0
 8006382:	d004      	beq.n	800638e <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006388:	4618      	mov	r0, r3
 800638a:	f7fc fed2 	bl	8003132 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f9ff 	bl	8006792 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
	...

080063a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b088      	sub	sp, #32
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80063c0:	2300      	movs	r3, #0
 80063c2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	f003 030f 	and.w	r3, r3, #15
 80063ce:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10d      	bne.n	80063f2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	f003 0320 	and.w	r3, r3, #32
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d008      	beq.n	80063f2 <HAL_UART_IRQHandler+0x52>
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	f003 0320 	and.w	r3, r3, #32
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 fa6f 	bl	80068ce <UART_Receive_IT>
      return;
 80063f0:	e0cc      	b.n	800658c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f000 80ab 	beq.w	8006550 <HAL_UART_IRQHandler+0x1b0>
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	2b00      	cmp	r3, #0
 8006402:	d105      	bne.n	8006410 <HAL_UART_IRQHandler+0x70>
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800640a:	2b00      	cmp	r3, #0
 800640c:	f000 80a0 	beq.w	8006550 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00a      	beq.n	8006430 <HAL_UART_IRQHandler+0x90>
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006420:	2b00      	cmp	r3, #0
 8006422:	d005      	beq.n	8006430 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006428:	f043 0201 	orr.w	r2, r3, #1
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	f003 0304 	and.w	r3, r3, #4
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00a      	beq.n	8006450 <HAL_UART_IRQHandler+0xb0>
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f003 0301 	and.w	r3, r3, #1
 8006440:	2b00      	cmp	r3, #0
 8006442:	d005      	beq.n	8006450 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006448:	f043 0202 	orr.w	r2, r3, #2
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	f003 0302 	and.w	r3, r3, #2
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00a      	beq.n	8006470 <HAL_UART_IRQHandler+0xd0>
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	2b00      	cmp	r3, #0
 8006462:	d005      	beq.n	8006470 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006468:	f043 0204 	orr.w	r2, r3, #4
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	f003 0308 	and.w	r3, r3, #8
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00a      	beq.n	8006490 <HAL_UART_IRQHandler+0xf0>
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	f003 0301 	and.w	r3, r3, #1
 8006480:	2b00      	cmp	r3, #0
 8006482:	d005      	beq.n	8006490 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006488:	f043 0208 	orr.w	r2, r3, #8
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006494:	2b00      	cmp	r3, #0
 8006496:	d078      	beq.n	800658a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	f003 0320 	and.w	r3, r3, #32
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d007      	beq.n	80064b2 <HAL_UART_IRQHandler+0x112>
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	f003 0320 	and.w	r3, r3, #32
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d002      	beq.n	80064b2 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fa0e 	bl	80068ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064bc:	2b00      	cmp	r3, #0
 80064be:	bf14      	ite	ne
 80064c0:	2301      	movne	r3, #1
 80064c2:	2300      	moveq	r3, #0
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064cc:	f003 0308 	and.w	r3, r3, #8
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d102      	bne.n	80064da <HAL_UART_IRQHandler+0x13a>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d031      	beq.n	800653e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f959 	bl	8006792 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d023      	beq.n	8006536 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	695a      	ldr	r2, [r3, #20]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064fc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006502:	2b00      	cmp	r3, #0
 8006504:	d013      	beq.n	800652e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800650a:	4a22      	ldr	r2, [pc, #136]	; (8006594 <HAL_UART_IRQHandler+0x1f4>)
 800650c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006512:	4618      	mov	r0, r3
 8006514:	f7fc fe48 	bl	80031a8 <HAL_DMA_Abort_IT>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d016      	beq.n	800654c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006528:	4610      	mov	r0, r2
 800652a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800652c:	e00e      	b.n	800654c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f83b 	bl	80065aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006534:	e00a      	b.n	800654c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f837 	bl	80065aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800653c:	e006      	b.n	800654c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f833 	bl	80065aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800654a:	e01e      	b.n	800658a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800654c:	bf00      	nop
    return;
 800654e:	e01c      	b.n	800658a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006556:	2b00      	cmp	r3, #0
 8006558:	d008      	beq.n	800656c <HAL_UART_IRQHandler+0x1cc>
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006560:	2b00      	cmp	r3, #0
 8006562:	d003      	beq.n	800656c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f945 	bl	80067f4 <UART_Transmit_IT>
    return;
 800656a:	e00f      	b.n	800658c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00a      	beq.n	800658c <HAL_UART_IRQHandler+0x1ec>
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657c:	2b00      	cmp	r3, #0
 800657e:	d005      	beq.n	800658c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 f98c 	bl	800689e <UART_EndTransmit_IT>
    return;
 8006586:	bf00      	nop
 8006588:	e000      	b.n	800658c <HAL_UART_IRQHandler+0x1ec>
    return;
 800658a:	bf00      	nop
  }
}
 800658c:	3720      	adds	r7, #32
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	080067cd 	.word	0x080067cd

08006598 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bc80      	pop	{r7}
 80065a8:	4770      	bx	lr

080065aa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065aa:	b480      	push	{r7}
 80065ac:	b083      	sub	sp, #12
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80065b2:	bf00      	nop
 80065b4:	370c      	adds	r7, #12
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bc80      	pop	{r7}
 80065ba:	4770      	bx	lr

080065bc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0320 	and.w	r3, r3, #32
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d11e      	bne.n	8006616 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68da      	ldr	r2, [r3, #12]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065ec:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	695a      	ldr	r2, [r3, #20]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f022 0201 	bic.w	r2, r2, #1
 80065fc:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	695a      	ldr	r2, [r3, #20]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800660c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2220      	movs	r2, #32
 8006612:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f7fb ff7c 	bl	8002514 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800661c:	bf00      	nop
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006630:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f7fb ff78 	bl	8002528 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006638:	bf00      	nop
 800663a:	3710      	adds	r7, #16
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006648:	2300      	movs	r3, #0
 800664a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006650:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800665c:	2b00      	cmp	r3, #0
 800665e:	bf14      	ite	ne
 8006660:	2301      	movne	r3, #1
 8006662:	2300      	moveq	r3, #0
 8006664:	b2db      	uxtb	r3, r3
 8006666:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b21      	cmp	r3, #33	; 0x21
 8006672:	d108      	bne.n	8006686 <UART_DMAError+0x46>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d005      	beq.n	8006686 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	2200      	movs	r2, #0
 800667e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006680:	68b8      	ldr	r0, [r7, #8]
 8006682:	f000 f871 	bl	8006768 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	695b      	ldr	r3, [r3, #20]
 800668c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006690:	2b00      	cmp	r3, #0
 8006692:	bf14      	ite	ne
 8006694:	2301      	movne	r3, #1
 8006696:	2300      	moveq	r3, #0
 8006698:	b2db      	uxtb	r3, r3
 800669a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	2b22      	cmp	r3, #34	; 0x22
 80066a6:	d108      	bne.n	80066ba <UART_DMAError+0x7a>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d005      	beq.n	80066ba <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	2200      	movs	r2, #0
 80066b2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80066b4:	68b8      	ldr	r0, [r7, #8]
 80066b6:	f000 f86c 	bl	8006792 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066be:	f043 0210 	orr.w	r2, r3, #16
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066c6:	68b8      	ldr	r0, [r7, #8]
 80066c8:	f7ff ff6f 	bl	80065aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066cc:	bf00      	nop
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	603b      	str	r3, [r7, #0]
 80066e0:	4613      	mov	r3, r2
 80066e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066e4:	e02c      	b.n	8006740 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ec:	d028      	beq.n	8006740 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d007      	beq.n	8006704 <UART_WaitOnFlagUntilTimeout+0x30>
 80066f4:	f7fc fb58 	bl	8002da8 <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	429a      	cmp	r2, r3
 8006702:	d21d      	bcs.n	8006740 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68da      	ldr	r2, [r3, #12]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006712:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	695a      	ldr	r2, [r3, #20]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f022 0201 	bic.w	r2, r2, #1
 8006722:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2220      	movs	r2, #32
 8006728:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2220      	movs	r2, #32
 8006730:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	e00f      	b.n	8006760 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	4013      	ands	r3, r2
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	429a      	cmp	r2, r3
 800674e:	bf0c      	ite	eq
 8006750:	2301      	moveq	r3, #1
 8006752:	2300      	movne	r3, #0
 8006754:	b2db      	uxtb	r3, r3
 8006756:	461a      	mov	r2, r3
 8006758:	79fb      	ldrb	r3, [r7, #7]
 800675a:	429a      	cmp	r2, r3
 800675c:	d0c3      	beq.n	80066e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68da      	ldr	r2, [r3, #12]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800677e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2220      	movs	r2, #32
 8006784:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	bc80      	pop	{r7}
 8006790:	4770      	bx	lr

08006792 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006792:	b480      	push	{r7}
 8006794:	b083      	sub	sp, #12
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68da      	ldr	r2, [r3, #12]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80067a8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	695a      	ldr	r2, [r3, #20]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f022 0201 	bic.w	r2, r2, #1
 80067b8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2220      	movs	r2, #32
 80067be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80067c2:	bf00      	nop
 80067c4:	370c      	adds	r7, #12
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bc80      	pop	{r7}
 80067ca:	4770      	bx	lr

080067cc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f7ff fedf 	bl	80065aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067ec:	bf00      	nop
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b21      	cmp	r3, #33	; 0x21
 8006806:	d144      	bne.n	8006892 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006810:	d11a      	bne.n	8006848 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	881b      	ldrh	r3, [r3, #0]
 800681c:	461a      	mov	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006826:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d105      	bne.n	800683c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	1c9a      	adds	r2, r3, #2
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	621a      	str	r2, [r3, #32]
 800683a:	e00e      	b.n	800685a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a1b      	ldr	r3, [r3, #32]
 8006840:	1c5a      	adds	r2, r3, #1
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	621a      	str	r2, [r3, #32]
 8006846:	e008      	b.n	800685a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a1b      	ldr	r3, [r3, #32]
 800684c:	1c59      	adds	r1, r3, #1
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	6211      	str	r1, [r2, #32]
 8006852:	781a      	ldrb	r2, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800685e:	b29b      	uxth	r3, r3
 8006860:	3b01      	subs	r3, #1
 8006862:	b29b      	uxth	r3, r3
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	4619      	mov	r1, r3
 8006868:	84d1      	strh	r1, [r2, #38]	; 0x26
 800686a:	2b00      	cmp	r3, #0
 800686c:	d10f      	bne.n	800688e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68da      	ldr	r2, [r3, #12]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800687c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68da      	ldr	r2, [r3, #12]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800688c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800688e:	2300      	movs	r3, #0
 8006890:	e000      	b.n	8006894 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006892:	2302      	movs	r3, #2
  }
}
 8006894:	4618      	mov	r0, r3
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	bc80      	pop	{r7}
 800689c:	4770      	bx	lr

0800689e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b082      	sub	sp, #8
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68da      	ldr	r2, [r3, #12]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2220      	movs	r2, #32
 80068ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f7ff fe6a 	bl	8006598 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b084      	sub	sp, #16
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b22      	cmp	r3, #34	; 0x22
 80068e0:	d171      	bne.n	80069c6 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ea:	d123      	bne.n	8006934 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f0:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10e      	bne.n	8006918 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	b29b      	uxth	r3, r3
 8006902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006906:	b29a      	uxth	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006910:	1c9a      	adds	r2, r3, #2
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	629a      	str	r2, [r3, #40]	; 0x28
 8006916:	e029      	b.n	800696c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	b29b      	uxth	r3, r3
 8006920:	b2db      	uxtb	r3, r3
 8006922:	b29a      	uxth	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692c:	1c5a      	adds	r2, r3, #1
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	629a      	str	r2, [r3, #40]	; 0x28
 8006932:	e01b      	b.n	800696c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10a      	bne.n	8006952 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6858      	ldr	r0, [r3, #4]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006946:	1c59      	adds	r1, r3, #1
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	6291      	str	r1, [r2, #40]	; 0x28
 800694c:	b2c2      	uxtb	r2, r0
 800694e:	701a      	strb	r2, [r3, #0]
 8006950:	e00c      	b.n	800696c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	b2da      	uxtb	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695e:	1c58      	adds	r0, r3, #1
 8006960:	6879      	ldr	r1, [r7, #4]
 8006962:	6288      	str	r0, [r1, #40]	; 0x28
 8006964:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006968:	b2d2      	uxtb	r2, r2
 800696a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006970:	b29b      	uxth	r3, r3
 8006972:	3b01      	subs	r3, #1
 8006974:	b29b      	uxth	r3, r3
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	4619      	mov	r1, r3
 800697a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800697c:	2b00      	cmp	r3, #0
 800697e:	d120      	bne.n	80069c2 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68da      	ldr	r2, [r3, #12]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f022 0220 	bic.w	r2, r2, #32
 800698e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68da      	ldr	r2, [r3, #12]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800699e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	695a      	ldr	r2, [r3, #20]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f022 0201 	bic.w	r2, r2, #1
 80069ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2220      	movs	r2, #32
 80069b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f7fb fdab 	bl	8002514 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80069be:	2300      	movs	r3, #0
 80069c0:	e002      	b.n	80069c8 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80069c2:	2300      	movs	r3, #0
 80069c4:	e000      	b.n	80069c8 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80069c6:	2302      	movs	r3, #2
  }
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3710      	adds	r7, #16
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68da      	ldr	r2, [r3, #12]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	689a      	ldr	r2, [r3, #8]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	431a      	orrs	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	695b      	ldr	r3, [r3, #20]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006a0a:	f023 030c 	bic.w	r3, r3, #12
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	6812      	ldr	r2, [r2, #0]
 8006a12:	68f9      	ldr	r1, [r7, #12]
 8006a14:	430b      	orrs	r3, r1
 8006a16:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	699a      	ldr	r2, [r3, #24]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a52      	ldr	r2, [pc, #328]	; (8006b7c <UART_SetConfig+0x1ac>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d14e      	bne.n	8006ad6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006a38:	f7fe fac6 	bl	8004fc8 <HAL_RCC_GetPCLK2Freq>
 8006a3c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	4613      	mov	r3, r2
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	4413      	add	r3, r2
 8006a46:	009a      	lsls	r2, r3, #2
 8006a48:	441a      	add	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a54:	4a4a      	ldr	r2, [pc, #296]	; (8006b80 <UART_SetConfig+0x1b0>)
 8006a56:	fba2 2303 	umull	r2, r3, r2, r3
 8006a5a:	095b      	lsrs	r3, r3, #5
 8006a5c:	0119      	lsls	r1, r3, #4
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	4613      	mov	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4413      	add	r3, r2
 8006a66:	009a      	lsls	r2, r3, #2
 8006a68:	441a      	add	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a74:	4b42      	ldr	r3, [pc, #264]	; (8006b80 <UART_SetConfig+0x1b0>)
 8006a76:	fba3 0302 	umull	r0, r3, r3, r2
 8006a7a:	095b      	lsrs	r3, r3, #5
 8006a7c:	2064      	movs	r0, #100	; 0x64
 8006a7e:	fb00 f303 	mul.w	r3, r0, r3
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	011b      	lsls	r3, r3, #4
 8006a86:	3332      	adds	r3, #50	; 0x32
 8006a88:	4a3d      	ldr	r2, [pc, #244]	; (8006b80 <UART_SetConfig+0x1b0>)
 8006a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a8e:	095b      	lsrs	r3, r3, #5
 8006a90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a94:	4419      	add	r1, r3
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	4613      	mov	r3, r2
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4413      	add	r3, r2
 8006a9e:	009a      	lsls	r2, r3, #2
 8006aa0:	441a      	add	r2, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006aac:	4b34      	ldr	r3, [pc, #208]	; (8006b80 <UART_SetConfig+0x1b0>)
 8006aae:	fba3 0302 	umull	r0, r3, r3, r2
 8006ab2:	095b      	lsrs	r3, r3, #5
 8006ab4:	2064      	movs	r0, #100	; 0x64
 8006ab6:	fb00 f303 	mul.w	r3, r0, r3
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	011b      	lsls	r3, r3, #4
 8006abe:	3332      	adds	r3, #50	; 0x32
 8006ac0:	4a2f      	ldr	r2, [pc, #188]	; (8006b80 <UART_SetConfig+0x1b0>)
 8006ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ac6:	095b      	lsrs	r3, r3, #5
 8006ac8:	f003 020f 	and.w	r2, r3, #15
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	440a      	add	r2, r1
 8006ad2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8006ad4:	e04d      	b.n	8006b72 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8006ad6:	f7fe fa63 	bl	8004fa0 <HAL_RCC_GetPCLK1Freq>
 8006ada:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4413      	add	r3, r2
 8006ae4:	009a      	lsls	r2, r3, #2
 8006ae6:	441a      	add	r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af2:	4a23      	ldr	r2, [pc, #140]	; (8006b80 <UART_SetConfig+0x1b0>)
 8006af4:	fba2 2303 	umull	r2, r3, r2, r3
 8006af8:	095b      	lsrs	r3, r3, #5
 8006afa:	0119      	lsls	r1, r3, #4
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	4613      	mov	r3, r2
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4413      	add	r3, r2
 8006b04:	009a      	lsls	r2, r3, #2
 8006b06:	441a      	add	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b12:	4b1b      	ldr	r3, [pc, #108]	; (8006b80 <UART_SetConfig+0x1b0>)
 8006b14:	fba3 0302 	umull	r0, r3, r3, r2
 8006b18:	095b      	lsrs	r3, r3, #5
 8006b1a:	2064      	movs	r0, #100	; 0x64
 8006b1c:	fb00 f303 	mul.w	r3, r0, r3
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	011b      	lsls	r3, r3, #4
 8006b24:	3332      	adds	r3, #50	; 0x32
 8006b26:	4a16      	ldr	r2, [pc, #88]	; (8006b80 <UART_SetConfig+0x1b0>)
 8006b28:	fba2 2303 	umull	r2, r3, r2, r3
 8006b2c:	095b      	lsrs	r3, r3, #5
 8006b2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b32:	4419      	add	r1, r3
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	4613      	mov	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4413      	add	r3, r2
 8006b3c:	009a      	lsls	r2, r3, #2
 8006b3e:	441a      	add	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b4a:	4b0d      	ldr	r3, [pc, #52]	; (8006b80 <UART_SetConfig+0x1b0>)
 8006b4c:	fba3 0302 	umull	r0, r3, r3, r2
 8006b50:	095b      	lsrs	r3, r3, #5
 8006b52:	2064      	movs	r0, #100	; 0x64
 8006b54:	fb00 f303 	mul.w	r3, r0, r3
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	011b      	lsls	r3, r3, #4
 8006b5c:	3332      	adds	r3, #50	; 0x32
 8006b5e:	4a08      	ldr	r2, [pc, #32]	; (8006b80 <UART_SetConfig+0x1b0>)
 8006b60:	fba2 2303 	umull	r2, r3, r2, r3
 8006b64:	095b      	lsrs	r3, r3, #5
 8006b66:	f003 020f 	and.w	r2, r3, #15
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	440a      	add	r2, r1
 8006b70:	609a      	str	r2, [r3, #8]
}
 8006b72:	bf00      	nop
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	40013800 	.word	0x40013800
 8006b80:	51eb851f 	.word	0x51eb851f

08006b84 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006b84:	b084      	sub	sp, #16
 8006b86:	b480      	push	{r7}
 8006b88:	b083      	sub	sp, #12
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
 8006b8e:	f107 0014 	add.w	r0, r7, #20
 8006b92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bc80      	pop	{r7}
 8006ba0:	b004      	add	sp, #16
 8006ba2:	4770      	bx	lr

08006ba4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006bac:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006bb0:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	89fb      	ldrh	r3, [r7, #14]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3714      	adds	r7, #20
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bc80      	pop	{r7}
 8006bd0:	4770      	bx	lr

08006bd2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006bd2:	b480      	push	{r7}
 8006bd4:	b085      	sub	sp, #20
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006bda:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006bde:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	b21a      	sxth	r2, r3
 8006bea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006bee:	43db      	mvns	r3, r3
 8006bf0:	b21b      	sxth	r3, r3
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	b21b      	sxth	r3, r3
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bc80      	pop	{r7}
 8006c08:	4770      	bx	lr

08006c0a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b083      	sub	sp, #12
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
 8006c12:	460b      	mov	r3, r1
 8006c14:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bc80      	pop	{r7}
 8006c20:	4770      	bx	lr

08006c22 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006c22:	b084      	sub	sp, #16
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	f107 0014 	add.w	r0, r7, #20
 8006c30:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f7ff ffa5 	bl	8006ba4 <USB_EnableGlobalInt>

  return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3708      	adds	r7, #8
 8006c60:	46bd      	mov	sp, r7
 8006c62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c66:	b004      	add	sp, #16
 8006c68:	4770      	bx	lr
	...

08006c6c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c6c:	b490      	push	{r4, r7}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c76:	2300      	movs	r3, #0
 8006c78:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4413      	add	r3, r2
 8006c84:	881b      	ldrh	r3, [r3, #0]
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c90:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	78db      	ldrb	r3, [r3, #3]
 8006c96:	2b03      	cmp	r3, #3
 8006c98:	d819      	bhi.n	8006cce <USB_ActivateEndpoint+0x62>
 8006c9a:	a201      	add	r2, pc, #4	; (adr r2, 8006ca0 <USB_ActivateEndpoint+0x34>)
 8006c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca0:	08006cb1 	.word	0x08006cb1
 8006ca4:	08006cc5 	.word	0x08006cc5
 8006ca8:	08006cd5 	.word	0x08006cd5
 8006cac:	08006cbb 	.word	0x08006cbb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006cb0:	89bb      	ldrh	r3, [r7, #12]
 8006cb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cb6:	81bb      	strh	r3, [r7, #12]
      break;
 8006cb8:	e00d      	b.n	8006cd6 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006cba:	89bb      	ldrh	r3, [r7, #12]
 8006cbc:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006cc0:	81bb      	strh	r3, [r7, #12]
      break;
 8006cc2:	e008      	b.n	8006cd6 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006cc4:	89bb      	ldrh	r3, [r7, #12]
 8006cc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006cca:	81bb      	strh	r3, [r7, #12]
      break;
 8006ccc:	e003      	b.n	8006cd6 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	73fb      	strb	r3, [r7, #15]
      break;
 8006cd2:	e000      	b.n	8006cd6 <USB_ActivateEndpoint+0x6a>
      break;
 8006cd4:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	441a      	add	r2, r3
 8006ce0:	89bb      	ldrh	r3, [r7, #12]
 8006ce2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ce6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4413      	add	r3, r2
 8006d00:	881b      	ldrh	r3, [r3, #0]
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	4313      	orrs	r3, r2
 8006d16:	b29c      	uxth	r4, r3
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	441a      	add	r2, r3
 8006d22:	4b8a      	ldr	r3, [pc, #552]	; (8006f4c <USB_ActivateEndpoint+0x2e0>)
 8006d24:	4323      	orrs	r3, r4
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	7b1b      	ldrb	r3, [r3, #12]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f040 8112 	bne.w	8006f58 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	785b      	ldrb	r3, [r3, #1]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d067      	beq.n	8006e0c <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006d3c:	687c      	ldr	r4, [r7, #4]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	441c      	add	r4, r3
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	011b      	lsls	r3, r3, #4
 8006d4e:	4423      	add	r3, r4
 8006d50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d54:	461c      	mov	r4, r3
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	88db      	ldrh	r3, [r3, #6]
 8006d5a:	085b      	lsrs	r3, r3, #1
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	005b      	lsls	r3, r3, #1
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4413      	add	r3, r2
 8006d6e:	881b      	ldrh	r3, [r3, #0]
 8006d70:	b29c      	uxth	r4, r3
 8006d72:	4623      	mov	r3, r4
 8006d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d014      	beq.n	8006da6 <USB_ActivateEndpoint+0x13a>
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	4413      	add	r3, r2
 8006d86:	881b      	ldrh	r3, [r3, #0]
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d92:	b29c      	uxth	r4, r3
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	441a      	add	r2, r3
 8006d9e:	4b6c      	ldr	r3, [pc, #432]	; (8006f50 <USB_ActivateEndpoint+0x2e4>)
 8006da0:	4323      	orrs	r3, r4
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	78db      	ldrb	r3, [r3, #3]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d018      	beq.n	8006de0 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4413      	add	r3, r2
 8006db8:	881b      	ldrh	r3, [r3, #0]
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dc4:	b29c      	uxth	r4, r3
 8006dc6:	f084 0320 	eor.w	r3, r4, #32
 8006dca:	b29c      	uxth	r4, r3
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	441a      	add	r2, r3
 8006dd6:	4b5d      	ldr	r3, [pc, #372]	; (8006f4c <USB_ActivateEndpoint+0x2e0>)
 8006dd8:	4323      	orrs	r3, r4
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	8013      	strh	r3, [r2, #0]
 8006dde:	e22b      	b.n	8007238 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	881b      	ldrh	r3, [r3, #0]
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006df2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006df6:	b29c      	uxth	r4, r3
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	441a      	add	r2, r3
 8006e02:	4b52      	ldr	r3, [pc, #328]	; (8006f4c <USB_ActivateEndpoint+0x2e0>)
 8006e04:	4323      	orrs	r3, r4
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	8013      	strh	r3, [r2, #0]
 8006e0a:	e215      	b.n	8007238 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006e0c:	687c      	ldr	r4, [r7, #4]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	441c      	add	r4, r3
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	011b      	lsls	r3, r3, #4
 8006e1e:	4423      	add	r3, r4
 8006e20:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006e24:	461c      	mov	r4, r3
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	88db      	ldrh	r3, [r3, #6]
 8006e2a:	085b      	lsrs	r3, r3, #1
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	005b      	lsls	r3, r3, #1
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006e34:	687c      	ldr	r4, [r7, #4]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	441c      	add	r4, r3
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	011b      	lsls	r3, r3, #4
 8006e46:	4423      	add	r3, r4
 8006e48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e4c:	461c      	mov	r4, r3
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d10e      	bne.n	8006e74 <USB_ActivateEndpoint+0x208>
 8006e56:	8823      	ldrh	r3, [r4, #0]
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	8023      	strh	r3, [r4, #0]
 8006e62:	8823      	ldrh	r3, [r4, #0]
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	8023      	strh	r3, [r4, #0]
 8006e72:	e02d      	b.n	8006ed0 <USB_ActivateEndpoint+0x264>
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	2b3e      	cmp	r3, #62	; 0x3e
 8006e7a:	d812      	bhi.n	8006ea2 <USB_ActivateEndpoint+0x236>
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	085b      	lsrs	r3, r3, #1
 8006e82:	60bb      	str	r3, [r7, #8]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	f003 0301 	and.w	r3, r3, #1
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d002      	beq.n	8006e96 <USB_ActivateEndpoint+0x22a>
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	3301      	adds	r3, #1
 8006e94:	60bb      	str	r3, [r7, #8]
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	029b      	lsls	r3, r3, #10
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	8023      	strh	r3, [r4, #0]
 8006ea0:	e016      	b.n	8006ed0 <USB_ActivateEndpoint+0x264>
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	095b      	lsrs	r3, r3, #5
 8006ea8:	60bb      	str	r3, [r7, #8]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	f003 031f 	and.w	r3, r3, #31
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d102      	bne.n	8006ebc <USB_ActivateEndpoint+0x250>
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	60bb      	str	r3, [r7, #8]
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	029b      	lsls	r3, r3, #10
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ec8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4413      	add	r3, r2
 8006eda:	881b      	ldrh	r3, [r3, #0]
 8006edc:	b29c      	uxth	r4, r3
 8006ede:	4623      	mov	r3, r4
 8006ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d014      	beq.n	8006f12 <USB_ActivateEndpoint+0x2a6>
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4413      	add	r3, r2
 8006ef2:	881b      	ldrh	r3, [r3, #0]
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006efe:	b29c      	uxth	r4, r3
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	441a      	add	r2, r3
 8006f0a:	4b12      	ldr	r3, [pc, #72]	; (8006f54 <USB_ActivateEndpoint+0x2e8>)
 8006f0c:	4323      	orrs	r3, r4
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	4413      	add	r3, r2
 8006f1c:	881b      	ldrh	r3, [r3, #0]
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f28:	b29c      	uxth	r4, r3
 8006f2a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006f2e:	b29c      	uxth	r4, r3
 8006f30:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006f34:	b29c      	uxth	r4, r3
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	441a      	add	r2, r3
 8006f40:	4b02      	ldr	r3, [pc, #8]	; (8006f4c <USB_ActivateEndpoint+0x2e0>)
 8006f42:	4323      	orrs	r3, r4
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	8013      	strh	r3, [r2, #0]
 8006f48:	e176      	b.n	8007238 <USB_ActivateEndpoint+0x5cc>
 8006f4a:	bf00      	nop
 8006f4c:	ffff8080 	.word	0xffff8080
 8006f50:	ffff80c0 	.word	0xffff80c0
 8006f54:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	881b      	ldrh	r3, [r3, #0]
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f6e:	b29c      	uxth	r4, r3
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	441a      	add	r2, r3
 8006f7a:	4b96      	ldr	r3, [pc, #600]	; (80071d4 <USB_ActivateEndpoint+0x568>)
 8006f7c:	4323      	orrs	r3, r4
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006f82:	687c      	ldr	r4, [r7, #4]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	441c      	add	r4, r3
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	011b      	lsls	r3, r3, #4
 8006f94:	4423      	add	r3, r4
 8006f96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f9a:	461c      	mov	r4, r3
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	891b      	ldrh	r3, [r3, #8]
 8006fa0:	085b      	lsrs	r3, r3, #1
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	005b      	lsls	r3, r3, #1
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	8023      	strh	r3, [r4, #0]
 8006faa:	687c      	ldr	r4, [r7, #4]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	441c      	add	r4, r3
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	011b      	lsls	r3, r3, #4
 8006fbc:	4423      	add	r3, r4
 8006fbe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006fc2:	461c      	mov	r4, r3
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	895b      	ldrh	r3, [r3, #10]
 8006fc8:	085b      	lsrs	r3, r3, #1
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	005b      	lsls	r3, r3, #1
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	785b      	ldrb	r3, [r3, #1]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	f040 8088 	bne.w	80070ec <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4413      	add	r3, r2
 8006fe6:	881b      	ldrh	r3, [r3, #0]
 8006fe8:	b29c      	uxth	r4, r3
 8006fea:	4623      	mov	r3, r4
 8006fec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d014      	beq.n	800701e <USB_ActivateEndpoint+0x3b2>
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	4413      	add	r3, r2
 8006ffe:	881b      	ldrh	r3, [r3, #0]
 8007000:	b29b      	uxth	r3, r3
 8007002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800700a:	b29c      	uxth	r4, r3
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	441a      	add	r2, r3
 8007016:	4b70      	ldr	r3, [pc, #448]	; (80071d8 <USB_ActivateEndpoint+0x56c>)
 8007018:	4323      	orrs	r3, r4
 800701a:	b29b      	uxth	r3, r3
 800701c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	881b      	ldrh	r3, [r3, #0]
 800702a:	b29c      	uxth	r4, r3
 800702c:	4623      	mov	r3, r4
 800702e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007032:	2b00      	cmp	r3, #0
 8007034:	d014      	beq.n	8007060 <USB_ActivateEndpoint+0x3f4>
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4413      	add	r3, r2
 8007040:	881b      	ldrh	r3, [r3, #0]
 8007042:	b29b      	uxth	r3, r3
 8007044:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800704c:	b29c      	uxth	r4, r3
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	441a      	add	r2, r3
 8007058:	4b60      	ldr	r3, [pc, #384]	; (80071dc <USB_ActivateEndpoint+0x570>)
 800705a:	4323      	orrs	r3, r4
 800705c:	b29b      	uxth	r3, r3
 800705e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	4413      	add	r3, r2
 800706a:	881b      	ldrh	r3, [r3, #0]
 800706c:	b29b      	uxth	r3, r3
 800706e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007076:	b29c      	uxth	r4, r3
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	441a      	add	r2, r3
 8007082:	4b56      	ldr	r3, [pc, #344]	; (80071dc <USB_ActivateEndpoint+0x570>)
 8007084:	4323      	orrs	r3, r4
 8007086:	b29b      	uxth	r3, r3
 8007088:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	4413      	add	r3, r2
 8007094:	881b      	ldrh	r3, [r3, #0]
 8007096:	b29b      	uxth	r3, r3
 8007098:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800709c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a0:	b29c      	uxth	r4, r3
 80070a2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80070a6:	b29c      	uxth	r4, r3
 80070a8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80070ac:	b29c      	uxth	r4, r3
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	441a      	add	r2, r3
 80070b8:	4b49      	ldr	r3, [pc, #292]	; (80071e0 <USB_ActivateEndpoint+0x574>)
 80070ba:	4323      	orrs	r3, r4
 80070bc:	b29b      	uxth	r3, r3
 80070be:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4413      	add	r3, r2
 80070ca:	881b      	ldrh	r3, [r3, #0]
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070d6:	b29c      	uxth	r4, r3
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	441a      	add	r2, r3
 80070e2:	4b3f      	ldr	r3, [pc, #252]	; (80071e0 <USB_ActivateEndpoint+0x574>)
 80070e4:	4323      	orrs	r3, r4
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	8013      	strh	r3, [r2, #0]
 80070ea:	e0a5      	b.n	8007238 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	4413      	add	r3, r2
 80070f6:	881b      	ldrh	r3, [r3, #0]
 80070f8:	b29c      	uxth	r4, r3
 80070fa:	4623      	mov	r3, r4
 80070fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d014      	beq.n	800712e <USB_ActivateEndpoint+0x4c2>
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	4413      	add	r3, r2
 800710e:	881b      	ldrh	r3, [r3, #0]
 8007110:	b29b      	uxth	r3, r3
 8007112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800711a:	b29c      	uxth	r4, r3
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	441a      	add	r2, r3
 8007126:	4b2c      	ldr	r3, [pc, #176]	; (80071d8 <USB_ActivateEndpoint+0x56c>)
 8007128:	4323      	orrs	r3, r4
 800712a:	b29b      	uxth	r3, r3
 800712c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4413      	add	r3, r2
 8007138:	881b      	ldrh	r3, [r3, #0]
 800713a:	b29c      	uxth	r4, r3
 800713c:	4623      	mov	r3, r4
 800713e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007142:	2b00      	cmp	r3, #0
 8007144:	d014      	beq.n	8007170 <USB_ActivateEndpoint+0x504>
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	4413      	add	r3, r2
 8007150:	881b      	ldrh	r3, [r3, #0]
 8007152:	b29b      	uxth	r3, r3
 8007154:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800715c:	b29c      	uxth	r4, r3
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	441a      	add	r2, r3
 8007168:	4b1c      	ldr	r3, [pc, #112]	; (80071dc <USB_ActivateEndpoint+0x570>)
 800716a:	4323      	orrs	r3, r4
 800716c:	b29b      	uxth	r3, r3
 800716e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	4413      	add	r3, r2
 800717a:	881b      	ldrh	r3, [r3, #0]
 800717c:	b29b      	uxth	r3, r3
 800717e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007186:	b29c      	uxth	r4, r3
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	441a      	add	r2, r3
 8007192:	4b11      	ldr	r3, [pc, #68]	; (80071d8 <USB_ActivateEndpoint+0x56c>)
 8007194:	4323      	orrs	r3, r4
 8007196:	b29b      	uxth	r3, r3
 8007198:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	78db      	ldrb	r3, [r3, #3]
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d020      	beq.n	80071e4 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	4413      	add	r3, r2
 80071ac:	881b      	ldrh	r3, [r3, #0]
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071b8:	b29c      	uxth	r4, r3
 80071ba:	f084 0320 	eor.w	r3, r4, #32
 80071be:	b29c      	uxth	r4, r3
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	441a      	add	r2, r3
 80071ca:	4b05      	ldr	r3, [pc, #20]	; (80071e0 <USB_ActivateEndpoint+0x574>)
 80071cc:	4323      	orrs	r3, r4
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	8013      	strh	r3, [r2, #0]
 80071d2:	e01c      	b.n	800720e <USB_ActivateEndpoint+0x5a2>
 80071d4:	ffff8180 	.word	0xffff8180
 80071d8:	ffffc080 	.word	0xffffc080
 80071dc:	ffff80c0 	.word	0xffff80c0
 80071e0:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4413      	add	r3, r2
 80071ee:	881b      	ldrh	r3, [r3, #0]
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071fa:	b29c      	uxth	r4, r3
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	441a      	add	r2, r3
 8007206:	4b0f      	ldr	r3, [pc, #60]	; (8007244 <USB_ActivateEndpoint+0x5d8>)
 8007208:	4323      	orrs	r3, r4
 800720a:	b29b      	uxth	r3, r3
 800720c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4413      	add	r3, r2
 8007218:	881b      	ldrh	r3, [r3, #0]
 800721a:	b29b      	uxth	r3, r3
 800721c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007224:	b29c      	uxth	r4, r3
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	441a      	add	r2, r3
 8007230:	4b04      	ldr	r3, [pc, #16]	; (8007244 <USB_ActivateEndpoint+0x5d8>)
 8007232:	4323      	orrs	r3, r4
 8007234:	b29b      	uxth	r3, r3
 8007236:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007238:	7bfb      	ldrb	r3, [r7, #15]
}
 800723a:	4618      	mov	r0, r3
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bc90      	pop	{r4, r7}
 8007242:	4770      	bx	lr
 8007244:	ffff8080 	.word	0xffff8080

08007248 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007248:	b490      	push	{r4, r7}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	7b1b      	ldrb	r3, [r3, #12]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d171      	bne.n	800733e <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	785b      	ldrb	r3, [r3, #1]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d036      	beq.n	80072d0 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4413      	add	r3, r2
 800726c:	881b      	ldrh	r3, [r3, #0]
 800726e:	b29c      	uxth	r4, r3
 8007270:	4623      	mov	r3, r4
 8007272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007276:	2b00      	cmp	r3, #0
 8007278:	d014      	beq.n	80072a4 <USB_DeactivateEndpoint+0x5c>
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	4413      	add	r3, r2
 8007284:	881b      	ldrh	r3, [r3, #0]
 8007286:	b29b      	uxth	r3, r3
 8007288:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800728c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007290:	b29c      	uxth	r4, r3
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	441a      	add	r2, r3
 800729c:	4b6b      	ldr	r3, [pc, #428]	; (800744c <USB_DeactivateEndpoint+0x204>)
 800729e:	4323      	orrs	r3, r4
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	881b      	ldrh	r3, [r3, #0]
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072ba:	b29c      	uxth	r4, r3
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	441a      	add	r2, r3
 80072c6:	4b62      	ldr	r3, [pc, #392]	; (8007450 <USB_DeactivateEndpoint+0x208>)
 80072c8:	4323      	orrs	r3, r4
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	8013      	strh	r3, [r2, #0]
 80072ce:	e144      	b.n	800755a <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4413      	add	r3, r2
 80072da:	881b      	ldrh	r3, [r3, #0]
 80072dc:	b29c      	uxth	r4, r3
 80072de:	4623      	mov	r3, r4
 80072e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d014      	beq.n	8007312 <USB_DeactivateEndpoint+0xca>
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	881b      	ldrh	r3, [r3, #0]
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072fe:	b29c      	uxth	r4, r3
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	441a      	add	r2, r3
 800730a:	4b52      	ldr	r3, [pc, #328]	; (8007454 <USB_DeactivateEndpoint+0x20c>)
 800730c:	4323      	orrs	r3, r4
 800730e:	b29b      	uxth	r3, r3
 8007310:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4413      	add	r3, r2
 800731c:	881b      	ldrh	r3, [r3, #0]
 800731e:	b29b      	uxth	r3, r3
 8007320:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007328:	b29c      	uxth	r4, r3
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	441a      	add	r2, r3
 8007334:	4b46      	ldr	r3, [pc, #280]	; (8007450 <USB_DeactivateEndpoint+0x208>)
 8007336:	4323      	orrs	r3, r4
 8007338:	b29b      	uxth	r3, r3
 800733a:	8013      	strh	r3, [r2, #0]
 800733c:	e10d      	b.n	800755a <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	785b      	ldrb	r3, [r3, #1]
 8007342:	2b00      	cmp	r3, #0
 8007344:	f040 8088 	bne.w	8007458 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4413      	add	r3, r2
 8007352:	881b      	ldrh	r3, [r3, #0]
 8007354:	b29c      	uxth	r4, r3
 8007356:	4623      	mov	r3, r4
 8007358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d014      	beq.n	800738a <USB_DeactivateEndpoint+0x142>
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4413      	add	r3, r2
 800736a:	881b      	ldrh	r3, [r3, #0]
 800736c:	b29b      	uxth	r3, r3
 800736e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007376:	b29c      	uxth	r4, r3
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	441a      	add	r2, r3
 8007382:	4b34      	ldr	r3, [pc, #208]	; (8007454 <USB_DeactivateEndpoint+0x20c>)
 8007384:	4323      	orrs	r3, r4
 8007386:	b29b      	uxth	r3, r3
 8007388:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4413      	add	r3, r2
 8007394:	881b      	ldrh	r3, [r3, #0]
 8007396:	b29c      	uxth	r4, r3
 8007398:	4623      	mov	r3, r4
 800739a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d014      	beq.n	80073cc <USB_DeactivateEndpoint+0x184>
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	4413      	add	r3, r2
 80073ac:	881b      	ldrh	r3, [r3, #0]
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073b8:	b29c      	uxth	r4, r3
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	441a      	add	r2, r3
 80073c4:	4b21      	ldr	r3, [pc, #132]	; (800744c <USB_DeactivateEndpoint+0x204>)
 80073c6:	4323      	orrs	r3, r4
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	4413      	add	r3, r2
 80073d6:	881b      	ldrh	r3, [r3, #0]
 80073d8:	b29b      	uxth	r3, r3
 80073da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073e2:	b29c      	uxth	r4, r3
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	441a      	add	r2, r3
 80073ee:	4b17      	ldr	r3, [pc, #92]	; (800744c <USB_DeactivateEndpoint+0x204>)
 80073f0:	4323      	orrs	r3, r4
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	4413      	add	r3, r2
 8007400:	881b      	ldrh	r3, [r3, #0]
 8007402:	b29b      	uxth	r3, r3
 8007404:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800740c:	b29c      	uxth	r4, r3
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	441a      	add	r2, r3
 8007418:	4b0d      	ldr	r3, [pc, #52]	; (8007450 <USB_DeactivateEndpoint+0x208>)
 800741a:	4323      	orrs	r3, r4
 800741c:	b29b      	uxth	r3, r3
 800741e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	881b      	ldrh	r3, [r3, #0]
 800742c:	b29b      	uxth	r3, r3
 800742e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007432:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007436:	b29c      	uxth	r4, r3
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	441a      	add	r2, r3
 8007442:	4b03      	ldr	r3, [pc, #12]	; (8007450 <USB_DeactivateEndpoint+0x208>)
 8007444:	4323      	orrs	r3, r4
 8007446:	b29b      	uxth	r3, r3
 8007448:	8013      	strh	r3, [r2, #0]
 800744a:	e086      	b.n	800755a <USB_DeactivateEndpoint+0x312>
 800744c:	ffff80c0 	.word	0xffff80c0
 8007450:	ffff8080 	.word	0xffff8080
 8007454:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	4413      	add	r3, r2
 8007462:	881b      	ldrh	r3, [r3, #0]
 8007464:	b29c      	uxth	r4, r3
 8007466:	4623      	mov	r3, r4
 8007468:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d014      	beq.n	800749a <USB_DeactivateEndpoint+0x252>
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4413      	add	r3, r2
 800747a:	881b      	ldrh	r3, [r3, #0]
 800747c:	b29b      	uxth	r3, r3
 800747e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007486:	b29c      	uxth	r4, r3
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	441a      	add	r2, r3
 8007492:	4b35      	ldr	r3, [pc, #212]	; (8007568 <USB_DeactivateEndpoint+0x320>)
 8007494:	4323      	orrs	r3, r4
 8007496:	b29b      	uxth	r3, r3
 8007498:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	4413      	add	r3, r2
 80074a4:	881b      	ldrh	r3, [r3, #0]
 80074a6:	b29c      	uxth	r4, r3
 80074a8:	4623      	mov	r3, r4
 80074aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d014      	beq.n	80074dc <USB_DeactivateEndpoint+0x294>
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	4413      	add	r3, r2
 80074bc:	881b      	ldrh	r3, [r3, #0]
 80074be:	b29b      	uxth	r3, r3
 80074c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074c8:	b29c      	uxth	r4, r3
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	441a      	add	r2, r3
 80074d4:	4b25      	ldr	r3, [pc, #148]	; (800756c <USB_DeactivateEndpoint+0x324>)
 80074d6:	4323      	orrs	r3, r4
 80074d8:	b29b      	uxth	r3, r3
 80074da:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	881b      	ldrh	r3, [r3, #0]
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074f2:	b29c      	uxth	r4, r3
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	441a      	add	r2, r3
 80074fe:	4b1a      	ldr	r3, [pc, #104]	; (8007568 <USB_DeactivateEndpoint+0x320>)
 8007500:	4323      	orrs	r3, r4
 8007502:	b29b      	uxth	r3, r3
 8007504:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	4413      	add	r3, r2
 8007510:	881b      	ldrh	r3, [r3, #0]
 8007512:	b29b      	uxth	r3, r3
 8007514:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007518:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800751c:	b29c      	uxth	r4, r3
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	441a      	add	r2, r3
 8007528:	4b11      	ldr	r3, [pc, #68]	; (8007570 <USB_DeactivateEndpoint+0x328>)
 800752a:	4323      	orrs	r3, r4
 800752c:	b29b      	uxth	r3, r3
 800752e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	4413      	add	r3, r2
 800753a:	881b      	ldrh	r3, [r3, #0]
 800753c:	b29b      	uxth	r3, r3
 800753e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007546:	b29c      	uxth	r4, r3
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	441a      	add	r2, r3
 8007552:	4b07      	ldr	r3, [pc, #28]	; (8007570 <USB_DeactivateEndpoint+0x328>)
 8007554:	4323      	orrs	r3, r4
 8007556:	b29b      	uxth	r3, r3
 8007558:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bc90      	pop	{r4, r7}
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	ffffc080 	.word	0xffffc080
 800756c:	ffff80c0 	.word	0xffff80c0
 8007570:	ffff8080 	.word	0xffff8080

08007574 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007574:	b590      	push	{r4, r7, lr}
 8007576:	b08d      	sub	sp, #52	; 0x34
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	785b      	ldrb	r3, [r3, #1]
 8007582:	2b01      	cmp	r3, #1
 8007584:	f040 8160 	bne.w	8007848 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	699a      	ldr	r2, [r3, #24]
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	429a      	cmp	r2, r3
 8007592:	d909      	bls.n	80075a8 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	699a      	ldr	r2, [r3, #24]
 800759e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a0:	1ad2      	subs	r2, r2, r3
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	619a      	str	r2, [r3, #24]
 80075a6:	e005      	b.n	80075b4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	699b      	ldr	r3, [r3, #24]
 80075ac:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	2200      	movs	r2, #0
 80075b2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	7b1b      	ldrb	r3, [r3, #12]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d119      	bne.n	80075f0 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	6959      	ldr	r1, [r3, #20]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	88da      	ldrh	r2, [r3, #6]
 80075c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fba2 	bl	8007d12 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80075ce:	687c      	ldr	r4, [r7, #4]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	441c      	add	r4, r3
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	011b      	lsls	r3, r3, #4
 80075e0:	4423      	add	r3, r4
 80075e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80075e6:	461c      	mov	r4, r3
 80075e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	8023      	strh	r3, [r4, #0]
 80075ee:	e10f      	b.n	8007810 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	4413      	add	r3, r2
 80075fa:	881b      	ldrh	r3, [r3, #0]
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007602:	2b00      	cmp	r3, #0
 8007604:	d065      	beq.n	80076d2 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007606:	687c      	ldr	r4, [r7, #4]
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	785b      	ldrb	r3, [r3, #1]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d148      	bne.n	80076a2 <USB_EPStartXfer+0x12e>
 8007610:	687c      	ldr	r4, [r7, #4]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007618:	b29b      	uxth	r3, r3
 800761a:	441c      	add	r4, r3
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	011b      	lsls	r3, r3, #4
 8007622:	4423      	add	r3, r4
 8007624:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007628:	461c      	mov	r4, r3
 800762a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10e      	bne.n	800764e <USB_EPStartXfer+0xda>
 8007630:	8823      	ldrh	r3, [r4, #0]
 8007632:	b29b      	uxth	r3, r3
 8007634:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007638:	b29b      	uxth	r3, r3
 800763a:	8023      	strh	r3, [r4, #0]
 800763c:	8823      	ldrh	r3, [r4, #0]
 800763e:	b29b      	uxth	r3, r3
 8007640:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007644:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007648:	b29b      	uxth	r3, r3
 800764a:	8023      	strh	r3, [r4, #0]
 800764c:	e03d      	b.n	80076ca <USB_EPStartXfer+0x156>
 800764e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007650:	2b3e      	cmp	r3, #62	; 0x3e
 8007652:	d810      	bhi.n	8007676 <USB_EPStartXfer+0x102>
 8007654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007656:	085b      	lsrs	r3, r3, #1
 8007658:	627b      	str	r3, [r7, #36]	; 0x24
 800765a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765c:	f003 0301 	and.w	r3, r3, #1
 8007660:	2b00      	cmp	r3, #0
 8007662:	d002      	beq.n	800766a <USB_EPStartXfer+0xf6>
 8007664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007666:	3301      	adds	r3, #1
 8007668:	627b      	str	r3, [r7, #36]	; 0x24
 800766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766c:	b29b      	uxth	r3, r3
 800766e:	029b      	lsls	r3, r3, #10
 8007670:	b29b      	uxth	r3, r3
 8007672:	8023      	strh	r3, [r4, #0]
 8007674:	e029      	b.n	80076ca <USB_EPStartXfer+0x156>
 8007676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007678:	095b      	lsrs	r3, r3, #5
 800767a:	627b      	str	r3, [r7, #36]	; 0x24
 800767c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767e:	f003 031f 	and.w	r3, r3, #31
 8007682:	2b00      	cmp	r3, #0
 8007684:	d102      	bne.n	800768c <USB_EPStartXfer+0x118>
 8007686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007688:	3b01      	subs	r3, #1
 800768a:	627b      	str	r3, [r7, #36]	; 0x24
 800768c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768e:	b29b      	uxth	r3, r3
 8007690:	029b      	lsls	r3, r3, #10
 8007692:	b29b      	uxth	r3, r3
 8007694:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007698:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800769c:	b29b      	uxth	r3, r3
 800769e:	8023      	strh	r3, [r4, #0]
 80076a0:	e013      	b.n	80076ca <USB_EPStartXfer+0x156>
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	785b      	ldrb	r3, [r3, #1]
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d10f      	bne.n	80076ca <USB_EPStartXfer+0x156>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	441c      	add	r4, r3
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	011b      	lsls	r3, r3, #4
 80076ba:	4423      	add	r3, r4
 80076bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80076c0:	60fb      	str	r3, [r7, #12]
 80076c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	895b      	ldrh	r3, [r3, #10]
 80076ce:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80076d0:	e063      	b.n	800779a <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	785b      	ldrb	r3, [r3, #1]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d148      	bne.n	800776c <USB_EPStartXfer+0x1f8>
 80076da:	687c      	ldr	r4, [r7, #4]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	441c      	add	r4, r3
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	011b      	lsls	r3, r3, #4
 80076ec:	4423      	add	r3, r4
 80076ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80076f2:	461c      	mov	r4, r3
 80076f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d10e      	bne.n	8007718 <USB_EPStartXfer+0x1a4>
 80076fa:	8823      	ldrh	r3, [r4, #0]
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007702:	b29b      	uxth	r3, r3
 8007704:	8023      	strh	r3, [r4, #0]
 8007706:	8823      	ldrh	r3, [r4, #0]
 8007708:	b29b      	uxth	r3, r3
 800770a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800770e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007712:	b29b      	uxth	r3, r3
 8007714:	8023      	strh	r3, [r4, #0]
 8007716:	e03d      	b.n	8007794 <USB_EPStartXfer+0x220>
 8007718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771a:	2b3e      	cmp	r3, #62	; 0x3e
 800771c:	d810      	bhi.n	8007740 <USB_EPStartXfer+0x1cc>
 800771e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007720:	085b      	lsrs	r3, r3, #1
 8007722:	623b      	str	r3, [r7, #32]
 8007724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007726:	f003 0301 	and.w	r3, r3, #1
 800772a:	2b00      	cmp	r3, #0
 800772c:	d002      	beq.n	8007734 <USB_EPStartXfer+0x1c0>
 800772e:	6a3b      	ldr	r3, [r7, #32]
 8007730:	3301      	adds	r3, #1
 8007732:	623b      	str	r3, [r7, #32]
 8007734:	6a3b      	ldr	r3, [r7, #32]
 8007736:	b29b      	uxth	r3, r3
 8007738:	029b      	lsls	r3, r3, #10
 800773a:	b29b      	uxth	r3, r3
 800773c:	8023      	strh	r3, [r4, #0]
 800773e:	e029      	b.n	8007794 <USB_EPStartXfer+0x220>
 8007740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007742:	095b      	lsrs	r3, r3, #5
 8007744:	623b      	str	r3, [r7, #32]
 8007746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007748:	f003 031f 	and.w	r3, r3, #31
 800774c:	2b00      	cmp	r3, #0
 800774e:	d102      	bne.n	8007756 <USB_EPStartXfer+0x1e2>
 8007750:	6a3b      	ldr	r3, [r7, #32]
 8007752:	3b01      	subs	r3, #1
 8007754:	623b      	str	r3, [r7, #32]
 8007756:	6a3b      	ldr	r3, [r7, #32]
 8007758:	b29b      	uxth	r3, r3
 800775a:	029b      	lsls	r3, r3, #10
 800775c:	b29b      	uxth	r3, r3
 800775e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007766:	b29b      	uxth	r3, r3
 8007768:	8023      	strh	r3, [r4, #0]
 800776a:	e013      	b.n	8007794 <USB_EPStartXfer+0x220>
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	785b      	ldrb	r3, [r3, #1]
 8007770:	2b01      	cmp	r3, #1
 8007772:	d10f      	bne.n	8007794 <USB_EPStartXfer+0x220>
 8007774:	687c      	ldr	r4, [r7, #4]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800777c:	b29b      	uxth	r3, r3
 800777e:	441c      	add	r4, r3
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	011b      	lsls	r3, r3, #4
 8007786:	4423      	add	r3, r4
 8007788:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800778c:	461c      	mov	r4, r3
 800778e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007790:	b29b      	uxth	r3, r3
 8007792:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	891b      	ldrh	r3, [r3, #8]
 8007798:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	6959      	ldr	r1, [r3, #20]
 800779e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fab4 	bl	8007d12 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	785b      	ldrb	r3, [r3, #1]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d115      	bne.n	80077de <USB_EPStartXfer+0x26a>
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	4413      	add	r3, r2
 80077bc:	881b      	ldrh	r3, [r3, #0]
 80077be:	b29b      	uxth	r3, r3
 80077c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077c8:	b29c      	uxth	r4, r3
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	441a      	add	r2, r3
 80077d4:	4b9a      	ldr	r3, [pc, #616]	; (8007a40 <USB_EPStartXfer+0x4cc>)
 80077d6:	4323      	orrs	r3, r4
 80077d8:	b29b      	uxth	r3, r3
 80077da:	8013      	strh	r3, [r2, #0]
 80077dc:	e018      	b.n	8007810 <USB_EPStartXfer+0x29c>
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	785b      	ldrb	r3, [r3, #1]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d114      	bne.n	8007810 <USB_EPStartXfer+0x29c>
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4413      	add	r3, r2
 80077f0:	881b      	ldrh	r3, [r3, #0]
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077fc:	b29c      	uxth	r4, r3
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	441a      	add	r2, r3
 8007808:	4b8e      	ldr	r3, [pc, #568]	; (8007a44 <USB_EPStartXfer+0x4d0>)
 800780a:	4323      	orrs	r3, r4
 800780c:	b29b      	uxth	r3, r3
 800780e:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	4413      	add	r3, r2
 800781a:	881b      	ldrh	r3, [r3, #0]
 800781c:	b29b      	uxth	r3, r3
 800781e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007826:	b29c      	uxth	r4, r3
 8007828:	f084 0310 	eor.w	r3, r4, #16
 800782c:	b29c      	uxth	r4, r3
 800782e:	f084 0320 	eor.w	r3, r4, #32
 8007832:	b29c      	uxth	r4, r3
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	441a      	add	r2, r3
 800783e:	4b82      	ldr	r3, [pc, #520]	; (8007a48 <USB_EPStartXfer+0x4d4>)
 8007840:	4323      	orrs	r3, r4
 8007842:	b29b      	uxth	r3, r3
 8007844:	8013      	strh	r3, [r2, #0]
 8007846:	e146      	b.n	8007ad6 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	699a      	ldr	r2, [r3, #24]
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	429a      	cmp	r2, r3
 8007852:	d909      	bls.n	8007868 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	699a      	ldr	r2, [r3, #24]
 800785e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007860:	1ad2      	subs	r2, r2, r3
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	619a      	str	r2, [r3, #24]
 8007866:	e005      	b.n	8007874 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	2200      	movs	r2, #0
 8007872:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	7b1b      	ldrb	r3, [r3, #12]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d148      	bne.n	800790e <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800787c:	687c      	ldr	r4, [r7, #4]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007884:	b29b      	uxth	r3, r3
 8007886:	441c      	add	r4, r3
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	011b      	lsls	r3, r3, #4
 800788e:	4423      	add	r3, r4
 8007890:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007894:	461c      	mov	r4, r3
 8007896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10e      	bne.n	80078ba <USB_EPStartXfer+0x346>
 800789c:	8823      	ldrh	r3, [r4, #0]
 800789e:	b29b      	uxth	r3, r3
 80078a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	8023      	strh	r3, [r4, #0]
 80078a8:	8823      	ldrh	r3, [r4, #0]
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	8023      	strh	r3, [r4, #0]
 80078b8:	e0f2      	b.n	8007aa0 <USB_EPStartXfer+0x52c>
 80078ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078bc:	2b3e      	cmp	r3, #62	; 0x3e
 80078be:	d810      	bhi.n	80078e2 <USB_EPStartXfer+0x36e>
 80078c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c2:	085b      	lsrs	r3, r3, #1
 80078c4:	61fb      	str	r3, [r7, #28]
 80078c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c8:	f003 0301 	and.w	r3, r3, #1
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d002      	beq.n	80078d6 <USB_EPStartXfer+0x362>
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	3301      	adds	r3, #1
 80078d4:	61fb      	str	r3, [r7, #28]
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	b29b      	uxth	r3, r3
 80078da:	029b      	lsls	r3, r3, #10
 80078dc:	b29b      	uxth	r3, r3
 80078de:	8023      	strh	r3, [r4, #0]
 80078e0:	e0de      	b.n	8007aa0 <USB_EPStartXfer+0x52c>
 80078e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e4:	095b      	lsrs	r3, r3, #5
 80078e6:	61fb      	str	r3, [r7, #28]
 80078e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ea:	f003 031f 	and.w	r3, r3, #31
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d102      	bne.n	80078f8 <USB_EPStartXfer+0x384>
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	3b01      	subs	r3, #1
 80078f6:	61fb      	str	r3, [r7, #28]
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	029b      	lsls	r3, r3, #10
 80078fe:	b29b      	uxth	r3, r3
 8007900:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007904:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007908:	b29b      	uxth	r3, r3
 800790a:	8023      	strh	r3, [r4, #0]
 800790c:	e0c8      	b.n	8007aa0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	785b      	ldrb	r3, [r3, #1]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d148      	bne.n	80079a8 <USB_EPStartXfer+0x434>
 8007916:	687c      	ldr	r4, [r7, #4]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800791e:	b29b      	uxth	r3, r3
 8007920:	441c      	add	r4, r3
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	011b      	lsls	r3, r3, #4
 8007928:	4423      	add	r3, r4
 800792a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800792e:	461c      	mov	r4, r3
 8007930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10e      	bne.n	8007954 <USB_EPStartXfer+0x3e0>
 8007936:	8823      	ldrh	r3, [r4, #0]
 8007938:	b29b      	uxth	r3, r3
 800793a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800793e:	b29b      	uxth	r3, r3
 8007940:	8023      	strh	r3, [r4, #0]
 8007942:	8823      	ldrh	r3, [r4, #0]
 8007944:	b29b      	uxth	r3, r3
 8007946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800794a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800794e:	b29b      	uxth	r3, r3
 8007950:	8023      	strh	r3, [r4, #0]
 8007952:	e03d      	b.n	80079d0 <USB_EPStartXfer+0x45c>
 8007954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007956:	2b3e      	cmp	r3, #62	; 0x3e
 8007958:	d810      	bhi.n	800797c <USB_EPStartXfer+0x408>
 800795a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795c:	085b      	lsrs	r3, r3, #1
 800795e:	61bb      	str	r3, [r7, #24]
 8007960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007962:	f003 0301 	and.w	r3, r3, #1
 8007966:	2b00      	cmp	r3, #0
 8007968:	d002      	beq.n	8007970 <USB_EPStartXfer+0x3fc>
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	3301      	adds	r3, #1
 800796e:	61bb      	str	r3, [r7, #24]
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	b29b      	uxth	r3, r3
 8007974:	029b      	lsls	r3, r3, #10
 8007976:	b29b      	uxth	r3, r3
 8007978:	8023      	strh	r3, [r4, #0]
 800797a:	e029      	b.n	80079d0 <USB_EPStartXfer+0x45c>
 800797c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797e:	095b      	lsrs	r3, r3, #5
 8007980:	61bb      	str	r3, [r7, #24]
 8007982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007984:	f003 031f 	and.w	r3, r3, #31
 8007988:	2b00      	cmp	r3, #0
 800798a:	d102      	bne.n	8007992 <USB_EPStartXfer+0x41e>
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	3b01      	subs	r3, #1
 8007990:	61bb      	str	r3, [r7, #24]
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	b29b      	uxth	r3, r3
 8007996:	029b      	lsls	r3, r3, #10
 8007998:	b29b      	uxth	r3, r3
 800799a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800799e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	8023      	strh	r3, [r4, #0]
 80079a6:	e013      	b.n	80079d0 <USB_EPStartXfer+0x45c>
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	785b      	ldrb	r3, [r3, #1]
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d10f      	bne.n	80079d0 <USB_EPStartXfer+0x45c>
 80079b0:	687c      	ldr	r4, [r7, #4]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	441c      	add	r4, r3
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	011b      	lsls	r3, r3, #4
 80079c2:	4423      	add	r3, r4
 80079c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80079c8:	461c      	mov	r4, r3
 80079ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	8023      	strh	r3, [r4, #0]
 80079d0:	687c      	ldr	r4, [r7, #4]
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	785b      	ldrb	r3, [r3, #1]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d14e      	bne.n	8007a78 <USB_EPStartXfer+0x504>
 80079da:	687c      	ldr	r4, [r7, #4]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	441c      	add	r4, r3
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	011b      	lsls	r3, r3, #4
 80079ec:	4423      	add	r3, r4
 80079ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80079f2:	461c      	mov	r4, r3
 80079f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10e      	bne.n	8007a18 <USB_EPStartXfer+0x4a4>
 80079fa:	8823      	ldrh	r3, [r4, #0]
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	8023      	strh	r3, [r4, #0]
 8007a06:	8823      	ldrh	r3, [r4, #0]
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	8023      	strh	r3, [r4, #0]
 8007a16:	e043      	b.n	8007aa0 <USB_EPStartXfer+0x52c>
 8007a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1a:	2b3e      	cmp	r3, #62	; 0x3e
 8007a1c:	d816      	bhi.n	8007a4c <USB_EPStartXfer+0x4d8>
 8007a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a20:	085b      	lsrs	r3, r3, #1
 8007a22:	617b      	str	r3, [r7, #20]
 8007a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a26:	f003 0301 	and.w	r3, r3, #1
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d002      	beq.n	8007a34 <USB_EPStartXfer+0x4c0>
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	3301      	adds	r3, #1
 8007a32:	617b      	str	r3, [r7, #20]
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	029b      	lsls	r3, r3, #10
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	8023      	strh	r3, [r4, #0]
 8007a3e:	e02f      	b.n	8007aa0 <USB_EPStartXfer+0x52c>
 8007a40:	ffff80c0 	.word	0xffff80c0
 8007a44:	ffffc080 	.word	0xffffc080
 8007a48:	ffff8080 	.word	0xffff8080
 8007a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4e:	095b      	lsrs	r3, r3, #5
 8007a50:	617b      	str	r3, [r7, #20]
 8007a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a54:	f003 031f 	and.w	r3, r3, #31
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d102      	bne.n	8007a62 <USB_EPStartXfer+0x4ee>
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	617b      	str	r3, [r7, #20]
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	029b      	lsls	r3, r3, #10
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	8023      	strh	r3, [r4, #0]
 8007a76:	e013      	b.n	8007aa0 <USB_EPStartXfer+0x52c>
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	785b      	ldrb	r3, [r3, #1]
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d10f      	bne.n	8007aa0 <USB_EPStartXfer+0x52c>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	441c      	add	r4, r3
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	011b      	lsls	r3, r3, #4
 8007a90:	4423      	add	r3, r4
 8007a92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a96:	613b      	str	r3, [r7, #16]
 8007a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	4413      	add	r3, r2
 8007aaa:	881b      	ldrh	r3, [r3, #0]
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ab6:	b29c      	uxth	r4, r3
 8007ab8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007abc:	b29c      	uxth	r4, r3
 8007abe:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007ac2:	b29c      	uxth	r4, r3
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	441a      	add	r2, r3
 8007ace:	4b04      	ldr	r3, [pc, #16]	; (8007ae0 <USB_EPStartXfer+0x56c>)
 8007ad0:	4323      	orrs	r3, r4
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3734      	adds	r7, #52	; 0x34
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd90      	pop	{r4, r7, pc}
 8007ae0:	ffff8080 	.word	0xffff8080

08007ae4 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007ae4:	b490      	push	{r4, r7}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	785b      	ldrb	r3, [r3, #1]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d018      	beq.n	8007b28 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	4413      	add	r3, r2
 8007b00:	881b      	ldrh	r3, [r3, #0]
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b0c:	b29c      	uxth	r4, r3
 8007b0e:	f084 0310 	eor.w	r3, r4, #16
 8007b12:	b29c      	uxth	r4, r3
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	441a      	add	r2, r3
 8007b1e:	4b11      	ldr	r3, [pc, #68]	; (8007b64 <USB_EPSetStall+0x80>)
 8007b20:	4323      	orrs	r3, r4
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	8013      	strh	r3, [r2, #0]
 8007b26:	e017      	b.n	8007b58 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4413      	add	r3, r2
 8007b32:	881b      	ldrh	r3, [r3, #0]
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b3e:	b29c      	uxth	r4, r3
 8007b40:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007b44:	b29c      	uxth	r4, r3
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	441a      	add	r2, r3
 8007b50:	4b04      	ldr	r3, [pc, #16]	; (8007b64 <USB_EPSetStall+0x80>)
 8007b52:	4323      	orrs	r3, r4
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bc90      	pop	{r4, r7}
 8007b62:	4770      	bx	lr
 8007b64:	ffff8080 	.word	0xffff8080

08007b68 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b68:	b490      	push	{r4, r7}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	7b1b      	ldrb	r3, [r3, #12]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d17d      	bne.n	8007c76 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	785b      	ldrb	r3, [r3, #1]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d03d      	beq.n	8007bfe <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	4413      	add	r3, r2
 8007b8c:	881b      	ldrh	r3, [r3, #0]
 8007b8e:	b29c      	uxth	r4, r3
 8007b90:	4623      	mov	r3, r4
 8007b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d014      	beq.n	8007bc4 <USB_EPClearStall+0x5c>
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	4413      	add	r3, r2
 8007ba4:	881b      	ldrh	r3, [r3, #0]
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bb0:	b29c      	uxth	r4, r3
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	441a      	add	r2, r3
 8007bbc:	4b31      	ldr	r3, [pc, #196]	; (8007c84 <USB_EPClearStall+0x11c>)
 8007bbe:	4323      	orrs	r3, r4
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	78db      	ldrb	r3, [r3, #3]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d054      	beq.n	8007c76 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4413      	add	r3, r2
 8007bd6:	881b      	ldrh	r3, [r3, #0]
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007be2:	b29c      	uxth	r4, r3
 8007be4:	f084 0320 	eor.w	r3, r4, #32
 8007be8:	b29c      	uxth	r4, r3
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	441a      	add	r2, r3
 8007bf4:	4b24      	ldr	r3, [pc, #144]	; (8007c88 <USB_EPClearStall+0x120>)
 8007bf6:	4323      	orrs	r3, r4
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	8013      	strh	r3, [r2, #0]
 8007bfc:	e03b      	b.n	8007c76 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	4413      	add	r3, r2
 8007c08:	881b      	ldrh	r3, [r3, #0]
 8007c0a:	b29c      	uxth	r4, r3
 8007c0c:	4623      	mov	r3, r4
 8007c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d014      	beq.n	8007c40 <USB_EPClearStall+0xd8>
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	4413      	add	r3, r2
 8007c20:	881b      	ldrh	r3, [r3, #0]
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c2c:	b29c      	uxth	r4, r3
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	441a      	add	r2, r3
 8007c38:	4b14      	ldr	r3, [pc, #80]	; (8007c8c <USB_EPClearStall+0x124>)
 8007c3a:	4323      	orrs	r3, r4
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	4413      	add	r3, r2
 8007c4a:	881b      	ldrh	r3, [r3, #0]
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c56:	b29c      	uxth	r4, r3
 8007c58:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007c5c:	b29c      	uxth	r4, r3
 8007c5e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007c62:	b29c      	uxth	r4, r3
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	441a      	add	r2, r3
 8007c6e:	4b06      	ldr	r3, [pc, #24]	; (8007c88 <USB_EPClearStall+0x120>)
 8007c70:	4323      	orrs	r3, r4
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3708      	adds	r7, #8
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bc90      	pop	{r4, r7}
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	ffff80c0 	.word	0xffff80c0
 8007c88:	ffff8080 	.word	0xffff8080
 8007c8c:	ffffc080 	.word	0xffffc080

08007c90 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	460b      	mov	r3, r1
 8007c9a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007c9c:	78fb      	ldrb	r3, [r7, #3]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d103      	bne.n	8007caa <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2280      	movs	r2, #128	; 0x80
 8007ca6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bc80      	pop	{r7}
 8007cb4:	4770      	bx	lr

08007cb6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b083      	sub	sp, #12
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bc80      	pop	{r7}
 8007cc8:	4770      	bx	lr

08007cca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007cca:	b480      	push	{r7}
 8007ccc:	b083      	sub	sp, #12
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bc80      	pop	{r7}
 8007cdc:	4770      	bx	lr

08007cde <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b085      	sub	sp, #20
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3714      	adds	r7, #20
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bc80      	pop	{r7}
 8007cfa:	4770      	bx	lr

08007cfc <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bc80      	pop	{r7}
 8007d10:	4770      	bx	lr

08007d12 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b08d      	sub	sp, #52	; 0x34
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	60f8      	str	r0, [r7, #12]
 8007d1a:	60b9      	str	r1, [r7, #8]
 8007d1c:	4611      	mov	r1, r2
 8007d1e:	461a      	mov	r2, r3
 8007d20:	460b      	mov	r3, r1
 8007d22:	80fb      	strh	r3, [r7, #6]
 8007d24:	4613      	mov	r3, r2
 8007d26:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007d28:	88bb      	ldrh	r3, [r7, #4]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	085b      	lsrs	r3, r3, #1
 8007d2e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007d38:	88fb      	ldrh	r3, [r7, #6]
 8007d3a:	005a      	lsls	r2, r3, #1
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	4413      	add	r3, r2
 8007d40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d44:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007d46:	6a3b      	ldr	r3, [r7, #32]
 8007d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d4a:	e01e      	b.n	8007d8a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d54:	3301      	adds	r3, #1
 8007d56:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	021b      	lsls	r3, r3, #8
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	461a      	mov	r2, r3
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d70:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d74:	3302      	adds	r3, #2
 8007d76:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7a:	3302      	adds	r3, #2
 8007d7c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d80:	3301      	adds	r3, #1
 8007d82:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d86:	3b01      	subs	r3, #1
 8007d88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1dd      	bne.n	8007d4c <USB_WritePMA+0x3a>
  }
}
 8007d90:	bf00      	nop
 8007d92:	3734      	adds	r7, #52	; 0x34
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bc80      	pop	{r7}
 8007d98:	4770      	bx	lr

08007d9a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b08b      	sub	sp, #44	; 0x2c
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	60f8      	str	r0, [r7, #12]
 8007da2:	60b9      	str	r1, [r7, #8]
 8007da4:	4611      	mov	r1, r2
 8007da6:	461a      	mov	r2, r3
 8007da8:	460b      	mov	r3, r1
 8007daa:	80fb      	strh	r3, [r7, #6]
 8007dac:	4613      	mov	r3, r2
 8007dae:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007db0:	88bb      	ldrh	r3, [r7, #4]
 8007db2:	085b      	lsrs	r3, r3, #1
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007dc0:	88fb      	ldrh	r3, [r7, #6]
 8007dc2:	005a      	lsls	r2, r3, #1
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dcc:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8007dd2:	e01b      	b.n	8007e0c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007dd4:	6a3b      	ldr	r3, [r7, #32]
 8007dd6:	881b      	ldrh	r3, [r3, #0]
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007ddc:	6a3b      	ldr	r3, [r7, #32]
 8007dde:	3302      	adds	r3, #2
 8007de0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	b2da      	uxtb	r2, r3
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	3301      	adds	r3, #1
 8007dee:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	0a1b      	lsrs	r3, r3, #8
 8007df4:	b2da      	uxtb	r2, r3
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007e00:	6a3b      	ldr	r3, [r7, #32]
 8007e02:	3302      	adds	r3, #2
 8007e04:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1e0      	bne.n	8007dd4 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007e12:	88bb      	ldrh	r3, [r7, #4]
 8007e14:	f003 0301 	and.w	r3, r3, #1
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d007      	beq.n	8007e2e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007e1e:	6a3b      	ldr	r3, [r7, #32]
 8007e20:	881b      	ldrh	r3, [r3, #0]
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	b2da      	uxtb	r2, r3
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	701a      	strb	r2, [r3, #0]
  }
}
 8007e2e:	bf00      	nop
 8007e30:	372c      	adds	r7, #44	; 0x2c
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bc80      	pop	{r7}
 8007e36:	4770      	bx	lr

08007e38 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	460b      	mov	r3, r1
 8007e42:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007e44:	2300      	movs	r3, #0
 8007e46:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	7c1b      	ldrb	r3, [r3, #16]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d115      	bne.n	8007e7c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007e50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e54:	2202      	movs	r2, #2
 8007e56:	2181      	movs	r1, #129	; 0x81
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f001 fe8e 	bl	8009b7a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2201      	movs	r2, #1
 8007e62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007e64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e68:	2202      	movs	r2, #2
 8007e6a:	2101      	movs	r1, #1
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f001 fe84 	bl	8009b7a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2201      	movs	r2, #1
 8007e76:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007e7a:	e012      	b.n	8007ea2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007e7c:	2340      	movs	r3, #64	; 0x40
 8007e7e:	2202      	movs	r2, #2
 8007e80:	2181      	movs	r1, #129	; 0x81
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f001 fe79 	bl	8009b7a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007e8e:	2340      	movs	r3, #64	; 0x40
 8007e90:	2202      	movs	r2, #2
 8007e92:	2101      	movs	r1, #1
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f001 fe70 	bl	8009b7a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007ea2:	2308      	movs	r3, #8
 8007ea4:	2203      	movs	r2, #3
 8007ea6:	2182      	movs	r1, #130	; 0x82
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f001 fe66 	bl	8009b7a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007eb4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007eb8:	f001 ff80 	bl	8009dbc <USBD_static_malloc>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d102      	bne.n	8007ed4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	73fb      	strb	r3, [r7, #15]
 8007ed2:	e026      	b.n	8007f22 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eda:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	7c1b      	ldrb	r3, [r3, #16]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d109      	bne.n	8007f12 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f08:	2101      	movs	r1, #1
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f001 ff1f 	bl	8009d4e <USBD_LL_PrepareReceive>
 8007f10:	e007      	b.n	8007f22 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f18:	2340      	movs	r3, #64	; 0x40
 8007f1a:	2101      	movs	r1, #1
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f001 ff16 	bl	8009d4e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3710      	adds	r7, #16
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	460b      	mov	r3, r1
 8007f36:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007f3c:	2181      	movs	r1, #129	; 0x81
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f001 fe41 	bl	8009bc6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007f4a:	2101      	movs	r1, #1
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f001 fe3a 	bl	8009bc6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007f5a:	2182      	movs	r1, #130	; 0x82
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f001 fe32 	bl	8009bc6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00e      	beq.n	8007f90 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f82:	4618      	mov	r0, r3
 8007f84:	f001 ff26 	bl	8009dd4 <USBD_static_free>
    pdev->pClassData = NULL;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b086      	sub	sp, #24
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
 8007fa2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007faa:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007fac:	2300      	movs	r3, #0
 8007fae:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d039      	beq.n	8008038 <USBD_CDC_Setup+0x9e>
 8007fc4:	2b20      	cmp	r3, #32
 8007fc6:	d17c      	bne.n	80080c2 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	88db      	ldrh	r3, [r3, #6]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d029      	beq.n	8008024 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	b25b      	sxtb	r3, r3
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	da11      	bge.n	8007ffe <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	683a      	ldr	r2, [r7, #0]
 8007fe4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007fe6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007fe8:	683a      	ldr	r2, [r7, #0]
 8007fea:	88d2      	ldrh	r2, [r2, #6]
 8007fec:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007fee:	6939      	ldr	r1, [r7, #16]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	88db      	ldrh	r3, [r3, #6]
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f001 f9f6 	bl	80093e8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007ffc:	e068      	b.n	80080d0 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	785a      	ldrb	r2, [r3, #1]
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	88db      	ldrh	r3, [r3, #6]
 800800c:	b2da      	uxtb	r2, r3
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008014:	6939      	ldr	r1, [r7, #16]
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	88db      	ldrh	r3, [r3, #6]
 800801a:	461a      	mov	r2, r3
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f001 fa11 	bl	8009444 <USBD_CtlPrepareRx>
      break;
 8008022:	e055      	b.n	80080d0 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	683a      	ldr	r2, [r7, #0]
 800802e:	7850      	ldrb	r0, [r2, #1]
 8008030:	2200      	movs	r2, #0
 8008032:	6839      	ldr	r1, [r7, #0]
 8008034:	4798      	blx	r3
      break;
 8008036:	e04b      	b.n	80080d0 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	785b      	ldrb	r3, [r3, #1]
 800803c:	2b0a      	cmp	r3, #10
 800803e:	d017      	beq.n	8008070 <USBD_CDC_Setup+0xd6>
 8008040:	2b0b      	cmp	r3, #11
 8008042:	d029      	beq.n	8008098 <USBD_CDC_Setup+0xfe>
 8008044:	2b00      	cmp	r3, #0
 8008046:	d133      	bne.n	80080b0 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800804e:	2b03      	cmp	r3, #3
 8008050:	d107      	bne.n	8008062 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008052:	f107 030c 	add.w	r3, r7, #12
 8008056:	2202      	movs	r2, #2
 8008058:	4619      	mov	r1, r3
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f001 f9c4 	bl	80093e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008060:	e02e      	b.n	80080c0 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8008062:	6839      	ldr	r1, [r7, #0]
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f001 f955 	bl	8009314 <USBD_CtlError>
            ret = USBD_FAIL;
 800806a:	2302      	movs	r3, #2
 800806c:	75fb      	strb	r3, [r7, #23]
          break;
 800806e:	e027      	b.n	80080c0 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008076:	2b03      	cmp	r3, #3
 8008078:	d107      	bne.n	800808a <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800807a:	f107 030f 	add.w	r3, r7, #15
 800807e:	2201      	movs	r2, #1
 8008080:	4619      	mov	r1, r3
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f001 f9b0 	bl	80093e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008088:	e01a      	b.n	80080c0 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800808a:	6839      	ldr	r1, [r7, #0]
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f001 f941 	bl	8009314 <USBD_CtlError>
            ret = USBD_FAIL;
 8008092:	2302      	movs	r3, #2
 8008094:	75fb      	strb	r3, [r7, #23]
          break;
 8008096:	e013      	b.n	80080c0 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800809e:	2b03      	cmp	r3, #3
 80080a0:	d00d      	beq.n	80080be <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80080a2:	6839      	ldr	r1, [r7, #0]
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f001 f935 	bl	8009314 <USBD_CtlError>
            ret = USBD_FAIL;
 80080aa:	2302      	movs	r3, #2
 80080ac:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80080ae:	e006      	b.n	80080be <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80080b0:	6839      	ldr	r1, [r7, #0]
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f001 f92e 	bl	8009314 <USBD_CtlError>
          ret = USBD_FAIL;
 80080b8:	2302      	movs	r3, #2
 80080ba:	75fb      	strb	r3, [r7, #23]
          break;
 80080bc:	e000      	b.n	80080c0 <USBD_CDC_Setup+0x126>
          break;
 80080be:	bf00      	nop
      }
      break;
 80080c0:	e006      	b.n	80080d0 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80080c2:	6839      	ldr	r1, [r7, #0]
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f001 f925 	bl	8009314 <USBD_CtlError>
      ret = USBD_FAIL;
 80080ca:	2302      	movs	r3, #2
 80080cc:	75fb      	strb	r3, [r7, #23]
      break;
 80080ce:	bf00      	nop
  }

  return ret;
 80080d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3718      	adds	r7, #24
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b084      	sub	sp, #16
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
 80080e2:	460b      	mov	r3, r1
 80080e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ec:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080f4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d037      	beq.n	8008170 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008100:	78fa      	ldrb	r2, [r7, #3]
 8008102:	6879      	ldr	r1, [r7, #4]
 8008104:	4613      	mov	r3, r2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	4413      	add	r3, r2
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	440b      	add	r3, r1
 800810e:	331c      	adds	r3, #28
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d026      	beq.n	8008164 <USBD_CDC_DataIn+0x8a>
 8008116:	78fa      	ldrb	r2, [r7, #3]
 8008118:	6879      	ldr	r1, [r7, #4]
 800811a:	4613      	mov	r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	4413      	add	r3, r2
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	440b      	add	r3, r1
 8008124:	331c      	adds	r3, #28
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	78fa      	ldrb	r2, [r7, #3]
 800812a:	68b9      	ldr	r1, [r7, #8]
 800812c:	0152      	lsls	r2, r2, #5
 800812e:	440a      	add	r2, r1
 8008130:	3238      	adds	r2, #56	; 0x38
 8008132:	6812      	ldr	r2, [r2, #0]
 8008134:	fbb3 f1f2 	udiv	r1, r3, r2
 8008138:	fb02 f201 	mul.w	r2, r2, r1
 800813c:	1a9b      	subs	r3, r3, r2
 800813e:	2b00      	cmp	r3, #0
 8008140:	d110      	bne.n	8008164 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008142:	78fa      	ldrb	r2, [r7, #3]
 8008144:	6879      	ldr	r1, [r7, #4]
 8008146:	4613      	mov	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	4413      	add	r3, r2
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	440b      	add	r3, r1
 8008150:	331c      	adds	r3, #28
 8008152:	2200      	movs	r2, #0
 8008154:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008156:	78f9      	ldrb	r1, [r7, #3]
 8008158:	2300      	movs	r3, #0
 800815a:	2200      	movs	r2, #0
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f001 fdd3 	bl	8009d08 <USBD_LL_Transmit>
 8008162:	e003      	b.n	800816c <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2200      	movs	r2, #0
 8008168:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	e000      	b.n	8008172 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8008170:	2302      	movs	r3, #2
  }
}
 8008172:	4618      	mov	r0, r3
 8008174:	3710      	adds	r7, #16
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b084      	sub	sp, #16
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
 8008182:	460b      	mov	r3, r1
 8008184:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800818c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800818e:	78fb      	ldrb	r3, [r7, #3]
 8008190:	4619      	mov	r1, r3
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f001 fdfe 	bl	8009d94 <USBD_LL_GetRxDataSize>
 8008198:	4602      	mov	r2, r0
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00d      	beq.n	80081c6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	68fa      	ldr	r2, [r7, #12]
 80081b4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80081be:	4611      	mov	r1, r2
 80081c0:	4798      	blx	r3

    return USBD_OK;
 80081c2:	2300      	movs	r3, #0
 80081c4:	e000      	b.n	80081c8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80081c6:	2302      	movs	r3, #2
  }
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081de:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d015      	beq.n	8008216 <USBD_CDC_EP0_RxReady+0x46>
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80081f0:	2bff      	cmp	r3, #255	; 0xff
 80081f2:	d010      	beq.n	8008216 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008202:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008204:	68fa      	ldr	r2, [r7, #12]
 8008206:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800820a:	b292      	uxth	r2, r2
 800820c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	22ff      	movs	r2, #255	; 0xff
 8008212:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008216:	2300      	movs	r3, #0
}
 8008218:	4618      	mov	r0, r3
 800821a:	3710      	adds	r7, #16
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2243      	movs	r2, #67	; 0x43
 800822c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800822e:	4b03      	ldr	r3, [pc, #12]	; (800823c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008230:	4618      	mov	r0, r3
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	bc80      	pop	{r7}
 8008238:	4770      	bx	lr
 800823a:	bf00      	nop
 800823c:	200000ac 	.word	0x200000ac

08008240 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2243      	movs	r2, #67	; 0x43
 800824c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800824e:	4b03      	ldr	r3, [pc, #12]	; (800825c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008250:	4618      	mov	r0, r3
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	bc80      	pop	{r7}
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	20000068 	.word	0x20000068

08008260 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2243      	movs	r2, #67	; 0x43
 800826c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800826e:	4b03      	ldr	r3, [pc, #12]	; (800827c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008270:	4618      	mov	r0, r3
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	bc80      	pop	{r7}
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	200000f0 	.word	0x200000f0

08008280 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	220a      	movs	r2, #10
 800828c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800828e:	4b03      	ldr	r3, [pc, #12]	; (800829c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008290:	4618      	mov	r0, r3
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	bc80      	pop	{r7}
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	20000024 	.word	0x20000024

080082a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b085      	sub	sp, #20
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80082aa:	2302      	movs	r3, #2
 80082ac:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d005      	beq.n	80082c0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	683a      	ldr	r2, [r7, #0]
 80082b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80082bc:	2300      	movs	r3, #0
 80082be:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80082c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3714      	adds	r7, #20
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bc80      	pop	{r7}
 80082ca:	4770      	bx	lr

080082cc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b087      	sub	sp, #28
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	4613      	mov	r3, r2
 80082d8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082e0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80082ea:	88fa      	ldrh	r2, [r7, #6]
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	371c      	adds	r7, #28
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bc80      	pop	{r7}
 80082fc:	4770      	bx	lr

080082fe <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80082fe:	b480      	push	{r7}
 8008300:	b085      	sub	sp, #20
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
 8008306:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800830e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	683a      	ldr	r2, [r7, #0]
 8008314:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	3714      	adds	r7, #20
 800831e:	46bd      	mov	sp, r7
 8008320:	bc80      	pop	{r7}
 8008322:	4770      	bx	lr

08008324 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008332:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800833a:	2b00      	cmp	r3, #0
 800833c:	d01c      	beq.n	8008378 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008344:	2b00      	cmp	r3, #0
 8008346:	d115      	bne.n	8008374 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2201      	movs	r2, #1
 800834c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008366:	b29b      	uxth	r3, r3
 8008368:	2181      	movs	r1, #129	; 0x81
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f001 fccc 	bl	8009d08 <USBD_LL_Transmit>

      return USBD_OK;
 8008370:	2300      	movs	r3, #0
 8008372:	e002      	b.n	800837a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008374:	2301      	movs	r3, #1
 8008376:	e000      	b.n	800837a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008378:	2302      	movs	r3, #2
  }
}
 800837a:	4618      	mov	r0, r3
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b084      	sub	sp, #16
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008390:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008398:	2b00      	cmp	r3, #0
 800839a:	d017      	beq.n	80083cc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	7c1b      	ldrb	r3, [r3, #16]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d109      	bne.n	80083b8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80083aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083ae:	2101      	movs	r1, #1
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f001 fccc 	bl	8009d4e <USBD_LL_PrepareReceive>
 80083b6:	e007      	b.n	80083c8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80083be:	2340      	movs	r3, #64	; 0x40
 80083c0:	2101      	movs	r1, #1
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f001 fcc3 	bl	8009d4e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80083c8:	2300      	movs	r3, #0
 80083ca:	e000      	b.n	80083ce <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80083cc:	2302      	movs	r3, #2
  }
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b084      	sub	sp, #16
 80083da:	af00      	add	r7, sp, #0
 80083dc:	60f8      	str	r0, [r7, #12]
 80083de:	60b9      	str	r1, [r7, #8]
 80083e0:	4613      	mov	r3, r2
 80083e2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d101      	bne.n	80083ee <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80083ea:	2302      	movs	r3, #2
 80083ec:	e01a      	b.n	8008424 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d003      	beq.n	8008400 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d003      	beq.n	800840e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	68ba      	ldr	r2, [r7, #8]
 800840a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2201      	movs	r2, #1
 8008412:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	79fa      	ldrb	r2, [r7, #7]
 800841a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800841c:	68f8      	ldr	r0, [r7, #12]
 800841e:	f001 fb37 	bl	8009a90 <USBD_LL_Init>

  return USBD_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	3710      	adds	r7, #16
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008436:	2300      	movs	r3, #0
 8008438:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d006      	beq.n	800844e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	683a      	ldr	r2, [r7, #0]
 8008444:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008448:	2300      	movs	r3, #0
 800844a:	73fb      	strb	r3, [r7, #15]
 800844c:	e001      	b.n	8008452 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800844e:	2302      	movs	r3, #2
 8008450:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008452:	7bfb      	ldrb	r3, [r7, #15]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3714      	adds	r7, #20
 8008458:	46bd      	mov	sp, r7
 800845a:	bc80      	pop	{r7}
 800845c:	4770      	bx	lr

0800845e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b082      	sub	sp, #8
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f001 fb6c 	bl	8009b44 <USBD_LL_Start>

  return USBD_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3708      	adds	r7, #8
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008476:	b480      	push	{r7}
 8008478:	b083      	sub	sp, #12
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	bc80      	pop	{r7}
 8008488:	4770      	bx	lr

0800848a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b084      	sub	sp, #16
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
 8008492:	460b      	mov	r3, r1
 8008494:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008496:	2302      	movs	r3, #2
 8008498:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d00c      	beq.n	80084be <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	78fa      	ldrb	r2, [r7, #3]
 80084ae:	4611      	mov	r1, r2
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	4798      	blx	r3
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d101      	bne.n	80084be <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80084ba:	2300      	movs	r3, #0
 80084bc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80084be:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	460b      	mov	r3, r1
 80084d2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	78fa      	ldrb	r2, [r7, #3]
 80084de:	4611      	mov	r1, r2
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	4798      	blx	r3

  return USBD_OK;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3708      	adds	r7, #8
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}

080084ee <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80084ee:	b580      	push	{r7, lr}
 80084f0:	b082      	sub	sp, #8
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
 80084f6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	4618      	mov	r0, r3
 8008502:	f000 fecb 	bl	800929c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2201      	movs	r2, #1
 800850a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008514:	461a      	mov	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008522:	f003 031f 	and.w	r3, r3, #31
 8008526:	2b01      	cmp	r3, #1
 8008528:	d00c      	beq.n	8008544 <USBD_LL_SetupStage+0x56>
 800852a:	2b01      	cmp	r3, #1
 800852c:	d302      	bcc.n	8008534 <USBD_LL_SetupStage+0x46>
 800852e:	2b02      	cmp	r3, #2
 8008530:	d010      	beq.n	8008554 <USBD_LL_SetupStage+0x66>
 8008532:	e017      	b.n	8008564 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800853a:	4619      	mov	r1, r3
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 f9cb 	bl	80088d8 <USBD_StdDevReq>
      break;
 8008542:	e01a      	b.n	800857a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800854a:	4619      	mov	r1, r3
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 fa2d 	bl	80089ac <USBD_StdItfReq>
      break;
 8008552:	e012      	b.n	800857a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800855a:	4619      	mov	r1, r3
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 fa6b 	bl	8008a38 <USBD_StdEPReq>
      break;
 8008562:	e00a      	b.n	800857a <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800856a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800856e:	b2db      	uxtb	r3, r3
 8008570:	4619      	mov	r1, r3
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f001 fb46 	bl	8009c04 <USBD_LL_StallEP>
      break;
 8008578:	bf00      	nop
  }

  return USBD_OK;
 800857a:	2300      	movs	r3, #0
}
 800857c:	4618      	mov	r0, r3
 800857e:	3708      	adds	r7, #8
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b086      	sub	sp, #24
 8008588:	af00      	add	r7, sp, #0
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	460b      	mov	r3, r1
 800858e:	607a      	str	r2, [r7, #4]
 8008590:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008592:	7afb      	ldrb	r3, [r7, #11]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d14b      	bne.n	8008630 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800859e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085a6:	2b03      	cmp	r3, #3
 80085a8:	d134      	bne.n	8008614 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	68da      	ldr	r2, [r3, #12]
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d919      	bls.n	80085ea <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	68da      	ldr	r2, [r3, #12]
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	691b      	ldr	r3, [r3, #16]
 80085be:	1ad2      	subs	r2, r2, r3
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	68da      	ldr	r2, [r3, #12]
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d203      	bcs.n	80085d8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	e002      	b.n	80085de <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80085dc:	b29b      	uxth	r3, r3
 80085de:	461a      	mov	r2, r3
 80085e0:	6879      	ldr	r1, [r7, #4]
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f000 ff4c 	bl	8009480 <USBD_CtlContinueRx>
 80085e8:	e038      	b.n	800865c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00a      	beq.n	800860c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80085fc:	2b03      	cmp	r3, #3
 80085fe:	d105      	bne.n	800860c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008606:	691b      	ldr	r3, [r3, #16]
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f000 ff49 	bl	80094a4 <USBD_CtlSendStatus>
 8008612:	e023      	b.n	800865c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800861a:	2b05      	cmp	r3, #5
 800861c:	d11e      	bne.n	800865c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2200      	movs	r2, #0
 8008622:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008626:	2100      	movs	r1, #0
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	f001 faeb 	bl	8009c04 <USBD_LL_StallEP>
 800862e:	e015      	b.n	800865c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008636:	699b      	ldr	r3, [r3, #24]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d00d      	beq.n	8008658 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008642:	2b03      	cmp	r3, #3
 8008644:	d108      	bne.n	8008658 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800864c:	699b      	ldr	r3, [r3, #24]
 800864e:	7afa      	ldrb	r2, [r7, #11]
 8008650:	4611      	mov	r1, r2
 8008652:	68f8      	ldr	r0, [r7, #12]
 8008654:	4798      	blx	r3
 8008656:	e001      	b.n	800865c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008658:	2302      	movs	r3, #2
 800865a:	e000      	b.n	800865e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3718      	adds	r7, #24
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b086      	sub	sp, #24
 800866a:	af00      	add	r7, sp, #0
 800866c:	60f8      	str	r0, [r7, #12]
 800866e:	460b      	mov	r3, r1
 8008670:	607a      	str	r2, [r7, #4]
 8008672:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008674:	7afb      	ldrb	r3, [r7, #11]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d17f      	bne.n	800877a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	3314      	adds	r3, #20
 800867e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008686:	2b02      	cmp	r3, #2
 8008688:	d15c      	bne.n	8008744 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	68da      	ldr	r2, [r3, #12]
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	429a      	cmp	r2, r3
 8008694:	d915      	bls.n	80086c2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	68da      	ldr	r2, [r3, #12]
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	1ad2      	subs	r2, r2, r3
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	461a      	mov	r2, r3
 80086ac:	6879      	ldr	r1, [r7, #4]
 80086ae:	68f8      	ldr	r0, [r7, #12]
 80086b0:	f000 feb6 	bl	8009420 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086b4:	2300      	movs	r3, #0
 80086b6:	2200      	movs	r2, #0
 80086b8:	2100      	movs	r1, #0
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f001 fb47 	bl	8009d4e <USBD_LL_PrepareReceive>
 80086c0:	e04e      	b.n	8008760 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	697a      	ldr	r2, [r7, #20]
 80086c8:	6912      	ldr	r2, [r2, #16]
 80086ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80086ce:	fb02 f201 	mul.w	r2, r2, r1
 80086d2:	1a9b      	subs	r3, r3, r2
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d11c      	bne.n	8008712 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	689a      	ldr	r2, [r3, #8]
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d316      	bcc.n	8008712 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	689a      	ldr	r2, [r3, #8]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d20f      	bcs.n	8008712 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80086f2:	2200      	movs	r2, #0
 80086f4:	2100      	movs	r1, #0
 80086f6:	68f8      	ldr	r0, [r7, #12]
 80086f8:	f000 fe92 	bl	8009420 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2200      	movs	r2, #0
 8008700:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008704:	2300      	movs	r3, #0
 8008706:	2200      	movs	r2, #0
 8008708:	2100      	movs	r1, #0
 800870a:	68f8      	ldr	r0, [r7, #12]
 800870c:	f001 fb1f 	bl	8009d4e <USBD_LL_PrepareReceive>
 8008710:	e026      	b.n	8008760 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00a      	beq.n	8008734 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008724:	2b03      	cmp	r3, #3
 8008726:	d105      	bne.n	8008734 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	68f8      	ldr	r0, [r7, #12]
 8008732:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008734:	2180      	movs	r1, #128	; 0x80
 8008736:	68f8      	ldr	r0, [r7, #12]
 8008738:	f001 fa64 	bl	8009c04 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f000 fec4 	bl	80094ca <USBD_CtlReceiveStatus>
 8008742:	e00d      	b.n	8008760 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800874a:	2b04      	cmp	r3, #4
 800874c:	d004      	beq.n	8008758 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008754:	2b00      	cmp	r3, #0
 8008756:	d103      	bne.n	8008760 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008758:	2180      	movs	r1, #128	; 0x80
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	f001 fa52 	bl	8009c04 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008766:	2b01      	cmp	r3, #1
 8008768:	d11d      	bne.n	80087a6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f7ff fe83 	bl	8008476 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008778:	e015      	b.n	80087a6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008780:	695b      	ldr	r3, [r3, #20]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00d      	beq.n	80087a2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800878c:	2b03      	cmp	r3, #3
 800878e:	d108      	bne.n	80087a2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008796:	695b      	ldr	r3, [r3, #20]
 8008798:	7afa      	ldrb	r2, [r7, #11]
 800879a:	4611      	mov	r1, r2
 800879c:	68f8      	ldr	r0, [r7, #12]
 800879e:	4798      	blx	r3
 80087a0:	e001      	b.n	80087a6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80087a2:	2302      	movs	r3, #2
 80087a4:	e000      	b.n	80087a8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80087a6:	2300      	movs	r3, #0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3718      	adds	r7, #24
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087b8:	2340      	movs	r3, #64	; 0x40
 80087ba:	2200      	movs	r2, #0
 80087bc:	2100      	movs	r1, #0
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f001 f9db 	bl	8009b7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2240      	movs	r2, #64	; 0x40
 80087d0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087d4:	2340      	movs	r3, #64	; 0x40
 80087d6:	2200      	movs	r2, #0
 80087d8:	2180      	movs	r1, #128	; 0x80
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f001 f9cd 	bl	8009b7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2240      	movs	r2, #64	; 0x40
 80087ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008810:	2b00      	cmp	r3, #0
 8008812:	d009      	beq.n	8008828 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	6852      	ldr	r2, [r2, #4]
 8008820:	b2d2      	uxtb	r2, r2
 8008822:	4611      	mov	r1, r2
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	4798      	blx	r3
  }

  return USBD_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3708      	adds	r7, #8
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008832:	b480      	push	{r7}
 8008834:	b083      	sub	sp, #12
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
 800883a:	460b      	mov	r3, r1
 800883c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	78fa      	ldrb	r2, [r7, #3]
 8008842:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	370c      	adds	r7, #12
 800884a:	46bd      	mov	sp, r7
 800884c:	bc80      	pop	{r7}
 800884e:	4770      	bx	lr

08008850 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2204      	movs	r2, #4
 8008868:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	370c      	adds	r7, #12
 8008872:	46bd      	mov	sp, r7
 8008874:	bc80      	pop	{r7}
 8008876:	4770      	bx	lr

08008878 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008878:	b480      	push	{r7}
 800887a:	b083      	sub	sp, #12
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008886:	2b04      	cmp	r3, #4
 8008888:	d105      	bne.n	8008896 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	bc80      	pop	{r7}
 80088a0:	4770      	bx	lr

080088a2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b082      	sub	sp, #8
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088b0:	2b03      	cmp	r3, #3
 80088b2:	d10b      	bne.n	80088cc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088ba:	69db      	ldr	r3, [r3, #28]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d005      	beq.n	80088cc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088c6:	69db      	ldr	r3, [r3, #28]
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
	...

080088d8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088e2:	2300      	movs	r3, #0
 80088e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088ee:	2b20      	cmp	r3, #32
 80088f0:	d004      	beq.n	80088fc <USBD_StdDevReq+0x24>
 80088f2:	2b40      	cmp	r3, #64	; 0x40
 80088f4:	d002      	beq.n	80088fc <USBD_StdDevReq+0x24>
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d008      	beq.n	800890c <USBD_StdDevReq+0x34>
 80088fa:	e04c      	b.n	8008996 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	6839      	ldr	r1, [r7, #0]
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	4798      	blx	r3
      break;
 800890a:	e049      	b.n	80089a0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	785b      	ldrb	r3, [r3, #1]
 8008910:	2b09      	cmp	r3, #9
 8008912:	d83a      	bhi.n	800898a <USBD_StdDevReq+0xb2>
 8008914:	a201      	add	r2, pc, #4	; (adr r2, 800891c <USBD_StdDevReq+0x44>)
 8008916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800891a:	bf00      	nop
 800891c:	0800896d 	.word	0x0800896d
 8008920:	08008981 	.word	0x08008981
 8008924:	0800898b 	.word	0x0800898b
 8008928:	08008977 	.word	0x08008977
 800892c:	0800898b 	.word	0x0800898b
 8008930:	0800894f 	.word	0x0800894f
 8008934:	08008945 	.word	0x08008945
 8008938:	0800898b 	.word	0x0800898b
 800893c:	08008963 	.word	0x08008963
 8008940:	08008959 	.word	0x08008959
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008944:	6839      	ldr	r1, [r7, #0]
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 f9d4 	bl	8008cf4 <USBD_GetDescriptor>
          break;
 800894c:	e022      	b.n	8008994 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800894e:	6839      	ldr	r1, [r7, #0]
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 fb37 	bl	8008fc4 <USBD_SetAddress>
          break;
 8008956:	e01d      	b.n	8008994 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008958:	6839      	ldr	r1, [r7, #0]
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 fb74 	bl	8009048 <USBD_SetConfig>
          break;
 8008960:	e018      	b.n	8008994 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008962:	6839      	ldr	r1, [r7, #0]
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 fbfd 	bl	8009164 <USBD_GetConfig>
          break;
 800896a:	e013      	b.n	8008994 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800896c:	6839      	ldr	r1, [r7, #0]
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 fc2c 	bl	80091cc <USBD_GetStatus>
          break;
 8008974:	e00e      	b.n	8008994 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008976:	6839      	ldr	r1, [r7, #0]
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 fc5a 	bl	8009232 <USBD_SetFeature>
          break;
 800897e:	e009      	b.n	8008994 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008980:	6839      	ldr	r1, [r7, #0]
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 fc69 	bl	800925a <USBD_ClrFeature>
          break;
 8008988:	e004      	b.n	8008994 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800898a:	6839      	ldr	r1, [r7, #0]
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 fcc1 	bl	8009314 <USBD_CtlError>
          break;
 8008992:	bf00      	nop
      }
      break;
 8008994:	e004      	b.n	80089a0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008996:	6839      	ldr	r1, [r7, #0]
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 fcbb 	bl	8009314 <USBD_CtlError>
      break;
 800899e:	bf00      	nop
  }

  return ret;
 80089a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop

080089ac <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089b6:	2300      	movs	r3, #0
 80089b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089c2:	2b20      	cmp	r3, #32
 80089c4:	d003      	beq.n	80089ce <USBD_StdItfReq+0x22>
 80089c6:	2b40      	cmp	r3, #64	; 0x40
 80089c8:	d001      	beq.n	80089ce <USBD_StdItfReq+0x22>
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d12a      	bne.n	8008a24 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089d4:	3b01      	subs	r3, #1
 80089d6:	2b02      	cmp	r3, #2
 80089d8:	d81d      	bhi.n	8008a16 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	889b      	ldrh	r3, [r3, #4]
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d813      	bhi.n	8008a0c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	6839      	ldr	r1, [r7, #0]
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	4798      	blx	r3
 80089f2:	4603      	mov	r3, r0
 80089f4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	88db      	ldrh	r3, [r3, #6]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d110      	bne.n	8008a20 <USBD_StdItfReq+0x74>
 80089fe:	7bfb      	ldrb	r3, [r7, #15]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d10d      	bne.n	8008a20 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 fd4d 	bl	80094a4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008a0a:	e009      	b.n	8008a20 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8008a0c:	6839      	ldr	r1, [r7, #0]
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fc80 	bl	8009314 <USBD_CtlError>
          break;
 8008a14:	e004      	b.n	8008a20 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8008a16:	6839      	ldr	r1, [r7, #0]
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 fc7b 	bl	8009314 <USBD_CtlError>
          break;
 8008a1e:	e000      	b.n	8008a22 <USBD_StdItfReq+0x76>
          break;
 8008a20:	bf00      	nop
      }
      break;
 8008a22:	e004      	b.n	8008a2e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8008a24:	6839      	ldr	r1, [r7, #0]
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 fc74 	bl	8009314 <USBD_CtlError>
      break;
 8008a2c:	bf00      	nop
  }

  return USBD_OK;
 8008a2e:	2300      	movs	r3, #0
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3710      	adds	r7, #16
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a42:	2300      	movs	r3, #0
 8008a44:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	889b      	ldrh	r3, [r3, #4]
 8008a4a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a54:	2b20      	cmp	r3, #32
 8008a56:	d004      	beq.n	8008a62 <USBD_StdEPReq+0x2a>
 8008a58:	2b40      	cmp	r3, #64	; 0x40
 8008a5a:	d002      	beq.n	8008a62 <USBD_StdEPReq+0x2a>
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d008      	beq.n	8008a72 <USBD_StdEPReq+0x3a>
 8008a60:	e13d      	b.n	8008cde <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	6839      	ldr	r1, [r7, #0]
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	4798      	blx	r3
      break;
 8008a70:	e13a      	b.n	8008ce8 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a7a:	2b20      	cmp	r3, #32
 8008a7c:	d10a      	bne.n	8008a94 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	6839      	ldr	r1, [r7, #0]
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	4798      	blx	r3
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008a90:	7bfb      	ldrb	r3, [r7, #15]
 8008a92:	e12a      	b.n	8008cea <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	785b      	ldrb	r3, [r3, #1]
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d03e      	beq.n	8008b1a <USBD_StdEPReq+0xe2>
 8008a9c:	2b03      	cmp	r3, #3
 8008a9e:	d002      	beq.n	8008aa6 <USBD_StdEPReq+0x6e>
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d070      	beq.n	8008b86 <USBD_StdEPReq+0x14e>
 8008aa4:	e115      	b.n	8008cd2 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	d002      	beq.n	8008ab6 <USBD_StdEPReq+0x7e>
 8008ab0:	2b03      	cmp	r3, #3
 8008ab2:	d015      	beq.n	8008ae0 <USBD_StdEPReq+0xa8>
 8008ab4:	e02b      	b.n	8008b0e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ab6:	7bbb      	ldrb	r3, [r7, #14]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d00c      	beq.n	8008ad6 <USBD_StdEPReq+0x9e>
 8008abc:	7bbb      	ldrb	r3, [r7, #14]
 8008abe:	2b80      	cmp	r3, #128	; 0x80
 8008ac0:	d009      	beq.n	8008ad6 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008ac2:	7bbb      	ldrb	r3, [r7, #14]
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f001 f89c 	bl	8009c04 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008acc:	2180      	movs	r1, #128	; 0x80
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f001 f898 	bl	8009c04 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ad4:	e020      	b.n	8008b18 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8008ad6:	6839      	ldr	r1, [r7, #0]
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 fc1b 	bl	8009314 <USBD_CtlError>
              break;
 8008ade:	e01b      	b.n	8008b18 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	885b      	ldrh	r3, [r3, #2]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d10e      	bne.n	8008b06 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8008ae8:	7bbb      	ldrb	r3, [r7, #14]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d00b      	beq.n	8008b06 <USBD_StdEPReq+0xce>
 8008aee:	7bbb      	ldrb	r3, [r7, #14]
 8008af0:	2b80      	cmp	r3, #128	; 0x80
 8008af2:	d008      	beq.n	8008b06 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	88db      	ldrh	r3, [r3, #6]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d104      	bne.n	8008b06 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008afc:	7bbb      	ldrb	r3, [r7, #14]
 8008afe:	4619      	mov	r1, r3
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f001 f87f 	bl	8009c04 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 fccc 	bl	80094a4 <USBD_CtlSendStatus>

              break;
 8008b0c:	e004      	b.n	8008b18 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8008b0e:	6839      	ldr	r1, [r7, #0]
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 fbff 	bl	8009314 <USBD_CtlError>
              break;
 8008b16:	bf00      	nop
          }
          break;
 8008b18:	e0e0      	b.n	8008cdc <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d002      	beq.n	8008b2a <USBD_StdEPReq+0xf2>
 8008b24:	2b03      	cmp	r3, #3
 8008b26:	d015      	beq.n	8008b54 <USBD_StdEPReq+0x11c>
 8008b28:	e026      	b.n	8008b78 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b2a:	7bbb      	ldrb	r3, [r7, #14]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00c      	beq.n	8008b4a <USBD_StdEPReq+0x112>
 8008b30:	7bbb      	ldrb	r3, [r7, #14]
 8008b32:	2b80      	cmp	r3, #128	; 0x80
 8008b34:	d009      	beq.n	8008b4a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008b36:	7bbb      	ldrb	r3, [r7, #14]
 8008b38:	4619      	mov	r1, r3
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f001 f862 	bl	8009c04 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008b40:	2180      	movs	r1, #128	; 0x80
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f001 f85e 	bl	8009c04 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b48:	e01c      	b.n	8008b84 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8008b4a:	6839      	ldr	r1, [r7, #0]
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 fbe1 	bl	8009314 <USBD_CtlError>
              break;
 8008b52:	e017      	b.n	8008b84 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	885b      	ldrh	r3, [r3, #2]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d112      	bne.n	8008b82 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008b5c:	7bbb      	ldrb	r3, [r7, #14]
 8008b5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d004      	beq.n	8008b70 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008b66:	7bbb      	ldrb	r3, [r7, #14]
 8008b68:	4619      	mov	r1, r3
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f001 f869 	bl	8009c42 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 fc97 	bl	80094a4 <USBD_CtlSendStatus>
              }
              break;
 8008b76:	e004      	b.n	8008b82 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8008b78:	6839      	ldr	r1, [r7, #0]
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 fbca 	bl	8009314 <USBD_CtlError>
              break;
 8008b80:	e000      	b.n	8008b84 <USBD_StdEPReq+0x14c>
              break;
 8008b82:	bf00      	nop
          }
          break;
 8008b84:	e0aa      	b.n	8008cdc <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b8c:	2b02      	cmp	r3, #2
 8008b8e:	d002      	beq.n	8008b96 <USBD_StdEPReq+0x15e>
 8008b90:	2b03      	cmp	r3, #3
 8008b92:	d032      	beq.n	8008bfa <USBD_StdEPReq+0x1c2>
 8008b94:	e097      	b.n	8008cc6 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b96:	7bbb      	ldrb	r3, [r7, #14]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d007      	beq.n	8008bac <USBD_StdEPReq+0x174>
 8008b9c:	7bbb      	ldrb	r3, [r7, #14]
 8008b9e:	2b80      	cmp	r3, #128	; 0x80
 8008ba0:	d004      	beq.n	8008bac <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8008ba2:	6839      	ldr	r1, [r7, #0]
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 fbb5 	bl	8009314 <USBD_CtlError>
                break;
 8008baa:	e091      	b.n	8008cd0 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	da0b      	bge.n	8008bcc <USBD_StdEPReq+0x194>
 8008bb4:	7bbb      	ldrb	r3, [r7, #14]
 8008bb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bba:	4613      	mov	r3, r2
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	4413      	add	r3, r2
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	3310      	adds	r3, #16
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	3304      	adds	r3, #4
 8008bca:	e00b      	b.n	8008be4 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008bcc:	7bbb      	ldrb	r3, [r7, #14]
 8008bce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	4413      	add	r3, r2
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	4413      	add	r3, r2
 8008be2:	3304      	adds	r3, #4
 8008be4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	2200      	movs	r2, #0
 8008bea:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	2202      	movs	r2, #2
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 fbf8 	bl	80093e8 <USBD_CtlSendData>
              break;
 8008bf8:	e06a      	b.n	8008cd0 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008bfa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	da11      	bge.n	8008c26 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008c02:	7bbb      	ldrb	r3, [r7, #14]
 8008c04:	f003 020f 	and.w	r2, r3, #15
 8008c08:	6879      	ldr	r1, [r7, #4]
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	4413      	add	r3, r2
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	440b      	add	r3, r1
 8008c14:	3318      	adds	r3, #24
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d117      	bne.n	8008c4c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008c1c:	6839      	ldr	r1, [r7, #0]
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 fb78 	bl	8009314 <USBD_CtlError>
                  break;
 8008c24:	e054      	b.n	8008cd0 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008c26:	7bbb      	ldrb	r3, [r7, #14]
 8008c28:	f003 020f 	and.w	r2, r3, #15
 8008c2c:	6879      	ldr	r1, [r7, #4]
 8008c2e:	4613      	mov	r3, r2
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	4413      	add	r3, r2
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	440b      	add	r3, r1
 8008c38:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d104      	bne.n	8008c4c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008c42:	6839      	ldr	r1, [r7, #0]
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 fb65 	bl	8009314 <USBD_CtlError>
                  break;
 8008c4a:	e041      	b.n	8008cd0 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	da0b      	bge.n	8008c6c <USBD_StdEPReq+0x234>
 8008c54:	7bbb      	ldrb	r3, [r7, #14]
 8008c56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4413      	add	r3, r2
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	3310      	adds	r3, #16
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	4413      	add	r3, r2
 8008c68:	3304      	adds	r3, #4
 8008c6a:	e00b      	b.n	8008c84 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c6c:	7bbb      	ldrb	r3, [r7, #14]
 8008c6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c72:	4613      	mov	r3, r2
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	4413      	add	r3, r2
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	4413      	add	r3, r2
 8008c82:	3304      	adds	r3, #4
 8008c84:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008c86:	7bbb      	ldrb	r3, [r7, #14]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d002      	beq.n	8008c92 <USBD_StdEPReq+0x25a>
 8008c8c:	7bbb      	ldrb	r3, [r7, #14]
 8008c8e:	2b80      	cmp	r3, #128	; 0x80
 8008c90:	d103      	bne.n	8008c9a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	2200      	movs	r2, #0
 8008c96:	601a      	str	r2, [r3, #0]
 8008c98:	e00e      	b.n	8008cb8 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008c9a:	7bbb      	ldrb	r3, [r7, #14]
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 ffee 	bl	8009c80 <USBD_LL_IsStallEP>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d003      	beq.n	8008cb2 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	2201      	movs	r2, #1
 8008cae:	601a      	str	r2, [r3, #0]
 8008cb0:	e002      	b.n	8008cb8 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	2202      	movs	r2, #2
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 fb92 	bl	80093e8 <USBD_CtlSendData>
              break;
 8008cc4:	e004      	b.n	8008cd0 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8008cc6:	6839      	ldr	r1, [r7, #0]
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 fb23 	bl	8009314 <USBD_CtlError>
              break;
 8008cce:	bf00      	nop
          }
          break;
 8008cd0:	e004      	b.n	8008cdc <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8008cd2:	6839      	ldr	r1, [r7, #0]
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 fb1d 	bl	8009314 <USBD_CtlError>
          break;
 8008cda:	bf00      	nop
      }
      break;
 8008cdc:	e004      	b.n	8008ce8 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8008cde:	6839      	ldr	r1, [r7, #0]
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 fb17 	bl	8009314 <USBD_CtlError>
      break;
 8008ce6:	bf00      	nop
  }

  return ret;
 8008ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
	...

08008cf4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008d02:	2300      	movs	r3, #0
 8008d04:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008d06:	2300      	movs	r3, #0
 8008d08:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	885b      	ldrh	r3, [r3, #2]
 8008d0e:	0a1b      	lsrs	r3, r3, #8
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	3b01      	subs	r3, #1
 8008d14:	2b06      	cmp	r3, #6
 8008d16:	f200 8128 	bhi.w	8008f6a <USBD_GetDescriptor+0x276>
 8008d1a:	a201      	add	r2, pc, #4	; (adr r2, 8008d20 <USBD_GetDescriptor+0x2c>)
 8008d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d20:	08008d3d 	.word	0x08008d3d
 8008d24:	08008d55 	.word	0x08008d55
 8008d28:	08008d95 	.word	0x08008d95
 8008d2c:	08008f6b 	.word	0x08008f6b
 8008d30:	08008f6b 	.word	0x08008f6b
 8008d34:	08008f0b 	.word	0x08008f0b
 8008d38:	08008f37 	.word	0x08008f37
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	7c12      	ldrb	r2, [r2, #16]
 8008d48:	f107 0108 	add.w	r1, r7, #8
 8008d4c:	4610      	mov	r0, r2
 8008d4e:	4798      	blx	r3
 8008d50:	60f8      	str	r0, [r7, #12]
      break;
 8008d52:	e112      	b.n	8008f7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	7c1b      	ldrb	r3, [r3, #16]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d10d      	bne.n	8008d78 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d64:	f107 0208 	add.w	r2, r7, #8
 8008d68:	4610      	mov	r0, r2
 8008d6a:	4798      	blx	r3
 8008d6c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	3301      	adds	r3, #1
 8008d72:	2202      	movs	r2, #2
 8008d74:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008d76:	e100      	b.n	8008f7a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d80:	f107 0208 	add.w	r2, r7, #8
 8008d84:	4610      	mov	r0, r2
 8008d86:	4798      	blx	r3
 8008d88:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	2202      	movs	r2, #2
 8008d90:	701a      	strb	r2, [r3, #0]
      break;
 8008d92:	e0f2      	b.n	8008f7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	885b      	ldrh	r3, [r3, #2]
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	2b05      	cmp	r3, #5
 8008d9c:	f200 80ac 	bhi.w	8008ef8 <USBD_GetDescriptor+0x204>
 8008da0:	a201      	add	r2, pc, #4	; (adr r2, 8008da8 <USBD_GetDescriptor+0xb4>)
 8008da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da6:	bf00      	nop
 8008da8:	08008dc1 	.word	0x08008dc1
 8008dac:	08008df5 	.word	0x08008df5
 8008db0:	08008e29 	.word	0x08008e29
 8008db4:	08008e5d 	.word	0x08008e5d
 8008db8:	08008e91 	.word	0x08008e91
 8008dbc:	08008ec5 	.word	0x08008ec5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d00b      	beq.n	8008de4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	7c12      	ldrb	r2, [r2, #16]
 8008dd8:	f107 0108 	add.w	r1, r7, #8
 8008ddc:	4610      	mov	r0, r2
 8008dde:	4798      	blx	r3
 8008de0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008de2:	e091      	b.n	8008f08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008de4:	6839      	ldr	r1, [r7, #0]
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 fa94 	bl	8009314 <USBD_CtlError>
            err++;
 8008dec:	7afb      	ldrb	r3, [r7, #11]
 8008dee:	3301      	adds	r3, #1
 8008df0:	72fb      	strb	r3, [r7, #11]
          break;
 8008df2:	e089      	b.n	8008f08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d00b      	beq.n	8008e18 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	7c12      	ldrb	r2, [r2, #16]
 8008e0c:	f107 0108 	add.w	r1, r7, #8
 8008e10:	4610      	mov	r0, r2
 8008e12:	4798      	blx	r3
 8008e14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e16:	e077      	b.n	8008f08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e18:	6839      	ldr	r1, [r7, #0]
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 fa7a 	bl	8009314 <USBD_CtlError>
            err++;
 8008e20:	7afb      	ldrb	r3, [r7, #11]
 8008e22:	3301      	adds	r3, #1
 8008e24:	72fb      	strb	r3, [r7, #11]
          break;
 8008e26:	e06f      	b.n	8008f08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00b      	beq.n	8008e4c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	7c12      	ldrb	r2, [r2, #16]
 8008e40:	f107 0108 	add.w	r1, r7, #8
 8008e44:	4610      	mov	r0, r2
 8008e46:	4798      	blx	r3
 8008e48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e4a:	e05d      	b.n	8008f08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e4c:	6839      	ldr	r1, [r7, #0]
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 fa60 	bl	8009314 <USBD_CtlError>
            err++;
 8008e54:	7afb      	ldrb	r3, [r7, #11]
 8008e56:	3301      	adds	r3, #1
 8008e58:	72fb      	strb	r3, [r7, #11]
          break;
 8008e5a:	e055      	b.n	8008f08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e62:	691b      	ldr	r3, [r3, #16]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d00b      	beq.n	8008e80 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e6e:	691b      	ldr	r3, [r3, #16]
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	7c12      	ldrb	r2, [r2, #16]
 8008e74:	f107 0108 	add.w	r1, r7, #8
 8008e78:	4610      	mov	r0, r2
 8008e7a:	4798      	blx	r3
 8008e7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e7e:	e043      	b.n	8008f08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e80:	6839      	ldr	r1, [r7, #0]
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 fa46 	bl	8009314 <USBD_CtlError>
            err++;
 8008e88:	7afb      	ldrb	r3, [r7, #11]
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	72fb      	strb	r3, [r7, #11]
          break;
 8008e8e:	e03b      	b.n	8008f08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e96:	695b      	ldr	r3, [r3, #20]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d00b      	beq.n	8008eb4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ea2:	695b      	ldr	r3, [r3, #20]
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	7c12      	ldrb	r2, [r2, #16]
 8008ea8:	f107 0108 	add.w	r1, r7, #8
 8008eac:	4610      	mov	r0, r2
 8008eae:	4798      	blx	r3
 8008eb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008eb2:	e029      	b.n	8008f08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008eb4:	6839      	ldr	r1, [r7, #0]
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 fa2c 	bl	8009314 <USBD_CtlError>
            err++;
 8008ebc:	7afb      	ldrb	r3, [r7, #11]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ec2:	e021      	b.n	8008f08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008eca:	699b      	ldr	r3, [r3, #24]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00b      	beq.n	8008ee8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ed6:	699b      	ldr	r3, [r3, #24]
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	7c12      	ldrb	r2, [r2, #16]
 8008edc:	f107 0108 	add.w	r1, r7, #8
 8008ee0:	4610      	mov	r0, r2
 8008ee2:	4798      	blx	r3
 8008ee4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ee6:	e00f      	b.n	8008f08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ee8:	6839      	ldr	r1, [r7, #0]
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 fa12 	bl	8009314 <USBD_CtlError>
            err++;
 8008ef0:	7afb      	ldrb	r3, [r7, #11]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ef6:	e007      	b.n	8008f08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008ef8:	6839      	ldr	r1, [r7, #0]
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 fa0a 	bl	8009314 <USBD_CtlError>
          err++;
 8008f00:	7afb      	ldrb	r3, [r7, #11]
 8008f02:	3301      	adds	r3, #1
 8008f04:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008f06:	e038      	b.n	8008f7a <USBD_GetDescriptor+0x286>
 8008f08:	e037      	b.n	8008f7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	7c1b      	ldrb	r3, [r3, #16]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d109      	bne.n	8008f26 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f1a:	f107 0208 	add.w	r2, r7, #8
 8008f1e:	4610      	mov	r0, r2
 8008f20:	4798      	blx	r3
 8008f22:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f24:	e029      	b.n	8008f7a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008f26:	6839      	ldr	r1, [r7, #0]
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 f9f3 	bl	8009314 <USBD_CtlError>
        err++;
 8008f2e:	7afb      	ldrb	r3, [r7, #11]
 8008f30:	3301      	adds	r3, #1
 8008f32:	72fb      	strb	r3, [r7, #11]
      break;
 8008f34:	e021      	b.n	8008f7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	7c1b      	ldrb	r3, [r3, #16]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d10d      	bne.n	8008f5a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f46:	f107 0208 	add.w	r2, r7, #8
 8008f4a:	4610      	mov	r0, r2
 8008f4c:	4798      	blx	r3
 8008f4e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	3301      	adds	r3, #1
 8008f54:	2207      	movs	r2, #7
 8008f56:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f58:	e00f      	b.n	8008f7a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008f5a:	6839      	ldr	r1, [r7, #0]
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 f9d9 	bl	8009314 <USBD_CtlError>
        err++;
 8008f62:	7afb      	ldrb	r3, [r7, #11]
 8008f64:	3301      	adds	r3, #1
 8008f66:	72fb      	strb	r3, [r7, #11]
      break;
 8008f68:	e007      	b.n	8008f7a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008f6a:	6839      	ldr	r1, [r7, #0]
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 f9d1 	bl	8009314 <USBD_CtlError>
      err++;
 8008f72:	7afb      	ldrb	r3, [r7, #11]
 8008f74:	3301      	adds	r3, #1
 8008f76:	72fb      	strb	r3, [r7, #11]
      break;
 8008f78:	bf00      	nop
  }

  if (err != 0U)
 8008f7a:	7afb      	ldrb	r3, [r7, #11]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d11c      	bne.n	8008fba <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008f80:	893b      	ldrh	r3, [r7, #8]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d011      	beq.n	8008faa <USBD_GetDescriptor+0x2b6>
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	88db      	ldrh	r3, [r3, #6]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d00d      	beq.n	8008faa <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	88da      	ldrh	r2, [r3, #6]
 8008f92:	893b      	ldrh	r3, [r7, #8]
 8008f94:	4293      	cmp	r3, r2
 8008f96:	bf28      	it	cs
 8008f98:	4613      	movcs	r3, r2
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008f9e:	893b      	ldrh	r3, [r7, #8]
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	68f9      	ldr	r1, [r7, #12]
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 fa1f 	bl	80093e8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	88db      	ldrh	r3, [r3, #6]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d104      	bne.n	8008fbc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 fa76 	bl	80094a4 <USBD_CtlSendStatus>
 8008fb8:	e000      	b.n	8008fbc <USBD_GetDescriptor+0x2c8>
    return;
 8008fba:	bf00      	nop
    }
  }
}
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop

08008fc4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	889b      	ldrh	r3, [r3, #4]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d130      	bne.n	8009038 <USBD_SetAddress+0x74>
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	88db      	ldrh	r3, [r3, #6]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d12c      	bne.n	8009038 <USBD_SetAddress+0x74>
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	885b      	ldrh	r3, [r3, #2]
 8008fe2:	2b7f      	cmp	r3, #127	; 0x7f
 8008fe4:	d828      	bhi.n	8009038 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	885b      	ldrh	r3, [r3, #2]
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ff0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ff8:	2b03      	cmp	r3, #3
 8008ffa:	d104      	bne.n	8009006 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008ffc:	6839      	ldr	r1, [r7, #0]
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 f988 	bl	8009314 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009004:	e01c      	b.n	8009040 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	7bfa      	ldrb	r2, [r7, #15]
 800900a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800900e:	7bfb      	ldrb	r3, [r7, #15]
 8009010:	4619      	mov	r1, r3
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 fe59 	bl	8009cca <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 fa43 	bl	80094a4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800901e:	7bfb      	ldrb	r3, [r7, #15]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d004      	beq.n	800902e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2202      	movs	r2, #2
 8009028:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800902c:	e008      	b.n	8009040 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2201      	movs	r2, #1
 8009032:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009036:	e003      	b.n	8009040 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009038:	6839      	ldr	r1, [r7, #0]
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 f96a 	bl	8009314 <USBD_CtlError>
  }
}
 8009040:	bf00      	nop
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	885b      	ldrh	r3, [r3, #2]
 8009056:	b2da      	uxtb	r2, r3
 8009058:	4b41      	ldr	r3, [pc, #260]	; (8009160 <USBD_SetConfig+0x118>)
 800905a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800905c:	4b40      	ldr	r3, [pc, #256]	; (8009160 <USBD_SetConfig+0x118>)
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	2b01      	cmp	r3, #1
 8009062:	d904      	bls.n	800906e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009064:	6839      	ldr	r1, [r7, #0]
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 f954 	bl	8009314 <USBD_CtlError>
 800906c:	e075      	b.n	800915a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009074:	2b02      	cmp	r3, #2
 8009076:	d002      	beq.n	800907e <USBD_SetConfig+0x36>
 8009078:	2b03      	cmp	r3, #3
 800907a:	d023      	beq.n	80090c4 <USBD_SetConfig+0x7c>
 800907c:	e062      	b.n	8009144 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800907e:	4b38      	ldr	r3, [pc, #224]	; (8009160 <USBD_SetConfig+0x118>)
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d01a      	beq.n	80090bc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009086:	4b36      	ldr	r3, [pc, #216]	; (8009160 <USBD_SetConfig+0x118>)
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	461a      	mov	r2, r3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2203      	movs	r2, #3
 8009094:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009098:	4b31      	ldr	r3, [pc, #196]	; (8009160 <USBD_SetConfig+0x118>)
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	4619      	mov	r1, r3
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f7ff f9f3 	bl	800848a <USBD_SetClassConfig>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b02      	cmp	r3, #2
 80090a8:	d104      	bne.n	80090b4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80090aa:	6839      	ldr	r1, [r7, #0]
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 f931 	bl	8009314 <USBD_CtlError>
            return;
 80090b2:	e052      	b.n	800915a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 f9f5 	bl	80094a4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80090ba:	e04e      	b.n	800915a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 f9f1 	bl	80094a4 <USBD_CtlSendStatus>
        break;
 80090c2:	e04a      	b.n	800915a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80090c4:	4b26      	ldr	r3, [pc, #152]	; (8009160 <USBD_SetConfig+0x118>)
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d112      	bne.n	80090f2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2202      	movs	r2, #2
 80090d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80090d4:	4b22      	ldr	r3, [pc, #136]	; (8009160 <USBD_SetConfig+0x118>)
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	461a      	mov	r2, r3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80090de:	4b20      	ldr	r3, [pc, #128]	; (8009160 <USBD_SetConfig+0x118>)
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	4619      	mov	r1, r3
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f7ff f9ef 	bl	80084c8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 f9da 	bl	80094a4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80090f0:	e033      	b.n	800915a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80090f2:	4b1b      	ldr	r3, [pc, #108]	; (8009160 <USBD_SetConfig+0x118>)
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	461a      	mov	r2, r3
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d01d      	beq.n	800913c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	b2db      	uxtb	r3, r3
 8009106:	4619      	mov	r1, r3
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f7ff f9dd 	bl	80084c8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800910e:	4b14      	ldr	r3, [pc, #80]	; (8009160 <USBD_SetConfig+0x118>)
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	461a      	mov	r2, r3
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009118:	4b11      	ldr	r3, [pc, #68]	; (8009160 <USBD_SetConfig+0x118>)
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	4619      	mov	r1, r3
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f7ff f9b3 	bl	800848a <USBD_SetClassConfig>
 8009124:	4603      	mov	r3, r0
 8009126:	2b02      	cmp	r3, #2
 8009128:	d104      	bne.n	8009134 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800912a:	6839      	ldr	r1, [r7, #0]
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 f8f1 	bl	8009314 <USBD_CtlError>
            return;
 8009132:	e012      	b.n	800915a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 f9b5 	bl	80094a4 <USBD_CtlSendStatus>
        break;
 800913a:	e00e      	b.n	800915a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 f9b1 	bl	80094a4 <USBD_CtlSendStatus>
        break;
 8009142:	e00a      	b.n	800915a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009144:	6839      	ldr	r1, [r7, #0]
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 f8e4 	bl	8009314 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800914c:	4b04      	ldr	r3, [pc, #16]	; (8009160 <USBD_SetConfig+0x118>)
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	4619      	mov	r1, r3
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f7ff f9b8 	bl	80084c8 <USBD_ClrClassConfig>
        break;
 8009158:	bf00      	nop
    }
  }
}
 800915a:	3708      	adds	r7, #8
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}
 8009160:	2000059c 	.word	0x2000059c

08009164 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	88db      	ldrh	r3, [r3, #6]
 8009172:	2b01      	cmp	r3, #1
 8009174:	d004      	beq.n	8009180 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009176:	6839      	ldr	r1, [r7, #0]
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 f8cb 	bl	8009314 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800917e:	e021      	b.n	80091c4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009186:	2b01      	cmp	r3, #1
 8009188:	db17      	blt.n	80091ba <USBD_GetConfig+0x56>
 800918a:	2b02      	cmp	r3, #2
 800918c:	dd02      	ble.n	8009194 <USBD_GetConfig+0x30>
 800918e:	2b03      	cmp	r3, #3
 8009190:	d00b      	beq.n	80091aa <USBD_GetConfig+0x46>
 8009192:	e012      	b.n	80091ba <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	3308      	adds	r3, #8
 800919e:	2201      	movs	r2, #1
 80091a0:	4619      	mov	r1, r3
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 f920 	bl	80093e8 <USBD_CtlSendData>
        break;
 80091a8:	e00c      	b.n	80091c4 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	3304      	adds	r3, #4
 80091ae:	2201      	movs	r2, #1
 80091b0:	4619      	mov	r1, r3
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 f918 	bl	80093e8 <USBD_CtlSendData>
        break;
 80091b8:	e004      	b.n	80091c4 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80091ba:	6839      	ldr	r1, [r7, #0]
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f8a9 	bl	8009314 <USBD_CtlError>
        break;
 80091c2:	bf00      	nop
}
 80091c4:	bf00      	nop
 80091c6:	3708      	adds	r7, #8
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091dc:	3b01      	subs	r3, #1
 80091de:	2b02      	cmp	r3, #2
 80091e0:	d81e      	bhi.n	8009220 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	88db      	ldrh	r3, [r3, #6]
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d004      	beq.n	80091f4 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80091ea:	6839      	ldr	r1, [r7, #0]
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 f891 	bl	8009314 <USBD_CtlError>
        break;
 80091f2:	e01a      	b.n	800922a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2201      	movs	r2, #1
 80091f8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009200:	2b00      	cmp	r3, #0
 8009202:	d005      	beq.n	8009210 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	f043 0202 	orr.w	r2, r3, #2
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	330c      	adds	r3, #12
 8009214:	2202      	movs	r2, #2
 8009216:	4619      	mov	r1, r3
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 f8e5 	bl	80093e8 <USBD_CtlSendData>
      break;
 800921e:	e004      	b.n	800922a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009220:	6839      	ldr	r1, [r7, #0]
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 f876 	bl	8009314 <USBD_CtlError>
      break;
 8009228:	bf00      	nop
  }
}
 800922a:	bf00      	nop
 800922c:	3708      	adds	r7, #8
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009232:	b580      	push	{r7, lr}
 8009234:	b082      	sub	sp, #8
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
 800923a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	885b      	ldrh	r3, [r3, #2]
 8009240:	2b01      	cmp	r3, #1
 8009242:	d106      	bne.n	8009252 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2201      	movs	r2, #1
 8009248:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 f929 	bl	80094a4 <USBD_CtlSendStatus>
  }
}
 8009252:	bf00      	nop
 8009254:	3708      	adds	r7, #8
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b082      	sub	sp, #8
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
 8009262:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800926a:	3b01      	subs	r3, #1
 800926c:	2b02      	cmp	r3, #2
 800926e:	d80b      	bhi.n	8009288 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	885b      	ldrh	r3, [r3, #2]
 8009274:	2b01      	cmp	r3, #1
 8009276:	d10c      	bne.n	8009292 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2200      	movs	r2, #0
 800927c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 f90f 	bl	80094a4 <USBD_CtlSendStatus>
      }
      break;
 8009286:	e004      	b.n	8009292 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009288:	6839      	ldr	r1, [r7, #0]
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 f842 	bl	8009314 <USBD_CtlError>
      break;
 8009290:	e000      	b.n	8009294 <USBD_ClrFeature+0x3a>
      break;
 8009292:	bf00      	nop
  }
}
 8009294:	bf00      	nop
 8009296:	3708      	adds	r7, #8
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	781a      	ldrb	r2, [r3, #0]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	785a      	ldrb	r2, [r3, #1]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	3302      	adds	r3, #2
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	b29a      	uxth	r2, r3
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	3303      	adds	r3, #3
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	021b      	lsls	r3, r3, #8
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	4413      	add	r3, r2
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	3304      	adds	r3, #4
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	b29a      	uxth	r2, r3
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	3305      	adds	r3, #5
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	021b      	lsls	r3, r3, #8
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	4413      	add	r3, r2
 80092e8:	b29a      	uxth	r2, r3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	3306      	adds	r3, #6
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	b29a      	uxth	r2, r3
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	3307      	adds	r3, #7
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	021b      	lsls	r3, r3, #8
 8009300:	b29b      	uxth	r3, r3
 8009302:	4413      	add	r3, r2
 8009304:	b29a      	uxth	r2, r3
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	80da      	strh	r2, [r3, #6]

}
 800930a:	bf00      	nop
 800930c:	370c      	adds	r7, #12
 800930e:	46bd      	mov	sp, r7
 8009310:	bc80      	pop	{r7}
 8009312:	4770      	bx	lr

08009314 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800931e:	2180      	movs	r1, #128	; 0x80
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 fc6f 	bl	8009c04 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009326:	2100      	movs	r1, #0
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 fc6b 	bl	8009c04 <USBD_LL_StallEP>
}
 800932e:	bf00      	nop
 8009330:	3708      	adds	r7, #8
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b086      	sub	sp, #24
 800933a:	af00      	add	r7, sp, #0
 800933c:	60f8      	str	r0, [r7, #12]
 800933e:	60b9      	str	r1, [r7, #8]
 8009340:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009342:	2300      	movs	r3, #0
 8009344:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d032      	beq.n	80093b2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800934c:	68f8      	ldr	r0, [r7, #12]
 800934e:	f000 f834 	bl	80093ba <USBD_GetLen>
 8009352:	4603      	mov	r3, r0
 8009354:	3301      	adds	r3, #1
 8009356:	b29b      	uxth	r3, r3
 8009358:	005b      	lsls	r3, r3, #1
 800935a:	b29a      	uxth	r2, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009360:	7dfb      	ldrb	r3, [r7, #23]
 8009362:	1c5a      	adds	r2, r3, #1
 8009364:	75fa      	strb	r2, [r7, #23]
 8009366:	461a      	mov	r2, r3
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	4413      	add	r3, r2
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	7812      	ldrb	r2, [r2, #0]
 8009370:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009372:	7dfb      	ldrb	r3, [r7, #23]
 8009374:	1c5a      	adds	r2, r3, #1
 8009376:	75fa      	strb	r2, [r7, #23]
 8009378:	461a      	mov	r2, r3
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	4413      	add	r3, r2
 800937e:	2203      	movs	r2, #3
 8009380:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009382:	e012      	b.n	80093aa <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	1c5a      	adds	r2, r3, #1
 8009388:	60fa      	str	r2, [r7, #12]
 800938a:	7dfa      	ldrb	r2, [r7, #23]
 800938c:	1c51      	adds	r1, r2, #1
 800938e:	75f9      	strb	r1, [r7, #23]
 8009390:	4611      	mov	r1, r2
 8009392:	68ba      	ldr	r2, [r7, #8]
 8009394:	440a      	add	r2, r1
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800939a:	7dfb      	ldrb	r3, [r7, #23]
 800939c:	1c5a      	adds	r2, r3, #1
 800939e:	75fa      	strb	r2, [r7, #23]
 80093a0:	461a      	mov	r2, r3
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	4413      	add	r3, r2
 80093a6:	2200      	movs	r2, #0
 80093a8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d1e8      	bne.n	8009384 <USBD_GetString+0x4e>
    }
  }
}
 80093b2:	bf00      	nop
 80093b4:	3718      	adds	r7, #24
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80093ba:	b480      	push	{r7}
 80093bc:	b085      	sub	sp, #20
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80093c2:	2300      	movs	r3, #0
 80093c4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80093c6:	e005      	b.n	80093d4 <USBD_GetLen+0x1a>
  {
    len++;
 80093c8:	7bfb      	ldrb	r3, [r7, #15]
 80093ca:	3301      	adds	r3, #1
 80093cc:	73fb      	strb	r3, [r7, #15]
    buf++;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	3301      	adds	r3, #1
 80093d2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d1f5      	bne.n	80093c8 <USBD_GetLen+0xe>
  }

  return len;
 80093dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3714      	adds	r7, #20
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bc80      	pop	{r7}
 80093e6:	4770      	bx	lr

080093e8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	60b9      	str	r1, [r7, #8]
 80093f2:	4613      	mov	r3, r2
 80093f4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2202      	movs	r2, #2
 80093fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80093fe:	88fa      	ldrh	r2, [r7, #6]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009404:	88fa      	ldrh	r2, [r7, #6]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800940a:	88fb      	ldrh	r3, [r7, #6]
 800940c:	68ba      	ldr	r2, [r7, #8]
 800940e:	2100      	movs	r1, #0
 8009410:	68f8      	ldr	r0, [r7, #12]
 8009412:	f000 fc79 	bl	8009d08 <USBD_LL_Transmit>

  return USBD_OK;
 8009416:	2300      	movs	r3, #0
}
 8009418:	4618      	mov	r0, r3
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	4613      	mov	r3, r2
 800942c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800942e:	88fb      	ldrh	r3, [r7, #6]
 8009430:	68ba      	ldr	r2, [r7, #8]
 8009432:	2100      	movs	r1, #0
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f000 fc67 	bl	8009d08 <USBD_LL_Transmit>

  return USBD_OK;
 800943a:	2300      	movs	r3, #0
}
 800943c:	4618      	mov	r0, r3
 800943e:	3710      	adds	r7, #16
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	4613      	mov	r3, r2
 8009450:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2203      	movs	r2, #3
 8009456:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800945a:	88fa      	ldrh	r2, [r7, #6]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009462:	88fa      	ldrh	r2, [r7, #6]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800946a:	88fb      	ldrh	r3, [r7, #6]
 800946c:	68ba      	ldr	r2, [r7, #8]
 800946e:	2100      	movs	r1, #0
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f000 fc6c 	bl	8009d4e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009476:	2300      	movs	r3, #0
}
 8009478:	4618      	mov	r0, r3
 800947a:	3710      	adds	r7, #16
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	4613      	mov	r3, r2
 800948c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800948e:	88fb      	ldrh	r3, [r7, #6]
 8009490:	68ba      	ldr	r2, [r7, #8]
 8009492:	2100      	movs	r1, #0
 8009494:	68f8      	ldr	r0, [r7, #12]
 8009496:	f000 fc5a 	bl	8009d4e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800949a:	2300      	movs	r3, #0
}
 800949c:	4618      	mov	r0, r3
 800949e:	3710      	adds	r7, #16
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2204      	movs	r2, #4
 80094b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80094b4:	2300      	movs	r3, #0
 80094b6:	2200      	movs	r2, #0
 80094b8:	2100      	movs	r1, #0
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 fc24 	bl	8009d08 <USBD_LL_Transmit>

  return USBD_OK;
 80094c0:	2300      	movs	r3, #0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3708      	adds	r7, #8
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b082      	sub	sp, #8
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2205      	movs	r2, #5
 80094d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094da:	2300      	movs	r3, #0
 80094dc:	2200      	movs	r2, #0
 80094de:	2100      	movs	r1, #0
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 fc34 	bl	8009d4e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094e6:	2300      	movs	r3, #0
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3708      	adds	r7, #8
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80094f4:	2200      	movs	r2, #0
 80094f6:	4912      	ldr	r1, [pc, #72]	; (8009540 <MX_USB_DEVICE_Init+0x50>)
 80094f8:	4812      	ldr	r0, [pc, #72]	; (8009544 <MX_USB_DEVICE_Init+0x54>)
 80094fa:	f7fe ff6c 	bl	80083d6 <USBD_Init>
 80094fe:	4603      	mov	r3, r0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d001      	beq.n	8009508 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009504:	f7f9 f99e 	bl	8002844 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009508:	490f      	ldr	r1, [pc, #60]	; (8009548 <MX_USB_DEVICE_Init+0x58>)
 800950a:	480e      	ldr	r0, [pc, #56]	; (8009544 <MX_USB_DEVICE_Init+0x54>)
 800950c:	f7fe ff8e 	bl	800842c <USBD_RegisterClass>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d001      	beq.n	800951a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009516:	f7f9 f995 	bl	8002844 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800951a:	490c      	ldr	r1, [pc, #48]	; (800954c <MX_USB_DEVICE_Init+0x5c>)
 800951c:	4809      	ldr	r0, [pc, #36]	; (8009544 <MX_USB_DEVICE_Init+0x54>)
 800951e:	f7fe febf 	bl	80082a0 <USBD_CDC_RegisterInterface>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d001      	beq.n	800952c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009528:	f7f9 f98c 	bl	8002844 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800952c:	4805      	ldr	r0, [pc, #20]	; (8009544 <MX_USB_DEVICE_Init+0x54>)
 800952e:	f7fe ff96 	bl	800845e <USBD_Start>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d001      	beq.n	800953c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009538:	f7f9 f984 	bl	8002844 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800953c:	bf00      	nop
 800953e:	bd80      	pop	{r7, pc}
 8009540:	20000144 	.word	0x20000144
 8009544:	20000d88 	.word	0x20000d88
 8009548:	20000030 	.word	0x20000030
 800954c:	20000134 	.word	0x20000134

08009550 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009554:	2200      	movs	r2, #0
 8009556:	4905      	ldr	r1, [pc, #20]	; (800956c <CDC_Init_FS+0x1c>)
 8009558:	4805      	ldr	r0, [pc, #20]	; (8009570 <CDC_Init_FS+0x20>)
 800955a:	f7fe feb7 	bl	80082cc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800955e:	4905      	ldr	r1, [pc, #20]	; (8009574 <CDC_Init_FS+0x24>)
 8009560:	4803      	ldr	r0, [pc, #12]	; (8009570 <CDC_Init_FS+0x20>)
 8009562:	f7fe fecc 	bl	80082fe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009566:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009568:	4618      	mov	r0, r3
 800956a:	bd80      	pop	{r7, pc}
 800956c:	20001434 	.word	0x20001434
 8009570:	20000d88 	.word	0x20000d88
 8009574:	2000104c 	.word	0x2000104c

08009578 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009578:	b480      	push	{r7}
 800957a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800957c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800957e:	4618      	mov	r0, r3
 8009580:	46bd      	mov	sp, r7
 8009582:	bc80      	pop	{r7}
 8009584:	4770      	bx	lr
	...

08009588 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	4603      	mov	r3, r0
 8009590:	6039      	str	r1, [r7, #0]
 8009592:	71fb      	strb	r3, [r7, #7]
 8009594:	4613      	mov	r3, r2
 8009596:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009598:	79fb      	ldrb	r3, [r7, #7]
 800959a:	2b23      	cmp	r3, #35	; 0x23
 800959c:	d866      	bhi.n	800966c <CDC_Control_FS+0xe4>
 800959e:	a201      	add	r2, pc, #4	; (adr r2, 80095a4 <CDC_Control_FS+0x1c>)
 80095a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a4:	0800966d 	.word	0x0800966d
 80095a8:	0800966d 	.word	0x0800966d
 80095ac:	0800966d 	.word	0x0800966d
 80095b0:	0800966d 	.word	0x0800966d
 80095b4:	0800966d 	.word	0x0800966d
 80095b8:	0800966d 	.word	0x0800966d
 80095bc:	0800966d 	.word	0x0800966d
 80095c0:	0800966d 	.word	0x0800966d
 80095c4:	0800966d 	.word	0x0800966d
 80095c8:	0800966d 	.word	0x0800966d
 80095cc:	0800966d 	.word	0x0800966d
 80095d0:	0800966d 	.word	0x0800966d
 80095d4:	0800966d 	.word	0x0800966d
 80095d8:	0800966d 	.word	0x0800966d
 80095dc:	0800966d 	.word	0x0800966d
 80095e0:	0800966d 	.word	0x0800966d
 80095e4:	0800966d 	.word	0x0800966d
 80095e8:	0800966d 	.word	0x0800966d
 80095ec:	0800966d 	.word	0x0800966d
 80095f0:	0800966d 	.word	0x0800966d
 80095f4:	0800966d 	.word	0x0800966d
 80095f8:	0800966d 	.word	0x0800966d
 80095fc:	0800966d 	.word	0x0800966d
 8009600:	0800966d 	.word	0x0800966d
 8009604:	0800966d 	.word	0x0800966d
 8009608:	0800966d 	.word	0x0800966d
 800960c:	0800966d 	.word	0x0800966d
 8009610:	0800966d 	.word	0x0800966d
 8009614:	0800966d 	.word	0x0800966d
 8009618:	0800966d 	.word	0x0800966d
 800961c:	0800966d 	.word	0x0800966d
 8009620:	0800966d 	.word	0x0800966d
 8009624:	08009635 	.word	0x08009635
 8009628:	08009657 	.word	0x08009657
 800962c:	0800966d 	.word	0x0800966d
 8009630:	0800966d 	.word	0x0800966d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(&linecode,pbuf,length>sizeof(linecode)?(sizeof(linecode)):(length));
 8009634:	88bb      	ldrh	r3, [r7, #4]
 8009636:	2b0c      	cmp	r3, #12
 8009638:	bf28      	it	cs
 800963a:	230c      	movcs	r3, #12
 800963c:	b29b      	uxth	r3, r3
 800963e:	461a      	mov	r2, r3
 8009640:	6839      	ldr	r1, [r7, #0]
 8009642:	480d      	ldr	r0, [pc, #52]	; (8009678 <CDC_Control_FS+0xf0>)
 8009644:	f000 fc2a 	bl	8009e9c <memcpy>
    	linecode.IsUpdate++;
 8009648:	4b0b      	ldr	r3, [pc, #44]	; (8009678 <CDC_Control_FS+0xf0>)
 800964a:	7a1b      	ldrb	r3, [r3, #8]
 800964c:	3301      	adds	r3, #1
 800964e:	b2da      	uxtb	r2, r3
 8009650:	4b09      	ldr	r3, [pc, #36]	; (8009678 <CDC_Control_FS+0xf0>)
 8009652:	721a      	strb	r2, [r3, #8]
    break;
 8009654:	e00b      	b.n	800966e <CDC_Control_FS+0xe6>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf,&linecode,length>sizeof(linecode)?(sizeof(linecode)):(length));
 8009656:	88bb      	ldrh	r3, [r7, #4]
 8009658:	2b0c      	cmp	r3, #12
 800965a:	bf28      	it	cs
 800965c:	230c      	movcs	r3, #12
 800965e:	b29b      	uxth	r3, r3
 8009660:	461a      	mov	r2, r3
 8009662:	4905      	ldr	r1, [pc, #20]	; (8009678 <CDC_Control_FS+0xf0>)
 8009664:	6838      	ldr	r0, [r7, #0]
 8009666:	f000 fc19 	bl	8009e9c <memcpy>
    break;
 800966a:	e000      	b.n	800966e <CDC_Control_FS+0xe6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800966c:	bf00      	nop
  }

  return (USBD_OK);
 800966e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009670:	4618      	mov	r0, r3
 8009672:	3708      	adds	r7, #8
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}
 8009678:	20000000 	.word	0x20000000

0800967c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  cdc_receive_call(Buf, *Len);
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4619      	mov	r1, r3
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f7f8 faf5 	bl	8001c7c <cdc_receive_call>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009692:	6879      	ldr	r1, [r7, #4]
 8009694:	4805      	ldr	r0, [pc, #20]	; (80096ac <CDC_Receive_FS+0x30>)
 8009696:	f7fe fe32 	bl	80082fe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800969a:	4804      	ldr	r0, [pc, #16]	; (80096ac <CDC_Receive_FS+0x30>)
 800969c:	f7fe fe71 	bl	8008382 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80096a0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3708      	adds	r7, #8
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	20000d88 	.word	0x20000d88

080096b0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	460b      	mov	r3, r1
 80096ba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80096bc:	2300      	movs	r3, #0
 80096be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80096c0:	4b0d      	ldr	r3, [pc, #52]	; (80096f8 <CDC_Transmit_FS+0x48>)
 80096c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096c6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d001      	beq.n	80096d6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80096d2:	2301      	movs	r3, #1
 80096d4:	e00b      	b.n	80096ee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80096d6:	887b      	ldrh	r3, [r7, #2]
 80096d8:	461a      	mov	r2, r3
 80096da:	6879      	ldr	r1, [r7, #4]
 80096dc:	4806      	ldr	r0, [pc, #24]	; (80096f8 <CDC_Transmit_FS+0x48>)
 80096de:	f7fe fdf5 	bl	80082cc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80096e2:	4805      	ldr	r0, [pc, #20]	; (80096f8 <CDC_Transmit_FS+0x48>)
 80096e4:	f7fe fe1e 	bl	8008324 <USBD_CDC_TransmitPacket>
 80096e8:	4603      	mov	r3, r0
 80096ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80096ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3710      	adds	r7, #16
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	20000d88 	.word	0x20000d88

080096fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	4603      	mov	r3, r0
 8009704:	6039      	str	r1, [r7, #0]
 8009706:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	2212      	movs	r2, #18
 800970c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800970e:	4b03      	ldr	r3, [pc, #12]	; (800971c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009710:	4618      	mov	r0, r3
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	bc80      	pop	{r7}
 8009718:	4770      	bx	lr
 800971a:	bf00      	nop
 800971c:	20000160 	.word	0x20000160

08009720 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	4603      	mov	r3, r0
 8009728:	6039      	str	r1, [r7, #0]
 800972a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	2204      	movs	r2, #4
 8009730:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009732:	4b03      	ldr	r3, [pc, #12]	; (8009740 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009734:	4618      	mov	r0, r3
 8009736:	370c      	adds	r7, #12
 8009738:	46bd      	mov	sp, r7
 800973a:	bc80      	pop	{r7}
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop
 8009740:	20000174 	.word	0x20000174

08009744 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	4603      	mov	r3, r0
 800974c:	6039      	str	r1, [r7, #0]
 800974e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009750:	79fb      	ldrb	r3, [r7, #7]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d105      	bne.n	8009762 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009756:	683a      	ldr	r2, [r7, #0]
 8009758:	4907      	ldr	r1, [pc, #28]	; (8009778 <USBD_FS_ProductStrDescriptor+0x34>)
 800975a:	4808      	ldr	r0, [pc, #32]	; (800977c <USBD_FS_ProductStrDescriptor+0x38>)
 800975c:	f7ff fdeb 	bl	8009336 <USBD_GetString>
 8009760:	e004      	b.n	800976c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009762:	683a      	ldr	r2, [r7, #0]
 8009764:	4904      	ldr	r1, [pc, #16]	; (8009778 <USBD_FS_ProductStrDescriptor+0x34>)
 8009766:	4805      	ldr	r0, [pc, #20]	; (800977c <USBD_FS_ProductStrDescriptor+0x38>)
 8009768:	f7ff fde5 	bl	8009336 <USBD_GetString>
  }
  return USBD_StrDesc;
 800976c:	4b02      	ldr	r3, [pc, #8]	; (8009778 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800976e:	4618      	mov	r0, r3
 8009770:	3708      	adds	r7, #8
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	2000181c 	.word	0x2000181c
 800977c:	08009ef0 	.word	0x08009ef0

08009780 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	4603      	mov	r3, r0
 8009788:	6039      	str	r1, [r7, #0]
 800978a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800978c:	683a      	ldr	r2, [r7, #0]
 800978e:	4904      	ldr	r1, [pc, #16]	; (80097a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009790:	4804      	ldr	r0, [pc, #16]	; (80097a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009792:	f7ff fdd0 	bl	8009336 <USBD_GetString>
  return USBD_StrDesc;
 8009796:	4b02      	ldr	r3, [pc, #8]	; (80097a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009798:	4618      	mov	r0, r3
 800979a:	3708      	adds	r7, #8
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	2000181c 	.word	0x2000181c
 80097a4:	08009ef0 	.word	0x08009ef0

080097a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	4603      	mov	r3, r0
 80097b0:	6039      	str	r1, [r7, #0]
 80097b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	221a      	movs	r2, #26
 80097b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80097ba:	f000 f843 	bl	8009844 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80097be:	4b02      	ldr	r3, [pc, #8]	; (80097c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3708      	adds	r7, #8
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}
 80097c8:	20000178 	.word	0x20000178

080097cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	4603      	mov	r3, r0
 80097d4:	6039      	str	r1, [r7, #0]
 80097d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80097d8:	79fb      	ldrb	r3, [r7, #7]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d105      	bne.n	80097ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80097de:	683a      	ldr	r2, [r7, #0]
 80097e0:	4907      	ldr	r1, [pc, #28]	; (8009800 <USBD_FS_ConfigStrDescriptor+0x34>)
 80097e2:	4808      	ldr	r0, [pc, #32]	; (8009804 <USBD_FS_ConfigStrDescriptor+0x38>)
 80097e4:	f7ff fda7 	bl	8009336 <USBD_GetString>
 80097e8:	e004      	b.n	80097f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80097ea:	683a      	ldr	r2, [r7, #0]
 80097ec:	4904      	ldr	r1, [pc, #16]	; (8009800 <USBD_FS_ConfigStrDescriptor+0x34>)
 80097ee:	4805      	ldr	r0, [pc, #20]	; (8009804 <USBD_FS_ConfigStrDescriptor+0x38>)
 80097f0:	f7ff fda1 	bl	8009336 <USBD_GetString>
  }
  return USBD_StrDesc;
 80097f4:	4b02      	ldr	r3, [pc, #8]	; (8009800 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3708      	adds	r7, #8
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	2000181c 	.word	0x2000181c
 8009804:	08009ef4 	.word	0x08009ef4

08009808 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
 800980e:	4603      	mov	r3, r0
 8009810:	6039      	str	r1, [r7, #0]
 8009812:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009814:	79fb      	ldrb	r3, [r7, #7]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d105      	bne.n	8009826 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800981a:	683a      	ldr	r2, [r7, #0]
 800981c:	4907      	ldr	r1, [pc, #28]	; (800983c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800981e:	4808      	ldr	r0, [pc, #32]	; (8009840 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009820:	f7ff fd89 	bl	8009336 <USBD_GetString>
 8009824:	e004      	b.n	8009830 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009826:	683a      	ldr	r2, [r7, #0]
 8009828:	4904      	ldr	r1, [pc, #16]	; (800983c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800982a:	4805      	ldr	r0, [pc, #20]	; (8009840 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800982c:	f7ff fd83 	bl	8009336 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009830:	4b02      	ldr	r3, [pc, #8]	; (800983c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009832:	4618      	mov	r0, r3
 8009834:	3708      	adds	r7, #8
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	2000181c 	.word	0x2000181c
 8009840:	08009f00 	.word	0x08009f00

08009844 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800984a:	4b0f      	ldr	r3, [pc, #60]	; (8009888 <Get_SerialNum+0x44>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009850:	4b0e      	ldr	r3, [pc, #56]	; (800988c <Get_SerialNum+0x48>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009856:	4b0e      	ldr	r3, [pc, #56]	; (8009890 <Get_SerialNum+0x4c>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800985c:	68fa      	ldr	r2, [r7, #12]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	4413      	add	r3, r2
 8009862:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d009      	beq.n	800987e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800986a:	2208      	movs	r2, #8
 800986c:	4909      	ldr	r1, [pc, #36]	; (8009894 <Get_SerialNum+0x50>)
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f000 f814 	bl	800989c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009874:	2204      	movs	r2, #4
 8009876:	4908      	ldr	r1, [pc, #32]	; (8009898 <Get_SerialNum+0x54>)
 8009878:	68b8      	ldr	r0, [r7, #8]
 800987a:	f000 f80f 	bl	800989c <IntToUnicode>
  }
}
 800987e:	bf00      	nop
 8009880:	3710      	adds	r7, #16
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	1ffff7e8 	.word	0x1ffff7e8
 800988c:	1ffff7ec 	.word	0x1ffff7ec
 8009890:	1ffff7f0 	.word	0x1ffff7f0
 8009894:	2000017a 	.word	0x2000017a
 8009898:	2000018a 	.word	0x2000018a

0800989c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800989c:	b480      	push	{r7}
 800989e:	b087      	sub	sp, #28
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	60b9      	str	r1, [r7, #8]
 80098a6:	4613      	mov	r3, r2
 80098a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80098aa:	2300      	movs	r3, #0
 80098ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80098ae:	2300      	movs	r3, #0
 80098b0:	75fb      	strb	r3, [r7, #23]
 80098b2:	e027      	b.n	8009904 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	0f1b      	lsrs	r3, r3, #28
 80098b8:	2b09      	cmp	r3, #9
 80098ba:	d80b      	bhi.n	80098d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	0f1b      	lsrs	r3, r3, #28
 80098c0:	b2da      	uxtb	r2, r3
 80098c2:	7dfb      	ldrb	r3, [r7, #23]
 80098c4:	005b      	lsls	r3, r3, #1
 80098c6:	4619      	mov	r1, r3
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	440b      	add	r3, r1
 80098cc:	3230      	adds	r2, #48	; 0x30
 80098ce:	b2d2      	uxtb	r2, r2
 80098d0:	701a      	strb	r2, [r3, #0]
 80098d2:	e00a      	b.n	80098ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	0f1b      	lsrs	r3, r3, #28
 80098d8:	b2da      	uxtb	r2, r3
 80098da:	7dfb      	ldrb	r3, [r7, #23]
 80098dc:	005b      	lsls	r3, r3, #1
 80098de:	4619      	mov	r1, r3
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	440b      	add	r3, r1
 80098e4:	3237      	adds	r2, #55	; 0x37
 80098e6:	b2d2      	uxtb	r2, r2
 80098e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	011b      	lsls	r3, r3, #4
 80098ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80098f0:	7dfb      	ldrb	r3, [r7, #23]
 80098f2:	005b      	lsls	r3, r3, #1
 80098f4:	3301      	adds	r3, #1
 80098f6:	68ba      	ldr	r2, [r7, #8]
 80098f8:	4413      	add	r3, r2
 80098fa:	2200      	movs	r2, #0
 80098fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80098fe:	7dfb      	ldrb	r3, [r7, #23]
 8009900:	3301      	adds	r3, #1
 8009902:	75fb      	strb	r3, [r7, #23]
 8009904:	7dfa      	ldrb	r2, [r7, #23]
 8009906:	79fb      	ldrb	r3, [r7, #7]
 8009908:	429a      	cmp	r2, r3
 800990a:	d3d3      	bcc.n	80098b4 <IntToUnicode+0x18>
  }
}
 800990c:	bf00      	nop
 800990e:	371c      	adds	r7, #28
 8009910:	46bd      	mov	sp, r7
 8009912:	bc80      	pop	{r7}
 8009914:	4770      	bx	lr
	...

08009918 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a0d      	ldr	r2, [pc, #52]	; (800995c <HAL_PCD_MspInit+0x44>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d113      	bne.n	8009952 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800992a:	4b0d      	ldr	r3, [pc, #52]	; (8009960 <HAL_PCD_MspInit+0x48>)
 800992c:	69db      	ldr	r3, [r3, #28]
 800992e:	4a0c      	ldr	r2, [pc, #48]	; (8009960 <HAL_PCD_MspInit+0x48>)
 8009930:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009934:	61d3      	str	r3, [r2, #28]
 8009936:	4b0a      	ldr	r3, [pc, #40]	; (8009960 <HAL_PCD_MspInit+0x48>)
 8009938:	69db      	ldr	r3, [r3, #28]
 800993a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800993e:	60fb      	str	r3, [r7, #12]
 8009940:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009942:	2200      	movs	r2, #0
 8009944:	2100      	movs	r1, #0
 8009946:	2014      	movs	r0, #20
 8009948:	f7f9 fb0f 	bl	8002f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800994c:	2014      	movs	r0, #20
 800994e:	f7f9 fb28 	bl	8002fa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009952:	bf00      	nop
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	40005c00 	.word	0x40005c00
 8009960:	40021000 	.word	0x40021000

08009964 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8009978:	4619      	mov	r1, r3
 800997a:	4610      	mov	r0, r2
 800997c:	f7fe fdb7 	bl	80084ee <USBD_LL_SetupStage>
}
 8009980:	bf00      	nop
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	460b      	mov	r3, r1
 8009992:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800999a:	78fb      	ldrb	r3, [r7, #3]
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	015b      	lsls	r3, r3, #5
 80099a0:	4413      	add	r3, r2
 80099a2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	78fb      	ldrb	r3, [r7, #3]
 80099aa:	4619      	mov	r1, r3
 80099ac:	f7fe fdea 	bl	8008584 <USBD_LL_DataOutStage>
}
 80099b0:	bf00      	nop
 80099b2:	3708      	adds	r7, #8
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	460b      	mov	r3, r1
 80099c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80099ca:	78fb      	ldrb	r3, [r7, #3]
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	015b      	lsls	r3, r3, #5
 80099d0:	4413      	add	r3, r2
 80099d2:	333c      	adds	r3, #60	; 0x3c
 80099d4:	681a      	ldr	r2, [r3, #0]
 80099d6:	78fb      	ldrb	r3, [r7, #3]
 80099d8:	4619      	mov	r1, r3
 80099da:	f7fe fe44 	bl	8008666 <USBD_LL_DataInStage>
}
 80099de:	bf00      	nop
 80099e0:	3708      	adds	r7, #8
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b082      	sub	sp, #8
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7fe ff54 	bl	80088a2 <USBD_LL_SOF>
}
 80099fa:	bf00      	nop
 80099fc:	3708      	adds	r7, #8
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b084      	sub	sp, #16
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	689b      	ldr	r3, [r3, #8]
 8009a12:	2b02      	cmp	r3, #2
 8009a14:	d001      	beq.n	8009a1a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009a16:	f7f8 ff15 	bl	8002844 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8009a20:	7bfa      	ldrb	r2, [r7, #15]
 8009a22:	4611      	mov	r1, r2
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7fe ff04 	bl	8008832 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8009a30:	4618      	mov	r0, r3
 8009a32:	f7fe febd 	bl	80087b0 <USBD_LL_Reset>
}
 8009a36:	bf00      	nop
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
	...

08009a40 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7fe fefe 	bl	8008850 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	699b      	ldr	r3, [r3, #24]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d005      	beq.n	8009a68 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a5c:	4b04      	ldr	r3, [pc, #16]	; (8009a70 <HAL_PCD_SuspendCallback+0x30>)
 8009a5e:	691b      	ldr	r3, [r3, #16]
 8009a60:	4a03      	ldr	r2, [pc, #12]	; (8009a70 <HAL_PCD_SuspendCallback+0x30>)
 8009a62:	f043 0306 	orr.w	r3, r3, #6
 8009a66:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009a68:	bf00      	nop
 8009a6a:	3708      	adds	r7, #8
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}
 8009a70:	e000ed00 	.word	0xe000ed00

08009a74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8009a82:	4618      	mov	r0, r3
 8009a84:	f7fe fef8 	bl	8008878 <USBD_LL_Resume>
}
 8009a88:	bf00      	nop
 8009a8a:	3708      	adds	r7, #8
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009a98:	4a28      	ldr	r2, [pc, #160]	; (8009b3c <USBD_LL_Init+0xac>)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	4a26      	ldr	r2, [pc, #152]	; (8009b3c <USBD_LL_Init+0xac>)
 8009aa4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009aa8:	4b24      	ldr	r3, [pc, #144]	; (8009b3c <USBD_LL_Init+0xac>)
 8009aaa:	4a25      	ldr	r2, [pc, #148]	; (8009b40 <USBD_LL_Init+0xb0>)
 8009aac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009aae:	4b23      	ldr	r3, [pc, #140]	; (8009b3c <USBD_LL_Init+0xac>)
 8009ab0:	2208      	movs	r2, #8
 8009ab2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009ab4:	4b21      	ldr	r3, [pc, #132]	; (8009b3c <USBD_LL_Init+0xac>)
 8009ab6:	2202      	movs	r2, #2
 8009ab8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009aba:	4b20      	ldr	r3, [pc, #128]	; (8009b3c <USBD_LL_Init+0xac>)
 8009abc:	2200      	movs	r2, #0
 8009abe:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009ac0:	4b1e      	ldr	r3, [pc, #120]	; (8009b3c <USBD_LL_Init+0xac>)
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009ac6:	4b1d      	ldr	r3, [pc, #116]	; (8009b3c <USBD_LL_Init+0xac>)
 8009ac8:	2200      	movs	r2, #0
 8009aca:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009acc:	481b      	ldr	r0, [pc, #108]	; (8009b3c <USBD_LL_Init+0xac>)
 8009ace:	f7f9 ffaf 	bl	8003a30 <HAL_PCD_Init>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d001      	beq.n	8009adc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009ad8:	f7f8 feb4 	bl	8002844 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009ae2:	2318      	movs	r3, #24
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	2100      	movs	r1, #0
 8009ae8:	f7fa fe48 	bl	800477c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009af2:	2358      	movs	r3, #88	; 0x58
 8009af4:	2200      	movs	r2, #0
 8009af6:	2180      	movs	r1, #128	; 0x80
 8009af8:	f7fa fe40 	bl	800477c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b02:	23c0      	movs	r3, #192	; 0xc0
 8009b04:	2200      	movs	r2, #0
 8009b06:	2181      	movs	r1, #129	; 0x81
 8009b08:	f7fa fe38 	bl	800477c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b12:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009b16:	2200      	movs	r2, #0
 8009b18:	2101      	movs	r1, #1
 8009b1a:	f7fa fe2f 	bl	800477c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b28:	2200      	movs	r2, #0
 8009b2a:	2182      	movs	r1, #130	; 0x82
 8009b2c:	f7fa fe26 	bl	800477c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009b30:	2300      	movs	r3, #0
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3708      	adds	r7, #8
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
 8009b3a:	bf00      	nop
 8009b3c:	20001a1c 	.word	0x20001a1c
 8009b40:	40005c00 	.word	0x40005c00

08009b44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b50:	2300      	movs	r3, #0
 8009b52:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7fa f849 	bl	8003bf2 <HAL_PCD_Start>
 8009b60:	4603      	mov	r3, r0
 8009b62:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b64:	7bfb      	ldrb	r3, [r7, #15]
 8009b66:	4618      	mov	r0, r3
 8009b68:	f000 f948 	bl	8009dfc <USBD_Get_USB_Status>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009b70:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3710      	adds	r7, #16
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}

08009b7a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009b7a:	b580      	push	{r7, lr}
 8009b7c:	b084      	sub	sp, #16
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
 8009b82:	4608      	mov	r0, r1
 8009b84:	4611      	mov	r1, r2
 8009b86:	461a      	mov	r2, r3
 8009b88:	4603      	mov	r3, r0
 8009b8a:	70fb      	strb	r3, [r7, #3]
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	70bb      	strb	r3, [r7, #2]
 8009b90:	4613      	mov	r3, r2
 8009b92:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b94:	2300      	movs	r3, #0
 8009b96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009ba2:	78bb      	ldrb	r3, [r7, #2]
 8009ba4:	883a      	ldrh	r2, [r7, #0]
 8009ba6:	78f9      	ldrb	r1, [r7, #3]
 8009ba8:	f7fa f97c 	bl	8003ea4 <HAL_PCD_EP_Open>
 8009bac:	4603      	mov	r3, r0
 8009bae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bb0:	7bfb      	ldrb	r3, [r7, #15]
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f000 f922 	bl	8009dfc <USBD_Get_USB_Status>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8009bbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3710      	adds	r7, #16
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bc6:	b580      	push	{r7, lr}
 8009bc8:	b084      	sub	sp, #16
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
 8009bce:	460b      	mov	r3, r1
 8009bd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009be0:	78fa      	ldrb	r2, [r7, #3]
 8009be2:	4611      	mov	r1, r2
 8009be4:	4618      	mov	r0, r3
 8009be6:	f7fa f9bd 	bl	8003f64 <HAL_PCD_EP_Close>
 8009bea:	4603      	mov	r3, r0
 8009bec:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bee:	7bfb      	ldrb	r3, [r7, #15]
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f000 f903 	bl	8009dfc <USBD_Get_USB_Status>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8009bfa:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3710      	adds	r7, #16
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c10:	2300      	movs	r3, #0
 8009c12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c14:	2300      	movs	r3, #0
 8009c16:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c1e:	78fa      	ldrb	r2, [r7, #3]
 8009c20:	4611      	mov	r1, r2
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7fa fa67 	bl	80040f6 <HAL_PCD_EP_SetStall>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c2c:	7bfb      	ldrb	r3, [r7, #15]
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f000 f8e4 	bl	8009dfc <USBD_Get_USB_Status>
 8009c34:	4603      	mov	r3, r0
 8009c36:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8009c38:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3710      	adds	r7, #16
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b084      	sub	sp, #16
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c52:	2300      	movs	r3, #0
 8009c54:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c5c:	78fa      	ldrb	r2, [r7, #3]
 8009c5e:	4611      	mov	r1, r2
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7fa faa2 	bl	80041aa <HAL_PCD_EP_ClrStall>
 8009c66:	4603      	mov	r3, r0
 8009c68:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c6a:	7bfb      	ldrb	r3, [r7, #15]
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f000 f8c5 	bl	8009dfc <USBD_Get_USB_Status>
 8009c72:	4603      	mov	r3, r0
 8009c74:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8009c76:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3710      	adds	r7, #16
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b085      	sub	sp, #20
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	460b      	mov	r3, r1
 8009c8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c92:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8009c94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	da08      	bge.n	8009cae <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8009c9c:	78fb      	ldrb	r3, [r7, #3]
 8009c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ca2:	68fa      	ldr	r2, [r7, #12]
 8009ca4:	015b      	lsls	r3, r3, #5
 8009ca6:	4413      	add	r3, r2
 8009ca8:	332a      	adds	r3, #42	; 0x2a
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	e008      	b.n	8009cc0 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8009cae:	78fb      	ldrb	r3, [r7, #3]
 8009cb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cb4:	68fa      	ldr	r2, [r7, #12]
 8009cb6:	015b      	lsls	r3, r3, #5
 8009cb8:	4413      	add	r3, r2
 8009cba:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8009cbe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3714      	adds	r7, #20
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bc80      	pop	{r7}
 8009cc8:	4770      	bx	lr

08009cca <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009cca:	b580      	push	{r7, lr}
 8009ccc:	b084      	sub	sp, #16
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ce4:	78fa      	ldrb	r2, [r7, #3]
 8009ce6:	4611      	mov	r1, r2
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f7fa f8b6 	bl	8003e5a <HAL_PCD_SetAddress>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cf2:	7bfb      	ldrb	r3, [r7, #15]
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f000 f881 	bl	8009dfc <USBD_Get_USB_Status>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8009cfe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3710      	adds	r7, #16
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b086      	sub	sp, #24
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	607a      	str	r2, [r7, #4]
 8009d12:	461a      	mov	r2, r3
 8009d14:	460b      	mov	r3, r1
 8009d16:	72fb      	strb	r3, [r7, #11]
 8009d18:	4613      	mov	r3, r2
 8009d1a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d20:	2300      	movs	r3, #0
 8009d22:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009d2a:	893b      	ldrh	r3, [r7, #8]
 8009d2c:	7af9      	ldrb	r1, [r7, #11]
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	f7fa f9a8 	bl	8004084 <HAL_PCD_EP_Transmit>
 8009d34:	4603      	mov	r3, r0
 8009d36:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d38:	7dfb      	ldrb	r3, [r7, #23]
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f000 f85e 	bl	8009dfc <USBD_Get_USB_Status>
 8009d40:	4603      	mov	r3, r0
 8009d42:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8009d44:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3718      	adds	r7, #24
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b086      	sub	sp, #24
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	60f8      	str	r0, [r7, #12]
 8009d56:	607a      	str	r2, [r7, #4]
 8009d58:	461a      	mov	r2, r3
 8009d5a:	460b      	mov	r3, r1
 8009d5c:	72fb      	strb	r3, [r7, #11]
 8009d5e:	4613      	mov	r3, r2
 8009d60:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d62:	2300      	movs	r3, #0
 8009d64:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d66:	2300      	movs	r3, #0
 8009d68:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009d70:	893b      	ldrh	r3, [r7, #8]
 8009d72:	7af9      	ldrb	r1, [r7, #11]
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	f7fa f937 	bl	8003fe8 <HAL_PCD_EP_Receive>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d7e:	7dfb      	ldrb	r3, [r7, #23]
 8009d80:	4618      	mov	r0, r3
 8009d82:	f000 f83b 	bl	8009dfc <USBD_Get_USB_Status>
 8009d86:	4603      	mov	r3, r0
 8009d88:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8009d8a:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3718      	adds	r7, #24
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009da6:	78fa      	ldrb	r2, [r7, #3]
 8009da8:	4611      	mov	r1, r2
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7fa f956 	bl	800405c <HAL_PCD_EP_GetRxCount>
 8009db0:	4603      	mov	r3, r0
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3708      	adds	r7, #8
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
	...

08009dbc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b083      	sub	sp, #12
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009dc4:	4b02      	ldr	r3, [pc, #8]	; (8009dd0 <USBD_static_malloc+0x14>)
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	370c      	adds	r7, #12
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bc80      	pop	{r7}
 8009dce:	4770      	bx	lr
 8009dd0:	200005a0 	.word	0x200005a0

08009dd4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]

}
 8009ddc:	bf00      	nop
 8009dde:	370c      	adds	r7, #12
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bc80      	pop	{r7}
 8009de4:	4770      	bx	lr

08009de6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009de6:	b480      	push	{r7}
 8009de8:	b083      	sub	sp, #12
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
 8009dee:	460b      	mov	r3, r1
 8009df0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009df2:	bf00      	nop
 8009df4:	370c      	adds	r7, #12
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bc80      	pop	{r7}
 8009dfa:	4770      	bx	lr

08009dfc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b085      	sub	sp, #20
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	4603      	mov	r3, r0
 8009e04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e06:	2300      	movs	r3, #0
 8009e08:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e0a:	79fb      	ldrb	r3, [r7, #7]
 8009e0c:	2b03      	cmp	r3, #3
 8009e0e:	d817      	bhi.n	8009e40 <USBD_Get_USB_Status+0x44>
 8009e10:	a201      	add	r2, pc, #4	; (adr r2, 8009e18 <USBD_Get_USB_Status+0x1c>)
 8009e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e16:	bf00      	nop
 8009e18:	08009e29 	.word	0x08009e29
 8009e1c:	08009e2f 	.word	0x08009e2f
 8009e20:	08009e35 	.word	0x08009e35
 8009e24:	08009e3b 	.word	0x08009e3b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e2c:	e00b      	b.n	8009e46 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e2e:	2302      	movs	r3, #2
 8009e30:	73fb      	strb	r3, [r7, #15]
    break;
 8009e32:	e008      	b.n	8009e46 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e34:	2301      	movs	r3, #1
 8009e36:	73fb      	strb	r3, [r7, #15]
    break;
 8009e38:	e005      	b.n	8009e46 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e3a:	2302      	movs	r3, #2
 8009e3c:	73fb      	strb	r3, [r7, #15]
    break;
 8009e3e:	e002      	b.n	8009e46 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009e40:	2302      	movs	r3, #2
 8009e42:	73fb      	strb	r3, [r7, #15]
    break;
 8009e44:	bf00      	nop
  }
  return usb_status;
 8009e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3714      	adds	r7, #20
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bc80      	pop	{r7}
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop

08009e54 <__libc_init_array>:
 8009e54:	b570      	push	{r4, r5, r6, lr}
 8009e56:	2500      	movs	r5, #0
 8009e58:	4e0c      	ldr	r6, [pc, #48]	; (8009e8c <__libc_init_array+0x38>)
 8009e5a:	4c0d      	ldr	r4, [pc, #52]	; (8009e90 <__libc_init_array+0x3c>)
 8009e5c:	1ba4      	subs	r4, r4, r6
 8009e5e:	10a4      	asrs	r4, r4, #2
 8009e60:	42a5      	cmp	r5, r4
 8009e62:	d109      	bne.n	8009e78 <__libc_init_array+0x24>
 8009e64:	f000 f82e 	bl	8009ec4 <_init>
 8009e68:	2500      	movs	r5, #0
 8009e6a:	4e0a      	ldr	r6, [pc, #40]	; (8009e94 <__libc_init_array+0x40>)
 8009e6c:	4c0a      	ldr	r4, [pc, #40]	; (8009e98 <__libc_init_array+0x44>)
 8009e6e:	1ba4      	subs	r4, r4, r6
 8009e70:	10a4      	asrs	r4, r4, #2
 8009e72:	42a5      	cmp	r5, r4
 8009e74:	d105      	bne.n	8009e82 <__libc_init_array+0x2e>
 8009e76:	bd70      	pop	{r4, r5, r6, pc}
 8009e78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e7c:	4798      	blx	r3
 8009e7e:	3501      	adds	r5, #1
 8009e80:	e7ee      	b.n	8009e60 <__libc_init_array+0xc>
 8009e82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e86:	4798      	blx	r3
 8009e88:	3501      	adds	r5, #1
 8009e8a:	e7f2      	b.n	8009e72 <__libc_init_array+0x1e>
 8009e8c:	08009f28 	.word	0x08009f28
 8009e90:	08009f28 	.word	0x08009f28
 8009e94:	08009f28 	.word	0x08009f28
 8009e98:	08009f2c 	.word	0x08009f2c

08009e9c <memcpy>:
 8009e9c:	b510      	push	{r4, lr}
 8009e9e:	1e43      	subs	r3, r0, #1
 8009ea0:	440a      	add	r2, r1
 8009ea2:	4291      	cmp	r1, r2
 8009ea4:	d100      	bne.n	8009ea8 <memcpy+0xc>
 8009ea6:	bd10      	pop	{r4, pc}
 8009ea8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009eac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009eb0:	e7f7      	b.n	8009ea2 <memcpy+0x6>

08009eb2 <memset>:
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	4402      	add	r2, r0
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d100      	bne.n	8009ebc <memset+0xa>
 8009eba:	4770      	bx	lr
 8009ebc:	f803 1b01 	strb.w	r1, [r3], #1
 8009ec0:	e7f9      	b.n	8009eb6 <memset+0x4>
	...

08009ec4 <_init>:
 8009ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ec6:	bf00      	nop
 8009ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eca:	bc08      	pop	{r3}
 8009ecc:	469e      	mov	lr, r3
 8009ece:	4770      	bx	lr

08009ed0 <_fini>:
 8009ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ed2:	bf00      	nop
 8009ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ed6:	bc08      	pop	{r3}
 8009ed8:	469e      	mov	lr, r3
 8009eda:	4770      	bx	lr
