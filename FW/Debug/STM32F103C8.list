
STM32F103C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007650  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800775c  0800775c  0001775c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077a8  080077a8  00020188  2**0
                  CONTENTS
  4 .ARM          00000000  080077a8  080077a8  00020188  2**0
                  CONTENTS
  5 .preinit_array 00000000  080077a8  080077a8  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077a8  080077a8  000177a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077ac  080077ac  000177ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  080077b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016a0  20000188  08007938  00020188  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001828  08007938  00021828  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001abd8  00000000  00000000  000201b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003749  00000000  00000000  0003ad89  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011f0  00000000  00000000  0003e4d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001068  00000000  00000000  0003f6c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017b89  00000000  00000000  00040730  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000113b7  00000000  00000000  000582b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007382e  00000000  00000000  00069670  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dce9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a74  00000000  00000000  000dcf1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000188 	.word	0x20000188
 8000128:	00000000 	.word	0x00000000
 800012c:	08007744 	.word	0x08007744

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000018c 	.word	0x2000018c
 8000148:	08007744 	.word	0x08007744

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2uiz>:
 80008e8:	004a      	lsls	r2, r1, #1
 80008ea:	d211      	bcs.n	8000910 <__aeabi_d2uiz+0x28>
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d211      	bcs.n	8000916 <__aeabi_d2uiz+0x2e>
 80008f2:	d50d      	bpl.n	8000910 <__aeabi_d2uiz+0x28>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d40e      	bmi.n	800091c <__aeabi_d2uiz+0x34>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	fa23 f002 	lsr.w	r0, r3, r2
 800090e:	4770      	bx	lr
 8000910:	f04f 0000 	mov.w	r0, #0
 8000914:	4770      	bx	lr
 8000916:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091a:	d102      	bne.n	8000922 <__aeabi_d2uiz+0x3a>
 800091c:	f04f 30ff 	mov.w	r0, #4294967295
 8000920:	4770      	bx	lr
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	4770      	bx	lr

08000928 <init_user_call>:
};

WorkMode_t WorkMode=Mode_UART;

void init_user_call()//在硬件初始化完成后调用
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart2,UART_IT_IDLE);//打开总线空闲中断
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <init_user_call+0x1c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	68da      	ldr	r2, [r3, #12]
 8000932:	4b04      	ldr	r3, [pc, #16]	; (8000944 <init_user_call+0x1c>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f042 0210 	orr.w	r2, r2, #16
 800093a:	60da      	str	r2, [r3, #12]
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr
 8000944:	200008e4 	.word	0x200008e4

08000948 <loop_user_call>:

void loop_user_call()//在Main函数里循环调用此函数
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	if(linecode.IsUpdate)
 800094c:	4b40      	ldr	r3, [pc, #256]	; (8000a50 <loop_user_call+0x108>)
 800094e:	7a1b      	ldrb	r3, [r3, #8]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d07b      	beq.n	8000a4c <loop_user_call+0x104>
	{
		HAL_Delay(20);//延时20ms设置通信参数
 8000954:	2014      	movs	r0, #20
 8000956:	f000 fd3b 	bl	80013d0 <HAL_Delay>
		if(linecode.Rate<1500000)//速率小于1.5Mbps，为串口模式(极其有限的串口支持)
 800095a:	4b3d      	ldr	r3, [pc, #244]	; (8000a50 <loop_user_call+0x108>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a3d      	ldr	r2, [pc, #244]	; (8000a54 <loop_user_call+0x10c>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d870      	bhi.n	8000a46 <loop_user_call+0xfe>
		{//重新初始化串口
			WorkMode=Mode_UART;
 8000964:	4b3c      	ldr	r3, [pc, #240]	; (8000a58 <loop_user_call+0x110>)
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]
			huart2.Instance = USART2;
 800096a:	4b3c      	ldr	r3, [pc, #240]	; (8000a5c <loop_user_call+0x114>)
 800096c:	4a3c      	ldr	r2, [pc, #240]	; (8000a60 <loop_user_call+0x118>)
 800096e:	601a      	str	r2, [r3, #0]

			huart2.Init.BaudRate = linecode.Rate;//linecode的速率
 8000970:	4b37      	ldr	r3, [pc, #220]	; (8000a50 <loop_user_call+0x108>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a39      	ldr	r2, [pc, #228]	; (8000a5c <loop_user_call+0x114>)
 8000976:	6053      	str	r3, [r2, #4]

			huart2.Init.WordLength = UART_WORDLENGTH_8B;//只支持8/9数据位（包括校验位）
 8000978:	4b38      	ldr	r3, [pc, #224]	; (8000a5c <loop_user_call+0x114>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
			if(linecode.DataBits==8 && linecode.Parity!=0)
 800097e:	4b34      	ldr	r3, [pc, #208]	; (8000a50 <loop_user_call+0x108>)
 8000980:	88db      	ldrh	r3, [r3, #6]
 8000982:	2b08      	cmp	r3, #8
 8000984:	d107      	bne.n	8000996 <loop_user_call+0x4e>
 8000986:	4b32      	ldr	r3, [pc, #200]	; (8000a50 <loop_user_call+0x108>)
 8000988:	795b      	ldrb	r3, [r3, #5]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d003      	beq.n	8000996 <loop_user_call+0x4e>
			{
				huart2.Init.WordLength=UART_WORDLENGTH_9B;
 800098e:	4b33      	ldr	r3, [pc, #204]	; (8000a5c <loop_user_call+0x114>)
 8000990:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000994:	609a      	str	r2, [r3, #8]
			}

			huart2.Init.StopBits = UART_STOPBITS_1;
 8000996:	4b31      	ldr	r3, [pc, #196]	; (8000a5c <loop_user_call+0x114>)
 8000998:	2200      	movs	r2, #0
 800099a:	60da      	str	r2, [r3, #12]
			if(linecode.StopBits==2)
 800099c:	4b2c      	ldr	r3, [pc, #176]	; (8000a50 <loop_user_call+0x108>)
 800099e:	791b      	ldrb	r3, [r3, #4]
 80009a0:	2b02      	cmp	r3, #2
 80009a2:	d103      	bne.n	80009ac <loop_user_call+0x64>
			{
				huart2.Init.StopBits=UART_STOPBITS_2;
 80009a4:	4b2d      	ldr	r3, [pc, #180]	; (8000a5c <loop_user_call+0x114>)
 80009a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009aa:	60da      	str	r2, [r3, #12]
			}


			huart2.Init.Parity = UART_PARITY_NONE;
 80009ac:	4b2b      	ldr	r3, [pc, #172]	; (8000a5c <loop_user_call+0x114>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
			if(linecode.Parity==1)
 80009b2:	4b27      	ldr	r3, [pc, #156]	; (8000a50 <loop_user_call+0x108>)
 80009b4:	795b      	ldrb	r3, [r3, #5]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d103      	bne.n	80009c2 <loop_user_call+0x7a>
				huart2.Init.Parity = UART_PARITY_ODD;
 80009ba:	4b28      	ldr	r3, [pc, #160]	; (8000a5c <loop_user_call+0x114>)
 80009bc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80009c0:	611a      	str	r2, [r3, #16]
			if(linecode.Parity==2)
 80009c2:	4b23      	ldr	r3, [pc, #140]	; (8000a50 <loop_user_call+0x108>)
 80009c4:	795b      	ldrb	r3, [r3, #5]
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d103      	bne.n	80009d2 <loop_user_call+0x8a>
				huart2.Init.Parity = UART_PARITY_EVEN;
 80009ca:	4b24      	ldr	r3, [pc, #144]	; (8000a5c <loop_user_call+0x114>)
 80009cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009d0:	611a      	str	r2, [r3, #16]



			huart2.Init.Mode = UART_MODE_TX_RX;
 80009d2:	4b22      	ldr	r3, [pc, #136]	; (8000a5c <loop_user_call+0x114>)
 80009d4:	220c      	movs	r2, #12
 80009d6:	615a      	str	r2, [r3, #20]

			huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;//不支持流控
 80009d8:	4b20      	ldr	r3, [pc, #128]	; (8000a5c <loop_user_call+0x114>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]

			huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009de:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <loop_user_call+0x114>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	61da      	str	r2, [r3, #28]

			 if (HAL_UART_Init(&huart2) != HAL_OK)
 80009e4:	481d      	ldr	r0, [pc, #116]	; (8000a5c <loop_user_call+0x114>)
 80009e6:	f002 ff58 	bl	800389a <HAL_UART_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d028      	beq.n	8000a42 <loop_user_call+0xfa>
			  {//打开失败则使用默认设置
				  huart2.Instance = USART2;
 80009f0:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <loop_user_call+0x114>)
 80009f2:	4a1b      	ldr	r2, [pc, #108]	; (8000a60 <loop_user_call+0x118>)
 80009f4:	601a      	str	r2, [r3, #0]
				  huart2.Init.BaudRate = 115200;
 80009f6:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <loop_user_call+0x114>)
 80009f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009fc:	605a      	str	r2, [r3, #4]
				  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <loop_user_call+0x114>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
				  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <loop_user_call+0x114>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
				  huart2.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <loop_user_call+0x114>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
				  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <loop_user_call+0x114>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
				  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <loop_user_call+0x114>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
				  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <loop_user_call+0x114>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
				  HAL_UART_Init(&huart2);
 8000a22:	480e      	ldr	r0, [pc, #56]	; (8000a5c <loop_user_call+0x114>)
 8000a24:	f002 ff39 	bl	800389a <HAL_UART_Init>
				  linecode.DataBits=8;
 8000a28:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <loop_user_call+0x108>)
 8000a2a:	2208      	movs	r2, #8
 8000a2c:	80da      	strh	r2, [r3, #6]
				  linecode.Parity=0;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <loop_user_call+0x108>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	715a      	strb	r2, [r3, #5]
				  linecode.Rate=115200;
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <loop_user_call+0x108>)
 8000a36:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a3a:	601a      	str	r2, [r3, #0]
				  linecode.StopBits=0;
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <loop_user_call+0x108>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	711a      	strb	r2, [r3, #4]
			  }
			 uart_start_receive();
 8000a42:	f000 f86b 	bl	8000b1c <uart_start_receive>
		}
		linecode.IsUpdate=0;
 8000a46:	4b02      	ldr	r3, [pc, #8]	; (8000a50 <loop_user_call+0x108>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	721a      	strb	r2, [r3, #8]
	}
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000000 	.word	0x20000000
 8000a54:	0016e35f 	.word	0x0016e35f
 8000a58:	200001a4 	.word	0x200001a4
 8000a5c:	200008e4 	.word	0x200008e4
 8000a60:	40004400 	.word	0x40004400

08000a64 <cdc_receive_call>:

void cdc_receive_call(uint8_t* Buf, uint32_t Len)//由USB CDC/ACM接收数据时调用
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
	switch(WorkMode)
	{
	default:
		uart_transmit(Buf,Len);
 8000a6e:	6839      	ldr	r1, [r7, #0]
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f000 f81b 	bl	8000aac <uart_transmit>
		break;
 8000a76:	bf00      	nop

	}
}
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <uart_receive_call>:

void uart_receive_call(void * buf,size_t len)//接收数据完成后调用此函数
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
	if(WorkMode!=Mode_UART)
 8000a8a:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <uart_receive_call+0x28>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d106      	bne.n	8000aa0 <uart_receive_call+0x20>
		return;//检查模式
	CDC_Transmit_FS(buf,len);//发送给上位机
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	4619      	mov	r1, r3
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f006 fa49 	bl	8006f30 <CDC_Transmit_FS>
 8000a9e:	e000      	b.n	8000aa2 <uart_receive_call+0x22>
		return;//检查模式
 8000aa0:	bf00      	nop
}
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	200001a4 	.word	0x200001a4

08000aac <uart_transmit>:

#include "userapp.h"
uint8_t uart_rx_buff[1000];//接收缓冲
//uint8_t uart_tx_buff[1000];//发送缓冲
uint8_t uart_transmit(void * buf,size_t len)//发送数据到串口
{
 8000aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2,buf,len,(uint32_t)(len*(1000.0/linecode.Rate))+1000);
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	b29c      	uxth	r4, r3
 8000aba:	6838      	ldr	r0, [r7, #0]
 8000abc:	f7ff fc88 	bl	80003d0 <__aeabi_ui2d>
 8000ac0:	4605      	mov	r5, r0
 8000ac2:	460e      	mov	r6, r1
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <uart_transmit+0x64>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fc81 	bl	80003d0 <__aeabi_ui2d>
 8000ace:	4602      	mov	r2, r0
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	f04f 0000 	mov.w	r0, #0
 8000ad6:	490f      	ldr	r1, [pc, #60]	; (8000b14 <uart_transmit+0x68>)
 8000ad8:	f7ff fe1e 	bl	8000718 <__aeabi_ddiv>
 8000adc:	4602      	mov	r2, r0
 8000ade:	460b      	mov	r3, r1
 8000ae0:	4628      	mov	r0, r5
 8000ae2:	4631      	mov	r1, r6
 8000ae4:	f7ff fcee 	bl	80004c4 <__aeabi_dmul>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	460b      	mov	r3, r1
 8000aec:	4610      	mov	r0, r2
 8000aee:	4619      	mov	r1, r3
 8000af0:	f7ff fefa 	bl	80008e8 <__aeabi_d2uiz>
 8000af4:	4603      	mov	r3, r0
 8000af6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000afa:	4622      	mov	r2, r4
 8000afc:	6879      	ldr	r1, [r7, #4]
 8000afe:	4806      	ldr	r0, [pc, #24]	; (8000b18 <uart_transmit+0x6c>)
 8000b00:	f002 ff18 	bl	8003934 <HAL_UART_Transmit>
	return HAL_OK;
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000000 	.word	0x20000000
 8000b14:	408f4000 	.word	0x408f4000
 8000b18:	200008e4 	.word	0x200008e4

08000b1c <uart_start_receive>:

void uart_start_receive()
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	if(huart2.gState !=HAL_UART_STATE_READY && huart2.gState != HAL_UART_STATE_BUSY_TX)
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <uart_start_receive+0x4c>)
 8000b22:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	2b20      	cmp	r3, #32
 8000b2a:	d008      	beq.n	8000b3e <uart_start_receive+0x22>
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <uart_start_receive+0x4c>)
 8000b2e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	2b21      	cmp	r3, #33	; 0x21
 8000b36:	d002      	beq.n	8000b3e <uart_start_receive+0x22>
			HAL_UART_DMAStop(&huart2);
 8000b38:	480b      	ldr	r0, [pc, #44]	; (8000b68 <uart_start_receive+0x4c>)
 8000b3a:	f003 f815 	bl	8003b68 <HAL_UART_DMAStop>
	if(huart2.gState == HAL_UART_STATE_BUSY_TX)
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <uart_start_receive+0x4c>)
 8000b40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	2b21      	cmp	r3, #33	; 0x21
 8000b48:	d106      	bne.n	8000b58 <uart_start_receive+0x3c>
			while(huart2.gState!=HAL_UART_STATE_READY);//等待发送完成
 8000b4a:	bf00      	nop
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <uart_start_receive+0x4c>)
 8000b4e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	2b20      	cmp	r3, #32
 8000b56:	d1f9      	bne.n	8000b4c <uart_start_receive+0x30>
	HAL_UART_Receive_DMA(&huart2,uart_rx_buff,sizeof(uart_rx_buff));
 8000b58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b5c:	4903      	ldr	r1, [pc, #12]	; (8000b6c <uart_start_receive+0x50>)
 8000b5e:	4802      	ldr	r0, [pc, #8]	; (8000b68 <uart_start_receive+0x4c>)
 8000b60:	f002 ff82 	bl	8003a68 <HAL_UART_Receive_DMA>
}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	200008e4 	.word	0x200008e4
 8000b6c:	200003c8 	.word	0x200003c8

08000b70 <uart_finish_receive>:

void uart_finish_receive()
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
	if(huart2.gState !=HAL_UART_STATE_READY && huart2.gState != HAL_UART_STATE_BUSY_TX)
 8000b76:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <uart_finish_receive+0x70>)
 8000b78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b20      	cmp	r3, #32
 8000b80:	d008      	beq.n	8000b94 <uart_finish_receive+0x24>
 8000b82:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <uart_finish_receive+0x70>)
 8000b84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	2b21      	cmp	r3, #33	; 0x21
 8000b8c:	d002      	beq.n	8000b94 <uart_finish_receive+0x24>
		HAL_UART_DMAStop(&huart2);
 8000b8e:	4814      	ldr	r0, [pc, #80]	; (8000be0 <uart_finish_receive+0x70>)
 8000b90:	f002 ffea 	bl	8003b68 <HAL_UART_DMAStop>
	if(huart2.gState == HAL_UART_STATE_BUSY_TX)
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <uart_finish_receive+0x70>)
 8000b96:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	2b21      	cmp	r3, #33	; 0x21
 8000b9e:	d106      	bne.n	8000bae <uart_finish_receive+0x3e>
		while(huart2.gState!=HAL_UART_STATE_READY);//等待发送完成
 8000ba0:	bf00      	nop
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <uart_finish_receive+0x70>)
 8000ba4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	2b20      	cmp	r3, #32
 8000bac:	d1f9      	bne.n	8000ba2 <uart_finish_receive+0x32>
	size_t count=sizeof(uart_rx_buff)-huart2.hdmarx->Instance->CNDTR;
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <uart_finish_receive+0x70>)
 8000bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8000bba:	607b      	str	r3, [r7, #4]
	 uart_receive_call(uart_rx_buff,count);
 8000bbc:	6879      	ldr	r1, [r7, #4]
 8000bbe:	4809      	ldr	r0, [pc, #36]	; (8000be4 <uart_finish_receive+0x74>)
 8000bc0:	f7ff ff5e 	bl	8000a80 <uart_receive_call>
	HAL_UART_DMAStop(&huart2);
 8000bc4:	4806      	ldr	r0, [pc, #24]	; (8000be0 <uart_finish_receive+0x70>)
 8000bc6:	f002 ffcf 	bl	8003b68 <HAL_UART_DMAStop>
	HAL_UART_Receive_DMA(&huart2,uart_rx_buff,sizeof(uart_rx_buff));
 8000bca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bce:	4905      	ldr	r1, [pc, #20]	; (8000be4 <uart_finish_receive+0x74>)
 8000bd0:	4803      	ldr	r0, [pc, #12]	; (8000be0 <uart_finish_receive+0x70>)
 8000bd2:	f002 ff49 	bl	8003a68 <HAL_UART_Receive_DMA>
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200008e4 	.word	0x200008e4
 8000be4:	200003c8 	.word	0x200003c8

08000be8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//DMA接收全满
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	 UNUSED(huart);
	 uart_finish_receive();
 8000bf0:	f7ff ffbe 	bl	8000b70 <uart_finish_receive>
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <HAL_UART_RxHalfCpltCallback>:
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)//DMA接收半满
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	 UNUSED(huart);
	 uart_finish_receive();
 8000c04:	f7ff ffb4 	bl	8000b70 <uart_finish_receive>
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c14:	f000 fb7a 	bl	800130c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c18:	f000 f811 	bl	8000c3e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c1c:	f000 f92c 	bl	8000e78 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c20:	f000 f904 	bl	8000e2c <MX_DMA_Init>
  MX_I2C1_Init();
 8000c24:	f000 f862 	bl	8000cec <MX_I2C1_Init>
  MX_SPI1_Init();
 8000c28:	f000 f8a0 	bl	8000d6c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000c2c:	f000 f8d4 	bl	8000dd8 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000c30:	f006 f89e 	bl	8006d70 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  init_user_call();
 8000c34:	f7ff fe78 	bl	8000928 <init_user_call>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_user_call();
 8000c38:	f7ff fe86 	bl	8000948 <loop_user_call>
 8000c3c:	e7fc      	b.n	8000c38 <main+0x28>

08000c3e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b094      	sub	sp, #80	; 0x50
 8000c42:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c48:	2228      	movs	r2, #40	; 0x28
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f006 fd70 	bl	8007732 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c72:	2301      	movs	r3, #1
 8000c74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c76:	2310      	movs	r3, #16
 8000c78:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000c82:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000c86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f002 f8d1 	bl	8002e34 <HAL_RCC_OscConfig>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000c98:	f000 f910 	bl	8000ebc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c9c:	230f      	movs	r3, #15
 8000c9e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cac:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f002 fb3b 	bl	8003334 <HAL_RCC_ClockConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000cc4:	f000 f8fa 	bl	8000ebc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000cc8:	2310      	movs	r3, #16
 8000cca:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000ccc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cd0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f002 fcc9 	bl	800366c <HAL_RCCEx_PeriphCLKConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ce0:	f000 f8ec 	bl	8000ebc <Error_Handler>
  }
}
 8000ce4:	bf00      	nop
 8000ce6:	3750      	adds	r7, #80	; 0x50
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  __HAL_RCC_I2C1_CLK_ENABLE();
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <MX_I2C1_Init+0x70>)
 8000cf4:	69db      	ldr	r3, [r3, #28]
 8000cf6:	4a19      	ldr	r2, [pc, #100]	; (8000d5c <MX_I2C1_Init+0x70>)
 8000cf8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cfc:	61d3      	str	r3, [r2, #28]
 8000cfe:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <MX_I2C1_Init+0x70>)
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d0c:	4a15      	ldr	r2, [pc, #84]	; (8000d64 <MX_I2C1_Init+0x78>)
 8000d0e:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d10:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d12:	4a15      	ldr	r2, [pc, #84]	; (8000d68 <MX_I2C1_Init+0x7c>)
 8000d14:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d16:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d1c:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d28:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d2a:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d30:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d42:	4807      	ldr	r0, [pc, #28]	; (8000d60 <MX_I2C1_Init+0x74>)
 8000d44:	f001 f86c 	bl	8001e20 <HAL_I2C_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_I2C1_Init+0x66>
  {
    Error_Handler();
 8000d4e:	f000 f8b5 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	200007f4 	.word	0x200007f4
 8000d64:	40005400 	.word	0x40005400
 8000d68:	000186a0 	.word	0x000186a0

08000d6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d70:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000d72:	4a18      	ldr	r2, [pc, #96]	; (8000dd4 <MX_SPI1_Init+0x68>)
 8000d74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d76:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000d78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d7e:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d8a:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000d98:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d9c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000da0:	2220      	movs	r2, #32
 8000da2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000da4:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000db8:	220a      	movs	r2, #10
 8000dba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dbc:	4804      	ldr	r0, [pc, #16]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000dbe:	f002 fd0b 	bl	80037d8 <HAL_SPI_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000dc8:	f000 f878 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	2000088c 	.word	0x2000088c
 8000dd4:	40013000 	.word	0x40013000

08000dd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <MX_USART2_UART_Init+0x4c>)
 8000dde:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <MX_USART2_UART_Init+0x50>)
 8000de0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <MX_USART2_UART_Init+0x4c>)
 8000de4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000de8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <MX_USART2_UART_Init+0x4c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <MX_USART2_UART_Init+0x4c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <MX_USART2_UART_Init+0x4c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dfc:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <MX_USART2_UART_Init+0x4c>)
 8000dfe:	220c      	movs	r2, #12
 8000e00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000e02:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <MX_USART2_UART_Init+0x4c>)
 8000e04:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e08:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <MX_USART2_UART_Init+0x4c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e10:	4804      	ldr	r0, [pc, #16]	; (8000e24 <MX_USART2_UART_Init+0x4c>)
 8000e12:	f002 fd42 	bl	800389a <HAL_UART_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8000e1c:	f000 f84e 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	200008e4 	.word	0x200008e4
 8000e28:	40004400 	.word	0x40004400

08000e2c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <MX_DMA_Init+0x48>)
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	4a0f      	ldr	r2, [pc, #60]	; (8000e74 <MX_DMA_Init+0x48>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6153      	str	r3, [r2, #20]
 8000e3e:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <MX_DMA_Init+0x48>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2010      	movs	r0, #16
 8000e50:	f000 fbb7 	bl	80015c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000e54:	2010      	movs	r0, #16
 8000e56:	f000 fbd0 	bl	80015fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	2011      	movs	r0, #17
 8000e60:	f000 fbaf 	bl	80015c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000e64:	2011      	movs	r0, #17
 8000e66:	f000 fbc8 	bl	80015fa <HAL_NVIC_EnableIRQ>

}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40021000 	.word	0x40021000

08000e78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <MX_GPIO_Init+0x40>)
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	4a0d      	ldr	r2, [pc, #52]	; (8000eb8 <MX_GPIO_Init+0x40>)
 8000e84:	f043 0304 	orr.w	r3, r3, #4
 8000e88:	6193      	str	r3, [r2, #24]
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <MX_GPIO_Init+0x40>)
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	f003 0304 	and.w	r3, r3, #4
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <MX_GPIO_Init+0x40>)
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	4a07      	ldr	r2, [pc, #28]	; (8000eb8 <MX_GPIO_Init+0x40>)
 8000e9c:	f043 0308 	orr.w	r3, r3, #8
 8000ea0:	6193      	str	r3, [r2, #24]
 8000ea2:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <MX_GPIO_Init+0x40>)
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	f003 0308 	and.w	r3, r3, #8
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]

}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	40021000 	.word	0x40021000

08000ebc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <HAL_MspInit+0x5c>)
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	4a14      	ldr	r2, [pc, #80]	; (8000f24 <HAL_MspInit+0x5c>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6193      	str	r3, [r2, #24]
 8000eda:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_MspInit+0x5c>)
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <HAL_MspInit+0x5c>)
 8000ee8:	69db      	ldr	r3, [r3, #28]
 8000eea:	4a0e      	ldr	r2, [pc, #56]	; (8000f24 <HAL_MspInit+0x5c>)
 8000eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	61d3      	str	r3, [r2, #28]
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <HAL_MspInit+0x5c>)
 8000ef4:	69db      	ldr	r3, [r3, #28]
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000efe:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_MspInit+0x60>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <HAL_MspInit+0x60>)
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr
 8000f24:	40021000 	.word	0x40021000
 8000f28:	40010000 	.word	0x40010000

08000f2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b088      	sub	sp, #32
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 0310 	add.w	r3, r7, #16
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a15      	ldr	r2, [pc, #84]	; (8000f9c <HAL_I2C_MspInit+0x70>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d123      	bne.n	8000f94 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4c:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <HAL_I2C_MspInit+0x74>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	4a13      	ldr	r2, [pc, #76]	; (8000fa0 <HAL_I2C_MspInit+0x74>)
 8000f52:	f043 0308 	orr.w	r3, r3, #8
 8000f56:	6193      	str	r3, [r2, #24]
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <HAL_I2C_MspInit+0x74>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	f003 0308 	and.w	r3, r3, #8
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f64:	23c0      	movs	r3, #192	; 0xc0
 8000f66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f68:	2312      	movs	r3, #18
 8000f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f70:	f107 0310 	add.w	r3, r7, #16
 8000f74:	4619      	mov	r1, r3
 8000f76:	480b      	ldr	r0, [pc, #44]	; (8000fa4 <HAL_I2C_MspInit+0x78>)
 8000f78:	f000 fdf8 	bl	8001b6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <HAL_I2C_MspInit+0x74>)
 8000f7e:	69db      	ldr	r3, [r3, #28]
 8000f80:	4a07      	ldr	r2, [pc, #28]	; (8000fa0 <HAL_I2C_MspInit+0x74>)
 8000f82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f86:	61d3      	str	r3, [r2, #28]
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <HAL_I2C_MspInit+0x74>)
 8000f8a:	69db      	ldr	r3, [r3, #28]
 8000f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f94:	bf00      	nop
 8000f96:	3720      	adds	r7, #32
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40005400 	.word	0x40005400
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	40010c00 	.word	0x40010c00

08000fa8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0310 	add.w	r3, r7, #16
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a1b      	ldr	r2, [pc, #108]	; (8001030 <HAL_SPI_MspInit+0x88>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d12f      	bne.n	8001028 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <HAL_SPI_MspInit+0x8c>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	4a19      	ldr	r2, [pc, #100]	; (8001034 <HAL_SPI_MspInit+0x8c>)
 8000fce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fd2:	6193      	str	r3, [r2, #24]
 8000fd4:	4b17      	ldr	r3, [pc, #92]	; (8001034 <HAL_SPI_MspInit+0x8c>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe0:	4b14      	ldr	r3, [pc, #80]	; (8001034 <HAL_SPI_MspInit+0x8c>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	4a13      	ldr	r2, [pc, #76]	; (8001034 <HAL_SPI_MspInit+0x8c>)
 8000fe6:	f043 0304 	orr.w	r3, r3, #4
 8000fea:	6193      	str	r3, [r2, #24]
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <HAL_SPI_MspInit+0x8c>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	f003 0304 	and.w	r3, r3, #4
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000ff8:	23b0      	movs	r3, #176	; 0xb0
 8000ffa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001000:	2303      	movs	r3, #3
 8001002:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001004:	f107 0310 	add.w	r3, r7, #16
 8001008:	4619      	mov	r1, r3
 800100a:	480b      	ldr	r0, [pc, #44]	; (8001038 <HAL_SPI_MspInit+0x90>)
 800100c:	f000 fdae 	bl	8001b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001010:	2340      	movs	r3, #64	; 0x40
 8001012:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	4619      	mov	r1, r3
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <HAL_SPI_MspInit+0x90>)
 8001024:	f000 fda2 	bl	8001b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001028:	bf00      	nop
 800102a:	3720      	adds	r7, #32
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40013000 	.word	0x40013000
 8001034:	40021000 	.word	0x40021000
 8001038:	40010800 	.word	0x40010800

0800103c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a4c      	ldr	r2, [pc, #304]	; (8001188 <HAL_UART_MspInit+0x14c>)
 8001058:	4293      	cmp	r3, r2
 800105a:	f040 8091 	bne.w	8001180 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800105e:	4b4b      	ldr	r3, [pc, #300]	; (800118c <HAL_UART_MspInit+0x150>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	4a4a      	ldr	r2, [pc, #296]	; (800118c <HAL_UART_MspInit+0x150>)
 8001064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001068:	61d3      	str	r3, [r2, #28]
 800106a:	4b48      	ldr	r3, [pc, #288]	; (800118c <HAL_UART_MspInit+0x150>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	4b45      	ldr	r3, [pc, #276]	; (800118c <HAL_UART_MspInit+0x150>)
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	4a44      	ldr	r2, [pc, #272]	; (800118c <HAL_UART_MspInit+0x150>)
 800107c:	f043 0304 	orr.w	r3, r3, #4
 8001080:	6193      	str	r3, [r2, #24]
 8001082:	4b42      	ldr	r3, [pc, #264]	; (800118c <HAL_UART_MspInit+0x150>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> USART2_CTS
    PA1     ------> USART2_RTS
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800108e:	2301      	movs	r3, #1
 8001090:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	f107 0310 	add.w	r3, r7, #16
 800109e:	4619      	mov	r1, r3
 80010a0:	483b      	ldr	r0, [pc, #236]	; (8001190 <HAL_UART_MspInit+0x154>)
 80010a2:	f000 fd63 	bl	8001b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80010a6:	2306      	movs	r3, #6
 80010a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ae:	2303      	movs	r3, #3
 80010b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b2:	f107 0310 	add.w	r3, r7, #16
 80010b6:	4619      	mov	r1, r3
 80010b8:	4835      	ldr	r0, [pc, #212]	; (8001190 <HAL_UART_MspInit+0x154>)
 80010ba:	f000 fd57 	bl	8001b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010be:	2308      	movs	r3, #8
 80010c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c6:	2301      	movs	r3, #1
 80010c8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ca:	f107 0310 	add.w	r3, r7, #16
 80010ce:	4619      	mov	r1, r3
 80010d0:	482f      	ldr	r0, [pc, #188]	; (8001190 <HAL_UART_MspInit+0x154>)
 80010d2:	f000 fd4b 	bl	8001b6c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80010d6:	4b2f      	ldr	r3, [pc, #188]	; (8001194 <HAL_UART_MspInit+0x158>)
 80010d8:	4a2f      	ldr	r2, [pc, #188]	; (8001198 <HAL_UART_MspInit+0x15c>)
 80010da:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010dc:	4b2d      	ldr	r3, [pc, #180]	; (8001194 <HAL_UART_MspInit+0x158>)
 80010de:	2200      	movs	r2, #0
 80010e0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010e2:	4b2c      	ldr	r3, [pc, #176]	; (8001194 <HAL_UART_MspInit+0x158>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010e8:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <HAL_UART_MspInit+0x158>)
 80010ea:	2280      	movs	r2, #128	; 0x80
 80010ec:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010ee:	4b29      	ldr	r3, [pc, #164]	; (8001194 <HAL_UART_MspInit+0x158>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010f4:	4b27      	ldr	r3, [pc, #156]	; (8001194 <HAL_UART_MspInit+0x158>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80010fa:	4b26      	ldr	r3, [pc, #152]	; (8001194 <HAL_UART_MspInit+0x158>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001100:	4b24      	ldr	r3, [pc, #144]	; (8001194 <HAL_UART_MspInit+0x158>)
 8001102:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001106:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001108:	4822      	ldr	r0, [pc, #136]	; (8001194 <HAL_UART_MspInit+0x158>)
 800110a:	f000 fa91 	bl	8001630 <HAL_DMA_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <HAL_UART_MspInit+0xdc>
    {
      Error_Handler();
 8001114:	f7ff fed2 	bl	8000ebc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a1e      	ldr	r2, [pc, #120]	; (8001194 <HAL_UART_MspInit+0x158>)
 800111c:	635a      	str	r2, [r3, #52]	; 0x34
 800111e:	4a1d      	ldr	r2, [pc, #116]	; (8001194 <HAL_UART_MspInit+0x158>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001124:	4b1d      	ldr	r3, [pc, #116]	; (800119c <HAL_UART_MspInit+0x160>)
 8001126:	4a1e      	ldr	r2, [pc, #120]	; (80011a0 <HAL_UART_MspInit+0x164>)
 8001128:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800112a:	4b1c      	ldr	r3, [pc, #112]	; (800119c <HAL_UART_MspInit+0x160>)
 800112c:	2210      	movs	r2, #16
 800112e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001130:	4b1a      	ldr	r3, [pc, #104]	; (800119c <HAL_UART_MspInit+0x160>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001136:	4b19      	ldr	r3, [pc, #100]	; (800119c <HAL_UART_MspInit+0x160>)
 8001138:	2280      	movs	r2, #128	; 0x80
 800113a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800113c:	4b17      	ldr	r3, [pc, #92]	; (800119c <HAL_UART_MspInit+0x160>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001142:	4b16      	ldr	r3, [pc, #88]	; (800119c <HAL_UART_MspInit+0x160>)
 8001144:	2200      	movs	r2, #0
 8001146:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <HAL_UART_MspInit+0x160>)
 800114a:	2200      	movs	r2, #0
 800114c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800114e:	4b13      	ldr	r3, [pc, #76]	; (800119c <HAL_UART_MspInit+0x160>)
 8001150:	2200      	movs	r2, #0
 8001152:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001154:	4811      	ldr	r0, [pc, #68]	; (800119c <HAL_UART_MspInit+0x160>)
 8001156:	f000 fa6b 	bl	8001630 <HAL_DMA_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001160:	f7ff feac 	bl	8000ebc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a0d      	ldr	r2, [pc, #52]	; (800119c <HAL_UART_MspInit+0x160>)
 8001168:	631a      	str	r2, [r3, #48]	; 0x30
 800116a:	4a0c      	ldr	r2, [pc, #48]	; (800119c <HAL_UART_MspInit+0x160>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	2100      	movs	r1, #0
 8001174:	2026      	movs	r0, #38	; 0x26
 8001176:	f000 fa24 	bl	80015c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800117a:	2026      	movs	r0, #38	; 0x26
 800117c:	f000 fa3d 	bl	80015fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001180:	bf00      	nop
 8001182:	3720      	adds	r7, #32
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40004400 	.word	0x40004400
 800118c:	40021000 	.word	0x40021000
 8001190:	40010800 	.word	0x40010800
 8001194:	200007b0 	.word	0x200007b0
 8001198:	4002006c 	.word	0x4002006c
 800119c:	20000848 	.word	0x20000848
 80011a0:	40020080 	.word	0x40020080

080011a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr

080011b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <HardFault_Handler+0x4>

080011b6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ba:	e7fe      	b.n	80011ba <MemManage_Handler+0x4>

080011bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <BusFault_Handler+0x4>

080011c2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c6:	e7fe      	b.n	80011c6 <UsageFault_Handler+0x4>

080011c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr

080011d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr

080011e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr

080011ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f0:	f000 f8d2 	bl	8001398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <DMA1_Channel6_IRQHandler+0x10>)
 80011fe:	f000 fb81 	bl	8001904 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200007b0 	.word	0x200007b0

0800120c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001210:	4802      	ldr	r0, [pc, #8]	; (800121c <DMA1_Channel7_IRQHandler+0x10>)
 8001212:	f000 fb77 	bl	8001904 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000848 	.word	0x20000848

08001220 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001224:	4802      	ldr	r0, [pc, #8]	; (8001230 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001226:	f001 f82a 	bl	800227e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200015bc 	.word	0x200015bc

08001234 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  if(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_IDLE))
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <USART2_IRQHandler+0x20>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0310 	and.w	r3, r3, #16
 8001242:	2b10      	cmp	r3, #16
 8001244:	d101      	bne.n	800124a <USART2_IRQHandler+0x16>
	  uart_finish_receive();//空闲中断
 8001246:	f7ff fc93 	bl	8000b70 <uart_finish_receive>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800124a:	4802      	ldr	r0, [pc, #8]	; (8001254 <USART2_IRQHandler+0x20>)
 800124c:	f002 fce8 	bl	8003c20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	200008e4 	.word	0x200008e4

08001258 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800125c:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <SystemInit+0x5c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a14      	ldr	r2, [pc, #80]	; (80012b4 <SystemInit+0x5c>)
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <SystemInit+0x5c>)
 800126a:	685a      	ldr	r2, [r3, #4]
 800126c:	4911      	ldr	r1, [pc, #68]	; (80012b4 <SystemInit+0x5c>)
 800126e:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <SystemInit+0x60>)
 8001270:	4013      	ands	r3, r2
 8001272:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <SystemInit+0x5c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a0e      	ldr	r2, [pc, #56]	; (80012b4 <SystemInit+0x5c>)
 800127a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800127e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001282:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001284:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <SystemInit+0x5c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <SystemInit+0x5c>)
 800128a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800128e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <SystemInit+0x5c>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	4a07      	ldr	r2, [pc, #28]	; (80012b4 <SystemInit+0x5c>)
 8001296:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800129a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800129c:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <SystemInit+0x5c>)
 800129e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80012a2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <SystemInit+0x64>)
 80012a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012aa:	609a      	str	r2, [r3, #8]
#endif 
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr
 80012b4:	40021000 	.word	0x40021000
 80012b8:	f8ff0000 	.word	0xf8ff0000
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80012c0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80012c2:	e003      	b.n	80012cc <LoopCopyDataInit>

080012c4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80012c6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80012c8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80012ca:	3104      	adds	r1, #4

080012cc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80012cc:	480a      	ldr	r0, [pc, #40]	; (80012f8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80012ce:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80012d0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80012d2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80012d4:	d3f6      	bcc.n	80012c4 <CopyDataInit>
  ldr r2, =_sbss
 80012d6:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80012d8:	e002      	b.n	80012e0 <LoopFillZerobss>

080012da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  str r3, [r2], #4
 80012dc:	f842 3b04 	str.w	r3, [r2], #4

080012e0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80012e0:	4b08      	ldr	r3, [pc, #32]	; (8001304 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80012e2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80012e4:	d3f9      	bcc.n	80012da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012e6:	f7ff ffb7 	bl	8001258 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ea:	f006 f9f3 	bl	80076d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012ee:	f7ff fc8f 	bl	8000c10 <main>
  bx lr
 80012f2:	4770      	bx	lr
  ldr r3, =_sidata
 80012f4:	080077b0 	.word	0x080077b0
  ldr r0, =_sdata
 80012f8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80012fc:	20000188 	.word	0x20000188
  ldr r2, =_sbss
 8001300:	20000188 	.word	0x20000188
  ldr r3, = _ebss
 8001304:	20001828 	.word	0x20001828

08001308 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001308:	e7fe      	b.n	8001308 <ADC1_2_IRQHandler>
	...

0800130c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <HAL_Init+0x28>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a07      	ldr	r2, [pc, #28]	; (8001334 <HAL_Init+0x28>)
 8001316:	f043 0310 	orr.w	r3, r3, #16
 800131a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800131c:	2003      	movs	r0, #3
 800131e:	f000 f945 	bl	80015ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001322:	2000      	movs	r0, #0
 8001324:	f000 f808 	bl	8001338 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001328:	f7ff fdce 	bl	8000ec8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40022000 	.word	0x40022000

08001338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_InitTick+0x54>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_InitTick+0x58>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	4619      	mov	r1, r3
 800134a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001352:	fbb2 f3f3 	udiv	r3, r2, r3
 8001356:	4618      	mov	r0, r3
 8001358:	f000 f95d 	bl	8001616 <HAL_SYSTICK_Config>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e00e      	b.n	8001384 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b0f      	cmp	r3, #15
 800136a:	d80a      	bhi.n	8001382 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800136c:	2200      	movs	r2, #0
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	f04f 30ff 	mov.w	r0, #4294967295
 8001374:	f000 f925 	bl	80015c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001378:	4a06      	ldr	r2, [pc, #24]	; (8001394 <HAL_InitTick+0x5c>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800137e:	2300      	movs	r3, #0
 8001380:	e000      	b.n	8001384 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	2000000c 	.word	0x2000000c
 8001390:	20000014 	.word	0x20000014
 8001394:	20000010 	.word	0x20000010

08001398 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <HAL_IncTick+0x1c>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <HAL_IncTick+0x20>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4413      	add	r3, r2
 80013a8:	4a03      	ldr	r2, [pc, #12]	; (80013b8 <HAL_IncTick+0x20>)
 80013aa:	6013      	str	r3, [r2, #0]
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	20000014 	.word	0x20000014
 80013b8:	20000924 	.word	0x20000924

080013bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return uwTick;
 80013c0:	4b02      	ldr	r3, [pc, #8]	; (80013cc <HAL_GetTick+0x10>)
 80013c2:	681b      	ldr	r3, [r3, #0]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	20000924 	.word	0x20000924

080013d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d8:	f7ff fff0 	bl	80013bc <HAL_GetTick>
 80013dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e8:	d005      	beq.n	80013f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <HAL_Delay+0x40>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	461a      	mov	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4413      	add	r3, r2
 80013f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013f6:	bf00      	nop
 80013f8:	f7ff ffe0 	bl	80013bc <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	429a      	cmp	r2, r3
 8001406:	d8f7      	bhi.n	80013f8 <HAL_Delay+0x28>
  {
  }
}
 8001408:	bf00      	nop
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000014 	.word	0x20000014

08001414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001430:	4013      	ands	r3, r2
 8001432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800143c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001446:	4a04      	ldr	r2, [pc, #16]	; (8001458 <__NVIC_SetPriorityGrouping+0x44>)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	60d3      	str	r3, [r2, #12]
}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <__NVIC_GetPriorityGrouping+0x18>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	0a1b      	lsrs	r3, r3, #8
 8001466:	f003 0307 	and.w	r3, r3, #7
}
 800146a:	4618      	mov	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	2b00      	cmp	r3, #0
 8001488:	db0b      	blt.n	80014a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	f003 021f 	and.w	r2, r3, #31
 8001490:	4906      	ldr	r1, [pc, #24]	; (80014ac <__NVIC_EnableIRQ+0x34>)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	095b      	lsrs	r3, r3, #5
 8001498:	2001      	movs	r0, #1
 800149a:	fa00 f202 	lsl.w	r2, r0, r2
 800149e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	e000e100 	.word	0xe000e100

080014b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	6039      	str	r1, [r7, #0]
 80014ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	db0a      	blt.n	80014da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	490c      	ldr	r1, [pc, #48]	; (80014fc <__NVIC_SetPriority+0x4c>)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	0112      	lsls	r2, r2, #4
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	440b      	add	r3, r1
 80014d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d8:	e00a      	b.n	80014f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4908      	ldr	r1, [pc, #32]	; (8001500 <__NVIC_SetPriority+0x50>)
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	3b04      	subs	r3, #4
 80014e8:	0112      	lsls	r2, r2, #4
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	440b      	add	r3, r1
 80014ee:	761a      	strb	r2, [r3, #24]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000e100 	.word	0xe000e100
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001504:	b480      	push	{r7}
 8001506:	b089      	sub	sp, #36	; 0x24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f1c3 0307 	rsb	r3, r3, #7
 800151e:	2b04      	cmp	r3, #4
 8001520:	bf28      	it	cs
 8001522:	2304      	movcs	r3, #4
 8001524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3304      	adds	r3, #4
 800152a:	2b06      	cmp	r3, #6
 800152c:	d902      	bls.n	8001534 <NVIC_EncodePriority+0x30>
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3b03      	subs	r3, #3
 8001532:	e000      	b.n	8001536 <NVIC_EncodePriority+0x32>
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001538:	f04f 32ff 	mov.w	r2, #4294967295
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43da      	mvns	r2, r3
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	401a      	ands	r2, r3
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800154c:	f04f 31ff 	mov.w	r1, #4294967295
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	fa01 f303 	lsl.w	r3, r1, r3
 8001556:	43d9      	mvns	r1, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800155c:	4313      	orrs	r3, r2
         );
}
 800155e:	4618      	mov	r0, r3
 8001560:	3724      	adds	r7, #36	; 0x24
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr

08001568 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3b01      	subs	r3, #1
 8001574:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001578:	d301      	bcc.n	800157e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800157a:	2301      	movs	r3, #1
 800157c:	e00f      	b.n	800159e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157e:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <SysTick_Config+0x40>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001586:	210f      	movs	r1, #15
 8001588:	f04f 30ff 	mov.w	r0, #4294967295
 800158c:	f7ff ff90 	bl	80014b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001590:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <SysTick_Config+0x40>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001596:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <SysTick_Config+0x40>)
 8001598:	2207      	movs	r2, #7
 800159a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	e000e010 	.word	0xe000e010

080015ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff ff2d 	bl	8001414 <__NVIC_SetPriorityGrouping>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b086      	sub	sp, #24
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
 80015ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d4:	f7ff ff42 	bl	800145c <__NVIC_GetPriorityGrouping>
 80015d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	6978      	ldr	r0, [r7, #20]
 80015e0:	f7ff ff90 	bl	8001504 <NVIC_EncodePriority>
 80015e4:	4602      	mov	r2, r0
 80015e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ea:	4611      	mov	r1, r2
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ff5f 	bl	80014b0 <__NVIC_SetPriority>
}
 80015f2:	bf00      	nop
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	4603      	mov	r3, r0
 8001602:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff35 	bl	8001478 <__NVIC_EnableIRQ>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff ffa2 	bl	8001568 <SysTick_Config>
 8001624:	4603      	mov	r3, r0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e043      	b.n	80016ce <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <HAL_DMA_Init+0xa8>)
 800164e:	4413      	add	r3, r2
 8001650:	4a22      	ldr	r2, [pc, #136]	; (80016dc <HAL_DMA_Init+0xac>)
 8001652:	fba2 2303 	umull	r2, r3, r2, r3
 8001656:	091b      	lsrs	r3, r3, #4
 8001658:	009a      	lsls	r2, r3, #2
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a1f      	ldr	r2, [pc, #124]	; (80016e0 <HAL_DMA_Init+0xb0>)
 8001662:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2202      	movs	r2, #2
 8001668:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800167a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800167e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001688:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001694:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr
 80016d8:	bffdfff8 	.word	0xbffdfff8
 80016dc:	cccccccd 	.word	0xcccccccd
 80016e0:	40020000 	.word	0x40020000

080016e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
 80016f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d101      	bne.n	8001704 <HAL_DMA_Start_IT+0x20>
 8001700:	2302      	movs	r3, #2
 8001702:	e04a      	b.n	800179a <HAL_DMA_Start_IT+0xb6>
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001712:	2b01      	cmp	r3, #1
 8001714:	d13a      	bne.n	800178c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2202      	movs	r2, #2
 800171a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2200      	movs	r2, #0
 8001722:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0201 	bic.w	r2, r2, #1
 8001732:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	68b9      	ldr	r1, [r7, #8]
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f000 f9e8 	bl	8001b10 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001744:	2b00      	cmp	r3, #0
 8001746:	d008      	beq.n	800175a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f042 020e 	orr.w	r2, r2, #14
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	e00f      	b.n	800177a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0204 	bic.w	r2, r2, #4
 8001768:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f042 020a 	orr.w	r2, r2, #10
 8001778:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f042 0201 	orr.w	r2, r2, #1
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	e005      	b.n	8001798 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001794:	2302      	movs	r3, #2
 8001796:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001798:	7dfb      	ldrb	r3, [r7, #23]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b085      	sub	sp, #20
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017aa:	2300      	movs	r3, #0
 80017ac:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d008      	beq.n	80017ca <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2204      	movs	r2, #4
 80017bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e020      	b.n	800180c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 020e 	bic.w	r2, r2, #14
 80017d8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 0201 	bic.w	r2, r2, #1
 80017e8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f2:	2101      	movs	r1, #1
 80017f4:	fa01 f202 	lsl.w	r2, r1, r2
 80017f8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800180a:	7bfb      	ldrb	r3, [r7, #15]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr
	...

08001818 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001820:	2300      	movs	r3, #0
 8001822:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800182a:	2b02      	cmp	r3, #2
 800182c:	d005      	beq.n	800183a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2204      	movs	r2, #4
 8001832:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	73fb      	strb	r3, [r7, #15]
 8001838:	e051      	b.n	80018de <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 020e 	bic.w	r2, r2, #14
 8001848:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 0201 	bic.w	r2, r2, #1
 8001858:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a22      	ldr	r2, [pc, #136]	; (80018e8 <HAL_DMA_Abort_IT+0xd0>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d029      	beq.n	80018b8 <HAL_DMA_Abort_IT+0xa0>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a20      	ldr	r2, [pc, #128]	; (80018ec <HAL_DMA_Abort_IT+0xd4>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d022      	beq.n	80018b4 <HAL_DMA_Abort_IT+0x9c>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a1f      	ldr	r2, [pc, #124]	; (80018f0 <HAL_DMA_Abort_IT+0xd8>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d01a      	beq.n	80018ae <HAL_DMA_Abort_IT+0x96>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a1d      	ldr	r2, [pc, #116]	; (80018f4 <HAL_DMA_Abort_IT+0xdc>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d012      	beq.n	80018a8 <HAL_DMA_Abort_IT+0x90>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a1c      	ldr	r2, [pc, #112]	; (80018f8 <HAL_DMA_Abort_IT+0xe0>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d00a      	beq.n	80018a2 <HAL_DMA_Abort_IT+0x8a>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a1a      	ldr	r2, [pc, #104]	; (80018fc <HAL_DMA_Abort_IT+0xe4>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d102      	bne.n	800189c <HAL_DMA_Abort_IT+0x84>
 8001896:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800189a:	e00e      	b.n	80018ba <HAL_DMA_Abort_IT+0xa2>
 800189c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018a0:	e00b      	b.n	80018ba <HAL_DMA_Abort_IT+0xa2>
 80018a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018a6:	e008      	b.n	80018ba <HAL_DMA_Abort_IT+0xa2>
 80018a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ac:	e005      	b.n	80018ba <HAL_DMA_Abort_IT+0xa2>
 80018ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018b2:	e002      	b.n	80018ba <HAL_DMA_Abort_IT+0xa2>
 80018b4:	2310      	movs	r3, #16
 80018b6:	e000      	b.n	80018ba <HAL_DMA_Abort_IT+0xa2>
 80018b8:	2301      	movs	r3, #1
 80018ba:	4a11      	ldr	r2, [pc, #68]	; (8001900 <HAL_DMA_Abort_IT+0xe8>)
 80018bc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	4798      	blx	r3
    } 
  }
  return status;
 80018de:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40020008 	.word	0x40020008
 80018ec:	4002001c 	.word	0x4002001c
 80018f0:	40020030 	.word	0x40020030
 80018f4:	40020044 	.word	0x40020044
 80018f8:	40020058 	.word	0x40020058
 80018fc:	4002006c 	.word	0x4002006c
 8001900:	40020000 	.word	0x40020000

08001904 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001920:	2204      	movs	r2, #4
 8001922:	409a      	lsls	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4013      	ands	r3, r2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d04f      	beq.n	80019cc <HAL_DMA_IRQHandler+0xc8>
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	f003 0304 	and.w	r3, r3, #4
 8001932:	2b00      	cmp	r3, #0
 8001934:	d04a      	beq.n	80019cc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0320 	and.w	r3, r3, #32
 8001940:	2b00      	cmp	r3, #0
 8001942:	d107      	bne.n	8001954 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 0204 	bic.w	r2, r2, #4
 8001952:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a66      	ldr	r2, [pc, #408]	; (8001af4 <HAL_DMA_IRQHandler+0x1f0>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d029      	beq.n	80019b2 <HAL_DMA_IRQHandler+0xae>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a65      	ldr	r2, [pc, #404]	; (8001af8 <HAL_DMA_IRQHandler+0x1f4>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d022      	beq.n	80019ae <HAL_DMA_IRQHandler+0xaa>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a63      	ldr	r2, [pc, #396]	; (8001afc <HAL_DMA_IRQHandler+0x1f8>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d01a      	beq.n	80019a8 <HAL_DMA_IRQHandler+0xa4>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a62      	ldr	r2, [pc, #392]	; (8001b00 <HAL_DMA_IRQHandler+0x1fc>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d012      	beq.n	80019a2 <HAL_DMA_IRQHandler+0x9e>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a60      	ldr	r2, [pc, #384]	; (8001b04 <HAL_DMA_IRQHandler+0x200>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d00a      	beq.n	800199c <HAL_DMA_IRQHandler+0x98>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a5f      	ldr	r2, [pc, #380]	; (8001b08 <HAL_DMA_IRQHandler+0x204>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d102      	bne.n	8001996 <HAL_DMA_IRQHandler+0x92>
 8001990:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001994:	e00e      	b.n	80019b4 <HAL_DMA_IRQHandler+0xb0>
 8001996:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800199a:	e00b      	b.n	80019b4 <HAL_DMA_IRQHandler+0xb0>
 800199c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80019a0:	e008      	b.n	80019b4 <HAL_DMA_IRQHandler+0xb0>
 80019a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019a6:	e005      	b.n	80019b4 <HAL_DMA_IRQHandler+0xb0>
 80019a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ac:	e002      	b.n	80019b4 <HAL_DMA_IRQHandler+0xb0>
 80019ae:	2340      	movs	r3, #64	; 0x40
 80019b0:	e000      	b.n	80019b4 <HAL_DMA_IRQHandler+0xb0>
 80019b2:	2304      	movs	r3, #4
 80019b4:	4a55      	ldr	r2, [pc, #340]	; (8001b0c <HAL_DMA_IRQHandler+0x208>)
 80019b6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 8094 	beq.w	8001aea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80019ca:	e08e      	b.n	8001aea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d0:	2202      	movs	r2, #2
 80019d2:	409a      	lsls	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4013      	ands	r3, r2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d056      	beq.n	8001a8a <HAL_DMA_IRQHandler+0x186>
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d051      	beq.n	8001a8a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0320 	and.w	r3, r3, #32
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d10b      	bne.n	8001a0c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 020a 	bic.w	r2, r2, #10
 8001a02:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a38      	ldr	r2, [pc, #224]	; (8001af4 <HAL_DMA_IRQHandler+0x1f0>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d029      	beq.n	8001a6a <HAL_DMA_IRQHandler+0x166>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a37      	ldr	r2, [pc, #220]	; (8001af8 <HAL_DMA_IRQHandler+0x1f4>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d022      	beq.n	8001a66 <HAL_DMA_IRQHandler+0x162>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a35      	ldr	r2, [pc, #212]	; (8001afc <HAL_DMA_IRQHandler+0x1f8>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d01a      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x15c>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a34      	ldr	r2, [pc, #208]	; (8001b00 <HAL_DMA_IRQHandler+0x1fc>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d012      	beq.n	8001a5a <HAL_DMA_IRQHandler+0x156>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a32      	ldr	r2, [pc, #200]	; (8001b04 <HAL_DMA_IRQHandler+0x200>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d00a      	beq.n	8001a54 <HAL_DMA_IRQHandler+0x150>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a31      	ldr	r2, [pc, #196]	; (8001b08 <HAL_DMA_IRQHandler+0x204>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d102      	bne.n	8001a4e <HAL_DMA_IRQHandler+0x14a>
 8001a48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a4c:	e00e      	b.n	8001a6c <HAL_DMA_IRQHandler+0x168>
 8001a4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a52:	e00b      	b.n	8001a6c <HAL_DMA_IRQHandler+0x168>
 8001a54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a58:	e008      	b.n	8001a6c <HAL_DMA_IRQHandler+0x168>
 8001a5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a5e:	e005      	b.n	8001a6c <HAL_DMA_IRQHandler+0x168>
 8001a60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a64:	e002      	b.n	8001a6c <HAL_DMA_IRQHandler+0x168>
 8001a66:	2320      	movs	r3, #32
 8001a68:	e000      	b.n	8001a6c <HAL_DMA_IRQHandler+0x168>
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	4a27      	ldr	r2, [pc, #156]	; (8001b0c <HAL_DMA_IRQHandler+0x208>)
 8001a6e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d034      	beq.n	8001aea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a88:	e02f      	b.n	8001aea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	2208      	movs	r2, #8
 8001a90:	409a      	lsls	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d028      	beq.n	8001aec <HAL_DMA_IRQHandler+0x1e8>
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	f003 0308 	and.w	r3, r3, #8
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d023      	beq.n	8001aec <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 020e 	bic.w	r2, r2, #14
 8001ab2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001abc:	2101      	movs	r1, #1
 8001abe:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d004      	beq.n	8001aec <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	4798      	blx	r3
    }
  }
  return;
 8001aea:	bf00      	nop
 8001aec:	bf00      	nop
}
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40020008 	.word	0x40020008
 8001af8:	4002001c 	.word	0x4002001c
 8001afc:	40020030 	.word	0x40020030
 8001b00:	40020044 	.word	0x40020044
 8001b04:	40020058 	.word	0x40020058
 8001b08:	4002006c 	.word	0x4002006c
 8001b0c:	40020000 	.word	0x40020000

08001b10 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
 8001b1c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b26:	2101      	movs	r1, #1
 8001b28:	fa01 f202 	lsl.w	r2, r1, r2
 8001b2c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b10      	cmp	r3, #16
 8001b3c:	d108      	bne.n	8001b50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b4e:	e007      	b.n	8001b60 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	60da      	str	r2, [r3, #12]
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr
	...

08001b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b08b      	sub	sp, #44	; 0x2c
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b76:	2300      	movs	r3, #0
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b7e:	e127      	b.n	8001dd0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b80:	2201      	movs	r2, #1
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	69fa      	ldr	r2, [r7, #28]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	f040 8116 	bne.w	8001dca <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b12      	cmp	r3, #18
 8001ba4:	d034      	beq.n	8001c10 <HAL_GPIO_Init+0xa4>
 8001ba6:	2b12      	cmp	r3, #18
 8001ba8:	d80d      	bhi.n	8001bc6 <HAL_GPIO_Init+0x5a>
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d02b      	beq.n	8001c06 <HAL_GPIO_Init+0x9a>
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d804      	bhi.n	8001bbc <HAL_GPIO_Init+0x50>
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d031      	beq.n	8001c1a <HAL_GPIO_Init+0xae>
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d01c      	beq.n	8001bf4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bba:	e048      	b.n	8001c4e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d043      	beq.n	8001c48 <HAL_GPIO_Init+0xdc>
 8001bc0:	2b11      	cmp	r3, #17
 8001bc2:	d01b      	beq.n	8001bfc <HAL_GPIO_Init+0x90>
          break;
 8001bc4:	e043      	b.n	8001c4e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001bc6:	4a89      	ldr	r2, [pc, #548]	; (8001dec <HAL_GPIO_Init+0x280>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d026      	beq.n	8001c1a <HAL_GPIO_Init+0xae>
 8001bcc:	4a87      	ldr	r2, [pc, #540]	; (8001dec <HAL_GPIO_Init+0x280>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d806      	bhi.n	8001be0 <HAL_GPIO_Init+0x74>
 8001bd2:	4a87      	ldr	r2, [pc, #540]	; (8001df0 <HAL_GPIO_Init+0x284>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d020      	beq.n	8001c1a <HAL_GPIO_Init+0xae>
 8001bd8:	4a86      	ldr	r2, [pc, #536]	; (8001df4 <HAL_GPIO_Init+0x288>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d01d      	beq.n	8001c1a <HAL_GPIO_Init+0xae>
          break;
 8001bde:	e036      	b.n	8001c4e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001be0:	4a85      	ldr	r2, [pc, #532]	; (8001df8 <HAL_GPIO_Init+0x28c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d019      	beq.n	8001c1a <HAL_GPIO_Init+0xae>
 8001be6:	4a85      	ldr	r2, [pc, #532]	; (8001dfc <HAL_GPIO_Init+0x290>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d016      	beq.n	8001c1a <HAL_GPIO_Init+0xae>
 8001bec:	4a84      	ldr	r2, [pc, #528]	; (8001e00 <HAL_GPIO_Init+0x294>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d013      	beq.n	8001c1a <HAL_GPIO_Init+0xae>
          break;
 8001bf2:	e02c      	b.n	8001c4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	623b      	str	r3, [r7, #32]
          break;
 8001bfa:	e028      	b.n	8001c4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	3304      	adds	r3, #4
 8001c02:	623b      	str	r3, [r7, #32]
          break;
 8001c04:	e023      	b.n	8001c4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	3308      	adds	r3, #8
 8001c0c:	623b      	str	r3, [r7, #32]
          break;
 8001c0e:	e01e      	b.n	8001c4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	330c      	adds	r3, #12
 8001c16:	623b      	str	r3, [r7, #32]
          break;
 8001c18:	e019      	b.n	8001c4e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d102      	bne.n	8001c28 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c22:	2304      	movs	r3, #4
 8001c24:	623b      	str	r3, [r7, #32]
          break;
 8001c26:	e012      	b.n	8001c4e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d105      	bne.n	8001c3c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c30:	2308      	movs	r3, #8
 8001c32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69fa      	ldr	r2, [r7, #28]
 8001c38:	611a      	str	r2, [r3, #16]
          break;
 8001c3a:	e008      	b.n	8001c4e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c3c:	2308      	movs	r3, #8
 8001c3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	69fa      	ldr	r2, [r7, #28]
 8001c44:	615a      	str	r2, [r3, #20]
          break;
 8001c46:	e002      	b.n	8001c4e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	623b      	str	r3, [r7, #32]
          break;
 8001c4c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	2bff      	cmp	r3, #255	; 0xff
 8001c52:	d801      	bhi.n	8001c58 <HAL_GPIO_Init+0xec>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	e001      	b.n	8001c5c <HAL_GPIO_Init+0xf0>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3304      	adds	r3, #4
 8001c5c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	2bff      	cmp	r3, #255	; 0xff
 8001c62:	d802      	bhi.n	8001c6a <HAL_GPIO_Init+0xfe>
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	e002      	b.n	8001c70 <HAL_GPIO_Init+0x104>
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	3b08      	subs	r3, #8
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	210f      	movs	r1, #15
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	401a      	ands	r2, r3
 8001c82:	6a39      	ldr	r1, [r7, #32]
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 8096 	beq.w	8001dca <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c9e:	4b59      	ldr	r3, [pc, #356]	; (8001e04 <HAL_GPIO_Init+0x298>)
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	4a58      	ldr	r2, [pc, #352]	; (8001e04 <HAL_GPIO_Init+0x298>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6193      	str	r3, [r2, #24]
 8001caa:	4b56      	ldr	r3, [pc, #344]	; (8001e04 <HAL_GPIO_Init+0x298>)
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cb6:	4a54      	ldr	r2, [pc, #336]	; (8001e08 <HAL_GPIO_Init+0x29c>)
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	089b      	lsrs	r3, r3, #2
 8001cbc:	3302      	adds	r3, #2
 8001cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	220f      	movs	r2, #15
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a4b      	ldr	r2, [pc, #300]	; (8001e0c <HAL_GPIO_Init+0x2a0>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d013      	beq.n	8001d0a <HAL_GPIO_Init+0x19e>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a4a      	ldr	r2, [pc, #296]	; (8001e10 <HAL_GPIO_Init+0x2a4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d00d      	beq.n	8001d06 <HAL_GPIO_Init+0x19a>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a49      	ldr	r2, [pc, #292]	; (8001e14 <HAL_GPIO_Init+0x2a8>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d007      	beq.n	8001d02 <HAL_GPIO_Init+0x196>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a48      	ldr	r2, [pc, #288]	; (8001e18 <HAL_GPIO_Init+0x2ac>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d101      	bne.n	8001cfe <HAL_GPIO_Init+0x192>
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e006      	b.n	8001d0c <HAL_GPIO_Init+0x1a0>
 8001cfe:	2304      	movs	r3, #4
 8001d00:	e004      	b.n	8001d0c <HAL_GPIO_Init+0x1a0>
 8001d02:	2302      	movs	r3, #2
 8001d04:	e002      	b.n	8001d0c <HAL_GPIO_Init+0x1a0>
 8001d06:	2301      	movs	r3, #1
 8001d08:	e000      	b.n	8001d0c <HAL_GPIO_Init+0x1a0>
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d0e:	f002 0203 	and.w	r2, r2, #3
 8001d12:	0092      	lsls	r2, r2, #2
 8001d14:	4093      	lsls	r3, r2
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d1c:	493a      	ldr	r1, [pc, #232]	; (8001e08 <HAL_GPIO_Init+0x29c>)
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	089b      	lsrs	r3, r3, #2
 8001d22:	3302      	adds	r3, #2
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d006      	beq.n	8001d44 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d36:	4b39      	ldr	r3, [pc, #228]	; (8001e1c <HAL_GPIO_Init+0x2b0>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	4938      	ldr	r1, [pc, #224]	; (8001e1c <HAL_GPIO_Init+0x2b0>)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	600b      	str	r3, [r1, #0]
 8001d42:	e006      	b.n	8001d52 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d44:	4b35      	ldr	r3, [pc, #212]	; (8001e1c <HAL_GPIO_Init+0x2b0>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	4933      	ldr	r1, [pc, #204]	; (8001e1c <HAL_GPIO_Init+0x2b0>)
 8001d4e:	4013      	ands	r3, r2
 8001d50:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d006      	beq.n	8001d6c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d5e:	4b2f      	ldr	r3, [pc, #188]	; (8001e1c <HAL_GPIO_Init+0x2b0>)
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	492e      	ldr	r1, [pc, #184]	; (8001e1c <HAL_GPIO_Init+0x2b0>)
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	604b      	str	r3, [r1, #4]
 8001d6a:	e006      	b.n	8001d7a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d6c:	4b2b      	ldr	r3, [pc, #172]	; (8001e1c <HAL_GPIO_Init+0x2b0>)
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	43db      	mvns	r3, r3
 8001d74:	4929      	ldr	r1, [pc, #164]	; (8001e1c <HAL_GPIO_Init+0x2b0>)
 8001d76:	4013      	ands	r3, r2
 8001d78:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d006      	beq.n	8001d94 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d86:	4b25      	ldr	r3, [pc, #148]	; (8001e1c <HAL_GPIO_Init+0x2b0>)
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	4924      	ldr	r1, [pc, #144]	; (8001e1c <HAL_GPIO_Init+0x2b0>)
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	608b      	str	r3, [r1, #8]
 8001d92:	e006      	b.n	8001da2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d94:	4b21      	ldr	r3, [pc, #132]	; (8001e1c <HAL_GPIO_Init+0x2b0>)
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	491f      	ldr	r1, [pc, #124]	; (8001e1c <HAL_GPIO_Init+0x2b0>)
 8001d9e:	4013      	ands	r3, r2
 8001da0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d006      	beq.n	8001dbc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001dae:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <HAL_GPIO_Init+0x2b0>)
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	491a      	ldr	r1, [pc, #104]	; (8001e1c <HAL_GPIO_Init+0x2b0>)
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	60cb      	str	r3, [r1, #12]
 8001dba:	e006      	b.n	8001dca <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dbc:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <HAL_GPIO_Init+0x2b0>)
 8001dbe:	68da      	ldr	r2, [r3, #12]
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	4915      	ldr	r1, [pc, #84]	; (8001e1c <HAL_GPIO_Init+0x2b0>)
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	3301      	adds	r3, #1
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f47f aed0 	bne.w	8001b80 <HAL_GPIO_Init+0x14>
  }
}
 8001de0:	bf00      	nop
 8001de2:	372c      	adds	r7, #44	; 0x2c
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	10210000 	.word	0x10210000
 8001df0:	10110000 	.word	0x10110000
 8001df4:	10120000 	.word	0x10120000
 8001df8:	10310000 	.word	0x10310000
 8001dfc:	10320000 	.word	0x10320000
 8001e00:	10220000 	.word	0x10220000
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40010000 	.word	0x40010000
 8001e0c:	40010800 	.word	0x40010800
 8001e10:	40010c00 	.word	0x40010c00
 8001e14:	40011000 	.word	0x40011000
 8001e18:	40011400 	.word	0x40011400
 8001e1c:	40010400 	.word	0x40010400

08001e20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e10f      	b.n	8002052 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d106      	bne.n	8001e4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff f870 	bl	8000f2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2224      	movs	r2, #36	; 0x24
 8001e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0201 	bic.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e64:	f001 fbbc 	bl	80035e0 <HAL_RCC_GetPCLK1Freq>
 8001e68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	4a7b      	ldr	r2, [pc, #492]	; (800205c <HAL_I2C_Init+0x23c>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d807      	bhi.n	8001e84 <HAL_I2C_Init+0x64>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4a7a      	ldr	r2, [pc, #488]	; (8002060 <HAL_I2C_Init+0x240>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	bf94      	ite	ls
 8001e7c:	2301      	movls	r3, #1
 8001e7e:	2300      	movhi	r3, #0
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	e006      	b.n	8001e92 <HAL_I2C_Init+0x72>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4a77      	ldr	r2, [pc, #476]	; (8002064 <HAL_I2C_Init+0x244>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	bf94      	ite	ls
 8001e8c:	2301      	movls	r3, #1
 8001e8e:	2300      	movhi	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e0db      	b.n	8002052 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	4a72      	ldr	r2, [pc, #456]	; (8002068 <HAL_I2C_Init+0x248>)
 8001e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea2:	0c9b      	lsrs	r3, r3, #18
 8001ea4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68ba      	ldr	r2, [r7, #8]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	4a64      	ldr	r2, [pc, #400]	; (800205c <HAL_I2C_Init+0x23c>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d802      	bhi.n	8001ed4 <HAL_I2C_Init+0xb4>
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	e009      	b.n	8001ee8 <HAL_I2C_Init+0xc8>
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001eda:	fb02 f303 	mul.w	r3, r2, r3
 8001ede:	4a63      	ldr	r2, [pc, #396]	; (800206c <HAL_I2C_Init+0x24c>)
 8001ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee4:	099b      	lsrs	r3, r3, #6
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6812      	ldr	r2, [r2, #0]
 8001eec:	430b      	orrs	r3, r1
 8001eee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001efa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	4956      	ldr	r1, [pc, #344]	; (800205c <HAL_I2C_Init+0x23c>)
 8001f04:	428b      	cmp	r3, r1
 8001f06:	d80d      	bhi.n	8001f24 <HAL_I2C_Init+0x104>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	1e59      	subs	r1, r3, #1
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f16:	3301      	adds	r3, #1
 8001f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	bf38      	it	cc
 8001f20:	2304      	movcc	r3, #4
 8001f22:	e04f      	b.n	8001fc4 <HAL_I2C_Init+0x1a4>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d111      	bne.n	8001f50 <HAL_I2C_Init+0x130>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	1e58      	subs	r0, r3, #1
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6859      	ldr	r1, [r3, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	440b      	add	r3, r1
 8001f3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f3e:	3301      	adds	r3, #1
 8001f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	bf0c      	ite	eq
 8001f48:	2301      	moveq	r3, #1
 8001f4a:	2300      	movne	r3, #0
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	e012      	b.n	8001f76 <HAL_I2C_Init+0x156>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	1e58      	subs	r0, r3, #1
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6859      	ldr	r1, [r3, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	0099      	lsls	r1, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f66:	3301      	adds	r3, #1
 8001f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	bf0c      	ite	eq
 8001f70:	2301      	moveq	r3, #1
 8001f72:	2300      	movne	r3, #0
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <HAL_I2C_Init+0x15e>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e022      	b.n	8001fc4 <HAL_I2C_Init+0x1a4>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10e      	bne.n	8001fa4 <HAL_I2C_Init+0x184>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	1e58      	subs	r0, r3, #1
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6859      	ldr	r1, [r3, #4]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	440b      	add	r3, r1
 8001f94:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f98:	3301      	adds	r3, #1
 8001f9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fa2:	e00f      	b.n	8001fc4 <HAL_I2C_Init+0x1a4>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	1e58      	subs	r0, r3, #1
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6859      	ldr	r1, [r3, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	0099      	lsls	r1, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fba:	3301      	adds	r3, #1
 8001fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	6809      	ldr	r1, [r1, #0]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69da      	ldr	r2, [r3, #28]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ff2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6911      	ldr	r1, [r2, #16]
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	68d2      	ldr	r2, [r2, #12]
 8001ffe:	4311      	orrs	r1, r2
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	430b      	orrs	r3, r1
 8002006:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695a      	ldr	r2, [r3, #20]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	431a      	orrs	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f042 0201 	orr.w	r2, r2, #1
 8002032:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2220      	movs	r2, #32
 800203e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	000186a0 	.word	0x000186a0
 8002060:	001e847f 	.word	0x001e847f
 8002064:	003d08ff 	.word	0x003d08ff
 8002068:	431bde83 	.word	0x431bde83
 800206c:	10624dd3 	.word	0x10624dd3

08002070 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002072:	b08b      	sub	sp, #44	; 0x2c
 8002074:	af06      	add	r7, sp, #24
 8002076:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e0d3      	b.n	800222a <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d106      	bne.n	800209c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f005 f87e 	bl	8007198 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2203      	movs	r2, #3
 80020a0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f002 f9d2 	bl	8004452 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	687e      	ldr	r6, [r7, #4]
 80020b6:	466d      	mov	r5, sp
 80020b8:	f106 0410 	add.w	r4, r6, #16
 80020bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020c0:	6823      	ldr	r3, [r4, #0]
 80020c2:	602b      	str	r3, [r5, #0]
 80020c4:	1d33      	adds	r3, r6, #4
 80020c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020c8:	6838      	ldr	r0, [r7, #0]
 80020ca:	f002 f99b 	bl	8004404 <USB_CoreInit>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2202      	movs	r2, #2
 80020d8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e0a4      	b.n	800222a <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2100      	movs	r1, #0
 80020e6:	4618      	mov	r0, r3
 80020e8:	f002 f9cf 	bl	800448a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ec:	2300      	movs	r3, #0
 80020ee:	73fb      	strb	r3, [r7, #15]
 80020f0:	e035      	b.n	800215e <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	015b      	lsls	r3, r3, #5
 80020f8:	4413      	add	r3, r2
 80020fa:	3329      	adds	r3, #41	; 0x29
 80020fc:	2201      	movs	r2, #1
 80020fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002100:	7bfb      	ldrb	r3, [r7, #15]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	015b      	lsls	r3, r3, #5
 8002106:	4413      	add	r3, r2
 8002108:	3328      	adds	r3, #40	; 0x28
 800210a:	7bfa      	ldrb	r2, [r7, #15]
 800210c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800210e:	7bfb      	ldrb	r3, [r7, #15]
 8002110:	7bfa      	ldrb	r2, [r7, #15]
 8002112:	b291      	uxth	r1, r2
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	015b      	lsls	r3, r3, #5
 8002118:	4413      	add	r3, r2
 800211a:	3336      	adds	r3, #54	; 0x36
 800211c:	460a      	mov	r2, r1
 800211e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002120:	7bfb      	ldrb	r3, [r7, #15]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	015b      	lsls	r3, r3, #5
 8002126:	4413      	add	r3, r2
 8002128:	332b      	adds	r3, #43	; 0x2b
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800212e:	7bfb      	ldrb	r3, [r7, #15]
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	015b      	lsls	r3, r3, #5
 8002134:	4413      	add	r3, r2
 8002136:	3338      	adds	r3, #56	; 0x38
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	015b      	lsls	r3, r3, #5
 8002142:	4413      	add	r3, r2
 8002144:	333c      	adds	r3, #60	; 0x3c
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	3302      	adds	r3, #2
 8002150:	015b      	lsls	r3, r3, #5
 8002152:	4413      	add	r3, r2
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002158:	7bfb      	ldrb	r3, [r7, #15]
 800215a:	3301      	adds	r3, #1
 800215c:	73fb      	strb	r3, [r7, #15]
 800215e:	7bfa      	ldrb	r2, [r7, #15]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	429a      	cmp	r2, r3
 8002166:	d3c4      	bcc.n	80020f2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002168:	2300      	movs	r3, #0
 800216a:	73fb      	strb	r3, [r7, #15]
 800216c:	e031      	b.n	80021d2 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	015b      	lsls	r3, r3, #5
 8002174:	4413      	add	r3, r2
 8002176:	f203 1329 	addw	r3, r3, #297	; 0x129
 800217a:	2200      	movs	r2, #0
 800217c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800217e:	7bfb      	ldrb	r3, [r7, #15]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	015b      	lsls	r3, r3, #5
 8002184:	4413      	add	r3, r2
 8002186:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800218a:	7bfa      	ldrb	r2, [r7, #15]
 800218c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800218e:	7bfb      	ldrb	r3, [r7, #15]
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	015b      	lsls	r3, r3, #5
 8002194:	4413      	add	r3, r2
 8002196:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800219e:	7bfb      	ldrb	r3, [r7, #15]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	015b      	lsls	r3, r3, #5
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	015b      	lsls	r3, r3, #5
 80021b4:	4413      	add	r3, r2
 80021b6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021be:	7bfb      	ldrb	r3, [r7, #15]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	330a      	adds	r3, #10
 80021c4:	015b      	lsls	r3, r3, #5
 80021c6:	4413      	add	r3, r2
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
 80021ce:	3301      	adds	r3, #1
 80021d0:	73fb      	strb	r3, [r7, #15]
 80021d2:	7bfa      	ldrb	r2, [r7, #15]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d3c8      	bcc.n	800216e <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	603b      	str	r3, [r7, #0]
 80021e2:	687e      	ldr	r6, [r7, #4]
 80021e4:	466d      	mov	r5, sp
 80021e6:	f106 0410 	add.w	r4, r6, #16
 80021ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ee:	6823      	ldr	r3, [r4, #0]
 80021f0:	602b      	str	r3, [r5, #0]
 80021f2:	1d33      	adds	r3, r6, #4
 80021f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021f6:	6838      	ldr	r0, [r7, #0]
 80021f8:	f002 f953 	bl	80044a2 <USB_DevInit>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d005      	beq.n	800220e <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2202      	movs	r2, #2
 8002206:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e00d      	b.n	800222a <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f003 f991 	bl	800554a <USB_DevDisconnect>

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002232 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002240:	2b01      	cmp	r3, #1
 8002242:	d101      	bne.n	8002248 <HAL_PCD_Start+0x16>
 8002244:	2302      	movs	r3, #2
 8002246:	e016      	b.n	8002276 <HAL_PCD_Start+0x44>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002250:	2101      	movs	r1, #1
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f005 fa07 	bl	8007666 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f003 f96a 	bl	8005536 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f002 f8dc 	bl	8004424 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b082      	sub	sp, #8
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f003 f967 	bl	800555e <USB_ReadInterrupts>
 8002290:	4603      	mov	r3, r0
 8002292:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002296:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800229a:	d102      	bne.n	80022a2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 faf3 	bl	8002888 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f003 f959 	bl	800555e <USB_ReadInterrupts>
 80022ac:	4603      	mov	r3, r0
 80022ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022b6:	d112      	bne.n	80022de <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022ca:	b292      	uxth	r2, r2
 80022cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f004 ffd6 	bl	8007282 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80022d6:	2100      	movs	r1, #0
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f8de 	bl	800249a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f003 f93b 	bl	800555e <USB_ReadInterrupts>
 80022e8:	4603      	mov	r3, r0
 80022ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022f2:	d10b      	bne.n	800230c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002306:	b292      	uxth	r2, r2
 8002308:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f003 f924 	bl	800555e <USB_ReadInterrupts>
 8002316:	4603      	mov	r3, r0
 8002318:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800231c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002320:	d10b      	bne.n	800233a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800232a:	b29a      	uxth	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002334:	b292      	uxth	r2, r2
 8002336:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f003 f90d 	bl	800555e <USB_ReadInterrupts>
 8002344:	4603      	mov	r3, r0
 8002346:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800234a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800234e:	d126      	bne.n	800239e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002358:	b29a      	uxth	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 0204 	bic.w	r2, r2, #4
 8002362:	b292      	uxth	r2, r2
 8002364:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002370:	b29a      	uxth	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0208 	bic.w	r2, r2, #8
 800237a:	b292      	uxth	r2, r2
 800237c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f004 ffb7 	bl	80072f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800238e:	b29a      	uxth	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002398:	b292      	uxth	r2, r2
 800239a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f003 f8db 	bl	800555e <USB_ReadInterrupts>
 80023a8:	4603      	mov	r3, r0
 80023aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023b2:	d13d      	bne.n	8002430 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80023bc:	b29a      	uxth	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f042 0208 	orr.w	r2, r2, #8
 80023c6:	b292      	uxth	r2, r2
 80023c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023de:	b292      	uxth	r2, r2
 80023e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0204 	orr.w	r2, r2, #4
 80023f6:	b292      	uxth	r2, r2
 80023f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f003 f8ac 	bl	800555e <USB_ReadInterrupts>
 8002406:	4603      	mov	r3, r0
 8002408:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800240c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002410:	d10b      	bne.n	800242a <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800241a:	b29a      	uxth	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002424:	b292      	uxth	r2, r2
 8002426:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f004 ff48 	bl	80072c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f003 f892 	bl	800555e <USB_ReadInterrupts>
 800243a:	4603      	mov	r3, r0
 800243c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002444:	d10e      	bne.n	8002464 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800244e:	b29a      	uxth	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002458:	b292      	uxth	r2, r2
 800245a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f004 ff01 	bl	8007266 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f003 f878 	bl	800555e <USB_ReadInterrupts>
 800246e:	4603      	mov	r3, r0
 8002470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002474:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002478:	d10b      	bne.n	8002492 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002482:	b29a      	uxth	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800248c:	b292      	uxth	r2, r2
 800248e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b082      	sub	sp, #8
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	460b      	mov	r3, r1
 80024a4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d101      	bne.n	80024b4 <HAL_PCD_SetAddress+0x1a>
 80024b0:	2302      	movs	r3, #2
 80024b2:	e013      	b.n	80024dc <HAL_PCD_SetAddress+0x42>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	78fa      	ldrb	r2, [r7, #3]
 80024c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	78fa      	ldrb	r2, [r7, #3]
 80024ca:	4611      	mov	r1, r2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f003 f81f 	bl	8005510 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	4608      	mov	r0, r1
 80024ee:	4611      	mov	r1, r2
 80024f0:	461a      	mov	r2, r3
 80024f2:	4603      	mov	r3, r0
 80024f4:	70fb      	strb	r3, [r7, #3]
 80024f6:	460b      	mov	r3, r1
 80024f8:	803b      	strh	r3, [r7, #0]
 80024fa:	4613      	mov	r3, r2
 80024fc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80024fe:	2300      	movs	r3, #0
 8002500:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002502:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002506:	2b00      	cmp	r3, #0
 8002508:	da0b      	bge.n	8002522 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800250a:	78fb      	ldrb	r3, [r7, #3]
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	015b      	lsls	r3, r3, #5
 8002512:	3328      	adds	r3, #40	; 0x28
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	4413      	add	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2201      	movs	r2, #1
 800251e:	705a      	strb	r2, [r3, #1]
 8002520:	e00b      	b.n	800253a <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002522:	78fb      	ldrb	r3, [r7, #3]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	015b      	lsls	r3, r3, #5
 800252a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	4413      	add	r3, r2
 8002532:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800253a:	78fb      	ldrb	r3, [r7, #3]
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	b2da      	uxtb	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002546:	883a      	ldrh	r2, [r7, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	78ba      	ldrb	r2, [r7, #2]
 8002550:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	785b      	ldrb	r3, [r3, #1]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d004      	beq.n	8002564 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002564:	78bb      	ldrb	r3, [r7, #2]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d102      	bne.n	8002570 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002576:	2b01      	cmp	r3, #1
 8002578:	d101      	bne.n	800257e <HAL_PCD_EP_Open+0x9a>
 800257a:	2302      	movs	r3, #2
 800257c:	e00e      	b.n	800259c <HAL_PCD_EP_Open+0xb8>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68f9      	ldr	r1, [r7, #12]
 800258c:	4618      	mov	r0, r3
 800258e:	f001 ffad 	bl	80044ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 800259a:	7afb      	ldrb	r3, [r7, #11]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	da0b      	bge.n	80025d0 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025b8:	78fb      	ldrb	r3, [r7, #3]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	015b      	lsls	r3, r3, #5
 80025c0:	3328      	adds	r3, #40	; 0x28
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	4413      	add	r3, r2
 80025c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2201      	movs	r2, #1
 80025cc:	705a      	strb	r2, [r3, #1]
 80025ce:	e00b      	b.n	80025e8 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025d0:	78fb      	ldrb	r3, [r7, #3]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	015b      	lsls	r3, r3, #5
 80025d8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	4413      	add	r3, r2
 80025e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d101      	bne.n	8002602 <HAL_PCD_EP_Close+0x5e>
 80025fe:	2302      	movs	r3, #2
 8002600:	e00e      	b.n	8002620 <HAL_PCD_EP_Close+0x7c>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68f9      	ldr	r1, [r7, #12]
 8002610:	4618      	mov	r0, r3
 8002612:	f002 fa59 	bl	8004ac8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	607a      	str	r2, [r7, #4]
 8002632:	603b      	str	r3, [r7, #0]
 8002634:	460b      	mov	r3, r1
 8002636:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002638:	7afb      	ldrb	r3, [r7, #11]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	015b      	lsls	r3, r3, #5
 8002640:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	4413      	add	r3, r2
 8002648:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	2200      	movs	r2, #0
 800265a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	2200      	movs	r2, #0
 8002660:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002662:	7afb      	ldrb	r3, [r7, #11]
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	b2da      	uxtb	r2, r3
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800266e:	7afb      	ldrb	r3, [r7, #11]
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	2b00      	cmp	r3, #0
 8002676:	d106      	bne.n	8002686 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6979      	ldr	r1, [r7, #20]
 800267e:	4618      	mov	r0, r3
 8002680:	f002 fbb8 	bl	8004df4 <USB_EPStartXfer>
 8002684:	e005      	b.n	8002692 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6979      	ldr	r1, [r7, #20]
 800268c:	4618      	mov	r0, r3
 800268e:	f002 fbb1 	bl	8004df4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	460b      	mov	r3, r1
 80026a6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80026a8:	78fb      	ldrb	r3, [r7, #3]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	330a      	adds	r3, #10
 80026b2:	015b      	lsls	r3, r3, #5
 80026b4:	4413      	add	r3, r2
 80026b6:	3304      	adds	r3, #4
 80026b8:	681b      	ldr	r3, [r3, #0]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr

080026c4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	607a      	str	r2, [r7, #4]
 80026ce:	603b      	str	r3, [r7, #0]
 80026d0:	460b      	mov	r3, r1
 80026d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026d4:	7afb      	ldrb	r3, [r7, #11]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	015b      	lsls	r3, r3, #5
 80026dc:	3328      	adds	r3, #40	; 0x28
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	4413      	add	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	2200      	movs	r2, #0
 80026f4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2201      	movs	r2, #1
 80026fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026fc:	7afb      	ldrb	r3, [r7, #11]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	b2da      	uxtb	r2, r3
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002708:	7afb      	ldrb	r3, [r7, #11]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	2b00      	cmp	r3, #0
 8002710:	d106      	bne.n	8002720 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6979      	ldr	r1, [r7, #20]
 8002718:	4618      	mov	r0, r3
 800271a:	f002 fb6b 	bl	8004df4 <USB_EPStartXfer>
 800271e:	e005      	b.n	800272c <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6979      	ldr	r1, [r7, #20]
 8002726:	4618      	mov	r0, r3
 8002728:	f002 fb64 	bl	8004df4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b084      	sub	sp, #16
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	460b      	mov	r3, r1
 8002740:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002742:	78fb      	ldrb	r3, [r7, #3]
 8002744:	f003 0207 	and.w	r2, r3, #7
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	429a      	cmp	r2, r3
 800274e:	d901      	bls.n	8002754 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e046      	b.n	80027e2 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002754:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002758:	2b00      	cmp	r3, #0
 800275a:	da0b      	bge.n	8002774 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800275c:	78fb      	ldrb	r3, [r7, #3]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	015b      	lsls	r3, r3, #5
 8002764:	3328      	adds	r3, #40	; 0x28
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	4413      	add	r3, r2
 800276a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2201      	movs	r2, #1
 8002770:	705a      	strb	r2, [r3, #1]
 8002772:	e009      	b.n	8002788 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002774:	78fb      	ldrb	r3, [r7, #3]
 8002776:	015b      	lsls	r3, r3, #5
 8002778:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	4413      	add	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2201      	movs	r2, #1
 800278c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800278e:	78fb      	ldrb	r3, [r7, #3]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	b2da      	uxtb	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d101      	bne.n	80027a8 <HAL_PCD_EP_SetStall+0x72>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e01c      	b.n	80027e2 <HAL_PCD_EP_SetStall+0xac>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68f9      	ldr	r1, [r7, #12]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f002 fdd4 	bl	8005364 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027bc:	78fb      	ldrb	r3, [r7, #3]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d108      	bne.n	80027d8 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80027d0:	4619      	mov	r1, r3
 80027d2:	4610      	mov	r0, r2
 80027d4:	f002 fed2 	bl	800557c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b084      	sub	sp, #16
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	460b      	mov	r3, r1
 80027f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80027f6:	78fb      	ldrb	r3, [r7, #3]
 80027f8:	f003 020f 	and.w	r2, r3, #15
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	429a      	cmp	r2, r3
 8002802:	d901      	bls.n	8002808 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e03a      	b.n	800287e <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002808:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800280c:	2b00      	cmp	r3, #0
 800280e:	da0b      	bge.n	8002828 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002810:	78fb      	ldrb	r3, [r7, #3]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	015b      	lsls	r3, r3, #5
 8002818:	3328      	adds	r3, #40	; 0x28
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	4413      	add	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2201      	movs	r2, #1
 8002824:	705a      	strb	r2, [r3, #1]
 8002826:	e00b      	b.n	8002840 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002828:	78fb      	ldrb	r3, [r7, #3]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	015b      	lsls	r3, r3, #5
 8002830:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	4413      	add	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002846:	78fb      	ldrb	r3, [r7, #3]
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	b2da      	uxtb	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_PCD_EP_ClrStall+0x76>
 800285c:	2302      	movs	r3, #2
 800285e:	e00e      	b.n	800287e <HAL_PCD_EP_ClrStall+0x94>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68f9      	ldr	r1, [r7, #12]
 800286e:	4618      	mov	r0, r3
 8002870:	f002 fdba 	bl	80053e8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002888:	b590      	push	{r4, r7, lr}
 800288a:	b089      	sub	sp, #36	; 0x24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002890:	e282      	b.n	8002d98 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800289a:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800289c:	8afb      	ldrh	r3, [r7, #22]
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	f003 030f 	and.w	r3, r3, #15
 80028a4:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80028a6:	7d7b      	ldrb	r3, [r7, #21]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f040 8142 	bne.w	8002b32 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80028ae:	8afb      	ldrh	r3, [r7, #22]
 80028b0:	f003 0310 	and.w	r3, r3, #16
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d151      	bne.n	800295c <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	881b      	ldrh	r3, [r3, #0]
 80028be:	b29b      	uxth	r3, r3
 80028c0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80028c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c8:	b29c      	uxth	r4, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80028d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3328      	adds	r3, #40	; 0x28
 80028de:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	461a      	mov	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	4413      	add	r3, r2
 80028f4:	3302      	adds	r3, #2
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	4413      	add	r3, r2
 80028fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	695a      	ldr	r2, [r3, #20]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	441a      	add	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800291a:	2100      	movs	r1, #0
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f004 fc8b 	bl	8007238 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 8234 	beq.w	8002d98 <PCD_EP_ISR_Handler+0x510>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	2b00      	cmp	r3, #0
 8002936:	f040 822f 	bne.w	8002d98 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002940:	b2db      	uxtb	r3, r3
 8002942:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002946:	b2da      	uxtb	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	b292      	uxth	r2, r2
 800294e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800295a:	e21d      	b.n	8002d98 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002962:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800296c:	8a7b      	ldrh	r3, [r7, #18]
 800296e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002972:	2b00      	cmp	r3, #0
 8002974:	d033      	beq.n	80029de <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800297e:	b29b      	uxth	r3, r3
 8002980:	461a      	mov	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	4413      	add	r3, r2
 800298a:	3306      	adds	r3, #6
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6812      	ldr	r2, [r2, #0]
 8002992:	4413      	add	r3, r2
 8002994:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6818      	ldr	r0, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	f002 fe30 	bl	800561a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	881b      	ldrh	r3, [r3, #0]
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80029c6:	4013      	ands	r3, r2
 80029c8:	b29c      	uxth	r4, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80029d2:	b292      	uxth	r2, r2
 80029d4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f004 fc04 	bl	80071e4 <HAL_PCD_SetupStageCallback>
 80029dc:	e1dc      	b.n	8002d98 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80029de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f280 81d8 	bge.w	8002d98 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80029f4:	4013      	ands	r3, r2
 80029f6:	b29c      	uxth	r4, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002a00:	b292      	uxth	r2, r2
 8002a02:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	461a      	mov	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	4413      	add	r3, r2
 8002a18:	3306      	adds	r3, #6
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6812      	ldr	r2, [r2, #0]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a26:	881b      	ldrh	r3, [r3, #0]
 8002a28:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d019      	beq.n	8002a6c <PCD_EP_ISR_Handler+0x1e4>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d015      	beq.n	8002a6c <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6818      	ldr	r0, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6959      	ldr	r1, [r3, #20]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	f002 fde2 	bl	800561a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	695a      	ldr	r2, [r3, #20]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	441a      	add	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002a64:	2100      	movs	r1, #0
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f004 fbce 	bl	8007208 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	461c      	mov	r4, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	441c      	add	r4, r3
 8002a7e:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8002a82:	461c      	mov	r4, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10e      	bne.n	8002aaa <PCD_EP_ISR_Handler+0x222>
 8002a8c:	8823      	ldrh	r3, [r4, #0]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	8023      	strh	r3, [r4, #0]
 8002a98:	8823      	ldrh	r3, [r4, #0]
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	8023      	strh	r3, [r4, #0]
 8002aa8:	e02d      	b.n	8002b06 <PCD_EP_ISR_Handler+0x27e>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	2b3e      	cmp	r3, #62	; 0x3e
 8002ab0:	d812      	bhi.n	8002ad8 <PCD_EP_ISR_Handler+0x250>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	085b      	lsrs	r3, r3, #1
 8002ab8:	61bb      	str	r3, [r7, #24]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d002      	beq.n	8002acc <PCD_EP_ISR_Handler+0x244>
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	61bb      	str	r3, [r7, #24]
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	029b      	lsls	r3, r3, #10
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	8023      	strh	r3, [r4, #0]
 8002ad6:	e016      	b.n	8002b06 <PCD_EP_ISR_Handler+0x27e>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	095b      	lsrs	r3, r3, #5
 8002ade:	61bb      	str	r3, [r7, #24]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	f003 031f 	and.w	r3, r3, #31
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d102      	bne.n	8002af2 <PCD_EP_ISR_Handler+0x26a>
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	61bb      	str	r3, [r7, #24]
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	029b      	lsls	r3, r3, #10
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002afe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b16:	b29c      	uxth	r4, r3
 8002b18:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002b1c:	b29c      	uxth	r4, r3
 8002b1e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002b22:	b29c      	uxth	r4, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	4ba2      	ldr	r3, [pc, #648]	; (8002db4 <PCD_EP_ISR_Handler+0x52c>)
 8002b2a:	4323      	orrs	r3, r4
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	8013      	strh	r3, [r2, #0]
 8002b30:	e132      	b.n	8002d98 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	461a      	mov	r2, r3
 8002b38:	7d7b      	ldrb	r3, [r7, #21]
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002b42:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f280 80d1 	bge.w	8002cee <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	461a      	mov	r2, r3
 8002b52:	7d7b      	ldrb	r3, [r7, #21]
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	881b      	ldrh	r3, [r3, #0]
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002b60:	4013      	ands	r3, r2
 8002b62:	b29c      	uxth	r4, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	7d7b      	ldrb	r3, [r7, #21]
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002b74:	b292      	uxth	r2, r2
 8002b76:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002b78:	7d7b      	ldrb	r3, [r7, #21]
 8002b7a:	015b      	lsls	r3, r3, #5
 8002b7c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	4413      	add	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	7b1b      	ldrb	r3, [r3, #12]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d121      	bne.n	8002bd2 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	461a      	mov	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3306      	adds	r3, #6
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	4413      	add	r3, r2
 8002bac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bb6:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8002bb8:	8bfb      	ldrh	r3, [r7, #30]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d072      	beq.n	8002ca4 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6818      	ldr	r0, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6959      	ldr	r1, [r3, #20]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	88da      	ldrh	r2, [r3, #6]
 8002bca:	8bfb      	ldrh	r3, [r7, #30]
 8002bcc:	f002 fd25 	bl	800561a <USB_ReadPMA>
 8002bd0:	e068      	b.n	8002ca4 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	881b      	ldrh	r3, [r3, #0]
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d021      	beq.n	8002c30 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	4413      	add	r3, r2
 8002c00:	3302      	adds	r3, #2
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6812      	ldr	r2, [r2, #0]
 8002c08:	4413      	add	r3, r2
 8002c0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c0e:	881b      	ldrh	r3, [r3, #0]
 8002c10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c14:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002c16:	8bfb      	ldrh	r3, [r7, #30]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d02a      	beq.n	8002c72 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6818      	ldr	r0, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6959      	ldr	r1, [r3, #20]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	891a      	ldrh	r2, [r3, #8]
 8002c28:	8bfb      	ldrh	r3, [r7, #30]
 8002c2a:	f002 fcf6 	bl	800561a <USB_ReadPMA>
 8002c2e:	e020      	b.n	8002c72 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	4413      	add	r3, r2
 8002c44:	3306      	adds	r3, #6
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6812      	ldr	r2, [r2, #0]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c52:	881b      	ldrh	r3, [r3, #0]
 8002c54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c58:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002c5a:	8bfb      	ldrh	r3, [r7, #30]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d008      	beq.n	8002c72 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6818      	ldr	r0, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6959      	ldr	r1, [r3, #20]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	895a      	ldrh	r2, [r3, #10]
 8002c6c:	8bfb      	ldrh	r3, [r7, #30]
 8002c6e:	f002 fcd4 	bl	800561a <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	881b      	ldrh	r3, [r3, #0]
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c8c:	b29c      	uxth	r4, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	441a      	add	r2, r3
 8002c9c:	4b46      	ldr	r3, [pc, #280]	; (8002db8 <PCD_EP_ISR_Handler+0x530>)
 8002c9e:	4323      	orrs	r3, r4
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	69da      	ldr	r2, [r3, #28]
 8002ca8:	8bfb      	ldrh	r3, [r7, #30]
 8002caa:	441a      	add	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	695a      	ldr	r2, [r3, #20]
 8002cb4:	8bfb      	ldrh	r3, [r7, #30]
 8002cb6:	441a      	add	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d004      	beq.n	8002cce <PCD_EP_ISR_Handler+0x446>
 8002cc4:	8bfa      	ldrh	r2, [r7, #30]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d206      	bcs.n	8002cdc <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f004 fa97 	bl	8007208 <HAL_PCD_DataOutStageCallback>
 8002cda:	e008      	b.n	8002cee <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	7819      	ldrb	r1, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	695a      	ldr	r2, [r3, #20]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7ff fc9d 	bl	8002628 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002cee:	8a7b      	ldrh	r3, [r7, #18]
 8002cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d04f      	beq.n	8002d98 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8002cf8:	7d7b      	ldrb	r3, [r7, #21]
 8002cfa:	015b      	lsls	r3, r3, #5
 8002cfc:	3328      	adds	r3, #40	; 0x28
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	4413      	add	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	7d7b      	ldrb	r3, [r7, #21]
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4413      	add	r3, r2
 8002d10:	881b      	ldrh	r3, [r3, #0]
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d1c:	b29c      	uxth	r4, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	461a      	mov	r2, r3
 8002d24:	7d7b      	ldrb	r3, [r7, #21]
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	441a      	add	r2, r3
 8002d2a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	461a      	mov	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4413      	add	r3, r2
 8002d4a:	3302      	adds	r3, #2
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6812      	ldr	r2, [r2, #0]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	695a      	ldr	r2, [r3, #20]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	441a      	add	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d106      	bne.n	8002d86 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f004 fa5a 	bl	8007238 <HAL_PCD_DataInStageCallback>
 8002d84:	e008      	b.n	8002d98 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	7819      	ldrb	r1, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	695a      	ldr	r2, [r3, #20]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff fc96 	bl	80026c4 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	b21b      	sxth	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f6ff ad74 	blt.w	8002892 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3724      	adds	r7, #36	; 0x24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd90      	pop	{r4, r7, pc}
 8002db4:	ffff8080 	.word	0xffff8080
 8002db8:	ffff80c0 	.word	0xffff80c0

08002dbc <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	607b      	str	r3, [r7, #4]
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	817b      	strh	r3, [r7, #10]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002dce:	897b      	ldrh	r3, [r7, #10]
 8002dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d008      	beq.n	8002dec <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dda:	897b      	ldrh	r3, [r7, #10]
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	015b      	lsls	r3, r3, #5
 8002de2:	3328      	adds	r3, #40	; 0x28
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	4413      	add	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	e006      	b.n	8002dfa <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002dec:	897b      	ldrh	r3, [r7, #10]
 8002dee:	015b      	lsls	r3, r3, #5
 8002df0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	4413      	add	r3, r2
 8002df8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002dfa:	893b      	ldrh	r3, [r7, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d107      	bne.n	8002e10 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	2200      	movs	r2, #0
 8002e04:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	80da      	strh	r2, [r3, #6]
 8002e0e:	e00b      	b.n	8002e28 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	2201      	movs	r2, #1
 8002e14:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	0c1b      	lsrs	r3, r3, #16
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	371c      	adds	r7, #28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr

08002e34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e26c      	b.n	8003320 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 8087 	beq.w	8002f62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e54:	4b92      	ldr	r3, [pc, #584]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 030c 	and.w	r3, r3, #12
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d00c      	beq.n	8002e7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e60:	4b8f      	ldr	r3, [pc, #572]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f003 030c 	and.w	r3, r3, #12
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d112      	bne.n	8002e92 <HAL_RCC_OscConfig+0x5e>
 8002e6c:	4b8c      	ldr	r3, [pc, #560]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e78:	d10b      	bne.n	8002e92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e7a:	4b89      	ldr	r3, [pc, #548]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d06c      	beq.n	8002f60 <HAL_RCC_OscConfig+0x12c>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d168      	bne.n	8002f60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e246      	b.n	8003320 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e9a:	d106      	bne.n	8002eaa <HAL_RCC_OscConfig+0x76>
 8002e9c:	4b80      	ldr	r3, [pc, #512]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a7f      	ldr	r2, [pc, #508]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea6:	6013      	str	r3, [r2, #0]
 8002ea8:	e02e      	b.n	8002f08 <HAL_RCC_OscConfig+0xd4>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10c      	bne.n	8002ecc <HAL_RCC_OscConfig+0x98>
 8002eb2:	4b7b      	ldr	r3, [pc, #492]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a7a      	ldr	r2, [pc, #488]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	4b78      	ldr	r3, [pc, #480]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a77      	ldr	r2, [pc, #476]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002ec4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	e01d      	b.n	8002f08 <HAL_RCC_OscConfig+0xd4>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_RCC_OscConfig+0xbc>
 8002ed6:	4b72      	ldr	r3, [pc, #456]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a71      	ldr	r2, [pc, #452]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	4b6f      	ldr	r3, [pc, #444]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a6e      	ldr	r2, [pc, #440]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	e00b      	b.n	8002f08 <HAL_RCC_OscConfig+0xd4>
 8002ef0:	4b6b      	ldr	r3, [pc, #428]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a6a      	ldr	r2, [pc, #424]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002efa:	6013      	str	r3, [r2, #0]
 8002efc:	4b68      	ldr	r3, [pc, #416]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a67      	ldr	r2, [pc, #412]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d013      	beq.n	8002f38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f10:	f7fe fa54 	bl	80013bc <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f18:	f7fe fa50 	bl	80013bc <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b64      	cmp	r3, #100	; 0x64
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e1fa      	b.n	8003320 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2a:	4b5d      	ldr	r3, [pc, #372]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0f0      	beq.n	8002f18 <HAL_RCC_OscConfig+0xe4>
 8002f36:	e014      	b.n	8002f62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f38:	f7fe fa40 	bl	80013bc <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f40:	f7fe fa3c 	bl	80013bc <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b64      	cmp	r3, #100	; 0x64
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e1e6      	b.n	8003320 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f52:	4b53      	ldr	r3, [pc, #332]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f0      	bne.n	8002f40 <HAL_RCC_OscConfig+0x10c>
 8002f5e:	e000      	b.n	8002f62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d063      	beq.n	8003036 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f6e:	4b4c      	ldr	r3, [pc, #304]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f003 030c 	and.w	r3, r3, #12
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00b      	beq.n	8002f92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f7a:	4b49      	ldr	r3, [pc, #292]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f003 030c 	and.w	r3, r3, #12
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d11c      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x18c>
 8002f86:	4b46      	ldr	r3, [pc, #280]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d116      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f92:	4b43      	ldr	r3, [pc, #268]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d005      	beq.n	8002faa <HAL_RCC_OscConfig+0x176>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d001      	beq.n	8002faa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e1ba      	b.n	8003320 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002faa:	4b3d      	ldr	r3, [pc, #244]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	4939      	ldr	r1, [pc, #228]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fbe:	e03a      	b.n	8003036 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d020      	beq.n	800300a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fc8:	4b36      	ldr	r3, [pc, #216]	; (80030a4 <HAL_RCC_OscConfig+0x270>)
 8002fca:	2201      	movs	r2, #1
 8002fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fce:	f7fe f9f5 	bl	80013bc <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fd6:	f7fe f9f1 	bl	80013bc <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e19b      	b.n	8003320 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe8:	4b2d      	ldr	r3, [pc, #180]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0f0      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff4:	4b2a      	ldr	r3, [pc, #168]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	4927      	ldr	r1, [pc, #156]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 8003004:	4313      	orrs	r3, r2
 8003006:	600b      	str	r3, [r1, #0]
 8003008:	e015      	b.n	8003036 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800300a:	4b26      	ldr	r3, [pc, #152]	; (80030a4 <HAL_RCC_OscConfig+0x270>)
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003010:	f7fe f9d4 	bl	80013bc <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003018:	f7fe f9d0 	bl	80013bc <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e17a      	b.n	8003320 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800302a:	4b1d      	ldr	r3, [pc, #116]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f0      	bne.n	8003018 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d03a      	beq.n	80030b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d019      	beq.n	800307e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800304a:	4b17      	ldr	r3, [pc, #92]	; (80030a8 <HAL_RCC_OscConfig+0x274>)
 800304c:	2201      	movs	r2, #1
 800304e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003050:	f7fe f9b4 	bl	80013bc <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003058:	f7fe f9b0 	bl	80013bc <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e15a      	b.n	8003320 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800306a:	4b0d      	ldr	r3, [pc, #52]	; (80030a0 <HAL_RCC_OscConfig+0x26c>)
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0f0      	beq.n	8003058 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003076:	2001      	movs	r0, #1
 8003078:	f000 fada 	bl	8003630 <RCC_Delay>
 800307c:	e01c      	b.n	80030b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800307e:	4b0a      	ldr	r3, [pc, #40]	; (80030a8 <HAL_RCC_OscConfig+0x274>)
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003084:	f7fe f99a 	bl	80013bc <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800308a:	e00f      	b.n	80030ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800308c:	f7fe f996 	bl	80013bc <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d908      	bls.n	80030ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e140      	b.n	8003320 <HAL_RCC_OscConfig+0x4ec>
 800309e:	bf00      	nop
 80030a0:	40021000 	.word	0x40021000
 80030a4:	42420000 	.word	0x42420000
 80030a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ac:	4b9e      	ldr	r3, [pc, #632]	; (8003328 <HAL_RCC_OscConfig+0x4f4>)
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1e9      	bne.n	800308c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 80a6 	beq.w	8003212 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030c6:	2300      	movs	r3, #0
 80030c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ca:	4b97      	ldr	r3, [pc, #604]	; (8003328 <HAL_RCC_OscConfig+0x4f4>)
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10d      	bne.n	80030f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d6:	4b94      	ldr	r3, [pc, #592]	; (8003328 <HAL_RCC_OscConfig+0x4f4>)
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	4a93      	ldr	r2, [pc, #588]	; (8003328 <HAL_RCC_OscConfig+0x4f4>)
 80030dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e0:	61d3      	str	r3, [r2, #28]
 80030e2:	4b91      	ldr	r3, [pc, #580]	; (8003328 <HAL_RCC_OscConfig+0x4f4>)
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ea:	60bb      	str	r3, [r7, #8]
 80030ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ee:	2301      	movs	r3, #1
 80030f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f2:	4b8e      	ldr	r3, [pc, #568]	; (800332c <HAL_RCC_OscConfig+0x4f8>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d118      	bne.n	8003130 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030fe:	4b8b      	ldr	r3, [pc, #556]	; (800332c <HAL_RCC_OscConfig+0x4f8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a8a      	ldr	r2, [pc, #552]	; (800332c <HAL_RCC_OscConfig+0x4f8>)
 8003104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800310a:	f7fe f957 	bl	80013bc <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003110:	e008      	b.n	8003124 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003112:	f7fe f953 	bl	80013bc <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b64      	cmp	r3, #100	; 0x64
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e0fd      	b.n	8003320 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003124:	4b81      	ldr	r3, [pc, #516]	; (800332c <HAL_RCC_OscConfig+0x4f8>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0f0      	beq.n	8003112 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d106      	bne.n	8003146 <HAL_RCC_OscConfig+0x312>
 8003138:	4b7b      	ldr	r3, [pc, #492]	; (8003328 <HAL_RCC_OscConfig+0x4f4>)
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	4a7a      	ldr	r2, [pc, #488]	; (8003328 <HAL_RCC_OscConfig+0x4f4>)
 800313e:	f043 0301 	orr.w	r3, r3, #1
 8003142:	6213      	str	r3, [r2, #32]
 8003144:	e02d      	b.n	80031a2 <HAL_RCC_OscConfig+0x36e>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10c      	bne.n	8003168 <HAL_RCC_OscConfig+0x334>
 800314e:	4b76      	ldr	r3, [pc, #472]	; (8003328 <HAL_RCC_OscConfig+0x4f4>)
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	4a75      	ldr	r2, [pc, #468]	; (8003328 <HAL_RCC_OscConfig+0x4f4>)
 8003154:	f023 0301 	bic.w	r3, r3, #1
 8003158:	6213      	str	r3, [r2, #32]
 800315a:	4b73      	ldr	r3, [pc, #460]	; (8003328 <HAL_RCC_OscConfig+0x4f4>)
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	4a72      	ldr	r2, [pc, #456]	; (8003328 <HAL_RCC_OscConfig+0x4f4>)
 8003160:	f023 0304 	bic.w	r3, r3, #4
 8003164:	6213      	str	r3, [r2, #32]
 8003166:	e01c      	b.n	80031a2 <HAL_RCC_OscConfig+0x36e>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	2b05      	cmp	r3, #5
 800316e:	d10c      	bne.n	800318a <HAL_RCC_OscConfig+0x356>
 8003170:	4b6d      	ldr	r3, [pc, #436]	; (8003328 <HAL_RCC_OscConfig+0x4f4>)
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	4a6c      	ldr	r2, [pc, #432]	; (8003328 <HAL_RCC_OscConfig+0x4f4>)
 8003176:	f043 0304 	orr.w	r3, r3, #4
 800317a:	6213      	str	r3, [r2, #32]
 800317c:	4b6a      	ldr	r3, [pc, #424]	; (8003328 <HAL_RCC_OscConfig+0x4f4>)
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	4a69      	ldr	r2, [pc, #420]	; (8003328 <HAL_RCC_OscConfig+0x4f4>)
 8003182:	f043 0301 	orr.w	r3, r3, #1
 8003186:	6213      	str	r3, [r2, #32]
 8003188:	e00b      	b.n	80031a2 <HAL_RCC_OscConfig+0x36e>
 800318a:	4b67      	ldr	r3, [pc, #412]	; (8003328 <HAL_RCC_OscConfig+0x4f4>)
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	4a66      	ldr	r2, [pc, #408]	; (8003328 <HAL_RCC_OscConfig+0x4f4>)
 8003190:	f023 0301 	bic.w	r3, r3, #1
 8003194:	6213      	str	r3, [r2, #32]
 8003196:	4b64      	ldr	r3, [pc, #400]	; (8003328 <HAL_RCC_OscConfig+0x4f4>)
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	4a63      	ldr	r2, [pc, #396]	; (8003328 <HAL_RCC_OscConfig+0x4f4>)
 800319c:	f023 0304 	bic.w	r3, r3, #4
 80031a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d015      	beq.n	80031d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031aa:	f7fe f907 	bl	80013bc <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b0:	e00a      	b.n	80031c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b2:	f7fe f903 	bl	80013bc <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e0ab      	b.n	8003320 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c8:	4b57      	ldr	r3, [pc, #348]	; (8003328 <HAL_RCC_OscConfig+0x4f4>)
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0ee      	beq.n	80031b2 <HAL_RCC_OscConfig+0x37e>
 80031d4:	e014      	b.n	8003200 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d6:	f7fe f8f1 	bl	80013bc <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031dc:	e00a      	b.n	80031f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031de:	f7fe f8ed 	bl	80013bc <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e095      	b.n	8003320 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f4:	4b4c      	ldr	r3, [pc, #304]	; (8003328 <HAL_RCC_OscConfig+0x4f4>)
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1ee      	bne.n	80031de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003200:	7dfb      	ldrb	r3, [r7, #23]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d105      	bne.n	8003212 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003206:	4b48      	ldr	r3, [pc, #288]	; (8003328 <HAL_RCC_OscConfig+0x4f4>)
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	4a47      	ldr	r2, [pc, #284]	; (8003328 <HAL_RCC_OscConfig+0x4f4>)
 800320c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003210:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 8081 	beq.w	800331e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800321c:	4b42      	ldr	r3, [pc, #264]	; (8003328 <HAL_RCC_OscConfig+0x4f4>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 030c 	and.w	r3, r3, #12
 8003224:	2b08      	cmp	r3, #8
 8003226:	d061      	beq.n	80032ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	2b02      	cmp	r3, #2
 800322e:	d146      	bne.n	80032be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003230:	4b3f      	ldr	r3, [pc, #252]	; (8003330 <HAL_RCC_OscConfig+0x4fc>)
 8003232:	2200      	movs	r2, #0
 8003234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003236:	f7fe f8c1 	bl	80013bc <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323e:	f7fe f8bd 	bl	80013bc <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e067      	b.n	8003320 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003250:	4b35      	ldr	r3, [pc, #212]	; (8003328 <HAL_RCC_OscConfig+0x4f4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1f0      	bne.n	800323e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003264:	d108      	bne.n	8003278 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003266:	4b30      	ldr	r3, [pc, #192]	; (8003328 <HAL_RCC_OscConfig+0x4f4>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	492d      	ldr	r1, [pc, #180]	; (8003328 <HAL_RCC_OscConfig+0x4f4>)
 8003274:	4313      	orrs	r3, r2
 8003276:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003278:	4b2b      	ldr	r3, [pc, #172]	; (8003328 <HAL_RCC_OscConfig+0x4f4>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a19      	ldr	r1, [r3, #32]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	430b      	orrs	r3, r1
 800328a:	4927      	ldr	r1, [pc, #156]	; (8003328 <HAL_RCC_OscConfig+0x4f4>)
 800328c:	4313      	orrs	r3, r2
 800328e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003290:	4b27      	ldr	r3, [pc, #156]	; (8003330 <HAL_RCC_OscConfig+0x4fc>)
 8003292:	2201      	movs	r2, #1
 8003294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003296:	f7fe f891 	bl	80013bc <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800329e:	f7fe f88d 	bl	80013bc <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e037      	b.n	8003320 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032b0:	4b1d      	ldr	r3, [pc, #116]	; (8003328 <HAL_RCC_OscConfig+0x4f4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0f0      	beq.n	800329e <HAL_RCC_OscConfig+0x46a>
 80032bc:	e02f      	b.n	800331e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032be:	4b1c      	ldr	r3, [pc, #112]	; (8003330 <HAL_RCC_OscConfig+0x4fc>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c4:	f7fe f87a 	bl	80013bc <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032cc:	f7fe f876 	bl	80013bc <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e020      	b.n	8003320 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032de:	4b12      	ldr	r3, [pc, #72]	; (8003328 <HAL_RCC_OscConfig+0x4f4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x498>
 80032ea:	e018      	b.n	800331e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d101      	bne.n	80032f8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e013      	b.n	8003320 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032f8:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <HAL_RCC_OscConfig+0x4f4>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	429a      	cmp	r2, r3
 800330a:	d106      	bne.n	800331a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003316:	429a      	cmp	r2, r3
 8003318:	d001      	beq.n	800331e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3718      	adds	r7, #24
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40021000 	.word	0x40021000
 800332c:	40007000 	.word	0x40007000
 8003330:	42420060 	.word	0x42420060

08003334 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e0d0      	b.n	80034ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003348:	4b6a      	ldr	r3, [pc, #424]	; (80034f4 <HAL_RCC_ClockConfig+0x1c0>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d910      	bls.n	8003378 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003356:	4b67      	ldr	r3, [pc, #412]	; (80034f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f023 0207 	bic.w	r2, r3, #7
 800335e:	4965      	ldr	r1, [pc, #404]	; (80034f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	4313      	orrs	r3, r2
 8003364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003366:	4b63      	ldr	r3, [pc, #396]	; (80034f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	429a      	cmp	r2, r3
 8003372:	d001      	beq.n	8003378 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e0b8      	b.n	80034ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d020      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003390:	4b59      	ldr	r3, [pc, #356]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	4a58      	ldr	r2, [pc, #352]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003396:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800339a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033a8:	4b53      	ldr	r3, [pc, #332]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	4a52      	ldr	r2, [pc, #328]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 80033ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80033b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033b4:	4b50      	ldr	r3, [pc, #320]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	494d      	ldr	r1, [pc, #308]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d040      	beq.n	8003454 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d107      	bne.n	80033ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033da:	4b47      	ldr	r3, [pc, #284]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d115      	bne.n	8003412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e07f      	b.n	80034ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d107      	bne.n	8003402 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f2:	4b41      	ldr	r3, [pc, #260]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d109      	bne.n	8003412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e073      	b.n	80034ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003402:	4b3d      	ldr	r3, [pc, #244]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e06b      	b.n	80034ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003412:	4b39      	ldr	r3, [pc, #228]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f023 0203 	bic.w	r2, r3, #3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	4936      	ldr	r1, [pc, #216]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003420:	4313      	orrs	r3, r2
 8003422:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003424:	f7fd ffca 	bl	80013bc <HAL_GetTick>
 8003428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800342a:	e00a      	b.n	8003442 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800342c:	f7fd ffc6 	bl	80013bc <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	f241 3288 	movw	r2, #5000	; 0x1388
 800343a:	4293      	cmp	r3, r2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e053      	b.n	80034ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003442:	4b2d      	ldr	r3, [pc, #180]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f003 020c 	and.w	r2, r3, #12
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	429a      	cmp	r2, r3
 8003452:	d1eb      	bne.n	800342c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003454:	4b27      	ldr	r3, [pc, #156]	; (80034f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	429a      	cmp	r2, r3
 8003460:	d210      	bcs.n	8003484 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003462:	4b24      	ldr	r3, [pc, #144]	; (80034f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f023 0207 	bic.w	r2, r3, #7
 800346a:	4922      	ldr	r1, [pc, #136]	; (80034f4 <HAL_RCC_ClockConfig+0x1c0>)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	4313      	orrs	r3, r2
 8003470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003472:	4b20      	ldr	r3, [pc, #128]	; (80034f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	429a      	cmp	r2, r3
 800347e:	d001      	beq.n	8003484 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e032      	b.n	80034ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b00      	cmp	r3, #0
 800348e:	d008      	beq.n	80034a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003490:	4b19      	ldr	r3, [pc, #100]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	4916      	ldr	r1, [pc, #88]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d009      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034ae:	4b12      	ldr	r3, [pc, #72]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	490e      	ldr	r1, [pc, #56]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034c2:	f000 f821 	bl	8003508 <HAL_RCC_GetSysClockFreq>
 80034c6:	4601      	mov	r1, r0
 80034c8:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <HAL_RCC_ClockConfig+0x1c4>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	091b      	lsrs	r3, r3, #4
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	4a0a      	ldr	r2, [pc, #40]	; (80034fc <HAL_RCC_ClockConfig+0x1c8>)
 80034d4:	5cd3      	ldrb	r3, [r2, r3]
 80034d6:	fa21 f303 	lsr.w	r3, r1, r3
 80034da:	4a09      	ldr	r2, [pc, #36]	; (8003500 <HAL_RCC_ClockConfig+0x1cc>)
 80034dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034de:	4b09      	ldr	r3, [pc, #36]	; (8003504 <HAL_RCC_ClockConfig+0x1d0>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fd ff28 	bl	8001338 <HAL_InitTick>

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40022000 	.word	0x40022000
 80034f8:	40021000 	.word	0x40021000
 80034fc:	08007790 	.word	0x08007790
 8003500:	2000000c 	.word	0x2000000c
 8003504:	20000010 	.word	0x20000010

08003508 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003508:	b490      	push	{r4, r7}
 800350a:	b08a      	sub	sp, #40	; 0x28
 800350c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800350e:	4b2a      	ldr	r3, [pc, #168]	; (80035b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003510:	1d3c      	adds	r4, r7, #4
 8003512:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003514:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003518:	4b28      	ldr	r3, [pc, #160]	; (80035bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800351e:	2300      	movs	r3, #0
 8003520:	61fb      	str	r3, [r7, #28]
 8003522:	2300      	movs	r3, #0
 8003524:	61bb      	str	r3, [r7, #24]
 8003526:	2300      	movs	r3, #0
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
 800352a:	2300      	movs	r3, #0
 800352c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800352e:	2300      	movs	r3, #0
 8003530:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003532:	4b23      	ldr	r3, [pc, #140]	; (80035c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f003 030c 	and.w	r3, r3, #12
 800353e:	2b04      	cmp	r3, #4
 8003540:	d002      	beq.n	8003548 <HAL_RCC_GetSysClockFreq+0x40>
 8003542:	2b08      	cmp	r3, #8
 8003544:	d003      	beq.n	800354e <HAL_RCC_GetSysClockFreq+0x46>
 8003546:	e02d      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003548:	4b1e      	ldr	r3, [pc, #120]	; (80035c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800354a:	623b      	str	r3, [r7, #32]
      break;
 800354c:	e02d      	b.n	80035aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	0c9b      	lsrs	r3, r3, #18
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800355a:	4413      	add	r3, r2
 800355c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003560:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d013      	beq.n	8003594 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800356c:	4b14      	ldr	r3, [pc, #80]	; (80035c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	0c5b      	lsrs	r3, r3, #17
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800357a:	4413      	add	r3, r2
 800357c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003580:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	4a0f      	ldr	r2, [pc, #60]	; (80035c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003586:	fb02 f203 	mul.w	r2, r2, r3
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
 8003592:	e004      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	4a0c      	ldr	r2, [pc, #48]	; (80035c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003598:	fb02 f303 	mul.w	r3, r2, r3
 800359c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	623b      	str	r3, [r7, #32]
      break;
 80035a2:	e002      	b.n	80035aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035a4:	4b07      	ldr	r3, [pc, #28]	; (80035c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035a6:	623b      	str	r3, [r7, #32]
      break;
 80035a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035aa:	6a3b      	ldr	r3, [r7, #32]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3728      	adds	r7, #40	; 0x28
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bc90      	pop	{r4, r7}
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	0800775c 	.word	0x0800775c
 80035bc:	0800776c 	.word	0x0800776c
 80035c0:	40021000 	.word	0x40021000
 80035c4:	007a1200 	.word	0x007a1200
 80035c8:	003d0900 	.word	0x003d0900

080035cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035d0:	4b02      	ldr	r3, [pc, #8]	; (80035dc <HAL_RCC_GetHCLKFreq+0x10>)
 80035d2:	681b      	ldr	r3, [r3, #0]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc80      	pop	{r7}
 80035da:	4770      	bx	lr
 80035dc:	2000000c 	.word	0x2000000c

080035e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035e4:	f7ff fff2 	bl	80035cc <HAL_RCC_GetHCLKFreq>
 80035e8:	4601      	mov	r1, r0
 80035ea:	4b05      	ldr	r3, [pc, #20]	; (8003600 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	0a1b      	lsrs	r3, r3, #8
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	4a03      	ldr	r2, [pc, #12]	; (8003604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035f6:	5cd3      	ldrb	r3, [r2, r3]
 80035f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40021000 	.word	0x40021000
 8003604:	080077a0 	.word	0x080077a0

08003608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800360c:	f7ff ffde 	bl	80035cc <HAL_RCC_GetHCLKFreq>
 8003610:	4601      	mov	r1, r0
 8003612:	4b05      	ldr	r3, [pc, #20]	; (8003628 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	0adb      	lsrs	r3, r3, #11
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	4a03      	ldr	r2, [pc, #12]	; (800362c <HAL_RCC_GetPCLK2Freq+0x24>)
 800361e:	5cd3      	ldrb	r3, [r2, r3]
 8003620:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003624:	4618      	mov	r0, r3
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40021000 	.word	0x40021000
 800362c:	080077a0 	.word	0x080077a0

08003630 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003638:	4b0a      	ldr	r3, [pc, #40]	; (8003664 <RCC_Delay+0x34>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a0a      	ldr	r2, [pc, #40]	; (8003668 <RCC_Delay+0x38>)
 800363e:	fba2 2303 	umull	r2, r3, r2, r3
 8003642:	0a5b      	lsrs	r3, r3, #9
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	fb02 f303 	mul.w	r3, r2, r3
 800364a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800364c:	bf00      	nop
  }
  while (Delay --);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	1e5a      	subs	r2, r3, #1
 8003652:	60fa      	str	r2, [r7, #12]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1f9      	bne.n	800364c <RCC_Delay+0x1c>
}
 8003658:	bf00      	nop
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	bc80      	pop	{r7}
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	2000000c 	.word	0x2000000c
 8003668:	10624dd3 	.word	0x10624dd3

0800366c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003674:	2300      	movs	r3, #0
 8003676:	613b      	str	r3, [r7, #16]
 8003678:	2300      	movs	r3, #0
 800367a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d07d      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003688:	2300      	movs	r3, #0
 800368a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800368c:	4b4f      	ldr	r3, [pc, #316]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10d      	bne.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003698:	4b4c      	ldr	r3, [pc, #304]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800369a:	69db      	ldr	r3, [r3, #28]
 800369c:	4a4b      	ldr	r2, [pc, #300]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800369e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a2:	61d3      	str	r3, [r2, #28]
 80036a4:	4b49      	ldr	r3, [pc, #292]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ac:	60bb      	str	r3, [r7, #8]
 80036ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036b0:	2301      	movs	r3, #1
 80036b2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b4:	4b46      	ldr	r3, [pc, #280]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d118      	bne.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036c0:	4b43      	ldr	r3, [pc, #268]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a42      	ldr	r2, [pc, #264]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036cc:	f7fd fe76 	bl	80013bc <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d2:	e008      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036d4:	f7fd fe72 	bl	80013bc <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b64      	cmp	r3, #100	; 0x64
 80036e0:	d901      	bls.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e06d      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e6:	4b3a      	ldr	r3, [pc, #232]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036f2:	4b36      	ldr	r3, [pc, #216]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036fa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d02e      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	429a      	cmp	r2, r3
 800370e:	d027      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003710:	4b2e      	ldr	r3, [pc, #184]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003718:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800371a:	4b2e      	ldr	r3, [pc, #184]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800371c:	2201      	movs	r2, #1
 800371e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003720:	4b2c      	ldr	r3, [pc, #176]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003722:	2200      	movs	r2, #0
 8003724:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003726:	4a29      	ldr	r2, [pc, #164]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d014      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003736:	f7fd fe41 	bl	80013bc <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800373c:	e00a      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800373e:	f7fd fe3d 	bl	80013bc <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	f241 3288 	movw	r2, #5000	; 0x1388
 800374c:	4293      	cmp	r3, r2
 800374e:	d901      	bls.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e036      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003754:	4b1d      	ldr	r3, [pc, #116]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0ee      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003760:	4b1a      	ldr	r3, [pc, #104]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	4917      	ldr	r1, [pc, #92]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800376e:	4313      	orrs	r3, r2
 8003770:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003772:	7dfb      	ldrb	r3, [r7, #23]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d105      	bne.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003778:	4b14      	ldr	r3, [pc, #80]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800377a:	69db      	ldr	r3, [r3, #28]
 800377c:	4a13      	ldr	r2, [pc, #76]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800377e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003782:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003790:	4b0e      	ldr	r3, [pc, #56]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	490b      	ldr	r1, [pc, #44]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0310 	and.w	r3, r3, #16
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d008      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037ae:	4b07      	ldr	r3, [pc, #28]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	4904      	ldr	r1, [pc, #16]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3718      	adds	r7, #24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40021000 	.word	0x40021000
 80037d0:	40007000 	.word	0x40007000
 80037d4:	42420440 	.word	0x42420440

080037d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e053      	b.n	8003892 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d106      	bne.n	800380a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7fd fbcf 	bl	8000fa8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2202      	movs	r2, #2
 800380e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003820:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	431a      	orrs	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	431a      	orrs	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003846:	431a      	orrs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	431a      	orrs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	ea42 0103 	orr.w	r1, r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	0c1a      	lsrs	r2, r3, #16
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f002 0204 	and.w	r2, r2, #4
 8003870:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	69da      	ldr	r2, [r3, #28]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003880:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b082      	sub	sp, #8
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e03f      	b.n	800392c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d106      	bne.n	80038c6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7fd fbbb 	bl	800103c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2224      	movs	r2, #36	; 0x24
 80038ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038dc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 fcb6 	bl	8004250 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	691a      	ldr	r2, [r3, #16]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038f2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	695a      	ldr	r2, [r3, #20]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003902:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68da      	ldr	r2, [r3, #12]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003912:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2220      	movs	r2, #32
 800391e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2220      	movs	r2, #32
 8003926:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b088      	sub	sp, #32
 8003938:	af02      	add	r7, sp, #8
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	603b      	str	r3, [r7, #0]
 8003940:	4613      	mov	r3, r2
 8003942:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003944:	2300      	movs	r3, #0
 8003946:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b20      	cmp	r3, #32
 8003952:	f040 8083 	bne.w	8003a5c <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <HAL_UART_Transmit+0x2e>
 800395c:	88fb      	ldrh	r3, [r7, #6]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e07b      	b.n	8003a5e <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800396c:	2b01      	cmp	r3, #1
 800396e:	d101      	bne.n	8003974 <HAL_UART_Transmit+0x40>
 8003970:	2302      	movs	r3, #2
 8003972:	e074      	b.n	8003a5e <HAL_UART_Transmit+0x12a>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2221      	movs	r2, #33	; 0x21
 8003986:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800398a:	f7fd fd17 	bl	80013bc <HAL_GetTick>
 800398e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	88fa      	ldrh	r2, [r7, #6]
 8003994:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	88fa      	ldrh	r2, [r7, #6]
 800399a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800399c:	e042      	b.n	8003a24 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	3b01      	subs	r3, #1
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b4:	d122      	bne.n	80039fc <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	2200      	movs	r2, #0
 80039be:	2180      	movs	r1, #128	; 0x80
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 fac7 	bl	8003f54 <UART_WaitOnFlagUntilTimeout>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e046      	b.n	8003a5e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	881b      	ldrh	r3, [r3, #0]
 80039d8:	461a      	mov	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039e2:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d103      	bne.n	80039f4 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	3302      	adds	r3, #2
 80039f0:	60bb      	str	r3, [r7, #8]
 80039f2:	e017      	b.n	8003a24 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	3301      	adds	r3, #1
 80039f8:	60bb      	str	r3, [r7, #8]
 80039fa:	e013      	b.n	8003a24 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	2200      	movs	r2, #0
 8003a04:	2180      	movs	r1, #128	; 0x80
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 faa4 	bl	8003f54 <UART_WaitOnFlagUntilTimeout>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e023      	b.n	8003a5e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	1c5a      	adds	r2, r3, #1
 8003a1a:	60ba      	str	r2, [r7, #8]
 8003a1c:	781a      	ldrb	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1b7      	bne.n	800399e <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	2200      	movs	r2, #0
 8003a36:	2140      	movs	r1, #64	; 0x40
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f000 fa8b 	bl	8003f54 <UART_WaitOnFlagUntilTimeout>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e00a      	b.n	8003a5e <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	e000      	b.n	8003a5e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003a5c:	2302      	movs	r3, #2
  }
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	4613      	mov	r3, r2
 8003a74:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b20      	cmp	r3, #32
 8003a80:	d166      	bne.n	8003b50 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d002      	beq.n	8003a8e <HAL_UART_Receive_DMA+0x26>
 8003a88:	88fb      	ldrh	r3, [r7, #6]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e05f      	b.n	8003b52 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_UART_Receive_DMA+0x38>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e058      	b.n	8003b52 <HAL_UART_Receive_DMA+0xea>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	88fa      	ldrh	r2, [r7, #6]
 8003ab2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2222      	movs	r2, #34	; 0x22
 8003abe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac6:	4a25      	ldr	r2, [pc, #148]	; (8003b5c <HAL_UART_Receive_DMA+0xf4>)
 8003ac8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ace:	4a24      	ldr	r2, [pc, #144]	; (8003b60 <HAL_UART_Receive_DMA+0xf8>)
 8003ad0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad6:	4a23      	ldr	r2, [pc, #140]	; (8003b64 <HAL_UART_Receive_DMA+0xfc>)
 8003ad8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ade:	2200      	movs	r2, #0
 8003ae0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8003ae2:	f107 0308 	add.w	r3, r7, #8
 8003ae6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	3304      	adds	r3, #4
 8003af2:	4619      	mov	r1, r3
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	88fb      	ldrh	r3, [r7, #6]
 8003afa:	f7fd fdf3 	bl	80016e4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003afe:	2300      	movs	r3, #0
 8003b00:	613b      	str	r3, [r7, #16]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	613b      	str	r3, [r7, #16]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	613b      	str	r3, [r7, #16]
 8003b12:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68da      	ldr	r2, [r3, #12]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b2a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695a      	ldr	r2, [r3, #20]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0201 	orr.w	r2, r2, #1
 8003b3a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695a      	ldr	r2, [r3, #20]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b4a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	e000      	b.n	8003b52 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003b50:	2302      	movs	r3, #2
  }
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3718      	adds	r7, #24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	08003e3d 	.word	0x08003e3d
 8003b60:	08003ea5 	.word	0x08003ea5
 8003b64:	08003ec1 	.word	0x08003ec1

08003b68 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	bf14      	ite	ne
 8003b82:	2301      	movne	r3, #1
 8003b84:	2300      	moveq	r3, #0
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b21      	cmp	r3, #33	; 0x21
 8003b94:	d116      	bne.n	8003bc4 <HAL_UART_DMAStop+0x5c>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d013      	beq.n	8003bc4 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	695a      	ldr	r2, [r3, #20]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003baa:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d004      	beq.n	8003bbe <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7fd fdf2 	bl	80017a2 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 fa12 	bl	8003fe8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	bf14      	ite	ne
 8003bd2:	2301      	movne	r3, #1
 8003bd4:	2300      	moveq	r3, #0
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b22      	cmp	r3, #34	; 0x22
 8003be4:	d116      	bne.n	8003c14 <HAL_UART_DMAStop+0xac>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d013      	beq.n	8003c14 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	695a      	ldr	r2, [r3, #20]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bfa:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d004      	beq.n	8003c0e <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fd fdca 	bl	80017a2 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f9ff 	bl	8004012 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
	...

08003c20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	f003 030f 	and.w	r3, r3, #15
 8003c4e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10d      	bne.n	8003c72 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	f003 0320 	and.w	r3, r3, #32
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <HAL_UART_IRQHandler+0x52>
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	f003 0320 	and.w	r3, r3, #32
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 fa6f 	bl	800414e <UART_Receive_IT>
      return;
 8003c70:	e0cc      	b.n	8003e0c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 80ab 	beq.w	8003dd0 <HAL_UART_IRQHandler+0x1b0>
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d105      	bne.n	8003c90 <HAL_UART_IRQHandler+0x70>
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 80a0 	beq.w	8003dd0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00a      	beq.n	8003cb0 <HAL_UART_IRQHandler+0x90>
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d005      	beq.n	8003cb0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca8:	f043 0201 	orr.w	r2, r3, #1
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	f003 0304 	and.w	r3, r3, #4
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00a      	beq.n	8003cd0 <HAL_UART_IRQHandler+0xb0>
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc8:	f043 0202 	orr.w	r2, r3, #2
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00a      	beq.n	8003cf0 <HAL_UART_IRQHandler+0xd0>
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d005      	beq.n	8003cf0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce8:	f043 0204 	orr.w	r2, r3, #4
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <HAL_UART_IRQHandler+0xf0>
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d08:	f043 0208 	orr.w	r2, r3, #8
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d078      	beq.n	8003e0a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	f003 0320 	and.w	r3, r3, #32
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d007      	beq.n	8003d32 <HAL_UART_IRQHandler+0x112>
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	f003 0320 	and.w	r3, r3, #32
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d002      	beq.n	8003d32 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 fa0e 	bl	800414e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	bf14      	ite	ne
 8003d40:	2301      	movne	r3, #1
 8003d42:	2300      	moveq	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4c:	f003 0308 	and.w	r3, r3, #8
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d102      	bne.n	8003d5a <HAL_UART_IRQHandler+0x13a>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d031      	beq.n	8003dbe <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f959 	bl	8004012 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d023      	beq.n	8003db6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	695a      	ldr	r2, [r3, #20]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d7c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d013      	beq.n	8003dae <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8a:	4a22      	ldr	r2, [pc, #136]	; (8003e14 <HAL_UART_IRQHandler+0x1f4>)
 8003d8c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fd fd40 	bl	8001818 <HAL_DMA_Abort_IT>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d016      	beq.n	8003dcc <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003da8:	4610      	mov	r0, r2
 8003daa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dac:	e00e      	b.n	8003dcc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f83b 	bl	8003e2a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db4:	e00a      	b.n	8003dcc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f837 	bl	8003e2a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dbc:	e006      	b.n	8003dcc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f833 	bl	8003e2a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003dca:	e01e      	b.n	8003e0a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dcc:	bf00      	nop
    return;
 8003dce:	e01c      	b.n	8003e0a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d008      	beq.n	8003dec <HAL_UART_IRQHandler+0x1cc>
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f945 	bl	8004074 <UART_Transmit_IT>
    return;
 8003dea:	e00f      	b.n	8003e0c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00a      	beq.n	8003e0c <HAL_UART_IRQHandler+0x1ec>
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d005      	beq.n	8003e0c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 f98c 	bl	800411e <UART_EndTransmit_IT>
    return;
 8003e06:	bf00      	nop
 8003e08:	e000      	b.n	8003e0c <HAL_UART_IRQHandler+0x1ec>
    return;
 8003e0a:	bf00      	nop
  }
}
 8003e0c:	3720      	adds	r7, #32
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	0800404d 	.word	0x0800404d

08003e18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bc80      	pop	{r7}
 8003e28:	4770      	bx	lr

08003e2a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr

08003e3c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0320 	and.w	r3, r3, #32
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d11e      	bne.n	8003e96 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e6c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695a      	ldr	r2, [r3, #20]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0201 	bic.w	r2, r2, #1
 8003e7c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	695a      	ldr	r2, [r3, #20]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e8c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2220      	movs	r2, #32
 8003e92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f7fc fea6 	bl	8000be8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e9c:	bf00      	nop
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f7fc fea2 	bl	8000bfc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003eb8:	bf00      	nop
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	bf14      	ite	ne
 8003ee0:	2301      	movne	r3, #1
 8003ee2:	2300      	moveq	r3, #0
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b21      	cmp	r3, #33	; 0x21
 8003ef2:	d108      	bne.n	8003f06 <UART_DMAError+0x46>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d005      	beq.n	8003f06 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2200      	movs	r2, #0
 8003efe:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003f00:	68b8      	ldr	r0, [r7, #8]
 8003f02:	f000 f871 	bl	8003fe8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	bf14      	ite	ne
 8003f14:	2301      	movne	r3, #1
 8003f16:	2300      	moveq	r3, #0
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b22      	cmp	r3, #34	; 0x22
 8003f26:	d108      	bne.n	8003f3a <UART_DMAError+0x7a>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d005      	beq.n	8003f3a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2200      	movs	r2, #0
 8003f32:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003f34:	68b8      	ldr	r0, [r7, #8]
 8003f36:	f000 f86c 	bl	8004012 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3e:	f043 0210 	orr.w	r2, r3, #16
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f46:	68b8      	ldr	r0, [r7, #8]
 8003f48:	f7ff ff6f 	bl	8003e2a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f4c:	bf00      	nop
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	603b      	str	r3, [r7, #0]
 8003f60:	4613      	mov	r3, r2
 8003f62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f64:	e02c      	b.n	8003fc0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6c:	d028      	beq.n	8003fc0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d007      	beq.n	8003f84 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f74:	f7fd fa22 	bl	80013bc <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d21d      	bcs.n	8003fc0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f92:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695a      	ldr	r2, [r3, #20]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 0201 	bic.w	r2, r2, #1
 8003fa2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e00f      	b.n	8003fe0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	bf0c      	ite	eq
 8003fd0:	2301      	moveq	r3, #1
 8003fd2:	2300      	movne	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	79fb      	ldrb	r3, [r7, #7]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d0c3      	beq.n	8003f66 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003ffe:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	bc80      	pop	{r7}
 8004010:	4770      	bx	lr

08004012 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68da      	ldr	r2, [r3, #12]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004028:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	695a      	ldr	r2, [r3, #20]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0201 	bic.w	r2, r2, #1
 8004038:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2220      	movs	r2, #32
 800403e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	bc80      	pop	{r7}
 800404a:	4770      	bx	lr

0800404c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f7ff fedf 	bl	8003e2a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800406c:	bf00      	nop
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b21      	cmp	r3, #33	; 0x21
 8004086:	d144      	bne.n	8004112 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004090:	d11a      	bne.n	80040c8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	461a      	mov	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040a6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d105      	bne.n	80040bc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	1c9a      	adds	r2, r3, #2
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	621a      	str	r2, [r3, #32]
 80040ba:	e00e      	b.n	80040da <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	621a      	str	r2, [r3, #32]
 80040c6:	e008      	b.n	80040da <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	1c59      	adds	r1, r3, #1
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6211      	str	r1, [r2, #32]
 80040d2:	781a      	ldrb	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040de:	b29b      	uxth	r3, r3
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	4619      	mov	r1, r3
 80040e8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10f      	bne.n	800410e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68da      	ldr	r2, [r3, #12]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800410c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800410e:	2300      	movs	r3, #0
 8004110:	e000      	b.n	8004114 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004112:	2302      	movs	r3, #2
  }
}
 8004114:	4618      	mov	r0, r3
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	bc80      	pop	{r7}
 800411c:	4770      	bx	lr

0800411e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b082      	sub	sp, #8
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004134:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2220      	movs	r2, #32
 800413a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7ff fe6a 	bl	8003e18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b084      	sub	sp, #16
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b22      	cmp	r3, #34	; 0x22
 8004160:	d171      	bne.n	8004246 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800416a:	d123      	bne.n	80041b4 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004170:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10e      	bne.n	8004198 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	b29b      	uxth	r3, r3
 8004182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004186:	b29a      	uxth	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004190:	1c9a      	adds	r2, r3, #2
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	629a      	str	r2, [r3, #40]	; 0x28
 8004196:	e029      	b.n	80041ec <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	b29b      	uxth	r3, r3
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	629a      	str	r2, [r3, #40]	; 0x28
 80041b2:	e01b      	b.n	80041ec <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10a      	bne.n	80041d2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6858      	ldr	r0, [r3, #4]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c6:	1c59      	adds	r1, r3, #1
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6291      	str	r1, [r2, #40]	; 0x28
 80041cc:	b2c2      	uxtb	r2, r0
 80041ce:	701a      	strb	r2, [r3, #0]
 80041d0:	e00c      	b.n	80041ec <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	b2da      	uxtb	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041de:	1c58      	adds	r0, r3, #1
 80041e0:	6879      	ldr	r1, [r7, #4]
 80041e2:	6288      	str	r0, [r1, #40]	; 0x28
 80041e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041e8:	b2d2      	uxtb	r2, r2
 80041ea:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	4619      	mov	r1, r3
 80041fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d120      	bne.n	8004242 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68da      	ldr	r2, [r3, #12]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0220 	bic.w	r2, r2, #32
 800420e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68da      	ldr	r2, [r3, #12]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800421e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	695a      	ldr	r2, [r3, #20]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0201 	bic.w	r2, r2, #1
 800422e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2220      	movs	r2, #32
 8004234:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7fc fcd5 	bl	8000be8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800423e:	2300      	movs	r3, #0
 8004240:	e002      	b.n	8004248 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004242:	2300      	movs	r3, #0
 8004244:	e000      	b.n	8004248 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004246:	2302      	movs	r3, #2
  }
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689a      	ldr	r2, [r3, #8]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	431a      	orrs	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	4313      	orrs	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800428a:	f023 030c 	bic.w	r3, r3, #12
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6812      	ldr	r2, [r2, #0]
 8004292:	68f9      	ldr	r1, [r7, #12]
 8004294:	430b      	orrs	r3, r1
 8004296:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	699a      	ldr	r2, [r3, #24]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a52      	ldr	r2, [pc, #328]	; (80043fc <UART_SetConfig+0x1ac>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d14e      	bne.n	8004356 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80042b8:	f7ff f9a6 	bl	8003608 <HAL_RCC_GetPCLK2Freq>
 80042bc:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	4613      	mov	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	009a      	lsls	r2, r3, #2
 80042c8:	441a      	add	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d4:	4a4a      	ldr	r2, [pc, #296]	; (8004400 <UART_SetConfig+0x1b0>)
 80042d6:	fba2 2303 	umull	r2, r3, r2, r3
 80042da:	095b      	lsrs	r3, r3, #5
 80042dc:	0119      	lsls	r1, r3, #4
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	4613      	mov	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	009a      	lsls	r2, r3, #2
 80042e8:	441a      	add	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80042f4:	4b42      	ldr	r3, [pc, #264]	; (8004400 <UART_SetConfig+0x1b0>)
 80042f6:	fba3 0302 	umull	r0, r3, r3, r2
 80042fa:	095b      	lsrs	r3, r3, #5
 80042fc:	2064      	movs	r0, #100	; 0x64
 80042fe:	fb00 f303 	mul.w	r3, r0, r3
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	3332      	adds	r3, #50	; 0x32
 8004308:	4a3d      	ldr	r2, [pc, #244]	; (8004400 <UART_SetConfig+0x1b0>)
 800430a:	fba2 2303 	umull	r2, r3, r2, r3
 800430e:	095b      	lsrs	r3, r3, #5
 8004310:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004314:	4419      	add	r1, r3
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	4613      	mov	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	009a      	lsls	r2, r3, #2
 8004320:	441a      	add	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	fbb2 f2f3 	udiv	r2, r2, r3
 800432c:	4b34      	ldr	r3, [pc, #208]	; (8004400 <UART_SetConfig+0x1b0>)
 800432e:	fba3 0302 	umull	r0, r3, r3, r2
 8004332:	095b      	lsrs	r3, r3, #5
 8004334:	2064      	movs	r0, #100	; 0x64
 8004336:	fb00 f303 	mul.w	r3, r0, r3
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	3332      	adds	r3, #50	; 0x32
 8004340:	4a2f      	ldr	r2, [pc, #188]	; (8004400 <UART_SetConfig+0x1b0>)
 8004342:	fba2 2303 	umull	r2, r3, r2, r3
 8004346:	095b      	lsrs	r3, r3, #5
 8004348:	f003 020f 	and.w	r2, r3, #15
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	440a      	add	r2, r1
 8004352:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004354:	e04d      	b.n	80043f2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004356:	f7ff f943 	bl	80035e0 <HAL_RCC_GetPCLK1Freq>
 800435a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	4613      	mov	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	4413      	add	r3, r2
 8004364:	009a      	lsls	r2, r3, #2
 8004366:	441a      	add	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004372:	4a23      	ldr	r2, [pc, #140]	; (8004400 <UART_SetConfig+0x1b0>)
 8004374:	fba2 2303 	umull	r2, r3, r2, r3
 8004378:	095b      	lsrs	r3, r3, #5
 800437a:	0119      	lsls	r1, r3, #4
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	4613      	mov	r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	4413      	add	r3, r2
 8004384:	009a      	lsls	r2, r3, #2
 8004386:	441a      	add	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004392:	4b1b      	ldr	r3, [pc, #108]	; (8004400 <UART_SetConfig+0x1b0>)
 8004394:	fba3 0302 	umull	r0, r3, r3, r2
 8004398:	095b      	lsrs	r3, r3, #5
 800439a:	2064      	movs	r0, #100	; 0x64
 800439c:	fb00 f303 	mul.w	r3, r0, r3
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	011b      	lsls	r3, r3, #4
 80043a4:	3332      	adds	r3, #50	; 0x32
 80043a6:	4a16      	ldr	r2, [pc, #88]	; (8004400 <UART_SetConfig+0x1b0>)
 80043a8:	fba2 2303 	umull	r2, r3, r2, r3
 80043ac:	095b      	lsrs	r3, r3, #5
 80043ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043b2:	4419      	add	r1, r3
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	4613      	mov	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	009a      	lsls	r2, r3, #2
 80043be:	441a      	add	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80043ca:	4b0d      	ldr	r3, [pc, #52]	; (8004400 <UART_SetConfig+0x1b0>)
 80043cc:	fba3 0302 	umull	r0, r3, r3, r2
 80043d0:	095b      	lsrs	r3, r3, #5
 80043d2:	2064      	movs	r0, #100	; 0x64
 80043d4:	fb00 f303 	mul.w	r3, r0, r3
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	3332      	adds	r3, #50	; 0x32
 80043de:	4a08      	ldr	r2, [pc, #32]	; (8004400 <UART_SetConfig+0x1b0>)
 80043e0:	fba2 2303 	umull	r2, r3, r2, r3
 80043e4:	095b      	lsrs	r3, r3, #5
 80043e6:	f003 020f 	and.w	r2, r3, #15
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	440a      	add	r2, r1
 80043f0:	609a      	str	r2, [r3, #8]
}
 80043f2:	bf00      	nop
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	40013800 	.word	0x40013800
 8004400:	51eb851f 	.word	0x51eb851f

08004404 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004404:	b084      	sub	sp, #16
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	f107 0014 	add.w	r0, r7, #20
 8004412:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	bc80      	pop	{r7}
 8004420:	b004      	add	sp, #16
 8004422:	4770      	bx	lr

08004424 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800442c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004430:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004438:	b29a      	uxth	r2, r3
 800443a:	89fb      	ldrh	r3, [r7, #14]
 800443c:	4313      	orrs	r3, r2
 800443e:	b29a      	uxth	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	bc80      	pop	{r7}
 8004450:	4770      	bx	lr

08004452 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004452:	b480      	push	{r7}
 8004454:	b085      	sub	sp, #20
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800445a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800445e:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004466:	b29b      	uxth	r3, r3
 8004468:	b21a      	sxth	r2, r3
 800446a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800446e:	43db      	mvns	r3, r3
 8004470:	b21b      	sxth	r3, r3
 8004472:	4013      	ands	r3, r2
 8004474:	b21b      	sxth	r3, r3
 8004476:	b29a      	uxth	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3714      	adds	r7, #20
 8004484:	46bd      	mov	sp, r7
 8004486:	bc80      	pop	{r7}
 8004488:	4770      	bx	lr

0800448a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	460b      	mov	r3, r1
 8004494:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	bc80      	pop	{r7}
 80044a0:	4770      	bx	lr

080044a2 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80044a2:	b084      	sub	sp, #16
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	f107 0014 	add.w	r0, r7, #20
 80044b0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f7ff ffa5 	bl	8004424 <USB_EnableGlobalInt>

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3708      	adds	r7, #8
 80044e0:	46bd      	mov	sp, r7
 80044e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044e6:	b004      	add	sp, #16
 80044e8:	4770      	bx	lr
	...

080044ec <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80044ec:	b490      	push	{r4, r7}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80044f6:	2300      	movs	r3, #0
 80044f8:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	b29b      	uxth	r3, r3
 8004508:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800450c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004510:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	78db      	ldrb	r3, [r3, #3]
 8004516:	2b03      	cmp	r3, #3
 8004518:	d819      	bhi.n	800454e <USB_ActivateEndpoint+0x62>
 800451a:	a201      	add	r2, pc, #4	; (adr r2, 8004520 <USB_ActivateEndpoint+0x34>)
 800451c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004520:	08004531 	.word	0x08004531
 8004524:	08004545 	.word	0x08004545
 8004528:	08004555 	.word	0x08004555
 800452c:	0800453b 	.word	0x0800453b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004530:	89bb      	ldrh	r3, [r7, #12]
 8004532:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004536:	81bb      	strh	r3, [r7, #12]
      break;
 8004538:	e00d      	b.n	8004556 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800453a:	89bb      	ldrh	r3, [r7, #12]
 800453c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004540:	81bb      	strh	r3, [r7, #12]
      break;
 8004542:	e008      	b.n	8004556 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004544:	89bb      	ldrh	r3, [r7, #12]
 8004546:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800454a:	81bb      	strh	r3, [r7, #12]
      break;
 800454c:	e003      	b.n	8004556 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	73fb      	strb	r3, [r7, #15]
      break;
 8004552:	e000      	b.n	8004556 <USB_ActivateEndpoint+0x6a>
      break;
 8004554:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	441a      	add	r2, r3
 8004560:	89bb      	ldrh	r3, [r7, #12]
 8004562:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004566:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800456a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800456e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004572:	b29b      	uxth	r3, r3
 8004574:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	881b      	ldrh	r3, [r3, #0]
 8004582:	b29b      	uxth	r3, r3
 8004584:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458c:	b29a      	uxth	r2, r3
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	b29b      	uxth	r3, r3
 8004594:	4313      	orrs	r3, r2
 8004596:	b29c      	uxth	r4, r3
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	441a      	add	r2, r3
 80045a2:	4b8a      	ldr	r3, [pc, #552]	; (80047cc <USB_ActivateEndpoint+0x2e0>)
 80045a4:	4323      	orrs	r3, r4
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	7b1b      	ldrb	r3, [r3, #12]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f040 8112 	bne.w	80047d8 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	785b      	ldrb	r3, [r3, #1]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d067      	beq.n	800468c <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80045bc:	687c      	ldr	r4, [r7, #4]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	441c      	add	r4, r3
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	011b      	lsls	r3, r3, #4
 80045ce:	4423      	add	r3, r4
 80045d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045d4:	461c      	mov	r4, r3
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	88db      	ldrh	r3, [r3, #6]
 80045da:	085b      	lsrs	r3, r3, #1
 80045dc:	b29b      	uxth	r3, r3
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	881b      	ldrh	r3, [r3, #0]
 80045f0:	b29c      	uxth	r4, r3
 80045f2:	4623      	mov	r3, r4
 80045f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d014      	beq.n	8004626 <USB_ActivateEndpoint+0x13a>
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	881b      	ldrh	r3, [r3, #0]
 8004608:	b29b      	uxth	r3, r3
 800460a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800460e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004612:	b29c      	uxth	r4, r3
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	441a      	add	r2, r3
 800461e:	4b6c      	ldr	r3, [pc, #432]	; (80047d0 <USB_ActivateEndpoint+0x2e4>)
 8004620:	4323      	orrs	r3, r4
 8004622:	b29b      	uxth	r3, r3
 8004624:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	78db      	ldrb	r3, [r3, #3]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d018      	beq.n	8004660 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	881b      	ldrh	r3, [r3, #0]
 800463a:	b29b      	uxth	r3, r3
 800463c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004644:	b29c      	uxth	r4, r3
 8004646:	f084 0320 	eor.w	r3, r4, #32
 800464a:	b29c      	uxth	r4, r3
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	441a      	add	r2, r3
 8004656:	4b5d      	ldr	r3, [pc, #372]	; (80047cc <USB_ActivateEndpoint+0x2e0>)
 8004658:	4323      	orrs	r3, r4
 800465a:	b29b      	uxth	r3, r3
 800465c:	8013      	strh	r3, [r2, #0]
 800465e:	e22b      	b.n	8004ab8 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	881b      	ldrh	r3, [r3, #0]
 800466c:	b29b      	uxth	r3, r3
 800466e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004672:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004676:	b29c      	uxth	r4, r3
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	441a      	add	r2, r3
 8004682:	4b52      	ldr	r3, [pc, #328]	; (80047cc <USB_ActivateEndpoint+0x2e0>)
 8004684:	4323      	orrs	r3, r4
 8004686:	b29b      	uxth	r3, r3
 8004688:	8013      	strh	r3, [r2, #0]
 800468a:	e215      	b.n	8004ab8 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800468c:	687c      	ldr	r4, [r7, #4]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004694:	b29b      	uxth	r3, r3
 8004696:	441c      	add	r4, r3
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	011b      	lsls	r3, r3, #4
 800469e:	4423      	add	r3, r4
 80046a0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80046a4:	461c      	mov	r4, r3
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	88db      	ldrh	r3, [r3, #6]
 80046aa:	085b      	lsrs	r3, r3, #1
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80046b4:	687c      	ldr	r4, [r7, #4]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046bc:	b29b      	uxth	r3, r3
 80046be:	441c      	add	r4, r3
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	011b      	lsls	r3, r3, #4
 80046c6:	4423      	add	r3, r4
 80046c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046cc:	461c      	mov	r4, r3
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10e      	bne.n	80046f4 <USB_ActivateEndpoint+0x208>
 80046d6:	8823      	ldrh	r3, [r4, #0]
 80046d8:	b29b      	uxth	r3, r3
 80046da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046de:	b29b      	uxth	r3, r3
 80046e0:	8023      	strh	r3, [r4, #0]
 80046e2:	8823      	ldrh	r3, [r4, #0]
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	8023      	strh	r3, [r4, #0]
 80046f2:	e02d      	b.n	8004750 <USB_ActivateEndpoint+0x264>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	2b3e      	cmp	r3, #62	; 0x3e
 80046fa:	d812      	bhi.n	8004722 <USB_ActivateEndpoint+0x236>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	085b      	lsrs	r3, r3, #1
 8004702:	60bb      	str	r3, [r7, #8]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d002      	beq.n	8004716 <USB_ActivateEndpoint+0x22a>
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	3301      	adds	r3, #1
 8004714:	60bb      	str	r3, [r7, #8]
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	b29b      	uxth	r3, r3
 800471a:	029b      	lsls	r3, r3, #10
 800471c:	b29b      	uxth	r3, r3
 800471e:	8023      	strh	r3, [r4, #0]
 8004720:	e016      	b.n	8004750 <USB_ActivateEndpoint+0x264>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	095b      	lsrs	r3, r3, #5
 8004728:	60bb      	str	r3, [r7, #8]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	f003 031f 	and.w	r3, r3, #31
 8004732:	2b00      	cmp	r3, #0
 8004734:	d102      	bne.n	800473c <USB_ActivateEndpoint+0x250>
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	3b01      	subs	r3, #1
 800473a:	60bb      	str	r3, [r7, #8]
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	b29b      	uxth	r3, r3
 8004740:	029b      	lsls	r3, r3, #10
 8004742:	b29b      	uxth	r3, r3
 8004744:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004748:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800474c:	b29b      	uxth	r3, r3
 800474e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	881b      	ldrh	r3, [r3, #0]
 800475c:	b29c      	uxth	r4, r3
 800475e:	4623      	mov	r3, r4
 8004760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d014      	beq.n	8004792 <USB_ActivateEndpoint+0x2a6>
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	881b      	ldrh	r3, [r3, #0]
 8004774:	b29b      	uxth	r3, r3
 8004776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800477a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800477e:	b29c      	uxth	r4, r3
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	441a      	add	r2, r3
 800478a:	4b12      	ldr	r3, [pc, #72]	; (80047d4 <USB_ActivateEndpoint+0x2e8>)
 800478c:	4323      	orrs	r3, r4
 800478e:	b29b      	uxth	r3, r3
 8004790:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4413      	add	r3, r2
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	b29b      	uxth	r3, r3
 80047a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a8:	b29c      	uxth	r4, r3
 80047aa:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80047ae:	b29c      	uxth	r4, r3
 80047b0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80047b4:	b29c      	uxth	r4, r3
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	441a      	add	r2, r3
 80047c0:	4b02      	ldr	r3, [pc, #8]	; (80047cc <USB_ActivateEndpoint+0x2e0>)
 80047c2:	4323      	orrs	r3, r4
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	8013      	strh	r3, [r2, #0]
 80047c8:	e176      	b.n	8004ab8 <USB_ActivateEndpoint+0x5cc>
 80047ca:	bf00      	nop
 80047cc:	ffff8080 	.word	0xffff8080
 80047d0:	ffff80c0 	.word	0xffff80c0
 80047d4:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	881b      	ldrh	r3, [r3, #0]
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ee:	b29c      	uxth	r4, r3
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	441a      	add	r2, r3
 80047fa:	4b96      	ldr	r3, [pc, #600]	; (8004a54 <USB_ActivateEndpoint+0x568>)
 80047fc:	4323      	orrs	r3, r4
 80047fe:	b29b      	uxth	r3, r3
 8004800:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004802:	687c      	ldr	r4, [r7, #4]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800480a:	b29b      	uxth	r3, r3
 800480c:	441c      	add	r4, r3
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	4423      	add	r3, r4
 8004816:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800481a:	461c      	mov	r4, r3
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	891b      	ldrh	r3, [r3, #8]
 8004820:	085b      	lsrs	r3, r3, #1
 8004822:	b29b      	uxth	r3, r3
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	b29b      	uxth	r3, r3
 8004828:	8023      	strh	r3, [r4, #0]
 800482a:	687c      	ldr	r4, [r7, #4]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004832:	b29b      	uxth	r3, r3
 8004834:	441c      	add	r4, r3
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	011b      	lsls	r3, r3, #4
 800483c:	4423      	add	r3, r4
 800483e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004842:	461c      	mov	r4, r3
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	895b      	ldrh	r3, [r3, #10]
 8004848:	085b      	lsrs	r3, r3, #1
 800484a:	b29b      	uxth	r3, r3
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	b29b      	uxth	r3, r3
 8004850:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	785b      	ldrb	r3, [r3, #1]
 8004856:	2b00      	cmp	r3, #0
 8004858:	f040 8088 	bne.w	800496c <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	881b      	ldrh	r3, [r3, #0]
 8004868:	b29c      	uxth	r4, r3
 800486a:	4623      	mov	r3, r4
 800486c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d014      	beq.n	800489e <USB_ActivateEndpoint+0x3b2>
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4413      	add	r3, r2
 800487e:	881b      	ldrh	r3, [r3, #0]
 8004880:	b29b      	uxth	r3, r3
 8004882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800488a:	b29c      	uxth	r4, r3
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	441a      	add	r2, r3
 8004896:	4b70      	ldr	r3, [pc, #448]	; (8004a58 <USB_ActivateEndpoint+0x56c>)
 8004898:	4323      	orrs	r3, r4
 800489a:	b29b      	uxth	r3, r3
 800489c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	b29c      	uxth	r4, r3
 80048ac:	4623      	mov	r3, r4
 80048ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d014      	beq.n	80048e0 <USB_ActivateEndpoint+0x3f4>
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	881b      	ldrh	r3, [r3, #0]
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048cc:	b29c      	uxth	r4, r3
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	441a      	add	r2, r3
 80048d8:	4b60      	ldr	r3, [pc, #384]	; (8004a5c <USB_ActivateEndpoint+0x570>)
 80048da:	4323      	orrs	r3, r4
 80048dc:	b29b      	uxth	r3, r3
 80048de:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	881b      	ldrh	r3, [r3, #0]
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f6:	b29c      	uxth	r4, r3
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	441a      	add	r2, r3
 8004902:	4b56      	ldr	r3, [pc, #344]	; (8004a5c <USB_ActivateEndpoint+0x570>)
 8004904:	4323      	orrs	r3, r4
 8004906:	b29b      	uxth	r3, r3
 8004908:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	b29b      	uxth	r3, r3
 8004918:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800491c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004920:	b29c      	uxth	r4, r3
 8004922:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004926:	b29c      	uxth	r4, r3
 8004928:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800492c:	b29c      	uxth	r4, r3
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	441a      	add	r2, r3
 8004938:	4b49      	ldr	r3, [pc, #292]	; (8004a60 <USB_ActivateEndpoint+0x574>)
 800493a:	4323      	orrs	r3, r4
 800493c:	b29b      	uxth	r3, r3
 800493e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	881b      	ldrh	r3, [r3, #0]
 800494c:	b29b      	uxth	r3, r3
 800494e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004952:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004956:	b29c      	uxth	r4, r3
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	441a      	add	r2, r3
 8004962:	4b3f      	ldr	r3, [pc, #252]	; (8004a60 <USB_ActivateEndpoint+0x574>)
 8004964:	4323      	orrs	r3, r4
 8004966:	b29b      	uxth	r3, r3
 8004968:	8013      	strh	r3, [r2, #0]
 800496a:	e0a5      	b.n	8004ab8 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	881b      	ldrh	r3, [r3, #0]
 8004978:	b29c      	uxth	r4, r3
 800497a:	4623      	mov	r3, r4
 800497c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d014      	beq.n	80049ae <USB_ActivateEndpoint+0x4c2>
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	b29b      	uxth	r3, r3
 8004992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800499a:	b29c      	uxth	r4, r3
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	441a      	add	r2, r3
 80049a6:	4b2c      	ldr	r3, [pc, #176]	; (8004a58 <USB_ActivateEndpoint+0x56c>)
 80049a8:	4323      	orrs	r3, r4
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	b29c      	uxth	r4, r3
 80049bc:	4623      	mov	r3, r4
 80049be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d014      	beq.n	80049f0 <USB_ActivateEndpoint+0x504>
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	881b      	ldrh	r3, [r3, #0]
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049dc:	b29c      	uxth	r4, r3
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	441a      	add	r2, r3
 80049e8:	4b1c      	ldr	r3, [pc, #112]	; (8004a5c <USB_ActivateEndpoint+0x570>)
 80049ea:	4323      	orrs	r3, r4
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	881b      	ldrh	r3, [r3, #0]
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a06:	b29c      	uxth	r4, r3
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	441a      	add	r2, r3
 8004a12:	4b11      	ldr	r3, [pc, #68]	; (8004a58 <USB_ActivateEndpoint+0x56c>)
 8004a14:	4323      	orrs	r3, r4
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	78db      	ldrb	r3, [r3, #3]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d020      	beq.n	8004a64 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4413      	add	r3, r2
 8004a2c:	881b      	ldrh	r3, [r3, #0]
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a38:	b29c      	uxth	r4, r3
 8004a3a:	f084 0320 	eor.w	r3, r4, #32
 8004a3e:	b29c      	uxth	r4, r3
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	441a      	add	r2, r3
 8004a4a:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <USB_ActivateEndpoint+0x574>)
 8004a4c:	4323      	orrs	r3, r4
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	8013      	strh	r3, [r2, #0]
 8004a52:	e01c      	b.n	8004a8e <USB_ActivateEndpoint+0x5a2>
 8004a54:	ffff8180 	.word	0xffff8180
 8004a58:	ffffc080 	.word	0xffffc080
 8004a5c:	ffff80c0 	.word	0xffff80c0
 8004a60:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a7a:	b29c      	uxth	r4, r3
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	441a      	add	r2, r3
 8004a86:	4b0f      	ldr	r3, [pc, #60]	; (8004ac4 <USB_ActivateEndpoint+0x5d8>)
 8004a88:	4323      	orrs	r3, r4
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa4:	b29c      	uxth	r4, r3
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	441a      	add	r2, r3
 8004ab0:	4b04      	ldr	r3, [pc, #16]	; (8004ac4 <USB_ActivateEndpoint+0x5d8>)
 8004ab2:	4323      	orrs	r3, r4
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bc90      	pop	{r4, r7}
 8004ac2:	4770      	bx	lr
 8004ac4:	ffff8080 	.word	0xffff8080

08004ac8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ac8:	b490      	push	{r4, r7}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	7b1b      	ldrb	r3, [r3, #12]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d171      	bne.n	8004bbe <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	785b      	ldrb	r3, [r3, #1]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d036      	beq.n	8004b50 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	881b      	ldrh	r3, [r3, #0]
 8004aee:	b29c      	uxth	r4, r3
 8004af0:	4623      	mov	r3, r4
 8004af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d014      	beq.n	8004b24 <USB_DeactivateEndpoint+0x5c>
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	4413      	add	r3, r2
 8004b04:	881b      	ldrh	r3, [r3, #0]
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b10:	b29c      	uxth	r4, r3
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	441a      	add	r2, r3
 8004b1c:	4b6b      	ldr	r3, [pc, #428]	; (8004ccc <USB_DeactivateEndpoint+0x204>)
 8004b1e:	4323      	orrs	r3, r4
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b3a:	b29c      	uxth	r4, r3
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	441a      	add	r2, r3
 8004b46:	4b62      	ldr	r3, [pc, #392]	; (8004cd0 <USB_DeactivateEndpoint+0x208>)
 8004b48:	4323      	orrs	r3, r4
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	8013      	strh	r3, [r2, #0]
 8004b4e:	e144      	b.n	8004dda <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4413      	add	r3, r2
 8004b5a:	881b      	ldrh	r3, [r3, #0]
 8004b5c:	b29c      	uxth	r4, r3
 8004b5e:	4623      	mov	r3, r4
 8004b60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d014      	beq.n	8004b92 <USB_DeactivateEndpoint+0xca>
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	881b      	ldrh	r3, [r3, #0]
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7e:	b29c      	uxth	r4, r3
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	441a      	add	r2, r3
 8004b8a:	4b52      	ldr	r3, [pc, #328]	; (8004cd4 <USB_DeactivateEndpoint+0x20c>)
 8004b8c:	4323      	orrs	r3, r4
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba8:	b29c      	uxth	r4, r3
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	441a      	add	r2, r3
 8004bb4:	4b46      	ldr	r3, [pc, #280]	; (8004cd0 <USB_DeactivateEndpoint+0x208>)
 8004bb6:	4323      	orrs	r3, r4
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	8013      	strh	r3, [r2, #0]
 8004bbc:	e10d      	b.n	8004dda <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	785b      	ldrb	r3, [r3, #1]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f040 8088 	bne.w	8004cd8 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	b29c      	uxth	r4, r3
 8004bd6:	4623      	mov	r3, r4
 8004bd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d014      	beq.n	8004c0a <USB_DeactivateEndpoint+0x142>
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf6:	b29c      	uxth	r4, r3
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	441a      	add	r2, r3
 8004c02:	4b34      	ldr	r3, [pc, #208]	; (8004cd4 <USB_DeactivateEndpoint+0x20c>)
 8004c04:	4323      	orrs	r3, r4
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4413      	add	r3, r2
 8004c14:	881b      	ldrh	r3, [r3, #0]
 8004c16:	b29c      	uxth	r4, r3
 8004c18:	4623      	mov	r3, r4
 8004c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d014      	beq.n	8004c4c <USB_DeactivateEndpoint+0x184>
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	881b      	ldrh	r3, [r3, #0]
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c38:	b29c      	uxth	r4, r3
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	441a      	add	r2, r3
 8004c44:	4b21      	ldr	r3, [pc, #132]	; (8004ccc <USB_DeactivateEndpoint+0x204>)
 8004c46:	4323      	orrs	r3, r4
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	881b      	ldrh	r3, [r3, #0]
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c62:	b29c      	uxth	r4, r3
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	441a      	add	r2, r3
 8004c6e:	4b17      	ldr	r3, [pc, #92]	; (8004ccc <USB_DeactivateEndpoint+0x204>)
 8004c70:	4323      	orrs	r3, r4
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4413      	add	r3, r2
 8004c80:	881b      	ldrh	r3, [r3, #0]
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c8c:	b29c      	uxth	r4, r3
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	441a      	add	r2, r3
 8004c98:	4b0d      	ldr	r3, [pc, #52]	; (8004cd0 <USB_DeactivateEndpoint+0x208>)
 8004c9a:	4323      	orrs	r3, r4
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	881b      	ldrh	r3, [r3, #0]
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cb6:	b29c      	uxth	r4, r3
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	441a      	add	r2, r3
 8004cc2:	4b03      	ldr	r3, [pc, #12]	; (8004cd0 <USB_DeactivateEndpoint+0x208>)
 8004cc4:	4323      	orrs	r3, r4
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	8013      	strh	r3, [r2, #0]
 8004cca:	e086      	b.n	8004dda <USB_DeactivateEndpoint+0x312>
 8004ccc:	ffff80c0 	.word	0xffff80c0
 8004cd0:	ffff8080 	.word	0xffff8080
 8004cd4:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	b29c      	uxth	r4, r3
 8004ce6:	4623      	mov	r3, r4
 8004ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d014      	beq.n	8004d1a <USB_DeactivateEndpoint+0x252>
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	881b      	ldrh	r3, [r3, #0]
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d06:	b29c      	uxth	r4, r3
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	441a      	add	r2, r3
 8004d12:	4b35      	ldr	r3, [pc, #212]	; (8004de8 <USB_DeactivateEndpoint+0x320>)
 8004d14:	4323      	orrs	r3, r4
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4413      	add	r3, r2
 8004d24:	881b      	ldrh	r3, [r3, #0]
 8004d26:	b29c      	uxth	r4, r3
 8004d28:	4623      	mov	r3, r4
 8004d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d014      	beq.n	8004d5c <USB_DeactivateEndpoint+0x294>
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4413      	add	r3, r2
 8004d3c:	881b      	ldrh	r3, [r3, #0]
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d48:	b29c      	uxth	r4, r3
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	441a      	add	r2, r3
 8004d54:	4b25      	ldr	r3, [pc, #148]	; (8004dec <USB_DeactivateEndpoint+0x324>)
 8004d56:	4323      	orrs	r3, r4
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d72:	b29c      	uxth	r4, r3
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	441a      	add	r2, r3
 8004d7e:	4b1a      	ldr	r3, [pc, #104]	; (8004de8 <USB_DeactivateEndpoint+0x320>)
 8004d80:	4323      	orrs	r3, r4
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	4413      	add	r3, r2
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d9c:	b29c      	uxth	r4, r3
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	441a      	add	r2, r3
 8004da8:	4b11      	ldr	r3, [pc, #68]	; (8004df0 <USB_DeactivateEndpoint+0x328>)
 8004daa:	4323      	orrs	r3, r4
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	881b      	ldrh	r3, [r3, #0]
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc6:	b29c      	uxth	r4, r3
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	441a      	add	r2, r3
 8004dd2:	4b07      	ldr	r3, [pc, #28]	; (8004df0 <USB_DeactivateEndpoint+0x328>)
 8004dd4:	4323      	orrs	r3, r4
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bc90      	pop	{r4, r7}
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	ffffc080 	.word	0xffffc080
 8004dec:	ffff80c0 	.word	0xffff80c0
 8004df0:	ffff8080 	.word	0xffff8080

08004df4 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004df4:	b590      	push	{r4, r7, lr}
 8004df6:	b08d      	sub	sp, #52	; 0x34
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	785b      	ldrb	r3, [r3, #1]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	f040 8160 	bne.w	80050c8 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	699a      	ldr	r2, [r3, #24]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d909      	bls.n	8004e28 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	699a      	ldr	r2, [r3, #24]
 8004e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e20:	1ad2      	subs	r2, r2, r3
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	619a      	str	r2, [r3, #24]
 8004e26:	e005      	b.n	8004e34 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2200      	movs	r2, #0
 8004e32:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	7b1b      	ldrb	r3, [r3, #12]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d119      	bne.n	8004e70 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	6959      	ldr	r1, [r3, #20]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	88da      	ldrh	r2, [r3, #6]
 8004e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 fba2 	bl	8005592 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004e4e:	687c      	ldr	r4, [r7, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	441c      	add	r4, r3
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	011b      	lsls	r3, r3, #4
 8004e60:	4423      	add	r3, r4
 8004e62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e66:	461c      	mov	r4, r3
 8004e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	8023      	strh	r3, [r4, #0]
 8004e6e:	e10f      	b.n	8005090 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	881b      	ldrh	r3, [r3, #0]
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d065      	beq.n	8004f52 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e86:	687c      	ldr	r4, [r7, #4]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	785b      	ldrb	r3, [r3, #1]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d148      	bne.n	8004f22 <USB_EPStartXfer+0x12e>
 8004e90:	687c      	ldr	r4, [r7, #4]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	441c      	add	r4, r3
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	011b      	lsls	r3, r3, #4
 8004ea2:	4423      	add	r3, r4
 8004ea4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ea8:	461c      	mov	r4, r3
 8004eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10e      	bne.n	8004ece <USB_EPStartXfer+0xda>
 8004eb0:	8823      	ldrh	r3, [r4, #0]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	8023      	strh	r3, [r4, #0]
 8004ebc:	8823      	ldrh	r3, [r4, #0]
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	8023      	strh	r3, [r4, #0]
 8004ecc:	e03d      	b.n	8004f4a <USB_EPStartXfer+0x156>
 8004ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed0:	2b3e      	cmp	r3, #62	; 0x3e
 8004ed2:	d810      	bhi.n	8004ef6 <USB_EPStartXfer+0x102>
 8004ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed6:	085b      	lsrs	r3, r3, #1
 8004ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d002      	beq.n	8004eea <USB_EPStartXfer+0xf6>
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	029b      	lsls	r3, r3, #10
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	8023      	strh	r3, [r4, #0]
 8004ef4:	e029      	b.n	8004f4a <USB_EPStartXfer+0x156>
 8004ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef8:	095b      	lsrs	r3, r3, #5
 8004efa:	627b      	str	r3, [r7, #36]	; 0x24
 8004efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efe:	f003 031f 	and.w	r3, r3, #31
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d102      	bne.n	8004f0c <USB_EPStartXfer+0x118>
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	029b      	lsls	r3, r3, #10
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	8023      	strh	r3, [r4, #0]
 8004f20:	e013      	b.n	8004f4a <USB_EPStartXfer+0x156>
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	785b      	ldrb	r3, [r3, #1]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d10f      	bne.n	8004f4a <USB_EPStartXfer+0x156>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	441c      	add	r4, r3
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	011b      	lsls	r3, r3, #4
 8004f3a:	4423      	add	r3, r4
 8004f3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f40:	60fb      	str	r3, [r7, #12]
 8004f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	895b      	ldrh	r3, [r3, #10]
 8004f4e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004f50:	e063      	b.n	800501a <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	785b      	ldrb	r3, [r3, #1]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d148      	bne.n	8004fec <USB_EPStartXfer+0x1f8>
 8004f5a:	687c      	ldr	r4, [r7, #4]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	441c      	add	r4, r3
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	4423      	add	r3, r4
 8004f6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f72:	461c      	mov	r4, r3
 8004f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10e      	bne.n	8004f98 <USB_EPStartXfer+0x1a4>
 8004f7a:	8823      	ldrh	r3, [r4, #0]
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	8023      	strh	r3, [r4, #0]
 8004f86:	8823      	ldrh	r3, [r4, #0]
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	8023      	strh	r3, [r4, #0]
 8004f96:	e03d      	b.n	8005014 <USB_EPStartXfer+0x220>
 8004f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9a:	2b3e      	cmp	r3, #62	; 0x3e
 8004f9c:	d810      	bhi.n	8004fc0 <USB_EPStartXfer+0x1cc>
 8004f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa0:	085b      	lsrs	r3, r3, #1
 8004fa2:	623b      	str	r3, [r7, #32]
 8004fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d002      	beq.n	8004fb4 <USB_EPStartXfer+0x1c0>
 8004fae:	6a3b      	ldr	r3, [r7, #32]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	623b      	str	r3, [r7, #32]
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	029b      	lsls	r3, r3, #10
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	8023      	strh	r3, [r4, #0]
 8004fbe:	e029      	b.n	8005014 <USB_EPStartXfer+0x220>
 8004fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc2:	095b      	lsrs	r3, r3, #5
 8004fc4:	623b      	str	r3, [r7, #32]
 8004fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc8:	f003 031f 	and.w	r3, r3, #31
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d102      	bne.n	8004fd6 <USB_EPStartXfer+0x1e2>
 8004fd0:	6a3b      	ldr	r3, [r7, #32]
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	623b      	str	r3, [r7, #32]
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	029b      	lsls	r3, r3, #10
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fe2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	8023      	strh	r3, [r4, #0]
 8004fea:	e013      	b.n	8005014 <USB_EPStartXfer+0x220>
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	785b      	ldrb	r3, [r3, #1]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d10f      	bne.n	8005014 <USB_EPStartXfer+0x220>
 8004ff4:	687c      	ldr	r4, [r7, #4]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	441c      	add	r4, r3
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	011b      	lsls	r3, r3, #4
 8005006:	4423      	add	r3, r4
 8005008:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800500c:	461c      	mov	r4, r3
 800500e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005010:	b29b      	uxth	r3, r3
 8005012:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	891b      	ldrh	r3, [r3, #8]
 8005018:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	6959      	ldr	r1, [r3, #20]
 800501e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005020:	b29b      	uxth	r3, r3
 8005022:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 fab4 	bl	8005592 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	785b      	ldrb	r3, [r3, #1]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d115      	bne.n	800505e <USB_EPStartXfer+0x26a>
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	b29b      	uxth	r3, r3
 8005040:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005048:	b29c      	uxth	r4, r3
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	441a      	add	r2, r3
 8005054:	4b9a      	ldr	r3, [pc, #616]	; (80052c0 <USB_EPStartXfer+0x4cc>)
 8005056:	4323      	orrs	r3, r4
 8005058:	b29b      	uxth	r3, r3
 800505a:	8013      	strh	r3, [r2, #0]
 800505c:	e018      	b.n	8005090 <USB_EPStartXfer+0x29c>
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	785b      	ldrb	r3, [r3, #1]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d114      	bne.n	8005090 <USB_EPStartXfer+0x29c>
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	b29b      	uxth	r3, r3
 8005074:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507c:	b29c      	uxth	r4, r3
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	441a      	add	r2, r3
 8005088:	4b8e      	ldr	r3, [pc, #568]	; (80052c4 <USB_EPStartXfer+0x4d0>)
 800508a:	4323      	orrs	r3, r4
 800508c:	b29b      	uxth	r3, r3
 800508e:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	b29b      	uxth	r3, r3
 800509e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050a6:	b29c      	uxth	r4, r3
 80050a8:	f084 0310 	eor.w	r3, r4, #16
 80050ac:	b29c      	uxth	r4, r3
 80050ae:	f084 0320 	eor.w	r3, r4, #32
 80050b2:	b29c      	uxth	r4, r3
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	441a      	add	r2, r3
 80050be:	4b82      	ldr	r3, [pc, #520]	; (80052c8 <USB_EPStartXfer+0x4d4>)
 80050c0:	4323      	orrs	r3, r4
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	8013      	strh	r3, [r2, #0]
 80050c6:	e146      	b.n	8005356 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	699a      	ldr	r2, [r3, #24]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d909      	bls.n	80050e8 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	699a      	ldr	r2, [r3, #24]
 80050de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e0:	1ad2      	subs	r2, r2, r3
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	619a      	str	r2, [r3, #24]
 80050e6:	e005      	b.n	80050f4 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2200      	movs	r2, #0
 80050f2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	7b1b      	ldrb	r3, [r3, #12]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d148      	bne.n	800518e <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80050fc:	687c      	ldr	r4, [r7, #4]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005104:	b29b      	uxth	r3, r3
 8005106:	441c      	add	r4, r3
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	011b      	lsls	r3, r3, #4
 800510e:	4423      	add	r3, r4
 8005110:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005114:	461c      	mov	r4, r3
 8005116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10e      	bne.n	800513a <USB_EPStartXfer+0x346>
 800511c:	8823      	ldrh	r3, [r4, #0]
 800511e:	b29b      	uxth	r3, r3
 8005120:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005124:	b29b      	uxth	r3, r3
 8005126:	8023      	strh	r3, [r4, #0]
 8005128:	8823      	ldrh	r3, [r4, #0]
 800512a:	b29b      	uxth	r3, r3
 800512c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005130:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005134:	b29b      	uxth	r3, r3
 8005136:	8023      	strh	r3, [r4, #0]
 8005138:	e0f2      	b.n	8005320 <USB_EPStartXfer+0x52c>
 800513a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513c:	2b3e      	cmp	r3, #62	; 0x3e
 800513e:	d810      	bhi.n	8005162 <USB_EPStartXfer+0x36e>
 8005140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005142:	085b      	lsrs	r3, r3, #1
 8005144:	61fb      	str	r3, [r7, #28]
 8005146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005148:	f003 0301 	and.w	r3, r3, #1
 800514c:	2b00      	cmp	r3, #0
 800514e:	d002      	beq.n	8005156 <USB_EPStartXfer+0x362>
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	3301      	adds	r3, #1
 8005154:	61fb      	str	r3, [r7, #28]
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	b29b      	uxth	r3, r3
 800515a:	029b      	lsls	r3, r3, #10
 800515c:	b29b      	uxth	r3, r3
 800515e:	8023      	strh	r3, [r4, #0]
 8005160:	e0de      	b.n	8005320 <USB_EPStartXfer+0x52c>
 8005162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005164:	095b      	lsrs	r3, r3, #5
 8005166:	61fb      	str	r3, [r7, #28]
 8005168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516a:	f003 031f 	and.w	r3, r3, #31
 800516e:	2b00      	cmp	r3, #0
 8005170:	d102      	bne.n	8005178 <USB_EPStartXfer+0x384>
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	3b01      	subs	r3, #1
 8005176:	61fb      	str	r3, [r7, #28]
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	b29b      	uxth	r3, r3
 800517c:	029b      	lsls	r3, r3, #10
 800517e:	b29b      	uxth	r3, r3
 8005180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005188:	b29b      	uxth	r3, r3
 800518a:	8023      	strh	r3, [r4, #0]
 800518c:	e0c8      	b.n	8005320 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	785b      	ldrb	r3, [r3, #1]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d148      	bne.n	8005228 <USB_EPStartXfer+0x434>
 8005196:	687c      	ldr	r4, [r7, #4]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800519e:	b29b      	uxth	r3, r3
 80051a0:	441c      	add	r4, r3
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	011b      	lsls	r3, r3, #4
 80051a8:	4423      	add	r3, r4
 80051aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051ae:	461c      	mov	r4, r3
 80051b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10e      	bne.n	80051d4 <USB_EPStartXfer+0x3e0>
 80051b6:	8823      	ldrh	r3, [r4, #0]
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051be:	b29b      	uxth	r3, r3
 80051c0:	8023      	strh	r3, [r4, #0]
 80051c2:	8823      	ldrh	r3, [r4, #0]
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	8023      	strh	r3, [r4, #0]
 80051d2:	e03d      	b.n	8005250 <USB_EPStartXfer+0x45c>
 80051d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d6:	2b3e      	cmp	r3, #62	; 0x3e
 80051d8:	d810      	bhi.n	80051fc <USB_EPStartXfer+0x408>
 80051da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051dc:	085b      	lsrs	r3, r3, #1
 80051de:	61bb      	str	r3, [r7, #24]
 80051e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d002      	beq.n	80051f0 <USB_EPStartXfer+0x3fc>
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	3301      	adds	r3, #1
 80051ee:	61bb      	str	r3, [r7, #24]
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	029b      	lsls	r3, r3, #10
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	8023      	strh	r3, [r4, #0]
 80051fa:	e029      	b.n	8005250 <USB_EPStartXfer+0x45c>
 80051fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fe:	095b      	lsrs	r3, r3, #5
 8005200:	61bb      	str	r3, [r7, #24]
 8005202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005204:	f003 031f 	and.w	r3, r3, #31
 8005208:	2b00      	cmp	r3, #0
 800520a:	d102      	bne.n	8005212 <USB_EPStartXfer+0x41e>
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	3b01      	subs	r3, #1
 8005210:	61bb      	str	r3, [r7, #24]
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	b29b      	uxth	r3, r3
 8005216:	029b      	lsls	r3, r3, #10
 8005218:	b29b      	uxth	r3, r3
 800521a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800521e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005222:	b29b      	uxth	r3, r3
 8005224:	8023      	strh	r3, [r4, #0]
 8005226:	e013      	b.n	8005250 <USB_EPStartXfer+0x45c>
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	785b      	ldrb	r3, [r3, #1]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d10f      	bne.n	8005250 <USB_EPStartXfer+0x45c>
 8005230:	687c      	ldr	r4, [r7, #4]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005238:	b29b      	uxth	r3, r3
 800523a:	441c      	add	r4, r3
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	011b      	lsls	r3, r3, #4
 8005242:	4423      	add	r3, r4
 8005244:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005248:	461c      	mov	r4, r3
 800524a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524c:	b29b      	uxth	r3, r3
 800524e:	8023      	strh	r3, [r4, #0]
 8005250:	687c      	ldr	r4, [r7, #4]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	785b      	ldrb	r3, [r3, #1]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d14e      	bne.n	80052f8 <USB_EPStartXfer+0x504>
 800525a:	687c      	ldr	r4, [r7, #4]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005262:	b29b      	uxth	r3, r3
 8005264:	441c      	add	r4, r3
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	011b      	lsls	r3, r3, #4
 800526c:	4423      	add	r3, r4
 800526e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005272:	461c      	mov	r4, r3
 8005274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10e      	bne.n	8005298 <USB_EPStartXfer+0x4a4>
 800527a:	8823      	ldrh	r3, [r4, #0]
 800527c:	b29b      	uxth	r3, r3
 800527e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005282:	b29b      	uxth	r3, r3
 8005284:	8023      	strh	r3, [r4, #0]
 8005286:	8823      	ldrh	r3, [r4, #0]
 8005288:	b29b      	uxth	r3, r3
 800528a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800528e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005292:	b29b      	uxth	r3, r3
 8005294:	8023      	strh	r3, [r4, #0]
 8005296:	e043      	b.n	8005320 <USB_EPStartXfer+0x52c>
 8005298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529a:	2b3e      	cmp	r3, #62	; 0x3e
 800529c:	d816      	bhi.n	80052cc <USB_EPStartXfer+0x4d8>
 800529e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a0:	085b      	lsrs	r3, r3, #1
 80052a2:	617b      	str	r3, [r7, #20]
 80052a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d002      	beq.n	80052b4 <USB_EPStartXfer+0x4c0>
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	3301      	adds	r3, #1
 80052b2:	617b      	str	r3, [r7, #20]
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	029b      	lsls	r3, r3, #10
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	8023      	strh	r3, [r4, #0]
 80052be:	e02f      	b.n	8005320 <USB_EPStartXfer+0x52c>
 80052c0:	ffff80c0 	.word	0xffff80c0
 80052c4:	ffffc080 	.word	0xffffc080
 80052c8:	ffff8080 	.word	0xffff8080
 80052cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ce:	095b      	lsrs	r3, r3, #5
 80052d0:	617b      	str	r3, [r7, #20]
 80052d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d4:	f003 031f 	and.w	r3, r3, #31
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d102      	bne.n	80052e2 <USB_EPStartXfer+0x4ee>
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	3b01      	subs	r3, #1
 80052e0:	617b      	str	r3, [r7, #20]
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	029b      	lsls	r3, r3, #10
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	8023      	strh	r3, [r4, #0]
 80052f6:	e013      	b.n	8005320 <USB_EPStartXfer+0x52c>
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	785b      	ldrb	r3, [r3, #1]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d10f      	bne.n	8005320 <USB_EPStartXfer+0x52c>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005306:	b29b      	uxth	r3, r3
 8005308:	441c      	add	r4, r3
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	011b      	lsls	r3, r3, #4
 8005310:	4423      	add	r3, r4
 8005312:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005316:	613b      	str	r3, [r7, #16]
 8005318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531a:	b29a      	uxth	r2, r3
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	881b      	ldrh	r3, [r3, #0]
 800532c:	b29b      	uxth	r3, r3
 800532e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005336:	b29c      	uxth	r4, r3
 8005338:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800533c:	b29c      	uxth	r4, r3
 800533e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005342:	b29c      	uxth	r4, r3
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	441a      	add	r2, r3
 800534e:	4b04      	ldr	r3, [pc, #16]	; (8005360 <USB_EPStartXfer+0x56c>)
 8005350:	4323      	orrs	r3, r4
 8005352:	b29b      	uxth	r3, r3
 8005354:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3734      	adds	r7, #52	; 0x34
 800535c:	46bd      	mov	sp, r7
 800535e:	bd90      	pop	{r4, r7, pc}
 8005360:	ffff8080 	.word	0xffff8080

08005364 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005364:	b490      	push	{r4, r7}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	785b      	ldrb	r3, [r3, #1]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d018      	beq.n	80053a8 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4413      	add	r3, r2
 8005380:	881b      	ldrh	r3, [r3, #0]
 8005382:	b29b      	uxth	r3, r3
 8005384:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005388:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800538c:	b29c      	uxth	r4, r3
 800538e:	f084 0310 	eor.w	r3, r4, #16
 8005392:	b29c      	uxth	r4, r3
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	441a      	add	r2, r3
 800539e:	4b11      	ldr	r3, [pc, #68]	; (80053e4 <USB_EPSetStall+0x80>)
 80053a0:	4323      	orrs	r3, r4
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	8013      	strh	r3, [r2, #0]
 80053a6:	e017      	b.n	80053d8 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	881b      	ldrh	r3, [r3, #0]
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053be:	b29c      	uxth	r4, r3
 80053c0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80053c4:	b29c      	uxth	r4, r3
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	441a      	add	r2, r3
 80053d0:	4b04      	ldr	r3, [pc, #16]	; (80053e4 <USB_EPSetStall+0x80>)
 80053d2:	4323      	orrs	r3, r4
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bc90      	pop	{r4, r7}
 80053e2:	4770      	bx	lr
 80053e4:	ffff8080 	.word	0xffff8080

080053e8 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053e8:	b490      	push	{r4, r7}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	7b1b      	ldrb	r3, [r3, #12]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d17d      	bne.n	80054f6 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	785b      	ldrb	r3, [r3, #1]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d03d      	beq.n	800547e <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	881b      	ldrh	r3, [r3, #0]
 800540e:	b29c      	uxth	r4, r3
 8005410:	4623      	mov	r3, r4
 8005412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005416:	2b00      	cmp	r3, #0
 8005418:	d014      	beq.n	8005444 <USB_EPClearStall+0x5c>
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4413      	add	r3, r2
 8005424:	881b      	ldrh	r3, [r3, #0]
 8005426:	b29b      	uxth	r3, r3
 8005428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800542c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005430:	b29c      	uxth	r4, r3
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	441a      	add	r2, r3
 800543c:	4b31      	ldr	r3, [pc, #196]	; (8005504 <USB_EPClearStall+0x11c>)
 800543e:	4323      	orrs	r3, r4
 8005440:	b29b      	uxth	r3, r3
 8005442:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	78db      	ldrb	r3, [r3, #3]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d054      	beq.n	80054f6 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4413      	add	r3, r2
 8005456:	881b      	ldrh	r3, [r3, #0]
 8005458:	b29b      	uxth	r3, r3
 800545a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800545e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005462:	b29c      	uxth	r4, r3
 8005464:	f084 0320 	eor.w	r3, r4, #32
 8005468:	b29c      	uxth	r4, r3
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	441a      	add	r2, r3
 8005474:	4b24      	ldr	r3, [pc, #144]	; (8005508 <USB_EPClearStall+0x120>)
 8005476:	4323      	orrs	r3, r4
 8005478:	b29b      	uxth	r3, r3
 800547a:	8013      	strh	r3, [r2, #0]
 800547c:	e03b      	b.n	80054f6 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4413      	add	r3, r2
 8005488:	881b      	ldrh	r3, [r3, #0]
 800548a:	b29c      	uxth	r4, r3
 800548c:	4623      	mov	r3, r4
 800548e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d014      	beq.n	80054c0 <USB_EPClearStall+0xd8>
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	4413      	add	r3, r2
 80054a0:	881b      	ldrh	r3, [r3, #0]
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ac:	b29c      	uxth	r4, r3
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	441a      	add	r2, r3
 80054b8:	4b14      	ldr	r3, [pc, #80]	; (800550c <USB_EPClearStall+0x124>)
 80054ba:	4323      	orrs	r3, r4
 80054bc:	b29b      	uxth	r3, r3
 80054be:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	881b      	ldrh	r3, [r3, #0]
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054d6:	b29c      	uxth	r4, r3
 80054d8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80054dc:	b29c      	uxth	r4, r3
 80054de:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80054e2:	b29c      	uxth	r4, r3
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	441a      	add	r2, r3
 80054ee:	4b06      	ldr	r3, [pc, #24]	; (8005508 <USB_EPClearStall+0x120>)
 80054f0:	4323      	orrs	r3, r4
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3708      	adds	r7, #8
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bc90      	pop	{r4, r7}
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	ffff80c0 	.word	0xffff80c0
 8005508:	ffff8080 	.word	0xffff8080
 800550c:	ffffc080 	.word	0xffffc080

08005510 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	460b      	mov	r3, r1
 800551a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800551c:	78fb      	ldrb	r3, [r7, #3]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d103      	bne.n	800552a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2280      	movs	r2, #128	; 0x80
 8005526:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	bc80      	pop	{r7}
 8005534:	4770      	bx	lr

08005536 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	bc80      	pop	{r7}
 8005548:	4770      	bx	lr

0800554a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800554a:	b480      	push	{r7}
 800554c:	b083      	sub	sp, #12
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	bc80      	pop	{r7}
 800555c:	4770      	bx	lr

0800555e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800555e:	b480      	push	{r7}
 8005560:	b085      	sub	sp, #20
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800556c:	b29b      	uxth	r3, r3
 800556e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005570:	68fb      	ldr	r3, [r7, #12]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	bc80      	pop	{r7}
 800557a:	4770      	bx	lr

0800557c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	bc80      	pop	{r7}
 8005590:	4770      	bx	lr

08005592 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005592:	b480      	push	{r7}
 8005594:	b08d      	sub	sp, #52	; 0x34
 8005596:	af00      	add	r7, sp, #0
 8005598:	60f8      	str	r0, [r7, #12]
 800559a:	60b9      	str	r1, [r7, #8]
 800559c:	4611      	mov	r1, r2
 800559e:	461a      	mov	r2, r3
 80055a0:	460b      	mov	r3, r1
 80055a2:	80fb      	strh	r3, [r7, #6]
 80055a4:	4613      	mov	r3, r2
 80055a6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80055a8:	88bb      	ldrh	r3, [r7, #4]
 80055aa:	3301      	adds	r3, #1
 80055ac:	085b      	lsrs	r3, r3, #1
 80055ae:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80055b8:	88fb      	ldrh	r3, [r7, #6]
 80055ba:	005a      	lsls	r2, r3, #1
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055c4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055ca:	e01e      	b.n	800560a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80055cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	3301      	adds	r3, #1
 80055d6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80055d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	b29b      	uxth	r3, r3
 80055de:	021b      	lsls	r3, r3, #8
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	461a      	mov	r2, r3
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80055f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f4:	3302      	adds	r3, #2
 80055f6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80055f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fa:	3302      	adds	r3, #2
 80055fc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	3301      	adds	r3, #1
 8005602:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005606:	3b01      	subs	r3, #1
 8005608:	62fb      	str	r3, [r7, #44]	; 0x2c
 800560a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1dd      	bne.n	80055cc <USB_WritePMA+0x3a>
  }
}
 8005610:	bf00      	nop
 8005612:	3734      	adds	r7, #52	; 0x34
 8005614:	46bd      	mov	sp, r7
 8005616:	bc80      	pop	{r7}
 8005618:	4770      	bx	lr

0800561a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800561a:	b480      	push	{r7}
 800561c:	b08b      	sub	sp, #44	; 0x2c
 800561e:	af00      	add	r7, sp, #0
 8005620:	60f8      	str	r0, [r7, #12]
 8005622:	60b9      	str	r1, [r7, #8]
 8005624:	4611      	mov	r1, r2
 8005626:	461a      	mov	r2, r3
 8005628:	460b      	mov	r3, r1
 800562a:	80fb      	strh	r3, [r7, #6]
 800562c:	4613      	mov	r3, r2
 800562e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005630:	88bb      	ldrh	r3, [r7, #4]
 8005632:	085b      	lsrs	r3, r3, #1
 8005634:	b29b      	uxth	r3, r3
 8005636:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005640:	88fb      	ldrh	r3, [r7, #6]
 8005642:	005a      	lsls	r2, r3, #1
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	4413      	add	r3, r2
 8005648:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800564c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	627b      	str	r3, [r7, #36]	; 0x24
 8005652:	e01b      	b.n	800568c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005654:	6a3b      	ldr	r3, [r7, #32]
 8005656:	881b      	ldrh	r3, [r3, #0]
 8005658:	b29b      	uxth	r3, r3
 800565a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800565c:	6a3b      	ldr	r3, [r7, #32]
 800565e:	3302      	adds	r3, #2
 8005660:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	b2da      	uxtb	r2, r3
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	3301      	adds	r3, #1
 800566e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	0a1b      	lsrs	r3, r3, #8
 8005674:	b2da      	uxtb	r2, r3
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	3301      	adds	r3, #1
 800567e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005680:	6a3b      	ldr	r3, [r7, #32]
 8005682:	3302      	adds	r3, #2
 8005684:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005688:	3b01      	subs	r3, #1
 800568a:	627b      	str	r3, [r7, #36]	; 0x24
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1e0      	bne.n	8005654 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005692:	88bb      	ldrh	r3, [r7, #4]
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	b29b      	uxth	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d007      	beq.n	80056ae <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	701a      	strb	r2, [r3, #0]
  }
}
 80056ae:	bf00      	nop
 80056b0:	372c      	adds	r7, #44	; 0x2c
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bc80      	pop	{r7}
 80056b6:	4770      	bx	lr

080056b8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	460b      	mov	r3, r1
 80056c2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80056c4:	2300      	movs	r3, #0
 80056c6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	7c1b      	ldrb	r3, [r3, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d115      	bne.n	80056fc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80056d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056d4:	2202      	movs	r2, #2
 80056d6:	2181      	movs	r1, #129	; 0x81
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f001 fe8e 	bl	80073fa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80056e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056e8:	2202      	movs	r2, #2
 80056ea:	2101      	movs	r1, #1
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f001 fe84 	bl	80073fa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80056fa:	e012      	b.n	8005722 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80056fc:	2340      	movs	r3, #64	; 0x40
 80056fe:	2202      	movs	r2, #2
 8005700:	2181      	movs	r1, #129	; 0x81
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f001 fe79 	bl	80073fa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800570e:	2340      	movs	r3, #64	; 0x40
 8005710:	2202      	movs	r2, #2
 8005712:	2101      	movs	r1, #1
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f001 fe70 	bl	80073fa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005722:	2308      	movs	r3, #8
 8005724:	2203      	movs	r2, #3
 8005726:	2182      	movs	r1, #130	; 0x82
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f001 fe66 	bl	80073fa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005734:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005738:	f001 ff80 	bl	800763c <USBD_static_malloc>
 800573c:	4602      	mov	r2, r0
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800574a:	2b00      	cmp	r3, #0
 800574c:	d102      	bne.n	8005754 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800574e:	2301      	movs	r3, #1
 8005750:	73fb      	strb	r3, [r7, #15]
 8005752:	e026      	b.n	80057a2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800575a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	2200      	movs	r2, #0
 800576a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	2200      	movs	r2, #0
 8005772:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	7c1b      	ldrb	r3, [r3, #16]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d109      	bne.n	8005792 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005784:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005788:	2101      	movs	r1, #1
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f001 ff1f 	bl	80075ce <USBD_LL_PrepareReceive>
 8005790:	e007      	b.n	80057a2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005798:	2340      	movs	r3, #64	; 0x40
 800579a:	2101      	movs	r1, #1
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f001 ff16 	bl	80075ce <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80057a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	460b      	mov	r3, r1
 80057b6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80057b8:	2300      	movs	r3, #0
 80057ba:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80057bc:	2181      	movs	r1, #129	; 0x81
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f001 fe41 	bl	8007446 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80057ca:	2101      	movs	r1, #1
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f001 fe3a 	bl	8007446 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80057da:	2182      	movs	r1, #130	; 0x82
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f001 fe32 	bl	8007446 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00e      	beq.n	8005810 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005802:	4618      	mov	r0, r3
 8005804:	f001 ff26 	bl	8007654 <USBD_static_free>
    pdev->pClassData = NULL;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005810:	7bfb      	ldrb	r3, [r7, #15]
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b086      	sub	sp, #24
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
 8005822:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800582a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800582c:	2300      	movs	r3, #0
 800582e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005834:	2300      	movs	r3, #0
 8005836:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005840:	2b00      	cmp	r3, #0
 8005842:	d039      	beq.n	80058b8 <USBD_CDC_Setup+0x9e>
 8005844:	2b20      	cmp	r3, #32
 8005846:	d17c      	bne.n	8005942 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	88db      	ldrh	r3, [r3, #6]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d029      	beq.n	80058a4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	b25b      	sxtb	r3, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	da11      	bge.n	800587e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	683a      	ldr	r2, [r7, #0]
 8005864:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005866:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005868:	683a      	ldr	r2, [r7, #0]
 800586a:	88d2      	ldrh	r2, [r2, #6]
 800586c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800586e:	6939      	ldr	r1, [r7, #16]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	88db      	ldrh	r3, [r3, #6]
 8005874:	461a      	mov	r2, r3
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f001 f9f6 	bl	8006c68 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800587c:	e068      	b.n	8005950 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	785a      	ldrb	r2, [r3, #1]
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	88db      	ldrh	r3, [r3, #6]
 800588c:	b2da      	uxtb	r2, r3
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005894:	6939      	ldr	r1, [r7, #16]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	88db      	ldrh	r3, [r3, #6]
 800589a:	461a      	mov	r2, r3
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f001 fa11 	bl	8006cc4 <USBD_CtlPrepareRx>
      break;
 80058a2:	e055      	b.n	8005950 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	7850      	ldrb	r0, [r2, #1]
 80058b0:	2200      	movs	r2, #0
 80058b2:	6839      	ldr	r1, [r7, #0]
 80058b4:	4798      	blx	r3
      break;
 80058b6:	e04b      	b.n	8005950 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	785b      	ldrb	r3, [r3, #1]
 80058bc:	2b0a      	cmp	r3, #10
 80058be:	d017      	beq.n	80058f0 <USBD_CDC_Setup+0xd6>
 80058c0:	2b0b      	cmp	r3, #11
 80058c2:	d029      	beq.n	8005918 <USBD_CDC_Setup+0xfe>
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d133      	bne.n	8005930 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058ce:	2b03      	cmp	r3, #3
 80058d0:	d107      	bne.n	80058e2 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80058d2:	f107 030c 	add.w	r3, r7, #12
 80058d6:	2202      	movs	r2, #2
 80058d8:	4619      	mov	r1, r3
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f001 f9c4 	bl	8006c68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058e0:	e02e      	b.n	8005940 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80058e2:	6839      	ldr	r1, [r7, #0]
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f001 f955 	bl	8006b94 <USBD_CtlError>
            ret = USBD_FAIL;
 80058ea:	2302      	movs	r3, #2
 80058ec:	75fb      	strb	r3, [r7, #23]
          break;
 80058ee:	e027      	b.n	8005940 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058f6:	2b03      	cmp	r3, #3
 80058f8:	d107      	bne.n	800590a <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80058fa:	f107 030f 	add.w	r3, r7, #15
 80058fe:	2201      	movs	r2, #1
 8005900:	4619      	mov	r1, r3
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f001 f9b0 	bl	8006c68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005908:	e01a      	b.n	8005940 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800590a:	6839      	ldr	r1, [r7, #0]
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f001 f941 	bl	8006b94 <USBD_CtlError>
            ret = USBD_FAIL;
 8005912:	2302      	movs	r3, #2
 8005914:	75fb      	strb	r3, [r7, #23]
          break;
 8005916:	e013      	b.n	8005940 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800591e:	2b03      	cmp	r3, #3
 8005920:	d00d      	beq.n	800593e <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8005922:	6839      	ldr	r1, [r7, #0]
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f001 f935 	bl	8006b94 <USBD_CtlError>
            ret = USBD_FAIL;
 800592a:	2302      	movs	r3, #2
 800592c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800592e:	e006      	b.n	800593e <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8005930:	6839      	ldr	r1, [r7, #0]
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f001 f92e 	bl	8006b94 <USBD_CtlError>
          ret = USBD_FAIL;
 8005938:	2302      	movs	r3, #2
 800593a:	75fb      	strb	r3, [r7, #23]
          break;
 800593c:	e000      	b.n	8005940 <USBD_CDC_Setup+0x126>
          break;
 800593e:	bf00      	nop
      }
      break;
 8005940:	e006      	b.n	8005950 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8005942:	6839      	ldr	r1, [r7, #0]
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f001 f925 	bl	8006b94 <USBD_CtlError>
      ret = USBD_FAIL;
 800594a:	2302      	movs	r3, #2
 800594c:	75fb      	strb	r3, [r7, #23]
      break;
 800594e:	bf00      	nop
  }

  return ret;
 8005950:	7dfb      	ldrb	r3, [r7, #23]
}
 8005952:	4618      	mov	r0, r3
 8005954:	3718      	adds	r7, #24
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b084      	sub	sp, #16
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
 8005962:	460b      	mov	r3, r1
 8005964:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800596c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005974:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800597c:	2b00      	cmp	r3, #0
 800597e:	d037      	beq.n	80059f0 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005980:	78fa      	ldrb	r2, [r7, #3]
 8005982:	6879      	ldr	r1, [r7, #4]
 8005984:	4613      	mov	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	440b      	add	r3, r1
 800598e:	331c      	adds	r3, #28
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d026      	beq.n	80059e4 <USBD_CDC_DataIn+0x8a>
 8005996:	78fa      	ldrb	r2, [r7, #3]
 8005998:	6879      	ldr	r1, [r7, #4]
 800599a:	4613      	mov	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4413      	add	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	440b      	add	r3, r1
 80059a4:	331c      	adds	r3, #28
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	78fa      	ldrb	r2, [r7, #3]
 80059aa:	68b9      	ldr	r1, [r7, #8]
 80059ac:	0152      	lsls	r2, r2, #5
 80059ae:	440a      	add	r2, r1
 80059b0:	3238      	adds	r2, #56	; 0x38
 80059b2:	6812      	ldr	r2, [r2, #0]
 80059b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80059b8:	fb02 f201 	mul.w	r2, r2, r1
 80059bc:	1a9b      	subs	r3, r3, r2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d110      	bne.n	80059e4 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80059c2:	78fa      	ldrb	r2, [r7, #3]
 80059c4:	6879      	ldr	r1, [r7, #4]
 80059c6:	4613      	mov	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4413      	add	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	440b      	add	r3, r1
 80059d0:	331c      	adds	r3, #28
 80059d2:	2200      	movs	r2, #0
 80059d4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80059d6:	78f9      	ldrb	r1, [r7, #3]
 80059d8:	2300      	movs	r3, #0
 80059da:	2200      	movs	r2, #0
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f001 fdd3 	bl	8007588 <USBD_LL_Transmit>
 80059e2:	e003      	b.n	80059ec <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80059ec:	2300      	movs	r3, #0
 80059ee:	e000      	b.n	80059f2 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 80059f0:	2302      	movs	r3, #2
  }
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b084      	sub	sp, #16
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
 8005a02:	460b      	mov	r3, r1
 8005a04:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a0c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005a0e:	78fb      	ldrb	r3, [r7, #3]
 8005a10:	4619      	mov	r1, r3
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f001 fdfe 	bl	8007614 <USBD_LL_GetRxDataSize>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00d      	beq.n	8005a46 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005a3e:	4611      	mov	r1, r2
 8005a40:	4798      	blx	r3

    return USBD_OK;
 8005a42:	2300      	movs	r3, #0
 8005a44:	e000      	b.n	8005a48 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005a46:	2302      	movs	r3, #2
  }
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3710      	adds	r7, #16
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a5e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d015      	beq.n	8005a96 <USBD_CDC_EP0_RxReady+0x46>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005a70:	2bff      	cmp	r3, #255	; 0xff
 8005a72:	d010      	beq.n	8005a96 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005a82:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005a8a:	b292      	uxth	r2, r2
 8005a8c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	22ff      	movs	r2, #255	; 0xff
 8005a92:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2243      	movs	r2, #67	; 0x43
 8005aac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005aae:	4b03      	ldr	r3, [pc, #12]	; (8005abc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bc80      	pop	{r7}
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	200000a0 	.word	0x200000a0

08005ac0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2243      	movs	r2, #67	; 0x43
 8005acc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005ace:	4b03      	ldr	r3, [pc, #12]	; (8005adc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bc80      	pop	{r7}
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	2000005c 	.word	0x2000005c

08005ae0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2243      	movs	r2, #67	; 0x43
 8005aec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005aee:	4b03      	ldr	r3, [pc, #12]	; (8005afc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bc80      	pop	{r7}
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	200000e4 	.word	0x200000e4

08005b00 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	220a      	movs	r2, #10
 8005b0c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005b0e:	4b03      	ldr	r3, [pc, #12]	; (8005b1c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bc80      	pop	{r7}
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	20000018 	.word	0x20000018

08005b20 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005b2a:	2302      	movs	r3, #2
 8005b2c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d005      	beq.n	8005b40 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bc80      	pop	{r7}
 8005b4a:	4770      	bx	lr

08005b4c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b087      	sub	sp, #28
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	4613      	mov	r3, r2
 8005b58:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b60:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005b6a:	88fa      	ldrh	r2, [r7, #6]
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	371c      	adds	r7, #28
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bc80      	pop	{r7}
 8005b7c:	4770      	bx	lr

08005b7e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b085      	sub	sp, #20
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
 8005b86:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b8e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	683a      	ldr	r2, [r7, #0]
 8005b94:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3714      	adds	r7, #20
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bc80      	pop	{r7}
 8005ba2:	4770      	bx	lr

08005ba4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bb2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d01c      	beq.n	8005bf8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d115      	bne.n	8005bf4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	2181      	movs	r1, #129	; 0x81
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f001 fccc 	bl	8007588 <USBD_LL_Transmit>

      return USBD_OK;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	e002      	b.n	8005bfa <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e000      	b.n	8005bfa <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005bf8:	2302      	movs	r3, #2
  }
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b084      	sub	sp, #16
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c10:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d017      	beq.n	8005c4c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	7c1b      	ldrb	r3, [r3, #16]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d109      	bne.n	8005c38 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c2e:	2101      	movs	r1, #1
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f001 fccc 	bl	80075ce <USBD_LL_PrepareReceive>
 8005c36:	e007      	b.n	8005c48 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c3e:	2340      	movs	r3, #64	; 0x40
 8005c40:	2101      	movs	r1, #1
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f001 fcc3 	bl	80075ce <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	e000      	b.n	8005c4e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005c4c:	2302      	movs	r3, #2
  }
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b084      	sub	sp, #16
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	60f8      	str	r0, [r7, #12]
 8005c5e:	60b9      	str	r1, [r7, #8]
 8005c60:	4613      	mov	r3, r2
 8005c62:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005c6a:	2302      	movs	r3, #2
 8005c6c:	e01a      	b.n	8005ca4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d003      	beq.n	8005c80 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	79fa      	ldrb	r2, [r7, #7]
 8005c9a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f001 fb37 	bl	8007310 <USBD_LL_Init>

  return USBD_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d006      	beq.n	8005cce <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	73fb      	strb	r3, [r7, #15]
 8005ccc:	e001      	b.n	8005cd2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005cce:	2302      	movs	r3, #2
 8005cd0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bc80      	pop	{r7}
 8005cdc:	4770      	bx	lr

08005cde <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b082      	sub	sp, #8
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f001 fb6c 	bl	80073c4 <USBD_LL_Start>

  return USBD_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3708      	adds	r7, #8
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b083      	sub	sp, #12
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bc80      	pop	{r7}
 8005d08:	4770      	bx	lr

08005d0a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b084      	sub	sp, #16
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
 8005d12:	460b      	mov	r3, r1
 8005d14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005d16:	2302      	movs	r3, #2
 8005d18:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00c      	beq.n	8005d3e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	78fa      	ldrb	r2, [r7, #3]
 8005d2e:	4611      	mov	r1, r2
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	4798      	blx	r3
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	460b      	mov	r3, r1
 8005d52:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	78fa      	ldrb	r2, [r7, #3]
 8005d5e:	4611      	mov	r1, r2
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	4798      	blx	r3

  return USBD_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3708      	adds	r7, #8
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b082      	sub	sp, #8
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
 8005d76:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005d7e:	6839      	ldr	r1, [r7, #0]
 8005d80:	4618      	mov	r0, r3
 8005d82:	f000 fecb 	bl	8006b1c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005d94:	461a      	mov	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005da2:	f003 031f 	and.w	r3, r3, #31
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d00c      	beq.n	8005dc4 <USBD_LL_SetupStage+0x56>
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d302      	bcc.n	8005db4 <USBD_LL_SetupStage+0x46>
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d010      	beq.n	8005dd4 <USBD_LL_SetupStage+0x66>
 8005db2:	e017      	b.n	8005de4 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005dba:	4619      	mov	r1, r3
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f9cb 	bl	8006158 <USBD_StdDevReq>
      break;
 8005dc2:	e01a      	b.n	8005dfa <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005dca:	4619      	mov	r1, r3
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 fa2d 	bl	800622c <USBD_StdItfReq>
      break;
 8005dd2:	e012      	b.n	8005dfa <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005dda:	4619      	mov	r1, r3
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 fa6b 	bl	80062b8 <USBD_StdEPReq>
      break;
 8005de2:	e00a      	b.n	8005dfa <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005dea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	4619      	mov	r1, r3
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f001 fb46 	bl	8007484 <USBD_LL_StallEP>
      break;
 8005df8:	bf00      	nop
  }

  return USBD_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3708      	adds	r7, #8
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	607a      	str	r2, [r7, #4]
 8005e10:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005e12:	7afb      	ldrb	r3, [r7, #11]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d14b      	bne.n	8005eb0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005e1e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e26:	2b03      	cmp	r3, #3
 8005e28:	d134      	bne.n	8005e94 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	68da      	ldr	r2, [r3, #12]
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d919      	bls.n	8005e6a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	68da      	ldr	r2, [r3, #12]
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	1ad2      	subs	r2, r2, r3
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	68da      	ldr	r2, [r3, #12]
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d203      	bcs.n	8005e58 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	e002      	b.n	8005e5e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	461a      	mov	r2, r3
 8005e60:	6879      	ldr	r1, [r7, #4]
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f000 ff4c 	bl	8006d00 <USBD_CtlContinueRx>
 8005e68:	e038      	b.n	8005edc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00a      	beq.n	8005e8c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005e7c:	2b03      	cmp	r3, #3
 8005e7e:	d105      	bne.n	8005e8c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	f000 ff49 	bl	8006d24 <USBD_CtlSendStatus>
 8005e92:	e023      	b.n	8005edc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e9a:	2b05      	cmp	r3, #5
 8005e9c:	d11e      	bne.n	8005edc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f001 faeb 	bl	8007484 <USBD_LL_StallEP>
 8005eae:	e015      	b.n	8005edc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00d      	beq.n	8005ed8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005ec2:	2b03      	cmp	r3, #3
 8005ec4:	d108      	bne.n	8005ed8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	7afa      	ldrb	r2, [r7, #11]
 8005ed0:	4611      	mov	r1, r2
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	4798      	blx	r3
 8005ed6:	e001      	b.n	8005edc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005ed8:	2302      	movs	r3, #2
 8005eda:	e000      	b.n	8005ede <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3718      	adds	r7, #24
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b086      	sub	sp, #24
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	60f8      	str	r0, [r7, #12]
 8005eee:	460b      	mov	r3, r1
 8005ef0:	607a      	str	r2, [r7, #4]
 8005ef2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005ef4:	7afb      	ldrb	r3, [r7, #11]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d17f      	bne.n	8005ffa <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	3314      	adds	r3, #20
 8005efe:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d15c      	bne.n	8005fc4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	68da      	ldr	r2, [r3, #12]
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d915      	bls.n	8005f42 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	68da      	ldr	r2, [r3, #12]
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	1ad2      	subs	r2, r2, r3
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	6879      	ldr	r1, [r7, #4]
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f000 feb6 	bl	8006ca0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f34:	2300      	movs	r3, #0
 8005f36:	2200      	movs	r2, #0
 8005f38:	2100      	movs	r1, #0
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f001 fb47 	bl	80075ce <USBD_LL_PrepareReceive>
 8005f40:	e04e      	b.n	8005fe0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	6912      	ldr	r2, [r2, #16]
 8005f4a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f4e:	fb02 f201 	mul.w	r2, r2, r1
 8005f52:	1a9b      	subs	r3, r3, r2
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d11c      	bne.n	8005f92 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	689a      	ldr	r2, [r3, #8]
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d316      	bcc.n	8005f92 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	689a      	ldr	r2, [r3, #8]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d20f      	bcs.n	8005f92 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005f72:	2200      	movs	r2, #0
 8005f74:	2100      	movs	r1, #0
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f000 fe92 	bl	8006ca0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f84:	2300      	movs	r3, #0
 8005f86:	2200      	movs	r2, #0
 8005f88:	2100      	movs	r1, #0
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f001 fb1f 	bl	80075ce <USBD_LL_PrepareReceive>
 8005f90:	e026      	b.n	8005fe0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00a      	beq.n	8005fb4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005fa4:	2b03      	cmp	r3, #3
 8005fa6:	d105      	bne.n	8005fb4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005fb4:	2180      	movs	r1, #128	; 0x80
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f001 fa64 	bl	8007484 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 fec4 	bl	8006d4a <USBD_CtlReceiveStatus>
 8005fc2:	e00d      	b.n	8005fe0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005fca:	2b04      	cmp	r3, #4
 8005fcc:	d004      	beq.n	8005fd8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d103      	bne.n	8005fe0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005fd8:	2180      	movs	r1, #128	; 0x80
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f001 fa52 	bl	8007484 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d11d      	bne.n	8006026 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f7ff fe83 	bl	8005cf6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005ff8:	e015      	b.n	8006026 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00d      	beq.n	8006022 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800600c:	2b03      	cmp	r3, #3
 800600e:	d108      	bne.n	8006022 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	7afa      	ldrb	r2, [r7, #11]
 800601a:	4611      	mov	r1, r2
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	4798      	blx	r3
 8006020:	e001      	b.n	8006026 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006022:	2302      	movs	r3, #2
 8006024:	e000      	b.n	8006028 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3718      	adds	r7, #24
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006038:	2340      	movs	r3, #64	; 0x40
 800603a:	2200      	movs	r2, #0
 800603c:	2100      	movs	r1, #0
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f001 f9db 	bl	80073fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2240      	movs	r2, #64	; 0x40
 8006050:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006054:	2340      	movs	r3, #64	; 0x40
 8006056:	2200      	movs	r2, #0
 8006058:	2180      	movs	r1, #128	; 0x80
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f001 f9cd 	bl	80073fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2240      	movs	r2, #64	; 0x40
 800606a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006090:	2b00      	cmp	r3, #0
 8006092:	d009      	beq.n	80060a8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	6852      	ldr	r2, [r2, #4]
 80060a0:	b2d2      	uxtb	r2, r2
 80060a2:	4611      	mov	r1, r2
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	4798      	blx	r3
  }

  return USBD_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
 80060ba:	460b      	mov	r3, r1
 80060bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	78fa      	ldrb	r2, [r7, #3]
 80060c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bc80      	pop	{r7}
 80060ce:	4770      	bx	lr

080060d0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2204      	movs	r2, #4
 80060e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	370c      	adds	r7, #12
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bc80      	pop	{r7}
 80060f6:	4770      	bx	lr

080060f8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006106:	2b04      	cmp	r3, #4
 8006108:	d105      	bne.n	8006116 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	bc80      	pop	{r7}
 8006120:	4770      	bx	lr

08006122 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b082      	sub	sp, #8
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006130:	2b03      	cmp	r3, #3
 8006132:	d10b      	bne.n	800614c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800613a:	69db      	ldr	r3, [r3, #28]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d005      	beq.n	800614c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006146:	69db      	ldr	r3, [r3, #28]
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
	...

08006158 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006162:	2300      	movs	r3, #0
 8006164:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800616e:	2b20      	cmp	r3, #32
 8006170:	d004      	beq.n	800617c <USBD_StdDevReq+0x24>
 8006172:	2b40      	cmp	r3, #64	; 0x40
 8006174:	d002      	beq.n	800617c <USBD_StdDevReq+0x24>
 8006176:	2b00      	cmp	r3, #0
 8006178:	d008      	beq.n	800618c <USBD_StdDevReq+0x34>
 800617a:	e04c      	b.n	8006216 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	6839      	ldr	r1, [r7, #0]
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	4798      	blx	r3
      break;
 800618a:	e049      	b.n	8006220 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	785b      	ldrb	r3, [r3, #1]
 8006190:	2b09      	cmp	r3, #9
 8006192:	d83a      	bhi.n	800620a <USBD_StdDevReq+0xb2>
 8006194:	a201      	add	r2, pc, #4	; (adr r2, 800619c <USBD_StdDevReq+0x44>)
 8006196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619a:	bf00      	nop
 800619c:	080061ed 	.word	0x080061ed
 80061a0:	08006201 	.word	0x08006201
 80061a4:	0800620b 	.word	0x0800620b
 80061a8:	080061f7 	.word	0x080061f7
 80061ac:	0800620b 	.word	0x0800620b
 80061b0:	080061cf 	.word	0x080061cf
 80061b4:	080061c5 	.word	0x080061c5
 80061b8:	0800620b 	.word	0x0800620b
 80061bc:	080061e3 	.word	0x080061e3
 80061c0:	080061d9 	.word	0x080061d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80061c4:	6839      	ldr	r1, [r7, #0]
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f9d4 	bl	8006574 <USBD_GetDescriptor>
          break;
 80061cc:	e022      	b.n	8006214 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80061ce:	6839      	ldr	r1, [r7, #0]
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 fb37 	bl	8006844 <USBD_SetAddress>
          break;
 80061d6:	e01d      	b.n	8006214 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80061d8:	6839      	ldr	r1, [r7, #0]
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fb74 	bl	80068c8 <USBD_SetConfig>
          break;
 80061e0:	e018      	b.n	8006214 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80061e2:	6839      	ldr	r1, [r7, #0]
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 fbfd 	bl	80069e4 <USBD_GetConfig>
          break;
 80061ea:	e013      	b.n	8006214 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80061ec:	6839      	ldr	r1, [r7, #0]
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fc2c 	bl	8006a4c <USBD_GetStatus>
          break;
 80061f4:	e00e      	b.n	8006214 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80061f6:	6839      	ldr	r1, [r7, #0]
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fc5a 	bl	8006ab2 <USBD_SetFeature>
          break;
 80061fe:	e009      	b.n	8006214 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006200:	6839      	ldr	r1, [r7, #0]
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fc69 	bl	8006ada <USBD_ClrFeature>
          break;
 8006208:	e004      	b.n	8006214 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800620a:	6839      	ldr	r1, [r7, #0]
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 fcc1 	bl	8006b94 <USBD_CtlError>
          break;
 8006212:	bf00      	nop
      }
      break;
 8006214:	e004      	b.n	8006220 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006216:	6839      	ldr	r1, [r7, #0]
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 fcbb 	bl	8006b94 <USBD_CtlError>
      break;
 800621e:	bf00      	nop
  }

  return ret;
 8006220:	7bfb      	ldrb	r3, [r7, #15]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop

0800622c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006236:	2300      	movs	r3, #0
 8006238:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006242:	2b20      	cmp	r3, #32
 8006244:	d003      	beq.n	800624e <USBD_StdItfReq+0x22>
 8006246:	2b40      	cmp	r3, #64	; 0x40
 8006248:	d001      	beq.n	800624e <USBD_StdItfReq+0x22>
 800624a:	2b00      	cmp	r3, #0
 800624c:	d12a      	bne.n	80062a4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006254:	3b01      	subs	r3, #1
 8006256:	2b02      	cmp	r3, #2
 8006258:	d81d      	bhi.n	8006296 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	889b      	ldrh	r3, [r3, #4]
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b01      	cmp	r3, #1
 8006262:	d813      	bhi.n	800628c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	6839      	ldr	r1, [r7, #0]
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	4798      	blx	r3
 8006272:	4603      	mov	r3, r0
 8006274:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	88db      	ldrh	r3, [r3, #6]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d110      	bne.n	80062a0 <USBD_StdItfReq+0x74>
 800627e:	7bfb      	ldrb	r3, [r7, #15]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10d      	bne.n	80062a0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 fd4d 	bl	8006d24 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800628a:	e009      	b.n	80062a0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800628c:	6839      	ldr	r1, [r7, #0]
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fc80 	bl	8006b94 <USBD_CtlError>
          break;
 8006294:	e004      	b.n	80062a0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006296:	6839      	ldr	r1, [r7, #0]
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fc7b 	bl	8006b94 <USBD_CtlError>
          break;
 800629e:	e000      	b.n	80062a2 <USBD_StdItfReq+0x76>
          break;
 80062a0:	bf00      	nop
      }
      break;
 80062a2:	e004      	b.n	80062ae <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80062a4:	6839      	ldr	r1, [r7, #0]
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fc74 	bl	8006b94 <USBD_CtlError>
      break;
 80062ac:	bf00      	nop
  }

  return USBD_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3710      	adds	r7, #16
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80062c2:	2300      	movs	r3, #0
 80062c4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	889b      	ldrh	r3, [r3, #4]
 80062ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062d4:	2b20      	cmp	r3, #32
 80062d6:	d004      	beq.n	80062e2 <USBD_StdEPReq+0x2a>
 80062d8:	2b40      	cmp	r3, #64	; 0x40
 80062da:	d002      	beq.n	80062e2 <USBD_StdEPReq+0x2a>
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d008      	beq.n	80062f2 <USBD_StdEPReq+0x3a>
 80062e0:	e13d      	b.n	800655e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	6839      	ldr	r1, [r7, #0]
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	4798      	blx	r3
      break;
 80062f0:	e13a      	b.n	8006568 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062fa:	2b20      	cmp	r3, #32
 80062fc:	d10a      	bne.n	8006314 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	6839      	ldr	r1, [r7, #0]
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	4798      	blx	r3
 800630c:	4603      	mov	r3, r0
 800630e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006310:	7bfb      	ldrb	r3, [r7, #15]
 8006312:	e12a      	b.n	800656a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	785b      	ldrb	r3, [r3, #1]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d03e      	beq.n	800639a <USBD_StdEPReq+0xe2>
 800631c:	2b03      	cmp	r3, #3
 800631e:	d002      	beq.n	8006326 <USBD_StdEPReq+0x6e>
 8006320:	2b00      	cmp	r3, #0
 8006322:	d070      	beq.n	8006406 <USBD_StdEPReq+0x14e>
 8006324:	e115      	b.n	8006552 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800632c:	2b02      	cmp	r3, #2
 800632e:	d002      	beq.n	8006336 <USBD_StdEPReq+0x7e>
 8006330:	2b03      	cmp	r3, #3
 8006332:	d015      	beq.n	8006360 <USBD_StdEPReq+0xa8>
 8006334:	e02b      	b.n	800638e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006336:	7bbb      	ldrb	r3, [r7, #14]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00c      	beq.n	8006356 <USBD_StdEPReq+0x9e>
 800633c:	7bbb      	ldrb	r3, [r7, #14]
 800633e:	2b80      	cmp	r3, #128	; 0x80
 8006340:	d009      	beq.n	8006356 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006342:	7bbb      	ldrb	r3, [r7, #14]
 8006344:	4619      	mov	r1, r3
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f001 f89c 	bl	8007484 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800634c:	2180      	movs	r1, #128	; 0x80
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f001 f898 	bl	8007484 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006354:	e020      	b.n	8006398 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006356:	6839      	ldr	r1, [r7, #0]
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 fc1b 	bl	8006b94 <USBD_CtlError>
              break;
 800635e:	e01b      	b.n	8006398 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	885b      	ldrh	r3, [r3, #2]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10e      	bne.n	8006386 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006368:	7bbb      	ldrb	r3, [r7, #14]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00b      	beq.n	8006386 <USBD_StdEPReq+0xce>
 800636e:	7bbb      	ldrb	r3, [r7, #14]
 8006370:	2b80      	cmp	r3, #128	; 0x80
 8006372:	d008      	beq.n	8006386 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	88db      	ldrh	r3, [r3, #6]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d104      	bne.n	8006386 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800637c:	7bbb      	ldrb	r3, [r7, #14]
 800637e:	4619      	mov	r1, r3
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f001 f87f 	bl	8007484 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 fccc 	bl	8006d24 <USBD_CtlSendStatus>

              break;
 800638c:	e004      	b.n	8006398 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800638e:	6839      	ldr	r1, [r7, #0]
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 fbff 	bl	8006b94 <USBD_CtlError>
              break;
 8006396:	bf00      	nop
          }
          break;
 8006398:	e0e0      	b.n	800655c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d002      	beq.n	80063aa <USBD_StdEPReq+0xf2>
 80063a4:	2b03      	cmp	r3, #3
 80063a6:	d015      	beq.n	80063d4 <USBD_StdEPReq+0x11c>
 80063a8:	e026      	b.n	80063f8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063aa:	7bbb      	ldrb	r3, [r7, #14]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00c      	beq.n	80063ca <USBD_StdEPReq+0x112>
 80063b0:	7bbb      	ldrb	r3, [r7, #14]
 80063b2:	2b80      	cmp	r3, #128	; 0x80
 80063b4:	d009      	beq.n	80063ca <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80063b6:	7bbb      	ldrb	r3, [r7, #14]
 80063b8:	4619      	mov	r1, r3
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f001 f862 	bl	8007484 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80063c0:	2180      	movs	r1, #128	; 0x80
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f001 f85e 	bl	8007484 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80063c8:	e01c      	b.n	8006404 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80063ca:	6839      	ldr	r1, [r7, #0]
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 fbe1 	bl	8006b94 <USBD_CtlError>
              break;
 80063d2:	e017      	b.n	8006404 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	885b      	ldrh	r3, [r3, #2]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d112      	bne.n	8006402 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80063dc:	7bbb      	ldrb	r3, [r7, #14]
 80063de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d004      	beq.n	80063f0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80063e6:	7bbb      	ldrb	r3, [r7, #14]
 80063e8:	4619      	mov	r1, r3
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f001 f869 	bl	80074c2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 fc97 	bl	8006d24 <USBD_CtlSendStatus>
              }
              break;
 80063f6:	e004      	b.n	8006402 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80063f8:	6839      	ldr	r1, [r7, #0]
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fbca 	bl	8006b94 <USBD_CtlError>
              break;
 8006400:	e000      	b.n	8006404 <USBD_StdEPReq+0x14c>
              break;
 8006402:	bf00      	nop
          }
          break;
 8006404:	e0aa      	b.n	800655c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800640c:	2b02      	cmp	r3, #2
 800640e:	d002      	beq.n	8006416 <USBD_StdEPReq+0x15e>
 8006410:	2b03      	cmp	r3, #3
 8006412:	d032      	beq.n	800647a <USBD_StdEPReq+0x1c2>
 8006414:	e097      	b.n	8006546 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006416:	7bbb      	ldrb	r3, [r7, #14]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d007      	beq.n	800642c <USBD_StdEPReq+0x174>
 800641c:	7bbb      	ldrb	r3, [r7, #14]
 800641e:	2b80      	cmp	r3, #128	; 0x80
 8006420:	d004      	beq.n	800642c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006422:	6839      	ldr	r1, [r7, #0]
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 fbb5 	bl	8006b94 <USBD_CtlError>
                break;
 800642a:	e091      	b.n	8006550 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800642c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006430:	2b00      	cmp	r3, #0
 8006432:	da0b      	bge.n	800644c <USBD_StdEPReq+0x194>
 8006434:	7bbb      	ldrb	r3, [r7, #14]
 8006436:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800643a:	4613      	mov	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4413      	add	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	3310      	adds	r3, #16
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	4413      	add	r3, r2
 8006448:	3304      	adds	r3, #4
 800644a:	e00b      	b.n	8006464 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800644c:	7bbb      	ldrb	r3, [r7, #14]
 800644e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006452:	4613      	mov	r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	4413      	add	r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	4413      	add	r3, r2
 8006462:	3304      	adds	r3, #4
 8006464:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	2200      	movs	r2, #0
 800646a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	2202      	movs	r2, #2
 8006470:	4619      	mov	r1, r3
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fbf8 	bl	8006c68 <USBD_CtlSendData>
              break;
 8006478:	e06a      	b.n	8006550 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800647a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800647e:	2b00      	cmp	r3, #0
 8006480:	da11      	bge.n	80064a6 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006482:	7bbb      	ldrb	r3, [r7, #14]
 8006484:	f003 020f 	and.w	r2, r3, #15
 8006488:	6879      	ldr	r1, [r7, #4]
 800648a:	4613      	mov	r3, r2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	4413      	add	r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	440b      	add	r3, r1
 8006494:	3318      	adds	r3, #24
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d117      	bne.n	80064cc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800649c:	6839      	ldr	r1, [r7, #0]
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 fb78 	bl	8006b94 <USBD_CtlError>
                  break;
 80064a4:	e054      	b.n	8006550 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80064a6:	7bbb      	ldrb	r3, [r7, #14]
 80064a8:	f003 020f 	and.w	r2, r3, #15
 80064ac:	6879      	ldr	r1, [r7, #4]
 80064ae:	4613      	mov	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4413      	add	r3, r2
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	440b      	add	r3, r1
 80064b8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d104      	bne.n	80064cc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80064c2:	6839      	ldr	r1, [r7, #0]
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fb65 	bl	8006b94 <USBD_CtlError>
                  break;
 80064ca:	e041      	b.n	8006550 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	da0b      	bge.n	80064ec <USBD_StdEPReq+0x234>
 80064d4:	7bbb      	ldrb	r3, [r7, #14]
 80064d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064da:	4613      	mov	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4413      	add	r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	3310      	adds	r3, #16
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	4413      	add	r3, r2
 80064e8:	3304      	adds	r3, #4
 80064ea:	e00b      	b.n	8006504 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80064ec:	7bbb      	ldrb	r3, [r7, #14]
 80064ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064f2:	4613      	mov	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4413      	add	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	4413      	add	r3, r2
 8006502:	3304      	adds	r3, #4
 8006504:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006506:	7bbb      	ldrb	r3, [r7, #14]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d002      	beq.n	8006512 <USBD_StdEPReq+0x25a>
 800650c:	7bbb      	ldrb	r3, [r7, #14]
 800650e:	2b80      	cmp	r3, #128	; 0x80
 8006510:	d103      	bne.n	800651a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	2200      	movs	r2, #0
 8006516:	601a      	str	r2, [r3, #0]
 8006518:	e00e      	b.n	8006538 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800651a:	7bbb      	ldrb	r3, [r7, #14]
 800651c:	4619      	mov	r1, r3
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 ffee 	bl	8007500 <USBD_LL_IsStallEP>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d003      	beq.n	8006532 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	2201      	movs	r2, #1
 800652e:	601a      	str	r2, [r3, #0]
 8006530:	e002      	b.n	8006538 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	2200      	movs	r2, #0
 8006536:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	2202      	movs	r2, #2
 800653c:	4619      	mov	r1, r3
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 fb92 	bl	8006c68 <USBD_CtlSendData>
              break;
 8006544:	e004      	b.n	8006550 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8006546:	6839      	ldr	r1, [r7, #0]
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 fb23 	bl	8006b94 <USBD_CtlError>
              break;
 800654e:	bf00      	nop
          }
          break;
 8006550:	e004      	b.n	800655c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8006552:	6839      	ldr	r1, [r7, #0]
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 fb1d 	bl	8006b94 <USBD_CtlError>
          break;
 800655a:	bf00      	nop
      }
      break;
 800655c:	e004      	b.n	8006568 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800655e:	6839      	ldr	r1, [r7, #0]
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 fb17 	bl	8006b94 <USBD_CtlError>
      break;
 8006566:	bf00      	nop
  }

  return ret;
 8006568:	7bfb      	ldrb	r3, [r7, #15]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
	...

08006574 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800657e:	2300      	movs	r3, #0
 8006580:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006582:	2300      	movs	r3, #0
 8006584:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006586:	2300      	movs	r3, #0
 8006588:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	885b      	ldrh	r3, [r3, #2]
 800658e:	0a1b      	lsrs	r3, r3, #8
 8006590:	b29b      	uxth	r3, r3
 8006592:	3b01      	subs	r3, #1
 8006594:	2b06      	cmp	r3, #6
 8006596:	f200 8128 	bhi.w	80067ea <USBD_GetDescriptor+0x276>
 800659a:	a201      	add	r2, pc, #4	; (adr r2, 80065a0 <USBD_GetDescriptor+0x2c>)
 800659c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a0:	080065bd 	.word	0x080065bd
 80065a4:	080065d5 	.word	0x080065d5
 80065a8:	08006615 	.word	0x08006615
 80065ac:	080067eb 	.word	0x080067eb
 80065b0:	080067eb 	.word	0x080067eb
 80065b4:	0800678b 	.word	0x0800678b
 80065b8:	080067b7 	.word	0x080067b7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	7c12      	ldrb	r2, [r2, #16]
 80065c8:	f107 0108 	add.w	r1, r7, #8
 80065cc:	4610      	mov	r0, r2
 80065ce:	4798      	blx	r3
 80065d0:	60f8      	str	r0, [r7, #12]
      break;
 80065d2:	e112      	b.n	80067fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	7c1b      	ldrb	r3, [r3, #16]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10d      	bne.n	80065f8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e4:	f107 0208 	add.w	r2, r7, #8
 80065e8:	4610      	mov	r0, r2
 80065ea:	4798      	blx	r3
 80065ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	3301      	adds	r3, #1
 80065f2:	2202      	movs	r2, #2
 80065f4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80065f6:	e100      	b.n	80067fa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006600:	f107 0208 	add.w	r2, r7, #8
 8006604:	4610      	mov	r0, r2
 8006606:	4798      	blx	r3
 8006608:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	3301      	adds	r3, #1
 800660e:	2202      	movs	r2, #2
 8006610:	701a      	strb	r2, [r3, #0]
      break;
 8006612:	e0f2      	b.n	80067fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	885b      	ldrh	r3, [r3, #2]
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b05      	cmp	r3, #5
 800661c:	f200 80ac 	bhi.w	8006778 <USBD_GetDescriptor+0x204>
 8006620:	a201      	add	r2, pc, #4	; (adr r2, 8006628 <USBD_GetDescriptor+0xb4>)
 8006622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006626:	bf00      	nop
 8006628:	08006641 	.word	0x08006641
 800662c:	08006675 	.word	0x08006675
 8006630:	080066a9 	.word	0x080066a9
 8006634:	080066dd 	.word	0x080066dd
 8006638:	08006711 	.word	0x08006711
 800663c:	08006745 	.word	0x08006745
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00b      	beq.n	8006664 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	7c12      	ldrb	r2, [r2, #16]
 8006658:	f107 0108 	add.w	r1, r7, #8
 800665c:	4610      	mov	r0, r2
 800665e:	4798      	blx	r3
 8006660:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006662:	e091      	b.n	8006788 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006664:	6839      	ldr	r1, [r7, #0]
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 fa94 	bl	8006b94 <USBD_CtlError>
            err++;
 800666c:	7afb      	ldrb	r3, [r7, #11]
 800666e:	3301      	adds	r3, #1
 8006670:	72fb      	strb	r3, [r7, #11]
          break;
 8006672:	e089      	b.n	8006788 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00b      	beq.n	8006698 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	7c12      	ldrb	r2, [r2, #16]
 800668c:	f107 0108 	add.w	r1, r7, #8
 8006690:	4610      	mov	r0, r2
 8006692:	4798      	blx	r3
 8006694:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006696:	e077      	b.n	8006788 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006698:	6839      	ldr	r1, [r7, #0]
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fa7a 	bl	8006b94 <USBD_CtlError>
            err++;
 80066a0:	7afb      	ldrb	r3, [r7, #11]
 80066a2:	3301      	adds	r3, #1
 80066a4:	72fb      	strb	r3, [r7, #11]
          break;
 80066a6:	e06f      	b.n	8006788 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00b      	beq.n	80066cc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	7c12      	ldrb	r2, [r2, #16]
 80066c0:	f107 0108 	add.w	r1, r7, #8
 80066c4:	4610      	mov	r0, r2
 80066c6:	4798      	blx	r3
 80066c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066ca:	e05d      	b.n	8006788 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066cc:	6839      	ldr	r1, [r7, #0]
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 fa60 	bl	8006b94 <USBD_CtlError>
            err++;
 80066d4:	7afb      	ldrb	r3, [r7, #11]
 80066d6:	3301      	adds	r3, #1
 80066d8:	72fb      	strb	r3, [r7, #11]
          break;
 80066da:	e055      	b.n	8006788 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00b      	beq.n	8006700 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	7c12      	ldrb	r2, [r2, #16]
 80066f4:	f107 0108 	add.w	r1, r7, #8
 80066f8:	4610      	mov	r0, r2
 80066fa:	4798      	blx	r3
 80066fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066fe:	e043      	b.n	8006788 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006700:	6839      	ldr	r1, [r7, #0]
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fa46 	bl	8006b94 <USBD_CtlError>
            err++;
 8006708:	7afb      	ldrb	r3, [r7, #11]
 800670a:	3301      	adds	r3, #1
 800670c:	72fb      	strb	r3, [r7, #11]
          break;
 800670e:	e03b      	b.n	8006788 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00b      	beq.n	8006734 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006722:	695b      	ldr	r3, [r3, #20]
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	7c12      	ldrb	r2, [r2, #16]
 8006728:	f107 0108 	add.w	r1, r7, #8
 800672c:	4610      	mov	r0, r2
 800672e:	4798      	blx	r3
 8006730:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006732:	e029      	b.n	8006788 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006734:	6839      	ldr	r1, [r7, #0]
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 fa2c 	bl	8006b94 <USBD_CtlError>
            err++;
 800673c:	7afb      	ldrb	r3, [r7, #11]
 800673e:	3301      	adds	r3, #1
 8006740:	72fb      	strb	r3, [r7, #11]
          break;
 8006742:	e021      	b.n	8006788 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00b      	beq.n	8006768 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	7c12      	ldrb	r2, [r2, #16]
 800675c:	f107 0108 	add.w	r1, r7, #8
 8006760:	4610      	mov	r0, r2
 8006762:	4798      	blx	r3
 8006764:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006766:	e00f      	b.n	8006788 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006768:	6839      	ldr	r1, [r7, #0]
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fa12 	bl	8006b94 <USBD_CtlError>
            err++;
 8006770:	7afb      	ldrb	r3, [r7, #11]
 8006772:	3301      	adds	r3, #1
 8006774:	72fb      	strb	r3, [r7, #11]
          break;
 8006776:	e007      	b.n	8006788 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006778:	6839      	ldr	r1, [r7, #0]
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fa0a 	bl	8006b94 <USBD_CtlError>
          err++;
 8006780:	7afb      	ldrb	r3, [r7, #11]
 8006782:	3301      	adds	r3, #1
 8006784:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006786:	e038      	b.n	80067fa <USBD_GetDescriptor+0x286>
 8006788:	e037      	b.n	80067fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	7c1b      	ldrb	r3, [r3, #16]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d109      	bne.n	80067a6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800679a:	f107 0208 	add.w	r2, r7, #8
 800679e:	4610      	mov	r0, r2
 80067a0:	4798      	blx	r3
 80067a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067a4:	e029      	b.n	80067fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067a6:	6839      	ldr	r1, [r7, #0]
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 f9f3 	bl	8006b94 <USBD_CtlError>
        err++;
 80067ae:	7afb      	ldrb	r3, [r7, #11]
 80067b0:	3301      	adds	r3, #1
 80067b2:	72fb      	strb	r3, [r7, #11]
      break;
 80067b4:	e021      	b.n	80067fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	7c1b      	ldrb	r3, [r3, #16]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10d      	bne.n	80067da <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c6:	f107 0208 	add.w	r2, r7, #8
 80067ca:	4610      	mov	r0, r2
 80067cc:	4798      	blx	r3
 80067ce:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	3301      	adds	r3, #1
 80067d4:	2207      	movs	r2, #7
 80067d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067d8:	e00f      	b.n	80067fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067da:	6839      	ldr	r1, [r7, #0]
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 f9d9 	bl	8006b94 <USBD_CtlError>
        err++;
 80067e2:	7afb      	ldrb	r3, [r7, #11]
 80067e4:	3301      	adds	r3, #1
 80067e6:	72fb      	strb	r3, [r7, #11]
      break;
 80067e8:	e007      	b.n	80067fa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80067ea:	6839      	ldr	r1, [r7, #0]
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 f9d1 	bl	8006b94 <USBD_CtlError>
      err++;
 80067f2:	7afb      	ldrb	r3, [r7, #11]
 80067f4:	3301      	adds	r3, #1
 80067f6:	72fb      	strb	r3, [r7, #11]
      break;
 80067f8:	bf00      	nop
  }

  if (err != 0U)
 80067fa:	7afb      	ldrb	r3, [r7, #11]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d11c      	bne.n	800683a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006800:	893b      	ldrh	r3, [r7, #8]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d011      	beq.n	800682a <USBD_GetDescriptor+0x2b6>
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	88db      	ldrh	r3, [r3, #6]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00d      	beq.n	800682a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	88da      	ldrh	r2, [r3, #6]
 8006812:	893b      	ldrh	r3, [r7, #8]
 8006814:	4293      	cmp	r3, r2
 8006816:	bf28      	it	cs
 8006818:	4613      	movcs	r3, r2
 800681a:	b29b      	uxth	r3, r3
 800681c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800681e:	893b      	ldrh	r3, [r7, #8]
 8006820:	461a      	mov	r2, r3
 8006822:	68f9      	ldr	r1, [r7, #12]
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 fa1f 	bl	8006c68 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	88db      	ldrh	r3, [r3, #6]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d104      	bne.n	800683c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fa76 	bl	8006d24 <USBD_CtlSendStatus>
 8006838:	e000      	b.n	800683c <USBD_GetDescriptor+0x2c8>
    return;
 800683a:	bf00      	nop
    }
  }
}
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop

08006844 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	889b      	ldrh	r3, [r3, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d130      	bne.n	80068b8 <USBD_SetAddress+0x74>
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	88db      	ldrh	r3, [r3, #6]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d12c      	bne.n	80068b8 <USBD_SetAddress+0x74>
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	885b      	ldrh	r3, [r3, #2]
 8006862:	2b7f      	cmp	r3, #127	; 0x7f
 8006864:	d828      	bhi.n	80068b8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	885b      	ldrh	r3, [r3, #2]
 800686a:	b2db      	uxtb	r3, r3
 800686c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006870:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006878:	2b03      	cmp	r3, #3
 800687a:	d104      	bne.n	8006886 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800687c:	6839      	ldr	r1, [r7, #0]
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f988 	bl	8006b94 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006884:	e01c      	b.n	80068c0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	7bfa      	ldrb	r2, [r7, #15]
 800688a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800688e:	7bfb      	ldrb	r3, [r7, #15]
 8006890:	4619      	mov	r1, r3
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 fe59 	bl	800754a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 fa43 	bl	8006d24 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800689e:	7bfb      	ldrb	r3, [r7, #15]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d004      	beq.n	80068ae <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2202      	movs	r2, #2
 80068a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ac:	e008      	b.n	80068c0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068b6:	e003      	b.n	80068c0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80068b8:	6839      	ldr	r1, [r7, #0]
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f96a 	bl	8006b94 <USBD_CtlError>
  }
}
 80068c0:	bf00      	nop
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	885b      	ldrh	r3, [r3, #2]
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	4b41      	ldr	r3, [pc, #260]	; (80069e0 <USBD_SetConfig+0x118>)
 80068da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80068dc:	4b40      	ldr	r3, [pc, #256]	; (80069e0 <USBD_SetConfig+0x118>)
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d904      	bls.n	80068ee <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80068e4:	6839      	ldr	r1, [r7, #0]
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f954 	bl	8006b94 <USBD_CtlError>
 80068ec:	e075      	b.n	80069da <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d002      	beq.n	80068fe <USBD_SetConfig+0x36>
 80068f8:	2b03      	cmp	r3, #3
 80068fa:	d023      	beq.n	8006944 <USBD_SetConfig+0x7c>
 80068fc:	e062      	b.n	80069c4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80068fe:	4b38      	ldr	r3, [pc, #224]	; (80069e0 <USBD_SetConfig+0x118>)
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d01a      	beq.n	800693c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006906:	4b36      	ldr	r3, [pc, #216]	; (80069e0 <USBD_SetConfig+0x118>)
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	461a      	mov	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2203      	movs	r2, #3
 8006914:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006918:	4b31      	ldr	r3, [pc, #196]	; (80069e0 <USBD_SetConfig+0x118>)
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	4619      	mov	r1, r3
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f7ff f9f3 	bl	8005d0a <USBD_SetClassConfig>
 8006924:	4603      	mov	r3, r0
 8006926:	2b02      	cmp	r3, #2
 8006928:	d104      	bne.n	8006934 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800692a:	6839      	ldr	r1, [r7, #0]
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f931 	bl	8006b94 <USBD_CtlError>
            return;
 8006932:	e052      	b.n	80069da <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 f9f5 	bl	8006d24 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800693a:	e04e      	b.n	80069da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 f9f1 	bl	8006d24 <USBD_CtlSendStatus>
        break;
 8006942:	e04a      	b.n	80069da <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006944:	4b26      	ldr	r3, [pc, #152]	; (80069e0 <USBD_SetConfig+0x118>)
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d112      	bne.n	8006972 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2202      	movs	r2, #2
 8006950:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006954:	4b22      	ldr	r3, [pc, #136]	; (80069e0 <USBD_SetConfig+0x118>)
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	461a      	mov	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800695e:	4b20      	ldr	r3, [pc, #128]	; (80069e0 <USBD_SetConfig+0x118>)
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	4619      	mov	r1, r3
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f7ff f9ef 	bl	8005d48 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f9da 	bl	8006d24 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006970:	e033      	b.n	80069da <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006972:	4b1b      	ldr	r3, [pc, #108]	; (80069e0 <USBD_SetConfig+0x118>)
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	461a      	mov	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	429a      	cmp	r2, r3
 800697e:	d01d      	beq.n	80069bc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	b2db      	uxtb	r3, r3
 8006986:	4619      	mov	r1, r3
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f7ff f9dd 	bl	8005d48 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800698e:	4b14      	ldr	r3, [pc, #80]	; (80069e0 <USBD_SetConfig+0x118>)
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	461a      	mov	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006998:	4b11      	ldr	r3, [pc, #68]	; (80069e0 <USBD_SetConfig+0x118>)
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	4619      	mov	r1, r3
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f7ff f9b3 	bl	8005d0a <USBD_SetClassConfig>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d104      	bne.n	80069b4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80069aa:	6839      	ldr	r1, [r7, #0]
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 f8f1 	bl	8006b94 <USBD_CtlError>
            return;
 80069b2:	e012      	b.n	80069da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 f9b5 	bl	8006d24 <USBD_CtlSendStatus>
        break;
 80069ba:	e00e      	b.n	80069da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 f9b1 	bl	8006d24 <USBD_CtlSendStatus>
        break;
 80069c2:	e00a      	b.n	80069da <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80069c4:	6839      	ldr	r1, [r7, #0]
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f8e4 	bl	8006b94 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80069cc:	4b04      	ldr	r3, [pc, #16]	; (80069e0 <USBD_SetConfig+0x118>)
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	4619      	mov	r1, r3
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7ff f9b8 	bl	8005d48 <USBD_ClrClassConfig>
        break;
 80069d8:	bf00      	nop
    }
  }
}
 80069da:	3708      	adds	r7, #8
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	200001a5 	.word	0x200001a5

080069e4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	88db      	ldrh	r3, [r3, #6]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d004      	beq.n	8006a00 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 f8cb 	bl	8006b94 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80069fe:	e021      	b.n	8006a44 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	db17      	blt.n	8006a3a <USBD_GetConfig+0x56>
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	dd02      	ble.n	8006a14 <USBD_GetConfig+0x30>
 8006a0e:	2b03      	cmp	r3, #3
 8006a10:	d00b      	beq.n	8006a2a <USBD_GetConfig+0x46>
 8006a12:	e012      	b.n	8006a3a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	3308      	adds	r3, #8
 8006a1e:	2201      	movs	r2, #1
 8006a20:	4619      	mov	r1, r3
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f920 	bl	8006c68 <USBD_CtlSendData>
        break;
 8006a28:	e00c      	b.n	8006a44 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	3304      	adds	r3, #4
 8006a2e:	2201      	movs	r2, #1
 8006a30:	4619      	mov	r1, r3
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f918 	bl	8006c68 <USBD_CtlSendData>
        break;
 8006a38:	e004      	b.n	8006a44 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006a3a:	6839      	ldr	r1, [r7, #0]
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 f8a9 	bl	8006b94 <USBD_CtlError>
        break;
 8006a42:	bf00      	nop
}
 8006a44:	bf00      	nop
 8006a46:	3708      	adds	r7, #8
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d81e      	bhi.n	8006aa0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	88db      	ldrh	r3, [r3, #6]
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d004      	beq.n	8006a74 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006a6a:	6839      	ldr	r1, [r7, #0]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 f891 	bl	8006b94 <USBD_CtlError>
        break;
 8006a72:	e01a      	b.n	8006aaa <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d005      	beq.n	8006a90 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	f043 0202 	orr.w	r2, r3, #2
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	330c      	adds	r3, #12
 8006a94:	2202      	movs	r2, #2
 8006a96:	4619      	mov	r1, r3
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 f8e5 	bl	8006c68 <USBD_CtlSendData>
      break;
 8006a9e:	e004      	b.n	8006aaa <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006aa0:	6839      	ldr	r1, [r7, #0]
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f876 	bl	8006b94 <USBD_CtlError>
      break;
 8006aa8:	bf00      	nop
  }
}
 8006aaa:	bf00      	nop
 8006aac:	3708      	adds	r7, #8
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b082      	sub	sp, #8
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
 8006aba:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	885b      	ldrh	r3, [r3, #2]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d106      	bne.n	8006ad2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 f929 	bl	8006d24 <USBD_CtlSendStatus>
  }
}
 8006ad2:	bf00      	nop
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b082      	sub	sp, #8
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aea:	3b01      	subs	r3, #1
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d80b      	bhi.n	8006b08 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	885b      	ldrh	r3, [r3, #2]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d10c      	bne.n	8006b12 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 f90f 	bl	8006d24 <USBD_CtlSendStatus>
      }
      break;
 8006b06:	e004      	b.n	8006b12 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006b08:	6839      	ldr	r1, [r7, #0]
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f842 	bl	8006b94 <USBD_CtlError>
      break;
 8006b10:	e000      	b.n	8006b14 <USBD_ClrFeature+0x3a>
      break;
 8006b12:	bf00      	nop
  }
}
 8006b14:	bf00      	nop
 8006b16:	3708      	adds	r7, #8
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	781a      	ldrb	r2, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	785a      	ldrb	r2, [r3, #1]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	3302      	adds	r3, #2
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	3303      	adds	r3, #3
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	021b      	lsls	r3, r3, #8
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	4413      	add	r3, r2
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	3304      	adds	r3, #4
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	3305      	adds	r3, #5
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	021b      	lsls	r3, r3, #8
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	4413      	add	r3, r2
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	3306      	adds	r3, #6
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	3307      	adds	r3, #7
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	021b      	lsls	r3, r3, #8
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	4413      	add	r3, r2
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	80da      	strh	r2, [r3, #6]

}
 8006b8a:	bf00      	nop
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bc80      	pop	{r7}
 8006b92:	4770      	bx	lr

08006b94 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006b9e:	2180      	movs	r1, #128	; 0x80
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fc6f 	bl	8007484 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006ba6:	2100      	movs	r1, #0
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 fc6b 	bl	8007484 <USBD_LL_StallEP>
}
 8006bae:	bf00      	nop
 8006bb0:	3708      	adds	r7, #8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b086      	sub	sp, #24
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	60f8      	str	r0, [r7, #12]
 8006bbe:	60b9      	str	r1, [r7, #8]
 8006bc0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d032      	beq.n	8006c32 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f000 f834 	bl	8006c3a <USBD_GetLen>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	005b      	lsls	r3, r3, #1
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006be0:	7dfb      	ldrb	r3, [r7, #23]
 8006be2:	1c5a      	adds	r2, r3, #1
 8006be4:	75fa      	strb	r2, [r7, #23]
 8006be6:	461a      	mov	r2, r3
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	4413      	add	r3, r2
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	7812      	ldrb	r2, [r2, #0]
 8006bf0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006bf2:	7dfb      	ldrb	r3, [r7, #23]
 8006bf4:	1c5a      	adds	r2, r3, #1
 8006bf6:	75fa      	strb	r2, [r7, #23]
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	2203      	movs	r2, #3
 8006c00:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006c02:	e012      	b.n	8006c2a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	1c5a      	adds	r2, r3, #1
 8006c08:	60fa      	str	r2, [r7, #12]
 8006c0a:	7dfa      	ldrb	r2, [r7, #23]
 8006c0c:	1c51      	adds	r1, r2, #1
 8006c0e:	75f9      	strb	r1, [r7, #23]
 8006c10:	4611      	mov	r1, r2
 8006c12:	68ba      	ldr	r2, [r7, #8]
 8006c14:	440a      	add	r2, r1
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006c1a:	7dfb      	ldrb	r3, [r7, #23]
 8006c1c:	1c5a      	adds	r2, r3, #1
 8006c1e:	75fa      	strb	r2, [r7, #23]
 8006c20:	461a      	mov	r2, r3
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	4413      	add	r3, r2
 8006c26:	2200      	movs	r2, #0
 8006c28:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1e8      	bne.n	8006c04 <USBD_GetString+0x4e>
    }
  }
}
 8006c32:	bf00      	nop
 8006c34:	3718      	adds	r7, #24
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b085      	sub	sp, #20
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006c42:	2300      	movs	r3, #0
 8006c44:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006c46:	e005      	b.n	8006c54 <USBD_GetLen+0x1a>
  {
    len++;
 8006c48:	7bfb      	ldrb	r3, [r7, #15]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	3301      	adds	r3, #1
 8006c52:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d1f5      	bne.n	8006c48 <USBD_GetLen+0xe>
  }

  return len;
 8006c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3714      	adds	r7, #20
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bc80      	pop	{r7}
 8006c66:	4770      	bx	lr

08006c68 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	4613      	mov	r3, r2
 8006c74:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2202      	movs	r2, #2
 8006c7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006c7e:	88fa      	ldrh	r2, [r7, #6]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006c84:	88fa      	ldrh	r2, [r7, #6]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c8a:	88fb      	ldrh	r3, [r7, #6]
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	2100      	movs	r1, #0
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f000 fc79 	bl	8007588 <USBD_LL_Transmit>

  return USBD_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	4613      	mov	r3, r2
 8006cac:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006cae:	88fb      	ldrh	r3, [r7, #6]
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f000 fc67 	bl	8007588 <USBD_LL_Transmit>

  return USBD_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2203      	movs	r2, #3
 8006cd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006cda:	88fa      	ldrh	r2, [r7, #6]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006ce2:	88fa      	ldrh	r2, [r7, #6]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006cea:	88fb      	ldrh	r3, [r7, #6]
 8006cec:	68ba      	ldr	r2, [r7, #8]
 8006cee:	2100      	movs	r1, #0
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f000 fc6c 	bl	80075ce <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d0e:	88fb      	ldrh	r3, [r7, #6]
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	2100      	movs	r1, #0
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f000 fc5a 	bl	80075ce <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2204      	movs	r2, #4
 8006d30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006d34:	2300      	movs	r3, #0
 8006d36:	2200      	movs	r2, #0
 8006d38:	2100      	movs	r1, #0
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fc24 	bl	8007588 <USBD_LL_Transmit>

  return USBD_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3708      	adds	r7, #8
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b082      	sub	sp, #8
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2205      	movs	r2, #5
 8006d56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	2100      	movs	r1, #0
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 fc34 	bl	80075ce <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006d74:	2200      	movs	r2, #0
 8006d76:	4912      	ldr	r1, [pc, #72]	; (8006dc0 <MX_USB_DEVICE_Init+0x50>)
 8006d78:	4812      	ldr	r0, [pc, #72]	; (8006dc4 <MX_USB_DEVICE_Init+0x54>)
 8006d7a:	f7fe ff6c 	bl	8005c56 <USBD_Init>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d001      	beq.n	8006d88 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006d84:	f7fa f89a 	bl	8000ebc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006d88:	490f      	ldr	r1, [pc, #60]	; (8006dc8 <MX_USB_DEVICE_Init+0x58>)
 8006d8a:	480e      	ldr	r0, [pc, #56]	; (8006dc4 <MX_USB_DEVICE_Init+0x54>)
 8006d8c:	f7fe ff8e 	bl	8005cac <USBD_RegisterClass>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d001      	beq.n	8006d9a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006d96:	f7fa f891 	bl	8000ebc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006d9a:	490c      	ldr	r1, [pc, #48]	; (8006dcc <MX_USB_DEVICE_Init+0x5c>)
 8006d9c:	4809      	ldr	r0, [pc, #36]	; (8006dc4 <MX_USB_DEVICE_Init+0x54>)
 8006d9e:	f7fe febf 	bl	8005b20 <USBD_CDC_RegisterInterface>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d001      	beq.n	8006dac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006da8:	f7fa f888 	bl	8000ebc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006dac:	4805      	ldr	r0, [pc, #20]	; (8006dc4 <MX_USB_DEVICE_Init+0x54>)
 8006dae:	f7fe ff96 	bl	8005cde <USBD_Start>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d001      	beq.n	8006dbc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006db8:	f7fa f880 	bl	8000ebc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006dbc:	bf00      	nop
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	20000138 	.word	0x20000138
 8006dc4:	20000928 	.word	0x20000928
 8006dc8:	20000024 	.word	0x20000024
 8006dcc:	20000128 	.word	0x20000128

08006dd0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	4905      	ldr	r1, [pc, #20]	; (8006dec <CDC_Init_FS+0x1c>)
 8006dd8:	4805      	ldr	r0, [pc, #20]	; (8006df0 <CDC_Init_FS+0x20>)
 8006dda:	f7fe feb7 	bl	8005b4c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006dde:	4905      	ldr	r1, [pc, #20]	; (8006df4 <CDC_Init_FS+0x24>)
 8006de0:	4803      	ldr	r0, [pc, #12]	; (8006df0 <CDC_Init_FS+0x20>)
 8006de2:	f7fe fecc 	bl	8005b7e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006de6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	20000fd4 	.word	0x20000fd4
 8006df0:	20000928 	.word	0x20000928
 8006df4:	20000bec 	.word	0x20000bec

08006df8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006dfc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bc80      	pop	{r7}
 8006e04:	4770      	bx	lr
	...

08006e08 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	4603      	mov	r3, r0
 8006e10:	6039      	str	r1, [r7, #0]
 8006e12:	71fb      	strb	r3, [r7, #7]
 8006e14:	4613      	mov	r3, r2
 8006e16:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006e18:	79fb      	ldrb	r3, [r7, #7]
 8006e1a:	2b23      	cmp	r3, #35	; 0x23
 8006e1c:	d866      	bhi.n	8006eec <CDC_Control_FS+0xe4>
 8006e1e:	a201      	add	r2, pc, #4	; (adr r2, 8006e24 <CDC_Control_FS+0x1c>)
 8006e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e24:	08006eed 	.word	0x08006eed
 8006e28:	08006eed 	.word	0x08006eed
 8006e2c:	08006eed 	.word	0x08006eed
 8006e30:	08006eed 	.word	0x08006eed
 8006e34:	08006eed 	.word	0x08006eed
 8006e38:	08006eed 	.word	0x08006eed
 8006e3c:	08006eed 	.word	0x08006eed
 8006e40:	08006eed 	.word	0x08006eed
 8006e44:	08006eed 	.word	0x08006eed
 8006e48:	08006eed 	.word	0x08006eed
 8006e4c:	08006eed 	.word	0x08006eed
 8006e50:	08006eed 	.word	0x08006eed
 8006e54:	08006eed 	.word	0x08006eed
 8006e58:	08006eed 	.word	0x08006eed
 8006e5c:	08006eed 	.word	0x08006eed
 8006e60:	08006eed 	.word	0x08006eed
 8006e64:	08006eed 	.word	0x08006eed
 8006e68:	08006eed 	.word	0x08006eed
 8006e6c:	08006eed 	.word	0x08006eed
 8006e70:	08006eed 	.word	0x08006eed
 8006e74:	08006eed 	.word	0x08006eed
 8006e78:	08006eed 	.word	0x08006eed
 8006e7c:	08006eed 	.word	0x08006eed
 8006e80:	08006eed 	.word	0x08006eed
 8006e84:	08006eed 	.word	0x08006eed
 8006e88:	08006eed 	.word	0x08006eed
 8006e8c:	08006eed 	.word	0x08006eed
 8006e90:	08006eed 	.word	0x08006eed
 8006e94:	08006eed 	.word	0x08006eed
 8006e98:	08006eed 	.word	0x08006eed
 8006e9c:	08006eed 	.word	0x08006eed
 8006ea0:	08006eed 	.word	0x08006eed
 8006ea4:	08006eb5 	.word	0x08006eb5
 8006ea8:	08006ed7 	.word	0x08006ed7
 8006eac:	08006eed 	.word	0x08006eed
 8006eb0:	08006eed 	.word	0x08006eed
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(&linecode,pbuf,length>sizeof(linecode)?(sizeof(linecode)):(length));
 8006eb4:	88bb      	ldrh	r3, [r7, #4]
 8006eb6:	2b0c      	cmp	r3, #12
 8006eb8:	bf28      	it	cs
 8006eba:	230c      	movcs	r3, #12
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	6839      	ldr	r1, [r7, #0]
 8006ec2:	480d      	ldr	r0, [pc, #52]	; (8006ef8 <CDC_Control_FS+0xf0>)
 8006ec4:	f000 fc2a 	bl	800771c <memcpy>
    	linecode.IsUpdate++;
 8006ec8:	4b0b      	ldr	r3, [pc, #44]	; (8006ef8 <CDC_Control_FS+0xf0>)
 8006eca:	7a1b      	ldrb	r3, [r3, #8]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	b2da      	uxtb	r2, r3
 8006ed0:	4b09      	ldr	r3, [pc, #36]	; (8006ef8 <CDC_Control_FS+0xf0>)
 8006ed2:	721a      	strb	r2, [r3, #8]
    break;
 8006ed4:	e00b      	b.n	8006eee <CDC_Control_FS+0xe6>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf,&linecode,length>sizeof(linecode)?(sizeof(linecode)):(length));
 8006ed6:	88bb      	ldrh	r3, [r7, #4]
 8006ed8:	2b0c      	cmp	r3, #12
 8006eda:	bf28      	it	cs
 8006edc:	230c      	movcs	r3, #12
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	4905      	ldr	r1, [pc, #20]	; (8006ef8 <CDC_Control_FS+0xf0>)
 8006ee4:	6838      	ldr	r0, [r7, #0]
 8006ee6:	f000 fc19 	bl	800771c <memcpy>
    break;
 8006eea:	e000      	b.n	8006eee <CDC_Control_FS+0xe6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006eec:	bf00      	nop
  }

  return (USBD_OK);
 8006eee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3708      	adds	r7, #8
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	20000000 	.word	0x20000000

08006efc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  cdc_receive_call(Buf, *Len);
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f7f9 fda9 	bl	8000a64 <cdc_receive_call>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006f12:	6879      	ldr	r1, [r7, #4]
 8006f14:	4805      	ldr	r0, [pc, #20]	; (8006f2c <CDC_Receive_FS+0x30>)
 8006f16:	f7fe fe32 	bl	8005b7e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006f1a:	4804      	ldr	r0, [pc, #16]	; (8006f2c <CDC_Receive_FS+0x30>)
 8006f1c:	f7fe fe71 	bl	8005c02 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006f20:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3708      	adds	r7, #8
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	20000928 	.word	0x20000928

08006f30 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	460b      	mov	r3, r1
 8006f3a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006f40:	4b0d      	ldr	r3, [pc, #52]	; (8006f78 <CDC_Transmit_FS+0x48>)
 8006f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f46:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e00b      	b.n	8006f6e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006f56:	887b      	ldrh	r3, [r7, #2]
 8006f58:	461a      	mov	r2, r3
 8006f5a:	6879      	ldr	r1, [r7, #4]
 8006f5c:	4806      	ldr	r0, [pc, #24]	; (8006f78 <CDC_Transmit_FS+0x48>)
 8006f5e:	f7fe fdf5 	bl	8005b4c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006f62:	4805      	ldr	r0, [pc, #20]	; (8006f78 <CDC_Transmit_FS+0x48>)
 8006f64:	f7fe fe1e 	bl	8005ba4 <USBD_CDC_TransmitPacket>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	20000928 	.word	0x20000928

08006f7c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	4603      	mov	r3, r0
 8006f84:	6039      	str	r1, [r7, #0]
 8006f86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	2212      	movs	r2, #18
 8006f8c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006f8e:	4b03      	ldr	r3, [pc, #12]	; (8006f9c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bc80      	pop	{r7}
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	20000154 	.word	0x20000154

08006fa0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	6039      	str	r1, [r7, #0]
 8006faa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	2204      	movs	r2, #4
 8006fb0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006fb2:	4b03      	ldr	r3, [pc, #12]	; (8006fc0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bc80      	pop	{r7}
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	20000168 	.word	0x20000168

08006fc4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	4603      	mov	r3, r0
 8006fcc:	6039      	str	r1, [r7, #0]
 8006fce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006fd0:	79fb      	ldrb	r3, [r7, #7]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d105      	bne.n	8006fe2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006fd6:	683a      	ldr	r2, [r7, #0]
 8006fd8:	4907      	ldr	r1, [pc, #28]	; (8006ff8 <USBD_FS_ProductStrDescriptor+0x34>)
 8006fda:	4808      	ldr	r0, [pc, #32]	; (8006ffc <USBD_FS_ProductStrDescriptor+0x38>)
 8006fdc:	f7ff fdeb 	bl	8006bb6 <USBD_GetString>
 8006fe0:	e004      	b.n	8006fec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	4904      	ldr	r1, [pc, #16]	; (8006ff8 <USBD_FS_ProductStrDescriptor+0x34>)
 8006fe6:	4805      	ldr	r0, [pc, #20]	; (8006ffc <USBD_FS_ProductStrDescriptor+0x38>)
 8006fe8:	f7ff fde5 	bl	8006bb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006fec:	4b02      	ldr	r3, [pc, #8]	; (8006ff8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3708      	adds	r7, #8
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	200013bc 	.word	0x200013bc
 8006ffc:	08007770 	.word	0x08007770

08007000 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	4603      	mov	r3, r0
 8007008:	6039      	str	r1, [r7, #0]
 800700a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800700c:	683a      	ldr	r2, [r7, #0]
 800700e:	4904      	ldr	r1, [pc, #16]	; (8007020 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007010:	4804      	ldr	r0, [pc, #16]	; (8007024 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007012:	f7ff fdd0 	bl	8006bb6 <USBD_GetString>
  return USBD_StrDesc;
 8007016:	4b02      	ldr	r3, [pc, #8]	; (8007020 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007018:	4618      	mov	r0, r3
 800701a:	3708      	adds	r7, #8
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	200013bc 	.word	0x200013bc
 8007024:	08007770 	.word	0x08007770

08007028 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	4603      	mov	r3, r0
 8007030:	6039      	str	r1, [r7, #0]
 8007032:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	221a      	movs	r2, #26
 8007038:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800703a:	f000 f843 	bl	80070c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800703e:	4b02      	ldr	r3, [pc, #8]	; (8007048 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007040:	4618      	mov	r0, r3
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	2000016c 	.word	0x2000016c

0800704c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	4603      	mov	r3, r0
 8007054:	6039      	str	r1, [r7, #0]
 8007056:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007058:	79fb      	ldrb	r3, [r7, #7]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d105      	bne.n	800706a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800705e:	683a      	ldr	r2, [r7, #0]
 8007060:	4907      	ldr	r1, [pc, #28]	; (8007080 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007062:	4808      	ldr	r0, [pc, #32]	; (8007084 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007064:	f7ff fda7 	bl	8006bb6 <USBD_GetString>
 8007068:	e004      	b.n	8007074 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800706a:	683a      	ldr	r2, [r7, #0]
 800706c:	4904      	ldr	r1, [pc, #16]	; (8007080 <USBD_FS_ConfigStrDescriptor+0x34>)
 800706e:	4805      	ldr	r0, [pc, #20]	; (8007084 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007070:	f7ff fda1 	bl	8006bb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007074:	4b02      	ldr	r3, [pc, #8]	; (8007080 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007076:	4618      	mov	r0, r3
 8007078:	3708      	adds	r7, #8
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	200013bc 	.word	0x200013bc
 8007084:	08007774 	.word	0x08007774

08007088 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	4603      	mov	r3, r0
 8007090:	6039      	str	r1, [r7, #0]
 8007092:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007094:	79fb      	ldrb	r3, [r7, #7]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d105      	bne.n	80070a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800709a:	683a      	ldr	r2, [r7, #0]
 800709c:	4907      	ldr	r1, [pc, #28]	; (80070bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800709e:	4808      	ldr	r0, [pc, #32]	; (80070c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80070a0:	f7ff fd89 	bl	8006bb6 <USBD_GetString>
 80070a4:	e004      	b.n	80070b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80070a6:	683a      	ldr	r2, [r7, #0]
 80070a8:	4904      	ldr	r1, [pc, #16]	; (80070bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80070aa:	4805      	ldr	r0, [pc, #20]	; (80070c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80070ac:	f7ff fd83 	bl	8006bb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80070b0:	4b02      	ldr	r3, [pc, #8]	; (80070bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3708      	adds	r7, #8
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	200013bc 	.word	0x200013bc
 80070c0:	08007780 	.word	0x08007780

080070c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80070ca:	4b0f      	ldr	r3, [pc, #60]	; (8007108 <Get_SerialNum+0x44>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80070d0:	4b0e      	ldr	r3, [pc, #56]	; (800710c <Get_SerialNum+0x48>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80070d6:	4b0e      	ldr	r3, [pc, #56]	; (8007110 <Get_SerialNum+0x4c>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4413      	add	r3, r2
 80070e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d009      	beq.n	80070fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80070ea:	2208      	movs	r2, #8
 80070ec:	4909      	ldr	r1, [pc, #36]	; (8007114 <Get_SerialNum+0x50>)
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f000 f814 	bl	800711c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80070f4:	2204      	movs	r2, #4
 80070f6:	4908      	ldr	r1, [pc, #32]	; (8007118 <Get_SerialNum+0x54>)
 80070f8:	68b8      	ldr	r0, [r7, #8]
 80070fa:	f000 f80f 	bl	800711c <IntToUnicode>
  }
}
 80070fe:	bf00      	nop
 8007100:	3710      	adds	r7, #16
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	1ffff7e8 	.word	0x1ffff7e8
 800710c:	1ffff7ec 	.word	0x1ffff7ec
 8007110:	1ffff7f0 	.word	0x1ffff7f0
 8007114:	2000016e 	.word	0x2000016e
 8007118:	2000017e 	.word	0x2000017e

0800711c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800711c:	b480      	push	{r7}
 800711e:	b087      	sub	sp, #28
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	4613      	mov	r3, r2
 8007128:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800712a:	2300      	movs	r3, #0
 800712c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800712e:	2300      	movs	r3, #0
 8007130:	75fb      	strb	r3, [r7, #23]
 8007132:	e027      	b.n	8007184 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	0f1b      	lsrs	r3, r3, #28
 8007138:	2b09      	cmp	r3, #9
 800713a:	d80b      	bhi.n	8007154 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	0f1b      	lsrs	r3, r3, #28
 8007140:	b2da      	uxtb	r2, r3
 8007142:	7dfb      	ldrb	r3, [r7, #23]
 8007144:	005b      	lsls	r3, r3, #1
 8007146:	4619      	mov	r1, r3
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	440b      	add	r3, r1
 800714c:	3230      	adds	r2, #48	; 0x30
 800714e:	b2d2      	uxtb	r2, r2
 8007150:	701a      	strb	r2, [r3, #0]
 8007152:	e00a      	b.n	800716a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	0f1b      	lsrs	r3, r3, #28
 8007158:	b2da      	uxtb	r2, r3
 800715a:	7dfb      	ldrb	r3, [r7, #23]
 800715c:	005b      	lsls	r3, r3, #1
 800715e:	4619      	mov	r1, r3
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	440b      	add	r3, r1
 8007164:	3237      	adds	r2, #55	; 0x37
 8007166:	b2d2      	uxtb	r2, r2
 8007168:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	011b      	lsls	r3, r3, #4
 800716e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007170:	7dfb      	ldrb	r3, [r7, #23]
 8007172:	005b      	lsls	r3, r3, #1
 8007174:	3301      	adds	r3, #1
 8007176:	68ba      	ldr	r2, [r7, #8]
 8007178:	4413      	add	r3, r2
 800717a:	2200      	movs	r2, #0
 800717c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800717e:	7dfb      	ldrb	r3, [r7, #23]
 8007180:	3301      	adds	r3, #1
 8007182:	75fb      	strb	r3, [r7, #23]
 8007184:	7dfa      	ldrb	r2, [r7, #23]
 8007186:	79fb      	ldrb	r3, [r7, #7]
 8007188:	429a      	cmp	r2, r3
 800718a:	d3d3      	bcc.n	8007134 <IntToUnicode+0x18>
  }
}
 800718c:	bf00      	nop
 800718e:	371c      	adds	r7, #28
 8007190:	46bd      	mov	sp, r7
 8007192:	bc80      	pop	{r7}
 8007194:	4770      	bx	lr
	...

08007198 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a0d      	ldr	r2, [pc, #52]	; (80071dc <HAL_PCD_MspInit+0x44>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d113      	bne.n	80071d2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80071aa:	4b0d      	ldr	r3, [pc, #52]	; (80071e0 <HAL_PCD_MspInit+0x48>)
 80071ac:	69db      	ldr	r3, [r3, #28]
 80071ae:	4a0c      	ldr	r2, [pc, #48]	; (80071e0 <HAL_PCD_MspInit+0x48>)
 80071b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80071b4:	61d3      	str	r3, [r2, #28]
 80071b6:	4b0a      	ldr	r3, [pc, #40]	; (80071e0 <HAL_PCD_MspInit+0x48>)
 80071b8:	69db      	ldr	r3, [r3, #28]
 80071ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071be:	60fb      	str	r3, [r7, #12]
 80071c0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80071c2:	2200      	movs	r2, #0
 80071c4:	2100      	movs	r1, #0
 80071c6:	2014      	movs	r0, #20
 80071c8:	f7fa f9fb 	bl	80015c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80071cc:	2014      	movs	r0, #20
 80071ce:	f7fa fa14 	bl	80015fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80071d2:	bf00      	nop
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	40005c00 	.word	0x40005c00
 80071e0:	40021000 	.word	0x40021000

080071e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80071f8:	4619      	mov	r1, r3
 80071fa:	4610      	mov	r0, r2
 80071fc:	f7fe fdb7 	bl	8005d6e <USBD_LL_SetupStage>
}
 8007200:	bf00      	nop
 8007202:	3708      	adds	r7, #8
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	460b      	mov	r3, r1
 8007212:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800721a:	78fb      	ldrb	r3, [r7, #3]
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	015b      	lsls	r3, r3, #5
 8007220:	4413      	add	r3, r2
 8007222:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	78fb      	ldrb	r3, [r7, #3]
 800722a:	4619      	mov	r1, r3
 800722c:	f7fe fdea 	bl	8005e04 <USBD_LL_DataOutStage>
}
 8007230:	bf00      	nop
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	460b      	mov	r3, r1
 8007242:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800724a:	78fb      	ldrb	r3, [r7, #3]
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	015b      	lsls	r3, r3, #5
 8007250:	4413      	add	r3, r2
 8007252:	333c      	adds	r3, #60	; 0x3c
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	78fb      	ldrb	r3, [r7, #3]
 8007258:	4619      	mov	r1, r3
 800725a:	f7fe fe44 	bl	8005ee6 <USBD_LL_DataInStage>
}
 800725e:	bf00      	nop
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b082      	sub	sp, #8
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007274:	4618      	mov	r0, r3
 8007276:	f7fe ff54 	bl	8006122 <USBD_LL_SOF>
}
 800727a:	bf00      	nop
 800727c:	3708      	adds	r7, #8
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8007282:	b580      	push	{r7, lr}
 8007284:	b084      	sub	sp, #16
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800728a:	2301      	movs	r3, #1
 800728c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	2b02      	cmp	r3, #2
 8007294:	d001      	beq.n	800729a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007296:	f7f9 fe11 	bl	8000ebc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80072a0:	7bfa      	ldrb	r2, [r7, #15]
 80072a2:	4611      	mov	r1, r2
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7fe ff04 	bl	80060b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80072b0:	4618      	mov	r0, r3
 80072b2:	f7fe febd 	bl	8006030 <USBD_LL_Reset>
}
 80072b6:	bf00      	nop
 80072b8:	3710      	adds	r7, #16
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
	...

080072c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7fe fefe 	bl	80060d0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d005      	beq.n	80072e8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80072dc:	4b04      	ldr	r3, [pc, #16]	; (80072f0 <HAL_PCD_SuspendCallback+0x30>)
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	4a03      	ldr	r2, [pc, #12]	; (80072f0 <HAL_PCD_SuspendCallback+0x30>)
 80072e2:	f043 0306 	orr.w	r3, r3, #6
 80072e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80072e8:	bf00      	nop
 80072ea:	3708      	adds	r7, #8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	e000ed00 	.word	0xe000ed00

080072f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007302:	4618      	mov	r0, r3
 8007304:	f7fe fef8 	bl	80060f8 <USBD_LL_Resume>
}
 8007308:	bf00      	nop
 800730a:	3708      	adds	r7, #8
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007318:	4a28      	ldr	r2, [pc, #160]	; (80073bc <USBD_LL_Init+0xac>)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a26      	ldr	r2, [pc, #152]	; (80073bc <USBD_LL_Init+0xac>)
 8007324:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007328:	4b24      	ldr	r3, [pc, #144]	; (80073bc <USBD_LL_Init+0xac>)
 800732a:	4a25      	ldr	r2, [pc, #148]	; (80073c0 <USBD_LL_Init+0xb0>)
 800732c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800732e:	4b23      	ldr	r3, [pc, #140]	; (80073bc <USBD_LL_Init+0xac>)
 8007330:	2208      	movs	r2, #8
 8007332:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007334:	4b21      	ldr	r3, [pc, #132]	; (80073bc <USBD_LL_Init+0xac>)
 8007336:	2202      	movs	r2, #2
 8007338:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800733a:	4b20      	ldr	r3, [pc, #128]	; (80073bc <USBD_LL_Init+0xac>)
 800733c:	2200      	movs	r2, #0
 800733e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007340:	4b1e      	ldr	r3, [pc, #120]	; (80073bc <USBD_LL_Init+0xac>)
 8007342:	2200      	movs	r2, #0
 8007344:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007346:	4b1d      	ldr	r3, [pc, #116]	; (80073bc <USBD_LL_Init+0xac>)
 8007348:	2200      	movs	r2, #0
 800734a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800734c:	481b      	ldr	r0, [pc, #108]	; (80073bc <USBD_LL_Init+0xac>)
 800734e:	f7fa fe8f 	bl	8002070 <HAL_PCD_Init>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007358:	f7f9 fdb0 	bl	8000ebc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007362:	2318      	movs	r3, #24
 8007364:	2200      	movs	r2, #0
 8007366:	2100      	movs	r1, #0
 8007368:	f7fb fd28 	bl	8002dbc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007372:	2358      	movs	r3, #88	; 0x58
 8007374:	2200      	movs	r2, #0
 8007376:	2180      	movs	r1, #128	; 0x80
 8007378:	f7fb fd20 	bl	8002dbc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007382:	23c0      	movs	r3, #192	; 0xc0
 8007384:	2200      	movs	r2, #0
 8007386:	2181      	movs	r1, #129	; 0x81
 8007388:	f7fb fd18 	bl	8002dbc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007392:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007396:	2200      	movs	r2, #0
 8007398:	2101      	movs	r1, #1
 800739a:	f7fb fd0f 	bl	8002dbc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80073a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073a8:	2200      	movs	r2, #0
 80073aa:	2182      	movs	r1, #130	; 0x82
 80073ac:	f7fb fd06 	bl	8002dbc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	200015bc 	.word	0x200015bc
 80073c0:	40005c00 	.word	0x40005c00

080073c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073cc:	2300      	movs	r3, #0
 80073ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073d0:	2300      	movs	r3, #0
 80073d2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073da:	4618      	mov	r0, r3
 80073dc:	f7fa ff29 	bl	8002232 <HAL_PCD_Start>
 80073e0:	4603      	mov	r3, r0
 80073e2:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
 80073e6:	4618      	mov	r0, r3
 80073e8:	f000 f948 	bl	800767c <USBD_Get_USB_Status>
 80073ec:	4603      	mov	r3, r0
 80073ee:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80073f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b084      	sub	sp, #16
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
 8007402:	4608      	mov	r0, r1
 8007404:	4611      	mov	r1, r2
 8007406:	461a      	mov	r2, r3
 8007408:	4603      	mov	r3, r0
 800740a:	70fb      	strb	r3, [r7, #3]
 800740c:	460b      	mov	r3, r1
 800740e:	70bb      	strb	r3, [r7, #2]
 8007410:	4613      	mov	r3, r2
 8007412:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007414:	2300      	movs	r3, #0
 8007416:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007418:	2300      	movs	r3, #0
 800741a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007422:	78bb      	ldrb	r3, [r7, #2]
 8007424:	883a      	ldrh	r2, [r7, #0]
 8007426:	78f9      	ldrb	r1, [r7, #3]
 8007428:	f7fb f85c 	bl	80024e4 <HAL_PCD_EP_Open>
 800742c:	4603      	mov	r3, r0
 800742e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007430:	7bfb      	ldrb	r3, [r7, #15]
 8007432:	4618      	mov	r0, r3
 8007434:	f000 f922 	bl	800767c <USBD_Get_USB_Status>
 8007438:	4603      	mov	r3, r0
 800743a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800743c:	7bbb      	ldrb	r3, [r7, #14]
}
 800743e:	4618      	mov	r0, r3
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b084      	sub	sp, #16
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
 800744e:	460b      	mov	r3, r1
 8007450:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007452:	2300      	movs	r3, #0
 8007454:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007456:	2300      	movs	r3, #0
 8007458:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007460:	78fa      	ldrb	r2, [r7, #3]
 8007462:	4611      	mov	r1, r2
 8007464:	4618      	mov	r0, r3
 8007466:	f7fb f89d 	bl	80025a4 <HAL_PCD_EP_Close>
 800746a:	4603      	mov	r3, r0
 800746c:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800746e:	7bfb      	ldrb	r3, [r7, #15]
 8007470:	4618      	mov	r0, r3
 8007472:	f000 f903 	bl	800767c <USBD_Get_USB_Status>
 8007476:	4603      	mov	r3, r0
 8007478:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800747a:	7bbb      	ldrb	r3, [r7, #14]
}
 800747c:	4618      	mov	r0, r3
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	460b      	mov	r3, r1
 800748e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007490:	2300      	movs	r3, #0
 8007492:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007494:	2300      	movs	r3, #0
 8007496:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800749e:	78fa      	ldrb	r2, [r7, #3]
 80074a0:	4611      	mov	r1, r2
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7fb f947 	bl	8002736 <HAL_PCD_EP_SetStall>
 80074a8:	4603      	mov	r3, r0
 80074aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074ac:	7bfb      	ldrb	r3, [r7, #15]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f000 f8e4 	bl	800767c <USBD_Get_USB_Status>
 80074b4:	4603      	mov	r3, r0
 80074b6:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80074b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b084      	sub	sp, #16
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
 80074ca:	460b      	mov	r3, r1
 80074cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074ce:	2300      	movs	r3, #0
 80074d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074d2:	2300      	movs	r3, #0
 80074d4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074dc:	78fa      	ldrb	r2, [r7, #3]
 80074de:	4611      	mov	r1, r2
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7fb f982 	bl	80027ea <HAL_PCD_EP_ClrStall>
 80074e6:	4603      	mov	r3, r0
 80074e8:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80074ea:	7bfb      	ldrb	r3, [r7, #15]
 80074ec:	4618      	mov	r0, r3
 80074ee:	f000 f8c5 	bl	800767c <USBD_Get_USB_Status>
 80074f2:	4603      	mov	r3, r0
 80074f4:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 80074f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007500:	b480      	push	{r7}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	460b      	mov	r3, r1
 800750a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007512:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007514:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007518:	2b00      	cmp	r3, #0
 800751a:	da08      	bge.n	800752e <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800751c:	78fb      	ldrb	r3, [r7, #3]
 800751e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	015b      	lsls	r3, r3, #5
 8007526:	4413      	add	r3, r2
 8007528:	332a      	adds	r3, #42	; 0x2a
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	e008      	b.n	8007540 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800752e:	78fb      	ldrb	r3, [r7, #3]
 8007530:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	015b      	lsls	r3, r3, #5
 8007538:	4413      	add	r3, r2
 800753a:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800753e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007540:	4618      	mov	r0, r3
 8007542:	3714      	adds	r7, #20
 8007544:	46bd      	mov	sp, r7
 8007546:	bc80      	pop	{r7}
 8007548:	4770      	bx	lr

0800754a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b084      	sub	sp, #16
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
 8007552:	460b      	mov	r3, r1
 8007554:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007556:	2300      	movs	r3, #0
 8007558:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800755a:	2300      	movs	r3, #0
 800755c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007564:	78fa      	ldrb	r2, [r7, #3]
 8007566:	4611      	mov	r1, r2
 8007568:	4618      	mov	r0, r3
 800756a:	f7fa ff96 	bl	800249a <HAL_PCD_SetAddress>
 800756e:	4603      	mov	r3, r0
 8007570:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007572:	7bfb      	ldrb	r3, [r7, #15]
 8007574:	4618      	mov	r0, r3
 8007576:	f000 f881 	bl	800767c <USBD_Get_USB_Status>
 800757a:	4603      	mov	r3, r0
 800757c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800757e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007580:	4618      	mov	r0, r3
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b086      	sub	sp, #24
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	607a      	str	r2, [r7, #4]
 8007592:	461a      	mov	r2, r3
 8007594:	460b      	mov	r3, r1
 8007596:	72fb      	strb	r3, [r7, #11]
 8007598:	4613      	mov	r3, r2
 800759a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800759c:	2300      	movs	r3, #0
 800759e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075a0:	2300      	movs	r3, #0
 80075a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80075aa:	893b      	ldrh	r3, [r7, #8]
 80075ac:	7af9      	ldrb	r1, [r7, #11]
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	f7fb f888 	bl	80026c4 <HAL_PCD_EP_Transmit>
 80075b4:	4603      	mov	r3, r0
 80075b6:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80075b8:	7dfb      	ldrb	r3, [r7, #23]
 80075ba:	4618      	mov	r0, r3
 80075bc:	f000 f85e 	bl	800767c <USBD_Get_USB_Status>
 80075c0:	4603      	mov	r3, r0
 80075c2:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80075c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3718      	adds	r7, #24
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b086      	sub	sp, #24
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	60f8      	str	r0, [r7, #12]
 80075d6:	607a      	str	r2, [r7, #4]
 80075d8:	461a      	mov	r2, r3
 80075da:	460b      	mov	r3, r1
 80075dc:	72fb      	strb	r3, [r7, #11]
 80075de:	4613      	mov	r3, r2
 80075e0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075e6:	2300      	movs	r3, #0
 80075e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80075f0:	893b      	ldrh	r3, [r7, #8]
 80075f2:	7af9      	ldrb	r1, [r7, #11]
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	f7fb f817 	bl	8002628 <HAL_PCD_EP_Receive>
 80075fa:	4603      	mov	r3, r0
 80075fc:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80075fe:	7dfb      	ldrb	r3, [r7, #23]
 8007600:	4618      	mov	r0, r3
 8007602:	f000 f83b 	bl	800767c <USBD_Get_USB_Status>
 8007606:	4603      	mov	r3, r0
 8007608:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800760a:	7dbb      	ldrb	r3, [r7, #22]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3718      	adds	r7, #24
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	460b      	mov	r3, r1
 800761e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007626:	78fa      	ldrb	r2, [r7, #3]
 8007628:	4611      	mov	r1, r2
 800762a:	4618      	mov	r0, r3
 800762c:	f7fb f836 	bl	800269c <HAL_PCD_EP_GetRxCount>
 8007630:	4603      	mov	r3, r0
}
 8007632:	4618      	mov	r0, r3
 8007634:	3708      	adds	r7, #8
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
	...

0800763c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007644:	4b02      	ldr	r3, [pc, #8]	; (8007650 <USBD_static_malloc+0x14>)
}
 8007646:	4618      	mov	r0, r3
 8007648:	370c      	adds	r7, #12
 800764a:	46bd      	mov	sp, r7
 800764c:	bc80      	pop	{r7}
 800764e:	4770      	bx	lr
 8007650:	200001a8 	.word	0x200001a8

08007654 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]

}
 800765c:	bf00      	nop
 800765e:	370c      	adds	r7, #12
 8007660:	46bd      	mov	sp, r7
 8007662:	bc80      	pop	{r7}
 8007664:	4770      	bx	lr

08007666 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007666:	b480      	push	{r7}
 8007668:	b083      	sub	sp, #12
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
 800766e:	460b      	mov	r3, r1
 8007670:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007672:	bf00      	nop
 8007674:	370c      	adds	r7, #12
 8007676:	46bd      	mov	sp, r7
 8007678:	bc80      	pop	{r7}
 800767a:	4770      	bx	lr

0800767c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	4603      	mov	r3, r0
 8007684:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007686:	2300      	movs	r3, #0
 8007688:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800768a:	79fb      	ldrb	r3, [r7, #7]
 800768c:	2b03      	cmp	r3, #3
 800768e:	d817      	bhi.n	80076c0 <USBD_Get_USB_Status+0x44>
 8007690:	a201      	add	r2, pc, #4	; (adr r2, 8007698 <USBD_Get_USB_Status+0x1c>)
 8007692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007696:	bf00      	nop
 8007698:	080076a9 	.word	0x080076a9
 800769c:	080076af 	.word	0x080076af
 80076a0:	080076b5 	.word	0x080076b5
 80076a4:	080076bb 	.word	0x080076bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80076a8:	2300      	movs	r3, #0
 80076aa:	73fb      	strb	r3, [r7, #15]
    break;
 80076ac:	e00b      	b.n	80076c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80076ae:	2302      	movs	r3, #2
 80076b0:	73fb      	strb	r3, [r7, #15]
    break;
 80076b2:	e008      	b.n	80076c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80076b4:	2301      	movs	r3, #1
 80076b6:	73fb      	strb	r3, [r7, #15]
    break;
 80076b8:	e005      	b.n	80076c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80076ba:	2302      	movs	r3, #2
 80076bc:	73fb      	strb	r3, [r7, #15]
    break;
 80076be:	e002      	b.n	80076c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80076c0:	2302      	movs	r3, #2
 80076c2:	73fb      	strb	r3, [r7, #15]
    break;
 80076c4:	bf00      	nop
  }
  return usb_status;
 80076c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3714      	adds	r7, #20
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bc80      	pop	{r7}
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop

080076d4 <__libc_init_array>:
 80076d4:	b570      	push	{r4, r5, r6, lr}
 80076d6:	2500      	movs	r5, #0
 80076d8:	4e0c      	ldr	r6, [pc, #48]	; (800770c <__libc_init_array+0x38>)
 80076da:	4c0d      	ldr	r4, [pc, #52]	; (8007710 <__libc_init_array+0x3c>)
 80076dc:	1ba4      	subs	r4, r4, r6
 80076de:	10a4      	asrs	r4, r4, #2
 80076e0:	42a5      	cmp	r5, r4
 80076e2:	d109      	bne.n	80076f8 <__libc_init_array+0x24>
 80076e4:	f000 f82e 	bl	8007744 <_init>
 80076e8:	2500      	movs	r5, #0
 80076ea:	4e0a      	ldr	r6, [pc, #40]	; (8007714 <__libc_init_array+0x40>)
 80076ec:	4c0a      	ldr	r4, [pc, #40]	; (8007718 <__libc_init_array+0x44>)
 80076ee:	1ba4      	subs	r4, r4, r6
 80076f0:	10a4      	asrs	r4, r4, #2
 80076f2:	42a5      	cmp	r5, r4
 80076f4:	d105      	bne.n	8007702 <__libc_init_array+0x2e>
 80076f6:	bd70      	pop	{r4, r5, r6, pc}
 80076f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076fc:	4798      	blx	r3
 80076fe:	3501      	adds	r5, #1
 8007700:	e7ee      	b.n	80076e0 <__libc_init_array+0xc>
 8007702:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007706:	4798      	blx	r3
 8007708:	3501      	adds	r5, #1
 800770a:	e7f2      	b.n	80076f2 <__libc_init_array+0x1e>
 800770c:	080077a8 	.word	0x080077a8
 8007710:	080077a8 	.word	0x080077a8
 8007714:	080077a8 	.word	0x080077a8
 8007718:	080077ac 	.word	0x080077ac

0800771c <memcpy>:
 800771c:	b510      	push	{r4, lr}
 800771e:	1e43      	subs	r3, r0, #1
 8007720:	440a      	add	r2, r1
 8007722:	4291      	cmp	r1, r2
 8007724:	d100      	bne.n	8007728 <memcpy+0xc>
 8007726:	bd10      	pop	{r4, pc}
 8007728:	f811 4b01 	ldrb.w	r4, [r1], #1
 800772c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007730:	e7f7      	b.n	8007722 <memcpy+0x6>

08007732 <memset>:
 8007732:	4603      	mov	r3, r0
 8007734:	4402      	add	r2, r0
 8007736:	4293      	cmp	r3, r2
 8007738:	d100      	bne.n	800773c <memset+0xa>
 800773a:	4770      	bx	lr
 800773c:	f803 1b01 	strb.w	r1, [r3], #1
 8007740:	e7f9      	b.n	8007736 <memset+0x4>
	...

08007744 <_init>:
 8007744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007746:	bf00      	nop
 8007748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800774a:	bc08      	pop	{r3}
 800774c:	469e      	mov	lr, r3
 800774e:	4770      	bx	lr

08007750 <_fini>:
 8007750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007752:	bf00      	nop
 8007754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007756:	bc08      	pop	{r3}
 8007758:	469e      	mov	lr, r3
 800775a:	4770      	bx	lr
