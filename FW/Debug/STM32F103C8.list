
STM32F103C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080091c8  080091c8  000191c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009214  08009214  00020194  2**0
                  CONTENTS
  4 .ARM          00000000  08009214  08009214  00020194  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009214  08009214  00020194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009214  08009214  00019214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009218  08009218  00019218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  0800921c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001af4  20000194  080093b0  00020194  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c88  080093b0  00021c88  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 12 .debug_info   000224c9  00000000  00000000  000201bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000428d  00000000  00000000  00042686  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001860  00000000  00000000  00046918  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016d0  00000000  00000000  00048178  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000616a  00000000  00000000  00049848  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015ae8  00000000  00000000  0004f9b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007b629  00000000  00000000  0006549a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e0ac3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006690  00000000  00000000  000e0b40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000194 	.word	0x20000194
 8000128:	00000000 	.word	0x00000000
 800012c:	080091b0 	.word	0x080091b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000198 	.word	0x20000198
 8000148:	080091b0 	.word	0x080091b0

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2uiz>:
 80008e8:	004a      	lsls	r2, r1, #1
 80008ea:	d211      	bcs.n	8000910 <__aeabi_d2uiz+0x28>
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d211      	bcs.n	8000916 <__aeabi_d2uiz+0x2e>
 80008f2:	d50d      	bpl.n	8000910 <__aeabi_d2uiz+0x28>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d40e      	bmi.n	800091c <__aeabi_d2uiz+0x34>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	fa23 f002 	lsr.w	r0, r3, r2
 800090e:	4770      	bx	lr
 8000910:	f04f 0000 	mov.w	r0, #0
 8000914:	4770      	bx	lr
 8000916:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091a:	d102      	bne.n	8000922 <__aeabi_d2uiz+0x3a>
 800091c:	f04f 30ff 	mov.w	r0, #4294967295
 8000920:	4770      	bx	lr
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	4770      	bx	lr

08000928 <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af02      	add	r7, sp, #8
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 8000932:	f107 020f 	add.w	r2, r7, #15
 8000936:	1df9      	adds	r1, r7, #7
 8000938:	2364      	movs	r3, #100	; 0x64
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	2301      	movs	r3, #1
 800093e:	4804      	ldr	r0, [pc, #16]	; (8000950 <W25qxx_Spi+0x28>)
 8000940:	f004 f86e 	bl	8004a20 <HAL_SPI_TransmitReceive>
	return ret;	
 8000944:	7bfb      	ldrb	r3, [r7, #15]
}
 8000946:	4618      	mov	r0, r3
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000cac 	.word	0x20000cac

08000954 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	2300      	movs	r3, #0
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2110      	movs	r1, #16
 800096e:	4813      	ldr	r0, [pc, #76]	; (80009bc <W25qxx_ReadID+0x68>)
 8000970:	f002 f9c8 	bl	8002d04 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x9F);
 8000974:	209f      	movs	r0, #159	; 0x9f
 8000976:	f7ff ffd7 	bl	8000928 <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800097a:	20a5      	movs	r0, #165	; 0xa5
 800097c:	f7ff ffd4 	bl	8000928 <W25qxx_Spi>
 8000980:	4603      	mov	r3, r0
 8000982:	60bb      	str	r3, [r7, #8]
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000984:	20a5      	movs	r0, #165	; 0xa5
 8000986:	f7ff ffcf 	bl	8000928 <W25qxx_Spi>
 800098a:	4603      	mov	r3, r0
 800098c:	607b      	str	r3, [r7, #4]
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800098e:	20a5      	movs	r0, #165	; 0xa5
 8000990:	f7ff ffca 	bl	8000928 <W25qxx_Spi>
 8000994:	4603      	mov	r3, r0
 8000996:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000998:	2201      	movs	r2, #1
 800099a:	2110      	movs	r1, #16
 800099c:	4807      	ldr	r0, [pc, #28]	; (80009bc <W25qxx_ReadID+0x68>)
 800099e:	f002 f9b1 	bl	8002d04 <HAL_GPIO_WritePin>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	041a      	lsls	r2, r3, #16
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	021b      	lsls	r3, r3, #8
 80009aa:	4313      	orrs	r3, r2
 80009ac:	683a      	ldr	r2, [r7, #0]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	60fb      	str	r3, [r7, #12]
  return Temp;
 80009b2:	68fb      	ldr	r3, [r7, #12]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3710      	adds	r7, #16
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40010800 	.word	0x40010800

080009c0 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2110      	movs	r1, #16
 80009ca:	4816      	ldr	r0, [pc, #88]	; (8000a24 <W25qxx_ReadUniqID+0x64>)
 80009cc:	f002 f99a 	bl	8002d04 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x4B);
 80009d0:	204b      	movs	r0, #75	; 0x4b
 80009d2:	f7ff ffa9 	bl	8000928 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 80009d6:	2300      	movs	r3, #0
 80009d8:	71fb      	strb	r3, [r7, #7]
 80009da:	e005      	b.n	80009e8 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80009dc:	20a5      	movs	r0, #165	; 0xa5
 80009de:	f7ff ffa3 	bl	8000928 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	3301      	adds	r3, #1
 80009e6:	71fb      	strb	r3, [r7, #7]
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	2b03      	cmp	r3, #3
 80009ec:	d9f6      	bls.n	80009dc <W25qxx_ReadUniqID+0x1c>
	for(uint8_t	i=0;i<8;i++)
 80009ee:	2300      	movs	r3, #0
 80009f0:	71bb      	strb	r3, [r7, #6]
 80009f2:	e00b      	b.n	8000a0c <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80009f4:	79bc      	ldrb	r4, [r7, #6]
 80009f6:	20a5      	movs	r0, #165	; 0xa5
 80009f8:	f7ff ff96 	bl	8000928 <W25qxx_Spi>
 80009fc:	4603      	mov	r3, r0
 80009fe:	461a      	mov	r2, r3
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <W25qxx_ReadUniqID+0x68>)
 8000a02:	4423      	add	r3, r4
 8000a04:	705a      	strb	r2, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 8000a06:	79bb      	ldrb	r3, [r7, #6]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	71bb      	strb	r3, [r7, #6]
 8000a0c:	79bb      	ldrb	r3, [r7, #6]
 8000a0e:	2b07      	cmp	r3, #7
 8000a10:	d9f0      	bls.n	80009f4 <W25qxx_ReadUniqID+0x34>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000a12:	2201      	movs	r2, #1
 8000a14:	2110      	movs	r1, #16
 8000a16:	4803      	ldr	r0, [pc, #12]	; (8000a24 <W25qxx_ReadUniqID+0x64>)
 8000a18:	f002 f974 	bl	8002d04 <HAL_GPIO_WritePin>
}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd90      	pop	{r4, r7, pc}
 8000a24:	40010800 	.word	0x40010800
 8000a28:	200007c0 	.word	0x200007c0

08000a2c <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2110      	movs	r1, #16
 8000a34:	4807      	ldr	r0, [pc, #28]	; (8000a54 <W25qxx_WriteEnable+0x28>)
 8000a36:	f002 f965 	bl	8002d04 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x06);
 8000a3a:	2006      	movs	r0, #6
 8000a3c:	f7ff ff74 	bl	8000928 <W25qxx_Spi>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000a40:	2201      	movs	r2, #1
 8000a42:	2110      	movs	r1, #16
 8000a44:	4803      	ldr	r0, [pc, #12]	; (8000a54 <W25qxx_WriteEnable+0x28>)
 8000a46:	f002 f95d 	bl	8002d04 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	f001 fc60 	bl	8002310 <HAL_Delay>
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40010800 	.word	0x40010800

08000a58 <W25qxx_ReadStatusRegister>:
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
	uint8_t	status=0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2110      	movs	r1, #16
 8000a6a:	481c      	ldr	r0, [pc, #112]	; (8000adc <W25qxx_ReadStatusRegister+0x84>)
 8000a6c:	f002 f94a 	bl	8002d04 <HAL_GPIO_WritePin>
	if(SelectStatusRegister_1_2_3==1)
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d10c      	bne.n	8000a90 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8000a76:	2005      	movs	r0, #5
 8000a78:	f7ff ff56 	bl	8000928 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8000a7c:	20a5      	movs	r0, #165	; 0xa5
 8000a7e:	f7ff ff53 	bl	8000928 <W25qxx_Spi>
 8000a82:	4603      	mov	r3, r0
 8000a84:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8000a86:	4a16      	ldr	r2, [pc, #88]	; (8000ae0 <W25qxx_ReadStatusRegister+0x88>)
 8000a88:	7bfb      	ldrb	r3, [r7, #15]
 8000a8a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8000a8e:	e01b      	b.n	8000ac8 <W25qxx_ReadStatusRegister+0x70>
	}
	else if(SelectStatusRegister_1_2_3==2)
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	d10c      	bne.n	8000ab0 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8000a96:	2035      	movs	r0, #53	; 0x35
 8000a98:	f7ff ff46 	bl	8000928 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8000a9c:	20a5      	movs	r0, #165	; 0xa5
 8000a9e:	f7ff ff43 	bl	8000928 <W25qxx_Spi>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8000aa6:	4a0e      	ldr	r2, [pc, #56]	; (8000ae0 <W25qxx_ReadStatusRegister+0x88>)
 8000aa8:	7bfb      	ldrb	r3, [r7, #15]
 8000aaa:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8000aae:	e00b      	b.n	8000ac8 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8000ab0:	2015      	movs	r0, #21
 8000ab2:	f7ff ff39 	bl	8000928 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8000ab6:	20a5      	movs	r0, #165	; 0xa5
 8000ab8:	f7ff ff36 	bl	8000928 <W25qxx_Spi>
 8000abc:	4603      	mov	r3, r0
 8000abe:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8000ac0:	4a07      	ldr	r2, [pc, #28]	; (8000ae0 <W25qxx_ReadStatusRegister+0x88>)
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]
 8000ac4:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}	
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	2110      	movs	r1, #16
 8000acc:	4803      	ldr	r0, [pc, #12]	; (8000adc <W25qxx_ReadStatusRegister+0x84>)
 8000ace:	f002 f919 	bl	8002d04 <HAL_GPIO_WritePin>
	return status;
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40010800 	.word	0x40010800
 8000ae0:	200007c0 	.word	0x200007c0

08000ae4 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8000ae8:	2001      	movs	r0, #1
 8000aea:	f001 fc11 	bl	8002310 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2110      	movs	r1, #16
 8000af2:	480f      	ldr	r0, [pc, #60]	; (8000b30 <W25qxx_WaitForWriteEnd+0x4c>)
 8000af4:	f002 f906 	bl	8002d04 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8000af8:	2005      	movs	r0, #5
 8000afa:	f7ff ff15 	bl	8000928 <W25qxx_Spi>
  do
  {
    w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000afe:	20a5      	movs	r0, #165	; 0xa5
 8000b00:	f7ff ff12 	bl	8000928 <W25qxx_Spi>
 8000b04:	4603      	mov	r3, r0
 8000b06:	461a      	mov	r2, r3
 8000b08:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <W25qxx_WaitForWriteEnd+0x50>)
 8000b0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8000b0e:	2001      	movs	r0, #1
 8000b10:	f001 fbfe 	bl	8002310 <HAL_Delay>
  }
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8000b14:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <W25qxx_WaitForWriteEnd+0x50>)
 8000b16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d1ed      	bne.n	8000afe <W25qxx_WaitForWriteEnd+0x1a>
 HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000b22:	2201      	movs	r2, #1
 8000b24:	2110      	movs	r1, #16
 8000b26:	4802      	ldr	r0, [pc, #8]	; (8000b30 <W25qxx_WaitForWriteEnd+0x4c>)
 8000b28:	f002 f8ec 	bl	8002d04 <HAL_GPIO_WritePin>
}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40010800 	.word	0x40010800
 8000b34:	200007c0 	.word	0x200007c0

08000b38 <W25qxx_Init>:
//###################################################################################################################
bool	W25qxx_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
	w25qxx.Lock=1;	
 8000b3e:	4b60      	ldr	r3, [pc, #384]	; (8000cc0 <W25qxx_Init+0x188>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick()<100)
 8000b46:	e002      	b.n	8000b4e <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8000b48:	2001      	movs	r0, #1
 8000b4a:	f001 fbe1 	bl	8002310 <HAL_Delay>
	while(HAL_GetTick()<100)
 8000b4e:	f001 fbd5 	bl	80022fc <HAL_GetTick>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b63      	cmp	r3, #99	; 0x63
 8000b56:	d9f7      	bls.n	8000b48 <W25qxx_Init+0x10>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	2110      	movs	r1, #16
 8000b5c:	4859      	ldr	r0, [pc, #356]	; (8000cc4 <W25qxx_Init+0x18c>)
 8000b5e:	f002 f8d1 	bl	8002d04 <HAL_GPIO_WritePin>
  W25qxx_Delay(100);
 8000b62:	2064      	movs	r0, #100	; 0x64
 8000b64:	f001 fbd4 	bl	8002310 <HAL_Delay>
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Init Begin...\r\n");
	#endif
	id=W25qxx_ReadID();
 8000b68:	f7ff fef4 	bl	8000954 <W25qxx_ReadID>
 8000b6c:	6078      	str	r0, [r7, #4]
	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ID:0x%X\r\n",id);
	#endif
	switch(id&0x0000FFFF)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8000b76:	3b11      	subs	r3, #17
 8000b78:	2b09      	cmp	r3, #9
 8000b7a:	d860      	bhi.n	8000c3e <W25qxx_Init+0x106>
 8000b7c:	a201      	add	r2, pc, #4	; (adr r2, 8000b84 <W25qxx_Init+0x4c>)
 8000b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b82:	bf00      	nop
 8000b84:	08000c31 	.word	0x08000c31
 8000b88:	08000c23 	.word	0x08000c23
 8000b8c:	08000c15 	.word	0x08000c15
 8000b90:	08000c07 	.word	0x08000c07
 8000b94:	08000bf9 	.word	0x08000bf9
 8000b98:	08000beb 	.word	0x08000beb
 8000b9c:	08000bdd 	.word	0x08000bdd
 8000ba0:	08000bcd 	.word	0x08000bcd
 8000ba4:	08000bbd 	.word	0x08000bbd
 8000ba8:	08000bad 	.word	0x08000bad
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 8000bac:	4b44      	ldr	r3, [pc, #272]	; (8000cc0 <W25qxx_Init+0x188>)
 8000bae:	220a      	movs	r2, #10
 8000bb0:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 8000bb2:	4b43      	ldr	r3, [pc, #268]	; (8000cc0 <W25qxx_Init+0x188>)
 8000bb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bb8:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q512\r\n");
			#endif
		break;
 8000bba:	e046      	b.n	8000c4a <W25qxx_Init+0x112>
		case 0x4019:	// 	w25q256
			w25qxx.ID=W25Q256;
 8000bbc:	4b40      	ldr	r3, [pc, #256]	; (8000cc0 <W25qxx_Init+0x188>)
 8000bbe:	2209      	movs	r2, #9
 8000bc0:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 8000bc2:	4b3f      	ldr	r3, [pc, #252]	; (8000cc0 <W25qxx_Init+0x188>)
 8000bc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc8:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q256\r\n");
			#endif
		break;
 8000bca:	e03e      	b.n	8000c4a <W25qxx_Init+0x112>
		case 0x4018:	// 	w25q128
			w25qxx.ID=W25Q128;
 8000bcc:	4b3c      	ldr	r3, [pc, #240]	; (8000cc0 <W25qxx_Init+0x188>)
 8000bce:	2208      	movs	r2, #8
 8000bd0:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 8000bd2:	4b3b      	ldr	r3, [pc, #236]	; (8000cc0 <W25qxx_Init+0x188>)
 8000bd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bd8:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q128\r\n");
			#endif
		break;
 8000bda:	e036      	b.n	8000c4a <W25qxx_Init+0x112>
		case 0x4017:	//	w25q64
			w25qxx.ID=W25Q64;
 8000bdc:	4b38      	ldr	r3, [pc, #224]	; (8000cc0 <W25qxx_Init+0x188>)
 8000bde:	2207      	movs	r2, #7
 8000be0:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 8000be2:	4b37      	ldr	r3, [pc, #220]	; (8000cc0 <W25qxx_Init+0x188>)
 8000be4:	2280      	movs	r2, #128	; 0x80
 8000be6:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q64\r\n");
			#endif
		break;
 8000be8:	e02f      	b.n	8000c4a <W25qxx_Init+0x112>
		case 0x4016:	//	w25q32
			w25qxx.ID=W25Q32;
 8000bea:	4b35      	ldr	r3, [pc, #212]	; (8000cc0 <W25qxx_Init+0x188>)
 8000bec:	2206      	movs	r2, #6
 8000bee:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 8000bf0:	4b33      	ldr	r3, [pc, #204]	; (8000cc0 <W25qxx_Init+0x188>)
 8000bf2:	2240      	movs	r2, #64	; 0x40
 8000bf4:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q32\r\n");
			#endif
		break;
 8000bf6:	e028      	b.n	8000c4a <W25qxx_Init+0x112>
		case 0x4015:	//	w25q16
			w25qxx.ID=W25Q16;
 8000bf8:	4b31      	ldr	r3, [pc, #196]	; (8000cc0 <W25qxx_Init+0x188>)
 8000bfa:	2205      	movs	r2, #5
 8000bfc:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 8000bfe:	4b30      	ldr	r3, [pc, #192]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c00:	2220      	movs	r2, #32
 8000c02:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q16\r\n");
			#endif
		break;
 8000c04:	e021      	b.n	8000c4a <W25qxx_Init+0x112>
		case 0x4014:	//	w25q80
			w25qxx.ID=W25Q80;
 8000c06:	4b2e      	ldr	r3, [pc, #184]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c08:	2204      	movs	r2, #4
 8000c0a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 8000c0c:	4b2c      	ldr	r3, [pc, #176]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c0e:	2210      	movs	r2, #16
 8000c10:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q80\r\n");
			#endif
		break;
 8000c12:	e01a      	b.n	8000c4a <W25qxx_Init+0x112>
		case 0x4013:	//	w25q40
			w25qxx.ID=W25Q40;
 8000c14:	4b2a      	ldr	r3, [pc, #168]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c16:	2203      	movs	r2, #3
 8000c18:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 8000c1a:	4b29      	ldr	r3, [pc, #164]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c1c:	2208      	movs	r2, #8
 8000c1e:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q40\r\n");
			#endif
		break;
 8000c20:	e013      	b.n	8000c4a <W25qxx_Init+0x112>
		case 0x4012:	//	w25q20
			w25qxx.ID=W25Q20;
 8000c22:	4b27      	ldr	r3, [pc, #156]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c24:	2202      	movs	r2, #2
 8000c26:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 8000c28:	4b25      	ldr	r3, [pc, #148]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c2a:	2204      	movs	r2, #4
 8000c2c:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q20\r\n");
			#endif
		break;
 8000c2e:	e00c      	b.n	8000c4a <W25qxx_Init+0x112>
		case 0x4011:	//	w25q10
			w25qxx.ID=W25Q10;
 8000c30:	4b23      	ldr	r3, [pc, #140]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 8000c36:	4b22      	ldr	r3, [pc, #136]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c38:	2202      	movs	r2, #2
 8000c3a:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q10\r\n");
			#endif
		break;
 8000c3c:	e005      	b.n	8000c4a <W25qxx_Init+0x112>
		default:
				#if (_W25QXX_DEBUG==1)
				printf("w25qxx Unknown ID\r\n");
				#endif
			w25qxx.Lock=0;	
 8000c3e:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return false;
 8000c46:	2300      	movs	r3, #0
 8000c48:	e036      	b.n	8000cb8 <W25qxx_Init+0x180>
				
	}		
	w25qxx.PageSize=256;
 8000c4a:	4b1d      	ldr	r3, [pc, #116]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c50:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize=0x1000;
 8000c52:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c58:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 8000c5a:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	011b      	lsls	r3, r3, #4
 8000c60:	4a17      	ldr	r2, [pc, #92]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c62:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 8000c64:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c66:	695b      	ldr	r3, [r3, #20]
 8000c68:	4a15      	ldr	r2, [pc, #84]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c6a:	6912      	ldr	r2, [r2, #16]
 8000c6c:	fb02 f303 	mul.w	r3, r2, r3
 8000c70:	4a13      	ldr	r2, [pc, #76]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c72:	8952      	ldrh	r2, [r2, #10]
 8000c74:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c78:	4a11      	ldr	r2, [pc, #68]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c7a:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 8000c7c:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c7e:	691b      	ldr	r3, [r3, #16]
 8000c80:	011b      	lsls	r3, r3, #4
 8000c82:	4a0f      	ldr	r2, [pc, #60]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c84:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	4a0d      	ldr	r2, [pc, #52]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c8c:	6912      	ldr	r2, [r2, #16]
 8000c8e:	fb02 f303 	mul.w	r3, r2, r3
 8000c92:	0a9b      	lsrs	r3, r3, #10
 8000c94:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <W25qxx_Init+0x188>)
 8000c96:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8000c98:	f7ff fe92 	bl	80009c0 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	f7ff fedb 	bl	8000a58 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8000ca2:	2002      	movs	r0, #2
 8000ca4:	f7ff fed8 	bl	8000a58 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f7ff fed5 	bl	8000a58 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
	#endif
	w25qxx.Lock=0;	
 8000cae:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <W25qxx_Init+0x188>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8000cb6:	2301      	movs	r3, #1
}	
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	200007c0 	.word	0x200007c0
 8000cc4:	40010800 	.word	0x40010800

08000cc8 <W25qxx_EraseChip>:
//###################################################################################################################
void	W25qxx_EraseChip(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
	while(w25qxx.Lock==1)
 8000ccc:	e002      	b.n	8000cd4 <W25qxx_EraseChip+0xc>
		W25qxx_Delay(1);
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f001 fb1e 	bl	8002310 <HAL_Delay>
	while(w25qxx.Lock==1)
 8000cd4:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <W25qxx_EraseChip+0x54>)
 8000cd6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d0f7      	beq.n	8000cce <W25qxx_EraseChip+0x6>
	w25qxx.Lock=1;	
 8000cde:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <W25qxx_EraseChip+0x54>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();	
	printf("w25qxx EraseChip Begin...\r\n");
	#endif
	W25qxx_WriteEnable();
 8000ce6:	f7ff fea1 	bl	8000a2c <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2110      	movs	r1, #16
 8000cee:	480c      	ldr	r0, [pc, #48]	; (8000d20 <W25qxx_EraseChip+0x58>)
 8000cf0:	f002 f808 	bl	8002d04 <HAL_GPIO_WritePin>
  W25qxx_Spi(0xC7);
 8000cf4:	20c7      	movs	r0, #199	; 0xc7
 8000cf6:	f7ff fe17 	bl	8000928 <W25qxx_Spi>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2110      	movs	r1, #16
 8000cfe:	4808      	ldr	r0, [pc, #32]	; (8000d20 <W25qxx_EraseChip+0x58>)
 8000d00:	f002 f800 	bl	8002d04 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8000d04:	f7ff feee 	bl	8000ae4 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseBlock done after %d ms!\r\n",HAL_GetTick()-StartTime);
	#endif
	W25qxx_Delay(10);
 8000d08:	200a      	movs	r0, #10
 8000d0a:	f001 fb01 	bl	8002310 <HAL_Delay>
	w25qxx.Lock=0;	
 8000d0e:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <W25qxx_EraseChip+0x54>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200007c0 	.word	0x200007c0
 8000d20:	40010800 	.word	0x40010800

08000d24 <W25qxx_EraseSector>:
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock==1)
 8000d2c:	e002      	b.n	8000d34 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f001 faee 	bl	8002310 <HAL_Delay>
	while(w25qxx.Lock==1)
 8000d34:	4b23      	ldr	r3, [pc, #140]	; (8000dc4 <W25qxx_EraseSector+0xa0>)
 8000d36:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d0f7      	beq.n	8000d2e <W25qxx_EraseSector+0xa>
	w25qxx.Lock=1;	
 8000d3e:	4b21      	ldr	r3, [pc, #132]	; (8000dc4 <W25qxx_EraseSector+0xa0>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();	
	printf("w25qxx EraseSector %d Begin...\r\n",SectorAddr);
	#endif
	W25qxx_WaitForWriteEnd();
 8000d46:	f7ff fecd 	bl	8000ae4 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8000d4a:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <W25qxx_EraseSector+0xa0>)
 8000d4c:	691a      	ldr	r2, [r3, #16]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	fb02 f303 	mul.w	r3, r2, r3
 8000d54:	607b      	str	r3, [r7, #4]
  W25qxx_WriteEnable();
 8000d56:	f7ff fe69 	bl	8000a2c <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2110      	movs	r1, #16
 8000d5e:	481a      	ldr	r0, [pc, #104]	; (8000dc8 <W25qxx_EraseSector+0xa4>)
 8000d60:	f001 ffd0 	bl	8002d04 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x20);
 8000d64:	2020      	movs	r0, #32
 8000d66:	f7ff fddf 	bl	8000928 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8000d6a:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <W25qxx_EraseSector+0xa0>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b08      	cmp	r3, #8
 8000d70:	d905      	bls.n	8000d7e <W25qxx_EraseSector+0x5a>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	0e1b      	lsrs	r3, r3, #24
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fdd5 	bl	8000928 <W25qxx_Spi>
  W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	0c1b      	lsrs	r3, r3, #16
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fdcf 	bl	8000928 <W25qxx_Spi>
  W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	0a1b      	lsrs	r3, r3, #8
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fdc9 	bl	8000928 <W25qxx_Spi>
  W25qxx_Spi(SectorAddr & 0xFF);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fdc4 	bl	8000928 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000da0:	2201      	movs	r2, #1
 8000da2:	2110      	movs	r1, #16
 8000da4:	4808      	ldr	r0, [pc, #32]	; (8000dc8 <W25qxx_EraseSector+0xa4>)
 8000da6:	f001 ffad 	bl	8002d04 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 8000daa:	f7ff fe9b 	bl	8000ae4 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseSector done after %d ms\r\n",HAL_GetTick()-StartTime);
	#endif
	W25qxx_Delay(1);
 8000dae:	2001      	movs	r0, #1
 8000db0:	f001 faae 	bl	8002310 <HAL_Delay>
	w25qxx.Lock=0;
 8000db4:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <W25qxx_EraseSector+0xa0>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	200007c0 	.word	0x200007c0
 8000dc8:	40010800 	.word	0x40010800

08000dcc <W25qxx_EraseBlock>:
//###################################################################################################################
void W25qxx_EraseBlock(uint32_t BlockAddr)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock==1)
 8000dd4:	e002      	b.n	8000ddc <W25qxx_EraseBlock+0x10>
		W25qxx_Delay(1);
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	f001 fa9a 	bl	8002310 <HAL_Delay>
	while(w25qxx.Lock==1)
 8000ddc:	4b24      	ldr	r3, [pc, #144]	; (8000e70 <W25qxx_EraseBlock+0xa4>)
 8000dde:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d0f7      	beq.n	8000dd6 <W25qxx_EraseBlock+0xa>
	w25qxx.Lock=1;	
 8000de6:	4b22      	ldr	r3, [pc, #136]	; (8000e70 <W25qxx_EraseBlock+0xa4>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseBlock %d Begin...\r\n",BlockAddr);
	W25qxx_Delay(100);
	uint32_t	StartTime=HAL_GetTick();	
	#endif
	W25qxx_WaitForWriteEnd();
 8000dee:	f7ff fe79 	bl	8000ae4 <W25qxx_WaitForWriteEnd>
	BlockAddr = BlockAddr * w25qxx.SectorSize*16;
 8000df2:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <W25qxx_EraseBlock+0xa4>)
 8000df4:	691b      	ldr	r3, [r3, #16]
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	fb02 f303 	mul.w	r3, r2, r3
 8000dfc:	011b      	lsls	r3, r3, #4
 8000dfe:	607b      	str	r3, [r7, #4]
  W25qxx_WriteEnable();
 8000e00:	f7ff fe14 	bl	8000a2c <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2110      	movs	r1, #16
 8000e08:	481a      	ldr	r0, [pc, #104]	; (8000e74 <W25qxx_EraseBlock+0xa8>)
 8000e0a:	f001 ff7b 	bl	8002d04 <HAL_GPIO_WritePin>
  W25qxx_Spi(0xD8);
 8000e0e:	20d8      	movs	r0, #216	; 0xd8
 8000e10:	f7ff fd8a 	bl	8000928 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8000e14:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <W25qxx_EraseBlock+0xa4>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b08      	cmp	r3, #8
 8000e1a:	d905      	bls.n	8000e28 <W25qxx_EraseBlock+0x5c>
		W25qxx_Spi((BlockAddr & 0xFF000000) >> 24);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	0e1b      	lsrs	r3, r3, #24
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fd80 	bl	8000928 <W25qxx_Spi>
  W25qxx_Spi((BlockAddr & 0xFF0000) >> 16);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	0c1b      	lsrs	r3, r3, #16
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff fd7a 	bl	8000928 <W25qxx_Spi>
  W25qxx_Spi((BlockAddr & 0xFF00) >> 8);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	0a1b      	lsrs	r3, r3, #8
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fd74 	bl	8000928 <W25qxx_Spi>
  W25qxx_Spi(BlockAddr & 0xFF);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fd6f 	bl	8000928 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	2110      	movs	r1, #16
 8000e4e:	4809      	ldr	r0, [pc, #36]	; (8000e74 <W25qxx_EraseBlock+0xa8>)
 8000e50:	f001 ff58 	bl	8002d04 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 8000e54:	f7ff fe46 	bl	8000ae4 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseBlock done after %d ms\r\n",HAL_GetTick()-StartTime);
	W25qxx_Delay(100);
	#endif
	W25qxx_Delay(1);
 8000e58:	2001      	movs	r0, #1
 8000e5a:	f001 fa59 	bl	8002310 <HAL_Delay>
	w25qxx.Lock=0;
 8000e5e:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <W25qxx_EraseBlock+0xa4>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200007c0 	.word	0x200007c0
 8000e74:	40010800 	.word	0x40010800

08000e78 <W25qxx_IsEmptyPage>:
{
	return (BlockAddress*w25qxx.BlockSize)/w25qxx.PageSize;
}
//###################################################################################################################
bool 	W25qxx_IsEmptyPage(uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToCheck_up_to_PageSize)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b090      	sub	sp, #64	; 0x40
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
	while(w25qxx.Lock==1)
 8000e84:	e002      	b.n	8000e8c <W25qxx_IsEmptyPage+0x14>
	W25qxx_Delay(1);
 8000e86:	2001      	movs	r0, #1
 8000e88:	f001 fa42 	bl	8002310 <HAL_Delay>
	while(w25qxx.Lock==1)
 8000e8c:	4b6d      	ldr	r3, [pc, #436]	; (8001044 <W25qxx_IsEmptyPage+0x1cc>)
 8000e8e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d0f7      	beq.n	8000e86 <W25qxx_IsEmptyPage+0xe>
	w25qxx.Lock=1;	
 8000e96:	4b6b      	ldr	r3, [pc, #428]	; (8001044 <W25qxx_IsEmptyPage+0x1cc>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if(((NumByteToCheck_up_to_PageSize+OffsetInByte)>w25qxx.PageSize)||(NumByteToCheck_up_to_PageSize==0))
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	4a67      	ldr	r2, [pc, #412]	; (8001044 <W25qxx_IsEmptyPage+0x1cc>)
 8000ea6:	8952      	ldrh	r2, [r2, #10]
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d802      	bhi.n	8000eb2 <W25qxx_IsEmptyPage+0x3a>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d105      	bne.n	8000ebe <W25qxx_IsEmptyPage+0x46>
		NumByteToCheck_up_to_PageSize=w25qxx.PageSize-OffsetInByte;
 8000eb2:	4b64      	ldr	r3, [pc, #400]	; (8001044 <W25qxx_IsEmptyPage+0x1cc>)
 8000eb4:	895b      	ldrh	r3, [r3, #10]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	607b      	str	r3, [r7, #4]
	uint32_t	StartTime=HAL_GetTick();
	#endif		
	uint8_t	pBuffer[32];
	uint32_t	WorkAddress;
	uint32_t	i;
	for(i=OffsetInByte; i<w25qxx.PageSize; i+=sizeof(pBuffer))
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ec2:	e053      	b.n	8000f6c <W25qxx_IsEmptyPage+0xf4>
	{
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2110      	movs	r1, #16
 8000ec8:	485f      	ldr	r0, [pc, #380]	; (8001048 <W25qxx_IsEmptyPage+0x1d0>)
 8000eca:	f001 ff1b 	bl	8002d04 <HAL_GPIO_WritePin>
		WorkAddress=(i+Page_Address*w25qxx.PageSize);
 8000ece:	4b5d      	ldr	r3, [pc, #372]	; (8001044 <W25qxx_IsEmptyPage+0x1cc>)
 8000ed0:	895b      	ldrh	r3, [r3, #10]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	fb03 f302 	mul.w	r3, r3, r2
 8000eda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000edc:	4413      	add	r3, r2
 8000ede:	637b      	str	r3, [r7, #52]	; 0x34
		W25qxx_Spi(0x0B);
 8000ee0:	200b      	movs	r0, #11
 8000ee2:	f7ff fd21 	bl	8000928 <W25qxx_Spi>
		if(w25qxx.ID>=W25Q256)
 8000ee6:	4b57      	ldr	r3, [pc, #348]	; (8001044 <W25qxx_IsEmptyPage+0x1cc>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b08      	cmp	r3, #8
 8000eec:	d905      	bls.n	8000efa <W25qxx_IsEmptyPage+0x82>
			W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 8000eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ef0:	0e1b      	lsrs	r3, r3, #24
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fd17 	bl	8000928 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8000efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000efc:	0c1b      	lsrs	r3, r3, #16
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fd11 	bl	8000928 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8000f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f08:	0a1b      	lsrs	r3, r3, #8
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fd0b 	bl	8000928 <W25qxx_Spi>
		W25qxx_Spi(WorkAddress & 0xFF);
 8000f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fd06 	bl	8000928 <W25qxx_Spi>
		W25qxx_Spi(0);
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f7ff fd03 	bl	8000928 <W25qxx_Spi>
		HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,sizeof(pBuffer),100);	
 8000f22:	f107 0114 	add.w	r1, r7, #20
 8000f26:	2364      	movs	r3, #100	; 0x64
 8000f28:	2220      	movs	r2, #32
 8000f2a:	4848      	ldr	r0, [pc, #288]	; (800104c <W25qxx_IsEmptyPage+0x1d4>)
 8000f2c:	f003 fc6f 	bl	800480e <HAL_SPI_Receive>
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);	
 8000f30:	2201      	movs	r2, #1
 8000f32:	2110      	movs	r1, #16
 8000f34:	4844      	ldr	r0, [pc, #272]	; (8001048 <W25qxx_IsEmptyPage+0x1d0>)
 8000f36:	f001 fee5 	bl	8002d04 <HAL_GPIO_WritePin>
		for(uint8_t x=0;x<sizeof(pBuffer);x++)
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000f40:	e00d      	b.n	8000f5e <W25qxx_IsEmptyPage+0xe6>
		{
			if(pBuffer[x]!=0xFF)
 8000f42:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f46:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000f4a:	4413      	add	r3, r2
 8000f4c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8000f50:	2bff      	cmp	r3, #255	; 0xff
 8000f52:	d16b      	bne.n	800102c <W25qxx_IsEmptyPage+0x1b4>
		for(uint8_t x=0;x<sizeof(pBuffer);x++)
 8000f54:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f58:	3301      	adds	r3, #1
 8000f5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000f5e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f62:	2b1f      	cmp	r3, #31
 8000f64:	d9ed      	bls.n	8000f42 <W25qxx_IsEmptyPage+0xca>
	for(i=OffsetInByte; i<w25qxx.PageSize; i+=sizeof(pBuffer))
 8000f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f68:	3320      	adds	r3, #32
 8000f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f6c:	4b35      	ldr	r3, [pc, #212]	; (8001044 <W25qxx_IsEmptyPage+0x1cc>)
 8000f6e:	895b      	ldrh	r3, [r3, #10]
 8000f70:	461a      	mov	r2, r3
 8000f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d3a5      	bcc.n	8000ec4 <W25qxx_IsEmptyPage+0x4c>
				goto NOT_EMPTY;		
		}			
	}	
	if((w25qxx.PageSize+OffsetInByte)%sizeof(pBuffer)!=0)
 8000f78:	4b32      	ldr	r3, [pc, #200]	; (8001044 <W25qxx_IsEmptyPage+0x1cc>)
 8000f7a:	895b      	ldrh	r3, [r3, #10]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	4413      	add	r3, r2
 8000f82:	f003 031f 	and.w	r3, r3, #31
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d04a      	beq.n	8001020 <W25qxx_IsEmptyPage+0x1a8>
	{
		i-=sizeof(pBuffer);
 8000f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f8c:	3b20      	subs	r3, #32
 8000f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
		for( ; i<w25qxx.PageSize; i++)
 8000f90:	e040      	b.n	8001014 <W25qxx_IsEmptyPage+0x19c>
		{
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2110      	movs	r1, #16
 8000f96:	482c      	ldr	r0, [pc, #176]	; (8001048 <W25qxx_IsEmptyPage+0x1d0>)
 8000f98:	f001 feb4 	bl	8002d04 <HAL_GPIO_WritePin>
			WorkAddress=(i+Page_Address*w25qxx.PageSize);
 8000f9c:	4b29      	ldr	r3, [pc, #164]	; (8001044 <W25qxx_IsEmptyPage+0x1cc>)
 8000f9e:	895b      	ldrh	r3, [r3, #10]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	fb03 f302 	mul.w	r3, r3, r2
 8000fa8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000faa:	4413      	add	r3, r2
 8000fac:	637b      	str	r3, [r7, #52]	; 0x34
			W25qxx_Spi(0x0B);
 8000fae:	200b      	movs	r0, #11
 8000fb0:	f7ff fcba 	bl	8000928 <W25qxx_Spi>
			if(w25qxx.ID>=W25Q256)
 8000fb4:	4b23      	ldr	r3, [pc, #140]	; (8001044 <W25qxx_IsEmptyPage+0x1cc>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b08      	cmp	r3, #8
 8000fba:	d905      	bls.n	8000fc8 <W25qxx_IsEmptyPage+0x150>
				W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 8000fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fbe:	0e1b      	lsrs	r3, r3, #24
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fcb0 	bl	8000928 <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8000fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fca:	0c1b      	lsrs	r3, r3, #16
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fcaa 	bl	8000928 <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8000fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd6:	0a1b      	lsrs	r3, r3, #8
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fca4 	bl	8000928 <W25qxx_Spi>
			W25qxx_Spi(WorkAddress & 0xFF);
 8000fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fc9f 	bl	8000928 <W25qxx_Spi>
			W25qxx_Spi(0);
 8000fea:	2000      	movs	r0, #0
 8000fec:	f7ff fc9c 	bl	8000928 <W25qxx_Spi>
			HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,1,100);	
 8000ff0:	f107 0114 	add.w	r1, r7, #20
 8000ff4:	2364      	movs	r3, #100	; 0x64
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	4814      	ldr	r0, [pc, #80]	; (800104c <W25qxx_IsEmptyPage+0x1d4>)
 8000ffa:	f003 fc08 	bl	800480e <HAL_SPI_Receive>
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);	
 8000ffe:	2201      	movs	r2, #1
 8001000:	2110      	movs	r1, #16
 8001002:	4811      	ldr	r0, [pc, #68]	; (8001048 <W25qxx_IsEmptyPage+0x1d0>)
 8001004:	f001 fe7e 	bl	8002d04 <HAL_GPIO_WritePin>
			if(pBuffer[0]!=0xFF)
 8001008:	7d3b      	ldrb	r3, [r7, #20]
 800100a:	2bff      	cmp	r3, #255	; 0xff
 800100c:	d110      	bne.n	8001030 <W25qxx_IsEmptyPage+0x1b8>
		for( ; i<w25qxx.PageSize; i++)
 800100e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001010:	3301      	adds	r3, #1
 8001012:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001014:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <W25qxx_IsEmptyPage+0x1cc>)
 8001016:	895b      	ldrh	r3, [r3, #10]
 8001018:	461a      	mov	r2, r3
 800101a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800101c:	4293      	cmp	r3, r2
 800101e:	d3b8      	bcc.n	8000f92 <W25qxx_IsEmptyPage+0x11a>
	}	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx CheckPage is Empty in %d ms\r\n",HAL_GetTick()-StartTime);
	W25qxx_Delay(100);
	#endif	
	w25qxx.Lock=0;
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <W25qxx_IsEmptyPage+0x1cc>)
 8001022:	2200      	movs	r2, #0
 8001024:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;	
 8001028:	2301      	movs	r3, #1
 800102a:	e007      	b.n	800103c <W25qxx_IsEmptyPage+0x1c4>
				goto NOT_EMPTY;		
 800102c:	bf00      	nop
 800102e:	e000      	b.n	8001032 <W25qxx_IsEmptyPage+0x1ba>
				goto NOT_EMPTY;
 8001030:	bf00      	nop
	NOT_EMPTY:
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx CheckPage is Not Empty in %d ms\r\n",HAL_GetTick()-StartTime);
	W25qxx_Delay(100);
	#endif	
	w25qxx.Lock=0;
 8001032:	4b04      	ldr	r3, [pc, #16]	; (8001044 <W25qxx_IsEmptyPage+0x1cc>)
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return false;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	3740      	adds	r7, #64	; 0x40
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200007c0 	.word	0x200007c0
 8001048:	40010800 	.word	0x40010800
 800104c:	20000cac 	.word	0x20000cac

08001050 <W25qxx_IsEmptySector>:
//###################################################################################################################
bool 	W25qxx_IsEmptySector(uint32_t Sector_Address,uint32_t OffsetInByte,uint32_t NumByteToCheck_up_to_SectorSize)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b090      	sub	sp, #64	; 0x40
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
	while(w25qxx.Lock==1)
 800105c:	e002      	b.n	8001064 <W25qxx_IsEmptySector+0x14>
	W25qxx_Delay(1);
 800105e:	2001      	movs	r0, #1
 8001060:	f001 f956 	bl	8002310 <HAL_Delay>
	while(w25qxx.Lock==1)
 8001064:	4b68      	ldr	r3, [pc, #416]	; (8001208 <W25qxx_IsEmptySector+0x1b8>)
 8001066:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800106a:	2b01      	cmp	r3, #1
 800106c:	d0f7      	beq.n	800105e <W25qxx_IsEmptySector+0xe>
	w25qxx.Lock=1;	
 800106e:	4b66      	ldr	r3, [pc, #408]	; (8001208 <W25qxx_IsEmptySector+0x1b8>)
 8001070:	2201      	movs	r2, #1
 8001072:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if((NumByteToCheck_up_to_SectorSize>w25qxx.SectorSize)||(NumByteToCheck_up_to_SectorSize==0))
 8001076:	4b64      	ldr	r3, [pc, #400]	; (8001208 <W25qxx_IsEmptySector+0x1b8>)
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	429a      	cmp	r2, r3
 800107e:	d802      	bhi.n	8001086 <W25qxx_IsEmptySector+0x36>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d102      	bne.n	800108c <W25qxx_IsEmptySector+0x3c>
		NumByteToCheck_up_to_SectorSize=w25qxx.SectorSize;
 8001086:	4b60      	ldr	r3, [pc, #384]	; (8001208 <W25qxx_IsEmptySector+0x1b8>)
 8001088:	691b      	ldr	r3, [r3, #16]
 800108a:	607b      	str	r3, [r7, #4]
	uint32_t	StartTime=HAL_GetTick();
	#endif		
	uint8_t	pBuffer[32];
	uint32_t	WorkAddress;
	uint32_t	i;
	for(i=OffsetInByte; i<w25qxx.SectorSize; i+=sizeof(pBuffer))
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001090:	e052      	b.n	8001138 <W25qxx_IsEmptySector+0xe8>
	{
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	2110      	movs	r1, #16
 8001096:	485d      	ldr	r0, [pc, #372]	; (800120c <W25qxx_IsEmptySector+0x1bc>)
 8001098:	f001 fe34 	bl	8002d04 <HAL_GPIO_WritePin>
		WorkAddress=(i+Sector_Address*w25qxx.SectorSize);
 800109c:	4b5a      	ldr	r3, [pc, #360]	; (8001208 <W25qxx_IsEmptySector+0x1b8>)
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	68fa      	ldr	r2, [r7, #12]
 80010a2:	fb02 f303 	mul.w	r3, r2, r3
 80010a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80010a8:	4413      	add	r3, r2
 80010aa:	637b      	str	r3, [r7, #52]	; 0x34
		W25qxx_Spi(0x0B);
 80010ac:	200b      	movs	r0, #11
 80010ae:	f7ff fc3b 	bl	8000928 <W25qxx_Spi>
		if(w25qxx.ID>=W25Q256)
 80010b2:	4b55      	ldr	r3, [pc, #340]	; (8001208 <W25qxx_IsEmptySector+0x1b8>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b08      	cmp	r3, #8
 80010b8:	d905      	bls.n	80010c6 <W25qxx_IsEmptySector+0x76>
			W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 80010ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010bc:	0e1b      	lsrs	r3, r3, #24
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fc31 	bl	8000928 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 80010c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010c8:	0c1b      	lsrs	r3, r3, #16
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fc2b 	bl	8000928 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 80010d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010d4:	0a1b      	lsrs	r3, r3, #8
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fc25 	bl	8000928 <W25qxx_Spi>
		W25qxx_Spi(WorkAddress & 0xFF);
 80010de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fc20 	bl	8000928 <W25qxx_Spi>
		W25qxx_Spi(0);
 80010e8:	2000      	movs	r0, #0
 80010ea:	f7ff fc1d 	bl	8000928 <W25qxx_Spi>
		HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,sizeof(pBuffer),100);	
 80010ee:	f107 0114 	add.w	r1, r7, #20
 80010f2:	2364      	movs	r3, #100	; 0x64
 80010f4:	2220      	movs	r2, #32
 80010f6:	4846      	ldr	r0, [pc, #280]	; (8001210 <W25qxx_IsEmptySector+0x1c0>)
 80010f8:	f003 fb89 	bl	800480e <HAL_SPI_Receive>
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);	
 80010fc:	2201      	movs	r2, #1
 80010fe:	2110      	movs	r1, #16
 8001100:	4842      	ldr	r0, [pc, #264]	; (800120c <W25qxx_IsEmptySector+0x1bc>)
 8001102:	f001 fdff 	bl	8002d04 <HAL_GPIO_WritePin>
		for(uint8_t x=0;x<sizeof(pBuffer);x++)
 8001106:	2300      	movs	r3, #0
 8001108:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800110c:	e00d      	b.n	800112a <W25qxx_IsEmptySector+0xda>
		{
			if(pBuffer[x]!=0xFF)
 800110e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001112:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001116:	4413      	add	r3, r2
 8001118:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800111c:	2bff      	cmp	r3, #255	; 0xff
 800111e:	d167      	bne.n	80011f0 <W25qxx_IsEmptySector+0x1a0>
		for(uint8_t x=0;x<sizeof(pBuffer);x++)
 8001120:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001124:	3301      	adds	r3, #1
 8001126:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800112a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800112e:	2b1f      	cmp	r3, #31
 8001130:	d9ed      	bls.n	800110e <W25qxx_IsEmptySector+0xbe>
	for(i=OffsetInByte; i<w25qxx.SectorSize; i+=sizeof(pBuffer))
 8001132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001134:	3320      	adds	r3, #32
 8001136:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001138:	4b33      	ldr	r3, [pc, #204]	; (8001208 <W25qxx_IsEmptySector+0x1b8>)
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800113e:	429a      	cmp	r2, r3
 8001140:	d3a7      	bcc.n	8001092 <W25qxx_IsEmptySector+0x42>
				goto NOT_EMPTY;		
		}			
	}	
	if((w25qxx.SectorSize+OffsetInByte)%sizeof(pBuffer)!=0)
 8001142:	4b31      	ldr	r3, [pc, #196]	; (8001208 <W25qxx_IsEmptySector+0x1b8>)
 8001144:	691a      	ldr	r2, [r3, #16]
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	4413      	add	r3, r2
 800114a:	f003 031f 	and.w	r3, r3, #31
 800114e:	2b00      	cmp	r3, #0
 8001150:	d048      	beq.n	80011e4 <W25qxx_IsEmptySector+0x194>
	{
		i-=sizeof(pBuffer);
 8001152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001154:	3b20      	subs	r3, #32
 8001156:	63fb      	str	r3, [r7, #60]	; 0x3c
		for( ; i<w25qxx.SectorSize; i++)
 8001158:	e03f      	b.n	80011da <W25qxx_IsEmptySector+0x18a>
		{
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	2110      	movs	r1, #16
 800115e:	482b      	ldr	r0, [pc, #172]	; (800120c <W25qxx_IsEmptySector+0x1bc>)
 8001160:	f001 fdd0 	bl	8002d04 <HAL_GPIO_WritePin>
			WorkAddress=(i+Sector_Address*w25qxx.SectorSize);
 8001164:	4b28      	ldr	r3, [pc, #160]	; (8001208 <W25qxx_IsEmptySector+0x1b8>)
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	68fa      	ldr	r2, [r7, #12]
 800116a:	fb02 f303 	mul.w	r3, r2, r3
 800116e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001170:	4413      	add	r3, r2
 8001172:	637b      	str	r3, [r7, #52]	; 0x34
			W25qxx_Spi(0x0B);
 8001174:	200b      	movs	r0, #11
 8001176:	f7ff fbd7 	bl	8000928 <W25qxx_Spi>
			if(w25qxx.ID>=W25Q256)
 800117a:	4b23      	ldr	r3, [pc, #140]	; (8001208 <W25qxx_IsEmptySector+0x1b8>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b08      	cmp	r3, #8
 8001180:	d905      	bls.n	800118e <W25qxx_IsEmptySector+0x13e>
				W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 8001182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001184:	0e1b      	lsrs	r3, r3, #24
 8001186:	b2db      	uxtb	r3, r3
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fbcd 	bl	8000928 <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 800118e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001190:	0c1b      	lsrs	r3, r3, #16
 8001192:	b2db      	uxtb	r3, r3
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fbc7 	bl	8000928 <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 800119a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fbc1 	bl	8000928 <W25qxx_Spi>
			W25qxx_Spi(WorkAddress & 0xFF);
 80011a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fbbc 	bl	8000928 <W25qxx_Spi>
			W25qxx_Spi(0);
 80011b0:	2000      	movs	r0, #0
 80011b2:	f7ff fbb9 	bl	8000928 <W25qxx_Spi>
			HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,1,100);	
 80011b6:	f107 0114 	add.w	r1, r7, #20
 80011ba:	2364      	movs	r3, #100	; 0x64
 80011bc:	2201      	movs	r2, #1
 80011be:	4814      	ldr	r0, [pc, #80]	; (8001210 <W25qxx_IsEmptySector+0x1c0>)
 80011c0:	f003 fb25 	bl	800480e <HAL_SPI_Receive>
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);	
 80011c4:	2201      	movs	r2, #1
 80011c6:	2110      	movs	r1, #16
 80011c8:	4810      	ldr	r0, [pc, #64]	; (800120c <W25qxx_IsEmptySector+0x1bc>)
 80011ca:	f001 fd9b 	bl	8002d04 <HAL_GPIO_WritePin>
			if(pBuffer[0]!=0xFF)
 80011ce:	7d3b      	ldrb	r3, [r7, #20]
 80011d0:	2bff      	cmp	r3, #255	; 0xff
 80011d2:	d10f      	bne.n	80011f4 <W25qxx_IsEmptySector+0x1a4>
		for( ; i<w25qxx.SectorSize; i++)
 80011d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011d6:	3301      	adds	r3, #1
 80011d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <W25qxx_IsEmptySector+0x1b8>)
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d3ba      	bcc.n	800115a <W25qxx_IsEmptySector+0x10a>
	}	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx CheckSector is Empty in %d ms\r\n",HAL_GetTick()-StartTime);
	W25qxx_Delay(100);
	#endif	
	w25qxx.Lock=0;
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <W25qxx_IsEmptySector+0x1b8>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;	
 80011ec:	2301      	movs	r3, #1
 80011ee:	e007      	b.n	8001200 <W25qxx_IsEmptySector+0x1b0>
				goto NOT_EMPTY;		
 80011f0:	bf00      	nop
 80011f2:	e000      	b.n	80011f6 <W25qxx_IsEmptySector+0x1a6>
				goto NOT_EMPTY;
 80011f4:	bf00      	nop
	NOT_EMPTY:
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx CheckSector is Not Empty in %d ms\r\n",HAL_GetTick()-StartTime);
	W25qxx_Delay(100);
	#endif	
	w25qxx.Lock=0;
 80011f6:	4b04      	ldr	r3, [pc, #16]	; (8001208 <W25qxx_IsEmptySector+0x1b8>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return false;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	3740      	adds	r7, #64	; 0x40
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	200007c0 	.word	0x200007c0
 800120c:	40010800 	.word	0x40010800
 8001210:	20000cac 	.word	0x20000cac

08001214 <W25qxx_IsEmptyBlock>:
//###################################################################################################################
bool 	W25qxx_IsEmptyBlock(uint32_t Block_Address,uint32_t OffsetInByte,uint32_t NumByteToCheck_up_to_BlockSize)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b090      	sub	sp, #64	; 0x40
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
	while(w25qxx.Lock==1)
 8001220:	e002      	b.n	8001228 <W25qxx_IsEmptyBlock+0x14>
	W25qxx_Delay(1);
 8001222:	2001      	movs	r0, #1
 8001224:	f001 f874 	bl	8002310 <HAL_Delay>
	while(w25qxx.Lock==1)
 8001228:	4b68      	ldr	r3, [pc, #416]	; (80013cc <W25qxx_IsEmptyBlock+0x1b8>)
 800122a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800122e:	2b01      	cmp	r3, #1
 8001230:	d0f7      	beq.n	8001222 <W25qxx_IsEmptyBlock+0xe>
	w25qxx.Lock=1;	
 8001232:	4b66      	ldr	r3, [pc, #408]	; (80013cc <W25qxx_IsEmptyBlock+0x1b8>)
 8001234:	2201      	movs	r2, #1
 8001236:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if((NumByteToCheck_up_to_BlockSize>w25qxx.BlockSize)||(NumByteToCheck_up_to_BlockSize==0))
 800123a:	4b64      	ldr	r3, [pc, #400]	; (80013cc <W25qxx_IsEmptyBlock+0x1b8>)
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	429a      	cmp	r2, r3
 8001242:	d802      	bhi.n	800124a <W25qxx_IsEmptyBlock+0x36>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d102      	bne.n	8001250 <W25qxx_IsEmptyBlock+0x3c>
		NumByteToCheck_up_to_BlockSize=w25qxx.BlockSize;
 800124a:	4b60      	ldr	r3, [pc, #384]	; (80013cc <W25qxx_IsEmptyBlock+0x1b8>)
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	607b      	str	r3, [r7, #4]
	uint32_t	StartTime=HAL_GetTick();
	#endif		
	uint8_t	pBuffer[32];
	uint32_t	WorkAddress;
	uint32_t	i;
	for(i=OffsetInByte; i<w25qxx.BlockSize; i+=sizeof(pBuffer))
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001254:	e052      	b.n	80012fc <W25qxx_IsEmptyBlock+0xe8>
	{
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	2110      	movs	r1, #16
 800125a:	485d      	ldr	r0, [pc, #372]	; (80013d0 <W25qxx_IsEmptyBlock+0x1bc>)
 800125c:	f001 fd52 	bl	8002d04 <HAL_GPIO_WritePin>
		WorkAddress=(i+Block_Address*w25qxx.BlockSize);
 8001260:	4b5a      	ldr	r3, [pc, #360]	; (80013cc <W25qxx_IsEmptyBlock+0x1b8>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	68fa      	ldr	r2, [r7, #12]
 8001266:	fb02 f303 	mul.w	r3, r2, r3
 800126a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800126c:	4413      	add	r3, r2
 800126e:	637b      	str	r3, [r7, #52]	; 0x34
		W25qxx_Spi(0x0B);
 8001270:	200b      	movs	r0, #11
 8001272:	f7ff fb59 	bl	8000928 <W25qxx_Spi>
		if(w25qxx.ID>=W25Q256)
 8001276:	4b55      	ldr	r3, [pc, #340]	; (80013cc <W25qxx_IsEmptyBlock+0x1b8>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b08      	cmp	r3, #8
 800127c:	d905      	bls.n	800128a <W25qxx_IsEmptyBlock+0x76>
			W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 800127e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001280:	0e1b      	lsrs	r3, r3, #24
 8001282:	b2db      	uxtb	r3, r3
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fb4f 	bl	8000928 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 800128a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800128c:	0c1b      	lsrs	r3, r3, #16
 800128e:	b2db      	uxtb	r3, r3
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fb49 	bl	8000928 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8001296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001298:	0a1b      	lsrs	r3, r3, #8
 800129a:	b2db      	uxtb	r3, r3
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fb43 	bl	8000928 <W25qxx_Spi>
		W25qxx_Spi(WorkAddress & 0xFF);
 80012a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fb3e 	bl	8000928 <W25qxx_Spi>
		W25qxx_Spi(0);
 80012ac:	2000      	movs	r0, #0
 80012ae:	f7ff fb3b 	bl	8000928 <W25qxx_Spi>
		HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,sizeof(pBuffer),100);	
 80012b2:	f107 0114 	add.w	r1, r7, #20
 80012b6:	2364      	movs	r3, #100	; 0x64
 80012b8:	2220      	movs	r2, #32
 80012ba:	4846      	ldr	r0, [pc, #280]	; (80013d4 <W25qxx_IsEmptyBlock+0x1c0>)
 80012bc:	f003 faa7 	bl	800480e <HAL_SPI_Receive>
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);	
 80012c0:	2201      	movs	r2, #1
 80012c2:	2110      	movs	r1, #16
 80012c4:	4842      	ldr	r0, [pc, #264]	; (80013d0 <W25qxx_IsEmptyBlock+0x1bc>)
 80012c6:	f001 fd1d 	bl	8002d04 <HAL_GPIO_WritePin>
		for(uint8_t x=0;x<sizeof(pBuffer);x++)
 80012ca:	2300      	movs	r3, #0
 80012cc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80012d0:	e00d      	b.n	80012ee <W25qxx_IsEmptyBlock+0xda>
		{
			if(pBuffer[x]!=0xFF)
 80012d2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012d6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80012da:	4413      	add	r3, r2
 80012dc:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80012e0:	2bff      	cmp	r3, #255	; 0xff
 80012e2:	d167      	bne.n	80013b4 <W25qxx_IsEmptyBlock+0x1a0>
		for(uint8_t x=0;x<sizeof(pBuffer);x++)
 80012e4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012e8:	3301      	adds	r3, #1
 80012ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80012ee:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012f2:	2b1f      	cmp	r3, #31
 80012f4:	d9ed      	bls.n	80012d2 <W25qxx_IsEmptyBlock+0xbe>
	for(i=OffsetInByte; i<w25qxx.BlockSize; i+=sizeof(pBuffer))
 80012f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012f8:	3320      	adds	r3, #32
 80012fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012fc:	4b33      	ldr	r3, [pc, #204]	; (80013cc <W25qxx_IsEmptyBlock+0x1b8>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001302:	429a      	cmp	r2, r3
 8001304:	d3a7      	bcc.n	8001256 <W25qxx_IsEmptyBlock+0x42>
				goto NOT_EMPTY;		
		}			
	}	
	if((w25qxx.BlockSize+OffsetInByte)%sizeof(pBuffer)!=0)
 8001306:	4b31      	ldr	r3, [pc, #196]	; (80013cc <W25qxx_IsEmptyBlock+0x1b8>)
 8001308:	699a      	ldr	r2, [r3, #24]
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	4413      	add	r3, r2
 800130e:	f003 031f 	and.w	r3, r3, #31
 8001312:	2b00      	cmp	r3, #0
 8001314:	d048      	beq.n	80013a8 <W25qxx_IsEmptyBlock+0x194>
	{
		i-=sizeof(pBuffer);
 8001316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001318:	3b20      	subs	r3, #32
 800131a:	63fb      	str	r3, [r7, #60]	; 0x3c
		for( ; i<w25qxx.BlockSize; i++)
 800131c:	e03f      	b.n	800139e <W25qxx_IsEmptyBlock+0x18a>
		{
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	2110      	movs	r1, #16
 8001322:	482b      	ldr	r0, [pc, #172]	; (80013d0 <W25qxx_IsEmptyBlock+0x1bc>)
 8001324:	f001 fcee 	bl	8002d04 <HAL_GPIO_WritePin>
			WorkAddress=(i+Block_Address*w25qxx.BlockSize);
 8001328:	4b28      	ldr	r3, [pc, #160]	; (80013cc <W25qxx_IsEmptyBlock+0x1b8>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	fb02 f303 	mul.w	r3, r2, r3
 8001332:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001334:	4413      	add	r3, r2
 8001336:	637b      	str	r3, [r7, #52]	; 0x34
			W25qxx_Spi(0x0B);
 8001338:	200b      	movs	r0, #11
 800133a:	f7ff faf5 	bl	8000928 <W25qxx_Spi>
			if(w25qxx.ID>=W25Q256)
 800133e:	4b23      	ldr	r3, [pc, #140]	; (80013cc <W25qxx_IsEmptyBlock+0x1b8>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b08      	cmp	r3, #8
 8001344:	d905      	bls.n	8001352 <W25qxx_IsEmptyBlock+0x13e>
				W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 8001346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001348:	0e1b      	lsrs	r3, r3, #24
 800134a:	b2db      	uxtb	r3, r3
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff faeb 	bl	8000928 <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8001352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001354:	0c1b      	lsrs	r3, r3, #16
 8001356:	b2db      	uxtb	r3, r3
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fae5 	bl	8000928 <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 800135e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001360:	0a1b      	lsrs	r3, r3, #8
 8001362:	b2db      	uxtb	r3, r3
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fadf 	bl	8000928 <W25qxx_Spi>
			W25qxx_Spi(WorkAddress & 0xFF);
 800136a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800136c:	b2db      	uxtb	r3, r3
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fada 	bl	8000928 <W25qxx_Spi>
			W25qxx_Spi(0);
 8001374:	2000      	movs	r0, #0
 8001376:	f7ff fad7 	bl	8000928 <W25qxx_Spi>
			HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,1,100);	
 800137a:	f107 0114 	add.w	r1, r7, #20
 800137e:	2364      	movs	r3, #100	; 0x64
 8001380:	2201      	movs	r2, #1
 8001382:	4814      	ldr	r0, [pc, #80]	; (80013d4 <W25qxx_IsEmptyBlock+0x1c0>)
 8001384:	f003 fa43 	bl	800480e <HAL_SPI_Receive>
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);	
 8001388:	2201      	movs	r2, #1
 800138a:	2110      	movs	r1, #16
 800138c:	4810      	ldr	r0, [pc, #64]	; (80013d0 <W25qxx_IsEmptyBlock+0x1bc>)
 800138e:	f001 fcb9 	bl	8002d04 <HAL_GPIO_WritePin>
			if(pBuffer[0]!=0xFF)
 8001392:	7d3b      	ldrb	r3, [r7, #20]
 8001394:	2bff      	cmp	r3, #255	; 0xff
 8001396:	d10f      	bne.n	80013b8 <W25qxx_IsEmptyBlock+0x1a4>
		for( ; i<w25qxx.BlockSize; i++)
 8001398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800139a:	3301      	adds	r3, #1
 800139c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <W25qxx_IsEmptyBlock+0x1b8>)
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d3ba      	bcc.n	800131e <W25qxx_IsEmptyBlock+0x10a>
	}	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx CheckBlock is Empty in %d ms\r\n",HAL_GetTick()-StartTime);
	W25qxx_Delay(100);
	#endif	
	w25qxx.Lock=0;
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <W25qxx_IsEmptyBlock+0x1b8>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;	
 80013b0:	2301      	movs	r3, #1
 80013b2:	e007      	b.n	80013c4 <W25qxx_IsEmptyBlock+0x1b0>
				goto NOT_EMPTY;		
 80013b4:	bf00      	nop
 80013b6:	e000      	b.n	80013ba <W25qxx_IsEmptyBlock+0x1a6>
				goto NOT_EMPTY;
 80013b8:	bf00      	nop
	NOT_EMPTY:
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx CheckBlock is Not Empty in %d ms\r\n",HAL_GetTick()-StartTime);
	W25qxx_Delay(100);
	#endif	
	w25qxx.Lock=0;
 80013ba:	4b04      	ldr	r3, [pc, #16]	; (80013cc <W25qxx_IsEmptyBlock+0x1b8>)
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return false;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3740      	adds	r7, #64	; 0x40
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200007c0 	.word	0x200007c0
 80013d0:	40010800 	.word	0x40010800
 80013d4:	20000cac 	.word	0x20000cac

080013d8 <init_user_call>:
};

WorkMode_t WorkMode=Mode_UART;

void init_user_call()//在硬件初始化完成后调用
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart2,UART_IT_IDLE);//打开总线空闲中断
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <init_user_call+0x1c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68da      	ldr	r2, [r3, #12]
 80013e2:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <init_user_call+0x1c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f042 0210 	orr.w	r2, r2, #16
 80013ea:	60da      	str	r2, [r3, #12]
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr
 80013f4:	20000d04 	.word	0x20000d04

080013f8 <loop_user_call>:

void loop_user_call()//在Main函数里循环调用此函数
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
	if(linecode.IsUpdate)
 80013fc:	4b4b      	ldr	r3, [pc, #300]	; (800152c <loop_user_call+0x134>)
 80013fe:	7a1b      	ldrb	r3, [r3, #8]
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 808b 	beq.w	800151c <loop_user_call+0x124>
	{
		HAL_Delay(20);//延时20ms设置通信参数
 8001406:	2014      	movs	r0, #20
 8001408:	f000 ff82 	bl	8002310 <HAL_Delay>
		if(linecode.Rate<1500000)//速率小于1.5Mbps，为串口模式(极其有限的串口支持)
 800140c:	4b47      	ldr	r3, [pc, #284]	; (800152c <loop_user_call+0x134>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a47      	ldr	r2, [pc, #284]	; (8001530 <loop_user_call+0x138>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d870      	bhi.n	80014f8 <loop_user_call+0x100>
		{//重新初始化串口
			WorkMode=Mode_UART;
 8001416:	4b47      	ldr	r3, [pc, #284]	; (8001534 <loop_user_call+0x13c>)
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
			huart2.Instance = USART2;
 800141c:	4b46      	ldr	r3, [pc, #280]	; (8001538 <loop_user_call+0x140>)
 800141e:	4a47      	ldr	r2, [pc, #284]	; (800153c <loop_user_call+0x144>)
 8001420:	601a      	str	r2, [r3, #0]

			huart2.Init.BaudRate = linecode.Rate;//linecode的速率
 8001422:	4b42      	ldr	r3, [pc, #264]	; (800152c <loop_user_call+0x134>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a44      	ldr	r2, [pc, #272]	; (8001538 <loop_user_call+0x140>)
 8001428:	6053      	str	r3, [r2, #4]

			huart2.Init.WordLength = UART_WORDLENGTH_8B;//只支持8/9数据位（包括校验位）
 800142a:	4b43      	ldr	r3, [pc, #268]	; (8001538 <loop_user_call+0x140>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
			if(linecode.DataBits==8 && linecode.Parity!=0)
 8001430:	4b3e      	ldr	r3, [pc, #248]	; (800152c <loop_user_call+0x134>)
 8001432:	88db      	ldrh	r3, [r3, #6]
 8001434:	2b08      	cmp	r3, #8
 8001436:	d107      	bne.n	8001448 <loop_user_call+0x50>
 8001438:	4b3c      	ldr	r3, [pc, #240]	; (800152c <loop_user_call+0x134>)
 800143a:	795b      	ldrb	r3, [r3, #5]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <loop_user_call+0x50>
			{
				huart2.Init.WordLength=UART_WORDLENGTH_9B;
 8001440:	4b3d      	ldr	r3, [pc, #244]	; (8001538 <loop_user_call+0x140>)
 8001442:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001446:	609a      	str	r2, [r3, #8]
			}

			huart2.Init.StopBits = UART_STOPBITS_1;
 8001448:	4b3b      	ldr	r3, [pc, #236]	; (8001538 <loop_user_call+0x140>)
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
			if(linecode.StopBits==2)
 800144e:	4b37      	ldr	r3, [pc, #220]	; (800152c <loop_user_call+0x134>)
 8001450:	791b      	ldrb	r3, [r3, #4]
 8001452:	2b02      	cmp	r3, #2
 8001454:	d103      	bne.n	800145e <loop_user_call+0x66>
			{
				huart2.Init.StopBits=UART_STOPBITS_2;
 8001456:	4b38      	ldr	r3, [pc, #224]	; (8001538 <loop_user_call+0x140>)
 8001458:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800145c:	60da      	str	r2, [r3, #12]
			}


			huart2.Init.Parity = UART_PARITY_NONE;
 800145e:	4b36      	ldr	r3, [pc, #216]	; (8001538 <loop_user_call+0x140>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
			if(linecode.Parity==1)
 8001464:	4b31      	ldr	r3, [pc, #196]	; (800152c <loop_user_call+0x134>)
 8001466:	795b      	ldrb	r3, [r3, #5]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d103      	bne.n	8001474 <loop_user_call+0x7c>
				huart2.Init.Parity = UART_PARITY_ODD;
 800146c:	4b32      	ldr	r3, [pc, #200]	; (8001538 <loop_user_call+0x140>)
 800146e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001472:	611a      	str	r2, [r3, #16]
			if(linecode.Parity==2)
 8001474:	4b2d      	ldr	r3, [pc, #180]	; (800152c <loop_user_call+0x134>)
 8001476:	795b      	ldrb	r3, [r3, #5]
 8001478:	2b02      	cmp	r3, #2
 800147a:	d103      	bne.n	8001484 <loop_user_call+0x8c>
				huart2.Init.Parity = UART_PARITY_EVEN;
 800147c:	4b2e      	ldr	r3, [pc, #184]	; (8001538 <loop_user_call+0x140>)
 800147e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001482:	611a      	str	r2, [r3, #16]



			huart2.Init.Mode = UART_MODE_TX_RX;
 8001484:	4b2c      	ldr	r3, [pc, #176]	; (8001538 <loop_user_call+0x140>)
 8001486:	220c      	movs	r2, #12
 8001488:	615a      	str	r2, [r3, #20]

			huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;//不支持流控
 800148a:	4b2b      	ldr	r3, [pc, #172]	; (8001538 <loop_user_call+0x140>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]

			huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001490:	4b29      	ldr	r3, [pc, #164]	; (8001538 <loop_user_call+0x140>)
 8001492:	2200      	movs	r2, #0
 8001494:	61da      	str	r2, [r3, #28]

			 if (HAL_UART_Init(&huart2) != HAL_OK)
 8001496:	4828      	ldr	r0, [pc, #160]	; (8001538 <loop_user_call+0x140>)
 8001498:	f003 ff36 	bl	8005308 <HAL_UART_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d028      	beq.n	80014f4 <loop_user_call+0xfc>
			  {//打开失败则使用默认设置
				  huart2.Instance = USART2;
 80014a2:	4b25      	ldr	r3, [pc, #148]	; (8001538 <loop_user_call+0x140>)
 80014a4:	4a25      	ldr	r2, [pc, #148]	; (800153c <loop_user_call+0x144>)
 80014a6:	601a      	str	r2, [r3, #0]
				  huart2.Init.BaudRate = 115200;
 80014a8:	4b23      	ldr	r3, [pc, #140]	; (8001538 <loop_user_call+0x140>)
 80014aa:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014ae:	605a      	str	r2, [r3, #4]
				  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014b0:	4b21      	ldr	r3, [pc, #132]	; (8001538 <loop_user_call+0x140>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
				  huart2.Init.StopBits = UART_STOPBITS_1;
 80014b6:	4b20      	ldr	r3, [pc, #128]	; (8001538 <loop_user_call+0x140>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	60da      	str	r2, [r3, #12]
				  huart2.Init.Parity = UART_PARITY_NONE;
 80014bc:	4b1e      	ldr	r3, [pc, #120]	; (8001538 <loop_user_call+0x140>)
 80014be:	2200      	movs	r2, #0
 80014c0:	611a      	str	r2, [r3, #16]
				  huart2.Init.Mode = UART_MODE_TX_RX;
 80014c2:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <loop_user_call+0x140>)
 80014c4:	220c      	movs	r2, #12
 80014c6:	615a      	str	r2, [r3, #20]
				  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c8:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <loop_user_call+0x140>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	619a      	str	r2, [r3, #24]
				  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ce:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <loop_user_call+0x140>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	61da      	str	r2, [r3, #28]
				  HAL_UART_Init(&huart2);
 80014d4:	4818      	ldr	r0, [pc, #96]	; (8001538 <loop_user_call+0x140>)
 80014d6:	f003 ff17 	bl	8005308 <HAL_UART_Init>
				  linecode.DataBits=8;
 80014da:	4b14      	ldr	r3, [pc, #80]	; (800152c <loop_user_call+0x134>)
 80014dc:	2208      	movs	r2, #8
 80014de:	80da      	strh	r2, [r3, #6]
				  linecode.Parity=0;
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <loop_user_call+0x134>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	715a      	strb	r2, [r3, #5]
				  linecode.Rate=115200;
 80014e6:	4b11      	ldr	r3, [pc, #68]	; (800152c <loop_user_call+0x134>)
 80014e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014ec:	601a      	str	r2, [r3, #0]
				  linecode.StopBits=0;
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <loop_user_call+0x134>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	711a      	strb	r2, [r3, #4]
			  }
			 uart_start_receive();
 80014f4:	f000 fa52 	bl	800199c <uart_start_receive>
		}

		if(linecode.Rate>=2000000)//切换为spi模式
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <loop_user_call+0x134>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a10      	ldr	r2, [pc, #64]	; (8001540 <loop_user_call+0x148>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d909      	bls.n	8001516 <loop_user_call+0x11e>
		{
			WorkMode=Mode_SPI_RAW;
 8001502:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <loop_user_call+0x13c>)
 8001504:	2201      	movs	r2, #1
 8001506:	701a      	strb	r2, [r3, #0]

			if(linecode.StopBits!=0)
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <loop_user_call+0x134>)
 800150a:	791b      	ldrb	r3, [r3, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d002      	beq.n	8001516 <loop_user_call+0x11e>
			{
				WorkMode=Mode_SPI_CMD;
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <loop_user_call+0x13c>)
 8001512:	2202      	movs	r2, #2
 8001514:	701a      	strb	r2, [r3, #0]
			}
		}
		linecode.IsUpdate=0;
 8001516:	4b05      	ldr	r3, [pc, #20]	; (800152c <loop_user_call+0x134>)
 8001518:	2200      	movs	r2, #0
 800151a:	721a      	strb	r2, [r3, #8]
	}

	if(WorkMode==Mode_SPI_CMD)
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <loop_user_call+0x13c>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d101      	bne.n	8001528 <loop_user_call+0x130>
			spi_cmd_process_call();//调用spi命令处理函数（不在中断中处理）
 8001524:	f000 f8c2 	bl	80016ac <spi_cmd_process_call>
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000000 	.word	0x20000000
 8001530:	0016e35f 	.word	0x0016e35f
 8001534:	200001b0 	.word	0x200001b0
 8001538:	20000d04 	.word	0x20000d04
 800153c:	40004400 	.word	0x40004400
 8001540:	001e847f 	.word	0x001e847f

08001544 <cdc_receive_call>:

void cdc_receive_call(uint8_t* Buf, uint32_t Len)//由USB CDC/ACM接收数据时调用
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
	switch(WorkMode)
 800154e:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <cdc_receive_call+0x6c>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d006      	beq.n	8001564 <cdc_receive_call+0x20>
 8001556:	2b02      	cmp	r3, #2
 8001558:	d010      	beq.n	800157c <cdc_receive_call+0x38>
	{
	default:
		uart_transmit(Buf,Len);
 800155a:	6839      	ldr	r1, [r7, #0]
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f000 f9e5 	bl	800192c <uart_transmit>
		break;
 8001562:	e021      	b.n	80015a8 <cdc_receive_call+0x64>
	case Mode_SPI_RAW:
		CDC_Transmit_FS(spi_transmitReceive(Buf,Len),Len);
 8001564:	6839      	ldr	r1, [r7, #0]
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 f868 	bl	800163c <spi_transmitReceive>
 800156c:	4602      	mov	r2, r0
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	b29b      	uxth	r3, r3
 8001572:	4619      	mov	r1, r3
 8001574:	4610      	mov	r0, r2
 8001576:	f007 fa11 	bl	800899c <CDC_Transmit_FS>
		break;
 800157a:	e015      	b.n	80015a8 <cdc_receive_call+0x64>
	case Mode_SPI_CMD:
		if(spi_cmd_data.IsUpdate!=0) break;//上条命令未处理，忽略下一条命令
 800157c:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <cdc_receive_call+0x70>)
 800157e:	791b      	ldrb	r3, [r3, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d110      	bne.n	80015a6 <cdc_receive_call+0x62>
		spi_cmd_data.length=Len;
 8001584:	4a0b      	ldr	r2, [pc, #44]	; (80015b4 <cdc_receive_call+0x70>)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	6013      	str	r3, [r2, #0]
		memcpy(spi_cmd_data.data,Buf,Len);
 800158a:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <cdc_receive_call+0x70>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	4618      	mov	r0, r3
 8001594:	f007 fdf8 	bl	8009188 <memcpy>
		spi_cmd_data.IsUpdate++;
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <cdc_receive_call+0x70>)
 800159a:	791b      	ldrb	r3, [r3, #4]
 800159c:	3301      	adds	r3, #1
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <cdc_receive_call+0x70>)
 80015a2:	711a      	strb	r2, [r3, #4]
		break;
 80015a4:	e000      	b.n	80015a8 <cdc_receive_call+0x64>
		if(spi_cmd_data.IsUpdate!=0) break;//上条命令未处理，忽略下一条命令
 80015a6:	bf00      	nop

	}
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	200001b0 	.word	0x200001b0
 80015b4:	2000000c 	.word	0x2000000c

080015b8 <uart_receive_call>:

void uart_receive_call(void * buf,size_t len)//接收数据完成后调用此函数
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
	if(WorkMode!=Mode_UART)
 80015c2:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <uart_receive_call+0x28>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d106      	bne.n	80015d8 <uart_receive_call+0x20>
		return;//检查模式
	CDC_Transmit_FS(buf,len);//发送给上位机
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	4619      	mov	r1, r3
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f007 f9e3 	bl	800899c <CDC_Transmit_FS>
 80015d6:	e000      	b.n	80015da <uart_receive_call+0x22>
		return;//检查模式
 80015d8:	bf00      	nop
}
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	200001b0 	.word	0x200001b0

080015e4 <U8A2U32>:
#include "w25qxx.h"
#include "userapp.h"

//uint8数组转uint32函数,小端模式
static uint32_t U8A2U32(void * p)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	uint8_t * data=(uint8_t *)p;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	60fb      	str	r3, [r7, #12]
	return (((uint32_t)data[3])<<24)+(((uint32_t)data[2])<<16)+(((uint32_t)data[1])<<8)+(((uint32_t)data[0])<<0);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	3303      	adds	r3, #3
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	061a      	lsls	r2, r3, #24
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	3302      	adds	r3, #2
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	041b      	lsls	r3, r3, #16
 8001600:	441a      	add	r2, r3
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	3301      	adds	r3, #1
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	021b      	lsls	r3, r3, #8
 800160a:	4413      	add	r3, r2
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	7812      	ldrb	r2, [r2, #0]
 8001610:	4413      	add	r3, r2
}
 8001612:	4618      	mov	r0, r3
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr

0800161c <delay>:
.data=spi_rx_buff,
.length=0
};

void delay(size_t delay)//中断中不能调用HAL_Delay时使用
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
while(delay--);
 8001624:	bf00      	nop
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	1e5a      	subs	r2, r3, #1
 800162a:	607a      	str	r2, [r7, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1fa      	bne.n	8001626 <delay+0xa>
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
	...

0800163c <spi_transmitReceive>:
void * spi_transmitReceive(void * txbuff,size_t len)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af02      	add	r7, sp, #8
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
	 SPI_CS_HIGH();
 8001646:	2201      	movs	r2, #1
 8001648:	2110      	movs	r1, #16
 800164a:	4815      	ldr	r0, [pc, #84]	; (80016a0 <spi_transmitReceive+0x64>)
 800164c:	f001 fb5a 	bl	8002d04 <HAL_GPIO_WritePin>
	 delay(48*5);//
 8001650:	20f0      	movs	r0, #240	; 0xf0
 8001652:	f7ff ffe3 	bl	800161c <delay>
	 SPI_CS_LOW();
 8001656:	2200      	movs	r2, #0
 8001658:	2110      	movs	r1, #16
 800165a:	4811      	ldr	r0, [pc, #68]	; (80016a0 <spi_transmitReceive+0x64>)
 800165c:	f001 fb52 	bl	8002d04 <HAL_GPIO_WritePin>
	 delay(48*5);
 8001660:	20f0      	movs	r0, #240	; 0xf0
 8001662:	f7ff ffdb 	bl	800161c <delay>
	 memset(spi_rx_buff,0,sizeof(spi_rx_buff));
 8001666:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800166a:	2100      	movs	r1, #0
 800166c:	480d      	ldr	r0, [pc, #52]	; (80016a4 <spi_transmitReceive+0x68>)
 800166e:	f007 fd96 	bl	800919e <memset>
	 HAL_SPI_TransmitReceive(&hspi1,txbuff,spi_rx_buff,len,1000+len);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	b29a      	uxth	r2, r3
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	4613      	mov	r3, r2
 8001680:	4a08      	ldr	r2, [pc, #32]	; (80016a4 <spi_transmitReceive+0x68>)
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	4808      	ldr	r0, [pc, #32]	; (80016a8 <spi_transmitReceive+0x6c>)
 8001686:	f003 f9cb 	bl	8004a20 <HAL_SPI_TransmitReceive>
	 SPI_CS_HIGH();
 800168a:	2201      	movs	r2, #1
 800168c:	2110      	movs	r1, #16
 800168e:	4804      	ldr	r0, [pc, #16]	; (80016a0 <spi_transmitReceive+0x64>)
 8001690:	f001 fb38 	bl	8002d04 <HAL_GPIO_WritePin>
	 return spi_rx_buff;
 8001694:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <spi_transmitReceive+0x68>)
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40010800 	.word	0x40010800
 80016a4:	200001b4 	.word	0x200001b4
 80016a8:	20000cac 	.word	0x20000cac

080016ac <spi_cmd_process_call>:

void spi_cmd_process_call()//spi命令模式处理函数
{
 80016ac:	b5b0      	push	{r4, r5, r7, lr}
 80016ae:	af00      	add	r7, sp, #0
	if(spi_cmd_data.IsUpdate)//有新的命令
 80016b0:	4b9b      	ldr	r3, [pc, #620]	; (8001920 <spi_cmd_process_call+0x274>)
 80016b2:	791b      	ldrb	r3, [r3, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 8131 	beq.w	800191c <spi_cmd_process_call+0x270>
	{

		switch(spi_cmd_data.data[0])//判断命令号
 80016ba:	4b99      	ldr	r3, [pc, #612]	; (8001920 <spi_cmd_process_call+0x274>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b07      	cmp	r3, #7
 80016c2:	d813      	bhi.n	80016ec <spi_cmd_process_call+0x40>
 80016c4:	a201      	add	r2, pc, #4	; (adr r2, 80016cc <spi_cmd_process_call+0x20>)
 80016c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ca:	bf00      	nop
 80016cc:	080016fd 	.word	0x080016fd
 80016d0:	0800175f 	.word	0x0800175f
 80016d4:	08001791 	.word	0x08001791
 80016d8:	08001797 	.word	0x08001797
 80016dc:	080017c5 	.word	0x080017c5
 80016e0:	080017f3 	.word	0x080017f3
 80016e4:	0800184b 	.word	0x0800184b
 80016e8:	080018a3 	.word	0x080018a3
		{
		default:
			spi_cmd_data.data[0]=0xff;//无效命令的返回
 80016ec:	4b8c      	ldr	r3, [pc, #560]	; (8001920 <spi_cmd_process_call+0x274>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	22ff      	movs	r2, #255	; 0xff
 80016f2:	701a      	strb	r2, [r3, #0]
			spi_cmd_data.length=0x01;
 80016f4:	4b8a      	ldr	r3, [pc, #552]	; (8001920 <spi_cmd_process_call+0x274>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	601a      	str	r2, [r3, #0]
			break;
 80016fa:	e103      	b.n	8001904 <spi_cmd_process_call+0x258>
		case 0://0号命令，设置spi通信参数，字节1为CPOL,字节2为CPHA,字节3字节序(MSB/LSB))
			if(spi_cmd_data.length>=2)
 80016fc:	4b88      	ldr	r3, [pc, #544]	; (8001920 <spi_cmd_process_call+0x274>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d90a      	bls.n	800171a <spi_cmd_process_call+0x6e>
				hspi1.Init.CLKPolarity=spi_cmd_data.data[1]?SPI_POLARITY_HIGH:SPI_POLARITY_LOW;
 8001704:	4b86      	ldr	r3, [pc, #536]	; (8001920 <spi_cmd_process_call+0x274>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	3301      	adds	r3, #1
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <spi_cmd_process_call+0x68>
 8001710:	2302      	movs	r3, #2
 8001712:	e000      	b.n	8001716 <spi_cmd_process_call+0x6a>
 8001714:	2300      	movs	r3, #0
 8001716:	4a83      	ldr	r2, [pc, #524]	; (8001924 <spi_cmd_process_call+0x278>)
 8001718:	6113      	str	r3, [r2, #16]
			if(spi_cmd_data.length>=3)
 800171a:	4b81      	ldr	r3, [pc, #516]	; (8001920 <spi_cmd_process_call+0x274>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b02      	cmp	r3, #2
 8001720:	d90a      	bls.n	8001738 <spi_cmd_process_call+0x8c>
				hspi1.Init.CLKPhase=spi_cmd_data.data[2]?SPI_PHASE_2EDGE:SPI_PHASE_1EDGE;
 8001722:	4b7f      	ldr	r3, [pc, #508]	; (8001920 <spi_cmd_process_call+0x274>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	3302      	adds	r3, #2
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <spi_cmd_process_call+0x86>
 800172e:	2301      	movs	r3, #1
 8001730:	e000      	b.n	8001734 <spi_cmd_process_call+0x88>
 8001732:	2300      	movs	r3, #0
 8001734:	4a7b      	ldr	r2, [pc, #492]	; (8001924 <spi_cmd_process_call+0x278>)
 8001736:	6153      	str	r3, [r2, #20]
			if(spi_cmd_data.length>=4)
 8001738:	4b79      	ldr	r3, [pc, #484]	; (8001920 <spi_cmd_process_call+0x274>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b03      	cmp	r3, #3
 800173e:	d90a      	bls.n	8001756 <spi_cmd_process_call+0xaa>
				hspi1.Init.FirstBit=spi_cmd_data.data[3]?SPI_FIRSTBIT_LSB:SPI_FIRSTBIT_MSB;
 8001740:	4b77      	ldr	r3, [pc, #476]	; (8001920 <spi_cmd_process_call+0x274>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	3303      	adds	r3, #3
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <spi_cmd_process_call+0xa4>
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	e000      	b.n	8001752 <spi_cmd_process_call+0xa6>
 8001750:	2300      	movs	r3, #0
 8001752:	4a74      	ldr	r2, [pc, #464]	; (8001924 <spi_cmd_process_call+0x278>)
 8001754:	6213      	str	r3, [r2, #32]
			HAL_SPI_Init(&hspi1);
 8001756:	4873      	ldr	r0, [pc, #460]	; (8001924 <spi_cmd_process_call+0x278>)
 8001758:	f002 fff8 	bl	800474c <HAL_SPI_Init>

			break;
 800175c:	e0d2      	b.n	8001904 <spi_cmd_process_call+0x258>
		case 1://1号命令，重新初始化spi flash通信
			if(W25qxx_Init())
 800175e:	f7ff f9eb 	bl	8000b38 <W25qxx_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d00b      	beq.n	8001780 <spi_cmd_process_call+0xd4>
			{
				memcpy(&(spi_cmd_data.data[1]),&w25qxx,sizeof(w25qxx));
 8001768:	4b6d      	ldr	r3, [pc, #436]	; (8001920 <spi_cmd_process_call+0x274>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	3301      	adds	r3, #1
 800176e:	2228      	movs	r2, #40	; 0x28
 8001770:	496d      	ldr	r1, [pc, #436]	; (8001928 <spi_cmd_process_call+0x27c>)
 8001772:	4618      	mov	r0, r3
 8001774:	f007 fd08 	bl	8009188 <memcpy>
				spi_cmd_data.length=sizeof(w25qxx)+1;
 8001778:	4b69      	ldr	r3, [pc, #420]	; (8001920 <spi_cmd_process_call+0x274>)
 800177a:	2229      	movs	r2, #41	; 0x29
 800177c:	601a      	str	r2, [r3, #0]
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
				spi_cmd_data.length=0x01;
			}

			break;
 800177e:	e0c1      	b.n	8001904 <spi_cmd_process_call+0x258>
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 8001780:	4b67      	ldr	r3, [pc, #412]	; (8001920 <spi_cmd_process_call+0x274>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	22ff      	movs	r2, #255	; 0xff
 8001786:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 8001788:	4b65      	ldr	r3, [pc, #404]	; (8001920 <spi_cmd_process_call+0x274>)
 800178a:	2201      	movs	r2, #1
 800178c:	601a      	str	r2, [r3, #0]
			break;
 800178e:	e0b9      	b.n	8001904 <spi_cmd_process_call+0x258>

		case 2://2号命令，W25qxx_EraseChip,芯片擦除
			W25qxx_EraseChip();
 8001790:	f7ff fa9a 	bl	8000cc8 <W25qxx_EraseChip>

			break;
 8001794:	e0b6      	b.n	8001904 <spi_cmd_process_call+0x258>
		case 3://3号命令,W25qxx_EraseSector,擦除扇区，前四字节为扇区地址（小端模式）
			if(spi_cmd_data.length>=5)
 8001796:	4b62      	ldr	r3, [pc, #392]	; (8001920 <spi_cmd_process_call+0x274>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2b04      	cmp	r3, #4
 800179c:	d90a      	bls.n	80017b4 <spi_cmd_process_call+0x108>
				W25qxx_EraseSector(U8A2U32(&(spi_cmd_data.data[1])));
 800179e:	4b60      	ldr	r3, [pc, #384]	; (8001920 <spi_cmd_process_call+0x274>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	3301      	adds	r3, #1
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff1d 	bl	80015e4 <U8A2U32>
 80017aa:	4603      	mov	r3, r0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fab9 	bl	8000d24 <W25qxx_EraseSector>
						spi_cmd_data.data[0]=0xff;//失败命令的返回
						spi_cmd_data.length=0x01;

				}

			break;
 80017b2:	e0a7      	b.n	8001904 <spi_cmd_process_call+0x258>
						spi_cmd_data.data[0]=0xff;//失败命令的返回
 80017b4:	4b5a      	ldr	r3, [pc, #360]	; (8001920 <spi_cmd_process_call+0x274>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	22ff      	movs	r2, #255	; 0xff
 80017ba:	701a      	strb	r2, [r3, #0]
						spi_cmd_data.length=0x01;
 80017bc:	4b58      	ldr	r3, [pc, #352]	; (8001920 <spi_cmd_process_call+0x274>)
 80017be:	2201      	movs	r2, #1
 80017c0:	601a      	str	r2, [r3, #0]
			break;
 80017c2:	e09f      	b.n	8001904 <spi_cmd_process_call+0x258>
		case 4://4号命令，W25qxx_EraseBlock，擦除块，，前四字节为块地址（小端模式）
			if(spi_cmd_data.length>=5)
 80017c4:	4b56      	ldr	r3, [pc, #344]	; (8001920 <spi_cmd_process_call+0x274>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d90a      	bls.n	80017e2 <spi_cmd_process_call+0x136>
				W25qxx_EraseBlock(U8A2U32(&(spi_cmd_data.data[1])));
 80017cc:	4b54      	ldr	r3, [pc, #336]	; (8001920 <spi_cmd_process_call+0x274>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	3301      	adds	r3, #1
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff ff06 	bl	80015e4 <U8A2U32>
 80017d8:	4603      	mov	r3, r0
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff faf6 	bl	8000dcc <W25qxx_EraseBlock>
					spi_cmd_data.data[0]=0xff;//失败命令的返回
					spi_cmd_data.length=0x01;

				}

			break;
 80017e0:	e090      	b.n	8001904 <spi_cmd_process_call+0x258>
					spi_cmd_data.data[0]=0xff;//失败命令的返回
 80017e2:	4b4f      	ldr	r3, [pc, #316]	; (8001920 <spi_cmd_process_call+0x274>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	22ff      	movs	r2, #255	; 0xff
 80017e8:	701a      	strb	r2, [r3, #0]
					spi_cmd_data.length=0x01;
 80017ea:	4b4d      	ldr	r3, [pc, #308]	; (8001920 <spi_cmd_process_call+0x274>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	601a      	str	r2, [r3, #0]
			break;
 80017f0:	e088      	b.n	8001904 <spi_cmd_process_call+0x258>
		case 5://5号命令，W25qxx_IsEmptyPage，检查页是否为空,地址(4字节)+偏移(4字节)+数量(4字节)，均为小端模式
			if(!(spi_cmd_data.length>=13 && W25qxx_IsEmptyPage(U8A2U32(&(spi_cmd_data.data[1])),U8A2U32(&(spi_cmd_data.data[5])),U8A2U32(&(spi_cmd_data.data[9])))))
 80017f2:	4b4b      	ldr	r3, [pc, #300]	; (8001920 <spi_cmd_process_call+0x274>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2b0c      	cmp	r3, #12
 80017f8:	d91f      	bls.n	800183a <spi_cmd_process_call+0x18e>
 80017fa:	4b49      	ldr	r3, [pc, #292]	; (8001920 <spi_cmd_process_call+0x274>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	3301      	adds	r3, #1
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff feef 	bl	80015e4 <U8A2U32>
 8001806:	4604      	mov	r4, r0
 8001808:	4b45      	ldr	r3, [pc, #276]	; (8001920 <spi_cmd_process_call+0x274>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	3305      	adds	r3, #5
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fee8 	bl	80015e4 <U8A2U32>
 8001814:	4605      	mov	r5, r0
 8001816:	4b42      	ldr	r3, [pc, #264]	; (8001920 <spi_cmd_process_call+0x274>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	3309      	adds	r3, #9
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fee1 	bl	80015e4 <U8A2U32>
 8001822:	4603      	mov	r3, r0
 8001824:	461a      	mov	r2, r3
 8001826:	4629      	mov	r1, r5
 8001828:	4620      	mov	r0, r4
 800182a:	f7ff fb25 	bl	8000e78 <W25qxx_IsEmptyPage>
 800182e:	4603      	mov	r3, r0
 8001830:	f083 0301 	eor.w	r3, r3, #1
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d05f      	beq.n	80018fa <spi_cmd_process_call+0x24e>
			{
					spi_cmd_data.data[0]=0xff;//失败命令的返回
 800183a:	4b39      	ldr	r3, [pc, #228]	; (8001920 <spi_cmd_process_call+0x274>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	22ff      	movs	r2, #255	; 0xff
 8001840:	701a      	strb	r2, [r3, #0]
					spi_cmd_data.length=0x01;
 8001842:	4b37      	ldr	r3, [pc, #220]	; (8001920 <spi_cmd_process_call+0x274>)
 8001844:	2201      	movs	r2, #1
 8001846:	601a      	str	r2, [r3, #0]
			}

			break;
 8001848:	e057      	b.n	80018fa <spi_cmd_process_call+0x24e>
		case 6://6号命令，W25qxx_IsEmptySector,检查扇区是否为空,地址(4字节)+偏移(4字节)+数量(4字节)，均为小端模式
			if(!(spi_cmd_data.length>=13 && W25qxx_IsEmptySector(U8A2U32(&(spi_cmd_data.data[1])),U8A2U32(&(spi_cmd_data.data[5])),U8A2U32(&(spi_cmd_data.data[9])))))
 800184a:	4b35      	ldr	r3, [pc, #212]	; (8001920 <spi_cmd_process_call+0x274>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b0c      	cmp	r3, #12
 8001850:	d91f      	bls.n	8001892 <spi_cmd_process_call+0x1e6>
 8001852:	4b33      	ldr	r3, [pc, #204]	; (8001920 <spi_cmd_process_call+0x274>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	3301      	adds	r3, #1
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff fec3 	bl	80015e4 <U8A2U32>
 800185e:	4604      	mov	r4, r0
 8001860:	4b2f      	ldr	r3, [pc, #188]	; (8001920 <spi_cmd_process_call+0x274>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	3305      	adds	r3, #5
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff febc 	bl	80015e4 <U8A2U32>
 800186c:	4605      	mov	r5, r0
 800186e:	4b2c      	ldr	r3, [pc, #176]	; (8001920 <spi_cmd_process_call+0x274>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	3309      	adds	r3, #9
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff feb5 	bl	80015e4 <U8A2U32>
 800187a:	4603      	mov	r3, r0
 800187c:	461a      	mov	r2, r3
 800187e:	4629      	mov	r1, r5
 8001880:	4620      	mov	r0, r4
 8001882:	f7ff fbe5 	bl	8001050 <W25qxx_IsEmptySector>
 8001886:	4603      	mov	r3, r0
 8001888:	f083 0301 	eor.w	r3, r3, #1
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d035      	beq.n	80018fe <spi_cmd_process_call+0x252>
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 8001892:	4b23      	ldr	r3, [pc, #140]	; (8001920 <spi_cmd_process_call+0x274>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	22ff      	movs	r2, #255	; 0xff
 8001898:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 800189a:	4b21      	ldr	r3, [pc, #132]	; (8001920 <spi_cmd_process_call+0x274>)
 800189c:	2201      	movs	r2, #1
 800189e:	601a      	str	r2, [r3, #0]
			}

			break;
 80018a0:	e02d      	b.n	80018fe <spi_cmd_process_call+0x252>
		case 7://7号命令，W25qxx_IsEmptyBlock，检查块是否为空,地址(4字节)+偏移(4字节)+数量(4字节)，均为小端模式
			if(!(spi_cmd_data.length>=13 && W25qxx_IsEmptyBlock(U8A2U32(&(spi_cmd_data.data[1])),U8A2U32(&(spi_cmd_data.data[5])),U8A2U32(&(spi_cmd_data.data[9])))))
 80018a2:	4b1f      	ldr	r3, [pc, #124]	; (8001920 <spi_cmd_process_call+0x274>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2b0c      	cmp	r3, #12
 80018a8:	d91f      	bls.n	80018ea <spi_cmd_process_call+0x23e>
 80018aa:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <spi_cmd_process_call+0x274>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	3301      	adds	r3, #1
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fe97 	bl	80015e4 <U8A2U32>
 80018b6:	4604      	mov	r4, r0
 80018b8:	4b19      	ldr	r3, [pc, #100]	; (8001920 <spi_cmd_process_call+0x274>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	3305      	adds	r3, #5
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fe90 	bl	80015e4 <U8A2U32>
 80018c4:	4605      	mov	r5, r0
 80018c6:	4b16      	ldr	r3, [pc, #88]	; (8001920 <spi_cmd_process_call+0x274>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	3309      	adds	r3, #9
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fe89 	bl	80015e4 <U8A2U32>
 80018d2:	4603      	mov	r3, r0
 80018d4:	461a      	mov	r2, r3
 80018d6:	4629      	mov	r1, r5
 80018d8:	4620      	mov	r0, r4
 80018da:	f7ff fc9b 	bl	8001214 <W25qxx_IsEmptyBlock>
 80018de:	4603      	mov	r3, r0
 80018e0:	f083 0301 	eor.w	r3, r3, #1
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00b      	beq.n	8001902 <spi_cmd_process_call+0x256>
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 80018ea:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <spi_cmd_process_call+0x274>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	22ff      	movs	r2, #255	; 0xff
 80018f0:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <spi_cmd_process_call+0x274>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	601a      	str	r2, [r3, #0]
			}

			break;
 80018f8:	e003      	b.n	8001902 <spi_cmd_process_call+0x256>
			break;
 80018fa:	bf00      	nop
 80018fc:	e002      	b.n	8001904 <spi_cmd_process_call+0x258>
			break;
 80018fe:	bf00      	nop
 8001900:	e000      	b.n	8001904 <spi_cmd_process_call+0x258>
			break;
 8001902:	bf00      	nop
		}

		CDC_Transmit_FS(spi_cmd_data.data,spi_cmd_data.length);
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <spi_cmd_process_call+0x274>)
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <spi_cmd_process_call+0x274>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	b29b      	uxth	r3, r3
 800190e:	4619      	mov	r1, r3
 8001910:	4610      	mov	r0, r2
 8001912:	f007 f843 	bl	800899c <CDC_Transmit_FS>
		spi_cmd_data.IsUpdate=0;
 8001916:	4b02      	ldr	r3, [pc, #8]	; (8001920 <spi_cmd_process_call+0x274>)
 8001918:	2200      	movs	r2, #0
 800191a:	711a      	strb	r2, [r3, #4]
	}
}
 800191c:	bf00      	nop
 800191e:	bdb0      	pop	{r4, r5, r7, pc}
 8001920:	2000000c 	.word	0x2000000c
 8001924:	20000cac 	.word	0x20000cac
 8001928:	200007c0 	.word	0x200007c0

0800192c <uart_transmit>:

#include "userapp.h"
uint8_t uart_rx_buff[1000];//接收缓冲
//uint8_t uart_tx_buff[1000];//发送缓冲
uint8_t uart_transmit(void * buf,size_t len)//发送数据到串口
{
 800192c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2,buf,len,(uint32_t)(len*(1000.0/linecode.Rate))+1000);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	b29c      	uxth	r4, r3
 800193a:	6838      	ldr	r0, [r7, #0]
 800193c:	f7fe fd48 	bl	80003d0 <__aeabi_ui2d>
 8001940:	4605      	mov	r5, r0
 8001942:	460e      	mov	r6, r1
 8001944:	4b12      	ldr	r3, [pc, #72]	; (8001990 <uart_transmit+0x64>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fd41 	bl	80003d0 <__aeabi_ui2d>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	f04f 0000 	mov.w	r0, #0
 8001956:	490f      	ldr	r1, [pc, #60]	; (8001994 <uart_transmit+0x68>)
 8001958:	f7fe fede 	bl	8000718 <__aeabi_ddiv>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4628      	mov	r0, r5
 8001962:	4631      	mov	r1, r6
 8001964:	f7fe fdae 	bl	80004c4 <__aeabi_dmul>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	f7fe ffba 	bl	80008e8 <__aeabi_d2uiz>
 8001974:	4603      	mov	r3, r0
 8001976:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800197a:	4622      	mov	r2, r4
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	4806      	ldr	r0, [pc, #24]	; (8001998 <uart_transmit+0x6c>)
 8001980:	f003 fd0f 	bl	80053a2 <HAL_UART_Transmit>
	return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800198e:	bf00      	nop
 8001990:	20000000 	.word	0x20000000
 8001994:	408f4000 	.word	0x408f4000
 8001998:	20000d04 	.word	0x20000d04

0800199c <uart_start_receive>:

void uart_start_receive()
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
	if(huart2.gState !=HAL_UART_STATE_READY && huart2.gState != HAL_UART_STATE_BUSY_TX)
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <uart_start_receive+0x4c>)
 80019a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b20      	cmp	r3, #32
 80019aa:	d008      	beq.n	80019be <uart_start_receive+0x22>
 80019ac:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <uart_start_receive+0x4c>)
 80019ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b21      	cmp	r3, #33	; 0x21
 80019b6:	d002      	beq.n	80019be <uart_start_receive+0x22>
			HAL_UART_DMAStop(&huart2);
 80019b8:	480b      	ldr	r0, [pc, #44]	; (80019e8 <uart_start_receive+0x4c>)
 80019ba:	f003 fe0b 	bl	80055d4 <HAL_UART_DMAStop>
	if(huart2.gState == HAL_UART_STATE_BUSY_TX)
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <uart_start_receive+0x4c>)
 80019c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b21      	cmp	r3, #33	; 0x21
 80019c8:	d106      	bne.n	80019d8 <uart_start_receive+0x3c>
			while(huart2.gState!=HAL_UART_STATE_READY);//等待发送完成
 80019ca:	bf00      	nop
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <uart_start_receive+0x4c>)
 80019ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b20      	cmp	r3, #32
 80019d6:	d1f9      	bne.n	80019cc <uart_start_receive+0x30>
	HAL_UART_Receive_DMA(&huart2,uart_rx_buff,sizeof(uart_rx_buff));
 80019d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019dc:	4903      	ldr	r1, [pc, #12]	; (80019ec <uart_start_receive+0x50>)
 80019de:	4802      	ldr	r0, [pc, #8]	; (80019e8 <uart_start_receive+0x4c>)
 80019e0:	f003 fd78 	bl	80054d4 <HAL_UART_Receive_DMA>
}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000d04 	.word	0x20000d04
 80019ec:	200007e8 	.word	0x200007e8

080019f0 <uart_finish_receive>:

void uart_finish_receive()
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
	if(huart2.gState !=HAL_UART_STATE_READY && huart2.gState != HAL_UART_STATE_BUSY_TX)
 80019f6:	4b1a      	ldr	r3, [pc, #104]	; (8001a60 <uart_finish_receive+0x70>)
 80019f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b20      	cmp	r3, #32
 8001a00:	d008      	beq.n	8001a14 <uart_finish_receive+0x24>
 8001a02:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <uart_finish_receive+0x70>)
 8001a04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b21      	cmp	r3, #33	; 0x21
 8001a0c:	d002      	beq.n	8001a14 <uart_finish_receive+0x24>
		HAL_UART_DMAStop(&huart2);
 8001a0e:	4814      	ldr	r0, [pc, #80]	; (8001a60 <uart_finish_receive+0x70>)
 8001a10:	f003 fde0 	bl	80055d4 <HAL_UART_DMAStop>
	if(huart2.gState == HAL_UART_STATE_BUSY_TX)
 8001a14:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <uart_finish_receive+0x70>)
 8001a16:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b21      	cmp	r3, #33	; 0x21
 8001a1e:	d106      	bne.n	8001a2e <uart_finish_receive+0x3e>
		while(huart2.gState!=HAL_UART_STATE_READY);//等待发送完成
 8001a20:	bf00      	nop
 8001a22:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <uart_finish_receive+0x70>)
 8001a24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b20      	cmp	r3, #32
 8001a2c:	d1f9      	bne.n	8001a22 <uart_finish_receive+0x32>
	size_t count=sizeof(uart_rx_buff)-huart2.hdmarx->Instance->CNDTR;
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <uart_finish_receive+0x70>)
 8001a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8001a3a:	607b      	str	r3, [r7, #4]
	 uart_receive_call(uart_rx_buff,count);
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	4809      	ldr	r0, [pc, #36]	; (8001a64 <uart_finish_receive+0x74>)
 8001a40:	f7ff fdba 	bl	80015b8 <uart_receive_call>
	HAL_UART_DMAStop(&huart2);
 8001a44:	4806      	ldr	r0, [pc, #24]	; (8001a60 <uart_finish_receive+0x70>)
 8001a46:	f003 fdc5 	bl	80055d4 <HAL_UART_DMAStop>
	HAL_UART_Receive_DMA(&huart2,uart_rx_buff,sizeof(uart_rx_buff));
 8001a4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a4e:	4905      	ldr	r1, [pc, #20]	; (8001a64 <uart_finish_receive+0x74>)
 8001a50:	4803      	ldr	r0, [pc, #12]	; (8001a60 <uart_finish_receive+0x70>)
 8001a52:	f003 fd3f 	bl	80054d4 <HAL_UART_Receive_DMA>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000d04 	.word	0x20000d04
 8001a64:	200007e8 	.word	0x200007e8

08001a68 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//DMA接收全满
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	 UNUSED(huart);
	 uart_finish_receive();
 8001a70:	f7ff ffbe 	bl	80019f0 <uart_finish_receive>
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_UART_RxHalfCpltCallback>:
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)//DMA接收半满
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
	 UNUSED(huart);
	 uart_finish_receive();
 8001a84:	f7ff ffb4 	bl	80019f0 <uart_finish_receive>
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a94:	f000 fc0a 	bl	80022ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a98:	f000 f811 	bl	8001abe <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a9c:	f000 f92c 	bl	8001cf8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001aa0:	f000 f904 	bl	8001cac <MX_DMA_Init>
  MX_I2C1_Init();
 8001aa4:	f000 f862 	bl	8001b6c <MX_I2C1_Init>
  MX_SPI1_Init();
 8001aa8:	f000 f8a0 	bl	8001bec <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001aac:	f000 f8d4 	bl	8001c58 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8001ab0:	f006 fe94 	bl	80087dc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  init_user_call();
 8001ab4:	f7ff fc90 	bl	80013d8 <init_user_call>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_user_call();
 8001ab8:	f7ff fc9e 	bl	80013f8 <loop_user_call>
 8001abc:	e7fc      	b.n	8001ab8 <main+0x28>

08001abe <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b094      	sub	sp, #80	; 0x50
 8001ac2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ac4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ac8:	2228      	movs	r2, #40	; 0x28
 8001aca:	2100      	movs	r1, #0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f007 fb66 	bl	800919e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
 8001ae0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001aee:	2302      	movs	r3, #2
 8001af0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001af2:	2301      	movs	r3, #1
 8001af4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001af6:	2310      	movs	r3, #16
 8001af8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001afa:	2302      	movs	r3, #2
 8001afc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001afe:	2300      	movs	r3, #0
 8001b00:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001b02:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8001b06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f002 f91b 	bl	8003d48 <HAL_RCC_OscConfig>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001b18:	f000 f93e 	bl	8001d98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b1c:	230f      	movs	r3, #15
 8001b1e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b20:	2302      	movs	r3, #2
 8001b22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b24:	2300      	movs	r3, #0
 8001b26:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b2c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	2101      	movs	r1, #1
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f002 fb85 	bl	8004248 <HAL_RCC_ClockConfig>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001b44:	f000 f928 	bl	8001d98 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001b48:	2310      	movs	r3, #16
 8001b4a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001b4c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b50:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	4618      	mov	r0, r3
 8001b56:	f002 fd43 	bl	80045e0 <HAL_RCCEx_PeriphCLKConfig>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001b60:	f000 f91a 	bl	8001d98 <Error_Handler>
  }
}
 8001b64:	bf00      	nop
 8001b66:	3750      	adds	r7, #80	; 0x50
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  __HAL_RCC_I2C1_CLK_ENABLE();
 8001b72:	4b1a      	ldr	r3, [pc, #104]	; (8001bdc <MX_I2C1_Init+0x70>)
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	4a19      	ldr	r2, [pc, #100]	; (8001bdc <MX_I2C1_Init+0x70>)
 8001b78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b7c:	61d3      	str	r3, [r2, #28]
 8001b7e:	4b17      	ldr	r3, [pc, #92]	; (8001bdc <MX_I2C1_Init+0x70>)
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b8a:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <MX_I2C1_Init+0x74>)
 8001b8c:	4a15      	ldr	r2, [pc, #84]	; (8001be4 <MX_I2C1_Init+0x78>)
 8001b8e:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b90:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <MX_I2C1_Init+0x74>)
 8001b92:	4a15      	ldr	r2, [pc, #84]	; (8001be8 <MX_I2C1_Init+0x7c>)
 8001b94:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b96:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <MX_I2C1_Init+0x74>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b9c:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <MX_I2C1_Init+0x74>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <MX_I2C1_Init+0x74>)
 8001ba4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ba8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001baa:	4b0d      	ldr	r3, [pc, #52]	; (8001be0 <MX_I2C1_Init+0x74>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <MX_I2C1_Init+0x74>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <MX_I2C1_Init+0x74>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <MX_I2C1_Init+0x74>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bc2:	4807      	ldr	r0, [pc, #28]	; (8001be0 <MX_I2C1_Init+0x74>)
 8001bc4:	f001 f8b6 	bl	8002d34 <HAL_I2C_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_I2C1_Init+0x66>
  {
    Error_Handler();
 8001bce:	f000 f8e3 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	20000c14 	.word	0x20000c14
 8001be4:	40005400 	.word	0x40005400
 8001be8:	000186a0 	.word	0x000186a0

08001bec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001bf0:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <MX_SPI1_Init+0x64>)
 8001bf2:	4a18      	ldr	r2, [pc, #96]	; (8001c54 <MX_SPI1_Init+0x68>)
 8001bf4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bf6:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <MX_SPI1_Init+0x64>)
 8001bf8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bfc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bfe:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <MX_SPI1_Init+0x64>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c04:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <MX_SPI1_Init+0x64>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c0a:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <MX_SPI1_Init+0x64>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c10:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <MX_SPI1_Init+0x64>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c16:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <MX_SPI1_Init+0x64>)
 8001c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <MX_SPI1_Init+0x64>)
 8001c20:	2220      	movs	r2, #32
 8001c22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c24:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <MX_SPI1_Init+0x64>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c2a:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <MX_SPI1_Init+0x64>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c30:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <MX_SPI1_Init+0x64>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <MX_SPI1_Init+0x64>)
 8001c38:	220a      	movs	r2, #10
 8001c3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c3c:	4804      	ldr	r0, [pc, #16]	; (8001c50 <MX_SPI1_Init+0x64>)
 8001c3e:	f002 fd85 	bl	800474c <HAL_SPI_Init>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c48:	f000 f8a6 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000cac 	.word	0x20000cac
 8001c54:	40013000 	.word	0x40013000

08001c58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c5c:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c5e:	4a12      	ldr	r2, [pc, #72]	; (8001ca8 <MX_USART2_UART_Init+0x50>)
 8001c60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c62:	4b10      	ldr	r3, [pc, #64]	; (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c76:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c7c:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c7e:	220c      	movs	r2, #12
 8001c80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001c82:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c84:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001c88:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c8a:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c90:	4804      	ldr	r0, [pc, #16]	; (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c92:	f003 fb39 	bl	8005308 <HAL_UART_Init>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8001c9c:	f000 f87c 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000d04 	.word	0x20000d04
 8001ca8:	40004400 	.word	0x40004400

08001cac <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cb2:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <MX_DMA_Init+0x48>)
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	4a0f      	ldr	r2, [pc, #60]	; (8001cf4 <MX_DMA_Init+0x48>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	6153      	str	r3, [r2, #20]
 8001cbe:	4b0d      	ldr	r3, [pc, #52]	; (8001cf4 <MX_DMA_Init+0x48>)
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	607b      	str	r3, [r7, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2100      	movs	r1, #0
 8001cce:	2010      	movs	r0, #16
 8001cd0:	f000 fbf5 	bl	80024be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001cd4:	2010      	movs	r0, #16
 8001cd6:	f000 fc0e 	bl	80024f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2100      	movs	r1, #0
 8001cde:	2011      	movs	r0, #17
 8001ce0:	f000 fbed 	bl	80024be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001ce4:	2011      	movs	r0, #17
 8001ce6:	f000 fc06 	bl	80024f6 <HAL_NVIC_EnableIRQ>

}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40021000 	.word	0x40021000

08001cf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfe:	f107 0308 	add.w	r3, r7, #8
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	605a      	str	r2, [r3, #4]
 8001d08:	609a      	str	r2, [r3, #8]
 8001d0a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0c:	4b17      	ldr	r3, [pc, #92]	; (8001d6c <MX_GPIO_Init+0x74>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	4a16      	ldr	r2, [pc, #88]	; (8001d6c <MX_GPIO_Init+0x74>)
 8001d12:	f043 0304 	orr.w	r3, r3, #4
 8001d16:	6193      	str	r3, [r2, #24]
 8001d18:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <MX_GPIO_Init+0x74>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	607b      	str	r3, [r7, #4]
 8001d22:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <MX_GPIO_Init+0x74>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	4a10      	ldr	r2, [pc, #64]	; (8001d6c <MX_GPIO_Init+0x74>)
 8001d2a:	f043 0308 	orr.w	r3, r3, #8
 8001d2e:	6193      	str	r3, [r2, #24]
 8001d30:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <MX_GPIO_Init+0x74>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	603b      	str	r3, [r7, #0]
 8001d3a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	2110      	movs	r1, #16
 8001d40:	480b      	ldr	r0, [pc, #44]	; (8001d70 <MX_GPIO_Init+0x78>)
 8001d42:	f000 ffdf 	bl	8002d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d46:	2310      	movs	r3, #16
 8001d48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d52:	2303      	movs	r3, #3
 8001d54:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d56:	f107 0308 	add.w	r3, r7, #8
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4804      	ldr	r0, [pc, #16]	; (8001d70 <MX_GPIO_Init+0x78>)
 8001d5e:	f000 fe77 	bl	8002a50 <HAL_GPIO_Init>

}
 8001d62:	bf00      	nop
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40010800 	.word	0x40010800

08001d74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a04      	ldr	r2, [pc, #16]	; (8001d94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d101      	bne.n	8001d8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d86:	f000 faa7 	bl	80022d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40000800 	.word	0x40000800

08001d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001daa:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <HAL_MspInit+0x5c>)
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	4a14      	ldr	r2, [pc, #80]	; (8001e00 <HAL_MspInit+0x5c>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6193      	str	r3, [r2, #24]
 8001db6:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <HAL_MspInit+0x5c>)
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <HAL_MspInit+0x5c>)
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	4a0e      	ldr	r2, [pc, #56]	; (8001e00 <HAL_MspInit+0x5c>)
 8001dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	61d3      	str	r3, [r2, #28]
 8001dce:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <HAL_MspInit+0x5c>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	607b      	str	r3, [r7, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001dda:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <HAL_MspInit+0x60>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	4a04      	ldr	r2, [pc, #16]	; (8001e04 <HAL_MspInit+0x60>)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df6:	bf00      	nop
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr
 8001e00:	40021000 	.word	0x40021000
 8001e04:	40010000 	.word	0x40010000

08001e08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b088      	sub	sp, #32
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e10:	f107 0310 	add.w	r3, r7, #16
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a15      	ldr	r2, [pc, #84]	; (8001e78 <HAL_I2C_MspInit+0x70>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d123      	bne.n	8001e70 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e28:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <HAL_I2C_MspInit+0x74>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	4a13      	ldr	r2, [pc, #76]	; (8001e7c <HAL_I2C_MspInit+0x74>)
 8001e2e:	f043 0308 	orr.w	r3, r3, #8
 8001e32:	6193      	str	r3, [r2, #24]
 8001e34:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <HAL_I2C_MspInit+0x74>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	f003 0308 	and.w	r3, r3, #8
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e40:	23c0      	movs	r3, #192	; 0xc0
 8001e42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e44:	2312      	movs	r3, #18
 8001e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4c:	f107 0310 	add.w	r3, r7, #16
 8001e50:	4619      	mov	r1, r3
 8001e52:	480b      	ldr	r0, [pc, #44]	; (8001e80 <HAL_I2C_MspInit+0x78>)
 8001e54:	f000 fdfc 	bl	8002a50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e58:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <HAL_I2C_MspInit+0x74>)
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	4a07      	ldr	r2, [pc, #28]	; (8001e7c <HAL_I2C_MspInit+0x74>)
 8001e5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e62:	61d3      	str	r3, [r2, #28]
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <HAL_I2C_MspInit+0x74>)
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e70:	bf00      	nop
 8001e72:	3720      	adds	r7, #32
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40005400 	.word	0x40005400
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40010c00 	.word	0x40010c00

08001e84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b088      	sub	sp, #32
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 0310 	add.w	r3, r7, #16
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a1b      	ldr	r2, [pc, #108]	; (8001f0c <HAL_SPI_MspInit+0x88>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d12f      	bne.n	8001f04 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ea4:	4b1a      	ldr	r3, [pc, #104]	; (8001f10 <HAL_SPI_MspInit+0x8c>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	4a19      	ldr	r2, [pc, #100]	; (8001f10 <HAL_SPI_MspInit+0x8c>)
 8001eaa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001eae:	6193      	str	r3, [r2, #24]
 8001eb0:	4b17      	ldr	r3, [pc, #92]	; (8001f10 <HAL_SPI_MspInit+0x8c>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ebc:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <HAL_SPI_MspInit+0x8c>)
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	4a13      	ldr	r2, [pc, #76]	; (8001f10 <HAL_SPI_MspInit+0x8c>)
 8001ec2:	f043 0304 	orr.w	r3, r3, #4
 8001ec6:	6193      	str	r3, [r2, #24]
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <HAL_SPI_MspInit+0x8c>)
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	60bb      	str	r3, [r7, #8]
 8001ed2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001ed4:	23a0      	movs	r3, #160	; 0xa0
 8001ed6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001edc:	2303      	movs	r3, #3
 8001ede:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee0:	f107 0310 	add.w	r3, r7, #16
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	480b      	ldr	r0, [pc, #44]	; (8001f14 <HAL_SPI_MspInit+0x90>)
 8001ee8:	f000 fdb2 	bl	8002a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001eec:	2340      	movs	r3, #64	; 0x40
 8001eee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef8:	f107 0310 	add.w	r3, r7, #16
 8001efc:	4619      	mov	r1, r3
 8001efe:	4805      	ldr	r0, [pc, #20]	; (8001f14 <HAL_SPI_MspInit+0x90>)
 8001f00:	f000 fda6 	bl	8002a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f04:	bf00      	nop
 8001f06:	3720      	adds	r7, #32
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40013000 	.word	0x40013000
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40010800 	.word	0x40010800

08001f18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f20:	f107 0310 	add.w	r3, r7, #16
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a4c      	ldr	r2, [pc, #304]	; (8002064 <HAL_UART_MspInit+0x14c>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	f040 8091 	bne.w	800205c <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f3a:	4b4b      	ldr	r3, [pc, #300]	; (8002068 <HAL_UART_MspInit+0x150>)
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	4a4a      	ldr	r2, [pc, #296]	; (8002068 <HAL_UART_MspInit+0x150>)
 8001f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f44:	61d3      	str	r3, [r2, #28]
 8001f46:	4b48      	ldr	r3, [pc, #288]	; (8002068 <HAL_UART_MspInit+0x150>)
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	4b45      	ldr	r3, [pc, #276]	; (8002068 <HAL_UART_MspInit+0x150>)
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	4a44      	ldr	r2, [pc, #272]	; (8002068 <HAL_UART_MspInit+0x150>)
 8001f58:	f043 0304 	orr.w	r3, r3, #4
 8001f5c:	6193      	str	r3, [r2, #24]
 8001f5e:	4b42      	ldr	r3, [pc, #264]	; (8002068 <HAL_UART_MspInit+0x150>)
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f003 0304 	and.w	r3, r3, #4
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> USART2_CTS
    PA1     ------> USART2_RTS
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f76:	f107 0310 	add.w	r3, r7, #16
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	483b      	ldr	r0, [pc, #236]	; (800206c <HAL_UART_MspInit+0x154>)
 8001f7e:	f000 fd67 	bl	8002a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001f82:	2306      	movs	r3, #6
 8001f84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f86:	2302      	movs	r3, #2
 8001f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8e:	f107 0310 	add.w	r3, r7, #16
 8001f92:	4619      	mov	r1, r3
 8001f94:	4835      	ldr	r0, [pc, #212]	; (800206c <HAL_UART_MspInit+0x154>)
 8001f96:	f000 fd5b 	bl	8002a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f9a:	2308      	movs	r3, #8
 8001f9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa6:	f107 0310 	add.w	r3, r7, #16
 8001faa:	4619      	mov	r1, r3
 8001fac:	482f      	ldr	r0, [pc, #188]	; (800206c <HAL_UART_MspInit+0x154>)
 8001fae:	f000 fd4f 	bl	8002a50 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001fb2:	4b2f      	ldr	r3, [pc, #188]	; (8002070 <HAL_UART_MspInit+0x158>)
 8001fb4:	4a2f      	ldr	r2, [pc, #188]	; (8002074 <HAL_UART_MspInit+0x15c>)
 8001fb6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fb8:	4b2d      	ldr	r3, [pc, #180]	; (8002070 <HAL_UART_MspInit+0x158>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fbe:	4b2c      	ldr	r3, [pc, #176]	; (8002070 <HAL_UART_MspInit+0x158>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fc4:	4b2a      	ldr	r3, [pc, #168]	; (8002070 <HAL_UART_MspInit+0x158>)
 8001fc6:	2280      	movs	r2, #128	; 0x80
 8001fc8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fca:	4b29      	ldr	r3, [pc, #164]	; (8002070 <HAL_UART_MspInit+0x158>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fd0:	4b27      	ldr	r3, [pc, #156]	; (8002070 <HAL_UART_MspInit+0x158>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001fd6:	4b26      	ldr	r3, [pc, #152]	; (8002070 <HAL_UART_MspInit+0x158>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001fdc:	4b24      	ldr	r3, [pc, #144]	; (8002070 <HAL_UART_MspInit+0x158>)
 8001fde:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001fe2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001fe4:	4822      	ldr	r0, [pc, #136]	; (8002070 <HAL_UART_MspInit+0x158>)
 8001fe6:	f000 fa95 	bl	8002514 <HAL_DMA_Init>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <HAL_UART_MspInit+0xdc>
    {
      Error_Handler();
 8001ff0:	f7ff fed2 	bl	8001d98 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a1e      	ldr	r2, [pc, #120]	; (8002070 <HAL_UART_MspInit+0x158>)
 8001ff8:	635a      	str	r2, [r3, #52]	; 0x34
 8001ffa:	4a1d      	ldr	r2, [pc, #116]	; (8002070 <HAL_UART_MspInit+0x158>)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002000:	4b1d      	ldr	r3, [pc, #116]	; (8002078 <HAL_UART_MspInit+0x160>)
 8002002:	4a1e      	ldr	r2, [pc, #120]	; (800207c <HAL_UART_MspInit+0x164>)
 8002004:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002006:	4b1c      	ldr	r3, [pc, #112]	; (8002078 <HAL_UART_MspInit+0x160>)
 8002008:	2210      	movs	r2, #16
 800200a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800200c:	4b1a      	ldr	r3, [pc, #104]	; (8002078 <HAL_UART_MspInit+0x160>)
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002012:	4b19      	ldr	r3, [pc, #100]	; (8002078 <HAL_UART_MspInit+0x160>)
 8002014:	2280      	movs	r2, #128	; 0x80
 8002016:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002018:	4b17      	ldr	r3, [pc, #92]	; (8002078 <HAL_UART_MspInit+0x160>)
 800201a:	2200      	movs	r2, #0
 800201c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800201e:	4b16      	ldr	r3, [pc, #88]	; (8002078 <HAL_UART_MspInit+0x160>)
 8002020:	2200      	movs	r2, #0
 8002022:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002024:	4b14      	ldr	r3, [pc, #80]	; (8002078 <HAL_UART_MspInit+0x160>)
 8002026:	2200      	movs	r2, #0
 8002028:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800202a:	4b13      	ldr	r3, [pc, #76]	; (8002078 <HAL_UART_MspInit+0x160>)
 800202c:	2200      	movs	r2, #0
 800202e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002030:	4811      	ldr	r0, [pc, #68]	; (8002078 <HAL_UART_MspInit+0x160>)
 8002032:	f000 fa6f 	bl	8002514 <HAL_DMA_Init>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 800203c:	f7ff feac 	bl	8001d98 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a0d      	ldr	r2, [pc, #52]	; (8002078 <HAL_UART_MspInit+0x160>)
 8002044:	631a      	str	r2, [r3, #48]	; 0x30
 8002046:	4a0c      	ldr	r2, [pc, #48]	; (8002078 <HAL_UART_MspInit+0x160>)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800204c:	2200      	movs	r2, #0
 800204e:	2100      	movs	r1, #0
 8002050:	2026      	movs	r0, #38	; 0x26
 8002052:	f000 fa34 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002056:	2026      	movs	r0, #38	; 0x26
 8002058:	f000 fa4d 	bl	80024f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800205c:	bf00      	nop
 800205e:	3720      	adds	r7, #32
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40004400 	.word	0x40004400
 8002068:	40021000 	.word	0x40021000
 800206c:	40010800 	.word	0x40010800
 8002070:	20000bd0 	.word	0x20000bd0
 8002074:	4002006c 	.word	0x4002006c
 8002078:	20000c68 	.word	0x20000c68
 800207c:	40020080 	.word	0x40020080

08002080 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08c      	sub	sp, #48	; 0x30
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8002090:	2200      	movs	r2, #0
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	201e      	movs	r0, #30
 8002096:	f000 fa12 	bl	80024be <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 800209a:	201e      	movs	r0, #30
 800209c:	f000 fa2b 	bl	80024f6 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80020a0:	4b1f      	ldr	r3, [pc, #124]	; (8002120 <HAL_InitTick+0xa0>)
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	4a1e      	ldr	r2, [pc, #120]	; (8002120 <HAL_InitTick+0xa0>)
 80020a6:	f043 0304 	orr.w	r3, r3, #4
 80020aa:	61d3      	str	r3, [r2, #28]
 80020ac:	4b1c      	ldr	r3, [pc, #112]	; (8002120 <HAL_InitTick+0xa0>)
 80020ae:	69db      	ldr	r3, [r3, #28]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020b8:	f107 0210 	add.w	r2, r7, #16
 80020bc:	f107 0314 	add.w	r3, r7, #20
 80020c0:	4611      	mov	r1, r2
 80020c2:	4618      	mov	r0, r3
 80020c4:	f002 fa3e 	bl	8004544 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80020c8:	f002 fa14 	bl	80044f4 <HAL_RCC_GetPCLK1Freq>
 80020cc:	4603      	mov	r3, r0
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80020d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d4:	4a13      	ldr	r2, [pc, #76]	; (8002124 <HAL_InitTick+0xa4>)
 80020d6:	fba2 2303 	umull	r2, r3, r2, r3
 80020da:	0c9b      	lsrs	r3, r3, #18
 80020dc:	3b01      	subs	r3, #1
 80020de:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80020e0:	4b11      	ldr	r3, [pc, #68]	; (8002128 <HAL_InitTick+0xa8>)
 80020e2:	4a12      	ldr	r2, [pc, #72]	; (800212c <HAL_InitTick+0xac>)
 80020e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 80020e6:	4b10      	ldr	r3, [pc, #64]	; (8002128 <HAL_InitTick+0xa8>)
 80020e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020ec:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80020ee:	4a0e      	ldr	r2, [pc, #56]	; (8002128 <HAL_InitTick+0xa8>)
 80020f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80020f4:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <HAL_InitTick+0xa8>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020fa:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <HAL_InitTick+0xa8>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8002100:	4809      	ldr	r0, [pc, #36]	; (8002128 <HAL_InitTick+0xa8>)
 8002102:	f002 ff09 	bl	8004f18 <HAL_TIM_Base_Init>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d104      	bne.n	8002116 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800210c:	4806      	ldr	r0, [pc, #24]	; (8002128 <HAL_InitTick+0xa8>)
 800210e:	f002 ff37 	bl	8004f80 <HAL_TIM_Base_Start_IT>
 8002112:	4603      	mov	r3, r0
 8002114:	e000      	b.n	8002118 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
}
 8002118:	4618      	mov	r0, r3
 800211a:	3730      	adds	r7, #48	; 0x30
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40021000 	.word	0x40021000
 8002124:	431bde83 	.word	0x431bde83
 8002128:	20000d44 	.word	0x20000d44
 800212c:	40000800 	.word	0x40000800

08002130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr

0800213c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002140:	e7fe      	b.n	8002140 <HardFault_Handler+0x4>

08002142 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002146:	e7fe      	b.n	8002146 <MemManage_Handler+0x4>

08002148 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800214c:	e7fe      	b.n	800214c <BusFault_Handler+0x4>

0800214e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002152:	e7fe      	b.n	8002152 <UsageFault_Handler+0x4>

08002154 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr

08002160 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr

0800216c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr

08002178 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr

08002184 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002188:	4802      	ldr	r0, [pc, #8]	; (8002194 <DMA1_Channel6_IRQHandler+0x10>)
 800218a:	f000 fb2d 	bl	80027e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20000bd0 	.word	0x20000bd0

08002198 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800219c:	4802      	ldr	r0, [pc, #8]	; (80021a8 <DMA1_Channel7_IRQHandler+0x10>)
 800219e:	f000 fb23 	bl	80027e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20000c68 	.word	0x20000c68

080021ac <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80021b0:	4802      	ldr	r0, [pc, #8]	; (80021bc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80021b2:	f000 ffee 	bl	8003192 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20001a1c 	.word	0x20001a1c

080021c0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80021c4:	4802      	ldr	r0, [pc, #8]	; (80021d0 <TIM4_IRQHandler+0x10>)
 80021c6:	f002 fefe 	bl	8004fc6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20000d44 	.word	0x20000d44

080021d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  if(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_IDLE))
 80021d8:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <USART2_IRQHandler+0x20>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0310 	and.w	r3, r3, #16
 80021e2:	2b10      	cmp	r3, #16
 80021e4:	d101      	bne.n	80021ea <USART2_IRQHandler+0x16>
	  uart_finish_receive();//空闲中断
 80021e6:	f7ff fc03 	bl	80019f0 <uart_finish_receive>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021ea:	4802      	ldr	r0, [pc, #8]	; (80021f4 <USART2_IRQHandler+0x20>)
 80021ec:	f003 fa4e 	bl	800568c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80021f0:	bf00      	nop
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20000d04 	.word	0x20000d04

080021f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80021fc:	4b15      	ldr	r3, [pc, #84]	; (8002254 <SystemInit+0x5c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a14      	ldr	r2, [pc, #80]	; (8002254 <SystemInit+0x5c>)
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002208:	4b12      	ldr	r3, [pc, #72]	; (8002254 <SystemInit+0x5c>)
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	4911      	ldr	r1, [pc, #68]	; (8002254 <SystemInit+0x5c>)
 800220e:	4b12      	ldr	r3, [pc, #72]	; (8002258 <SystemInit+0x60>)
 8002210:	4013      	ands	r3, r2
 8002212:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002214:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <SystemInit+0x5c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a0e      	ldr	r2, [pc, #56]	; (8002254 <SystemInit+0x5c>)
 800221a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800221e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002222:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002224:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <SystemInit+0x5c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <SystemInit+0x5c>)
 800222a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800222e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002230:	4b08      	ldr	r3, [pc, #32]	; (8002254 <SystemInit+0x5c>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	4a07      	ldr	r2, [pc, #28]	; (8002254 <SystemInit+0x5c>)
 8002236:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800223a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800223c:	4b05      	ldr	r3, [pc, #20]	; (8002254 <SystemInit+0x5c>)
 800223e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002242:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002244:	4b05      	ldr	r3, [pc, #20]	; (800225c <SystemInit+0x64>)
 8002246:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800224a:	609a      	str	r2, [r3, #8]
#endif 
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr
 8002254:	40021000 	.word	0x40021000
 8002258:	f8ff0000 	.word	0xf8ff0000
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002260:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002262:	e003      	b.n	800226c <LoopCopyDataInit>

08002264 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002266:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002268:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800226a:	3104      	adds	r1, #4

0800226c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800226c:	480a      	ldr	r0, [pc, #40]	; (8002298 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800226e:	4b0b      	ldr	r3, [pc, #44]	; (800229c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002270:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002272:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002274:	d3f6      	bcc.n	8002264 <CopyDataInit>
  ldr r2, =_sbss
 8002276:	4a0a      	ldr	r2, [pc, #40]	; (80022a0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002278:	e002      	b.n	8002280 <LoopFillZerobss>

0800227a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800227a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800227c:	f842 3b04 	str.w	r3, [r2], #4

08002280 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002280:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002282:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002284:	d3f9      	bcc.n	800227a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002286:	f7ff ffb7 	bl	80021f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800228a:	f006 ff59 	bl	8009140 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800228e:	f7ff fbff 	bl	8001a90 <main>
  bx lr
 8002292:	4770      	bx	lr
  ldr r3, =_sidata
 8002294:	0800921c 	.word	0x0800921c
  ldr r0, =_sdata
 8002298:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800229c:	20000194 	.word	0x20000194
  ldr r2, =_sbss
 80022a0:	20000194 	.word	0x20000194
  ldr r3, = _ebss
 80022a4:	20001c88 	.word	0x20001c88

080022a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022a8:	e7fe      	b.n	80022a8 <ADC1_2_IRQHandler>
	...

080022ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022b0:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <HAL_Init+0x28>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a07      	ldr	r2, [pc, #28]	; (80022d4 <HAL_Init+0x28>)
 80022b6:	f043 0310 	orr.w	r3, r3, #16
 80022ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022bc:	2003      	movs	r0, #3
 80022be:	f000 f8f3 	bl	80024a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022c2:	2000      	movs	r0, #0
 80022c4:	f7ff fedc 	bl	8002080 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022c8:	f7ff fd6c 	bl	8001da4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40022000 	.word	0x40022000

080022d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <HAL_IncTick+0x1c>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	461a      	mov	r2, r3
 80022e2:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <HAL_IncTick+0x20>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4413      	add	r3, r2
 80022e8:	4a03      	ldr	r2, [pc, #12]	; (80022f8 <HAL_IncTick+0x20>)
 80022ea:	6013      	str	r3, [r2, #0]
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	20000020 	.word	0x20000020
 80022f8:	20000d84 	.word	0x20000d84

080022fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002300:	4b02      	ldr	r3, [pc, #8]	; (800230c <HAL_GetTick+0x10>)
 8002302:	681b      	ldr	r3, [r3, #0]
}
 8002304:	4618      	mov	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr
 800230c:	20000d84 	.word	0x20000d84

08002310 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002318:	f7ff fff0 	bl	80022fc <HAL_GetTick>
 800231c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002328:	d005      	beq.n	8002336 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800232a:	4b09      	ldr	r3, [pc, #36]	; (8002350 <HAL_Delay+0x40>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4413      	add	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002336:	bf00      	nop
 8002338:	f7ff ffe0 	bl	80022fc <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	429a      	cmp	r2, r3
 8002346:	d8f7      	bhi.n	8002338 <HAL_Delay+0x28>
  {
  }
}
 8002348:	bf00      	nop
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	20000020 	.word	0x20000020

08002354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002364:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <__NVIC_SetPriorityGrouping+0x44>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002370:	4013      	ands	r3, r2
 8002372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800237c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002386:	4a04      	ldr	r2, [pc, #16]	; (8002398 <__NVIC_SetPriorityGrouping+0x44>)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	60d3      	str	r3, [r2, #12]
}
 800238c:	bf00      	nop
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023a0:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <__NVIC_GetPriorityGrouping+0x18>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	0a1b      	lsrs	r3, r3, #8
 80023a6:	f003 0307 	and.w	r3, r3, #7
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	db0b      	blt.n	80023e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	f003 021f 	and.w	r2, r3, #31
 80023d0:	4906      	ldr	r1, [pc, #24]	; (80023ec <__NVIC_EnableIRQ+0x34>)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	095b      	lsrs	r3, r3, #5
 80023d8:	2001      	movs	r0, #1
 80023da:	fa00 f202 	lsl.w	r2, r0, r2
 80023de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr
 80023ec:	e000e100 	.word	0xe000e100

080023f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	6039      	str	r1, [r7, #0]
 80023fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002400:	2b00      	cmp	r3, #0
 8002402:	db0a      	blt.n	800241a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	b2da      	uxtb	r2, r3
 8002408:	490c      	ldr	r1, [pc, #48]	; (800243c <__NVIC_SetPriority+0x4c>)
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	0112      	lsls	r2, r2, #4
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	440b      	add	r3, r1
 8002414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002418:	e00a      	b.n	8002430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	b2da      	uxtb	r2, r3
 800241e:	4908      	ldr	r1, [pc, #32]	; (8002440 <__NVIC_SetPriority+0x50>)
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	3b04      	subs	r3, #4
 8002428:	0112      	lsls	r2, r2, #4
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	440b      	add	r3, r1
 800242e:	761a      	strb	r2, [r3, #24]
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	e000e100 	.word	0xe000e100
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002444:	b480      	push	{r7}
 8002446:	b089      	sub	sp, #36	; 0x24
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f1c3 0307 	rsb	r3, r3, #7
 800245e:	2b04      	cmp	r3, #4
 8002460:	bf28      	it	cs
 8002462:	2304      	movcs	r3, #4
 8002464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3304      	adds	r3, #4
 800246a:	2b06      	cmp	r3, #6
 800246c:	d902      	bls.n	8002474 <NVIC_EncodePriority+0x30>
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3b03      	subs	r3, #3
 8002472:	e000      	b.n	8002476 <NVIC_EncodePriority+0x32>
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002478:	f04f 32ff 	mov.w	r2, #4294967295
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43da      	mvns	r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	401a      	ands	r2, r3
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800248c:	f04f 31ff 	mov.w	r1, #4294967295
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	fa01 f303 	lsl.w	r3, r1, r3
 8002496:	43d9      	mvns	r1, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800249c:	4313      	orrs	r3, r2
         );
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3724      	adds	r7, #36	; 0x24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr

080024a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff ff4f 	bl	8002354 <__NVIC_SetPriorityGrouping>
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024be:	b580      	push	{r7, lr}
 80024c0:	b086      	sub	sp, #24
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	4603      	mov	r3, r0
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
 80024ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024d0:	f7ff ff64 	bl	800239c <__NVIC_GetPriorityGrouping>
 80024d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68b9      	ldr	r1, [r7, #8]
 80024da:	6978      	ldr	r0, [r7, #20]
 80024dc:	f7ff ffb2 	bl	8002444 <NVIC_EncodePriority>
 80024e0:	4602      	mov	r2, r0
 80024e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024e6:	4611      	mov	r1, r2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff ff81 	bl	80023f0 <__NVIC_SetPriority>
}
 80024ee:	bf00      	nop
 80024f0:	3718      	adds	r7, #24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b082      	sub	sp, #8
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	4603      	mov	r3, r0
 80024fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff ff57 	bl	80023b8 <__NVIC_EnableIRQ>
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
	...

08002514 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e043      	b.n	80025b2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	461a      	mov	r2, r3
 8002530:	4b22      	ldr	r3, [pc, #136]	; (80025bc <HAL_DMA_Init+0xa8>)
 8002532:	4413      	add	r3, r2
 8002534:	4a22      	ldr	r2, [pc, #136]	; (80025c0 <HAL_DMA_Init+0xac>)
 8002536:	fba2 2303 	umull	r2, r3, r2, r3
 800253a:	091b      	lsrs	r3, r3, #4
 800253c:	009a      	lsls	r2, r3, #2
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a1f      	ldr	r2, [pc, #124]	; (80025c4 <HAL_DMA_Init+0xb0>)
 8002546:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2202      	movs	r2, #2
 800254c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800255e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002562:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800256c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002578:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002584:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	4313      	orrs	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr
 80025bc:	bffdfff8 	.word	0xbffdfff8
 80025c0:	cccccccd 	.word	0xcccccccd
 80025c4:	40020000 	.word	0x40020000

080025c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
 80025d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <HAL_DMA_Start_IT+0x20>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e04a      	b.n	800267e <HAL_DMA_Start_IT+0xb6>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d13a      	bne.n	8002670 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2202      	movs	r2, #2
 80025fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0201 	bic.w	r2, r2, #1
 8002616:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 f9e8 	bl	80029f4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002628:	2b00      	cmp	r3, #0
 800262a:	d008      	beq.n	800263e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 020e 	orr.w	r2, r2, #14
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	e00f      	b.n	800265e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0204 	bic.w	r2, r2, #4
 800264c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f042 020a 	orr.w	r2, r2, #10
 800265c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f042 0201 	orr.w	r2, r2, #1
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	e005      	b.n	800267c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002678:	2302      	movs	r3, #2
 800267a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800267c:	7dfb      	ldrb	r3, [r7, #23]
}
 800267e:	4618      	mov	r0, r3
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002686:	b480      	push	{r7}
 8002688:	b085      	sub	sp, #20
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002698:	2b02      	cmp	r3, #2
 800269a:	d008      	beq.n	80026ae <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2204      	movs	r2, #4
 80026a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e020      	b.n	80026f0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 020e 	bic.w	r2, r2, #14
 80026bc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0201 	bic.w	r2, r2, #1
 80026cc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d6:	2101      	movs	r1, #1
 80026d8:	fa01 f202 	lsl.w	r2, r1, r2
 80026dc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr
	...

080026fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002704:	2300      	movs	r3, #0
 8002706:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800270e:	2b02      	cmp	r3, #2
 8002710:	d005      	beq.n	800271e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2204      	movs	r2, #4
 8002716:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
 800271c:	e051      	b.n	80027c2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 020e 	bic.w	r2, r2, #14
 800272c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0201 	bic.w	r2, r2, #1
 800273c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a22      	ldr	r2, [pc, #136]	; (80027cc <HAL_DMA_Abort_IT+0xd0>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d029      	beq.n	800279c <HAL_DMA_Abort_IT+0xa0>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a20      	ldr	r2, [pc, #128]	; (80027d0 <HAL_DMA_Abort_IT+0xd4>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d022      	beq.n	8002798 <HAL_DMA_Abort_IT+0x9c>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a1f      	ldr	r2, [pc, #124]	; (80027d4 <HAL_DMA_Abort_IT+0xd8>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d01a      	beq.n	8002792 <HAL_DMA_Abort_IT+0x96>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a1d      	ldr	r2, [pc, #116]	; (80027d8 <HAL_DMA_Abort_IT+0xdc>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d012      	beq.n	800278c <HAL_DMA_Abort_IT+0x90>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a1c      	ldr	r2, [pc, #112]	; (80027dc <HAL_DMA_Abort_IT+0xe0>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d00a      	beq.n	8002786 <HAL_DMA_Abort_IT+0x8a>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a1a      	ldr	r2, [pc, #104]	; (80027e0 <HAL_DMA_Abort_IT+0xe4>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d102      	bne.n	8002780 <HAL_DMA_Abort_IT+0x84>
 800277a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800277e:	e00e      	b.n	800279e <HAL_DMA_Abort_IT+0xa2>
 8002780:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002784:	e00b      	b.n	800279e <HAL_DMA_Abort_IT+0xa2>
 8002786:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800278a:	e008      	b.n	800279e <HAL_DMA_Abort_IT+0xa2>
 800278c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002790:	e005      	b.n	800279e <HAL_DMA_Abort_IT+0xa2>
 8002792:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002796:	e002      	b.n	800279e <HAL_DMA_Abort_IT+0xa2>
 8002798:	2310      	movs	r3, #16
 800279a:	e000      	b.n	800279e <HAL_DMA_Abort_IT+0xa2>
 800279c:	2301      	movs	r3, #1
 800279e:	4a11      	ldr	r2, [pc, #68]	; (80027e4 <HAL_DMA_Abort_IT+0xe8>)
 80027a0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	4798      	blx	r3
    } 
  }
  return status;
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40020008 	.word	0x40020008
 80027d0:	4002001c 	.word	0x4002001c
 80027d4:	40020030 	.word	0x40020030
 80027d8:	40020044 	.word	0x40020044
 80027dc:	40020058 	.word	0x40020058
 80027e0:	4002006c 	.word	0x4002006c
 80027e4:	40020000 	.word	0x40020000

080027e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	2204      	movs	r2, #4
 8002806:	409a      	lsls	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4013      	ands	r3, r2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d04f      	beq.n	80028b0 <HAL_DMA_IRQHandler+0xc8>
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	f003 0304 	and.w	r3, r3, #4
 8002816:	2b00      	cmp	r3, #0
 8002818:	d04a      	beq.n	80028b0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0320 	and.w	r3, r3, #32
 8002824:	2b00      	cmp	r3, #0
 8002826:	d107      	bne.n	8002838 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0204 	bic.w	r2, r2, #4
 8002836:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a66      	ldr	r2, [pc, #408]	; (80029d8 <HAL_DMA_IRQHandler+0x1f0>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d029      	beq.n	8002896 <HAL_DMA_IRQHandler+0xae>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a65      	ldr	r2, [pc, #404]	; (80029dc <HAL_DMA_IRQHandler+0x1f4>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d022      	beq.n	8002892 <HAL_DMA_IRQHandler+0xaa>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a63      	ldr	r2, [pc, #396]	; (80029e0 <HAL_DMA_IRQHandler+0x1f8>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d01a      	beq.n	800288c <HAL_DMA_IRQHandler+0xa4>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a62      	ldr	r2, [pc, #392]	; (80029e4 <HAL_DMA_IRQHandler+0x1fc>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d012      	beq.n	8002886 <HAL_DMA_IRQHandler+0x9e>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a60      	ldr	r2, [pc, #384]	; (80029e8 <HAL_DMA_IRQHandler+0x200>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d00a      	beq.n	8002880 <HAL_DMA_IRQHandler+0x98>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a5f      	ldr	r2, [pc, #380]	; (80029ec <HAL_DMA_IRQHandler+0x204>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d102      	bne.n	800287a <HAL_DMA_IRQHandler+0x92>
 8002874:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002878:	e00e      	b.n	8002898 <HAL_DMA_IRQHandler+0xb0>
 800287a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800287e:	e00b      	b.n	8002898 <HAL_DMA_IRQHandler+0xb0>
 8002880:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002884:	e008      	b.n	8002898 <HAL_DMA_IRQHandler+0xb0>
 8002886:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800288a:	e005      	b.n	8002898 <HAL_DMA_IRQHandler+0xb0>
 800288c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002890:	e002      	b.n	8002898 <HAL_DMA_IRQHandler+0xb0>
 8002892:	2340      	movs	r3, #64	; 0x40
 8002894:	e000      	b.n	8002898 <HAL_DMA_IRQHandler+0xb0>
 8002896:	2304      	movs	r3, #4
 8002898:	4a55      	ldr	r2, [pc, #340]	; (80029f0 <HAL_DMA_IRQHandler+0x208>)
 800289a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 8094 	beq.w	80029ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80028ae:	e08e      	b.n	80029ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b4:	2202      	movs	r2, #2
 80028b6:	409a      	lsls	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4013      	ands	r3, r2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d056      	beq.n	800296e <HAL_DMA_IRQHandler+0x186>
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d051      	beq.n	800296e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0320 	and.w	r3, r3, #32
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10b      	bne.n	80028f0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 020a 	bic.w	r2, r2, #10
 80028e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a38      	ldr	r2, [pc, #224]	; (80029d8 <HAL_DMA_IRQHandler+0x1f0>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d029      	beq.n	800294e <HAL_DMA_IRQHandler+0x166>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a37      	ldr	r2, [pc, #220]	; (80029dc <HAL_DMA_IRQHandler+0x1f4>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d022      	beq.n	800294a <HAL_DMA_IRQHandler+0x162>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a35      	ldr	r2, [pc, #212]	; (80029e0 <HAL_DMA_IRQHandler+0x1f8>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d01a      	beq.n	8002944 <HAL_DMA_IRQHandler+0x15c>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a34      	ldr	r2, [pc, #208]	; (80029e4 <HAL_DMA_IRQHandler+0x1fc>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d012      	beq.n	800293e <HAL_DMA_IRQHandler+0x156>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a32      	ldr	r2, [pc, #200]	; (80029e8 <HAL_DMA_IRQHandler+0x200>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d00a      	beq.n	8002938 <HAL_DMA_IRQHandler+0x150>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a31      	ldr	r2, [pc, #196]	; (80029ec <HAL_DMA_IRQHandler+0x204>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d102      	bne.n	8002932 <HAL_DMA_IRQHandler+0x14a>
 800292c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002930:	e00e      	b.n	8002950 <HAL_DMA_IRQHandler+0x168>
 8002932:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002936:	e00b      	b.n	8002950 <HAL_DMA_IRQHandler+0x168>
 8002938:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800293c:	e008      	b.n	8002950 <HAL_DMA_IRQHandler+0x168>
 800293e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002942:	e005      	b.n	8002950 <HAL_DMA_IRQHandler+0x168>
 8002944:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002948:	e002      	b.n	8002950 <HAL_DMA_IRQHandler+0x168>
 800294a:	2320      	movs	r3, #32
 800294c:	e000      	b.n	8002950 <HAL_DMA_IRQHandler+0x168>
 800294e:	2302      	movs	r3, #2
 8002950:	4a27      	ldr	r2, [pc, #156]	; (80029f0 <HAL_DMA_IRQHandler+0x208>)
 8002952:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002960:	2b00      	cmp	r3, #0
 8002962:	d034      	beq.n	80029ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800296c:	e02f      	b.n	80029ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	2208      	movs	r2, #8
 8002974:	409a      	lsls	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	4013      	ands	r3, r2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d028      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x1e8>
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b00      	cmp	r3, #0
 8002986:	d023      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 020e 	bic.w	r2, r2, #14
 8002996:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a0:	2101      	movs	r1, #1
 80029a2:	fa01 f202 	lsl.w	r2, r1, r2
 80029a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d004      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	4798      	blx	r3
    }
  }
  return;
 80029ce:	bf00      	nop
 80029d0:	bf00      	nop
}
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40020008 	.word	0x40020008
 80029dc:	4002001c 	.word	0x4002001c
 80029e0:	40020030 	.word	0x40020030
 80029e4:	40020044 	.word	0x40020044
 80029e8:	40020058 	.word	0x40020058
 80029ec:	4002006c 	.word	0x4002006c
 80029f0:	40020000 	.word	0x40020000

080029f4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
 8002a00:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a10:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b10      	cmp	r3, #16
 8002a20:	d108      	bne.n	8002a34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68ba      	ldr	r2, [r7, #8]
 8002a30:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a32:	e007      	b.n	8002a44 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68ba      	ldr	r2, [r7, #8]
 8002a3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	60da      	str	r2, [r3, #12]
}
 8002a44:	bf00      	nop
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr
	...

08002a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b08b      	sub	sp, #44	; 0x2c
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a62:	e127      	b.n	8002cb4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a64:	2201      	movs	r2, #1
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	69fa      	ldr	r2, [r7, #28]
 8002a74:	4013      	ands	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	f040 8116 	bne.w	8002cae <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b12      	cmp	r3, #18
 8002a88:	d034      	beq.n	8002af4 <HAL_GPIO_Init+0xa4>
 8002a8a:	2b12      	cmp	r3, #18
 8002a8c:	d80d      	bhi.n	8002aaa <HAL_GPIO_Init+0x5a>
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d02b      	beq.n	8002aea <HAL_GPIO_Init+0x9a>
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d804      	bhi.n	8002aa0 <HAL_GPIO_Init+0x50>
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d031      	beq.n	8002afe <HAL_GPIO_Init+0xae>
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d01c      	beq.n	8002ad8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a9e:	e048      	b.n	8002b32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	d043      	beq.n	8002b2c <HAL_GPIO_Init+0xdc>
 8002aa4:	2b11      	cmp	r3, #17
 8002aa6:	d01b      	beq.n	8002ae0 <HAL_GPIO_Init+0x90>
          break;
 8002aa8:	e043      	b.n	8002b32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002aaa:	4a89      	ldr	r2, [pc, #548]	; (8002cd0 <HAL_GPIO_Init+0x280>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d026      	beq.n	8002afe <HAL_GPIO_Init+0xae>
 8002ab0:	4a87      	ldr	r2, [pc, #540]	; (8002cd0 <HAL_GPIO_Init+0x280>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d806      	bhi.n	8002ac4 <HAL_GPIO_Init+0x74>
 8002ab6:	4a87      	ldr	r2, [pc, #540]	; (8002cd4 <HAL_GPIO_Init+0x284>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d020      	beq.n	8002afe <HAL_GPIO_Init+0xae>
 8002abc:	4a86      	ldr	r2, [pc, #536]	; (8002cd8 <HAL_GPIO_Init+0x288>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d01d      	beq.n	8002afe <HAL_GPIO_Init+0xae>
          break;
 8002ac2:	e036      	b.n	8002b32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002ac4:	4a85      	ldr	r2, [pc, #532]	; (8002cdc <HAL_GPIO_Init+0x28c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d019      	beq.n	8002afe <HAL_GPIO_Init+0xae>
 8002aca:	4a85      	ldr	r2, [pc, #532]	; (8002ce0 <HAL_GPIO_Init+0x290>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d016      	beq.n	8002afe <HAL_GPIO_Init+0xae>
 8002ad0:	4a84      	ldr	r2, [pc, #528]	; (8002ce4 <HAL_GPIO_Init+0x294>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d013      	beq.n	8002afe <HAL_GPIO_Init+0xae>
          break;
 8002ad6:	e02c      	b.n	8002b32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	623b      	str	r3, [r7, #32]
          break;
 8002ade:	e028      	b.n	8002b32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	3304      	adds	r3, #4
 8002ae6:	623b      	str	r3, [r7, #32]
          break;
 8002ae8:	e023      	b.n	8002b32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	3308      	adds	r3, #8
 8002af0:	623b      	str	r3, [r7, #32]
          break;
 8002af2:	e01e      	b.n	8002b32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	330c      	adds	r3, #12
 8002afa:	623b      	str	r3, [r7, #32]
          break;
 8002afc:	e019      	b.n	8002b32 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d102      	bne.n	8002b0c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b06:	2304      	movs	r3, #4
 8002b08:	623b      	str	r3, [r7, #32]
          break;
 8002b0a:	e012      	b.n	8002b32 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d105      	bne.n	8002b20 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b14:	2308      	movs	r3, #8
 8002b16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	69fa      	ldr	r2, [r7, #28]
 8002b1c:	611a      	str	r2, [r3, #16]
          break;
 8002b1e:	e008      	b.n	8002b32 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b20:	2308      	movs	r3, #8
 8002b22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	69fa      	ldr	r2, [r7, #28]
 8002b28:	615a      	str	r2, [r3, #20]
          break;
 8002b2a:	e002      	b.n	8002b32 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	623b      	str	r3, [r7, #32]
          break;
 8002b30:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	2bff      	cmp	r3, #255	; 0xff
 8002b36:	d801      	bhi.n	8002b3c <HAL_GPIO_Init+0xec>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	e001      	b.n	8002b40 <HAL_GPIO_Init+0xf0>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3304      	adds	r3, #4
 8002b40:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	2bff      	cmp	r3, #255	; 0xff
 8002b46:	d802      	bhi.n	8002b4e <HAL_GPIO_Init+0xfe>
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	e002      	b.n	8002b54 <HAL_GPIO_Init+0x104>
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	3b08      	subs	r3, #8
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	210f      	movs	r1, #15
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	401a      	ands	r2, r3
 8002b66:	6a39      	ldr	r1, [r7, #32]
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 8096 	beq.w	8002cae <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b82:	4b59      	ldr	r3, [pc, #356]	; (8002ce8 <HAL_GPIO_Init+0x298>)
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	4a58      	ldr	r2, [pc, #352]	; (8002ce8 <HAL_GPIO_Init+0x298>)
 8002b88:	f043 0301 	orr.w	r3, r3, #1
 8002b8c:	6193      	str	r3, [r2, #24]
 8002b8e:	4b56      	ldr	r3, [pc, #344]	; (8002ce8 <HAL_GPIO_Init+0x298>)
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	60bb      	str	r3, [r7, #8]
 8002b98:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b9a:	4a54      	ldr	r2, [pc, #336]	; (8002cec <HAL_GPIO_Init+0x29c>)
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	089b      	lsrs	r3, r3, #2
 8002ba0:	3302      	adds	r3, #2
 8002ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	220f      	movs	r2, #15
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a4b      	ldr	r2, [pc, #300]	; (8002cf0 <HAL_GPIO_Init+0x2a0>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d013      	beq.n	8002bee <HAL_GPIO_Init+0x19e>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a4a      	ldr	r2, [pc, #296]	; (8002cf4 <HAL_GPIO_Init+0x2a4>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d00d      	beq.n	8002bea <HAL_GPIO_Init+0x19a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a49      	ldr	r2, [pc, #292]	; (8002cf8 <HAL_GPIO_Init+0x2a8>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d007      	beq.n	8002be6 <HAL_GPIO_Init+0x196>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a48      	ldr	r2, [pc, #288]	; (8002cfc <HAL_GPIO_Init+0x2ac>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d101      	bne.n	8002be2 <HAL_GPIO_Init+0x192>
 8002bde:	2303      	movs	r3, #3
 8002be0:	e006      	b.n	8002bf0 <HAL_GPIO_Init+0x1a0>
 8002be2:	2304      	movs	r3, #4
 8002be4:	e004      	b.n	8002bf0 <HAL_GPIO_Init+0x1a0>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e002      	b.n	8002bf0 <HAL_GPIO_Init+0x1a0>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <HAL_GPIO_Init+0x1a0>
 8002bee:	2300      	movs	r3, #0
 8002bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf2:	f002 0203 	and.w	r2, r2, #3
 8002bf6:	0092      	lsls	r2, r2, #2
 8002bf8:	4093      	lsls	r3, r2
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c00:	493a      	ldr	r1, [pc, #232]	; (8002cec <HAL_GPIO_Init+0x29c>)
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	089b      	lsrs	r3, r3, #2
 8002c06:	3302      	adds	r3, #2
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d006      	beq.n	8002c28 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c1a:	4b39      	ldr	r3, [pc, #228]	; (8002d00 <HAL_GPIO_Init+0x2b0>)
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	4938      	ldr	r1, [pc, #224]	; (8002d00 <HAL_GPIO_Init+0x2b0>)
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	600b      	str	r3, [r1, #0]
 8002c26:	e006      	b.n	8002c36 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c28:	4b35      	ldr	r3, [pc, #212]	; (8002d00 <HAL_GPIO_Init+0x2b0>)
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	4933      	ldr	r1, [pc, #204]	; (8002d00 <HAL_GPIO_Init+0x2b0>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d006      	beq.n	8002c50 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c42:	4b2f      	ldr	r3, [pc, #188]	; (8002d00 <HAL_GPIO_Init+0x2b0>)
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	492e      	ldr	r1, [pc, #184]	; (8002d00 <HAL_GPIO_Init+0x2b0>)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	604b      	str	r3, [r1, #4]
 8002c4e:	e006      	b.n	8002c5e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c50:	4b2b      	ldr	r3, [pc, #172]	; (8002d00 <HAL_GPIO_Init+0x2b0>)
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	43db      	mvns	r3, r3
 8002c58:	4929      	ldr	r1, [pc, #164]	; (8002d00 <HAL_GPIO_Init+0x2b0>)
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d006      	beq.n	8002c78 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c6a:	4b25      	ldr	r3, [pc, #148]	; (8002d00 <HAL_GPIO_Init+0x2b0>)
 8002c6c:	689a      	ldr	r2, [r3, #8]
 8002c6e:	4924      	ldr	r1, [pc, #144]	; (8002d00 <HAL_GPIO_Init+0x2b0>)
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	608b      	str	r3, [r1, #8]
 8002c76:	e006      	b.n	8002c86 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c78:	4b21      	ldr	r3, [pc, #132]	; (8002d00 <HAL_GPIO_Init+0x2b0>)
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	491f      	ldr	r1, [pc, #124]	; (8002d00 <HAL_GPIO_Init+0x2b0>)
 8002c82:	4013      	ands	r3, r2
 8002c84:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d006      	beq.n	8002ca0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c92:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <HAL_GPIO_Init+0x2b0>)
 8002c94:	68da      	ldr	r2, [r3, #12]
 8002c96:	491a      	ldr	r1, [pc, #104]	; (8002d00 <HAL_GPIO_Init+0x2b0>)
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	60cb      	str	r3, [r1, #12]
 8002c9e:	e006      	b.n	8002cae <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ca0:	4b17      	ldr	r3, [pc, #92]	; (8002d00 <HAL_GPIO_Init+0x2b0>)
 8002ca2:	68da      	ldr	r2, [r3, #12]
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	4915      	ldr	r1, [pc, #84]	; (8002d00 <HAL_GPIO_Init+0x2b0>)
 8002caa:	4013      	ands	r3, r2
 8002cac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cba:	fa22 f303 	lsr.w	r3, r2, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f47f aed0 	bne.w	8002a64 <HAL_GPIO_Init+0x14>
  }
}
 8002cc4:	bf00      	nop
 8002cc6:	372c      	adds	r7, #44	; 0x2c
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bc80      	pop	{r7}
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	10210000 	.word	0x10210000
 8002cd4:	10110000 	.word	0x10110000
 8002cd8:	10120000 	.word	0x10120000
 8002cdc:	10310000 	.word	0x10310000
 8002ce0:	10320000 	.word	0x10320000
 8002ce4:	10220000 	.word	0x10220000
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	40010000 	.word	0x40010000
 8002cf0:	40010800 	.word	0x40010800
 8002cf4:	40010c00 	.word	0x40010c00
 8002cf8:	40011000 	.word	0x40011000
 8002cfc:	40011400 	.word	0x40011400
 8002d00:	40010400 	.word	0x40010400

08002d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	807b      	strh	r3, [r7, #2]
 8002d10:	4613      	mov	r3, r2
 8002d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d14:	787b      	ldrb	r3, [r7, #1]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d1a:	887a      	ldrh	r2, [r7, #2]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d20:	e003      	b.n	8002d2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d22:	887b      	ldrh	r3, [r7, #2]
 8002d24:	041a      	lsls	r2, r3, #16
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	611a      	str	r2, [r3, #16]
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr

08002d34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e10f      	b.n	8002f66 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d106      	bne.n	8002d60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7ff f854 	bl	8001e08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2224      	movs	r2, #36	; 0x24
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0201 	bic.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d78:	f001 fbbc 	bl	80044f4 <HAL_RCC_GetPCLK1Freq>
 8002d7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	4a7b      	ldr	r2, [pc, #492]	; (8002f70 <HAL_I2C_Init+0x23c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d807      	bhi.n	8002d98 <HAL_I2C_Init+0x64>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4a7a      	ldr	r2, [pc, #488]	; (8002f74 <HAL_I2C_Init+0x240>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	bf94      	ite	ls
 8002d90:	2301      	movls	r3, #1
 8002d92:	2300      	movhi	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	e006      	b.n	8002da6 <HAL_I2C_Init+0x72>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4a77      	ldr	r2, [pc, #476]	; (8002f78 <HAL_I2C_Init+0x244>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	bf94      	ite	ls
 8002da0:	2301      	movls	r3, #1
 8002da2:	2300      	movhi	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e0db      	b.n	8002f66 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	4a72      	ldr	r2, [pc, #456]	; (8002f7c <HAL_I2C_Init+0x248>)
 8002db2:	fba2 2303 	umull	r2, r3, r2, r3
 8002db6:	0c9b      	lsrs	r3, r3, #18
 8002db8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	4a64      	ldr	r2, [pc, #400]	; (8002f70 <HAL_I2C_Init+0x23c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d802      	bhi.n	8002de8 <HAL_I2C_Init+0xb4>
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	3301      	adds	r3, #1
 8002de6:	e009      	b.n	8002dfc <HAL_I2C_Init+0xc8>
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002dee:	fb02 f303 	mul.w	r3, r2, r3
 8002df2:	4a63      	ldr	r2, [pc, #396]	; (8002f80 <HAL_I2C_Init+0x24c>)
 8002df4:	fba2 2303 	umull	r2, r3, r2, r3
 8002df8:	099b      	lsrs	r3, r3, #6
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6812      	ldr	r2, [r2, #0]
 8002e00:	430b      	orrs	r3, r1
 8002e02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	4956      	ldr	r1, [pc, #344]	; (8002f70 <HAL_I2C_Init+0x23c>)
 8002e18:	428b      	cmp	r3, r1
 8002e1a:	d80d      	bhi.n	8002e38 <HAL_I2C_Init+0x104>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	1e59      	subs	r1, r3, #1
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	bf38      	it	cc
 8002e34:	2304      	movcc	r3, #4
 8002e36:	e04f      	b.n	8002ed8 <HAL_I2C_Init+0x1a4>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d111      	bne.n	8002e64 <HAL_I2C_Init+0x130>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	1e58      	subs	r0, r3, #1
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6859      	ldr	r1, [r3, #4]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	440b      	add	r3, r1
 8002e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e52:	3301      	adds	r3, #1
 8002e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	bf0c      	ite	eq
 8002e5c:	2301      	moveq	r3, #1
 8002e5e:	2300      	movne	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	e012      	b.n	8002e8a <HAL_I2C_Init+0x156>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	1e58      	subs	r0, r3, #1
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6859      	ldr	r1, [r3, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	0099      	lsls	r1, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	bf0c      	ite	eq
 8002e84:	2301      	moveq	r3, #1
 8002e86:	2300      	movne	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <HAL_I2C_Init+0x15e>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e022      	b.n	8002ed8 <HAL_I2C_Init+0x1a4>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10e      	bne.n	8002eb8 <HAL_I2C_Init+0x184>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	1e58      	subs	r0, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6859      	ldr	r1, [r3, #4]
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	440b      	add	r3, r1
 8002ea8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eac:	3301      	adds	r3, #1
 8002eae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eb6:	e00f      	b.n	8002ed8 <HAL_I2C_Init+0x1a4>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	1e58      	subs	r0, r3, #1
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6859      	ldr	r1, [r3, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	0099      	lsls	r1, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ece:	3301      	adds	r3, #1
 8002ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	6809      	ldr	r1, [r1, #0]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	69da      	ldr	r2, [r3, #28]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6911      	ldr	r1, [r2, #16]
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	68d2      	ldr	r2, [r2, #12]
 8002f12:	4311      	orrs	r1, r2
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6812      	ldr	r2, [r2, #0]
 8002f18:	430b      	orrs	r3, r1
 8002f1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695a      	ldr	r2, [r3, #20]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0201 	orr.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2220      	movs	r2, #32
 8002f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	000186a0 	.word	0x000186a0
 8002f74:	001e847f 	.word	0x001e847f
 8002f78:	003d08ff 	.word	0x003d08ff
 8002f7c:	431bde83 	.word	0x431bde83
 8002f80:	10624dd3 	.word	0x10624dd3

08002f84 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f86:	b08b      	sub	sp, #44	; 0x2c
 8002f88:	af06      	add	r7, sp, #24
 8002f8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e0d3      	b.n	800313e <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d106      	bne.n	8002fb0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f005 fe2a 	bl	8008c04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2203      	movs	r2, #3
 8002fb4:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f002 ff7e 	bl	8005ebe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	603b      	str	r3, [r7, #0]
 8002fc8:	687e      	ldr	r6, [r7, #4]
 8002fca:	466d      	mov	r5, sp
 8002fcc:	f106 0410 	add.w	r4, r6, #16
 8002fd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fd4:	6823      	ldr	r3, [r4, #0]
 8002fd6:	602b      	str	r3, [r5, #0]
 8002fd8:	1d33      	adds	r3, r6, #4
 8002fda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fdc:	6838      	ldr	r0, [r7, #0]
 8002fde:	f002 ff47 	bl	8005e70 <USB_CoreInit>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2202      	movs	r2, #2
 8002fec:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e0a4      	b.n	800313e <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f002 ff7b 	bl	8005ef6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003000:	2300      	movs	r3, #0
 8003002:	73fb      	strb	r3, [r7, #15]
 8003004:	e035      	b.n	8003072 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003006:	7bfb      	ldrb	r3, [r7, #15]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	015b      	lsls	r3, r3, #5
 800300c:	4413      	add	r3, r2
 800300e:	3329      	adds	r3, #41	; 0x29
 8003010:	2201      	movs	r2, #1
 8003012:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003014:	7bfb      	ldrb	r3, [r7, #15]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	015b      	lsls	r3, r3, #5
 800301a:	4413      	add	r3, r2
 800301c:	3328      	adds	r3, #40	; 0x28
 800301e:	7bfa      	ldrb	r2, [r7, #15]
 8003020:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	7bfa      	ldrb	r2, [r7, #15]
 8003026:	b291      	uxth	r1, r2
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	015b      	lsls	r3, r3, #5
 800302c:	4413      	add	r3, r2
 800302e:	3336      	adds	r3, #54	; 0x36
 8003030:	460a      	mov	r2, r1
 8003032:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	015b      	lsls	r3, r3, #5
 800303a:	4413      	add	r3, r2
 800303c:	332b      	adds	r3, #43	; 0x2b
 800303e:	2200      	movs	r2, #0
 8003040:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003042:	7bfb      	ldrb	r3, [r7, #15]
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	015b      	lsls	r3, r3, #5
 8003048:	4413      	add	r3, r2
 800304a:	3338      	adds	r3, #56	; 0x38
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003050:	7bfb      	ldrb	r3, [r7, #15]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	015b      	lsls	r3, r3, #5
 8003056:	4413      	add	r3, r2
 8003058:	333c      	adds	r3, #60	; 0x3c
 800305a:	2200      	movs	r2, #0
 800305c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	3302      	adds	r3, #2
 8003064:	015b      	lsls	r3, r3, #5
 8003066:	4413      	add	r3, r2
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800306c:	7bfb      	ldrb	r3, [r7, #15]
 800306e:	3301      	adds	r3, #1
 8003070:	73fb      	strb	r3, [r7, #15]
 8003072:	7bfa      	ldrb	r2, [r7, #15]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	429a      	cmp	r2, r3
 800307a:	d3c4      	bcc.n	8003006 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800307c:	2300      	movs	r3, #0
 800307e:	73fb      	strb	r3, [r7, #15]
 8003080:	e031      	b.n	80030e6 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003082:	7bfb      	ldrb	r3, [r7, #15]
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	015b      	lsls	r3, r3, #5
 8003088:	4413      	add	r3, r2
 800308a:	f203 1329 	addw	r3, r3, #297	; 0x129
 800308e:	2200      	movs	r2, #0
 8003090:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003092:	7bfb      	ldrb	r3, [r7, #15]
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	015b      	lsls	r3, r3, #5
 8003098:	4413      	add	r3, r2
 800309a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800309e:	7bfa      	ldrb	r2, [r7, #15]
 80030a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	015b      	lsls	r3, r3, #5
 80030a8:	4413      	add	r3, r2
 80030aa:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80030ae:	2200      	movs	r2, #0
 80030b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	015b      	lsls	r3, r3, #5
 80030b8:	4413      	add	r3, r2
 80030ba:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80030be:	2200      	movs	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030c2:	7bfb      	ldrb	r3, [r7, #15]
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	015b      	lsls	r3, r3, #5
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	330a      	adds	r3, #10
 80030d8:	015b      	lsls	r3, r3, #5
 80030da:	4413      	add	r3, r2
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
 80030e2:	3301      	adds	r3, #1
 80030e4:	73fb      	strb	r3, [r7, #15]
 80030e6:	7bfa      	ldrb	r2, [r7, #15]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d3c8      	bcc.n	8003082 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	603b      	str	r3, [r7, #0]
 80030f6:	687e      	ldr	r6, [r7, #4]
 80030f8:	466d      	mov	r5, sp
 80030fa:	f106 0410 	add.w	r4, r6, #16
 80030fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003100:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003102:	6823      	ldr	r3, [r4, #0]
 8003104:	602b      	str	r3, [r5, #0]
 8003106:	1d33      	adds	r3, r6, #4
 8003108:	cb0e      	ldmia	r3, {r1, r2, r3}
 800310a:	6838      	ldr	r0, [r7, #0]
 800310c:	f002 feff 	bl	8005f0e <USB_DevInit>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d005      	beq.n	8003122 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2202      	movs	r2, #2
 800311a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e00d      	b.n	800313e <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f003 ff3d 	bl	8006fb6 <USB_DevDisconnect>

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003146 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b082      	sub	sp, #8
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <HAL_PCD_Start+0x16>
 8003158:	2302      	movs	r3, #2
 800315a:	e016      	b.n	800318a <HAL_PCD_Start+0x44>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003164:	2101      	movs	r1, #1
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f005 ffb3 	bl	80090d2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f003 ff16 	bl	8006fa2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f002 fe88 	bl	8005e90 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f003 ff13 	bl	8006fca <USB_ReadInterrupts>
 80031a4:	4603      	mov	r3, r0
 80031a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031ae:	d102      	bne.n	80031b6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 faf3 	bl	800379c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f003 ff05 	bl	8006fca <USB_ReadInterrupts>
 80031c0:	4603      	mov	r3, r0
 80031c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ca:	d112      	bne.n	80031f2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031de:	b292      	uxth	r2, r2
 80031e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f005 fd82 	bl	8008cee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80031ea:	2100      	movs	r1, #0
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f8de 	bl	80033ae <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f003 fee7 	bl	8006fca <USB_ReadInterrupts>
 80031fc:	4603      	mov	r3, r0
 80031fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003202:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003206:	d10b      	bne.n	8003220 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003210:	b29a      	uxth	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800321a:	b292      	uxth	r2, r2
 800321c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f003 fed0 	bl	8006fca <USB_ReadInterrupts>
 800322a:	4603      	mov	r3, r0
 800322c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003234:	d10b      	bne.n	800324e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800323e:	b29a      	uxth	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003248:	b292      	uxth	r2, r2
 800324a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f003 feb9 	bl	8006fca <USB_ReadInterrupts>
 8003258:	4603      	mov	r3, r0
 800325a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800325e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003262:	d126      	bne.n	80032b2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800326c:	b29a      	uxth	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0204 	bic.w	r2, r2, #4
 8003276:	b292      	uxth	r2, r2
 8003278:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003284:	b29a      	uxth	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0208 	bic.w	r2, r2, #8
 800328e:	b292      	uxth	r2, r2
 8003290:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f005 fd63 	bl	8008d60 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032ac:	b292      	uxth	r2, r2
 80032ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f003 fe87 	bl	8006fca <USB_ReadInterrupts>
 80032bc:	4603      	mov	r3, r0
 80032be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032c6:	d13d      	bne.n	8003344 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0208 	orr.w	r2, r2, #8
 80032da:	b292      	uxth	r2, r2
 80032dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032f2:	b292      	uxth	r2, r2
 80032f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003300:	b29a      	uxth	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0204 	orr.w	r2, r2, #4
 800330a:	b292      	uxth	r2, r2
 800330c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f003 fe58 	bl	8006fca <USB_ReadInterrupts>
 800331a:	4603      	mov	r3, r0
 800331c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003324:	d10b      	bne.n	800333e <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800332e:	b29a      	uxth	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003338:	b292      	uxth	r2, r2
 800333a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f005 fcf4 	bl	8008d2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f003 fe3e 	bl	8006fca <USB_ReadInterrupts>
 800334e:	4603      	mov	r3, r0
 8003350:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003358:	d10e      	bne.n	8003378 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003362:	b29a      	uxth	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800336c:	b292      	uxth	r2, r2
 800336e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f005 fcad 	bl	8008cd2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f003 fe24 	bl	8006fca <USB_ReadInterrupts>
 8003382:	4603      	mov	r3, r0
 8003384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800338c:	d10b      	bne.n	80033a6 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003396:	b29a      	uxth	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033a0:	b292      	uxth	r2, r2
 80033a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80033a6:	bf00      	nop
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b082      	sub	sp, #8
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
 80033b6:	460b      	mov	r3, r1
 80033b8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <HAL_PCD_SetAddress+0x1a>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e013      	b.n	80033f0 <HAL_PCD_SetAddress+0x42>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	78fa      	ldrb	r2, [r7, #3]
 80033d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	78fa      	ldrb	r2, [r7, #3]
 80033de:	4611      	mov	r1, r2
 80033e0:	4618      	mov	r0, r3
 80033e2:	f003 fdcb 	bl	8006f7c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	4608      	mov	r0, r1
 8003402:	4611      	mov	r1, r2
 8003404:	461a      	mov	r2, r3
 8003406:	4603      	mov	r3, r0
 8003408:	70fb      	strb	r3, [r7, #3]
 800340a:	460b      	mov	r3, r1
 800340c:	803b      	strh	r3, [r7, #0]
 800340e:	4613      	mov	r3, r2
 8003410:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003412:	2300      	movs	r3, #0
 8003414:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003416:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800341a:	2b00      	cmp	r3, #0
 800341c:	da0b      	bge.n	8003436 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800341e:	78fb      	ldrb	r3, [r7, #3]
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	015b      	lsls	r3, r3, #5
 8003426:	3328      	adds	r3, #40	; 0x28
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	4413      	add	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2201      	movs	r2, #1
 8003432:	705a      	strb	r2, [r3, #1]
 8003434:	e00b      	b.n	800344e <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003436:	78fb      	ldrb	r3, [r7, #3]
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	015b      	lsls	r3, r3, #5
 800343e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	4413      	add	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800344e:	78fb      	ldrb	r3, [r7, #3]
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	b2da      	uxtb	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800345a:	883a      	ldrh	r2, [r7, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	78ba      	ldrb	r2, [r7, #2]
 8003464:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	785b      	ldrb	r3, [r3, #1]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d004      	beq.n	8003478 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	b29a      	uxth	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003478:	78bb      	ldrb	r3, [r7, #2]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d102      	bne.n	8003484 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <HAL_PCD_EP_Open+0x9a>
 800348e:	2302      	movs	r3, #2
 8003490:	e00e      	b.n	80034b0 <HAL_PCD_EP_Open+0xb8>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68f9      	ldr	r1, [r7, #12]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f002 fd59 	bl	8005f58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80034ae:	7afb      	ldrb	r3, [r7, #11]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	da0b      	bge.n	80034e4 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034cc:	78fb      	ldrb	r3, [r7, #3]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	015b      	lsls	r3, r3, #5
 80034d4:	3328      	adds	r3, #40	; 0x28
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	4413      	add	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2201      	movs	r2, #1
 80034e0:	705a      	strb	r2, [r3, #1]
 80034e2:	e00b      	b.n	80034fc <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034e4:	78fb      	ldrb	r3, [r7, #3]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	015b      	lsls	r3, r3, #5
 80034ec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	4413      	add	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80034fc:	78fb      	ldrb	r3, [r7, #3]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	b2da      	uxtb	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800350e:	2b01      	cmp	r3, #1
 8003510:	d101      	bne.n	8003516 <HAL_PCD_EP_Close+0x5e>
 8003512:	2302      	movs	r3, #2
 8003514:	e00e      	b.n	8003534 <HAL_PCD_EP_Close+0x7c>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68f9      	ldr	r1, [r7, #12]
 8003524:	4618      	mov	r0, r3
 8003526:	f003 f805 	bl	8006534 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	607a      	str	r2, [r7, #4]
 8003546:	603b      	str	r3, [r7, #0]
 8003548:	460b      	mov	r3, r1
 800354a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800354c:	7afb      	ldrb	r3, [r7, #11]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	015b      	lsls	r3, r3, #5
 8003554:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	4413      	add	r3, r2
 800355c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2200      	movs	r2, #0
 800356e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	2200      	movs	r2, #0
 8003574:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003576:	7afb      	ldrb	r3, [r7, #11]
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	b2da      	uxtb	r2, r3
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003582:	7afb      	ldrb	r3, [r7, #11]
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	2b00      	cmp	r3, #0
 800358a:	d106      	bne.n	800359a <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6979      	ldr	r1, [r7, #20]
 8003592:	4618      	mov	r0, r3
 8003594:	f003 f964 	bl	8006860 <USB_EPStartXfer>
 8003598:	e005      	b.n	80035a6 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6979      	ldr	r1, [r7, #20]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f003 f95d 	bl	8006860 <USB_EPStartXfer>
  }

  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	460b      	mov	r3, r1
 80035ba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80035bc:	78fb      	ldrb	r3, [r7, #3]
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	330a      	adds	r3, #10
 80035c6:	015b      	lsls	r3, r3, #5
 80035c8:	4413      	add	r3, r2
 80035ca:	3304      	adds	r3, #4
 80035cc:	681b      	ldr	r3, [r3, #0]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr

080035d8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	607a      	str	r2, [r7, #4]
 80035e2:	603b      	str	r3, [r7, #0]
 80035e4:	460b      	mov	r3, r1
 80035e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035e8:	7afb      	ldrb	r3, [r7, #11]
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	015b      	lsls	r3, r3, #5
 80035f0:	3328      	adds	r3, #40	; 0x28
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4413      	add	r3, r2
 80035f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2200      	movs	r2, #0
 8003608:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	2201      	movs	r2, #1
 800360e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003610:	7afb      	ldrb	r3, [r7, #11]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	b2da      	uxtb	r2, r3
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800361c:	7afb      	ldrb	r3, [r7, #11]
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	2b00      	cmp	r3, #0
 8003624:	d106      	bne.n	8003634 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6979      	ldr	r1, [r7, #20]
 800362c:	4618      	mov	r0, r3
 800362e:	f003 f917 	bl	8006860 <USB_EPStartXfer>
 8003632:	e005      	b.n	8003640 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6979      	ldr	r1, [r7, #20]
 800363a:	4618      	mov	r0, r3
 800363c:	f003 f910 	bl	8006860 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b084      	sub	sp, #16
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	460b      	mov	r3, r1
 8003654:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003656:	78fb      	ldrb	r3, [r7, #3]
 8003658:	f003 0207 	and.w	r2, r3, #7
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	429a      	cmp	r2, r3
 8003662:	d901      	bls.n	8003668 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e046      	b.n	80036f6 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003668:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800366c:	2b00      	cmp	r3, #0
 800366e:	da0b      	bge.n	8003688 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003670:	78fb      	ldrb	r3, [r7, #3]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	015b      	lsls	r3, r3, #5
 8003678:	3328      	adds	r3, #40	; 0x28
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	4413      	add	r3, r2
 800367e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2201      	movs	r2, #1
 8003684:	705a      	strb	r2, [r3, #1]
 8003686:	e009      	b.n	800369c <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003688:	78fb      	ldrb	r3, [r7, #3]
 800368a:	015b      	lsls	r3, r3, #5
 800368c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	4413      	add	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2201      	movs	r2, #1
 80036a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036a2:	78fb      	ldrb	r3, [r7, #3]
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d101      	bne.n	80036bc <HAL_PCD_EP_SetStall+0x72>
 80036b8:	2302      	movs	r3, #2
 80036ba:	e01c      	b.n	80036f6 <HAL_PCD_EP_SetStall+0xac>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68f9      	ldr	r1, [r7, #12]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f003 fb80 	bl	8006dd0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036d0:	78fb      	ldrb	r3, [r7, #3]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d108      	bne.n	80036ec <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80036e4:	4619      	mov	r1, r3
 80036e6:	4610      	mov	r0, r2
 80036e8:	f003 fc7e 	bl	8006fe8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b084      	sub	sp, #16
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
 8003706:	460b      	mov	r3, r1
 8003708:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800370a:	78fb      	ldrb	r3, [r7, #3]
 800370c:	f003 020f 	and.w	r2, r3, #15
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	429a      	cmp	r2, r3
 8003716:	d901      	bls.n	800371c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e03a      	b.n	8003792 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800371c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003720:	2b00      	cmp	r3, #0
 8003722:	da0b      	bge.n	800373c <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003724:	78fb      	ldrb	r3, [r7, #3]
 8003726:	f003 0307 	and.w	r3, r3, #7
 800372a:	015b      	lsls	r3, r3, #5
 800372c:	3328      	adds	r3, #40	; 0x28
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	4413      	add	r3, r2
 8003732:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2201      	movs	r2, #1
 8003738:	705a      	strb	r2, [r3, #1]
 800373a:	e00b      	b.n	8003754 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800373c:	78fb      	ldrb	r3, [r7, #3]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	015b      	lsls	r3, r3, #5
 8003744:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	4413      	add	r3, r2
 800374c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800375a:	78fb      	ldrb	r3, [r7, #3]
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	b2da      	uxtb	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <HAL_PCD_EP_ClrStall+0x76>
 8003770:	2302      	movs	r3, #2
 8003772:	e00e      	b.n	8003792 <HAL_PCD_EP_ClrStall+0x94>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68f9      	ldr	r1, [r7, #12]
 8003782:	4618      	mov	r0, r3
 8003784:	f003 fb66 	bl	8006e54 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
	...

0800379c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800379c:	b590      	push	{r4, r7, lr}
 800379e:	b089      	sub	sp, #36	; 0x24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80037a4:	e282      	b.n	8003cac <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037ae:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80037b0:	8afb      	ldrh	r3, [r7, #22]
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	f003 030f 	and.w	r3, r3, #15
 80037b8:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80037ba:	7d7b      	ldrb	r3, [r7, #21]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f040 8142 	bne.w	8003a46 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80037c2:	8afb      	ldrh	r3, [r7, #22]
 80037c4:	f003 0310 	and.w	r3, r3, #16
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d151      	bne.n	8003870 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80037d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037dc:	b29c      	uxth	r4, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80037e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3328      	adds	r3, #40	; 0x28
 80037f2:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	461a      	mov	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	4413      	add	r3, r2
 8003808:	3302      	adds	r3, #2
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6812      	ldr	r2, [r2, #0]
 8003810:	4413      	add	r3, r2
 8003812:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003816:	881b      	ldrh	r3, [r3, #0]
 8003818:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	695a      	ldr	r2, [r3, #20]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	69db      	ldr	r3, [r3, #28]
 8003828:	441a      	add	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800382e:	2100      	movs	r1, #0
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f005 fa37 	bl	8008ca4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 8234 	beq.w	8003cac <PCD_EP_ISR_Handler+0x510>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	2b00      	cmp	r3, #0
 800384a:	f040 822f 	bne.w	8003cac <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003854:	b2db      	uxtb	r3, r3
 8003856:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800385a:	b2da      	uxtb	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	b292      	uxth	r2, r2
 8003862:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800386e:	e21d      	b.n	8003cac <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003876:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	881b      	ldrh	r3, [r3, #0]
 800387e:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003880:	8a7b      	ldrh	r3, [r7, #18]
 8003882:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003886:	2b00      	cmp	r3, #0
 8003888:	d033      	beq.n	80038f2 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003892:	b29b      	uxth	r3, r3
 8003894:	461a      	mov	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	4413      	add	r3, r2
 800389e:	3306      	adds	r3, #6
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6812      	ldr	r2, [r2, #0]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	f003 fbdc 	bl	8007086 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80038da:	4013      	ands	r3, r2
 80038dc:	b29c      	uxth	r4, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80038e6:	b292      	uxth	r2, r2
 80038e8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f005 f9b0 	bl	8008c50 <HAL_PCD_SetupStageCallback>
 80038f0:	e1dc      	b.n	8003cac <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80038f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f280 81d8 	bge.w	8003cac <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	b29a      	uxth	r2, r3
 8003904:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003908:	4013      	ands	r3, r2
 800390a:	b29c      	uxth	r4, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003914:	b292      	uxth	r2, r2
 8003916:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003920:	b29b      	uxth	r3, r3
 8003922:	461a      	mov	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	4413      	add	r3, r2
 800392c:	3306      	adds	r3, #6
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6812      	ldr	r2, [r2, #0]
 8003934:	4413      	add	r3, r2
 8003936:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800393a:	881b      	ldrh	r3, [r3, #0]
 800393c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d019      	beq.n	8003980 <PCD_EP_ISR_Handler+0x1e4>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d015      	beq.n	8003980 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6818      	ldr	r0, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6959      	ldr	r1, [r3, #20]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003964:	b29b      	uxth	r3, r3
 8003966:	f003 fb8e 	bl	8007086 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	695a      	ldr	r2, [r3, #20]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	441a      	add	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003978:	2100      	movs	r1, #0
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f005 f97a 	bl	8008c74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	461c      	mov	r4, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800398e:	b29b      	uxth	r3, r3
 8003990:	441c      	add	r4, r3
 8003992:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8003996:	461c      	mov	r4, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10e      	bne.n	80039be <PCD_EP_ISR_Handler+0x222>
 80039a0:	8823      	ldrh	r3, [r4, #0]
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	8023      	strh	r3, [r4, #0]
 80039ac:	8823      	ldrh	r3, [r4, #0]
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	8023      	strh	r3, [r4, #0]
 80039bc:	e02d      	b.n	8003a1a <PCD_EP_ISR_Handler+0x27e>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	2b3e      	cmp	r3, #62	; 0x3e
 80039c4:	d812      	bhi.n	80039ec <PCD_EP_ISR_Handler+0x250>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	085b      	lsrs	r3, r3, #1
 80039cc:	61bb      	str	r3, [r7, #24]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d002      	beq.n	80039e0 <PCD_EP_ISR_Handler+0x244>
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	3301      	adds	r3, #1
 80039de:	61bb      	str	r3, [r7, #24]
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	029b      	lsls	r3, r3, #10
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	8023      	strh	r3, [r4, #0]
 80039ea:	e016      	b.n	8003a1a <PCD_EP_ISR_Handler+0x27e>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	095b      	lsrs	r3, r3, #5
 80039f2:	61bb      	str	r3, [r7, #24]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	f003 031f 	and.w	r3, r3, #31
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d102      	bne.n	8003a06 <PCD_EP_ISR_Handler+0x26a>
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	61bb      	str	r3, [r7, #24]
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	029b      	lsls	r3, r3, #10
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	881b      	ldrh	r3, [r3, #0]
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a2a:	b29c      	uxth	r4, r3
 8003a2c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003a30:	b29c      	uxth	r4, r3
 8003a32:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003a36:	b29c      	uxth	r4, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	4ba2      	ldr	r3, [pc, #648]	; (8003cc8 <PCD_EP_ISR_Handler+0x52c>)
 8003a3e:	4323      	orrs	r3, r4
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	8013      	strh	r3, [r2, #0]
 8003a44:	e132      	b.n	8003cac <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	7d7b      	ldrb	r3, [r7, #21]
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	881b      	ldrh	r3, [r3, #0]
 8003a54:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003a56:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f280 80d1 	bge.w	8003c02 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	461a      	mov	r2, r3
 8003a66:	7d7b      	ldrb	r3, [r7, #21]
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003a74:	4013      	ands	r3, r2
 8003a76:	b29c      	uxth	r4, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	7d7b      	ldrb	r3, [r7, #21]
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4413      	add	r3, r2
 8003a84:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003a88:	b292      	uxth	r2, r2
 8003a8a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003a8c:	7d7b      	ldrb	r3, [r7, #21]
 8003a8e:	015b      	lsls	r3, r3, #5
 8003a90:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	4413      	add	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	7b1b      	ldrb	r3, [r3, #12]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d121      	bne.n	8003ae6 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	461a      	mov	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	4413      	add	r3, r2
 8003ab6:	3306      	adds	r3, #6
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6812      	ldr	r2, [r2, #0]
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ac4:	881b      	ldrh	r3, [r3, #0]
 8003ac6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003aca:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8003acc:	8bfb      	ldrh	r3, [r7, #30]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d072      	beq.n	8003bb8 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6818      	ldr	r0, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6959      	ldr	r1, [r3, #20]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	88da      	ldrh	r2, [r3, #6]
 8003ade:	8bfb      	ldrh	r3, [r7, #30]
 8003ae0:	f003 fad1 	bl	8007086 <USB_ReadPMA>
 8003ae4:	e068      	b.n	8003bb8 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	881b      	ldrh	r3, [r3, #0]
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d021      	beq.n	8003b44 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	4413      	add	r3, r2
 8003b14:	3302      	adds	r3, #2
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6812      	ldr	r2, [r2, #0]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b28:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003b2a:	8bfb      	ldrh	r3, [r7, #30]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d02a      	beq.n	8003b86 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6818      	ldr	r0, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6959      	ldr	r1, [r3, #20]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	891a      	ldrh	r2, [r3, #8]
 8003b3c:	8bfb      	ldrh	r3, [r7, #30]
 8003b3e:	f003 faa2 	bl	8007086 <USB_ReadPMA>
 8003b42:	e020      	b.n	8003b86 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	461a      	mov	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	4413      	add	r3, r2
 8003b58:	3306      	adds	r3, #6
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6812      	ldr	r2, [r2, #0]
 8003b60:	4413      	add	r3, r2
 8003b62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b66:	881b      	ldrh	r3, [r3, #0]
 8003b68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b6c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003b6e:	8bfb      	ldrh	r3, [r7, #30]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d008      	beq.n	8003b86 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6818      	ldr	r0, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6959      	ldr	r1, [r3, #20]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	895a      	ldrh	r2, [r3, #10]
 8003b80:	8bfb      	ldrh	r3, [r7, #30]
 8003b82:	f003 fa80 	bl	8007086 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ba0:	b29c      	uxth	r4, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	441a      	add	r2, r3
 8003bb0:	4b46      	ldr	r3, [pc, #280]	; (8003ccc <PCD_EP_ISR_Handler+0x530>)
 8003bb2:	4323      	orrs	r3, r4
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	69da      	ldr	r2, [r3, #28]
 8003bbc:	8bfb      	ldrh	r3, [r7, #30]
 8003bbe:	441a      	add	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	695a      	ldr	r2, [r3, #20]
 8003bc8:	8bfb      	ldrh	r3, [r7, #30]
 8003bca:	441a      	add	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d004      	beq.n	8003be2 <PCD_EP_ISR_Handler+0x446>
 8003bd8:	8bfa      	ldrh	r2, [r7, #30]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d206      	bcs.n	8003bf0 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	4619      	mov	r1, r3
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f005 f843 	bl	8008c74 <HAL_PCD_DataOutStageCallback>
 8003bee:	e008      	b.n	8003c02 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	7819      	ldrb	r1, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	695a      	ldr	r2, [r3, #20]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7ff fc9d 	bl	800353c <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003c02:	8a7b      	ldrh	r3, [r7, #18]
 8003c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d04f      	beq.n	8003cac <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8003c0c:	7d7b      	ldrb	r3, [r7, #21]
 8003c0e:	015b      	lsls	r3, r3, #5
 8003c10:	3328      	adds	r3, #40	; 0x28
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	4413      	add	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	7d7b      	ldrb	r3, [r7, #21]
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4413      	add	r3, r2
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c30:	b29c      	uxth	r4, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	7d7b      	ldrb	r3, [r7, #21]
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	441a      	add	r2, r3
 8003c3e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8003c42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	461a      	mov	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	4413      	add	r3, r2
 8003c5e:	3302      	adds	r3, #2
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	6812      	ldr	r2, [r2, #0]
 8003c66:	4413      	add	r3, r2
 8003c68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c6c:	881b      	ldrh	r3, [r3, #0]
 8003c6e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	695a      	ldr	r2, [r3, #20]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	441a      	add	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d106      	bne.n	8003c9a <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	4619      	mov	r1, r3
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f005 f806 	bl	8008ca4 <HAL_PCD_DataInStageCallback>
 8003c98:	e008      	b.n	8003cac <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	7819      	ldrb	r1, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	695a      	ldr	r2, [r3, #20]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7ff fc96 	bl	80035d8 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	b21b      	sxth	r3, r3
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f6ff ad74 	blt.w	80037a6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3724      	adds	r7, #36	; 0x24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd90      	pop	{r4, r7, pc}
 8003cc8:	ffff8080 	.word	0xffff8080
 8003ccc:	ffff80c0 	.word	0xffff80c0

08003cd0 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	607b      	str	r3, [r7, #4]
 8003cda:	460b      	mov	r3, r1
 8003cdc:	817b      	strh	r3, [r7, #10]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003ce2:	897b      	ldrh	r3, [r7, #10]
 8003ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d008      	beq.n	8003d00 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cee:	897b      	ldrh	r3, [r7, #10]
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	015b      	lsls	r3, r3, #5
 8003cf6:	3328      	adds	r3, #40	; 0x28
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	e006      	b.n	8003d0e <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d00:	897b      	ldrh	r3, [r7, #10]
 8003d02:	015b      	lsls	r3, r3, #5
 8003d04:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003d0e:	893b      	ldrh	r3, [r7, #8]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d107      	bne.n	8003d24 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	2200      	movs	r2, #0
 8003d18:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	80da      	strh	r2, [r3, #6]
 8003d22:	e00b      	b.n	8003d3c <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	2201      	movs	r2, #1
 8003d28:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	0c1b      	lsrs	r3, r3, #16
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	371c      	adds	r7, #28
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bc80      	pop	{r7}
 8003d46:	4770      	bx	lr

08003d48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e26c      	b.n	8004234 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 8087 	beq.w	8003e76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d68:	4b92      	ldr	r3, [pc, #584]	; (8003fb4 <HAL_RCC_OscConfig+0x26c>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f003 030c 	and.w	r3, r3, #12
 8003d70:	2b04      	cmp	r3, #4
 8003d72:	d00c      	beq.n	8003d8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d74:	4b8f      	ldr	r3, [pc, #572]	; (8003fb4 <HAL_RCC_OscConfig+0x26c>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f003 030c 	and.w	r3, r3, #12
 8003d7c:	2b08      	cmp	r3, #8
 8003d7e:	d112      	bne.n	8003da6 <HAL_RCC_OscConfig+0x5e>
 8003d80:	4b8c      	ldr	r3, [pc, #560]	; (8003fb4 <HAL_RCC_OscConfig+0x26c>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d8c:	d10b      	bne.n	8003da6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d8e:	4b89      	ldr	r3, [pc, #548]	; (8003fb4 <HAL_RCC_OscConfig+0x26c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d06c      	beq.n	8003e74 <HAL_RCC_OscConfig+0x12c>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d168      	bne.n	8003e74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e246      	b.n	8004234 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dae:	d106      	bne.n	8003dbe <HAL_RCC_OscConfig+0x76>
 8003db0:	4b80      	ldr	r3, [pc, #512]	; (8003fb4 <HAL_RCC_OscConfig+0x26c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a7f      	ldr	r2, [pc, #508]	; (8003fb4 <HAL_RCC_OscConfig+0x26c>)
 8003db6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	e02e      	b.n	8003e1c <HAL_RCC_OscConfig+0xd4>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10c      	bne.n	8003de0 <HAL_RCC_OscConfig+0x98>
 8003dc6:	4b7b      	ldr	r3, [pc, #492]	; (8003fb4 <HAL_RCC_OscConfig+0x26c>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a7a      	ldr	r2, [pc, #488]	; (8003fb4 <HAL_RCC_OscConfig+0x26c>)
 8003dcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dd0:	6013      	str	r3, [r2, #0]
 8003dd2:	4b78      	ldr	r3, [pc, #480]	; (8003fb4 <HAL_RCC_OscConfig+0x26c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a77      	ldr	r2, [pc, #476]	; (8003fb4 <HAL_RCC_OscConfig+0x26c>)
 8003dd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ddc:	6013      	str	r3, [r2, #0]
 8003dde:	e01d      	b.n	8003e1c <HAL_RCC_OscConfig+0xd4>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003de8:	d10c      	bne.n	8003e04 <HAL_RCC_OscConfig+0xbc>
 8003dea:	4b72      	ldr	r3, [pc, #456]	; (8003fb4 <HAL_RCC_OscConfig+0x26c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a71      	ldr	r2, [pc, #452]	; (8003fb4 <HAL_RCC_OscConfig+0x26c>)
 8003df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003df4:	6013      	str	r3, [r2, #0]
 8003df6:	4b6f      	ldr	r3, [pc, #444]	; (8003fb4 <HAL_RCC_OscConfig+0x26c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a6e      	ldr	r2, [pc, #440]	; (8003fb4 <HAL_RCC_OscConfig+0x26c>)
 8003dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e00:	6013      	str	r3, [r2, #0]
 8003e02:	e00b      	b.n	8003e1c <HAL_RCC_OscConfig+0xd4>
 8003e04:	4b6b      	ldr	r3, [pc, #428]	; (8003fb4 <HAL_RCC_OscConfig+0x26c>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a6a      	ldr	r2, [pc, #424]	; (8003fb4 <HAL_RCC_OscConfig+0x26c>)
 8003e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e0e:	6013      	str	r3, [r2, #0]
 8003e10:	4b68      	ldr	r3, [pc, #416]	; (8003fb4 <HAL_RCC_OscConfig+0x26c>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a67      	ldr	r2, [pc, #412]	; (8003fb4 <HAL_RCC_OscConfig+0x26c>)
 8003e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d013      	beq.n	8003e4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e24:	f7fe fa6a 	bl	80022fc <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e2c:	f7fe fa66 	bl	80022fc <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b64      	cmp	r3, #100	; 0x64
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e1fa      	b.n	8004234 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e3e:	4b5d      	ldr	r3, [pc, #372]	; (8003fb4 <HAL_RCC_OscConfig+0x26c>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0f0      	beq.n	8003e2c <HAL_RCC_OscConfig+0xe4>
 8003e4a:	e014      	b.n	8003e76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4c:	f7fe fa56 	bl	80022fc <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e54:	f7fe fa52 	bl	80022fc <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b64      	cmp	r3, #100	; 0x64
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e1e6      	b.n	8004234 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e66:	4b53      	ldr	r3, [pc, #332]	; (8003fb4 <HAL_RCC_OscConfig+0x26c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f0      	bne.n	8003e54 <HAL_RCC_OscConfig+0x10c>
 8003e72:	e000      	b.n	8003e76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d063      	beq.n	8003f4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e82:	4b4c      	ldr	r3, [pc, #304]	; (8003fb4 <HAL_RCC_OscConfig+0x26c>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f003 030c 	and.w	r3, r3, #12
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00b      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e8e:	4b49      	ldr	r3, [pc, #292]	; (8003fb4 <HAL_RCC_OscConfig+0x26c>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f003 030c 	and.w	r3, r3, #12
 8003e96:	2b08      	cmp	r3, #8
 8003e98:	d11c      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x18c>
 8003e9a:	4b46      	ldr	r3, [pc, #280]	; (8003fb4 <HAL_RCC_OscConfig+0x26c>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d116      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ea6:	4b43      	ldr	r3, [pc, #268]	; (8003fb4 <HAL_RCC_OscConfig+0x26c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d005      	beq.n	8003ebe <HAL_RCC_OscConfig+0x176>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d001      	beq.n	8003ebe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e1ba      	b.n	8004234 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ebe:	4b3d      	ldr	r3, [pc, #244]	; (8003fb4 <HAL_RCC_OscConfig+0x26c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	4939      	ldr	r1, [pc, #228]	; (8003fb4 <HAL_RCC_OscConfig+0x26c>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ed2:	e03a      	b.n	8003f4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d020      	beq.n	8003f1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003edc:	4b36      	ldr	r3, [pc, #216]	; (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003ede:	2201      	movs	r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee2:	f7fe fa0b 	bl	80022fc <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee8:	e008      	b.n	8003efc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eea:	f7fe fa07 	bl	80022fc <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d901      	bls.n	8003efc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e19b      	b.n	8004234 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003efc:	4b2d      	ldr	r3, [pc, #180]	; (8003fb4 <HAL_RCC_OscConfig+0x26c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0f0      	beq.n	8003eea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f08:	4b2a      	ldr	r3, [pc, #168]	; (8003fb4 <HAL_RCC_OscConfig+0x26c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	4927      	ldr	r1, [pc, #156]	; (8003fb4 <HAL_RCC_OscConfig+0x26c>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	600b      	str	r3, [r1, #0]
 8003f1c:	e015      	b.n	8003f4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f1e:	4b26      	ldr	r3, [pc, #152]	; (8003fb8 <HAL_RCC_OscConfig+0x270>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f24:	f7fe f9ea 	bl	80022fc <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f2c:	f7fe f9e6 	bl	80022fc <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e17a      	b.n	8004234 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f3e:	4b1d      	ldr	r3, [pc, #116]	; (8003fb4 <HAL_RCC_OscConfig+0x26c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1f0      	bne.n	8003f2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0308 	and.w	r3, r3, #8
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d03a      	beq.n	8003fcc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d019      	beq.n	8003f92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f5e:	4b17      	ldr	r3, [pc, #92]	; (8003fbc <HAL_RCC_OscConfig+0x274>)
 8003f60:	2201      	movs	r2, #1
 8003f62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f64:	f7fe f9ca 	bl	80022fc <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f6c:	f7fe f9c6 	bl	80022fc <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e15a      	b.n	8004234 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f7e:	4b0d      	ldr	r3, [pc, #52]	; (8003fb4 <HAL_RCC_OscConfig+0x26c>)
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d0f0      	beq.n	8003f6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f8a:	2001      	movs	r0, #1
 8003f8c:	f000 fb0a 	bl	80045a4 <RCC_Delay>
 8003f90:	e01c      	b.n	8003fcc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f92:	4b0a      	ldr	r3, [pc, #40]	; (8003fbc <HAL_RCC_OscConfig+0x274>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f98:	f7fe f9b0 	bl	80022fc <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f9e:	e00f      	b.n	8003fc0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fa0:	f7fe f9ac 	bl	80022fc <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d908      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e140      	b.n	8004234 <HAL_RCC_OscConfig+0x4ec>
 8003fb2:	bf00      	nop
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	42420000 	.word	0x42420000
 8003fbc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fc0:	4b9e      	ldr	r3, [pc, #632]	; (800423c <HAL_RCC_OscConfig+0x4f4>)
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1e9      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 80a6 	beq.w	8004126 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fde:	4b97      	ldr	r3, [pc, #604]	; (800423c <HAL_RCC_OscConfig+0x4f4>)
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10d      	bne.n	8004006 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fea:	4b94      	ldr	r3, [pc, #592]	; (800423c <HAL_RCC_OscConfig+0x4f4>)
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	4a93      	ldr	r2, [pc, #588]	; (800423c <HAL_RCC_OscConfig+0x4f4>)
 8003ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ff4:	61d3      	str	r3, [r2, #28]
 8003ff6:	4b91      	ldr	r3, [pc, #580]	; (800423c <HAL_RCC_OscConfig+0x4f4>)
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ffe:	60bb      	str	r3, [r7, #8]
 8004000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004002:	2301      	movs	r3, #1
 8004004:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004006:	4b8e      	ldr	r3, [pc, #568]	; (8004240 <HAL_RCC_OscConfig+0x4f8>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400e:	2b00      	cmp	r3, #0
 8004010:	d118      	bne.n	8004044 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004012:	4b8b      	ldr	r3, [pc, #556]	; (8004240 <HAL_RCC_OscConfig+0x4f8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a8a      	ldr	r2, [pc, #552]	; (8004240 <HAL_RCC_OscConfig+0x4f8>)
 8004018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800401c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800401e:	f7fe f96d 	bl	80022fc <HAL_GetTick>
 8004022:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004024:	e008      	b.n	8004038 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004026:	f7fe f969 	bl	80022fc <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b64      	cmp	r3, #100	; 0x64
 8004032:	d901      	bls.n	8004038 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e0fd      	b.n	8004234 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004038:	4b81      	ldr	r3, [pc, #516]	; (8004240 <HAL_RCC_OscConfig+0x4f8>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004040:	2b00      	cmp	r3, #0
 8004042:	d0f0      	beq.n	8004026 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d106      	bne.n	800405a <HAL_RCC_OscConfig+0x312>
 800404c:	4b7b      	ldr	r3, [pc, #492]	; (800423c <HAL_RCC_OscConfig+0x4f4>)
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	4a7a      	ldr	r2, [pc, #488]	; (800423c <HAL_RCC_OscConfig+0x4f4>)
 8004052:	f043 0301 	orr.w	r3, r3, #1
 8004056:	6213      	str	r3, [r2, #32]
 8004058:	e02d      	b.n	80040b6 <HAL_RCC_OscConfig+0x36e>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10c      	bne.n	800407c <HAL_RCC_OscConfig+0x334>
 8004062:	4b76      	ldr	r3, [pc, #472]	; (800423c <HAL_RCC_OscConfig+0x4f4>)
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	4a75      	ldr	r2, [pc, #468]	; (800423c <HAL_RCC_OscConfig+0x4f4>)
 8004068:	f023 0301 	bic.w	r3, r3, #1
 800406c:	6213      	str	r3, [r2, #32]
 800406e:	4b73      	ldr	r3, [pc, #460]	; (800423c <HAL_RCC_OscConfig+0x4f4>)
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	4a72      	ldr	r2, [pc, #456]	; (800423c <HAL_RCC_OscConfig+0x4f4>)
 8004074:	f023 0304 	bic.w	r3, r3, #4
 8004078:	6213      	str	r3, [r2, #32]
 800407a:	e01c      	b.n	80040b6 <HAL_RCC_OscConfig+0x36e>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	2b05      	cmp	r3, #5
 8004082:	d10c      	bne.n	800409e <HAL_RCC_OscConfig+0x356>
 8004084:	4b6d      	ldr	r3, [pc, #436]	; (800423c <HAL_RCC_OscConfig+0x4f4>)
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	4a6c      	ldr	r2, [pc, #432]	; (800423c <HAL_RCC_OscConfig+0x4f4>)
 800408a:	f043 0304 	orr.w	r3, r3, #4
 800408e:	6213      	str	r3, [r2, #32]
 8004090:	4b6a      	ldr	r3, [pc, #424]	; (800423c <HAL_RCC_OscConfig+0x4f4>)
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	4a69      	ldr	r2, [pc, #420]	; (800423c <HAL_RCC_OscConfig+0x4f4>)
 8004096:	f043 0301 	orr.w	r3, r3, #1
 800409a:	6213      	str	r3, [r2, #32]
 800409c:	e00b      	b.n	80040b6 <HAL_RCC_OscConfig+0x36e>
 800409e:	4b67      	ldr	r3, [pc, #412]	; (800423c <HAL_RCC_OscConfig+0x4f4>)
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	4a66      	ldr	r2, [pc, #408]	; (800423c <HAL_RCC_OscConfig+0x4f4>)
 80040a4:	f023 0301 	bic.w	r3, r3, #1
 80040a8:	6213      	str	r3, [r2, #32]
 80040aa:	4b64      	ldr	r3, [pc, #400]	; (800423c <HAL_RCC_OscConfig+0x4f4>)
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	4a63      	ldr	r2, [pc, #396]	; (800423c <HAL_RCC_OscConfig+0x4f4>)
 80040b0:	f023 0304 	bic.w	r3, r3, #4
 80040b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d015      	beq.n	80040ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040be:	f7fe f91d 	bl	80022fc <HAL_GetTick>
 80040c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c4:	e00a      	b.n	80040dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c6:	f7fe f919 	bl	80022fc <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e0ab      	b.n	8004234 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040dc:	4b57      	ldr	r3, [pc, #348]	; (800423c <HAL_RCC_OscConfig+0x4f4>)
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0ee      	beq.n	80040c6 <HAL_RCC_OscConfig+0x37e>
 80040e8:	e014      	b.n	8004114 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ea:	f7fe f907 	bl	80022fc <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040f0:	e00a      	b.n	8004108 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040f2:	f7fe f903 	bl	80022fc <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004100:	4293      	cmp	r3, r2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e095      	b.n	8004234 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004108:	4b4c      	ldr	r3, [pc, #304]	; (800423c <HAL_RCC_OscConfig+0x4f4>)
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1ee      	bne.n	80040f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004114:	7dfb      	ldrb	r3, [r7, #23]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d105      	bne.n	8004126 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800411a:	4b48      	ldr	r3, [pc, #288]	; (800423c <HAL_RCC_OscConfig+0x4f4>)
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	4a47      	ldr	r2, [pc, #284]	; (800423c <HAL_RCC_OscConfig+0x4f4>)
 8004120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004124:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	2b00      	cmp	r3, #0
 800412c:	f000 8081 	beq.w	8004232 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004130:	4b42      	ldr	r3, [pc, #264]	; (800423c <HAL_RCC_OscConfig+0x4f4>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f003 030c 	and.w	r3, r3, #12
 8004138:	2b08      	cmp	r3, #8
 800413a:	d061      	beq.n	8004200 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	69db      	ldr	r3, [r3, #28]
 8004140:	2b02      	cmp	r3, #2
 8004142:	d146      	bne.n	80041d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004144:	4b3f      	ldr	r3, [pc, #252]	; (8004244 <HAL_RCC_OscConfig+0x4fc>)
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414a:	f7fe f8d7 	bl	80022fc <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004152:	f7fe f8d3 	bl	80022fc <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e067      	b.n	8004234 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004164:	4b35      	ldr	r3, [pc, #212]	; (800423c <HAL_RCC_OscConfig+0x4f4>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1f0      	bne.n	8004152 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004178:	d108      	bne.n	800418c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800417a:	4b30      	ldr	r3, [pc, #192]	; (800423c <HAL_RCC_OscConfig+0x4f4>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	492d      	ldr	r1, [pc, #180]	; (800423c <HAL_RCC_OscConfig+0x4f4>)
 8004188:	4313      	orrs	r3, r2
 800418a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800418c:	4b2b      	ldr	r3, [pc, #172]	; (800423c <HAL_RCC_OscConfig+0x4f4>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a19      	ldr	r1, [r3, #32]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419c:	430b      	orrs	r3, r1
 800419e:	4927      	ldr	r1, [pc, #156]	; (800423c <HAL_RCC_OscConfig+0x4f4>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041a4:	4b27      	ldr	r3, [pc, #156]	; (8004244 <HAL_RCC_OscConfig+0x4fc>)
 80041a6:	2201      	movs	r2, #1
 80041a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041aa:	f7fe f8a7 	bl	80022fc <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041b0:	e008      	b.n	80041c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041b2:	f7fe f8a3 	bl	80022fc <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e037      	b.n	8004234 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041c4:	4b1d      	ldr	r3, [pc, #116]	; (800423c <HAL_RCC_OscConfig+0x4f4>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0f0      	beq.n	80041b2 <HAL_RCC_OscConfig+0x46a>
 80041d0:	e02f      	b.n	8004232 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041d2:	4b1c      	ldr	r3, [pc, #112]	; (8004244 <HAL_RCC_OscConfig+0x4fc>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d8:	f7fe f890 	bl	80022fc <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e0:	f7fe f88c 	bl	80022fc <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e020      	b.n	8004234 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041f2:	4b12      	ldr	r3, [pc, #72]	; (800423c <HAL_RCC_OscConfig+0x4f4>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1f0      	bne.n	80041e0 <HAL_RCC_OscConfig+0x498>
 80041fe:	e018      	b.n	8004232 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	69db      	ldr	r3, [r3, #28]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d101      	bne.n	800420c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e013      	b.n	8004234 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800420c:	4b0b      	ldr	r3, [pc, #44]	; (800423c <HAL_RCC_OscConfig+0x4f4>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	429a      	cmp	r2, r3
 800421e:	d106      	bne.n	800422e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800422a:	429a      	cmp	r2, r3
 800422c:	d001      	beq.n	8004232 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e000      	b.n	8004234 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3718      	adds	r7, #24
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	40021000 	.word	0x40021000
 8004240:	40007000 	.word	0x40007000
 8004244:	42420060 	.word	0x42420060

08004248 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d101      	bne.n	800425c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e0d0      	b.n	80043fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800425c:	4b6a      	ldr	r3, [pc, #424]	; (8004408 <HAL_RCC_ClockConfig+0x1c0>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	429a      	cmp	r2, r3
 8004268:	d910      	bls.n	800428c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800426a:	4b67      	ldr	r3, [pc, #412]	; (8004408 <HAL_RCC_ClockConfig+0x1c0>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f023 0207 	bic.w	r2, r3, #7
 8004272:	4965      	ldr	r1, [pc, #404]	; (8004408 <HAL_RCC_ClockConfig+0x1c0>)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	4313      	orrs	r3, r2
 8004278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800427a:	4b63      	ldr	r3, [pc, #396]	; (8004408 <HAL_RCC_ClockConfig+0x1c0>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	429a      	cmp	r2, r3
 8004286:	d001      	beq.n	800428c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e0b8      	b.n	80043fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d020      	beq.n	80042da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0304 	and.w	r3, r3, #4
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d005      	beq.n	80042b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042a4:	4b59      	ldr	r3, [pc, #356]	; (800440c <HAL_RCC_ClockConfig+0x1c4>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	4a58      	ldr	r2, [pc, #352]	; (800440c <HAL_RCC_ClockConfig+0x1c4>)
 80042aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80042ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0308 	and.w	r3, r3, #8
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d005      	beq.n	80042c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042bc:	4b53      	ldr	r3, [pc, #332]	; (800440c <HAL_RCC_ClockConfig+0x1c4>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	4a52      	ldr	r2, [pc, #328]	; (800440c <HAL_RCC_ClockConfig+0x1c4>)
 80042c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80042c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042c8:	4b50      	ldr	r3, [pc, #320]	; (800440c <HAL_RCC_ClockConfig+0x1c4>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	494d      	ldr	r1, [pc, #308]	; (800440c <HAL_RCC_ClockConfig+0x1c4>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d040      	beq.n	8004368 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d107      	bne.n	80042fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ee:	4b47      	ldr	r3, [pc, #284]	; (800440c <HAL_RCC_ClockConfig+0x1c4>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d115      	bne.n	8004326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e07f      	b.n	80043fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	2b02      	cmp	r3, #2
 8004304:	d107      	bne.n	8004316 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004306:	4b41      	ldr	r3, [pc, #260]	; (800440c <HAL_RCC_ClockConfig+0x1c4>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d109      	bne.n	8004326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e073      	b.n	80043fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004316:	4b3d      	ldr	r3, [pc, #244]	; (800440c <HAL_RCC_ClockConfig+0x1c4>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e06b      	b.n	80043fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004326:	4b39      	ldr	r3, [pc, #228]	; (800440c <HAL_RCC_ClockConfig+0x1c4>)
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f023 0203 	bic.w	r2, r3, #3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	4936      	ldr	r1, [pc, #216]	; (800440c <HAL_RCC_ClockConfig+0x1c4>)
 8004334:	4313      	orrs	r3, r2
 8004336:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004338:	f7fd ffe0 	bl	80022fc <HAL_GetTick>
 800433c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800433e:	e00a      	b.n	8004356 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004340:	f7fd ffdc 	bl	80022fc <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	f241 3288 	movw	r2, #5000	; 0x1388
 800434e:	4293      	cmp	r3, r2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e053      	b.n	80043fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004356:	4b2d      	ldr	r3, [pc, #180]	; (800440c <HAL_RCC_ClockConfig+0x1c4>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f003 020c 	and.w	r2, r3, #12
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	429a      	cmp	r2, r3
 8004366:	d1eb      	bne.n	8004340 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004368:	4b27      	ldr	r3, [pc, #156]	; (8004408 <HAL_RCC_ClockConfig+0x1c0>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	429a      	cmp	r2, r3
 8004374:	d210      	bcs.n	8004398 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004376:	4b24      	ldr	r3, [pc, #144]	; (8004408 <HAL_RCC_ClockConfig+0x1c0>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f023 0207 	bic.w	r2, r3, #7
 800437e:	4922      	ldr	r1, [pc, #136]	; (8004408 <HAL_RCC_ClockConfig+0x1c0>)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	4313      	orrs	r3, r2
 8004384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004386:	4b20      	ldr	r3, [pc, #128]	; (8004408 <HAL_RCC_ClockConfig+0x1c0>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0307 	and.w	r3, r3, #7
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	429a      	cmp	r2, r3
 8004392:	d001      	beq.n	8004398 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e032      	b.n	80043fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d008      	beq.n	80043b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043a4:	4b19      	ldr	r3, [pc, #100]	; (800440c <HAL_RCC_ClockConfig+0x1c4>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	4916      	ldr	r1, [pc, #88]	; (800440c <HAL_RCC_ClockConfig+0x1c4>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d009      	beq.n	80043d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043c2:	4b12      	ldr	r3, [pc, #72]	; (800440c <HAL_RCC_ClockConfig+0x1c4>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	490e      	ldr	r1, [pc, #56]	; (800440c <HAL_RCC_ClockConfig+0x1c4>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043d6:	f000 f821 	bl	800441c <HAL_RCC_GetSysClockFreq>
 80043da:	4601      	mov	r1, r0
 80043dc:	4b0b      	ldr	r3, [pc, #44]	; (800440c <HAL_RCC_ClockConfig+0x1c4>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	091b      	lsrs	r3, r3, #4
 80043e2:	f003 030f 	and.w	r3, r3, #15
 80043e6:	4a0a      	ldr	r2, [pc, #40]	; (8004410 <HAL_RCC_ClockConfig+0x1c8>)
 80043e8:	5cd3      	ldrb	r3, [r2, r3]
 80043ea:	fa21 f303 	lsr.w	r3, r1, r3
 80043ee:	4a09      	ldr	r2, [pc, #36]	; (8004414 <HAL_RCC_ClockConfig+0x1cc>)
 80043f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043f2:	4b09      	ldr	r3, [pc, #36]	; (8004418 <HAL_RCC_ClockConfig+0x1d0>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fd fe42 	bl	8002080 <HAL_InitTick>

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40022000 	.word	0x40022000
 800440c:	40021000 	.word	0x40021000
 8004410:	080091fc 	.word	0x080091fc
 8004414:	20000018 	.word	0x20000018
 8004418:	2000001c 	.word	0x2000001c

0800441c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800441c:	b490      	push	{r4, r7}
 800441e:	b08a      	sub	sp, #40	; 0x28
 8004420:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004422:	4b2a      	ldr	r3, [pc, #168]	; (80044cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004424:	1d3c      	adds	r4, r7, #4
 8004426:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004428:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800442c:	4b28      	ldr	r3, [pc, #160]	; (80044d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800442e:	881b      	ldrh	r3, [r3, #0]
 8004430:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004432:	2300      	movs	r3, #0
 8004434:	61fb      	str	r3, [r7, #28]
 8004436:	2300      	movs	r3, #0
 8004438:	61bb      	str	r3, [r7, #24]
 800443a:	2300      	movs	r3, #0
 800443c:	627b      	str	r3, [r7, #36]	; 0x24
 800443e:	2300      	movs	r3, #0
 8004440:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004446:	4b23      	ldr	r3, [pc, #140]	; (80044d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	f003 030c 	and.w	r3, r3, #12
 8004452:	2b04      	cmp	r3, #4
 8004454:	d002      	beq.n	800445c <HAL_RCC_GetSysClockFreq+0x40>
 8004456:	2b08      	cmp	r3, #8
 8004458:	d003      	beq.n	8004462 <HAL_RCC_GetSysClockFreq+0x46>
 800445a:	e02d      	b.n	80044b8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800445c:	4b1e      	ldr	r3, [pc, #120]	; (80044d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800445e:	623b      	str	r3, [r7, #32]
      break;
 8004460:	e02d      	b.n	80044be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	0c9b      	lsrs	r3, r3, #18
 8004466:	f003 030f 	and.w	r3, r3, #15
 800446a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800446e:	4413      	add	r3, r2
 8004470:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004474:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d013      	beq.n	80044a8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004480:	4b14      	ldr	r3, [pc, #80]	; (80044d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	0c5b      	lsrs	r3, r3, #17
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800448e:	4413      	add	r3, r2
 8004490:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004494:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	4a0f      	ldr	r2, [pc, #60]	; (80044d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800449a:	fb02 f203 	mul.w	r2, r2, r3
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a4:	627b      	str	r3, [r7, #36]	; 0x24
 80044a6:	e004      	b.n	80044b2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	4a0c      	ldr	r2, [pc, #48]	; (80044dc <HAL_RCC_GetSysClockFreq+0xc0>)
 80044ac:	fb02 f303 	mul.w	r3, r2, r3
 80044b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	623b      	str	r3, [r7, #32]
      break;
 80044b6:	e002      	b.n	80044be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044b8:	4b07      	ldr	r3, [pc, #28]	; (80044d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80044ba:	623b      	str	r3, [r7, #32]
      break;
 80044bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044be:	6a3b      	ldr	r3, [r7, #32]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3728      	adds	r7, #40	; 0x28
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bc90      	pop	{r4, r7}
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	080091c8 	.word	0x080091c8
 80044d0:	080091d8 	.word	0x080091d8
 80044d4:	40021000 	.word	0x40021000
 80044d8:	007a1200 	.word	0x007a1200
 80044dc:	003d0900 	.word	0x003d0900

080044e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044e4:	4b02      	ldr	r3, [pc, #8]	; (80044f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80044e6:	681b      	ldr	r3, [r3, #0]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bc80      	pop	{r7}
 80044ee:	4770      	bx	lr
 80044f0:	20000018 	.word	0x20000018

080044f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044f8:	f7ff fff2 	bl	80044e0 <HAL_RCC_GetHCLKFreq>
 80044fc:	4601      	mov	r1, r0
 80044fe:	4b05      	ldr	r3, [pc, #20]	; (8004514 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	0a1b      	lsrs	r3, r3, #8
 8004504:	f003 0307 	and.w	r3, r3, #7
 8004508:	4a03      	ldr	r2, [pc, #12]	; (8004518 <HAL_RCC_GetPCLK1Freq+0x24>)
 800450a:	5cd3      	ldrb	r3, [r2, r3]
 800450c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004510:	4618      	mov	r0, r3
 8004512:	bd80      	pop	{r7, pc}
 8004514:	40021000 	.word	0x40021000
 8004518:	0800920c 	.word	0x0800920c

0800451c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004520:	f7ff ffde 	bl	80044e0 <HAL_RCC_GetHCLKFreq>
 8004524:	4601      	mov	r1, r0
 8004526:	4b05      	ldr	r3, [pc, #20]	; (800453c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	0adb      	lsrs	r3, r3, #11
 800452c:	f003 0307 	and.w	r3, r3, #7
 8004530:	4a03      	ldr	r2, [pc, #12]	; (8004540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004532:	5cd3      	ldrb	r3, [r2, r3]
 8004534:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004538:	4618      	mov	r0, r3
 800453a:	bd80      	pop	{r7, pc}
 800453c:	40021000 	.word	0x40021000
 8004540:	0800920c 	.word	0x0800920c

08004544 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	220f      	movs	r2, #15
 8004552:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004554:	4b11      	ldr	r3, [pc, #68]	; (800459c <HAL_RCC_GetClockConfig+0x58>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f003 0203 	and.w	r2, r3, #3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004560:	4b0e      	ldr	r3, [pc, #56]	; (800459c <HAL_RCC_GetClockConfig+0x58>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800456c:	4b0b      	ldr	r3, [pc, #44]	; (800459c <HAL_RCC_GetClockConfig+0x58>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004578:	4b08      	ldr	r3, [pc, #32]	; (800459c <HAL_RCC_GetClockConfig+0x58>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	08db      	lsrs	r3, r3, #3
 800457e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004586:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <HAL_RCC_GetClockConfig+0x5c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0207 	and.w	r2, r3, #7
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	bc80      	pop	{r7}
 800459a:	4770      	bx	lr
 800459c:	40021000 	.word	0x40021000
 80045a0:	40022000 	.word	0x40022000

080045a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80045ac:	4b0a      	ldr	r3, [pc, #40]	; (80045d8 <RCC_Delay+0x34>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a0a      	ldr	r2, [pc, #40]	; (80045dc <RCC_Delay+0x38>)
 80045b2:	fba2 2303 	umull	r2, r3, r2, r3
 80045b6:	0a5b      	lsrs	r3, r3, #9
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	fb02 f303 	mul.w	r3, r2, r3
 80045be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80045c0:	bf00      	nop
  }
  while (Delay --);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	1e5a      	subs	r2, r3, #1
 80045c6:	60fa      	str	r2, [r7, #12]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1f9      	bne.n	80045c0 <RCC_Delay+0x1c>
}
 80045cc:	bf00      	nop
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bc80      	pop	{r7}
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	20000018 	.word	0x20000018
 80045dc:	10624dd3 	.word	0x10624dd3

080045e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	613b      	str	r3, [r7, #16]
 80045ec:	2300      	movs	r3, #0
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d07d      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80045fc:	2300      	movs	r3, #0
 80045fe:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004600:	4b4f      	ldr	r3, [pc, #316]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10d      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800460c:	4b4c      	ldr	r3, [pc, #304]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	4a4b      	ldr	r2, [pc, #300]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004616:	61d3      	str	r3, [r2, #28]
 8004618:	4b49      	ldr	r3, [pc, #292]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004620:	60bb      	str	r3, [r7, #8]
 8004622:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004624:	2301      	movs	r3, #1
 8004626:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004628:	4b46      	ldr	r3, [pc, #280]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004630:	2b00      	cmp	r3, #0
 8004632:	d118      	bne.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004634:	4b43      	ldr	r3, [pc, #268]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a42      	ldr	r2, [pc, #264]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800463a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800463e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004640:	f7fd fe5c 	bl	80022fc <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004646:	e008      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004648:	f7fd fe58 	bl	80022fc <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b64      	cmp	r3, #100	; 0x64
 8004654:	d901      	bls.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e06d      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800465a:	4b3a      	ldr	r3, [pc, #232]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004662:	2b00      	cmp	r3, #0
 8004664:	d0f0      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004666:	4b36      	ldr	r3, [pc, #216]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800466e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d02e      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	429a      	cmp	r2, r3
 8004682:	d027      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004684:	4b2e      	ldr	r3, [pc, #184]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800468c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800468e:	4b2e      	ldr	r3, [pc, #184]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004690:	2201      	movs	r2, #1
 8004692:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004694:	4b2c      	ldr	r3, [pc, #176]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800469a:	4a29      	ldr	r2, [pc, #164]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d014      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046aa:	f7fd fe27 	bl	80022fc <HAL_GetTick>
 80046ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b0:	e00a      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046b2:	f7fd fe23 	bl	80022fc <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d901      	bls.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e036      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046c8:	4b1d      	ldr	r3, [pc, #116]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d0ee      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046d4:	4b1a      	ldr	r3, [pc, #104]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	4917      	ldr	r1, [pc, #92]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046e6:	7dfb      	ldrb	r3, [r7, #23]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d105      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ec:	4b14      	ldr	r3, [pc, #80]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ee:	69db      	ldr	r3, [r3, #28]
 80046f0:	4a13      	ldr	r2, [pc, #76]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d008      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004704:	4b0e      	ldr	r3, [pc, #56]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	490b      	ldr	r1, [pc, #44]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004712:	4313      	orrs	r3, r2
 8004714:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0310 	and.w	r3, r3, #16
 800471e:	2b00      	cmp	r3, #0
 8004720:	d008      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004722:	4b07      	ldr	r3, [pc, #28]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	4904      	ldr	r1, [pc, #16]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004730:	4313      	orrs	r3, r2
 8004732:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3718      	adds	r7, #24
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	40021000 	.word	0x40021000
 8004744:	40007000 	.word	0x40007000
 8004748:	42420440 	.word	0x42420440

0800474c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e053      	b.n	8004806 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d106      	bne.n	800477e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f7fd fb83 	bl	8001e84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2202      	movs	r2, #2
 8004782:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004794:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	431a      	orrs	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	431a      	orrs	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ba:	431a      	orrs	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	69db      	ldr	r3, [r3, #28]
 80047c0:	431a      	orrs	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	ea42 0103 	orr.w	r1, r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	0c1a      	lsrs	r2, r3, #16
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f002 0204 	and.w	r2, r2, #4
 80047e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	69da      	ldr	r2, [r3, #28]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b088      	sub	sp, #32
 8004812:	af02      	add	r7, sp, #8
 8004814:	60f8      	str	r0, [r7, #12]
 8004816:	60b9      	str	r1, [r7, #8]
 8004818:	603b      	str	r3, [r7, #0]
 800481a:	4613      	mov	r3, r2
 800481c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800481e:	2300      	movs	r3, #0
 8004820:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800482a:	d112      	bne.n	8004852 <HAL_SPI_Receive+0x44>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10e      	bne.n	8004852 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2204      	movs	r2, #4
 8004838:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800483c:	88fa      	ldrh	r2, [r7, #6]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	4613      	mov	r3, r2
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	68b9      	ldr	r1, [r7, #8]
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 f8e9 	bl	8004a20 <HAL_SPI_TransmitReceive>
 800484e:	4603      	mov	r3, r0
 8004850:	e0e2      	b.n	8004a18 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004858:	2b01      	cmp	r3, #1
 800485a:	d101      	bne.n	8004860 <HAL_SPI_Receive+0x52>
 800485c:	2302      	movs	r3, #2
 800485e:	e0db      	b.n	8004a18 <HAL_SPI_Receive+0x20a>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004868:	f7fd fd48 	bl	80022fc <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b01      	cmp	r3, #1
 8004878:	d002      	beq.n	8004880 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800487a:	2302      	movs	r3, #2
 800487c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800487e:	e0c2      	b.n	8004a06 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d002      	beq.n	800488c <HAL_SPI_Receive+0x7e>
 8004886:	88fb      	ldrh	r3, [r7, #6]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d102      	bne.n	8004892 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004890:	e0b9      	b.n	8004a06 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2204      	movs	r2, #4
 8004896:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	88fa      	ldrh	r2, [r7, #6]
 80048aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	88fa      	ldrh	r2, [r7, #6]
 80048b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048d8:	d107      	bne.n	80048ea <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80048e8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f4:	2b40      	cmp	r3, #64	; 0x40
 80048f6:	d007      	beq.n	8004908 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004906:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d162      	bne.n	80049d6 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004910:	e02e      	b.n	8004970 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b01      	cmp	r3, #1
 800491e:	d115      	bne.n	800494c <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f103 020c 	add.w	r2, r3, #12
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492c:	7812      	ldrb	r2, [r2, #0]
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004940:	b29b      	uxth	r3, r3
 8004942:	3b01      	subs	r3, #1
 8004944:	b29a      	uxth	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	87da      	strh	r2, [r3, #62]	; 0x3e
 800494a:	e011      	b.n	8004970 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800494c:	f7fd fcd6 	bl	80022fc <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	429a      	cmp	r2, r3
 800495a:	d803      	bhi.n	8004964 <HAL_SPI_Receive+0x156>
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004962:	d102      	bne.n	800496a <HAL_SPI_Receive+0x15c>
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d102      	bne.n	8004970 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800496e:	e04a      	b.n	8004a06 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004974:	b29b      	uxth	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1cb      	bne.n	8004912 <HAL_SPI_Receive+0x104>
 800497a:	e031      	b.n	80049e0 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b01      	cmp	r3, #1
 8004988:	d113      	bne.n	80049b2 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68da      	ldr	r2, [r3, #12]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004994:	b292      	uxth	r2, r2
 8004996:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499c:	1c9a      	adds	r2, r3, #2
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	3b01      	subs	r3, #1
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049b0:	e011      	b.n	80049d6 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049b2:	f7fd fca3 	bl	80022fc <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d803      	bhi.n	80049ca <HAL_SPI_Receive+0x1bc>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c8:	d102      	bne.n	80049d0 <HAL_SPI_Receive+0x1c2>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d102      	bne.n	80049d6 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80049d4:	e017      	b.n	8004a06 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049da:	b29b      	uxth	r3, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1cd      	bne.n	800497c <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	6839      	ldr	r1, [r7, #0]
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f000 fa27 	bl	8004e38 <SPI_EndRxTransaction>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d002      	beq.n	80049f6 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2220      	movs	r2, #32
 80049f4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	75fb      	strb	r3, [r7, #23]
 8004a02:	e000      	b.n	8004a06 <HAL_SPI_Receive+0x1f8>
  }

error :
 8004a04:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b08c      	sub	sp, #48	; 0x30
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
 8004a2c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a32:	2300      	movs	r3, #0
 8004a34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d101      	bne.n	8004a46 <HAL_SPI_TransmitReceive+0x26>
 8004a42:	2302      	movs	r3, #2
 8004a44:	e18a      	b.n	8004d5c <HAL_SPI_TransmitReceive+0x33c>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a4e:	f7fd fc55 	bl	80022fc <HAL_GetTick>
 8004a52:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004a64:	887b      	ldrh	r3, [r7, #2]
 8004a66:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d00f      	beq.n	8004a90 <HAL_SPI_TransmitReceive+0x70>
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a76:	d107      	bne.n	8004a88 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d103      	bne.n	8004a88 <HAL_SPI_TransmitReceive+0x68>
 8004a80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d003      	beq.n	8004a90 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004a88:	2302      	movs	r3, #2
 8004a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a8e:	e15b      	b.n	8004d48 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d005      	beq.n	8004aa2 <HAL_SPI_TransmitReceive+0x82>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d002      	beq.n	8004aa2 <HAL_SPI_TransmitReceive+0x82>
 8004a9c:	887b      	ldrh	r3, [r7, #2]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d103      	bne.n	8004aaa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004aa8:	e14e      	b.n	8004d48 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d003      	beq.n	8004abe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2205      	movs	r2, #5
 8004aba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	887a      	ldrh	r2, [r7, #2]
 8004ace:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	887a      	ldrh	r2, [r7, #2]
 8004ad4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	887a      	ldrh	r2, [r7, #2]
 8004ae0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	887a      	ldrh	r2, [r7, #2]
 8004ae6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afe:	2b40      	cmp	r3, #64	; 0x40
 8004b00:	d007      	beq.n	8004b12 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b1a:	d178      	bne.n	8004c0e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d002      	beq.n	8004b2a <HAL_SPI_TransmitReceive+0x10a>
 8004b24:	8b7b      	ldrh	r3, [r7, #26]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d166      	bne.n	8004bf8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2e:	881a      	ldrh	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3a:	1c9a      	adds	r2, r3, #2
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	3b01      	subs	r3, #1
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b4e:	e053      	b.n	8004bf8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d11b      	bne.n	8004b96 <HAL_SPI_TransmitReceive+0x176>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d016      	beq.n	8004b96 <HAL_SPI_TransmitReceive+0x176>
 8004b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d113      	bne.n	8004b96 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b72:	881a      	ldrh	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7e:	1c9a      	adds	r2, r3, #2
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b92:	2300      	movs	r3, #0
 8004b94:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d119      	bne.n	8004bd8 <HAL_SPI_TransmitReceive+0x1b8>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d014      	beq.n	8004bd8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68da      	ldr	r2, [r3, #12]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb8:	b292      	uxth	r2, r2
 8004bba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc0:	1c9a      	adds	r2, r3, #2
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004bd8:	f7fd fb90 	bl	80022fc <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d807      	bhi.n	8004bf8 <HAL_SPI_TransmitReceive+0x1d8>
 8004be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bee:	d003      	beq.n	8004bf8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004bf6:	e0a7      	b.n	8004d48 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1a6      	bne.n	8004b50 <HAL_SPI_TransmitReceive+0x130>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1a1      	bne.n	8004b50 <HAL_SPI_TransmitReceive+0x130>
 8004c0c:	e07c      	b.n	8004d08 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d002      	beq.n	8004c1c <HAL_SPI_TransmitReceive+0x1fc>
 8004c16:	8b7b      	ldrh	r3, [r7, #26]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d16b      	bne.n	8004cf4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	330c      	adds	r3, #12
 8004c26:	7812      	ldrb	r2, [r2, #0]
 8004c28:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2e:	1c5a      	adds	r2, r3, #1
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c42:	e057      	b.n	8004cf4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d11c      	bne.n	8004c8c <HAL_SPI_TransmitReceive+0x26c>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d017      	beq.n	8004c8c <HAL_SPI_TransmitReceive+0x26c>
 8004c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d114      	bne.n	8004c8c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	330c      	adds	r3, #12
 8004c6c:	7812      	ldrb	r2, [r2, #0]
 8004c6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c74:	1c5a      	adds	r2, r3, #1
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	3b01      	subs	r3, #1
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d119      	bne.n	8004cce <HAL_SPI_TransmitReceive+0x2ae>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d014      	beq.n	8004cce <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68da      	ldr	r2, [r3, #12]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cae:	b2d2      	uxtb	r2, r2
 8004cb0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb6:	1c5a      	adds	r2, r3, #1
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004cce:	f7fd fb15 	bl	80022fc <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d803      	bhi.n	8004ce6 <HAL_SPI_TransmitReceive+0x2c6>
 8004cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce4:	d102      	bne.n	8004cec <HAL_SPI_TransmitReceive+0x2cc>
 8004ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d103      	bne.n	8004cf4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004cf2:	e029      	b.n	8004d48 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1a2      	bne.n	8004c44 <HAL_SPI_TransmitReceive+0x224>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d19d      	bne.n	8004c44 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f000 f8e5 	bl	8004edc <SPI_EndRxTxTransaction>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d006      	beq.n	8004d26 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2220      	movs	r2, #32
 8004d22:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004d24:	e010      	b.n	8004d48 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10b      	bne.n	8004d46 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d2e:	2300      	movs	r3, #0
 8004d30:	617b      	str	r3, [r7, #20]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	617b      	str	r3, [r7, #20]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	617b      	str	r3, [r7, #20]
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	e000      	b.n	8004d48 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004d46:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d58:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3730      	adds	r7, #48	; 0x30
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	603b      	str	r3, [r7, #0]
 8004d70:	4613      	mov	r3, r2
 8004d72:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d74:	e04c      	b.n	8004e10 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7c:	d048      	beq.n	8004e10 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004d7e:	f7fd fabd 	bl	80022fc <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d902      	bls.n	8004d94 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d13d      	bne.n	8004e10 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004da2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dac:	d111      	bne.n	8004dd2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004db6:	d004      	beq.n	8004dc2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dc0:	d107      	bne.n	8004dd2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dd0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dda:	d10f      	bne.n	8004dfc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dea:	601a      	str	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dfa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e00f      	b.n	8004e30 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689a      	ldr	r2, [r3, #8]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	4013      	ands	r3, r2
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	bf0c      	ite	eq
 8004e20:	2301      	moveq	r3, #1
 8004e22:	2300      	movne	r3, #0
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	461a      	mov	r2, r3
 8004e28:	79fb      	ldrb	r3, [r7, #7]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d1a3      	bne.n	8004d76 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af02      	add	r7, sp, #8
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e4c:	d111      	bne.n	8004e72 <SPI_EndRxTransaction+0x3a>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e56:	d004      	beq.n	8004e62 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e60:	d107      	bne.n	8004e72 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e70:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e7a:	d117      	bne.n	8004eac <SPI_EndRxTransaction+0x74>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e84:	d112      	bne.n	8004eac <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	9300      	str	r3, [sp, #0]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	2101      	movs	r1, #1
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f7ff ff67 	bl	8004d64 <SPI_WaitFlagStateUntilTimeout>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d01a      	beq.n	8004ed2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea0:	f043 0220 	orr.w	r2, r3, #32
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e013      	b.n	8004ed4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	2180      	movs	r1, #128	; 0x80
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f7ff ff54 	bl	8004d64 <SPI_WaitFlagStateUntilTimeout>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d007      	beq.n	8004ed2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec6:	f043 0220 	orr.w	r2, r3, #32
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e000      	b.n	8004ed4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af02      	add	r7, sp, #8
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	2180      	movs	r1, #128	; 0x80
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f7ff ff36 	bl	8004d64 <SPI_WaitFlagStateUntilTimeout>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d007      	beq.n	8004f0e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f02:	f043 0220 	orr.w	r2, r3, #32
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e000      	b.n	8004f10 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e01d      	b.n	8004f66 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d106      	bne.n	8004f44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f815 	bl	8004f6e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	3304      	adds	r3, #4
 8004f54:	4619      	mov	r1, r3
 8004f56:	4610      	mov	r0, r2
 8004f58:	f000 f962 	bl	8005220 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b083      	sub	sp, #12
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004f76:	bf00      	nop
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bc80      	pop	{r7}
 8004f7e:	4770      	bx	lr

08004f80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68da      	ldr	r2, [r3, #12]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f042 0201 	orr.w	r2, r2, #1
 8004f96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f003 0307 	and.w	r3, r3, #7
 8004fa2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2b06      	cmp	r3, #6
 8004fa8:	d007      	beq.n	8004fba <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f042 0201 	orr.w	r2, r2, #1
 8004fb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bc80      	pop	{r7}
 8004fc4:	4770      	bx	lr

08004fc6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b082      	sub	sp, #8
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d122      	bne.n	8005022 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d11b      	bne.n	8005022 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f06f 0202 	mvn.w	r2, #2
 8004ff2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	f003 0303 	and.w	r3, r3, #3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d003      	beq.n	8005010 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 f8ed 	bl	80051e8 <HAL_TIM_IC_CaptureCallback>
 800500e:	e005      	b.n	800501c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f8e0 	bl	80051d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f8ef 	bl	80051fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b04      	cmp	r3, #4
 800502e:	d122      	bne.n	8005076 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	f003 0304 	and.w	r3, r3, #4
 800503a:	2b04      	cmp	r3, #4
 800503c:	d11b      	bne.n	8005076 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f06f 0204 	mvn.w	r2, #4
 8005046:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2202      	movs	r2, #2
 800504c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005058:	2b00      	cmp	r3, #0
 800505a:	d003      	beq.n	8005064 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 f8c3 	bl	80051e8 <HAL_TIM_IC_CaptureCallback>
 8005062:	e005      	b.n	8005070 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f8b6 	bl	80051d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f8c5 	bl	80051fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	f003 0308 	and.w	r3, r3, #8
 8005080:	2b08      	cmp	r3, #8
 8005082:	d122      	bne.n	80050ca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	2b08      	cmp	r3, #8
 8005090:	d11b      	bne.n	80050ca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f06f 0208 	mvn.w	r2, #8
 800509a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2204      	movs	r2, #4
 80050a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	69db      	ldr	r3, [r3, #28]
 80050a8:	f003 0303 	and.w	r3, r3, #3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d003      	beq.n	80050b8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 f899 	bl	80051e8 <HAL_TIM_IC_CaptureCallback>
 80050b6:	e005      	b.n	80050c4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 f88c 	bl	80051d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f89b 	bl	80051fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	f003 0310 	and.w	r3, r3, #16
 80050d4:	2b10      	cmp	r3, #16
 80050d6:	d122      	bne.n	800511e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	f003 0310 	and.w	r3, r3, #16
 80050e2:	2b10      	cmp	r3, #16
 80050e4:	d11b      	bne.n	800511e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f06f 0210 	mvn.w	r2, #16
 80050ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2208      	movs	r2, #8
 80050f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	69db      	ldr	r3, [r3, #28]
 80050fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005100:	2b00      	cmp	r3, #0
 8005102:	d003      	beq.n	800510c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 f86f 	bl	80051e8 <HAL_TIM_IC_CaptureCallback>
 800510a:	e005      	b.n	8005118 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f862 	bl	80051d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f871 	bl	80051fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b01      	cmp	r3, #1
 800512a:	d10e      	bne.n	800514a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b01      	cmp	r3, #1
 8005138:	d107      	bne.n	800514a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f06f 0201 	mvn.w	r2, #1
 8005142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f7fc fe15 	bl	8001d74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005154:	2b80      	cmp	r3, #128	; 0x80
 8005156:	d10e      	bne.n	8005176 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005162:	2b80      	cmp	r3, #128	; 0x80
 8005164:	d107      	bne.n	8005176 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800516e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f8c0 	bl	80052f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005180:	2b40      	cmp	r3, #64	; 0x40
 8005182:	d10e      	bne.n	80051a2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800518e:	2b40      	cmp	r3, #64	; 0x40
 8005190:	d107      	bne.n	80051a2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800519a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 f835 	bl	800520c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	f003 0320 	and.w	r3, r3, #32
 80051ac:	2b20      	cmp	r3, #32
 80051ae:	d10e      	bne.n	80051ce <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f003 0320 	and.w	r3, r3, #32
 80051ba:	2b20      	cmp	r3, #32
 80051bc:	d107      	bne.n	80051ce <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f06f 0220 	mvn.w	r2, #32
 80051c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f88b 	bl	80052e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051ce:	bf00      	nop
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b083      	sub	sp, #12
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bc80      	pop	{r7}
 80051e6:	4770      	bx	lr

080051e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bc80      	pop	{r7}
 80051f8:	4770      	bx	lr

080051fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b083      	sub	sp, #12
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005202:	bf00      	nop
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	bc80      	pop	{r7}
 800520a:	4770      	bx	lr

0800520c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	bc80      	pop	{r7}
 800521c:	4770      	bx	lr
	...

08005220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a29      	ldr	r2, [pc, #164]	; (80052d8 <TIM_Base_SetConfig+0xb8>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d00b      	beq.n	8005250 <TIM_Base_SetConfig+0x30>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800523e:	d007      	beq.n	8005250 <TIM_Base_SetConfig+0x30>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a26      	ldr	r2, [pc, #152]	; (80052dc <TIM_Base_SetConfig+0xbc>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d003      	beq.n	8005250 <TIM_Base_SetConfig+0x30>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a25      	ldr	r2, [pc, #148]	; (80052e0 <TIM_Base_SetConfig+0xc0>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d108      	bne.n	8005262 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005256:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	4313      	orrs	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a1c      	ldr	r2, [pc, #112]	; (80052d8 <TIM_Base_SetConfig+0xb8>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d00b      	beq.n	8005282 <TIM_Base_SetConfig+0x62>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005270:	d007      	beq.n	8005282 <TIM_Base_SetConfig+0x62>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a19      	ldr	r2, [pc, #100]	; (80052dc <TIM_Base_SetConfig+0xbc>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d003      	beq.n	8005282 <TIM_Base_SetConfig+0x62>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a18      	ldr	r2, [pc, #96]	; (80052e0 <TIM_Base_SetConfig+0xc0>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d108      	bne.n	8005294 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	4313      	orrs	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	4313      	orrs	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a07      	ldr	r2, [pc, #28]	; (80052d8 <TIM_Base_SetConfig+0xb8>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d103      	bne.n	80052c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	691a      	ldr	r2, [r3, #16]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	615a      	str	r2, [r3, #20]
}
 80052ce:	bf00      	nop
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bc80      	pop	{r7}
 80052d6:	4770      	bx	lr
 80052d8:	40012c00 	.word	0x40012c00
 80052dc:	40000400 	.word	0x40000400
 80052e0:	40000800 	.word	0x40000800

080052e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bc80      	pop	{r7}
 80052f4:	4770      	bx	lr

080052f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b083      	sub	sp, #12
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052fe:	bf00      	nop
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	bc80      	pop	{r7}
 8005306:	4770      	bx	lr

08005308 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e03f      	b.n	800539a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d106      	bne.n	8005334 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7fc fdf2 	bl	8001f18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2224      	movs	r2, #36	; 0x24
 8005338:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68da      	ldr	r2, [r3, #12]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800534a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 fcb5 	bl	8005cbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	691a      	ldr	r2, [r3, #16]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005360:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	695a      	ldr	r2, [r3, #20]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005370:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68da      	ldr	r2, [r3, #12]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005380:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2220      	movs	r2, #32
 800538c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2220      	movs	r2, #32
 8005394:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b088      	sub	sp, #32
 80053a6:	af02      	add	r7, sp, #8
 80053a8:	60f8      	str	r0, [r7, #12]
 80053aa:	60b9      	str	r1, [r7, #8]
 80053ac:	603b      	str	r3, [r7, #0]
 80053ae:	4613      	mov	r3, r2
 80053b0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80053b2:	2300      	movs	r3, #0
 80053b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b20      	cmp	r3, #32
 80053c0:	f040 8083 	bne.w	80054ca <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d002      	beq.n	80053d0 <HAL_UART_Transmit+0x2e>
 80053ca:	88fb      	ldrh	r3, [r7, #6]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d101      	bne.n	80053d4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e07b      	b.n	80054cc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d101      	bne.n	80053e2 <HAL_UART_Transmit+0x40>
 80053de:	2302      	movs	r3, #2
 80053e0:	e074      	b.n	80054cc <HAL_UART_Transmit+0x12a>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2221      	movs	r2, #33	; 0x21
 80053f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80053f8:	f7fc ff80 	bl	80022fc <HAL_GetTick>
 80053fc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	88fa      	ldrh	r2, [r7, #6]
 8005402:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	88fa      	ldrh	r2, [r7, #6]
 8005408:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800540a:	e042      	b.n	8005492 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005410:	b29b      	uxth	r3, r3
 8005412:	3b01      	subs	r3, #1
 8005414:	b29a      	uxth	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005422:	d122      	bne.n	800546a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	9300      	str	r3, [sp, #0]
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	2200      	movs	r2, #0
 800542c:	2180      	movs	r1, #128	; 0x80
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f000 fac6 	bl	80059c0 <UART_WaitOnFlagUntilTimeout>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e046      	b.n	80054cc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	461a      	mov	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005450:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d103      	bne.n	8005462 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	3302      	adds	r3, #2
 800545e:	60bb      	str	r3, [r7, #8]
 8005460:	e017      	b.n	8005492 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	3301      	adds	r3, #1
 8005466:	60bb      	str	r3, [r7, #8]
 8005468:	e013      	b.n	8005492 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	2200      	movs	r2, #0
 8005472:	2180      	movs	r1, #128	; 0x80
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 faa3 	bl	80059c0 <UART_WaitOnFlagUntilTimeout>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e023      	b.n	80054cc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	1c5a      	adds	r2, r3, #1
 8005488:	60ba      	str	r2, [r7, #8]
 800548a:	781a      	ldrb	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005496:	b29b      	uxth	r3, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1b7      	bne.n	800540c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	2200      	movs	r2, #0
 80054a4:	2140      	movs	r1, #64	; 0x40
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f000 fa8a 	bl	80059c0 <UART_WaitOnFlagUntilTimeout>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e00a      	b.n	80054cc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2220      	movs	r2, #32
 80054ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	e000      	b.n	80054cc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80054ca:	2302      	movs	r3, #2
  }
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3718      	adds	r7, #24
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	4613      	mov	r3, r2
 80054e0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b20      	cmp	r3, #32
 80054ec:	d166      	bne.n	80055bc <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d002      	beq.n	80054fa <HAL_UART_Receive_DMA+0x26>
 80054f4:	88fb      	ldrh	r3, [r7, #6]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e05f      	b.n	80055be <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005504:	2b01      	cmp	r3, #1
 8005506:	d101      	bne.n	800550c <HAL_UART_Receive_DMA+0x38>
 8005508:	2302      	movs	r3, #2
 800550a:	e058      	b.n	80055be <HAL_UART_Receive_DMA+0xea>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	88fa      	ldrh	r2, [r7, #6]
 800551e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2222      	movs	r2, #34	; 0x22
 800552a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005532:	4a25      	ldr	r2, [pc, #148]	; (80055c8 <HAL_UART_Receive_DMA+0xf4>)
 8005534:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800553a:	4a24      	ldr	r2, [pc, #144]	; (80055cc <HAL_UART_Receive_DMA+0xf8>)
 800553c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005542:	4a23      	ldr	r2, [pc, #140]	; (80055d0 <HAL_UART_Receive_DMA+0xfc>)
 8005544:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800554a:	2200      	movs	r2, #0
 800554c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 800554e:	f107 0308 	add.w	r3, r7, #8
 8005552:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3304      	adds	r3, #4
 800555e:	4619      	mov	r1, r3
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	88fb      	ldrh	r3, [r7, #6]
 8005566:	f7fd f82f 	bl	80025c8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800556a:	2300      	movs	r3, #0
 800556c:	613b      	str	r3, [r7, #16]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	613b      	str	r3, [r7, #16]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	613b      	str	r3, [r7, #16]
 800557e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68da      	ldr	r2, [r3, #12]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005596:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	695a      	ldr	r2, [r3, #20]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f042 0201 	orr.w	r2, r2, #1
 80055a6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	695a      	ldr	r2, [r3, #20]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055b6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80055b8:	2300      	movs	r3, #0
 80055ba:	e000      	b.n	80055be <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80055bc:	2302      	movs	r3, #2
  }
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3718      	adds	r7, #24
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	080058a9 	.word	0x080058a9
 80055cc:	08005911 	.word	0x08005911
 80055d0:	0800592d 	.word	0x0800592d

080055d4 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80055dc:	2300      	movs	r3, #0
 80055de:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	bf14      	ite	ne
 80055ee:	2301      	movne	r3, #1
 80055f0:	2300      	moveq	r3, #0
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b21      	cmp	r3, #33	; 0x21
 8005600:	d116      	bne.n	8005630 <HAL_UART_DMAStop+0x5c>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d013      	beq.n	8005630 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	695a      	ldr	r2, [r3, #20]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005616:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561c:	2b00      	cmp	r3, #0
 800561e:	d004      	beq.n	800562a <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005624:	4618      	mov	r0, r3
 8005626:	f7fd f82e 	bl	8002686 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 fa12 	bl	8005a54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563a:	2b00      	cmp	r3, #0
 800563c:	bf14      	ite	ne
 800563e:	2301      	movne	r3, #1
 8005640:	2300      	moveq	r3, #0
 8005642:	b2db      	uxtb	r3, r3
 8005644:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b22      	cmp	r3, #34	; 0x22
 8005650:	d116      	bne.n	8005680 <HAL_UART_DMAStop+0xac>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d013      	beq.n	8005680 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	695a      	ldr	r2, [r3, #20]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005666:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800566c:	2b00      	cmp	r3, #0
 800566e:	d004      	beq.n	800567a <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005674:	4618      	mov	r0, r3
 8005676:	f7fd f806 	bl	8002686 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f9ff 	bl	8005a7e <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
	...

0800568c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b088      	sub	sp, #32
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80056ac:	2300      	movs	r3, #0
 80056ae:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80056b0:	2300      	movs	r3, #0
 80056b2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	f003 030f 	and.w	r3, r3, #15
 80056ba:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10d      	bne.n	80056de <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	f003 0320 	and.w	r3, r3, #32
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d008      	beq.n	80056de <HAL_UART_IRQHandler+0x52>
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	f003 0320 	and.w	r3, r3, #32
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d003      	beq.n	80056de <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 fa6f 	bl	8005bba <UART_Receive_IT>
      return;
 80056dc:	e0cc      	b.n	8005878 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 80ab 	beq.w	800583c <HAL_UART_IRQHandler+0x1b0>
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d105      	bne.n	80056fc <HAL_UART_IRQHandler+0x70>
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f000 80a0 	beq.w	800583c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00a      	beq.n	800571c <HAL_UART_IRQHandler+0x90>
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800570c:	2b00      	cmp	r3, #0
 800570e:	d005      	beq.n	800571c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005714:	f043 0201 	orr.w	r2, r3, #1
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	f003 0304 	and.w	r3, r3, #4
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00a      	beq.n	800573c <HAL_UART_IRQHandler+0xb0>
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b00      	cmp	r3, #0
 800572e:	d005      	beq.n	800573c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005734:	f043 0202 	orr.w	r2, r3, #2
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00a      	beq.n	800575c <HAL_UART_IRQHandler+0xd0>
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b00      	cmp	r3, #0
 800574e:	d005      	beq.n	800575c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005754:	f043 0204 	orr.w	r2, r3, #4
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	f003 0308 	and.w	r3, r3, #8
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00a      	beq.n	800577c <HAL_UART_IRQHandler+0xf0>
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	2b00      	cmp	r3, #0
 800576e:	d005      	beq.n	800577c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005774:	f043 0208 	orr.w	r2, r3, #8
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005780:	2b00      	cmp	r3, #0
 8005782:	d078      	beq.n	8005876 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	f003 0320 	and.w	r3, r3, #32
 800578a:	2b00      	cmp	r3, #0
 800578c:	d007      	beq.n	800579e <HAL_UART_IRQHandler+0x112>
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	f003 0320 	and.w	r3, r3, #32
 8005794:	2b00      	cmp	r3, #0
 8005796:	d002      	beq.n	800579e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 fa0e 	bl	8005bba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	bf14      	ite	ne
 80057ac:	2301      	movne	r3, #1
 80057ae:	2300      	moveq	r3, #0
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b8:	f003 0308 	and.w	r3, r3, #8
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d102      	bne.n	80057c6 <HAL_UART_IRQHandler+0x13a>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d031      	beq.n	800582a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 f959 	bl	8005a7e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d023      	beq.n	8005822 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	695a      	ldr	r2, [r3, #20]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057e8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d013      	beq.n	800581a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f6:	4a22      	ldr	r2, [pc, #136]	; (8005880 <HAL_UART_IRQHandler+0x1f4>)
 80057f8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057fe:	4618      	mov	r0, r3
 8005800:	f7fc ff7c 	bl	80026fc <HAL_DMA_Abort_IT>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d016      	beq.n	8005838 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800580e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005814:	4610      	mov	r0, r2
 8005816:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005818:	e00e      	b.n	8005838 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f83b 	bl	8005896 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005820:	e00a      	b.n	8005838 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f837 	bl	8005896 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005828:	e006      	b.n	8005838 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f833 	bl	8005896 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005836:	e01e      	b.n	8005876 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005838:	bf00      	nop
    return;
 800583a:	e01c      	b.n	8005876 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005842:	2b00      	cmp	r3, #0
 8005844:	d008      	beq.n	8005858 <HAL_UART_IRQHandler+0x1cc>
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800584c:	2b00      	cmp	r3, #0
 800584e:	d003      	beq.n	8005858 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 f945 	bl	8005ae0 <UART_Transmit_IT>
    return;
 8005856:	e00f      	b.n	8005878 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00a      	beq.n	8005878 <HAL_UART_IRQHandler+0x1ec>
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005868:	2b00      	cmp	r3, #0
 800586a:	d005      	beq.n	8005878 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 f98c 	bl	8005b8a <UART_EndTransmit_IT>
    return;
 8005872:	bf00      	nop
 8005874:	e000      	b.n	8005878 <HAL_UART_IRQHandler+0x1ec>
    return;
 8005876:	bf00      	nop
  }
}
 8005878:	3720      	adds	r7, #32
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	08005ab9 	.word	0x08005ab9

08005884 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	bc80      	pop	{r7}
 8005894:	4770      	bx	lr

08005896 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005896:	b480      	push	{r7}
 8005898:	b083      	sub	sp, #12
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800589e:	bf00      	nop
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bc80      	pop	{r7}
 80058a6:	4770      	bx	lr

080058a8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0320 	and.w	r3, r3, #32
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d11e      	bne.n	8005902 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68da      	ldr	r2, [r3, #12]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058d8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	695a      	ldr	r2, [r3, #20]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f022 0201 	bic.w	r2, r2, #1
 80058e8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	695a      	ldr	r2, [r3, #20]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058f8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2220      	movs	r2, #32
 80058fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f7fc f8b0 	bl	8001a68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005908:	bf00      	nop
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f7fc f8ac 	bl	8001a7c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005924:	bf00      	nop
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005934:	2300      	movs	r3, #0
 8005936:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005948:	2b00      	cmp	r3, #0
 800594a:	bf14      	ite	ne
 800594c:	2301      	movne	r3, #1
 800594e:	2300      	moveq	r3, #0
 8005950:	b2db      	uxtb	r3, r3
 8005952:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b21      	cmp	r3, #33	; 0x21
 800595e:	d108      	bne.n	8005972 <UART_DMAError+0x46>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d005      	beq.n	8005972 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	2200      	movs	r2, #0
 800596a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800596c:	68b8      	ldr	r0, [r7, #8]
 800596e:	f000 f871 	bl	8005a54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597c:	2b00      	cmp	r3, #0
 800597e:	bf14      	ite	ne
 8005980:	2301      	movne	r3, #1
 8005982:	2300      	moveq	r3, #0
 8005984:	b2db      	uxtb	r3, r3
 8005986:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b22      	cmp	r3, #34	; 0x22
 8005992:	d108      	bne.n	80059a6 <UART_DMAError+0x7a>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d005      	beq.n	80059a6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	2200      	movs	r2, #0
 800599e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80059a0:	68b8      	ldr	r0, [r7, #8]
 80059a2:	f000 f86c 	bl	8005a7e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059aa:	f043 0210 	orr.w	r2, r3, #16
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059b2:	68b8      	ldr	r0, [r7, #8]
 80059b4:	f7ff ff6f 	bl	8005896 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059b8:	bf00      	nop
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	603b      	str	r3, [r7, #0]
 80059cc:	4613      	mov	r3, r2
 80059ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059d0:	e02c      	b.n	8005a2c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d8:	d028      	beq.n	8005a2c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d007      	beq.n	80059f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80059e0:	f7fc fc8c 	bl	80022fc <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	69ba      	ldr	r2, [r7, #24]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d21d      	bcs.n	8005a2c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68da      	ldr	r2, [r3, #12]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80059fe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	695a      	ldr	r2, [r3, #20]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 0201 	bic.w	r2, r2, #1
 8005a0e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2220      	movs	r2, #32
 8005a14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e00f      	b.n	8005a4c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	4013      	ands	r3, r2
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	bf0c      	ite	eq
 8005a3c:	2301      	moveq	r3, #1
 8005a3e:	2300      	movne	r3, #0
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	461a      	mov	r2, r3
 8005a44:	79fb      	ldrb	r3, [r7, #7]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d0c3      	beq.n	80059d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68da      	ldr	r2, [r3, #12]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005a6a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bc80      	pop	{r7}
 8005a7c:	4770      	bx	lr

08005a7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68da      	ldr	r2, [r3, #12]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a94:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	695a      	ldr	r2, [r3, #20]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 0201 	bic.w	r2, r2, #1
 8005aa4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005aae:	bf00      	nop
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bc80      	pop	{r7}
 8005ab6:	4770      	bx	lr

08005ab8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f7ff fedf 	bl	8005896 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ad8:	bf00      	nop
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b21      	cmp	r3, #33	; 0x21
 8005af2:	d144      	bne.n	8005b7e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005afc:	d11a      	bne.n	8005b34 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	881b      	ldrh	r3, [r3, #0]
 8005b08:	461a      	mov	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b12:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d105      	bne.n	8005b28 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a1b      	ldr	r3, [r3, #32]
 8005b20:	1c9a      	adds	r2, r3, #2
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	621a      	str	r2, [r3, #32]
 8005b26:	e00e      	b.n	8005b46 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	1c5a      	adds	r2, r3, #1
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	621a      	str	r2, [r3, #32]
 8005b32:	e008      	b.n	8005b46 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a1b      	ldr	r3, [r3, #32]
 8005b38:	1c59      	adds	r1, r3, #1
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	6211      	str	r1, [r2, #32]
 8005b3e:	781a      	ldrb	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	4619      	mov	r1, r3
 8005b54:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d10f      	bne.n	8005b7a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68da      	ldr	r2, [r3, #12]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b68:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68da      	ldr	r2, [r3, #12]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b78:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	e000      	b.n	8005b80 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005b7e:	2302      	movs	r3, #2
  }
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bc80      	pop	{r7}
 8005b88:	4770      	bx	lr

08005b8a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b082      	sub	sp, #8
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68da      	ldr	r2, [r3, #12]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ba0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f7ff fe6a 	bl	8005884 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b084      	sub	sp, #16
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b22      	cmp	r3, #34	; 0x22
 8005bcc:	d171      	bne.n	8005cb2 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bd6:	d123      	bne.n	8005c20 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bdc:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d10e      	bne.n	8005c04 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfc:	1c9a      	adds	r2, r3, #2
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	629a      	str	r2, [r3, #40]	; 0x28
 8005c02:	e029      	b.n	8005c58 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c18:	1c5a      	adds	r2, r3, #1
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	629a      	str	r2, [r3, #40]	; 0x28
 8005c1e:	e01b      	b.n	8005c58 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10a      	bne.n	8005c3e <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6858      	ldr	r0, [r3, #4]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c32:	1c59      	adds	r1, r3, #1
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	6291      	str	r1, [r2, #40]	; 0x28
 8005c38:	b2c2      	uxtb	r2, r0
 8005c3a:	701a      	strb	r2, [r3, #0]
 8005c3c:	e00c      	b.n	8005c58 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4a:	1c58      	adds	r0, r3, #1
 8005c4c:	6879      	ldr	r1, [r7, #4]
 8005c4e:	6288      	str	r0, [r1, #40]	; 0x28
 8005c50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c54:	b2d2      	uxtb	r2, r2
 8005c56:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	4619      	mov	r1, r3
 8005c66:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d120      	bne.n	8005cae <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68da      	ldr	r2, [r3, #12]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 0220 	bic.w	r2, r2, #32
 8005c7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68da      	ldr	r2, [r3, #12]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	695a      	ldr	r2, [r3, #20]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 0201 	bic.w	r2, r2, #1
 8005c9a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f7fb fedf 	bl	8001a68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005caa:	2300      	movs	r3, #0
 8005cac:	e002      	b.n	8005cb4 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	e000      	b.n	8005cb4 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005cb2:	2302      	movs	r3, #2
  }
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68da      	ldr	r2, [r3, #12]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	689a      	ldr	r2, [r3, #8]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005cf6:	f023 030c 	bic.w	r3, r3, #12
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	6812      	ldr	r2, [r2, #0]
 8005cfe:	68f9      	ldr	r1, [r7, #12]
 8005d00:	430b      	orrs	r3, r1
 8005d02:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	699a      	ldr	r2, [r3, #24]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	430a      	orrs	r2, r1
 8005d18:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a52      	ldr	r2, [pc, #328]	; (8005e68 <UART_SetConfig+0x1ac>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d14e      	bne.n	8005dc2 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005d24:	f7fe fbfa 	bl	800451c <HAL_RCC_GetPCLK2Freq>
 8005d28:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4413      	add	r3, r2
 8005d32:	009a      	lsls	r2, r3, #2
 8005d34:	441a      	add	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d40:	4a4a      	ldr	r2, [pc, #296]	; (8005e6c <UART_SetConfig+0x1b0>)
 8005d42:	fba2 2303 	umull	r2, r3, r2, r3
 8005d46:	095b      	lsrs	r3, r3, #5
 8005d48:	0119      	lsls	r1, r3, #4
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4413      	add	r3, r2
 8005d52:	009a      	lsls	r2, r3, #2
 8005d54:	441a      	add	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d60:	4b42      	ldr	r3, [pc, #264]	; (8005e6c <UART_SetConfig+0x1b0>)
 8005d62:	fba3 0302 	umull	r0, r3, r3, r2
 8005d66:	095b      	lsrs	r3, r3, #5
 8005d68:	2064      	movs	r0, #100	; 0x64
 8005d6a:	fb00 f303 	mul.w	r3, r0, r3
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	011b      	lsls	r3, r3, #4
 8005d72:	3332      	adds	r3, #50	; 0x32
 8005d74:	4a3d      	ldr	r2, [pc, #244]	; (8005e6c <UART_SetConfig+0x1b0>)
 8005d76:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7a:	095b      	lsrs	r3, r3, #5
 8005d7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d80:	4419      	add	r1, r3
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	4613      	mov	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	009a      	lsls	r2, r3, #2
 8005d8c:	441a      	add	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d98:	4b34      	ldr	r3, [pc, #208]	; (8005e6c <UART_SetConfig+0x1b0>)
 8005d9a:	fba3 0302 	umull	r0, r3, r3, r2
 8005d9e:	095b      	lsrs	r3, r3, #5
 8005da0:	2064      	movs	r0, #100	; 0x64
 8005da2:	fb00 f303 	mul.w	r3, r0, r3
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	011b      	lsls	r3, r3, #4
 8005daa:	3332      	adds	r3, #50	; 0x32
 8005dac:	4a2f      	ldr	r2, [pc, #188]	; (8005e6c <UART_SetConfig+0x1b0>)
 8005dae:	fba2 2303 	umull	r2, r3, r2, r3
 8005db2:	095b      	lsrs	r3, r3, #5
 8005db4:	f003 020f 	and.w	r2, r3, #15
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	440a      	add	r2, r1
 8005dbe:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005dc0:	e04d      	b.n	8005e5e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8005dc2:	f7fe fb97 	bl	80044f4 <HAL_RCC_GetPCLK1Freq>
 8005dc6:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4413      	add	r3, r2
 8005dd0:	009a      	lsls	r2, r3, #2
 8005dd2:	441a      	add	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dde:	4a23      	ldr	r2, [pc, #140]	; (8005e6c <UART_SetConfig+0x1b0>)
 8005de0:	fba2 2303 	umull	r2, r3, r2, r3
 8005de4:	095b      	lsrs	r3, r3, #5
 8005de6:	0119      	lsls	r1, r3, #4
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	4613      	mov	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	4413      	add	r3, r2
 8005df0:	009a      	lsls	r2, r3, #2
 8005df2:	441a      	add	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	fbb2 f2f3 	udiv	r2, r2, r3
 8005dfe:	4b1b      	ldr	r3, [pc, #108]	; (8005e6c <UART_SetConfig+0x1b0>)
 8005e00:	fba3 0302 	umull	r0, r3, r3, r2
 8005e04:	095b      	lsrs	r3, r3, #5
 8005e06:	2064      	movs	r0, #100	; 0x64
 8005e08:	fb00 f303 	mul.w	r3, r0, r3
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	011b      	lsls	r3, r3, #4
 8005e10:	3332      	adds	r3, #50	; 0x32
 8005e12:	4a16      	ldr	r2, [pc, #88]	; (8005e6c <UART_SetConfig+0x1b0>)
 8005e14:	fba2 2303 	umull	r2, r3, r2, r3
 8005e18:	095b      	lsrs	r3, r3, #5
 8005e1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e1e:	4419      	add	r1, r3
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	4613      	mov	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	009a      	lsls	r2, r3, #2
 8005e2a:	441a      	add	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e36:	4b0d      	ldr	r3, [pc, #52]	; (8005e6c <UART_SetConfig+0x1b0>)
 8005e38:	fba3 0302 	umull	r0, r3, r3, r2
 8005e3c:	095b      	lsrs	r3, r3, #5
 8005e3e:	2064      	movs	r0, #100	; 0x64
 8005e40:	fb00 f303 	mul.w	r3, r0, r3
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	011b      	lsls	r3, r3, #4
 8005e48:	3332      	adds	r3, #50	; 0x32
 8005e4a:	4a08      	ldr	r2, [pc, #32]	; (8005e6c <UART_SetConfig+0x1b0>)
 8005e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e50:	095b      	lsrs	r3, r3, #5
 8005e52:	f003 020f 	and.w	r2, r3, #15
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	440a      	add	r2, r1
 8005e5c:	609a      	str	r2, [r3, #8]
}
 8005e5e:	bf00      	nop
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	40013800 	.word	0x40013800
 8005e6c:	51eb851f 	.word	0x51eb851f

08005e70 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005e70:	b084      	sub	sp, #16
 8005e72:	b480      	push	{r7}
 8005e74:	b083      	sub	sp, #12
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
 8005e7a:	f107 0014 	add.w	r0, r7, #20
 8005e7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bc80      	pop	{r7}
 8005e8c:	b004      	add	sp, #16
 8005e8e:	4770      	bx	lr

08005e90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005e98:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005e9c:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	89fb      	ldrh	r3, [r7, #14]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bc80      	pop	{r7}
 8005ebc:	4770      	bx	lr

08005ebe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b085      	sub	sp, #20
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005ec6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005eca:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	b21a      	sxth	r2, r3
 8005ed6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005eda:	43db      	mvns	r3, r3
 8005edc:	b21b      	sxth	r3, r3
 8005ede:	4013      	ands	r3, r2
 8005ee0:	b21b      	sxth	r3, r3
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3714      	adds	r7, #20
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bc80      	pop	{r7}
 8005ef4:	4770      	bx	lr

08005ef6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
 8005efe:	460b      	mov	r3, r1
 8005f00:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bc80      	pop	{r7}
 8005f0c:	4770      	bx	lr

08005f0e <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005f0e:	b084      	sub	sp, #16
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	f107 0014 	add.w	r0, r7, #20
 8005f1c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f7ff ffa5 	bl	8005e90 <USB_EnableGlobalInt>

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f52:	b004      	add	sp, #16
 8005f54:	4770      	bx	lr
	...

08005f58 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f58:	b490      	push	{r4, r7}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f62:	2300      	movs	r3, #0
 8005f64:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	881b      	ldrh	r3, [r3, #0]
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f7c:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	78db      	ldrb	r3, [r3, #3]
 8005f82:	2b03      	cmp	r3, #3
 8005f84:	d819      	bhi.n	8005fba <USB_ActivateEndpoint+0x62>
 8005f86:	a201      	add	r2, pc, #4	; (adr r2, 8005f8c <USB_ActivateEndpoint+0x34>)
 8005f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8c:	08005f9d 	.word	0x08005f9d
 8005f90:	08005fb1 	.word	0x08005fb1
 8005f94:	08005fc1 	.word	0x08005fc1
 8005f98:	08005fa7 	.word	0x08005fa7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005f9c:	89bb      	ldrh	r3, [r7, #12]
 8005f9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fa2:	81bb      	strh	r3, [r7, #12]
      break;
 8005fa4:	e00d      	b.n	8005fc2 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005fa6:	89bb      	ldrh	r3, [r7, #12]
 8005fa8:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005fac:	81bb      	strh	r3, [r7, #12]
      break;
 8005fae:	e008      	b.n	8005fc2 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005fb0:	89bb      	ldrh	r3, [r7, #12]
 8005fb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005fb6:	81bb      	strh	r3, [r7, #12]
      break;
 8005fb8:	e003      	b.n	8005fc2 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	73fb      	strb	r3, [r7, #15]
      break;
 8005fbe:	e000      	b.n	8005fc2 <USB_ActivateEndpoint+0x6a>
      break;
 8005fc0:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	441a      	add	r2, r3
 8005fcc:	89bb      	ldrh	r3, [r7, #12]
 8005fce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4413      	add	r3, r2
 8005fec:	881b      	ldrh	r3, [r3, #0]
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	4313      	orrs	r3, r2
 8006002:	b29c      	uxth	r4, r3
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	441a      	add	r2, r3
 800600e:	4b8a      	ldr	r3, [pc, #552]	; (8006238 <USB_ActivateEndpoint+0x2e0>)
 8006010:	4323      	orrs	r3, r4
 8006012:	b29b      	uxth	r3, r3
 8006014:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	7b1b      	ldrb	r3, [r3, #12]
 800601a:	2b00      	cmp	r3, #0
 800601c:	f040 8112 	bne.w	8006244 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	785b      	ldrb	r3, [r3, #1]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d067      	beq.n	80060f8 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006028:	687c      	ldr	r4, [r7, #4]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006030:	b29b      	uxth	r3, r3
 8006032:	441c      	add	r4, r3
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	011b      	lsls	r3, r3, #4
 800603a:	4423      	add	r3, r4
 800603c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006040:	461c      	mov	r4, r3
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	88db      	ldrh	r3, [r3, #6]
 8006046:	085b      	lsrs	r3, r3, #1
 8006048:	b29b      	uxth	r3, r3
 800604a:	005b      	lsls	r3, r3, #1
 800604c:	b29b      	uxth	r3, r3
 800604e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	881b      	ldrh	r3, [r3, #0]
 800605c:	b29c      	uxth	r4, r3
 800605e:	4623      	mov	r3, r4
 8006060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006064:	2b00      	cmp	r3, #0
 8006066:	d014      	beq.n	8006092 <USB_ActivateEndpoint+0x13a>
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	4413      	add	r3, r2
 8006072:	881b      	ldrh	r3, [r3, #0]
 8006074:	b29b      	uxth	r3, r3
 8006076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800607a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800607e:	b29c      	uxth	r4, r3
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	441a      	add	r2, r3
 800608a:	4b6c      	ldr	r3, [pc, #432]	; (800623c <USB_ActivateEndpoint+0x2e4>)
 800608c:	4323      	orrs	r3, r4
 800608e:	b29b      	uxth	r3, r3
 8006090:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	78db      	ldrb	r3, [r3, #3]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d018      	beq.n	80060cc <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060b0:	b29c      	uxth	r4, r3
 80060b2:	f084 0320 	eor.w	r3, r4, #32
 80060b6:	b29c      	uxth	r4, r3
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	441a      	add	r2, r3
 80060c2:	4b5d      	ldr	r3, [pc, #372]	; (8006238 <USB_ActivateEndpoint+0x2e0>)
 80060c4:	4323      	orrs	r3, r4
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	8013      	strh	r3, [r2, #0]
 80060ca:	e22b      	b.n	8006524 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	881b      	ldrh	r3, [r3, #0]
 80060d8:	b29b      	uxth	r3, r3
 80060da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060e2:	b29c      	uxth	r4, r3
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	441a      	add	r2, r3
 80060ee:	4b52      	ldr	r3, [pc, #328]	; (8006238 <USB_ActivateEndpoint+0x2e0>)
 80060f0:	4323      	orrs	r3, r4
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	8013      	strh	r3, [r2, #0]
 80060f6:	e215      	b.n	8006524 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80060f8:	687c      	ldr	r4, [r7, #4]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006100:	b29b      	uxth	r3, r3
 8006102:	441c      	add	r4, r3
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	011b      	lsls	r3, r3, #4
 800610a:	4423      	add	r3, r4
 800610c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006110:	461c      	mov	r4, r3
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	88db      	ldrh	r3, [r3, #6]
 8006116:	085b      	lsrs	r3, r3, #1
 8006118:	b29b      	uxth	r3, r3
 800611a:	005b      	lsls	r3, r3, #1
 800611c:	b29b      	uxth	r3, r3
 800611e:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006120:	687c      	ldr	r4, [r7, #4]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006128:	b29b      	uxth	r3, r3
 800612a:	441c      	add	r4, r3
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	011b      	lsls	r3, r3, #4
 8006132:	4423      	add	r3, r4
 8006134:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006138:	461c      	mov	r4, r3
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10e      	bne.n	8006160 <USB_ActivateEndpoint+0x208>
 8006142:	8823      	ldrh	r3, [r4, #0]
 8006144:	b29b      	uxth	r3, r3
 8006146:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800614a:	b29b      	uxth	r3, r3
 800614c:	8023      	strh	r3, [r4, #0]
 800614e:	8823      	ldrh	r3, [r4, #0]
 8006150:	b29b      	uxth	r3, r3
 8006152:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006156:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800615a:	b29b      	uxth	r3, r3
 800615c:	8023      	strh	r3, [r4, #0]
 800615e:	e02d      	b.n	80061bc <USB_ActivateEndpoint+0x264>
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	2b3e      	cmp	r3, #62	; 0x3e
 8006166:	d812      	bhi.n	800618e <USB_ActivateEndpoint+0x236>
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	085b      	lsrs	r3, r3, #1
 800616e:	60bb      	str	r3, [r7, #8]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	d002      	beq.n	8006182 <USB_ActivateEndpoint+0x22a>
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	3301      	adds	r3, #1
 8006180:	60bb      	str	r3, [r7, #8]
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	b29b      	uxth	r3, r3
 8006186:	029b      	lsls	r3, r3, #10
 8006188:	b29b      	uxth	r3, r3
 800618a:	8023      	strh	r3, [r4, #0]
 800618c:	e016      	b.n	80061bc <USB_ActivateEndpoint+0x264>
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	095b      	lsrs	r3, r3, #5
 8006194:	60bb      	str	r3, [r7, #8]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	f003 031f 	and.w	r3, r3, #31
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d102      	bne.n	80061a8 <USB_ActivateEndpoint+0x250>
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	3b01      	subs	r3, #1
 80061a6:	60bb      	str	r3, [r7, #8]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	029b      	lsls	r3, r3, #10
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	4413      	add	r3, r2
 80061c6:	881b      	ldrh	r3, [r3, #0]
 80061c8:	b29c      	uxth	r4, r3
 80061ca:	4623      	mov	r3, r4
 80061cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d014      	beq.n	80061fe <USB_ActivateEndpoint+0x2a6>
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	4413      	add	r3, r2
 80061de:	881b      	ldrh	r3, [r3, #0]
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ea:	b29c      	uxth	r4, r3
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	441a      	add	r2, r3
 80061f6:	4b12      	ldr	r3, [pc, #72]	; (8006240 <USB_ActivateEndpoint+0x2e8>)
 80061f8:	4323      	orrs	r3, r4
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4413      	add	r3, r2
 8006208:	881b      	ldrh	r3, [r3, #0]
 800620a:	b29b      	uxth	r3, r3
 800620c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006214:	b29c      	uxth	r4, r3
 8006216:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800621a:	b29c      	uxth	r4, r3
 800621c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006220:	b29c      	uxth	r4, r3
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	441a      	add	r2, r3
 800622c:	4b02      	ldr	r3, [pc, #8]	; (8006238 <USB_ActivateEndpoint+0x2e0>)
 800622e:	4323      	orrs	r3, r4
 8006230:	b29b      	uxth	r3, r3
 8006232:	8013      	strh	r3, [r2, #0]
 8006234:	e176      	b.n	8006524 <USB_ActivateEndpoint+0x5cc>
 8006236:	bf00      	nop
 8006238:	ffff8080 	.word	0xffff8080
 800623c:	ffff80c0 	.word	0xffff80c0
 8006240:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4413      	add	r3, r2
 800624e:	881b      	ldrh	r3, [r3, #0]
 8006250:	b29b      	uxth	r3, r3
 8006252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625a:	b29c      	uxth	r4, r3
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	441a      	add	r2, r3
 8006266:	4b96      	ldr	r3, [pc, #600]	; (80064c0 <USB_ActivateEndpoint+0x568>)
 8006268:	4323      	orrs	r3, r4
 800626a:	b29b      	uxth	r3, r3
 800626c:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800626e:	687c      	ldr	r4, [r7, #4]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006276:	b29b      	uxth	r3, r3
 8006278:	441c      	add	r4, r3
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	011b      	lsls	r3, r3, #4
 8006280:	4423      	add	r3, r4
 8006282:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006286:	461c      	mov	r4, r3
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	891b      	ldrh	r3, [r3, #8]
 800628c:	085b      	lsrs	r3, r3, #1
 800628e:	b29b      	uxth	r3, r3
 8006290:	005b      	lsls	r3, r3, #1
 8006292:	b29b      	uxth	r3, r3
 8006294:	8023      	strh	r3, [r4, #0]
 8006296:	687c      	ldr	r4, [r7, #4]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800629e:	b29b      	uxth	r3, r3
 80062a0:	441c      	add	r4, r3
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	011b      	lsls	r3, r3, #4
 80062a8:	4423      	add	r3, r4
 80062aa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80062ae:	461c      	mov	r4, r3
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	895b      	ldrh	r3, [r3, #10]
 80062b4:	085b      	lsrs	r3, r3, #1
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	005b      	lsls	r3, r3, #1
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	785b      	ldrb	r3, [r3, #1]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f040 8088 	bne.w	80063d8 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	b29c      	uxth	r4, r3
 80062d6:	4623      	mov	r3, r4
 80062d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d014      	beq.n	800630a <USB_ActivateEndpoint+0x3b2>
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4413      	add	r3, r2
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f6:	b29c      	uxth	r4, r3
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	441a      	add	r2, r3
 8006302:	4b70      	ldr	r3, [pc, #448]	; (80064c4 <USB_ActivateEndpoint+0x56c>)
 8006304:	4323      	orrs	r3, r4
 8006306:	b29b      	uxth	r3, r3
 8006308:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4413      	add	r3, r2
 8006314:	881b      	ldrh	r3, [r3, #0]
 8006316:	b29c      	uxth	r4, r3
 8006318:	4623      	mov	r3, r4
 800631a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800631e:	2b00      	cmp	r3, #0
 8006320:	d014      	beq.n	800634c <USB_ActivateEndpoint+0x3f4>
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	b29b      	uxth	r3, r3
 8006330:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006338:	b29c      	uxth	r4, r3
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	441a      	add	r2, r3
 8006344:	4b60      	ldr	r3, [pc, #384]	; (80064c8 <USB_ActivateEndpoint+0x570>)
 8006346:	4323      	orrs	r3, r4
 8006348:	b29b      	uxth	r3, r3
 800634a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	881b      	ldrh	r3, [r3, #0]
 8006358:	b29b      	uxth	r3, r3
 800635a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800635e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006362:	b29c      	uxth	r4, r3
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	441a      	add	r2, r3
 800636e:	4b56      	ldr	r3, [pc, #344]	; (80064c8 <USB_ActivateEndpoint+0x570>)
 8006370:	4323      	orrs	r3, r4
 8006372:	b29b      	uxth	r3, r3
 8006374:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4413      	add	r3, r2
 8006380:	881b      	ldrh	r3, [r3, #0]
 8006382:	b29b      	uxth	r3, r3
 8006384:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800638c:	b29c      	uxth	r4, r3
 800638e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006392:	b29c      	uxth	r4, r3
 8006394:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006398:	b29c      	uxth	r4, r3
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	441a      	add	r2, r3
 80063a4:	4b49      	ldr	r3, [pc, #292]	; (80064cc <USB_ActivateEndpoint+0x574>)
 80063a6:	4323      	orrs	r3, r4
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4413      	add	r3, r2
 80063b6:	881b      	ldrh	r3, [r3, #0]
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063c2:	b29c      	uxth	r4, r3
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	441a      	add	r2, r3
 80063ce:	4b3f      	ldr	r3, [pc, #252]	; (80064cc <USB_ActivateEndpoint+0x574>)
 80063d0:	4323      	orrs	r3, r4
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	8013      	strh	r3, [r2, #0]
 80063d6:	e0a5      	b.n	8006524 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	881b      	ldrh	r3, [r3, #0]
 80063e4:	b29c      	uxth	r4, r3
 80063e6:	4623      	mov	r3, r4
 80063e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d014      	beq.n	800641a <USB_ActivateEndpoint+0x4c2>
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	881b      	ldrh	r3, [r3, #0]
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006406:	b29c      	uxth	r4, r3
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	441a      	add	r2, r3
 8006412:	4b2c      	ldr	r3, [pc, #176]	; (80064c4 <USB_ActivateEndpoint+0x56c>)
 8006414:	4323      	orrs	r3, r4
 8006416:	b29b      	uxth	r3, r3
 8006418:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	b29c      	uxth	r4, r3
 8006428:	4623      	mov	r3, r4
 800642a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800642e:	2b00      	cmp	r3, #0
 8006430:	d014      	beq.n	800645c <USB_ActivateEndpoint+0x504>
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4413      	add	r3, r2
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	b29b      	uxth	r3, r3
 8006440:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006448:	b29c      	uxth	r4, r3
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	441a      	add	r2, r3
 8006454:	4b1c      	ldr	r3, [pc, #112]	; (80064c8 <USB_ActivateEndpoint+0x570>)
 8006456:	4323      	orrs	r3, r4
 8006458:	b29b      	uxth	r3, r3
 800645a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	881b      	ldrh	r3, [r3, #0]
 8006468:	b29b      	uxth	r3, r3
 800646a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800646e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006472:	b29c      	uxth	r4, r3
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	441a      	add	r2, r3
 800647e:	4b11      	ldr	r3, [pc, #68]	; (80064c4 <USB_ActivateEndpoint+0x56c>)
 8006480:	4323      	orrs	r3, r4
 8006482:	b29b      	uxth	r3, r3
 8006484:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	78db      	ldrb	r3, [r3, #3]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d020      	beq.n	80064d0 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	881b      	ldrh	r3, [r3, #0]
 800649a:	b29b      	uxth	r3, r3
 800649c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064a4:	b29c      	uxth	r4, r3
 80064a6:	f084 0320 	eor.w	r3, r4, #32
 80064aa:	b29c      	uxth	r4, r3
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	441a      	add	r2, r3
 80064b6:	4b05      	ldr	r3, [pc, #20]	; (80064cc <USB_ActivateEndpoint+0x574>)
 80064b8:	4323      	orrs	r3, r4
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	8013      	strh	r3, [r2, #0]
 80064be:	e01c      	b.n	80064fa <USB_ActivateEndpoint+0x5a2>
 80064c0:	ffff8180 	.word	0xffff8180
 80064c4:	ffffc080 	.word	0xffffc080
 80064c8:	ffff80c0 	.word	0xffff80c0
 80064cc:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	881b      	ldrh	r3, [r3, #0]
 80064dc:	b29b      	uxth	r3, r3
 80064de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064e6:	b29c      	uxth	r4, r3
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	441a      	add	r2, r3
 80064f2:	4b0f      	ldr	r3, [pc, #60]	; (8006530 <USB_ActivateEndpoint+0x5d8>)
 80064f4:	4323      	orrs	r3, r4
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	881b      	ldrh	r3, [r3, #0]
 8006506:	b29b      	uxth	r3, r3
 8006508:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800650c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006510:	b29c      	uxth	r4, r3
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	441a      	add	r2, r3
 800651c:	4b04      	ldr	r3, [pc, #16]	; (8006530 <USB_ActivateEndpoint+0x5d8>)
 800651e:	4323      	orrs	r3, r4
 8006520:	b29b      	uxth	r3, r3
 8006522:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006524:	7bfb      	ldrb	r3, [r7, #15]
}
 8006526:	4618      	mov	r0, r3
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bc90      	pop	{r4, r7}
 800652e:	4770      	bx	lr
 8006530:	ffff8080 	.word	0xffff8080

08006534 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006534:	b490      	push	{r4, r7}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	7b1b      	ldrb	r3, [r3, #12]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d171      	bne.n	800662a <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	785b      	ldrb	r3, [r3, #1]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d036      	beq.n	80065bc <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4413      	add	r3, r2
 8006558:	881b      	ldrh	r3, [r3, #0]
 800655a:	b29c      	uxth	r4, r3
 800655c:	4623      	mov	r3, r4
 800655e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006562:	2b00      	cmp	r3, #0
 8006564:	d014      	beq.n	8006590 <USB_DeactivateEndpoint+0x5c>
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4413      	add	r3, r2
 8006570:	881b      	ldrh	r3, [r3, #0]
 8006572:	b29b      	uxth	r3, r3
 8006574:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800657c:	b29c      	uxth	r4, r3
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	441a      	add	r2, r3
 8006588:	4b6b      	ldr	r3, [pc, #428]	; (8006738 <USB_DeactivateEndpoint+0x204>)
 800658a:	4323      	orrs	r3, r4
 800658c:	b29b      	uxth	r3, r3
 800658e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	4413      	add	r3, r2
 800659a:	881b      	ldrh	r3, [r3, #0]
 800659c:	b29b      	uxth	r3, r3
 800659e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065a6:	b29c      	uxth	r4, r3
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	441a      	add	r2, r3
 80065b2:	4b62      	ldr	r3, [pc, #392]	; (800673c <USB_DeactivateEndpoint+0x208>)
 80065b4:	4323      	orrs	r3, r4
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	8013      	strh	r3, [r2, #0]
 80065ba:	e144      	b.n	8006846 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4413      	add	r3, r2
 80065c6:	881b      	ldrh	r3, [r3, #0]
 80065c8:	b29c      	uxth	r4, r3
 80065ca:	4623      	mov	r3, r4
 80065cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d014      	beq.n	80065fe <USB_DeactivateEndpoint+0xca>
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	881b      	ldrh	r3, [r3, #0]
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ea:	b29c      	uxth	r4, r3
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	441a      	add	r2, r3
 80065f6:	4b52      	ldr	r3, [pc, #328]	; (8006740 <USB_DeactivateEndpoint+0x20c>)
 80065f8:	4323      	orrs	r3, r4
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4413      	add	r3, r2
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	b29b      	uxth	r3, r3
 800660c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006614:	b29c      	uxth	r4, r3
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	441a      	add	r2, r3
 8006620:	4b46      	ldr	r3, [pc, #280]	; (800673c <USB_DeactivateEndpoint+0x208>)
 8006622:	4323      	orrs	r3, r4
 8006624:	b29b      	uxth	r3, r3
 8006626:	8013      	strh	r3, [r2, #0]
 8006628:	e10d      	b.n	8006846 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	785b      	ldrb	r3, [r3, #1]
 800662e:	2b00      	cmp	r3, #0
 8006630:	f040 8088 	bne.w	8006744 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	881b      	ldrh	r3, [r3, #0]
 8006640:	b29c      	uxth	r4, r3
 8006642:	4623      	mov	r3, r4
 8006644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d014      	beq.n	8006676 <USB_DeactivateEndpoint+0x142>
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4413      	add	r3, r2
 8006656:	881b      	ldrh	r3, [r3, #0]
 8006658:	b29b      	uxth	r3, r3
 800665a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800665e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006662:	b29c      	uxth	r4, r3
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	441a      	add	r2, r3
 800666e:	4b34      	ldr	r3, [pc, #208]	; (8006740 <USB_DeactivateEndpoint+0x20c>)
 8006670:	4323      	orrs	r3, r4
 8006672:	b29b      	uxth	r3, r3
 8006674:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4413      	add	r3, r2
 8006680:	881b      	ldrh	r3, [r3, #0]
 8006682:	b29c      	uxth	r4, r3
 8006684:	4623      	mov	r3, r4
 8006686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668a:	2b00      	cmp	r3, #0
 800668c:	d014      	beq.n	80066b8 <USB_DeactivateEndpoint+0x184>
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4413      	add	r3, r2
 8006698:	881b      	ldrh	r3, [r3, #0]
 800669a:	b29b      	uxth	r3, r3
 800669c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a4:	b29c      	uxth	r4, r3
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	441a      	add	r2, r3
 80066b0:	4b21      	ldr	r3, [pc, #132]	; (8006738 <USB_DeactivateEndpoint+0x204>)
 80066b2:	4323      	orrs	r3, r4
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4413      	add	r3, r2
 80066c2:	881b      	ldrh	r3, [r3, #0]
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ce:	b29c      	uxth	r4, r3
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	441a      	add	r2, r3
 80066da:	4b17      	ldr	r3, [pc, #92]	; (8006738 <USB_DeactivateEndpoint+0x204>)
 80066dc:	4323      	orrs	r3, r4
 80066de:	b29b      	uxth	r3, r3
 80066e0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4413      	add	r3, r2
 80066ec:	881b      	ldrh	r3, [r3, #0]
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f8:	b29c      	uxth	r4, r3
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	441a      	add	r2, r3
 8006704:	4b0d      	ldr	r3, [pc, #52]	; (800673c <USB_DeactivateEndpoint+0x208>)
 8006706:	4323      	orrs	r3, r4
 8006708:	b29b      	uxth	r3, r3
 800670a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4413      	add	r3, r2
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	b29b      	uxth	r3, r3
 800671a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800671e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006722:	b29c      	uxth	r4, r3
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	441a      	add	r2, r3
 800672e:	4b03      	ldr	r3, [pc, #12]	; (800673c <USB_DeactivateEndpoint+0x208>)
 8006730:	4323      	orrs	r3, r4
 8006732:	b29b      	uxth	r3, r3
 8006734:	8013      	strh	r3, [r2, #0]
 8006736:	e086      	b.n	8006846 <USB_DeactivateEndpoint+0x312>
 8006738:	ffff80c0 	.word	0xffff80c0
 800673c:	ffff8080 	.word	0xffff8080
 8006740:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	4413      	add	r3, r2
 800674e:	881b      	ldrh	r3, [r3, #0]
 8006750:	b29c      	uxth	r4, r3
 8006752:	4623      	mov	r3, r4
 8006754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d014      	beq.n	8006786 <USB_DeactivateEndpoint+0x252>
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4413      	add	r3, r2
 8006766:	881b      	ldrh	r3, [r3, #0]
 8006768:	b29b      	uxth	r3, r3
 800676a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800676e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006772:	b29c      	uxth	r4, r3
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	441a      	add	r2, r3
 800677e:	4b35      	ldr	r3, [pc, #212]	; (8006854 <USB_DeactivateEndpoint+0x320>)
 8006780:	4323      	orrs	r3, r4
 8006782:	b29b      	uxth	r3, r3
 8006784:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4413      	add	r3, r2
 8006790:	881b      	ldrh	r3, [r3, #0]
 8006792:	b29c      	uxth	r4, r3
 8006794:	4623      	mov	r3, r4
 8006796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679a:	2b00      	cmp	r3, #0
 800679c:	d014      	beq.n	80067c8 <USB_DeactivateEndpoint+0x294>
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	881b      	ldrh	r3, [r3, #0]
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067b4:	b29c      	uxth	r4, r3
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	441a      	add	r2, r3
 80067c0:	4b25      	ldr	r3, [pc, #148]	; (8006858 <USB_DeactivateEndpoint+0x324>)
 80067c2:	4323      	orrs	r3, r4
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4413      	add	r3, r2
 80067d2:	881b      	ldrh	r3, [r3, #0]
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067de:	b29c      	uxth	r4, r3
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	441a      	add	r2, r3
 80067ea:	4b1a      	ldr	r3, [pc, #104]	; (8006854 <USB_DeactivateEndpoint+0x320>)
 80067ec:	4323      	orrs	r3, r4
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	4413      	add	r3, r2
 80067fc:	881b      	ldrh	r3, [r3, #0]
 80067fe:	b29b      	uxth	r3, r3
 8006800:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006808:	b29c      	uxth	r4, r3
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	441a      	add	r2, r3
 8006814:	4b11      	ldr	r3, [pc, #68]	; (800685c <USB_DeactivateEndpoint+0x328>)
 8006816:	4323      	orrs	r3, r4
 8006818:	b29b      	uxth	r3, r3
 800681a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	4413      	add	r3, r2
 8006826:	881b      	ldrh	r3, [r3, #0]
 8006828:	b29b      	uxth	r3, r3
 800682a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800682e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006832:	b29c      	uxth	r4, r3
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	441a      	add	r2, r3
 800683e:	4b07      	ldr	r3, [pc, #28]	; (800685c <USB_DeactivateEndpoint+0x328>)
 8006840:	4323      	orrs	r3, r4
 8006842:	b29b      	uxth	r3, r3
 8006844:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3708      	adds	r7, #8
 800684c:	46bd      	mov	sp, r7
 800684e:	bc90      	pop	{r4, r7}
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	ffffc080 	.word	0xffffc080
 8006858:	ffff80c0 	.word	0xffff80c0
 800685c:	ffff8080 	.word	0xffff8080

08006860 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006860:	b590      	push	{r4, r7, lr}
 8006862:	b08d      	sub	sp, #52	; 0x34
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	785b      	ldrb	r3, [r3, #1]
 800686e:	2b01      	cmp	r3, #1
 8006870:	f040 8160 	bne.w	8006b34 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	699a      	ldr	r2, [r3, #24]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	429a      	cmp	r2, r3
 800687e:	d909      	bls.n	8006894 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	699a      	ldr	r2, [r3, #24]
 800688a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688c:	1ad2      	subs	r2, r2, r3
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	619a      	str	r2, [r3, #24]
 8006892:	e005      	b.n	80068a0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	2200      	movs	r2, #0
 800689e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	7b1b      	ldrb	r3, [r3, #12]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d119      	bne.n	80068dc <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	6959      	ldr	r1, [r3, #20]
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	88da      	ldrh	r2, [r3, #6]
 80068b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 fba2 	bl	8006ffe <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80068ba:	687c      	ldr	r4, [r7, #4]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	441c      	add	r4, r3
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	011b      	lsls	r3, r3, #4
 80068cc:	4423      	add	r3, r4
 80068ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068d2:	461c      	mov	r4, r3
 80068d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	8023      	strh	r3, [r4, #0]
 80068da:	e10f      	b.n	8006afc <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4413      	add	r3, r2
 80068e6:	881b      	ldrh	r3, [r3, #0]
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d065      	beq.n	80069be <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80068f2:	687c      	ldr	r4, [r7, #4]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	785b      	ldrb	r3, [r3, #1]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d148      	bne.n	800698e <USB_EPStartXfer+0x12e>
 80068fc:	687c      	ldr	r4, [r7, #4]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006904:	b29b      	uxth	r3, r3
 8006906:	441c      	add	r4, r3
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	011b      	lsls	r3, r3, #4
 800690e:	4423      	add	r3, r4
 8006910:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006914:	461c      	mov	r4, r3
 8006916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006918:	2b00      	cmp	r3, #0
 800691a:	d10e      	bne.n	800693a <USB_EPStartXfer+0xda>
 800691c:	8823      	ldrh	r3, [r4, #0]
 800691e:	b29b      	uxth	r3, r3
 8006920:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006924:	b29b      	uxth	r3, r3
 8006926:	8023      	strh	r3, [r4, #0]
 8006928:	8823      	ldrh	r3, [r4, #0]
 800692a:	b29b      	uxth	r3, r3
 800692c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006930:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006934:	b29b      	uxth	r3, r3
 8006936:	8023      	strh	r3, [r4, #0]
 8006938:	e03d      	b.n	80069b6 <USB_EPStartXfer+0x156>
 800693a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693c:	2b3e      	cmp	r3, #62	; 0x3e
 800693e:	d810      	bhi.n	8006962 <USB_EPStartXfer+0x102>
 8006940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006942:	085b      	lsrs	r3, r3, #1
 8006944:	627b      	str	r3, [r7, #36]	; 0x24
 8006946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	2b00      	cmp	r3, #0
 800694e:	d002      	beq.n	8006956 <USB_EPStartXfer+0xf6>
 8006950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006952:	3301      	adds	r3, #1
 8006954:	627b      	str	r3, [r7, #36]	; 0x24
 8006956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006958:	b29b      	uxth	r3, r3
 800695a:	029b      	lsls	r3, r3, #10
 800695c:	b29b      	uxth	r3, r3
 800695e:	8023      	strh	r3, [r4, #0]
 8006960:	e029      	b.n	80069b6 <USB_EPStartXfer+0x156>
 8006962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006964:	095b      	lsrs	r3, r3, #5
 8006966:	627b      	str	r3, [r7, #36]	; 0x24
 8006968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696a:	f003 031f 	and.w	r3, r3, #31
 800696e:	2b00      	cmp	r3, #0
 8006970:	d102      	bne.n	8006978 <USB_EPStartXfer+0x118>
 8006972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006974:	3b01      	subs	r3, #1
 8006976:	627b      	str	r3, [r7, #36]	; 0x24
 8006978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697a:	b29b      	uxth	r3, r3
 800697c:	029b      	lsls	r3, r3, #10
 800697e:	b29b      	uxth	r3, r3
 8006980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006988:	b29b      	uxth	r3, r3
 800698a:	8023      	strh	r3, [r4, #0]
 800698c:	e013      	b.n	80069b6 <USB_EPStartXfer+0x156>
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	785b      	ldrb	r3, [r3, #1]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d10f      	bne.n	80069b6 <USB_EPStartXfer+0x156>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800699c:	b29b      	uxth	r3, r3
 800699e:	441c      	add	r4, r3
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	011b      	lsls	r3, r3, #4
 80069a6:	4423      	add	r3, r4
 80069a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80069ac:	60fb      	str	r3, [r7, #12]
 80069ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	895b      	ldrh	r3, [r3, #10]
 80069ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80069bc:	e063      	b.n	8006a86 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	785b      	ldrb	r3, [r3, #1]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d148      	bne.n	8006a58 <USB_EPStartXfer+0x1f8>
 80069c6:	687c      	ldr	r4, [r7, #4]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	441c      	add	r4, r3
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	011b      	lsls	r3, r3, #4
 80069d8:	4423      	add	r3, r4
 80069da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069de:	461c      	mov	r4, r3
 80069e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10e      	bne.n	8006a04 <USB_EPStartXfer+0x1a4>
 80069e6:	8823      	ldrh	r3, [r4, #0]
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	8023      	strh	r3, [r4, #0]
 80069f2:	8823      	ldrh	r3, [r4, #0]
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	8023      	strh	r3, [r4, #0]
 8006a02:	e03d      	b.n	8006a80 <USB_EPStartXfer+0x220>
 8006a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a06:	2b3e      	cmp	r3, #62	; 0x3e
 8006a08:	d810      	bhi.n	8006a2c <USB_EPStartXfer+0x1cc>
 8006a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0c:	085b      	lsrs	r3, r3, #1
 8006a0e:	623b      	str	r3, [r7, #32]
 8006a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d002      	beq.n	8006a20 <USB_EPStartXfer+0x1c0>
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	623b      	str	r3, [r7, #32]
 8006a20:	6a3b      	ldr	r3, [r7, #32]
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	029b      	lsls	r3, r3, #10
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	8023      	strh	r3, [r4, #0]
 8006a2a:	e029      	b.n	8006a80 <USB_EPStartXfer+0x220>
 8006a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2e:	095b      	lsrs	r3, r3, #5
 8006a30:	623b      	str	r3, [r7, #32]
 8006a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a34:	f003 031f 	and.w	r3, r3, #31
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d102      	bne.n	8006a42 <USB_EPStartXfer+0x1e2>
 8006a3c:	6a3b      	ldr	r3, [r7, #32]
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	623b      	str	r3, [r7, #32]
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	029b      	lsls	r3, r3, #10
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	8023      	strh	r3, [r4, #0]
 8006a56:	e013      	b.n	8006a80 <USB_EPStartXfer+0x220>
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	785b      	ldrb	r3, [r3, #1]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d10f      	bne.n	8006a80 <USB_EPStartXfer+0x220>
 8006a60:	687c      	ldr	r4, [r7, #4]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	441c      	add	r4, r3
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	011b      	lsls	r3, r3, #4
 8006a72:	4423      	add	r3, r4
 8006a74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a78:	461c      	mov	r4, r3
 8006a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	891b      	ldrh	r3, [r3, #8]
 8006a84:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	6959      	ldr	r1, [r3, #20]
 8006a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 fab4 	bl	8006ffe <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	785b      	ldrb	r3, [r3, #1]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d115      	bne.n	8006aca <USB_EPStartXfer+0x26a>
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	881b      	ldrh	r3, [r3, #0]
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab4:	b29c      	uxth	r4, r3
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	441a      	add	r2, r3
 8006ac0:	4b9a      	ldr	r3, [pc, #616]	; (8006d2c <USB_EPStartXfer+0x4cc>)
 8006ac2:	4323      	orrs	r3, r4
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	8013      	strh	r3, [r2, #0]
 8006ac8:	e018      	b.n	8006afc <USB_EPStartXfer+0x29c>
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	785b      	ldrb	r3, [r3, #1]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d114      	bne.n	8006afc <USB_EPStartXfer+0x29c>
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	4413      	add	r3, r2
 8006adc:	881b      	ldrh	r3, [r3, #0]
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae8:	b29c      	uxth	r4, r3
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	441a      	add	r2, r3
 8006af4:	4b8e      	ldr	r3, [pc, #568]	; (8006d30 <USB_EPStartXfer+0x4d0>)
 8006af6:	4323      	orrs	r3, r4
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	881b      	ldrh	r3, [r3, #0]
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b12:	b29c      	uxth	r4, r3
 8006b14:	f084 0310 	eor.w	r3, r4, #16
 8006b18:	b29c      	uxth	r4, r3
 8006b1a:	f084 0320 	eor.w	r3, r4, #32
 8006b1e:	b29c      	uxth	r4, r3
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	441a      	add	r2, r3
 8006b2a:	4b82      	ldr	r3, [pc, #520]	; (8006d34 <USB_EPStartXfer+0x4d4>)
 8006b2c:	4323      	orrs	r3, r4
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	8013      	strh	r3, [r2, #0]
 8006b32:	e146      	b.n	8006dc2 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	699a      	ldr	r2, [r3, #24]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d909      	bls.n	8006b54 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	699a      	ldr	r2, [r3, #24]
 8006b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4c:	1ad2      	subs	r2, r2, r3
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	619a      	str	r2, [r3, #24]
 8006b52:	e005      	b.n	8006b60 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	7b1b      	ldrb	r3, [r3, #12]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d148      	bne.n	8006bfa <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006b68:	687c      	ldr	r4, [r7, #4]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	441c      	add	r4, r3
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	011b      	lsls	r3, r3, #4
 8006b7a:	4423      	add	r3, r4
 8006b7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b80:	461c      	mov	r4, r3
 8006b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d10e      	bne.n	8006ba6 <USB_EPStartXfer+0x346>
 8006b88:	8823      	ldrh	r3, [r4, #0]
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	8023      	strh	r3, [r4, #0]
 8006b94:	8823      	ldrh	r3, [r4, #0]
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	8023      	strh	r3, [r4, #0]
 8006ba4:	e0f2      	b.n	8006d8c <USB_EPStartXfer+0x52c>
 8006ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba8:	2b3e      	cmp	r3, #62	; 0x3e
 8006baa:	d810      	bhi.n	8006bce <USB_EPStartXfer+0x36e>
 8006bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bae:	085b      	lsrs	r3, r3, #1
 8006bb0:	61fb      	str	r3, [r7, #28]
 8006bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb4:	f003 0301 	and.w	r3, r3, #1
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d002      	beq.n	8006bc2 <USB_EPStartXfer+0x362>
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	61fb      	str	r3, [r7, #28]
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	029b      	lsls	r3, r3, #10
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	8023      	strh	r3, [r4, #0]
 8006bcc:	e0de      	b.n	8006d8c <USB_EPStartXfer+0x52c>
 8006bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd0:	095b      	lsrs	r3, r3, #5
 8006bd2:	61fb      	str	r3, [r7, #28]
 8006bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd6:	f003 031f 	and.w	r3, r3, #31
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d102      	bne.n	8006be4 <USB_EPStartXfer+0x384>
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	3b01      	subs	r3, #1
 8006be2:	61fb      	str	r3, [r7, #28]
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	029b      	lsls	r3, r3, #10
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	8023      	strh	r3, [r4, #0]
 8006bf8:	e0c8      	b.n	8006d8c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	785b      	ldrb	r3, [r3, #1]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d148      	bne.n	8006c94 <USB_EPStartXfer+0x434>
 8006c02:	687c      	ldr	r4, [r7, #4]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	441c      	add	r4, r3
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	011b      	lsls	r3, r3, #4
 8006c14:	4423      	add	r3, r4
 8006c16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c1a:	461c      	mov	r4, r3
 8006c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10e      	bne.n	8006c40 <USB_EPStartXfer+0x3e0>
 8006c22:	8823      	ldrh	r3, [r4, #0]
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	8023      	strh	r3, [r4, #0]
 8006c2e:	8823      	ldrh	r3, [r4, #0]
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	8023      	strh	r3, [r4, #0]
 8006c3e:	e03d      	b.n	8006cbc <USB_EPStartXfer+0x45c>
 8006c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c42:	2b3e      	cmp	r3, #62	; 0x3e
 8006c44:	d810      	bhi.n	8006c68 <USB_EPStartXfer+0x408>
 8006c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c48:	085b      	lsrs	r3, r3, #1
 8006c4a:	61bb      	str	r3, [r7, #24]
 8006c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d002      	beq.n	8006c5c <USB_EPStartXfer+0x3fc>
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	61bb      	str	r3, [r7, #24]
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	029b      	lsls	r3, r3, #10
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	8023      	strh	r3, [r4, #0]
 8006c66:	e029      	b.n	8006cbc <USB_EPStartXfer+0x45c>
 8006c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6a:	095b      	lsrs	r3, r3, #5
 8006c6c:	61bb      	str	r3, [r7, #24]
 8006c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c70:	f003 031f 	and.w	r3, r3, #31
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d102      	bne.n	8006c7e <USB_EPStartXfer+0x41e>
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	61bb      	str	r3, [r7, #24]
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	029b      	lsls	r3, r3, #10
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	8023      	strh	r3, [r4, #0]
 8006c92:	e013      	b.n	8006cbc <USB_EPStartXfer+0x45c>
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	785b      	ldrb	r3, [r3, #1]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d10f      	bne.n	8006cbc <USB_EPStartXfer+0x45c>
 8006c9c:	687c      	ldr	r4, [r7, #4]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	441c      	add	r4, r3
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	011b      	lsls	r3, r3, #4
 8006cae:	4423      	add	r3, r4
 8006cb0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006cb4:	461c      	mov	r4, r3
 8006cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	8023      	strh	r3, [r4, #0]
 8006cbc:	687c      	ldr	r4, [r7, #4]
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	785b      	ldrb	r3, [r3, #1]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d14e      	bne.n	8006d64 <USB_EPStartXfer+0x504>
 8006cc6:	687c      	ldr	r4, [r7, #4]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	441c      	add	r4, r3
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	011b      	lsls	r3, r3, #4
 8006cd8:	4423      	add	r3, r4
 8006cda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006cde:	461c      	mov	r4, r3
 8006ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10e      	bne.n	8006d04 <USB_EPStartXfer+0x4a4>
 8006ce6:	8823      	ldrh	r3, [r4, #0]
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	8023      	strh	r3, [r4, #0]
 8006cf2:	8823      	ldrh	r3, [r4, #0]
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	8023      	strh	r3, [r4, #0]
 8006d02:	e043      	b.n	8006d8c <USB_EPStartXfer+0x52c>
 8006d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d06:	2b3e      	cmp	r3, #62	; 0x3e
 8006d08:	d816      	bhi.n	8006d38 <USB_EPStartXfer+0x4d8>
 8006d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0c:	085b      	lsrs	r3, r3, #1
 8006d0e:	617b      	str	r3, [r7, #20]
 8006d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d002      	beq.n	8006d20 <USB_EPStartXfer+0x4c0>
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	617b      	str	r3, [r7, #20]
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	029b      	lsls	r3, r3, #10
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	8023      	strh	r3, [r4, #0]
 8006d2a:	e02f      	b.n	8006d8c <USB_EPStartXfer+0x52c>
 8006d2c:	ffff80c0 	.word	0xffff80c0
 8006d30:	ffffc080 	.word	0xffffc080
 8006d34:	ffff8080 	.word	0xffff8080
 8006d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3a:	095b      	lsrs	r3, r3, #5
 8006d3c:	617b      	str	r3, [r7, #20]
 8006d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d40:	f003 031f 	and.w	r3, r3, #31
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d102      	bne.n	8006d4e <USB_EPStartXfer+0x4ee>
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	617b      	str	r3, [r7, #20]
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	029b      	lsls	r3, r3, #10
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	8023      	strh	r3, [r4, #0]
 8006d62:	e013      	b.n	8006d8c <USB_EPStartXfer+0x52c>
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	785b      	ldrb	r3, [r3, #1]
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d10f      	bne.n	8006d8c <USB_EPStartXfer+0x52c>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	441c      	add	r4, r3
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	011b      	lsls	r3, r3, #4
 8006d7c:	4423      	add	r3, r4
 8006d7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d82:	613b      	str	r3, [r7, #16]
 8006d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4413      	add	r3, r2
 8006d96:	881b      	ldrh	r3, [r3, #0]
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da2:	b29c      	uxth	r4, r3
 8006da4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006da8:	b29c      	uxth	r4, r3
 8006daa:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006dae:	b29c      	uxth	r4, r3
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	441a      	add	r2, r3
 8006dba:	4b04      	ldr	r3, [pc, #16]	; (8006dcc <USB_EPStartXfer+0x56c>)
 8006dbc:	4323      	orrs	r3, r4
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3734      	adds	r7, #52	; 0x34
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd90      	pop	{r4, r7, pc}
 8006dcc:	ffff8080 	.word	0xffff8080

08006dd0 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006dd0:	b490      	push	{r4, r7}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	785b      	ldrb	r3, [r3, #1]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d018      	beq.n	8006e14 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4413      	add	r3, r2
 8006dec:	881b      	ldrh	r3, [r3, #0]
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006df4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006df8:	b29c      	uxth	r4, r3
 8006dfa:	f084 0310 	eor.w	r3, r4, #16
 8006dfe:	b29c      	uxth	r4, r3
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	441a      	add	r2, r3
 8006e0a:	4b11      	ldr	r3, [pc, #68]	; (8006e50 <USB_EPSetStall+0x80>)
 8006e0c:	4323      	orrs	r3, r4
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	8013      	strh	r3, [r2, #0]
 8006e12:	e017      	b.n	8006e44 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	881b      	ldrh	r3, [r3, #0]
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e2a:	b29c      	uxth	r4, r3
 8006e2c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006e30:	b29c      	uxth	r4, r3
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	441a      	add	r2, r3
 8006e3c:	4b04      	ldr	r3, [pc, #16]	; (8006e50 <USB_EPSetStall+0x80>)
 8006e3e:	4323      	orrs	r3, r4
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bc90      	pop	{r4, r7}
 8006e4e:	4770      	bx	lr
 8006e50:	ffff8080 	.word	0xffff8080

08006e54 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e54:	b490      	push	{r4, r7}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	7b1b      	ldrb	r3, [r3, #12]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d17d      	bne.n	8006f62 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	785b      	ldrb	r3, [r3, #1]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d03d      	beq.n	8006eea <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	4413      	add	r3, r2
 8006e78:	881b      	ldrh	r3, [r3, #0]
 8006e7a:	b29c      	uxth	r4, r3
 8006e7c:	4623      	mov	r3, r4
 8006e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d014      	beq.n	8006eb0 <USB_EPClearStall+0x5c>
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4413      	add	r3, r2
 8006e90:	881b      	ldrh	r3, [r3, #0]
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e9c:	b29c      	uxth	r4, r3
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	441a      	add	r2, r3
 8006ea8:	4b31      	ldr	r3, [pc, #196]	; (8006f70 <USB_EPClearStall+0x11c>)
 8006eaa:	4323      	orrs	r3, r4
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	78db      	ldrb	r3, [r3, #3]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d054      	beq.n	8006f62 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4413      	add	r3, r2
 8006ec2:	881b      	ldrh	r3, [r3, #0]
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ece:	b29c      	uxth	r4, r3
 8006ed0:	f084 0320 	eor.w	r3, r4, #32
 8006ed4:	b29c      	uxth	r4, r3
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	441a      	add	r2, r3
 8006ee0:	4b24      	ldr	r3, [pc, #144]	; (8006f74 <USB_EPClearStall+0x120>)
 8006ee2:	4323      	orrs	r3, r4
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	8013      	strh	r3, [r2, #0]
 8006ee8:	e03b      	b.n	8006f62 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4413      	add	r3, r2
 8006ef4:	881b      	ldrh	r3, [r3, #0]
 8006ef6:	b29c      	uxth	r4, r3
 8006ef8:	4623      	mov	r3, r4
 8006efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d014      	beq.n	8006f2c <USB_EPClearStall+0xd8>
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	4413      	add	r3, r2
 8006f0c:	881b      	ldrh	r3, [r3, #0]
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f18:	b29c      	uxth	r4, r3
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	441a      	add	r2, r3
 8006f24:	4b14      	ldr	r3, [pc, #80]	; (8006f78 <USB_EPClearStall+0x124>)
 8006f26:	4323      	orrs	r3, r4
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	4413      	add	r3, r2
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f42:	b29c      	uxth	r4, r3
 8006f44:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006f48:	b29c      	uxth	r4, r3
 8006f4a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006f4e:	b29c      	uxth	r4, r3
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	441a      	add	r2, r3
 8006f5a:	4b06      	ldr	r3, [pc, #24]	; (8006f74 <USB_EPClearStall+0x120>)
 8006f5c:	4323      	orrs	r3, r4
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3708      	adds	r7, #8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bc90      	pop	{r4, r7}
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	ffff80c0 	.word	0xffff80c0
 8006f74:	ffff8080 	.word	0xffff8080
 8006f78:	ffffc080 	.word	0xffffc080

08006f7c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	460b      	mov	r3, r1
 8006f86:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006f88:	78fb      	ldrb	r3, [r7, #3]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d103      	bne.n	8006f96 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2280      	movs	r2, #128	; 0x80
 8006f92:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bc80      	pop	{r7}
 8006fa0:	4770      	bx	lr

08006fa2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b083      	sub	sp, #12
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bc80      	pop	{r7}
 8006fb4:	4770      	bx	lr

08006fb6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006fb6:	b480      	push	{r7}
 8006fb8:	b083      	sub	sp, #12
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bc80      	pop	{r7}
 8006fc8:	4770      	bx	lr

08006fca <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b085      	sub	sp, #20
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3714      	adds	r7, #20
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bc80      	pop	{r7}
 8006fe6:	4770      	bx	lr

08006fe8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bc80      	pop	{r7}
 8006ffc:	4770      	bx	lr

08006ffe <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ffe:	b480      	push	{r7}
 8007000:	b08d      	sub	sp, #52	; 0x34
 8007002:	af00      	add	r7, sp, #0
 8007004:	60f8      	str	r0, [r7, #12]
 8007006:	60b9      	str	r1, [r7, #8]
 8007008:	4611      	mov	r1, r2
 800700a:	461a      	mov	r2, r3
 800700c:	460b      	mov	r3, r1
 800700e:	80fb      	strh	r3, [r7, #6]
 8007010:	4613      	mov	r3, r2
 8007012:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007014:	88bb      	ldrh	r3, [r7, #4]
 8007016:	3301      	adds	r3, #1
 8007018:	085b      	lsrs	r3, r3, #1
 800701a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007024:	88fb      	ldrh	r3, [r7, #6]
 8007026:	005a      	lsls	r2, r3, #1
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	4413      	add	r3, r2
 800702c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007030:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007032:	6a3b      	ldr	r3, [r7, #32]
 8007034:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007036:	e01e      	b.n	8007076 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800703e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007040:	3301      	adds	r3, #1
 8007042:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	b29b      	uxth	r3, r3
 800704a:	021b      	lsls	r3, r3, #8
 800704c:	b29b      	uxth	r3, r3
 800704e:	461a      	mov	r2, r3
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	4313      	orrs	r3, r2
 8007054:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	b29a      	uxth	r2, r3
 800705a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800705e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007060:	3302      	adds	r3, #2
 8007062:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007066:	3302      	adds	r3, #2
 8007068:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800706a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706c:	3301      	adds	r3, #1
 800706e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007072:	3b01      	subs	r3, #1
 8007074:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007078:	2b00      	cmp	r3, #0
 800707a:	d1dd      	bne.n	8007038 <USB_WritePMA+0x3a>
  }
}
 800707c:	bf00      	nop
 800707e:	3734      	adds	r7, #52	; 0x34
 8007080:	46bd      	mov	sp, r7
 8007082:	bc80      	pop	{r7}
 8007084:	4770      	bx	lr

08007086 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007086:	b480      	push	{r7}
 8007088:	b08b      	sub	sp, #44	; 0x2c
 800708a:	af00      	add	r7, sp, #0
 800708c:	60f8      	str	r0, [r7, #12]
 800708e:	60b9      	str	r1, [r7, #8]
 8007090:	4611      	mov	r1, r2
 8007092:	461a      	mov	r2, r3
 8007094:	460b      	mov	r3, r1
 8007096:	80fb      	strh	r3, [r7, #6]
 8007098:	4613      	mov	r3, r2
 800709a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800709c:	88bb      	ldrh	r3, [r7, #4]
 800709e:	085b      	lsrs	r3, r3, #1
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80070ac:	88fb      	ldrh	r3, [r7, #6]
 80070ae:	005a      	lsls	r2, r3, #1
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	4413      	add	r3, r2
 80070b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070b8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	627b      	str	r3, [r7, #36]	; 0x24
 80070be:	e01b      	b.n	80070f8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80070c0:	6a3b      	ldr	r3, [r7, #32]
 80070c2:	881b      	ldrh	r3, [r3, #0]
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80070c8:	6a3b      	ldr	r3, [r7, #32]
 80070ca:	3302      	adds	r3, #2
 80070cc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	b2da      	uxtb	r2, r3
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	3301      	adds	r3, #1
 80070da:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	0a1b      	lsrs	r3, r3, #8
 80070e0:	b2da      	uxtb	r2, r3
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	3301      	adds	r3, #1
 80070ea:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80070ec:	6a3b      	ldr	r3, [r7, #32]
 80070ee:	3302      	adds	r3, #2
 80070f0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80070f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f4:	3b01      	subs	r3, #1
 80070f6:	627b      	str	r3, [r7, #36]	; 0x24
 80070f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1e0      	bne.n	80070c0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80070fe:	88bb      	ldrh	r3, [r7, #4]
 8007100:	f003 0301 	and.w	r3, r3, #1
 8007104:	b29b      	uxth	r3, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d007      	beq.n	800711a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800710a:	6a3b      	ldr	r3, [r7, #32]
 800710c:	881b      	ldrh	r3, [r3, #0]
 800710e:	b29b      	uxth	r3, r3
 8007110:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	b2da      	uxtb	r2, r3
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	701a      	strb	r2, [r3, #0]
  }
}
 800711a:	bf00      	nop
 800711c:	372c      	adds	r7, #44	; 0x2c
 800711e:	46bd      	mov	sp, r7
 8007120:	bc80      	pop	{r7}
 8007122:	4770      	bx	lr

08007124 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	460b      	mov	r3, r1
 800712e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007130:	2300      	movs	r3, #0
 8007132:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	7c1b      	ldrb	r3, [r3, #16]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d115      	bne.n	8007168 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800713c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007140:	2202      	movs	r2, #2
 8007142:	2181      	movs	r1, #129	; 0x81
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f001 fe8e 	bl	8008e66 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2201      	movs	r2, #1
 800714e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007150:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007154:	2202      	movs	r2, #2
 8007156:	2101      	movs	r1, #1
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f001 fe84 	bl	8008e66 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2201      	movs	r2, #1
 8007162:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007166:	e012      	b.n	800718e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007168:	2340      	movs	r3, #64	; 0x40
 800716a:	2202      	movs	r2, #2
 800716c:	2181      	movs	r1, #129	; 0x81
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f001 fe79 	bl	8008e66 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800717a:	2340      	movs	r3, #64	; 0x40
 800717c:	2202      	movs	r2, #2
 800717e:	2101      	movs	r1, #1
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f001 fe70 	bl	8008e66 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800718e:	2308      	movs	r3, #8
 8007190:	2203      	movs	r2, #3
 8007192:	2182      	movs	r1, #130	; 0x82
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f001 fe66 	bl	8008e66 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2201      	movs	r2, #1
 800719e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80071a0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80071a4:	f001 ff80 	bl	80090a8 <USBD_static_malloc>
 80071a8:	4602      	mov	r2, r0
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d102      	bne.n	80071c0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80071ba:	2301      	movs	r3, #1
 80071bc:	73fb      	strb	r3, [r7, #15]
 80071be:	e026      	b.n	800720e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	2200      	movs	r2, #0
 80071de:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	7c1b      	ldrb	r3, [r3, #16]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d109      	bne.n	80071fe <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071f4:	2101      	movs	r1, #1
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f001 ff1f 	bl	800903a <USBD_LL_PrepareReceive>
 80071fc:	e007      	b.n	800720e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007204:	2340      	movs	r3, #64	; 0x40
 8007206:	2101      	movs	r1, #1
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f001 ff16 	bl	800903a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800720e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007210:	4618      	mov	r0, r3
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	460b      	mov	r3, r1
 8007222:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007224:	2300      	movs	r3, #0
 8007226:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007228:	2181      	movs	r1, #129	; 0x81
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f001 fe41 	bl	8008eb2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007236:	2101      	movs	r1, #1
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f001 fe3a 	bl	8008eb2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007246:	2182      	movs	r1, #130	; 0x82
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f001 fe32 	bl	8008eb2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00e      	beq.n	800727c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800726e:	4618      	mov	r0, r3
 8007270:	f001 ff26 	bl	80090c0 <USBD_static_free>
    pdev->pClassData = NULL;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800727c:	7bfb      	ldrb	r3, [r7, #15]
}
 800727e:	4618      	mov	r0, r3
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b086      	sub	sp, #24
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
 800728e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007296:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007298:	2300      	movs	r3, #0
 800729a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800729c:	2300      	movs	r3, #0
 800729e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80072a0:	2300      	movs	r3, #0
 80072a2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d039      	beq.n	8007324 <USBD_CDC_Setup+0x9e>
 80072b0:	2b20      	cmp	r3, #32
 80072b2:	d17c      	bne.n	80073ae <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	88db      	ldrh	r3, [r3, #6]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d029      	beq.n	8007310 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	b25b      	sxtb	r3, r3
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	da11      	bge.n	80072ea <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80072d2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80072d4:	683a      	ldr	r2, [r7, #0]
 80072d6:	88d2      	ldrh	r2, [r2, #6]
 80072d8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80072da:	6939      	ldr	r1, [r7, #16]
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	88db      	ldrh	r3, [r3, #6]
 80072e0:	461a      	mov	r2, r3
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f001 f9f6 	bl	80086d4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80072e8:	e068      	b.n	80073bc <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	785a      	ldrb	r2, [r3, #1]
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	88db      	ldrh	r3, [r3, #6]
 80072f8:	b2da      	uxtb	r2, r3
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007300:	6939      	ldr	r1, [r7, #16]
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	88db      	ldrh	r3, [r3, #6]
 8007306:	461a      	mov	r2, r3
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f001 fa11 	bl	8008730 <USBD_CtlPrepareRx>
      break;
 800730e:	e055      	b.n	80073bc <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	683a      	ldr	r2, [r7, #0]
 800731a:	7850      	ldrb	r0, [r2, #1]
 800731c:	2200      	movs	r2, #0
 800731e:	6839      	ldr	r1, [r7, #0]
 8007320:	4798      	blx	r3
      break;
 8007322:	e04b      	b.n	80073bc <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	785b      	ldrb	r3, [r3, #1]
 8007328:	2b0a      	cmp	r3, #10
 800732a:	d017      	beq.n	800735c <USBD_CDC_Setup+0xd6>
 800732c:	2b0b      	cmp	r3, #11
 800732e:	d029      	beq.n	8007384 <USBD_CDC_Setup+0xfe>
 8007330:	2b00      	cmp	r3, #0
 8007332:	d133      	bne.n	800739c <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800733a:	2b03      	cmp	r3, #3
 800733c:	d107      	bne.n	800734e <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800733e:	f107 030c 	add.w	r3, r7, #12
 8007342:	2202      	movs	r2, #2
 8007344:	4619      	mov	r1, r3
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f001 f9c4 	bl	80086d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800734c:	e02e      	b.n	80073ac <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800734e:	6839      	ldr	r1, [r7, #0]
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f001 f955 	bl	8008600 <USBD_CtlError>
            ret = USBD_FAIL;
 8007356:	2302      	movs	r3, #2
 8007358:	75fb      	strb	r3, [r7, #23]
          break;
 800735a:	e027      	b.n	80073ac <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007362:	2b03      	cmp	r3, #3
 8007364:	d107      	bne.n	8007376 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007366:	f107 030f 	add.w	r3, r7, #15
 800736a:	2201      	movs	r2, #1
 800736c:	4619      	mov	r1, r3
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f001 f9b0 	bl	80086d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007374:	e01a      	b.n	80073ac <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8007376:	6839      	ldr	r1, [r7, #0]
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f001 f941 	bl	8008600 <USBD_CtlError>
            ret = USBD_FAIL;
 800737e:	2302      	movs	r3, #2
 8007380:	75fb      	strb	r3, [r7, #23]
          break;
 8007382:	e013      	b.n	80073ac <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800738a:	2b03      	cmp	r3, #3
 800738c:	d00d      	beq.n	80073aa <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800738e:	6839      	ldr	r1, [r7, #0]
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f001 f935 	bl	8008600 <USBD_CtlError>
            ret = USBD_FAIL;
 8007396:	2302      	movs	r3, #2
 8007398:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800739a:	e006      	b.n	80073aa <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800739c:	6839      	ldr	r1, [r7, #0]
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f001 f92e 	bl	8008600 <USBD_CtlError>
          ret = USBD_FAIL;
 80073a4:	2302      	movs	r3, #2
 80073a6:	75fb      	strb	r3, [r7, #23]
          break;
 80073a8:	e000      	b.n	80073ac <USBD_CDC_Setup+0x126>
          break;
 80073aa:	bf00      	nop
      }
      break;
 80073ac:	e006      	b.n	80073bc <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80073ae:	6839      	ldr	r1, [r7, #0]
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f001 f925 	bl	8008600 <USBD_CtlError>
      ret = USBD_FAIL;
 80073b6:	2302      	movs	r3, #2
 80073b8:	75fb      	strb	r3, [r7, #23]
      break;
 80073ba:	bf00      	nop
  }

  return ret;
 80073bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3718      	adds	r7, #24
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b084      	sub	sp, #16
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	460b      	mov	r3, r1
 80073d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073d8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073e0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d037      	beq.n	800745c <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80073ec:	78fa      	ldrb	r2, [r7, #3]
 80073ee:	6879      	ldr	r1, [r7, #4]
 80073f0:	4613      	mov	r3, r2
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	4413      	add	r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	440b      	add	r3, r1
 80073fa:	331c      	adds	r3, #28
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d026      	beq.n	8007450 <USBD_CDC_DataIn+0x8a>
 8007402:	78fa      	ldrb	r2, [r7, #3]
 8007404:	6879      	ldr	r1, [r7, #4]
 8007406:	4613      	mov	r3, r2
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	4413      	add	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	440b      	add	r3, r1
 8007410:	331c      	adds	r3, #28
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	78fa      	ldrb	r2, [r7, #3]
 8007416:	68b9      	ldr	r1, [r7, #8]
 8007418:	0152      	lsls	r2, r2, #5
 800741a:	440a      	add	r2, r1
 800741c:	3238      	adds	r2, #56	; 0x38
 800741e:	6812      	ldr	r2, [r2, #0]
 8007420:	fbb3 f1f2 	udiv	r1, r3, r2
 8007424:	fb02 f201 	mul.w	r2, r2, r1
 8007428:	1a9b      	subs	r3, r3, r2
 800742a:	2b00      	cmp	r3, #0
 800742c:	d110      	bne.n	8007450 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800742e:	78fa      	ldrb	r2, [r7, #3]
 8007430:	6879      	ldr	r1, [r7, #4]
 8007432:	4613      	mov	r3, r2
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	4413      	add	r3, r2
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	440b      	add	r3, r1
 800743c:	331c      	adds	r3, #28
 800743e:	2200      	movs	r2, #0
 8007440:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007442:	78f9      	ldrb	r1, [r7, #3]
 8007444:	2300      	movs	r3, #0
 8007446:	2200      	movs	r2, #0
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f001 fdd3 	bl	8008ff4 <USBD_LL_Transmit>
 800744e:	e003      	b.n	8007458 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007458:	2300      	movs	r3, #0
 800745a:	e000      	b.n	800745e <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 800745c:	2302      	movs	r3, #2
  }
}
 800745e:	4618      	mov	r0, r3
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b084      	sub	sp, #16
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	460b      	mov	r3, r1
 8007470:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007478:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800747a:	78fb      	ldrb	r3, [r7, #3]
 800747c:	4619      	mov	r1, r3
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f001 fdfe 	bl	8009080 <USBD_LL_GetRxDataSize>
 8007484:	4602      	mov	r2, r0
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00d      	beq.n	80074b2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80074aa:	4611      	mov	r1, r2
 80074ac:	4798      	blx	r3

    return USBD_OK;
 80074ae:	2300      	movs	r3, #0
 80074b0:	e000      	b.n	80074b4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80074b2:	2302      	movs	r3, #2
  }
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ca:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d015      	beq.n	8007502 <USBD_CDC_EP0_RxReady+0x46>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80074dc:	2bff      	cmp	r3, #255	; 0xff
 80074de:	d010      	beq.n	8007502 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80074ee:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80074f6:	b292      	uxth	r2, r2
 80074f8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	22ff      	movs	r2, #255	; 0xff
 80074fe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2243      	movs	r2, #67	; 0x43
 8007518:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800751a:	4b03      	ldr	r3, [pc, #12]	; (8007528 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800751c:	4618      	mov	r0, r3
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	bc80      	pop	{r7}
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	200000ac 	.word	0x200000ac

0800752c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2243      	movs	r2, #67	; 0x43
 8007538:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800753a:	4b03      	ldr	r3, [pc, #12]	; (8007548 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800753c:	4618      	mov	r0, r3
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	bc80      	pop	{r7}
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	20000068 	.word	0x20000068

0800754c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2243      	movs	r2, #67	; 0x43
 8007558:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800755a:	4b03      	ldr	r3, [pc, #12]	; (8007568 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800755c:	4618      	mov	r0, r3
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	bc80      	pop	{r7}
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	200000f0 	.word	0x200000f0

0800756c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	220a      	movs	r2, #10
 8007578:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800757a:	4b03      	ldr	r3, [pc, #12]	; (8007588 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800757c:	4618      	mov	r0, r3
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	bc80      	pop	{r7}
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	20000024 	.word	0x20000024

0800758c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800758c:	b480      	push	{r7}
 800758e:	b085      	sub	sp, #20
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007596:	2302      	movs	r3, #2
 8007598:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d005      	beq.n	80075ac <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	683a      	ldr	r2, [r7, #0]
 80075a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80075a8:	2300      	movs	r3, #0
 80075aa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80075ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3714      	adds	r7, #20
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bc80      	pop	{r7}
 80075b6:	4770      	bx	lr

080075b8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b087      	sub	sp, #28
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	4613      	mov	r3, r2
 80075c4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075cc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80075d6:	88fa      	ldrh	r2, [r7, #6]
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	371c      	adds	r7, #28
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bc80      	pop	{r7}
 80075e8:	4770      	bx	lr

080075ea <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80075ea:	b480      	push	{r7}
 80075ec:	b085      	sub	sp, #20
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
 80075f2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075fa:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	683a      	ldr	r2, [r7, #0]
 8007600:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3714      	adds	r7, #20
 800760a:	46bd      	mov	sp, r7
 800760c:	bc80      	pop	{r7}
 800760e:	4770      	bx	lr

08007610 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800761e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007626:	2b00      	cmp	r3, #0
 8007628:	d01c      	beq.n	8007664 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007630:	2b00      	cmp	r3, #0
 8007632:	d115      	bne.n	8007660 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2201      	movs	r2, #1
 8007638:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007652:	b29b      	uxth	r3, r3
 8007654:	2181      	movs	r1, #129	; 0x81
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f001 fccc 	bl	8008ff4 <USBD_LL_Transmit>

      return USBD_OK;
 800765c:	2300      	movs	r3, #0
 800765e:	e002      	b.n	8007666 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007660:	2301      	movs	r3, #1
 8007662:	e000      	b.n	8007666 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007664:	2302      	movs	r3, #2
  }
}
 8007666:	4618      	mov	r0, r3
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b084      	sub	sp, #16
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800767c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007684:	2b00      	cmp	r3, #0
 8007686:	d017      	beq.n	80076b8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	7c1b      	ldrb	r3, [r3, #16]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d109      	bne.n	80076a4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007696:	f44f 7300 	mov.w	r3, #512	; 0x200
 800769a:	2101      	movs	r1, #1
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f001 fccc 	bl	800903a <USBD_LL_PrepareReceive>
 80076a2:	e007      	b.n	80076b4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076aa:	2340      	movs	r3, #64	; 0x40
 80076ac:	2101      	movs	r1, #1
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f001 fcc3 	bl	800903a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80076b4:	2300      	movs	r3, #0
 80076b6:	e000      	b.n	80076ba <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80076b8:	2302      	movs	r3, #2
  }
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b084      	sub	sp, #16
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	60f8      	str	r0, [r7, #12]
 80076ca:	60b9      	str	r1, [r7, #8]
 80076cc:	4613      	mov	r3, r2
 80076ce:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d101      	bne.n	80076da <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80076d6:	2302      	movs	r3, #2
 80076d8:	e01a      	b.n	8007710 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d003      	beq.n	80076ec <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d003      	beq.n	80076fa <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	68ba      	ldr	r2, [r7, #8]
 80076f6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	79fa      	ldrb	r2, [r7, #7]
 8007706:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007708:	68f8      	ldr	r0, [r7, #12]
 800770a:	f001 fb37 	bl	8008d7c <USBD_LL_Init>

  return USBD_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	3710      	adds	r7, #16
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007722:	2300      	movs	r3, #0
 8007724:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d006      	beq.n	800773a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	683a      	ldr	r2, [r7, #0]
 8007730:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007734:	2300      	movs	r3, #0
 8007736:	73fb      	strb	r3, [r7, #15]
 8007738:	e001      	b.n	800773e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800773a:	2302      	movs	r3, #2
 800773c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800773e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007740:	4618      	mov	r0, r3
 8007742:	3714      	adds	r7, #20
 8007744:	46bd      	mov	sp, r7
 8007746:	bc80      	pop	{r7}
 8007748:	4770      	bx	lr

0800774a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b082      	sub	sp, #8
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f001 fb6c 	bl	8008e30 <USBD_LL_Start>

  return USBD_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3708      	adds	r7, #8
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007762:	b480      	push	{r7}
 8007764:	b083      	sub	sp, #12
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	bc80      	pop	{r7}
 8007774:	4770      	bx	lr

08007776 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b084      	sub	sp, #16
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
 800777e:	460b      	mov	r3, r1
 8007780:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007782:	2302      	movs	r3, #2
 8007784:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00c      	beq.n	80077aa <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	78fa      	ldrb	r2, [r7, #3]
 800779a:	4611      	mov	r1, r2
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	4798      	blx	r3
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d101      	bne.n	80077aa <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80077aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	460b      	mov	r3, r1
 80077be:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	78fa      	ldrb	r2, [r7, #3]
 80077ca:	4611      	mov	r1, r2
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	4798      	blx	r3

  return USBD_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3708      	adds	r7, #8
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b082      	sub	sp, #8
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
 80077e2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80077ea:	6839      	ldr	r1, [r7, #0]
 80077ec:	4618      	mov	r0, r3
 80077ee:	f000 fecb 	bl	8008588 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007800:	461a      	mov	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800780e:	f003 031f 	and.w	r3, r3, #31
 8007812:	2b01      	cmp	r3, #1
 8007814:	d00c      	beq.n	8007830 <USBD_LL_SetupStage+0x56>
 8007816:	2b01      	cmp	r3, #1
 8007818:	d302      	bcc.n	8007820 <USBD_LL_SetupStage+0x46>
 800781a:	2b02      	cmp	r3, #2
 800781c:	d010      	beq.n	8007840 <USBD_LL_SetupStage+0x66>
 800781e:	e017      	b.n	8007850 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007826:	4619      	mov	r1, r3
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 f9cb 	bl	8007bc4 <USBD_StdDevReq>
      break;
 800782e:	e01a      	b.n	8007866 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007836:	4619      	mov	r1, r3
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fa2d 	bl	8007c98 <USBD_StdItfReq>
      break;
 800783e:	e012      	b.n	8007866 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007846:	4619      	mov	r1, r3
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fa6b 	bl	8007d24 <USBD_StdEPReq>
      break;
 800784e:	e00a      	b.n	8007866 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007856:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800785a:	b2db      	uxtb	r3, r3
 800785c:	4619      	mov	r1, r3
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f001 fb46 	bl	8008ef0 <USBD_LL_StallEP>
      break;
 8007864:	bf00      	nop
  }

  return USBD_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3708      	adds	r7, #8
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	460b      	mov	r3, r1
 800787a:	607a      	str	r2, [r7, #4]
 800787c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800787e:	7afb      	ldrb	r3, [r7, #11]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d14b      	bne.n	800791c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800788a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007892:	2b03      	cmp	r3, #3
 8007894:	d134      	bne.n	8007900 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	68da      	ldr	r2, [r3, #12]
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d919      	bls.n	80078d6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	68da      	ldr	r2, [r3, #12]
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	1ad2      	subs	r2, r2, r3
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	68da      	ldr	r2, [r3, #12]
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d203      	bcs.n	80078c4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	e002      	b.n	80078ca <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	461a      	mov	r2, r3
 80078cc:	6879      	ldr	r1, [r7, #4]
 80078ce:	68f8      	ldr	r0, [r7, #12]
 80078d0:	f000 ff4c 	bl	800876c <USBD_CtlContinueRx>
 80078d4:	e038      	b.n	8007948 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00a      	beq.n	80078f8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80078e8:	2b03      	cmp	r3, #3
 80078ea:	d105      	bne.n	80078f8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f000 ff49 	bl	8008790 <USBD_CtlSendStatus>
 80078fe:	e023      	b.n	8007948 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007906:	2b05      	cmp	r3, #5
 8007908:	d11e      	bne.n	8007948 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2200      	movs	r2, #0
 800790e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007912:	2100      	movs	r1, #0
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	f001 faeb 	bl	8008ef0 <USBD_LL_StallEP>
 800791a:	e015      	b.n	8007948 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007922:	699b      	ldr	r3, [r3, #24]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d00d      	beq.n	8007944 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800792e:	2b03      	cmp	r3, #3
 8007930:	d108      	bne.n	8007944 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	7afa      	ldrb	r2, [r7, #11]
 800793c:	4611      	mov	r1, r2
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	4798      	blx	r3
 8007942:	e001      	b.n	8007948 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007944:	2302      	movs	r3, #2
 8007946:	e000      	b.n	800794a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3718      	adds	r7, #24
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b086      	sub	sp, #24
 8007956:	af00      	add	r7, sp, #0
 8007958:	60f8      	str	r0, [r7, #12]
 800795a:	460b      	mov	r3, r1
 800795c:	607a      	str	r2, [r7, #4]
 800795e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007960:	7afb      	ldrb	r3, [r7, #11]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d17f      	bne.n	8007a66 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	3314      	adds	r3, #20
 800796a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007972:	2b02      	cmp	r3, #2
 8007974:	d15c      	bne.n	8007a30 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	68da      	ldr	r2, [r3, #12]
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	429a      	cmp	r2, r3
 8007980:	d915      	bls.n	80079ae <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	68da      	ldr	r2, [r3, #12]
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	1ad2      	subs	r2, r2, r3
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	b29b      	uxth	r3, r3
 8007996:	461a      	mov	r2, r3
 8007998:	6879      	ldr	r1, [r7, #4]
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	f000 feb6 	bl	800870c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079a0:	2300      	movs	r3, #0
 80079a2:	2200      	movs	r2, #0
 80079a4:	2100      	movs	r1, #0
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f001 fb47 	bl	800903a <USBD_LL_PrepareReceive>
 80079ac:	e04e      	b.n	8007a4c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	6912      	ldr	r2, [r2, #16]
 80079b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80079ba:	fb02 f201 	mul.w	r2, r2, r1
 80079be:	1a9b      	subs	r3, r3, r2
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d11c      	bne.n	80079fe <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	689a      	ldr	r2, [r3, #8]
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d316      	bcc.n	80079fe <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	689a      	ldr	r2, [r3, #8]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80079da:	429a      	cmp	r2, r3
 80079dc:	d20f      	bcs.n	80079fe <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80079de:	2200      	movs	r2, #0
 80079e0:	2100      	movs	r1, #0
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	f000 fe92 	bl	800870c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079f0:	2300      	movs	r3, #0
 80079f2:	2200      	movs	r2, #0
 80079f4:	2100      	movs	r1, #0
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f001 fb1f 	bl	800903a <USBD_LL_PrepareReceive>
 80079fc:	e026      	b.n	8007a4c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00a      	beq.n	8007a20 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007a10:	2b03      	cmp	r3, #3
 8007a12:	d105      	bne.n	8007a20 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007a20:	2180      	movs	r1, #128	; 0x80
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	f001 fa64 	bl	8008ef0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f000 fec4 	bl	80087b6 <USBD_CtlReceiveStatus>
 8007a2e:	e00d      	b.n	8007a4c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a36:	2b04      	cmp	r3, #4
 8007a38:	d004      	beq.n	8007a44 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d103      	bne.n	8007a4c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007a44:	2180      	movs	r1, #128	; 0x80
 8007a46:	68f8      	ldr	r0, [r7, #12]
 8007a48:	f001 fa52 	bl	8008ef0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d11d      	bne.n	8007a92 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f7ff fe83 	bl	8007762 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007a64:	e015      	b.n	8007a92 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a6c:	695b      	ldr	r3, [r3, #20]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00d      	beq.n	8007a8e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007a78:	2b03      	cmp	r3, #3
 8007a7a:	d108      	bne.n	8007a8e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a82:	695b      	ldr	r3, [r3, #20]
 8007a84:	7afa      	ldrb	r2, [r7, #11]
 8007a86:	4611      	mov	r1, r2
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	4798      	blx	r3
 8007a8c:	e001      	b.n	8007a92 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007a8e:	2302      	movs	r3, #2
 8007a90:	e000      	b.n	8007a94 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3718      	adds	r7, #24
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007aa4:	2340      	movs	r3, #64	; 0x40
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f001 f9db 	bl	8008e66 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2240      	movs	r2, #64	; 0x40
 8007abc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ac0:	2340      	movs	r3, #64	; 0x40
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	2180      	movs	r1, #128	; 0x80
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f001 f9cd 	bl	8008e66 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2240      	movs	r2, #64	; 0x40
 8007ad6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d009      	beq.n	8007b14 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	6852      	ldr	r2, [r2, #4]
 8007b0c:	b2d2      	uxtb	r2, r2
 8007b0e:	4611      	mov	r1, r2
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	4798      	blx	r3
  }

  return USBD_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3708      	adds	r7, #8
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007b1e:	b480      	push	{r7}
 8007b20:	b083      	sub	sp, #12
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
 8007b26:	460b      	mov	r3, r1
 8007b28:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	78fa      	ldrb	r2, [r7, #3]
 8007b2e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	370c      	adds	r7, #12
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bc80      	pop	{r7}
 8007b3a:	4770      	bx	lr

08007b3c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2204      	movs	r2, #4
 8007b54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	370c      	adds	r7, #12
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bc80      	pop	{r7}
 8007b62:	4770      	bx	lr

08007b64 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b72:	2b04      	cmp	r3, #4
 8007b74:	d105      	bne.n	8007b82 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bc80      	pop	{r7}
 8007b8c:	4770      	bx	lr

08007b8e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b082      	sub	sp, #8
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b9c:	2b03      	cmp	r3, #3
 8007b9e:	d10b      	bne.n	8007bb8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ba6:	69db      	ldr	r3, [r3, #28]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d005      	beq.n	8007bb8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bb2:	69db      	ldr	r3, [r3, #28]
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
	...

08007bc4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bda:	2b20      	cmp	r3, #32
 8007bdc:	d004      	beq.n	8007be8 <USBD_StdDevReq+0x24>
 8007bde:	2b40      	cmp	r3, #64	; 0x40
 8007be0:	d002      	beq.n	8007be8 <USBD_StdDevReq+0x24>
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d008      	beq.n	8007bf8 <USBD_StdDevReq+0x34>
 8007be6:	e04c      	b.n	8007c82 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	6839      	ldr	r1, [r7, #0]
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	4798      	blx	r3
      break;
 8007bf6:	e049      	b.n	8007c8c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	785b      	ldrb	r3, [r3, #1]
 8007bfc:	2b09      	cmp	r3, #9
 8007bfe:	d83a      	bhi.n	8007c76 <USBD_StdDevReq+0xb2>
 8007c00:	a201      	add	r2, pc, #4	; (adr r2, 8007c08 <USBD_StdDevReq+0x44>)
 8007c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c06:	bf00      	nop
 8007c08:	08007c59 	.word	0x08007c59
 8007c0c:	08007c6d 	.word	0x08007c6d
 8007c10:	08007c77 	.word	0x08007c77
 8007c14:	08007c63 	.word	0x08007c63
 8007c18:	08007c77 	.word	0x08007c77
 8007c1c:	08007c3b 	.word	0x08007c3b
 8007c20:	08007c31 	.word	0x08007c31
 8007c24:	08007c77 	.word	0x08007c77
 8007c28:	08007c4f 	.word	0x08007c4f
 8007c2c:	08007c45 	.word	0x08007c45
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007c30:	6839      	ldr	r1, [r7, #0]
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f9d4 	bl	8007fe0 <USBD_GetDescriptor>
          break;
 8007c38:	e022      	b.n	8007c80 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007c3a:	6839      	ldr	r1, [r7, #0]
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 fb37 	bl	80082b0 <USBD_SetAddress>
          break;
 8007c42:	e01d      	b.n	8007c80 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007c44:	6839      	ldr	r1, [r7, #0]
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 fb74 	bl	8008334 <USBD_SetConfig>
          break;
 8007c4c:	e018      	b.n	8007c80 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007c4e:	6839      	ldr	r1, [r7, #0]
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 fbfd 	bl	8008450 <USBD_GetConfig>
          break;
 8007c56:	e013      	b.n	8007c80 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007c58:	6839      	ldr	r1, [r7, #0]
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 fc2c 	bl	80084b8 <USBD_GetStatus>
          break;
 8007c60:	e00e      	b.n	8007c80 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007c62:	6839      	ldr	r1, [r7, #0]
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 fc5a 	bl	800851e <USBD_SetFeature>
          break;
 8007c6a:	e009      	b.n	8007c80 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007c6c:	6839      	ldr	r1, [r7, #0]
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fc69 	bl	8008546 <USBD_ClrFeature>
          break;
 8007c74:	e004      	b.n	8007c80 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007c76:	6839      	ldr	r1, [r7, #0]
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 fcc1 	bl	8008600 <USBD_CtlError>
          break;
 8007c7e:	bf00      	nop
      }
      break;
 8007c80:	e004      	b.n	8007c8c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007c82:	6839      	ldr	r1, [r7, #0]
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 fcbb 	bl	8008600 <USBD_CtlError>
      break;
 8007c8a:	bf00      	nop
  }

  return ret;
 8007c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop

08007c98 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cae:	2b20      	cmp	r3, #32
 8007cb0:	d003      	beq.n	8007cba <USBD_StdItfReq+0x22>
 8007cb2:	2b40      	cmp	r3, #64	; 0x40
 8007cb4:	d001      	beq.n	8007cba <USBD_StdItfReq+0x22>
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d12a      	bne.n	8007d10 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d81d      	bhi.n	8007d02 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	889b      	ldrh	r3, [r3, #4]
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d813      	bhi.n	8007cf8 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	6839      	ldr	r1, [r7, #0]
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	4798      	blx	r3
 8007cde:	4603      	mov	r3, r0
 8007ce0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	88db      	ldrh	r3, [r3, #6]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d110      	bne.n	8007d0c <USBD_StdItfReq+0x74>
 8007cea:	7bfb      	ldrb	r3, [r7, #15]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d10d      	bne.n	8007d0c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 fd4d 	bl	8008790 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007cf6:	e009      	b.n	8007d0c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8007cf8:	6839      	ldr	r1, [r7, #0]
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 fc80 	bl	8008600 <USBD_CtlError>
          break;
 8007d00:	e004      	b.n	8007d0c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8007d02:	6839      	ldr	r1, [r7, #0]
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fc7b 	bl	8008600 <USBD_CtlError>
          break;
 8007d0a:	e000      	b.n	8007d0e <USBD_StdItfReq+0x76>
          break;
 8007d0c:	bf00      	nop
      }
      break;
 8007d0e:	e004      	b.n	8007d1a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8007d10:	6839      	ldr	r1, [r7, #0]
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 fc74 	bl	8008600 <USBD_CtlError>
      break;
 8007d18:	bf00      	nop
  }

  return USBD_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3710      	adds	r7, #16
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	889b      	ldrh	r3, [r3, #4]
 8007d36:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d40:	2b20      	cmp	r3, #32
 8007d42:	d004      	beq.n	8007d4e <USBD_StdEPReq+0x2a>
 8007d44:	2b40      	cmp	r3, #64	; 0x40
 8007d46:	d002      	beq.n	8007d4e <USBD_StdEPReq+0x2a>
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d008      	beq.n	8007d5e <USBD_StdEPReq+0x3a>
 8007d4c:	e13d      	b.n	8007fca <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	6839      	ldr	r1, [r7, #0]
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	4798      	blx	r3
      break;
 8007d5c:	e13a      	b.n	8007fd4 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d66:	2b20      	cmp	r3, #32
 8007d68:	d10a      	bne.n	8007d80 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	6839      	ldr	r1, [r7, #0]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	4798      	blx	r3
 8007d78:	4603      	mov	r3, r0
 8007d7a:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007d7c:	7bfb      	ldrb	r3, [r7, #15]
 8007d7e:	e12a      	b.n	8007fd6 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	785b      	ldrb	r3, [r3, #1]
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d03e      	beq.n	8007e06 <USBD_StdEPReq+0xe2>
 8007d88:	2b03      	cmp	r3, #3
 8007d8a:	d002      	beq.n	8007d92 <USBD_StdEPReq+0x6e>
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d070      	beq.n	8007e72 <USBD_StdEPReq+0x14e>
 8007d90:	e115      	b.n	8007fbe <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d002      	beq.n	8007da2 <USBD_StdEPReq+0x7e>
 8007d9c:	2b03      	cmp	r3, #3
 8007d9e:	d015      	beq.n	8007dcc <USBD_StdEPReq+0xa8>
 8007da0:	e02b      	b.n	8007dfa <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007da2:	7bbb      	ldrb	r3, [r7, #14]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00c      	beq.n	8007dc2 <USBD_StdEPReq+0x9e>
 8007da8:	7bbb      	ldrb	r3, [r7, #14]
 8007daa:	2b80      	cmp	r3, #128	; 0x80
 8007dac:	d009      	beq.n	8007dc2 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007dae:	7bbb      	ldrb	r3, [r7, #14]
 8007db0:	4619      	mov	r1, r3
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f001 f89c 	bl	8008ef0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007db8:	2180      	movs	r1, #128	; 0x80
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f001 f898 	bl	8008ef0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007dc0:	e020      	b.n	8007e04 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8007dc2:	6839      	ldr	r1, [r7, #0]
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 fc1b 	bl	8008600 <USBD_CtlError>
              break;
 8007dca:	e01b      	b.n	8007e04 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	885b      	ldrh	r3, [r3, #2]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10e      	bne.n	8007df2 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8007dd4:	7bbb      	ldrb	r3, [r7, #14]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00b      	beq.n	8007df2 <USBD_StdEPReq+0xce>
 8007dda:	7bbb      	ldrb	r3, [r7, #14]
 8007ddc:	2b80      	cmp	r3, #128	; 0x80
 8007dde:	d008      	beq.n	8007df2 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	88db      	ldrh	r3, [r3, #6]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d104      	bne.n	8007df2 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007de8:	7bbb      	ldrb	r3, [r7, #14]
 8007dea:	4619      	mov	r1, r3
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f001 f87f 	bl	8008ef0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fccc 	bl	8008790 <USBD_CtlSendStatus>

              break;
 8007df8:	e004      	b.n	8007e04 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8007dfa:	6839      	ldr	r1, [r7, #0]
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fbff 	bl	8008600 <USBD_CtlError>
              break;
 8007e02:	bf00      	nop
          }
          break;
 8007e04:	e0e0      	b.n	8007fc8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e0c:	2b02      	cmp	r3, #2
 8007e0e:	d002      	beq.n	8007e16 <USBD_StdEPReq+0xf2>
 8007e10:	2b03      	cmp	r3, #3
 8007e12:	d015      	beq.n	8007e40 <USBD_StdEPReq+0x11c>
 8007e14:	e026      	b.n	8007e64 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e16:	7bbb      	ldrb	r3, [r7, #14]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00c      	beq.n	8007e36 <USBD_StdEPReq+0x112>
 8007e1c:	7bbb      	ldrb	r3, [r7, #14]
 8007e1e:	2b80      	cmp	r3, #128	; 0x80
 8007e20:	d009      	beq.n	8007e36 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007e22:	7bbb      	ldrb	r3, [r7, #14]
 8007e24:	4619      	mov	r1, r3
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f001 f862 	bl	8008ef0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007e2c:	2180      	movs	r1, #128	; 0x80
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f001 f85e 	bl	8008ef0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e34:	e01c      	b.n	8007e70 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8007e36:	6839      	ldr	r1, [r7, #0]
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 fbe1 	bl	8008600 <USBD_CtlError>
              break;
 8007e3e:	e017      	b.n	8007e70 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	885b      	ldrh	r3, [r3, #2]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d112      	bne.n	8007e6e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007e48:	7bbb      	ldrb	r3, [r7, #14]
 8007e4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d004      	beq.n	8007e5c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e52:	7bbb      	ldrb	r3, [r7, #14]
 8007e54:	4619      	mov	r1, r3
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f001 f869 	bl	8008f2e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 fc97 	bl	8008790 <USBD_CtlSendStatus>
              }
              break;
 8007e62:	e004      	b.n	8007e6e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8007e64:	6839      	ldr	r1, [r7, #0]
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 fbca 	bl	8008600 <USBD_CtlError>
              break;
 8007e6c:	e000      	b.n	8007e70 <USBD_StdEPReq+0x14c>
              break;
 8007e6e:	bf00      	nop
          }
          break;
 8007e70:	e0aa      	b.n	8007fc8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d002      	beq.n	8007e82 <USBD_StdEPReq+0x15e>
 8007e7c:	2b03      	cmp	r3, #3
 8007e7e:	d032      	beq.n	8007ee6 <USBD_StdEPReq+0x1c2>
 8007e80:	e097      	b.n	8007fb2 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e82:	7bbb      	ldrb	r3, [r7, #14]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d007      	beq.n	8007e98 <USBD_StdEPReq+0x174>
 8007e88:	7bbb      	ldrb	r3, [r7, #14]
 8007e8a:	2b80      	cmp	r3, #128	; 0x80
 8007e8c:	d004      	beq.n	8007e98 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8007e8e:	6839      	ldr	r1, [r7, #0]
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 fbb5 	bl	8008600 <USBD_CtlError>
                break;
 8007e96:	e091      	b.n	8007fbc <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	da0b      	bge.n	8007eb8 <USBD_StdEPReq+0x194>
 8007ea0:	7bbb      	ldrb	r3, [r7, #14]
 8007ea2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	4413      	add	r3, r2
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	3310      	adds	r3, #16
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	3304      	adds	r3, #4
 8007eb6:	e00b      	b.n	8007ed0 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007eb8:	7bbb      	ldrb	r3, [r7, #14]
 8007eba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	4413      	add	r3, r2
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	4413      	add	r3, r2
 8007ece:	3304      	adds	r3, #4
 8007ed0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	2202      	movs	r2, #2
 8007edc:	4619      	mov	r1, r3
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fbf8 	bl	80086d4 <USBD_CtlSendData>
              break;
 8007ee4:	e06a      	b.n	8007fbc <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007ee6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	da11      	bge.n	8007f12 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007eee:	7bbb      	ldrb	r3, [r7, #14]
 8007ef0:	f003 020f 	and.w	r2, r3, #15
 8007ef4:	6879      	ldr	r1, [r7, #4]
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	4413      	add	r3, r2
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	440b      	add	r3, r1
 8007f00:	3318      	adds	r3, #24
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d117      	bne.n	8007f38 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007f08:	6839      	ldr	r1, [r7, #0]
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 fb78 	bl	8008600 <USBD_CtlError>
                  break;
 8007f10:	e054      	b.n	8007fbc <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007f12:	7bbb      	ldrb	r3, [r7, #14]
 8007f14:	f003 020f 	and.w	r2, r3, #15
 8007f18:	6879      	ldr	r1, [r7, #4]
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	4413      	add	r3, r2
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	440b      	add	r3, r1
 8007f24:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d104      	bne.n	8007f38 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007f2e:	6839      	ldr	r1, [r7, #0]
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 fb65 	bl	8008600 <USBD_CtlError>
                  break;
 8007f36:	e041      	b.n	8007fbc <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	da0b      	bge.n	8007f58 <USBD_StdEPReq+0x234>
 8007f40:	7bbb      	ldrb	r3, [r7, #14]
 8007f42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f46:	4613      	mov	r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4413      	add	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	3310      	adds	r3, #16
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	4413      	add	r3, r2
 8007f54:	3304      	adds	r3, #4
 8007f56:	e00b      	b.n	8007f70 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f58:	7bbb      	ldrb	r3, [r7, #14]
 8007f5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f5e:	4613      	mov	r3, r2
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	4413      	add	r3, r2
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	3304      	adds	r3, #4
 8007f70:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007f72:	7bbb      	ldrb	r3, [r7, #14]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d002      	beq.n	8007f7e <USBD_StdEPReq+0x25a>
 8007f78:	7bbb      	ldrb	r3, [r7, #14]
 8007f7a:	2b80      	cmp	r3, #128	; 0x80
 8007f7c:	d103      	bne.n	8007f86 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	2200      	movs	r2, #0
 8007f82:	601a      	str	r2, [r3, #0]
 8007f84:	e00e      	b.n	8007fa4 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007f86:	7bbb      	ldrb	r3, [r7, #14]
 8007f88:	4619      	mov	r1, r3
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 ffee 	bl	8008f6c <USBD_LL_IsStallEP>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d003      	beq.n	8007f9e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	601a      	str	r2, [r3, #0]
 8007f9c:	e002      	b.n	8007fa4 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	2202      	movs	r2, #2
 8007fa8:	4619      	mov	r1, r3
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 fb92 	bl	80086d4 <USBD_CtlSendData>
              break;
 8007fb0:	e004      	b.n	8007fbc <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8007fb2:	6839      	ldr	r1, [r7, #0]
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 fb23 	bl	8008600 <USBD_CtlError>
              break;
 8007fba:	bf00      	nop
          }
          break;
 8007fbc:	e004      	b.n	8007fc8 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8007fbe:	6839      	ldr	r1, [r7, #0]
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fb1d 	bl	8008600 <USBD_CtlError>
          break;
 8007fc6:	bf00      	nop
      }
      break;
 8007fc8:	e004      	b.n	8007fd4 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8007fca:	6839      	ldr	r1, [r7, #0]
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 fb17 	bl	8008600 <USBD_CtlError>
      break;
 8007fd2:	bf00      	nop
  }

  return ret;
 8007fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
	...

08007fe0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007fea:	2300      	movs	r3, #0
 8007fec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	885b      	ldrh	r3, [r3, #2]
 8007ffa:	0a1b      	lsrs	r3, r3, #8
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	3b01      	subs	r3, #1
 8008000:	2b06      	cmp	r3, #6
 8008002:	f200 8128 	bhi.w	8008256 <USBD_GetDescriptor+0x276>
 8008006:	a201      	add	r2, pc, #4	; (adr r2, 800800c <USBD_GetDescriptor+0x2c>)
 8008008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800800c:	08008029 	.word	0x08008029
 8008010:	08008041 	.word	0x08008041
 8008014:	08008081 	.word	0x08008081
 8008018:	08008257 	.word	0x08008257
 800801c:	08008257 	.word	0x08008257
 8008020:	080081f7 	.word	0x080081f7
 8008024:	08008223 	.word	0x08008223
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	7c12      	ldrb	r2, [r2, #16]
 8008034:	f107 0108 	add.w	r1, r7, #8
 8008038:	4610      	mov	r0, r2
 800803a:	4798      	blx	r3
 800803c:	60f8      	str	r0, [r7, #12]
      break;
 800803e:	e112      	b.n	8008266 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	7c1b      	ldrb	r3, [r3, #16]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d10d      	bne.n	8008064 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800804e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008050:	f107 0208 	add.w	r2, r7, #8
 8008054:	4610      	mov	r0, r2
 8008056:	4798      	blx	r3
 8008058:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	3301      	adds	r3, #1
 800805e:	2202      	movs	r2, #2
 8008060:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008062:	e100      	b.n	8008266 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800806a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800806c:	f107 0208 	add.w	r2, r7, #8
 8008070:	4610      	mov	r0, r2
 8008072:	4798      	blx	r3
 8008074:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	3301      	adds	r3, #1
 800807a:	2202      	movs	r2, #2
 800807c:	701a      	strb	r2, [r3, #0]
      break;
 800807e:	e0f2      	b.n	8008266 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	885b      	ldrh	r3, [r3, #2]
 8008084:	b2db      	uxtb	r3, r3
 8008086:	2b05      	cmp	r3, #5
 8008088:	f200 80ac 	bhi.w	80081e4 <USBD_GetDescriptor+0x204>
 800808c:	a201      	add	r2, pc, #4	; (adr r2, 8008094 <USBD_GetDescriptor+0xb4>)
 800808e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008092:	bf00      	nop
 8008094:	080080ad 	.word	0x080080ad
 8008098:	080080e1 	.word	0x080080e1
 800809c:	08008115 	.word	0x08008115
 80080a0:	08008149 	.word	0x08008149
 80080a4:	0800817d 	.word	0x0800817d
 80080a8:	080081b1 	.word	0x080081b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00b      	beq.n	80080d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	7c12      	ldrb	r2, [r2, #16]
 80080c4:	f107 0108 	add.w	r1, r7, #8
 80080c8:	4610      	mov	r0, r2
 80080ca:	4798      	blx	r3
 80080cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080ce:	e091      	b.n	80081f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080d0:	6839      	ldr	r1, [r7, #0]
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 fa94 	bl	8008600 <USBD_CtlError>
            err++;
 80080d8:	7afb      	ldrb	r3, [r7, #11]
 80080da:	3301      	adds	r3, #1
 80080dc:	72fb      	strb	r3, [r7, #11]
          break;
 80080de:	e089      	b.n	80081f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00b      	beq.n	8008104 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	7c12      	ldrb	r2, [r2, #16]
 80080f8:	f107 0108 	add.w	r1, r7, #8
 80080fc:	4610      	mov	r0, r2
 80080fe:	4798      	blx	r3
 8008100:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008102:	e077      	b.n	80081f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008104:	6839      	ldr	r1, [r7, #0]
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fa7a 	bl	8008600 <USBD_CtlError>
            err++;
 800810c:	7afb      	ldrb	r3, [r7, #11]
 800810e:	3301      	adds	r3, #1
 8008110:	72fb      	strb	r3, [r7, #11]
          break;
 8008112:	e06f      	b.n	80081f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00b      	beq.n	8008138 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	7c12      	ldrb	r2, [r2, #16]
 800812c:	f107 0108 	add.w	r1, r7, #8
 8008130:	4610      	mov	r0, r2
 8008132:	4798      	blx	r3
 8008134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008136:	e05d      	b.n	80081f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008138:	6839      	ldr	r1, [r7, #0]
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fa60 	bl	8008600 <USBD_CtlError>
            err++;
 8008140:	7afb      	ldrb	r3, [r7, #11]
 8008142:	3301      	adds	r3, #1
 8008144:	72fb      	strb	r3, [r7, #11]
          break;
 8008146:	e055      	b.n	80081f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800814e:	691b      	ldr	r3, [r3, #16]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00b      	beq.n	800816c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800815a:	691b      	ldr	r3, [r3, #16]
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	7c12      	ldrb	r2, [r2, #16]
 8008160:	f107 0108 	add.w	r1, r7, #8
 8008164:	4610      	mov	r0, r2
 8008166:	4798      	blx	r3
 8008168:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800816a:	e043      	b.n	80081f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800816c:	6839      	ldr	r1, [r7, #0]
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 fa46 	bl	8008600 <USBD_CtlError>
            err++;
 8008174:	7afb      	ldrb	r3, [r7, #11]
 8008176:	3301      	adds	r3, #1
 8008178:	72fb      	strb	r3, [r7, #11]
          break;
 800817a:	e03b      	b.n	80081f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008182:	695b      	ldr	r3, [r3, #20]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d00b      	beq.n	80081a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800818e:	695b      	ldr	r3, [r3, #20]
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	7c12      	ldrb	r2, [r2, #16]
 8008194:	f107 0108 	add.w	r1, r7, #8
 8008198:	4610      	mov	r0, r2
 800819a:	4798      	blx	r3
 800819c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800819e:	e029      	b.n	80081f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081a0:	6839      	ldr	r1, [r7, #0]
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fa2c 	bl	8008600 <USBD_CtlError>
            err++;
 80081a8:	7afb      	ldrb	r3, [r7, #11]
 80081aa:	3301      	adds	r3, #1
 80081ac:	72fb      	strb	r3, [r7, #11]
          break;
 80081ae:	e021      	b.n	80081f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081b6:	699b      	ldr	r3, [r3, #24]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00b      	beq.n	80081d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081c2:	699b      	ldr	r3, [r3, #24]
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	7c12      	ldrb	r2, [r2, #16]
 80081c8:	f107 0108 	add.w	r1, r7, #8
 80081cc:	4610      	mov	r0, r2
 80081ce:	4798      	blx	r3
 80081d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081d2:	e00f      	b.n	80081f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081d4:	6839      	ldr	r1, [r7, #0]
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fa12 	bl	8008600 <USBD_CtlError>
            err++;
 80081dc:	7afb      	ldrb	r3, [r7, #11]
 80081de:	3301      	adds	r3, #1
 80081e0:	72fb      	strb	r3, [r7, #11]
          break;
 80081e2:	e007      	b.n	80081f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80081e4:	6839      	ldr	r1, [r7, #0]
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 fa0a 	bl	8008600 <USBD_CtlError>
          err++;
 80081ec:	7afb      	ldrb	r3, [r7, #11]
 80081ee:	3301      	adds	r3, #1
 80081f0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80081f2:	e038      	b.n	8008266 <USBD_GetDescriptor+0x286>
 80081f4:	e037      	b.n	8008266 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	7c1b      	ldrb	r3, [r3, #16]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d109      	bne.n	8008212 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008206:	f107 0208 	add.w	r2, r7, #8
 800820a:	4610      	mov	r0, r2
 800820c:	4798      	blx	r3
 800820e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008210:	e029      	b.n	8008266 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008212:	6839      	ldr	r1, [r7, #0]
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 f9f3 	bl	8008600 <USBD_CtlError>
        err++;
 800821a:	7afb      	ldrb	r3, [r7, #11]
 800821c:	3301      	adds	r3, #1
 800821e:	72fb      	strb	r3, [r7, #11]
      break;
 8008220:	e021      	b.n	8008266 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	7c1b      	ldrb	r3, [r3, #16]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10d      	bne.n	8008246 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008232:	f107 0208 	add.w	r2, r7, #8
 8008236:	4610      	mov	r0, r2
 8008238:	4798      	blx	r3
 800823a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	3301      	adds	r3, #1
 8008240:	2207      	movs	r2, #7
 8008242:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008244:	e00f      	b.n	8008266 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008246:	6839      	ldr	r1, [r7, #0]
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 f9d9 	bl	8008600 <USBD_CtlError>
        err++;
 800824e:	7afb      	ldrb	r3, [r7, #11]
 8008250:	3301      	adds	r3, #1
 8008252:	72fb      	strb	r3, [r7, #11]
      break;
 8008254:	e007      	b.n	8008266 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008256:	6839      	ldr	r1, [r7, #0]
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 f9d1 	bl	8008600 <USBD_CtlError>
      err++;
 800825e:	7afb      	ldrb	r3, [r7, #11]
 8008260:	3301      	adds	r3, #1
 8008262:	72fb      	strb	r3, [r7, #11]
      break;
 8008264:	bf00      	nop
  }

  if (err != 0U)
 8008266:	7afb      	ldrb	r3, [r7, #11]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d11c      	bne.n	80082a6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800826c:	893b      	ldrh	r3, [r7, #8]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d011      	beq.n	8008296 <USBD_GetDescriptor+0x2b6>
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	88db      	ldrh	r3, [r3, #6]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00d      	beq.n	8008296 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	88da      	ldrh	r2, [r3, #6]
 800827e:	893b      	ldrh	r3, [r7, #8]
 8008280:	4293      	cmp	r3, r2
 8008282:	bf28      	it	cs
 8008284:	4613      	movcs	r3, r2
 8008286:	b29b      	uxth	r3, r3
 8008288:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800828a:	893b      	ldrh	r3, [r7, #8]
 800828c:	461a      	mov	r2, r3
 800828e:	68f9      	ldr	r1, [r7, #12]
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 fa1f 	bl	80086d4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	88db      	ldrh	r3, [r3, #6]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d104      	bne.n	80082a8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 fa76 	bl	8008790 <USBD_CtlSendStatus>
 80082a4:	e000      	b.n	80082a8 <USBD_GetDescriptor+0x2c8>
    return;
 80082a6:	bf00      	nop
    }
  }
}
 80082a8:	3710      	adds	r7, #16
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop

080082b0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	889b      	ldrh	r3, [r3, #4]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d130      	bne.n	8008324 <USBD_SetAddress+0x74>
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	88db      	ldrh	r3, [r3, #6]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d12c      	bne.n	8008324 <USBD_SetAddress+0x74>
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	885b      	ldrh	r3, [r3, #2]
 80082ce:	2b7f      	cmp	r3, #127	; 0x7f
 80082d0:	d828      	bhi.n	8008324 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	885b      	ldrh	r3, [r3, #2]
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082e4:	2b03      	cmp	r3, #3
 80082e6:	d104      	bne.n	80082f2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80082e8:	6839      	ldr	r1, [r7, #0]
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 f988 	bl	8008600 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082f0:	e01c      	b.n	800832c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	7bfa      	ldrb	r2, [r7, #15]
 80082f6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80082fa:	7bfb      	ldrb	r3, [r7, #15]
 80082fc:	4619      	mov	r1, r3
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 fe59 	bl	8008fb6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 fa43 	bl	8008790 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800830a:	7bfb      	ldrb	r3, [r7, #15]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d004      	beq.n	800831a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2202      	movs	r2, #2
 8008314:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008318:	e008      	b.n	800832c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2201      	movs	r2, #1
 800831e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008322:	e003      	b.n	800832c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008324:	6839      	ldr	r1, [r7, #0]
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f96a 	bl	8008600 <USBD_CtlError>
  }
}
 800832c:	bf00      	nop
 800832e:	3710      	adds	r7, #16
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	885b      	ldrh	r3, [r3, #2]
 8008342:	b2da      	uxtb	r2, r3
 8008344:	4b41      	ldr	r3, [pc, #260]	; (800844c <USBD_SetConfig+0x118>)
 8008346:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008348:	4b40      	ldr	r3, [pc, #256]	; (800844c <USBD_SetConfig+0x118>)
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d904      	bls.n	800835a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008350:	6839      	ldr	r1, [r7, #0]
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 f954 	bl	8008600 <USBD_CtlError>
 8008358:	e075      	b.n	8008446 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008360:	2b02      	cmp	r3, #2
 8008362:	d002      	beq.n	800836a <USBD_SetConfig+0x36>
 8008364:	2b03      	cmp	r3, #3
 8008366:	d023      	beq.n	80083b0 <USBD_SetConfig+0x7c>
 8008368:	e062      	b.n	8008430 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800836a:	4b38      	ldr	r3, [pc, #224]	; (800844c <USBD_SetConfig+0x118>)
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d01a      	beq.n	80083a8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008372:	4b36      	ldr	r3, [pc, #216]	; (800844c <USBD_SetConfig+0x118>)
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	461a      	mov	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2203      	movs	r2, #3
 8008380:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008384:	4b31      	ldr	r3, [pc, #196]	; (800844c <USBD_SetConfig+0x118>)
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	4619      	mov	r1, r3
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f7ff f9f3 	bl	8007776 <USBD_SetClassConfig>
 8008390:	4603      	mov	r3, r0
 8008392:	2b02      	cmp	r3, #2
 8008394:	d104      	bne.n	80083a0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008396:	6839      	ldr	r1, [r7, #0]
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 f931 	bl	8008600 <USBD_CtlError>
            return;
 800839e:	e052      	b.n	8008446 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 f9f5 	bl	8008790 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80083a6:	e04e      	b.n	8008446 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 f9f1 	bl	8008790 <USBD_CtlSendStatus>
        break;
 80083ae:	e04a      	b.n	8008446 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80083b0:	4b26      	ldr	r3, [pc, #152]	; (800844c <USBD_SetConfig+0x118>)
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d112      	bne.n	80083de <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2202      	movs	r2, #2
 80083bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80083c0:	4b22      	ldr	r3, [pc, #136]	; (800844c <USBD_SetConfig+0x118>)
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	461a      	mov	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80083ca:	4b20      	ldr	r3, [pc, #128]	; (800844c <USBD_SetConfig+0x118>)
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	4619      	mov	r1, r3
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f7ff f9ef 	bl	80077b4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 f9da 	bl	8008790 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80083dc:	e033      	b.n	8008446 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80083de:	4b1b      	ldr	r3, [pc, #108]	; (800844c <USBD_SetConfig+0x118>)
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	461a      	mov	r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d01d      	beq.n	8008428 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	4619      	mov	r1, r3
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f7ff f9dd 	bl	80077b4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80083fa:	4b14      	ldr	r3, [pc, #80]	; (800844c <USBD_SetConfig+0x118>)
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	461a      	mov	r2, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008404:	4b11      	ldr	r3, [pc, #68]	; (800844c <USBD_SetConfig+0x118>)
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	4619      	mov	r1, r3
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f7ff f9b3 	bl	8007776 <USBD_SetClassConfig>
 8008410:	4603      	mov	r3, r0
 8008412:	2b02      	cmp	r3, #2
 8008414:	d104      	bne.n	8008420 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008416:	6839      	ldr	r1, [r7, #0]
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 f8f1 	bl	8008600 <USBD_CtlError>
            return;
 800841e:	e012      	b.n	8008446 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 f9b5 	bl	8008790 <USBD_CtlSendStatus>
        break;
 8008426:	e00e      	b.n	8008446 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 f9b1 	bl	8008790 <USBD_CtlSendStatus>
        break;
 800842e:	e00a      	b.n	8008446 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008430:	6839      	ldr	r1, [r7, #0]
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 f8e4 	bl	8008600 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008438:	4b04      	ldr	r3, [pc, #16]	; (800844c <USBD_SetConfig+0x118>)
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	4619      	mov	r1, r3
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f7ff f9b8 	bl	80077b4 <USBD_ClrClassConfig>
        break;
 8008444:	bf00      	nop
    }
  }
}
 8008446:	3708      	adds	r7, #8
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}
 800844c:	2000059c 	.word	0x2000059c

08008450 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	88db      	ldrh	r3, [r3, #6]
 800845e:	2b01      	cmp	r3, #1
 8008460:	d004      	beq.n	800846c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008462:	6839      	ldr	r1, [r7, #0]
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 f8cb 	bl	8008600 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800846a:	e021      	b.n	80084b0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008472:	2b01      	cmp	r3, #1
 8008474:	db17      	blt.n	80084a6 <USBD_GetConfig+0x56>
 8008476:	2b02      	cmp	r3, #2
 8008478:	dd02      	ble.n	8008480 <USBD_GetConfig+0x30>
 800847a:	2b03      	cmp	r3, #3
 800847c:	d00b      	beq.n	8008496 <USBD_GetConfig+0x46>
 800847e:	e012      	b.n	80084a6 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	3308      	adds	r3, #8
 800848a:	2201      	movs	r2, #1
 800848c:	4619      	mov	r1, r3
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f920 	bl	80086d4 <USBD_CtlSendData>
        break;
 8008494:	e00c      	b.n	80084b0 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	3304      	adds	r3, #4
 800849a:	2201      	movs	r2, #1
 800849c:	4619      	mov	r1, r3
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 f918 	bl	80086d4 <USBD_CtlSendData>
        break;
 80084a4:	e004      	b.n	80084b0 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 f8a9 	bl	8008600 <USBD_CtlError>
        break;
 80084ae:	bf00      	nop
}
 80084b0:	bf00      	nop
 80084b2:	3708      	adds	r7, #8
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084c8:	3b01      	subs	r3, #1
 80084ca:	2b02      	cmp	r3, #2
 80084cc:	d81e      	bhi.n	800850c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	88db      	ldrh	r3, [r3, #6]
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d004      	beq.n	80084e0 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80084d6:	6839      	ldr	r1, [r7, #0]
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 f891 	bl	8008600 <USBD_CtlError>
        break;
 80084de:	e01a      	b.n	8008516 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d005      	beq.n	80084fc <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	f043 0202 	orr.w	r2, r3, #2
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	330c      	adds	r3, #12
 8008500:	2202      	movs	r2, #2
 8008502:	4619      	mov	r1, r3
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 f8e5 	bl	80086d4 <USBD_CtlSendData>
      break;
 800850a:	e004      	b.n	8008516 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800850c:	6839      	ldr	r1, [r7, #0]
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 f876 	bl	8008600 <USBD_CtlError>
      break;
 8008514:	bf00      	nop
  }
}
 8008516:	bf00      	nop
 8008518:	3708      	adds	r7, #8
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b082      	sub	sp, #8
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
 8008526:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	885b      	ldrh	r3, [r3, #2]
 800852c:	2b01      	cmp	r3, #1
 800852e:	d106      	bne.n	800853e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 f929 	bl	8008790 <USBD_CtlSendStatus>
  }
}
 800853e:	bf00      	nop
 8008540:	3708      	adds	r7, #8
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b082      	sub	sp, #8
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008556:	3b01      	subs	r3, #1
 8008558:	2b02      	cmp	r3, #2
 800855a:	d80b      	bhi.n	8008574 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	885b      	ldrh	r3, [r3, #2]
 8008560:	2b01      	cmp	r3, #1
 8008562:	d10c      	bne.n	800857e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 f90f 	bl	8008790 <USBD_CtlSendStatus>
      }
      break;
 8008572:	e004      	b.n	800857e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008574:	6839      	ldr	r1, [r7, #0]
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f842 	bl	8008600 <USBD_CtlError>
      break;
 800857c:	e000      	b.n	8008580 <USBD_ClrFeature+0x3a>
      break;
 800857e:	bf00      	nop
  }
}
 8008580:	bf00      	nop
 8008582:	3708      	adds	r7, #8
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	781a      	ldrb	r2, [r3, #0]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	785a      	ldrb	r2, [r3, #1]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	3302      	adds	r3, #2
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	b29a      	uxth	r2, r3
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	3303      	adds	r3, #3
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	021b      	lsls	r3, r3, #8
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	4413      	add	r3, r2
 80085b8:	b29a      	uxth	r2, r3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	3304      	adds	r3, #4
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	b29a      	uxth	r2, r3
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	3305      	adds	r3, #5
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	021b      	lsls	r3, r3, #8
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	4413      	add	r3, r2
 80085d4:	b29a      	uxth	r2, r3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	3306      	adds	r3, #6
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	b29a      	uxth	r2, r3
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	3307      	adds	r3, #7
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	021b      	lsls	r3, r3, #8
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	4413      	add	r3, r2
 80085f0:	b29a      	uxth	r2, r3
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	80da      	strh	r2, [r3, #6]

}
 80085f6:	bf00      	nop
 80085f8:	370c      	adds	r7, #12
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bc80      	pop	{r7}
 80085fe:	4770      	bx	lr

08008600 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800860a:	2180      	movs	r1, #128	; 0x80
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 fc6f 	bl	8008ef0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008612:	2100      	movs	r1, #0
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 fc6b 	bl	8008ef0 <USBD_LL_StallEP>
}
 800861a:	bf00      	nop
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008622:	b580      	push	{r7, lr}
 8008624:	b086      	sub	sp, #24
 8008626:	af00      	add	r7, sp, #0
 8008628:	60f8      	str	r0, [r7, #12]
 800862a:	60b9      	str	r1, [r7, #8]
 800862c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800862e:	2300      	movs	r3, #0
 8008630:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d032      	beq.n	800869e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f000 f834 	bl	80086a6 <USBD_GetLen>
 800863e:	4603      	mov	r3, r0
 8008640:	3301      	adds	r3, #1
 8008642:	b29b      	uxth	r3, r3
 8008644:	005b      	lsls	r3, r3, #1
 8008646:	b29a      	uxth	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800864c:	7dfb      	ldrb	r3, [r7, #23]
 800864e:	1c5a      	adds	r2, r3, #1
 8008650:	75fa      	strb	r2, [r7, #23]
 8008652:	461a      	mov	r2, r3
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	4413      	add	r3, r2
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	7812      	ldrb	r2, [r2, #0]
 800865c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800865e:	7dfb      	ldrb	r3, [r7, #23]
 8008660:	1c5a      	adds	r2, r3, #1
 8008662:	75fa      	strb	r2, [r7, #23]
 8008664:	461a      	mov	r2, r3
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	4413      	add	r3, r2
 800866a:	2203      	movs	r2, #3
 800866c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800866e:	e012      	b.n	8008696 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	1c5a      	adds	r2, r3, #1
 8008674:	60fa      	str	r2, [r7, #12]
 8008676:	7dfa      	ldrb	r2, [r7, #23]
 8008678:	1c51      	adds	r1, r2, #1
 800867a:	75f9      	strb	r1, [r7, #23]
 800867c:	4611      	mov	r1, r2
 800867e:	68ba      	ldr	r2, [r7, #8]
 8008680:	440a      	add	r2, r1
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008686:	7dfb      	ldrb	r3, [r7, #23]
 8008688:	1c5a      	adds	r2, r3, #1
 800868a:	75fa      	strb	r2, [r7, #23]
 800868c:	461a      	mov	r2, r3
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	4413      	add	r3, r2
 8008692:	2200      	movs	r2, #0
 8008694:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d1e8      	bne.n	8008670 <USBD_GetString+0x4e>
    }
  }
}
 800869e:	bf00      	nop
 80086a0:	3718      	adds	r7, #24
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80086a6:	b480      	push	{r7}
 80086a8:	b085      	sub	sp, #20
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80086ae:	2300      	movs	r3, #0
 80086b0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80086b2:	e005      	b.n	80086c0 <USBD_GetLen+0x1a>
  {
    len++;
 80086b4:	7bfb      	ldrb	r3, [r7, #15]
 80086b6:	3301      	adds	r3, #1
 80086b8:	73fb      	strb	r3, [r7, #15]
    buf++;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	3301      	adds	r3, #1
 80086be:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d1f5      	bne.n	80086b4 <USBD_GetLen+0xe>
  }

  return len;
 80086c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3714      	adds	r7, #20
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bc80      	pop	{r7}
 80086d2:	4770      	bx	lr

080086d4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	4613      	mov	r3, r2
 80086e0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2202      	movs	r2, #2
 80086e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80086ea:	88fa      	ldrh	r2, [r7, #6]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80086f0:	88fa      	ldrh	r2, [r7, #6]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80086f6:	88fb      	ldrh	r3, [r7, #6]
 80086f8:	68ba      	ldr	r2, [r7, #8]
 80086fa:	2100      	movs	r1, #0
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f000 fc79 	bl	8008ff4 <USBD_LL_Transmit>

  return USBD_OK;
 8008702:	2300      	movs	r3, #0
}
 8008704:	4618      	mov	r0, r3
 8008706:	3710      	adds	r7, #16
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	4613      	mov	r3, r2
 8008718:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800871a:	88fb      	ldrh	r3, [r7, #6]
 800871c:	68ba      	ldr	r2, [r7, #8]
 800871e:	2100      	movs	r1, #0
 8008720:	68f8      	ldr	r0, [r7, #12]
 8008722:	f000 fc67 	bl	8008ff4 <USBD_LL_Transmit>

  return USBD_OK;
 8008726:	2300      	movs	r3, #0
}
 8008728:	4618      	mov	r0, r3
 800872a:	3710      	adds	r7, #16
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	4613      	mov	r3, r2
 800873c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2203      	movs	r2, #3
 8008742:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008746:	88fa      	ldrh	r2, [r7, #6]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800874e:	88fa      	ldrh	r2, [r7, #6]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008756:	88fb      	ldrh	r3, [r7, #6]
 8008758:	68ba      	ldr	r2, [r7, #8]
 800875a:	2100      	movs	r1, #0
 800875c:	68f8      	ldr	r0, [r7, #12]
 800875e:	f000 fc6c 	bl	800903a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008762:	2300      	movs	r3, #0
}
 8008764:	4618      	mov	r0, r3
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	4613      	mov	r3, r2
 8008778:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800877a:	88fb      	ldrh	r3, [r7, #6]
 800877c:	68ba      	ldr	r2, [r7, #8]
 800877e:	2100      	movs	r1, #0
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f000 fc5a 	bl	800903a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2204      	movs	r2, #4
 800879c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80087a0:	2300      	movs	r3, #0
 80087a2:	2200      	movs	r2, #0
 80087a4:	2100      	movs	r1, #0
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fc24 	bl	8008ff4 <USBD_LL_Transmit>

  return USBD_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3708      	adds	r7, #8
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b082      	sub	sp, #8
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2205      	movs	r2, #5
 80087c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087c6:	2300      	movs	r3, #0
 80087c8:	2200      	movs	r2, #0
 80087ca:	2100      	movs	r1, #0
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 fc34 	bl	800903a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80087e0:	2200      	movs	r2, #0
 80087e2:	4912      	ldr	r1, [pc, #72]	; (800882c <MX_USB_DEVICE_Init+0x50>)
 80087e4:	4812      	ldr	r0, [pc, #72]	; (8008830 <MX_USB_DEVICE_Init+0x54>)
 80087e6:	f7fe ff6c 	bl	80076c2 <USBD_Init>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d001      	beq.n	80087f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80087f0:	f7f9 fad2 	bl	8001d98 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80087f4:	490f      	ldr	r1, [pc, #60]	; (8008834 <MX_USB_DEVICE_Init+0x58>)
 80087f6:	480e      	ldr	r0, [pc, #56]	; (8008830 <MX_USB_DEVICE_Init+0x54>)
 80087f8:	f7fe ff8e 	bl	8007718 <USBD_RegisterClass>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d001      	beq.n	8008806 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008802:	f7f9 fac9 	bl	8001d98 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008806:	490c      	ldr	r1, [pc, #48]	; (8008838 <MX_USB_DEVICE_Init+0x5c>)
 8008808:	4809      	ldr	r0, [pc, #36]	; (8008830 <MX_USB_DEVICE_Init+0x54>)
 800880a:	f7fe febf 	bl	800758c <USBD_CDC_RegisterInterface>
 800880e:	4603      	mov	r3, r0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d001      	beq.n	8008818 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008814:	f7f9 fac0 	bl	8001d98 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008818:	4805      	ldr	r0, [pc, #20]	; (8008830 <MX_USB_DEVICE_Init+0x54>)
 800881a:	f7fe ff96 	bl	800774a <USBD_Start>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d001      	beq.n	8008828 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008824:	f7f9 fab8 	bl	8001d98 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008828:	bf00      	nop
 800882a:	bd80      	pop	{r7, pc}
 800882c:	20000144 	.word	0x20000144
 8008830:	20000d88 	.word	0x20000d88
 8008834:	20000030 	.word	0x20000030
 8008838:	20000134 	.word	0x20000134

0800883c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008840:	2200      	movs	r2, #0
 8008842:	4905      	ldr	r1, [pc, #20]	; (8008858 <CDC_Init_FS+0x1c>)
 8008844:	4805      	ldr	r0, [pc, #20]	; (800885c <CDC_Init_FS+0x20>)
 8008846:	f7fe feb7 	bl	80075b8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800884a:	4905      	ldr	r1, [pc, #20]	; (8008860 <CDC_Init_FS+0x24>)
 800884c:	4803      	ldr	r0, [pc, #12]	; (800885c <CDC_Init_FS+0x20>)
 800884e:	f7fe fecc 	bl	80075ea <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008852:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008854:	4618      	mov	r0, r3
 8008856:	bd80      	pop	{r7, pc}
 8008858:	20001434 	.word	0x20001434
 800885c:	20000d88 	.word	0x20000d88
 8008860:	2000104c 	.word	0x2000104c

08008864 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008864:	b480      	push	{r7}
 8008866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008868:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800886a:	4618      	mov	r0, r3
 800886c:	46bd      	mov	sp, r7
 800886e:	bc80      	pop	{r7}
 8008870:	4770      	bx	lr
	...

08008874 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	4603      	mov	r3, r0
 800887c:	6039      	str	r1, [r7, #0]
 800887e:	71fb      	strb	r3, [r7, #7]
 8008880:	4613      	mov	r3, r2
 8008882:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008884:	79fb      	ldrb	r3, [r7, #7]
 8008886:	2b23      	cmp	r3, #35	; 0x23
 8008888:	d866      	bhi.n	8008958 <CDC_Control_FS+0xe4>
 800888a:	a201      	add	r2, pc, #4	; (adr r2, 8008890 <CDC_Control_FS+0x1c>)
 800888c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008890:	08008959 	.word	0x08008959
 8008894:	08008959 	.word	0x08008959
 8008898:	08008959 	.word	0x08008959
 800889c:	08008959 	.word	0x08008959
 80088a0:	08008959 	.word	0x08008959
 80088a4:	08008959 	.word	0x08008959
 80088a8:	08008959 	.word	0x08008959
 80088ac:	08008959 	.word	0x08008959
 80088b0:	08008959 	.word	0x08008959
 80088b4:	08008959 	.word	0x08008959
 80088b8:	08008959 	.word	0x08008959
 80088bc:	08008959 	.word	0x08008959
 80088c0:	08008959 	.word	0x08008959
 80088c4:	08008959 	.word	0x08008959
 80088c8:	08008959 	.word	0x08008959
 80088cc:	08008959 	.word	0x08008959
 80088d0:	08008959 	.word	0x08008959
 80088d4:	08008959 	.word	0x08008959
 80088d8:	08008959 	.word	0x08008959
 80088dc:	08008959 	.word	0x08008959
 80088e0:	08008959 	.word	0x08008959
 80088e4:	08008959 	.word	0x08008959
 80088e8:	08008959 	.word	0x08008959
 80088ec:	08008959 	.word	0x08008959
 80088f0:	08008959 	.word	0x08008959
 80088f4:	08008959 	.word	0x08008959
 80088f8:	08008959 	.word	0x08008959
 80088fc:	08008959 	.word	0x08008959
 8008900:	08008959 	.word	0x08008959
 8008904:	08008959 	.word	0x08008959
 8008908:	08008959 	.word	0x08008959
 800890c:	08008959 	.word	0x08008959
 8008910:	08008921 	.word	0x08008921
 8008914:	08008943 	.word	0x08008943
 8008918:	08008959 	.word	0x08008959
 800891c:	08008959 	.word	0x08008959
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(&linecode,pbuf,length>sizeof(linecode)?(sizeof(linecode)):(length));
 8008920:	88bb      	ldrh	r3, [r7, #4]
 8008922:	2b0c      	cmp	r3, #12
 8008924:	bf28      	it	cs
 8008926:	230c      	movcs	r3, #12
 8008928:	b29b      	uxth	r3, r3
 800892a:	461a      	mov	r2, r3
 800892c:	6839      	ldr	r1, [r7, #0]
 800892e:	480d      	ldr	r0, [pc, #52]	; (8008964 <CDC_Control_FS+0xf0>)
 8008930:	f000 fc2a 	bl	8009188 <memcpy>
    	linecode.IsUpdate++;
 8008934:	4b0b      	ldr	r3, [pc, #44]	; (8008964 <CDC_Control_FS+0xf0>)
 8008936:	7a1b      	ldrb	r3, [r3, #8]
 8008938:	3301      	adds	r3, #1
 800893a:	b2da      	uxtb	r2, r3
 800893c:	4b09      	ldr	r3, [pc, #36]	; (8008964 <CDC_Control_FS+0xf0>)
 800893e:	721a      	strb	r2, [r3, #8]
    break;
 8008940:	e00b      	b.n	800895a <CDC_Control_FS+0xe6>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf,&linecode,length>sizeof(linecode)?(sizeof(linecode)):(length));
 8008942:	88bb      	ldrh	r3, [r7, #4]
 8008944:	2b0c      	cmp	r3, #12
 8008946:	bf28      	it	cs
 8008948:	230c      	movcs	r3, #12
 800894a:	b29b      	uxth	r3, r3
 800894c:	461a      	mov	r2, r3
 800894e:	4905      	ldr	r1, [pc, #20]	; (8008964 <CDC_Control_FS+0xf0>)
 8008950:	6838      	ldr	r0, [r7, #0]
 8008952:	f000 fc19 	bl	8009188 <memcpy>
    break;
 8008956:	e000      	b.n	800895a <CDC_Control_FS+0xe6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008958:	bf00      	nop
  }

  return (USBD_OK);
 800895a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800895c:	4618      	mov	r0, r3
 800895e:	3708      	adds	r7, #8
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}
 8008964:	20000000 	.word	0x20000000

08008968 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  cdc_receive_call(Buf, *Len);
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4619      	mov	r1, r3
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f7f8 fde3 	bl	8001544 <cdc_receive_call>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800897e:	6879      	ldr	r1, [r7, #4]
 8008980:	4805      	ldr	r0, [pc, #20]	; (8008998 <CDC_Receive_FS+0x30>)
 8008982:	f7fe fe32 	bl	80075ea <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008986:	4804      	ldr	r0, [pc, #16]	; (8008998 <CDC_Receive_FS+0x30>)
 8008988:	f7fe fe71 	bl	800766e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800898c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800898e:	4618      	mov	r0, r3
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	20000d88 	.word	0x20000d88

0800899c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	460b      	mov	r3, r1
 80089a6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80089a8:	2300      	movs	r3, #0
 80089aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80089ac:	4b0d      	ldr	r3, [pc, #52]	; (80089e4 <CDC_Transmit_FS+0x48>)
 80089ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089b2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d001      	beq.n	80089c2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80089be:	2301      	movs	r3, #1
 80089c0:	e00b      	b.n	80089da <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80089c2:	887b      	ldrh	r3, [r7, #2]
 80089c4:	461a      	mov	r2, r3
 80089c6:	6879      	ldr	r1, [r7, #4]
 80089c8:	4806      	ldr	r0, [pc, #24]	; (80089e4 <CDC_Transmit_FS+0x48>)
 80089ca:	f7fe fdf5 	bl	80075b8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80089ce:	4805      	ldr	r0, [pc, #20]	; (80089e4 <CDC_Transmit_FS+0x48>)
 80089d0:	f7fe fe1e 	bl	8007610 <USBD_CDC_TransmitPacket>
 80089d4:	4603      	mov	r3, r0
 80089d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	20000d88 	.word	0x20000d88

080089e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	4603      	mov	r3, r0
 80089f0:	6039      	str	r1, [r7, #0]
 80089f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	2212      	movs	r2, #18
 80089f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80089fa:	4b03      	ldr	r3, [pc, #12]	; (8008a08 <USBD_FS_DeviceDescriptor+0x20>)
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	370c      	adds	r7, #12
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bc80      	pop	{r7}
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	20000160 	.word	0x20000160

08008a0c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	4603      	mov	r3, r0
 8008a14:	6039      	str	r1, [r7, #0]
 8008a16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	2204      	movs	r2, #4
 8008a1c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008a1e:	4b03      	ldr	r3, [pc, #12]	; (8008a2c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	370c      	adds	r7, #12
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bc80      	pop	{r7}
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop
 8008a2c:	20000174 	.word	0x20000174

08008a30 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	4603      	mov	r3, r0
 8008a38:	6039      	str	r1, [r7, #0]
 8008a3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a3c:	79fb      	ldrb	r3, [r7, #7]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d105      	bne.n	8008a4e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a42:	683a      	ldr	r2, [r7, #0]
 8008a44:	4907      	ldr	r1, [pc, #28]	; (8008a64 <USBD_FS_ProductStrDescriptor+0x34>)
 8008a46:	4808      	ldr	r0, [pc, #32]	; (8008a68 <USBD_FS_ProductStrDescriptor+0x38>)
 8008a48:	f7ff fdeb 	bl	8008622 <USBD_GetString>
 8008a4c:	e004      	b.n	8008a58 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a4e:	683a      	ldr	r2, [r7, #0]
 8008a50:	4904      	ldr	r1, [pc, #16]	; (8008a64 <USBD_FS_ProductStrDescriptor+0x34>)
 8008a52:	4805      	ldr	r0, [pc, #20]	; (8008a68 <USBD_FS_ProductStrDescriptor+0x38>)
 8008a54:	f7ff fde5 	bl	8008622 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a58:	4b02      	ldr	r3, [pc, #8]	; (8008a64 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3708      	adds	r7, #8
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	2000181c 	.word	0x2000181c
 8008a68:	080091dc 	.word	0x080091dc

08008a6c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	4603      	mov	r3, r0
 8008a74:	6039      	str	r1, [r7, #0]
 8008a76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008a78:	683a      	ldr	r2, [r7, #0]
 8008a7a:	4904      	ldr	r1, [pc, #16]	; (8008a8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008a7c:	4804      	ldr	r0, [pc, #16]	; (8008a90 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008a7e:	f7ff fdd0 	bl	8008622 <USBD_GetString>
  return USBD_StrDesc;
 8008a82:	4b02      	ldr	r3, [pc, #8]	; (8008a8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3708      	adds	r7, #8
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	2000181c 	.word	0x2000181c
 8008a90:	080091dc 	.word	0x080091dc

08008a94 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	6039      	str	r1, [r7, #0]
 8008a9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	221a      	movs	r2, #26
 8008aa4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008aa6:	f000 f843 	bl	8008b30 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008aaa:	4b02      	ldr	r3, [pc, #8]	; (8008ab4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	20000178 	.word	0x20000178

08008ab8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b082      	sub	sp, #8
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	4603      	mov	r3, r0
 8008ac0:	6039      	str	r1, [r7, #0]
 8008ac2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008ac4:	79fb      	ldrb	r3, [r7, #7]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d105      	bne.n	8008ad6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008aca:	683a      	ldr	r2, [r7, #0]
 8008acc:	4907      	ldr	r1, [pc, #28]	; (8008aec <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ace:	4808      	ldr	r0, [pc, #32]	; (8008af0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ad0:	f7ff fda7 	bl	8008622 <USBD_GetString>
 8008ad4:	e004      	b.n	8008ae0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008ad6:	683a      	ldr	r2, [r7, #0]
 8008ad8:	4904      	ldr	r1, [pc, #16]	; (8008aec <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ada:	4805      	ldr	r0, [pc, #20]	; (8008af0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008adc:	f7ff fda1 	bl	8008622 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ae0:	4b02      	ldr	r3, [pc, #8]	; (8008aec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3708      	adds	r7, #8
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	2000181c 	.word	0x2000181c
 8008af0:	080091e0 	.word	0x080091e0

08008af4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	4603      	mov	r3, r0
 8008afc:	6039      	str	r1, [r7, #0]
 8008afe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b00:	79fb      	ldrb	r3, [r7, #7]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d105      	bne.n	8008b12 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b06:	683a      	ldr	r2, [r7, #0]
 8008b08:	4907      	ldr	r1, [pc, #28]	; (8008b28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b0a:	4808      	ldr	r0, [pc, #32]	; (8008b2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b0c:	f7ff fd89 	bl	8008622 <USBD_GetString>
 8008b10:	e004      	b.n	8008b1c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b12:	683a      	ldr	r2, [r7, #0]
 8008b14:	4904      	ldr	r1, [pc, #16]	; (8008b28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b16:	4805      	ldr	r0, [pc, #20]	; (8008b2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b18:	f7ff fd83 	bl	8008622 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b1c:	4b02      	ldr	r3, [pc, #8]	; (8008b28 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3708      	adds	r7, #8
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	2000181c 	.word	0x2000181c
 8008b2c:	080091ec 	.word	0x080091ec

08008b30 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008b36:	4b0f      	ldr	r3, [pc, #60]	; (8008b74 <Get_SerialNum+0x44>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008b3c:	4b0e      	ldr	r3, [pc, #56]	; (8008b78 <Get_SerialNum+0x48>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008b42:	4b0e      	ldr	r3, [pc, #56]	; (8008b7c <Get_SerialNum+0x4c>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d009      	beq.n	8008b6a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008b56:	2208      	movs	r2, #8
 8008b58:	4909      	ldr	r1, [pc, #36]	; (8008b80 <Get_SerialNum+0x50>)
 8008b5a:	68f8      	ldr	r0, [r7, #12]
 8008b5c:	f000 f814 	bl	8008b88 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008b60:	2204      	movs	r2, #4
 8008b62:	4908      	ldr	r1, [pc, #32]	; (8008b84 <Get_SerialNum+0x54>)
 8008b64:	68b8      	ldr	r0, [r7, #8]
 8008b66:	f000 f80f 	bl	8008b88 <IntToUnicode>
  }
}
 8008b6a:	bf00      	nop
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	1ffff7e8 	.word	0x1ffff7e8
 8008b78:	1ffff7ec 	.word	0x1ffff7ec
 8008b7c:	1ffff7f0 	.word	0x1ffff7f0
 8008b80:	2000017a 	.word	0x2000017a
 8008b84:	2000018a 	.word	0x2000018a

08008b88 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b087      	sub	sp, #28
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	4613      	mov	r3, r2
 8008b94:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008b96:	2300      	movs	r3, #0
 8008b98:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	75fb      	strb	r3, [r7, #23]
 8008b9e:	e027      	b.n	8008bf0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	0f1b      	lsrs	r3, r3, #28
 8008ba4:	2b09      	cmp	r3, #9
 8008ba6:	d80b      	bhi.n	8008bc0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	0f1b      	lsrs	r3, r3, #28
 8008bac:	b2da      	uxtb	r2, r3
 8008bae:	7dfb      	ldrb	r3, [r7, #23]
 8008bb0:	005b      	lsls	r3, r3, #1
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	440b      	add	r3, r1
 8008bb8:	3230      	adds	r2, #48	; 0x30
 8008bba:	b2d2      	uxtb	r2, r2
 8008bbc:	701a      	strb	r2, [r3, #0]
 8008bbe:	e00a      	b.n	8008bd6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	0f1b      	lsrs	r3, r3, #28
 8008bc4:	b2da      	uxtb	r2, r3
 8008bc6:	7dfb      	ldrb	r3, [r7, #23]
 8008bc8:	005b      	lsls	r3, r3, #1
 8008bca:	4619      	mov	r1, r3
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	440b      	add	r3, r1
 8008bd0:	3237      	adds	r2, #55	; 0x37
 8008bd2:	b2d2      	uxtb	r2, r2
 8008bd4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	011b      	lsls	r3, r3, #4
 8008bda:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008bdc:	7dfb      	ldrb	r3, [r7, #23]
 8008bde:	005b      	lsls	r3, r3, #1
 8008be0:	3301      	adds	r3, #1
 8008be2:	68ba      	ldr	r2, [r7, #8]
 8008be4:	4413      	add	r3, r2
 8008be6:	2200      	movs	r2, #0
 8008be8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008bea:	7dfb      	ldrb	r3, [r7, #23]
 8008bec:	3301      	adds	r3, #1
 8008bee:	75fb      	strb	r3, [r7, #23]
 8008bf0:	7dfa      	ldrb	r2, [r7, #23]
 8008bf2:	79fb      	ldrb	r3, [r7, #7]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d3d3      	bcc.n	8008ba0 <IntToUnicode+0x18>
  }
}
 8008bf8:	bf00      	nop
 8008bfa:	371c      	adds	r7, #28
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bc80      	pop	{r7}
 8008c00:	4770      	bx	lr
	...

08008c04 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a0d      	ldr	r2, [pc, #52]	; (8008c48 <HAL_PCD_MspInit+0x44>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d113      	bne.n	8008c3e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008c16:	4b0d      	ldr	r3, [pc, #52]	; (8008c4c <HAL_PCD_MspInit+0x48>)
 8008c18:	69db      	ldr	r3, [r3, #28]
 8008c1a:	4a0c      	ldr	r2, [pc, #48]	; (8008c4c <HAL_PCD_MspInit+0x48>)
 8008c1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008c20:	61d3      	str	r3, [r2, #28]
 8008c22:	4b0a      	ldr	r3, [pc, #40]	; (8008c4c <HAL_PCD_MspInit+0x48>)
 8008c24:	69db      	ldr	r3, [r3, #28]
 8008c26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c2a:	60fb      	str	r3, [r7, #12]
 8008c2c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008c2e:	2200      	movs	r2, #0
 8008c30:	2100      	movs	r1, #0
 8008c32:	2014      	movs	r0, #20
 8008c34:	f7f9 fc43 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008c38:	2014      	movs	r0, #20
 8008c3a:	f7f9 fc5c 	bl	80024f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008c3e:	bf00      	nop
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	40005c00 	.word	0x40005c00
 8008c4c:	40021000 	.word	0x40021000

08008c50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8008c64:	4619      	mov	r1, r3
 8008c66:	4610      	mov	r0, r2
 8008c68:	f7fe fdb7 	bl	80077da <USBD_LL_SetupStage>
}
 8008c6c:	bf00      	nop
 8008c6e:	3708      	adds	r7, #8
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	460b      	mov	r3, r1
 8008c7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8008c86:	78fb      	ldrb	r3, [r7, #3]
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	015b      	lsls	r3, r3, #5
 8008c8c:	4413      	add	r3, r2
 8008c8e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	78fb      	ldrb	r3, [r7, #3]
 8008c96:	4619      	mov	r1, r3
 8008c98:	f7fe fdea 	bl	8007870 <USBD_LL_DataOutStage>
}
 8008c9c:	bf00      	nop
 8008c9e:	3708      	adds	r7, #8
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	460b      	mov	r3, r1
 8008cae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8008cb6:	78fb      	ldrb	r3, [r7, #3]
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	015b      	lsls	r3, r3, #5
 8008cbc:	4413      	add	r3, r2
 8008cbe:	333c      	adds	r3, #60	; 0x3c
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	78fb      	ldrb	r3, [r7, #3]
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	f7fe fe44 	bl	8007952 <USBD_LL_DataInStage>
}
 8008cca:	bf00      	nop
 8008ccc:	3708      	adds	r7, #8
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b082      	sub	sp, #8
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7fe ff54 	bl	8007b8e <USBD_LL_SOF>
}
 8008ce6:	bf00      	nop
 8008ce8:	3708      	adds	r7, #8
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}

08008cee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8008cee:	b580      	push	{r7, lr}
 8008cf0:	b084      	sub	sp, #16
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	2b02      	cmp	r3, #2
 8008d00:	d001      	beq.n	8008d06 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008d02:	f7f9 f849 	bl	8001d98 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008d0c:	7bfa      	ldrb	r2, [r7, #15]
 8008d0e:	4611      	mov	r1, r2
 8008d10:	4618      	mov	r0, r3
 8008d12:	f7fe ff04 	bl	8007b1e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f7fe febd 	bl	8007a9c <USBD_LL_Reset>
}
 8008d22:	bf00      	nop
 8008d24:	3710      	adds	r7, #16
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
	...

08008d2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7fe fefe 	bl	8007b3c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	699b      	ldr	r3, [r3, #24]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d005      	beq.n	8008d54 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008d48:	4b04      	ldr	r3, [pc, #16]	; (8008d5c <HAL_PCD_SuspendCallback+0x30>)
 8008d4a:	691b      	ldr	r3, [r3, #16]
 8008d4c:	4a03      	ldr	r2, [pc, #12]	; (8008d5c <HAL_PCD_SuspendCallback+0x30>)
 8008d4e:	f043 0306 	orr.w	r3, r3, #6
 8008d52:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008d54:	bf00      	nop
 8008d56:	3708      	adds	r7, #8
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	e000ed00 	.word	0xe000ed00

08008d60 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7fe fef8 	bl	8007b64 <USBD_LL_Resume>
}
 8008d74:	bf00      	nop
 8008d76:	3708      	adds	r7, #8
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008d84:	4a28      	ldr	r2, [pc, #160]	; (8008e28 <USBD_LL_Init+0xac>)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	4a26      	ldr	r2, [pc, #152]	; (8008e28 <USBD_LL_Init+0xac>)
 8008d90:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008d94:	4b24      	ldr	r3, [pc, #144]	; (8008e28 <USBD_LL_Init+0xac>)
 8008d96:	4a25      	ldr	r2, [pc, #148]	; (8008e2c <USBD_LL_Init+0xb0>)
 8008d98:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008d9a:	4b23      	ldr	r3, [pc, #140]	; (8008e28 <USBD_LL_Init+0xac>)
 8008d9c:	2208      	movs	r2, #8
 8008d9e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008da0:	4b21      	ldr	r3, [pc, #132]	; (8008e28 <USBD_LL_Init+0xac>)
 8008da2:	2202      	movs	r2, #2
 8008da4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008da6:	4b20      	ldr	r3, [pc, #128]	; (8008e28 <USBD_LL_Init+0xac>)
 8008da8:	2200      	movs	r2, #0
 8008daa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008dac:	4b1e      	ldr	r3, [pc, #120]	; (8008e28 <USBD_LL_Init+0xac>)
 8008dae:	2200      	movs	r2, #0
 8008db0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008db2:	4b1d      	ldr	r3, [pc, #116]	; (8008e28 <USBD_LL_Init+0xac>)
 8008db4:	2200      	movs	r2, #0
 8008db6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008db8:	481b      	ldr	r0, [pc, #108]	; (8008e28 <USBD_LL_Init+0xac>)
 8008dba:	f7fa f8e3 	bl	8002f84 <HAL_PCD_Init>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d001      	beq.n	8008dc8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008dc4:	f7f8 ffe8 	bl	8001d98 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008dce:	2318      	movs	r3, #24
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	f7fa ff7c 	bl	8003cd0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008dde:	2358      	movs	r3, #88	; 0x58
 8008de0:	2200      	movs	r2, #0
 8008de2:	2180      	movs	r1, #128	; 0x80
 8008de4:	f7fa ff74 	bl	8003cd0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008dee:	23c0      	movs	r3, #192	; 0xc0
 8008df0:	2200      	movs	r2, #0
 8008df2:	2181      	movs	r1, #129	; 0x81
 8008df4:	f7fa ff6c 	bl	8003cd0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008dfe:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008e02:	2200      	movs	r2, #0
 8008e04:	2101      	movs	r1, #1
 8008e06:	f7fa ff63 	bl	8003cd0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e14:	2200      	movs	r2, #0
 8008e16:	2182      	movs	r1, #130	; 0x82
 8008e18:	f7fa ff5a 	bl	8003cd0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3708      	adds	r7, #8
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	20001a1c 	.word	0x20001a1c
 8008e2c:	40005c00 	.word	0x40005c00

08008e30 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7fa f97d 	bl	8003146 <HAL_PCD_Start>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e50:	7bfb      	ldrb	r3, [r7, #15]
 8008e52:	4618      	mov	r0, r3
 8008e54:	f000 f948 	bl	80090e8 <USBD_Get_USB_Status>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008e5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b084      	sub	sp, #16
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
 8008e6e:	4608      	mov	r0, r1
 8008e70:	4611      	mov	r1, r2
 8008e72:	461a      	mov	r2, r3
 8008e74:	4603      	mov	r3, r0
 8008e76:	70fb      	strb	r3, [r7, #3]
 8008e78:	460b      	mov	r3, r1
 8008e7a:	70bb      	strb	r3, [r7, #2]
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e80:	2300      	movs	r3, #0
 8008e82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e84:	2300      	movs	r3, #0
 8008e86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e8e:	78bb      	ldrb	r3, [r7, #2]
 8008e90:	883a      	ldrh	r2, [r7, #0]
 8008e92:	78f9      	ldrb	r1, [r7, #3]
 8008e94:	f7fa fab0 	bl	80033f8 <HAL_PCD_EP_Open>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e9c:	7bfb      	ldrb	r3, [r7, #15]
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f000 f922 	bl	80090e8 <USBD_Get_USB_Status>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8008ea8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008eb2:	b580      	push	{r7, lr}
 8008eb4:	b084      	sub	sp, #16
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
 8008eba:	460b      	mov	r3, r1
 8008ebc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ecc:	78fa      	ldrb	r2, [r7, #3]
 8008ece:	4611      	mov	r1, r2
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f7fa faf1 	bl	80034b8 <HAL_PCD_EP_Close>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008eda:	7bfb      	ldrb	r3, [r7, #15]
 8008edc:	4618      	mov	r0, r3
 8008ede:	f000 f903 	bl	80090e8 <USBD_Get_USB_Status>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8008ee6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3710      	adds	r7, #16
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	460b      	mov	r3, r1
 8008efa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008efc:	2300      	movs	r3, #0
 8008efe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f00:	2300      	movs	r3, #0
 8008f02:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f0a:	78fa      	ldrb	r2, [r7, #3]
 8008f0c:	4611      	mov	r1, r2
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7fa fb9b 	bl	800364a <HAL_PCD_EP_SetStall>
 8008f14:	4603      	mov	r3, r0
 8008f16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f18:	7bfb      	ldrb	r3, [r7, #15]
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f000 f8e4 	bl	80090e8 <USBD_Get_USB_Status>
 8008f20:	4603      	mov	r3, r0
 8008f22:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8008f24:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3710      	adds	r7, #16
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b084      	sub	sp, #16
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
 8008f36:	460b      	mov	r3, r1
 8008f38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f48:	78fa      	ldrb	r2, [r7, #3]
 8008f4a:	4611      	mov	r1, r2
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7fa fbd6 	bl	80036fe <HAL_PCD_EP_ClrStall>
 8008f52:	4603      	mov	r3, r0
 8008f54:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f56:	7bfb      	ldrb	r3, [r7, #15]
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f000 f8c5 	bl	80090e8 <USBD_Get_USB_Status>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8008f62:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3710      	adds	r7, #16
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b085      	sub	sp, #20
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	460b      	mov	r3, r1
 8008f76:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f7e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8008f80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	da08      	bge.n	8008f9a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8008f88:	78fb      	ldrb	r3, [r7, #3]
 8008f8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f8e:	68fa      	ldr	r2, [r7, #12]
 8008f90:	015b      	lsls	r3, r3, #5
 8008f92:	4413      	add	r3, r2
 8008f94:	332a      	adds	r3, #42	; 0x2a
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	e008      	b.n	8008fac <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8008f9a:	78fb      	ldrb	r3, [r7, #3]
 8008f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fa0:	68fa      	ldr	r2, [r7, #12]
 8008fa2:	015b      	lsls	r3, r3, #5
 8008fa4:	4413      	add	r3, r2
 8008fa6:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8008faa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3714      	adds	r7, #20
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bc80      	pop	{r7}
 8008fb4:	4770      	bx	lr

08008fb6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b084      	sub	sp, #16
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008fd0:	78fa      	ldrb	r2, [r7, #3]
 8008fd2:	4611      	mov	r1, r2
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7fa f9ea 	bl	80033ae <HAL_PCD_SetAddress>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fde:	7bfb      	ldrb	r3, [r7, #15]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f000 f881 	bl	80090e8 <USBD_Get_USB_Status>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8008fea:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b086      	sub	sp, #24
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	607a      	str	r2, [r7, #4]
 8008ffe:	461a      	mov	r2, r3
 8009000:	460b      	mov	r3, r1
 8009002:	72fb      	strb	r3, [r7, #11]
 8009004:	4613      	mov	r3, r2
 8009006:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009008:	2300      	movs	r3, #0
 800900a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800900c:	2300      	movs	r3, #0
 800900e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009016:	893b      	ldrh	r3, [r7, #8]
 8009018:	7af9      	ldrb	r1, [r7, #11]
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	f7fa fadc 	bl	80035d8 <HAL_PCD_EP_Transmit>
 8009020:	4603      	mov	r3, r0
 8009022:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009024:	7dfb      	ldrb	r3, [r7, #23]
 8009026:	4618      	mov	r0, r3
 8009028:	f000 f85e 	bl	80090e8 <USBD_Get_USB_Status>
 800902c:	4603      	mov	r3, r0
 800902e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8009030:	7dbb      	ldrb	r3, [r7, #22]
}
 8009032:	4618      	mov	r0, r3
 8009034:	3718      	adds	r7, #24
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b086      	sub	sp, #24
 800903e:	af00      	add	r7, sp, #0
 8009040:	60f8      	str	r0, [r7, #12]
 8009042:	607a      	str	r2, [r7, #4]
 8009044:	461a      	mov	r2, r3
 8009046:	460b      	mov	r3, r1
 8009048:	72fb      	strb	r3, [r7, #11]
 800904a:	4613      	mov	r3, r2
 800904c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800904e:	2300      	movs	r3, #0
 8009050:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009052:	2300      	movs	r3, #0
 8009054:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800905c:	893b      	ldrh	r3, [r7, #8]
 800905e:	7af9      	ldrb	r1, [r7, #11]
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	f7fa fa6b 	bl	800353c <HAL_PCD_EP_Receive>
 8009066:	4603      	mov	r3, r0
 8009068:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800906a:	7dfb      	ldrb	r3, [r7, #23]
 800906c:	4618      	mov	r0, r3
 800906e:	f000 f83b 	bl	80090e8 <USBD_Get_USB_Status>
 8009072:	4603      	mov	r3, r0
 8009074:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8009076:	7dbb      	ldrb	r3, [r7, #22]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3718      	adds	r7, #24
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	460b      	mov	r3, r1
 800908a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009092:	78fa      	ldrb	r2, [r7, #3]
 8009094:	4611      	mov	r1, r2
 8009096:	4618      	mov	r0, r3
 8009098:	f7fa fa8a 	bl	80035b0 <HAL_PCD_EP_GetRxCount>
 800909c:	4603      	mov	r3, r0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
	...

080090a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80090b0:	4b02      	ldr	r3, [pc, #8]	; (80090bc <USBD_static_malloc+0x14>)
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	370c      	adds	r7, #12
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bc80      	pop	{r7}
 80090ba:	4770      	bx	lr
 80090bc:	200005a0 	.word	0x200005a0

080090c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]

}
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bc80      	pop	{r7}
 80090d0:	4770      	bx	lr

080090d2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090d2:	b480      	push	{r7}
 80090d4:	b083      	sub	sp, #12
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
 80090da:	460b      	mov	r3, r1
 80090dc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80090de:	bf00      	nop
 80090e0:	370c      	adds	r7, #12
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bc80      	pop	{r7}
 80090e6:	4770      	bx	lr

080090e8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b085      	sub	sp, #20
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	4603      	mov	r3, r0
 80090f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090f2:	2300      	movs	r3, #0
 80090f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80090f6:	79fb      	ldrb	r3, [r7, #7]
 80090f8:	2b03      	cmp	r3, #3
 80090fa:	d817      	bhi.n	800912c <USBD_Get_USB_Status+0x44>
 80090fc:	a201      	add	r2, pc, #4	; (adr r2, 8009104 <USBD_Get_USB_Status+0x1c>)
 80090fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009102:	bf00      	nop
 8009104:	08009115 	.word	0x08009115
 8009108:	0800911b 	.word	0x0800911b
 800910c:	08009121 	.word	0x08009121
 8009110:	08009127 	.word	0x08009127
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009114:	2300      	movs	r3, #0
 8009116:	73fb      	strb	r3, [r7, #15]
    break;
 8009118:	e00b      	b.n	8009132 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800911a:	2302      	movs	r3, #2
 800911c:	73fb      	strb	r3, [r7, #15]
    break;
 800911e:	e008      	b.n	8009132 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009120:	2301      	movs	r3, #1
 8009122:	73fb      	strb	r3, [r7, #15]
    break;
 8009124:	e005      	b.n	8009132 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009126:	2302      	movs	r3, #2
 8009128:	73fb      	strb	r3, [r7, #15]
    break;
 800912a:	e002      	b.n	8009132 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800912c:	2302      	movs	r3, #2
 800912e:	73fb      	strb	r3, [r7, #15]
    break;
 8009130:	bf00      	nop
  }
  return usb_status;
 8009132:	7bfb      	ldrb	r3, [r7, #15]
}
 8009134:	4618      	mov	r0, r3
 8009136:	3714      	adds	r7, #20
 8009138:	46bd      	mov	sp, r7
 800913a:	bc80      	pop	{r7}
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop

08009140 <__libc_init_array>:
 8009140:	b570      	push	{r4, r5, r6, lr}
 8009142:	2500      	movs	r5, #0
 8009144:	4e0c      	ldr	r6, [pc, #48]	; (8009178 <__libc_init_array+0x38>)
 8009146:	4c0d      	ldr	r4, [pc, #52]	; (800917c <__libc_init_array+0x3c>)
 8009148:	1ba4      	subs	r4, r4, r6
 800914a:	10a4      	asrs	r4, r4, #2
 800914c:	42a5      	cmp	r5, r4
 800914e:	d109      	bne.n	8009164 <__libc_init_array+0x24>
 8009150:	f000 f82e 	bl	80091b0 <_init>
 8009154:	2500      	movs	r5, #0
 8009156:	4e0a      	ldr	r6, [pc, #40]	; (8009180 <__libc_init_array+0x40>)
 8009158:	4c0a      	ldr	r4, [pc, #40]	; (8009184 <__libc_init_array+0x44>)
 800915a:	1ba4      	subs	r4, r4, r6
 800915c:	10a4      	asrs	r4, r4, #2
 800915e:	42a5      	cmp	r5, r4
 8009160:	d105      	bne.n	800916e <__libc_init_array+0x2e>
 8009162:	bd70      	pop	{r4, r5, r6, pc}
 8009164:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009168:	4798      	blx	r3
 800916a:	3501      	adds	r5, #1
 800916c:	e7ee      	b.n	800914c <__libc_init_array+0xc>
 800916e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009172:	4798      	blx	r3
 8009174:	3501      	adds	r5, #1
 8009176:	e7f2      	b.n	800915e <__libc_init_array+0x1e>
 8009178:	08009214 	.word	0x08009214
 800917c:	08009214 	.word	0x08009214
 8009180:	08009214 	.word	0x08009214
 8009184:	08009218 	.word	0x08009218

08009188 <memcpy>:
 8009188:	b510      	push	{r4, lr}
 800918a:	1e43      	subs	r3, r0, #1
 800918c:	440a      	add	r2, r1
 800918e:	4291      	cmp	r1, r2
 8009190:	d100      	bne.n	8009194 <memcpy+0xc>
 8009192:	bd10      	pop	{r4, pc}
 8009194:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009198:	f803 4f01 	strb.w	r4, [r3, #1]!
 800919c:	e7f7      	b.n	800918e <memcpy+0x6>

0800919e <memset>:
 800919e:	4603      	mov	r3, r0
 80091a0:	4402      	add	r2, r0
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d100      	bne.n	80091a8 <memset+0xa>
 80091a6:	4770      	bx	lr
 80091a8:	f803 1b01 	strb.w	r1, [r3], #1
 80091ac:	e7f9      	b.n	80091a2 <memset+0x4>
	...

080091b0 <_init>:
 80091b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091b2:	bf00      	nop
 80091b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091b6:	bc08      	pop	{r3}
 80091b8:	469e      	mov	lr, r3
 80091ba:	4770      	bx	lr

080091bc <_fini>:
 80091bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091be:	bf00      	nop
 80091c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091c2:	bc08      	pop	{r3}
 80091c4:	469e      	mov	lr, r3
 80091c6:	4770      	bx	lr
