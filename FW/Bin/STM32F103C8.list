
STM32F103C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc80  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800bd8c  0800bd8c  0001bd8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdf4  0800bdf4  000201a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800bdf4  0800bdf4  000201a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bdf4  0800bdf4  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdf4  0800bdf4  0001bdf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bdf8  0800bdf8  0001bdf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0800bdfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001edc  200001a4  0800bfa0  000201a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002080  0800bfa0  00022080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025139  00000000  00000000  000201cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000468f  00000000  00000000  00045306  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018b8  00000000  00000000  00049998  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001738  00000000  00000000  0004b250  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000199bf  00000000  00000000  0004c988  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000172ca  00000000  00000000  00066347  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007b7c0  00000000  00000000  0007d611  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f8dd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000676c  00000000  00000000  000f8e4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001a4 	.word	0x200001a4
 8000128:	00000000 	.word	0x00000000
 800012c:	0800bd74 	.word	0x0800bd74

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001a8 	.word	0x200001a8
 8000148:	0800bd74 	.word	0x0800bd74

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2uiz>:
 80008e8:	004a      	lsls	r2, r1, #1
 80008ea:	d211      	bcs.n	8000910 <__aeabi_d2uiz+0x28>
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d211      	bcs.n	8000916 <__aeabi_d2uiz+0x2e>
 80008f2:	d50d      	bpl.n	8000910 <__aeabi_d2uiz+0x28>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d40e      	bmi.n	800091c <__aeabi_d2uiz+0x34>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	fa23 f002 	lsr.w	r0, r3, r2
 800090e:	4770      	bx	lr
 8000910:	f04f 0000 	mov.w	r0, #0
 8000914:	4770      	bx	lr
 8000916:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091a:	d102      	bne.n	8000922 <__aeabi_d2uiz+0x3a>
 800091c:	f04f 30ff 	mov.w	r0, #4294967295
 8000920:	4770      	bx	lr
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	4770      	bx	lr

08000928 <EEPROM24XX_IsConnected>:
#endif

size_t _EEPROM_SIZE_KBIT=64;//容量设置
//##########################################################################
bool		EEPROM24XX_IsConnected(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	#if	(_EEPROM_USE_WP_PIN==1)
	HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_SET);
	#endif
	if(HAL_I2C_IsDeviceReady(&_EEPROM24XX_I2C,0xa0,1,100)==HAL_OK)
 800092c:	2364      	movs	r3, #100	; 0x64
 800092e:	2201      	movs	r2, #1
 8000930:	21a0      	movs	r1, #160	; 0xa0
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <EEPROM24XX_IsConnected+0x20>)
 8000934:	f004 fa50 	bl	8004dd8 <HAL_I2C_IsDeviceReady>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d101      	bne.n	8000942 <EEPROM24XX_IsConnected+0x1a>
		return true;
 800093e:	2301      	movs	r3, #1
 8000940:	e000      	b.n	8000944 <EEPROM24XX_IsConnected+0x1c>
	else
		return false;	
 8000942:	2300      	movs	r3, #0
}
 8000944:	4618      	mov	r0, r3
 8000946:	bd80      	pop	{r7, pc}
 8000948:	2000100c 	.word	0x2000100c

0800094c <EEPROM24XX_Save_No_Page>:
//##########################################################################
//不跨页写
static bool		EEPROM24XX_Save_No_Page(uint16_t Address,void *data,size_t size_of_data)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	; 0x28
 8000950:	af04      	add	r7, sp, #16
 8000952:	4603      	mov	r3, r0
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
 8000958:	81fb      	strh	r3, [r7, #14]
	uint8_t ret=0;
 800095a:	2300      	movs	r3, #0
 800095c:	75fb      	strb	r3, [r7, #23]
	if ((_EEPROM_SIZE_KBIT==1) || (_EEPROM_SIZE_KBIT==2))
 800095e:	4b62      	ldr	r3, [pc, #392]	; (8000ae8 <EEPROM24XX_Save_No_Page+0x19c>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d003      	beq.n	800096e <EEPROM24XX_Save_No_Page+0x22>
 8000966:	4b60      	ldr	r3, [pc, #384]	; (8000ae8 <EEPROM24XX_Save_No_Page+0x19c>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2b02      	cmp	r3, #2
 800096c:	d104      	bne.n	8000978 <EEPROM24XX_Save_No_Page+0x2c>
		{
			if(size_of_data > 8)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2b08      	cmp	r3, #8
 8000972:	d917      	bls.n	80009a4 <EEPROM24XX_Save_No_Page+0x58>
			return false;
 8000974:	2300      	movs	r3, #0
 8000976:	e0b3      	b.n	8000ae0 <EEPROM24XX_Save_No_Page+0x194>
		}
	else if ((_EEPROM_SIZE_KBIT==4) || (_EEPROM_SIZE_KBIT==8) || (_EEPROM_SIZE_KBIT==16))
 8000978:	4b5b      	ldr	r3, [pc, #364]	; (8000ae8 <EEPROM24XX_Save_No_Page+0x19c>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b04      	cmp	r3, #4
 800097e:	d007      	beq.n	8000990 <EEPROM24XX_Save_No_Page+0x44>
 8000980:	4b59      	ldr	r3, [pc, #356]	; (8000ae8 <EEPROM24XX_Save_No_Page+0x19c>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b08      	cmp	r3, #8
 8000986:	d003      	beq.n	8000990 <EEPROM24XX_Save_No_Page+0x44>
 8000988:	4b57      	ldr	r3, [pc, #348]	; (8000ae8 <EEPROM24XX_Save_No_Page+0x19c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b10      	cmp	r3, #16
 800098e:	d104      	bne.n	800099a <EEPROM24XX_Save_No_Page+0x4e>
		 {
			if(size_of_data > 16)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2b10      	cmp	r3, #16
 8000994:	d906      	bls.n	80009a4 <EEPROM24XX_Save_No_Page+0x58>
			return false;
 8000996:	2300      	movs	r3, #0
 8000998:	e0a2      	b.n	8000ae0 <EEPROM24XX_Save_No_Page+0x194>
		 }
	else
		 {
			if(size_of_data > 32)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2b20      	cmp	r3, #32
 800099e:	d901      	bls.n	80009a4 <EEPROM24XX_Save_No_Page+0x58>
			return false;
 80009a0:	2300      	movs	r3, #0
 80009a2:	e09d      	b.n	8000ae0 <EEPROM24XX_Save_No_Page+0x194>
	
	#if	(_EEPROM_USE_WP_PIN==1)
	HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_RESET);
	#endif
	
	if ((_EEPROM_SIZE_KBIT==1) || (_EEPROM_SIZE_KBIT==2))
 80009a4:	4b50      	ldr	r3, [pc, #320]	; (8000ae8 <EEPROM24XX_Save_No_Page+0x19c>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d003      	beq.n	80009b4 <EEPROM24XX_Save_No_Page+0x68>
 80009ac:	4b4e      	ldr	r3, [pc, #312]	; (8000ae8 <EEPROM24XX_Save_No_Page+0x19c>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	d113      	bne.n	80009dc <EEPROM24XX_Save_No_Page+0x90>
		{
			if(HAL_I2C_Mem_Write(&_EEPROM24XX_I2C,0xa0,Address,I2C_MEMADD_SIZE_8BIT,(uint8_t*)data,size_of_data,100) == HAL_OK) ret=1;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	89f9      	ldrh	r1, [r7, #14]
 80009ba:	2264      	movs	r2, #100	; 0x64
 80009bc:	9202      	str	r2, [sp, #8]
 80009be:	9301      	str	r3, [sp, #4]
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	2301      	movs	r3, #1
 80009c6:	460a      	mov	r2, r1
 80009c8:	21a0      	movs	r1, #160	; 0xa0
 80009ca:	4848      	ldr	r0, [pc, #288]	; (8000aec <EEPROM24XX_Save_No_Page+0x1a0>)
 80009cc:	f003 fed4 	bl	8004778 <HAL_I2C_Mem_Write>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d17b      	bne.n	8000ace <EEPROM24XX_Save_No_Page+0x182>
 80009d6:	2301      	movs	r3, #1
 80009d8:	75fb      	strb	r3, [r7, #23]
 80009da:	e078      	b.n	8000ace <EEPROM24XX_Save_No_Page+0x182>
		}
	else if	(_EEPROM_SIZE_KBIT==4)
 80009dc:	4b42      	ldr	r3, [pc, #264]	; (8000ae8 <EEPROM24XX_Save_No_Page+0x19c>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b04      	cmp	r3, #4
 80009e2:	d11d      	bne.n	8000a20 <EEPROM24XX_Save_No_Page+0xd4>
		{
			if(HAL_I2C_Mem_Write(&_EEPROM24XX_I2C,0xa0|((Address&0x0100>>7)),(Address&0xff),I2C_MEMADD_SIZE_8BIT,(uint8_t*)data,size_of_data,100) == HAL_OK) ret=1;
 80009e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009e8:	f003 0302 	and.w	r3, r3, #2
 80009ec:	b21b      	sxth	r3, r3
 80009ee:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80009f2:	b21b      	sxth	r3, r3
 80009f4:	b299      	uxth	r1, r3
 80009f6:	89fb      	ldrh	r3, [r7, #14]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	b298      	uxth	r0, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	2264      	movs	r2, #100	; 0x64
 8000a02:	9202      	str	r2, [sp, #8]
 8000a04:	9301      	str	r3, [sp, #4]
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	9300      	str	r3, [sp, #0]
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	4837      	ldr	r0, [pc, #220]	; (8000aec <EEPROM24XX_Save_No_Page+0x1a0>)
 8000a10:	f003 feb2 	bl	8004778 <HAL_I2C_Mem_Write>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d159      	bne.n	8000ace <EEPROM24XX_Save_No_Page+0x182>
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	75fb      	strb	r3, [r7, #23]
 8000a1e:	e056      	b.n	8000ace <EEPROM24XX_Save_No_Page+0x182>
		}
	else if	(_EEPROM_SIZE_KBIT==8)
 8000a20:	4b31      	ldr	r3, [pc, #196]	; (8000ae8 <EEPROM24XX_Save_No_Page+0x19c>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b08      	cmp	r3, #8
 8000a26:	d11d      	bne.n	8000a64 <EEPROM24XX_Save_No_Page+0x118>
		{
			if(HAL_I2C_Mem_Write(&_EEPROM24XX_I2C,0xa0|((Address&0x0300>>7)),(Address&0xff),I2C_MEMADD_SIZE_8BIT,(uint8_t*)data,size_of_data,100) == HAL_OK) ret=1;
 8000a28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a2c:	f003 0306 	and.w	r3, r3, #6
 8000a30:	b21b      	sxth	r3, r3
 8000a32:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000a36:	b21b      	sxth	r3, r3
 8000a38:	b299      	uxth	r1, r3
 8000a3a:	89fb      	ldrh	r3, [r7, #14]
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	b298      	uxth	r0, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	2264      	movs	r2, #100	; 0x64
 8000a46:	9202      	str	r2, [sp, #8]
 8000a48:	9301      	str	r3, [sp, #4]
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	9300      	str	r3, [sp, #0]
 8000a4e:	2301      	movs	r3, #1
 8000a50:	4602      	mov	r2, r0
 8000a52:	4826      	ldr	r0, [pc, #152]	; (8000aec <EEPROM24XX_Save_No_Page+0x1a0>)
 8000a54:	f003 fe90 	bl	8004778 <HAL_I2C_Mem_Write>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d137      	bne.n	8000ace <EEPROM24XX_Save_No_Page+0x182>
 8000a5e:	2301      	movs	r3, #1
 8000a60:	75fb      	strb	r3, [r7, #23]
 8000a62:	e034      	b.n	8000ace <EEPROM24XX_Save_No_Page+0x182>
		}
	else if(_EEPROM_SIZE_KBIT==16)
 8000a64:	4b20      	ldr	r3, [pc, #128]	; (8000ae8 <EEPROM24XX_Save_No_Page+0x19c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b10      	cmp	r3, #16
 8000a6a:	d11d      	bne.n	8000aa8 <EEPROM24XX_Save_No_Page+0x15c>
		{
			if(HAL_I2C_Mem_Write(&_EEPROM24XX_I2C,0xa0|((Address&0x0700>>7)),(Address&0xff),I2C_MEMADD_SIZE_8BIT,(uint8_t*)data,size_of_data,100) == HAL_OK) ret=1;
 8000a6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a70:	f003 030e 	and.w	r3, r3, #14
 8000a74:	b21b      	sxth	r3, r3
 8000a76:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000a7a:	b21b      	sxth	r3, r3
 8000a7c:	b299      	uxth	r1, r3
 8000a7e:	89fb      	ldrh	r3, [r7, #14]
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	b298      	uxth	r0, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	2264      	movs	r2, #100	; 0x64
 8000a8a:	9202      	str	r2, [sp, #8]
 8000a8c:	9301      	str	r3, [sp, #4]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	9300      	str	r3, [sp, #0]
 8000a92:	2301      	movs	r3, #1
 8000a94:	4602      	mov	r2, r0
 8000a96:	4815      	ldr	r0, [pc, #84]	; (8000aec <EEPROM24XX_Save_No_Page+0x1a0>)
 8000a98:	f003 fe6e 	bl	8004778 <HAL_I2C_Mem_Write>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d115      	bne.n	8000ace <EEPROM24XX_Save_No_Page+0x182>
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	75fb      	strb	r3, [r7, #23]
 8000aa6:	e012      	b.n	8000ace <EEPROM24XX_Save_No_Page+0x182>
		}
	else
		{
			if(HAL_I2C_Mem_Write(&_EEPROM24XX_I2C,0xa0,Address,I2C_MEMADD_SIZE_16BIT,(uint8_t*)data,size_of_data,100) == HAL_OK) ret=1;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	89f9      	ldrh	r1, [r7, #14]
 8000aae:	2264      	movs	r2, #100	; 0x64
 8000ab0:	9202      	str	r2, [sp, #8]
 8000ab2:	9301      	str	r3, [sp, #4]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	9300      	str	r3, [sp, #0]
 8000ab8:	2310      	movs	r3, #16
 8000aba:	460a      	mov	r2, r1
 8000abc:	21a0      	movs	r1, #160	; 0xa0
 8000abe:	480b      	ldr	r0, [pc, #44]	; (8000aec <EEPROM24XX_Save_No_Page+0x1a0>)
 8000ac0:	f003 fe5a 	bl	8004778 <HAL_I2C_Mem_Write>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d101      	bne.n	8000ace <EEPROM24XX_Save_No_Page+0x182>
 8000aca:	2301      	movs	r3, #1
 8000acc:	75fb      	strb	r3, [r7, #23]
		}


	if(ret)
 8000ace:	7dfb      	ldrb	r3, [r7, #23]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d004      	beq.n	8000ade <EEPROM24XX_Save_No_Page+0x192>
	{
		#if (_EEPROM_FREERTOS_IS_ENABLE==1)
		osDelay(7);
		#else
		HAL_Delay(7);
 8000ad4:	2007      	movs	r0, #7
 8000ad6:	f002 fce9 	bl	80034ac <HAL_Delay>
		#endif
		#if	(_EEPROM_USE_WP_PIN==1)
		HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_SET);
		#endif
		return true;
 8000ada:	2301      	movs	r3, #1
 8000adc:	e000      	b.n	8000ae0 <EEPROM24XX_Save_No_Page+0x194>
	else
	{
		#if	(_EEPROM_USE_WP_PIN==1)
		HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_SET);
		#endif
		return false;		
 8000ade:	2300      	movs	r3, #0
	}
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3718      	adds	r7, #24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	2000100c 	.word	0x2000100c

08000af0 <EEPROM24XX_Save>:

//##########################################################################
bool		EEPROM24XX_Save(uint16_t Address,void *data,size_t size_of_data)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	; 0x28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
 8000afc:	81fb      	strh	r3, [r7, #14]
	bool ret=true;
 8000afe:	2301      	movs	r3, #1
 8000b00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	//判断页大小
	size_t page_size=32;
 8000b04:	2320      	movs	r3, #32
 8000b06:	623b      	str	r3, [r7, #32]
	if ((_EEPROM_SIZE_KBIT==1) || (_EEPROM_SIZE_KBIT==2))
 8000b08:	4b48      	ldr	r3, [pc, #288]	; (8000c2c <EEPROM24XX_Save+0x13c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d003      	beq.n	8000b18 <EEPROM24XX_Save+0x28>
 8000b10:	4b46      	ldr	r3, [pc, #280]	; (8000c2c <EEPROM24XX_Save+0x13c>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d102      	bne.n	8000b1e <EEPROM24XX_Save+0x2e>
			{
				page_size = 8;
 8000b18:	2308      	movs	r3, #8
 8000b1a:	623b      	str	r3, [r7, #32]
 8000b1c:	e010      	b.n	8000b40 <EEPROM24XX_Save+0x50>

			}
	else if ((_EEPROM_SIZE_KBIT==4) || (_EEPROM_SIZE_KBIT==8) || (_EEPROM_SIZE_KBIT==16))
 8000b1e:	4b43      	ldr	r3, [pc, #268]	; (8000c2c <EEPROM24XX_Save+0x13c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2b04      	cmp	r3, #4
 8000b24:	d007      	beq.n	8000b36 <EEPROM24XX_Save+0x46>
 8000b26:	4b41      	ldr	r3, [pc, #260]	; (8000c2c <EEPROM24XX_Save+0x13c>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2b08      	cmp	r3, #8
 8000b2c:	d003      	beq.n	8000b36 <EEPROM24XX_Save+0x46>
 8000b2e:	4b3f      	ldr	r3, [pc, #252]	; (8000c2c <EEPROM24XX_Save+0x13c>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2b10      	cmp	r3, #16
 8000b34:	d102      	bne.n	8000b3c <EEPROM24XX_Save+0x4c>
			 {
				page_size = 16;
 8000b36:	2310      	movs	r3, #16
 8000b38:	623b      	str	r3, [r7, #32]
 8000b3a:	e001      	b.n	8000b40 <EEPROM24XX_Save+0x50>
			 }
	else
			 {
				page_size = 32;
 8000b3c:	2320      	movs	r3, #32
 8000b3e:	623b      	str	r3, [r7, #32]
			 }

	size_t data_to_write=size_of_data,data_written=0;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	61fb      	str	r3, [r7, #28]
 8000b44:	2300      	movs	r3, #0
 8000b46:	61bb      	str	r3, [r7, #24]
	uint8_t * buff=(uint8_t *)data;
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	617b      	str	r3, [r7, #20]

	//写开始一页的数据
	data_written=(Address/page_size+1)*page_size-Address;
 8000b4c:	89fa      	ldrh	r2, [r7, #14]
 8000b4e:	6a3b      	ldr	r3, [r7, #32]
 8000b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b54:	3301      	adds	r3, #1
 8000b56:	6a3a      	ldr	r2, [r7, #32]
 8000b58:	fb02 f203 	mul.w	r2, r2, r3
 8000b5c:	89fb      	ldrh	r3, [r7, #14]
 8000b5e:	1ad3      	subs	r3, r2, r3
 8000b60:	61bb      	str	r3, [r7, #24]
	if(data_written > data_to_write) data_written=data_to_write;
 8000b62:	69ba      	ldr	r2, [r7, #24]
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d901      	bls.n	8000b6e <EEPROM24XX_Save+0x7e>
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	61bb      	str	r3, [r7, #24]
	ret &= EEPROM24XX_Save_No_Page(Address,buff,data_written);
 8000b6e:	89fb      	ldrh	r3, [r7, #14]
 8000b70:	69ba      	ldr	r2, [r7, #24]
 8000b72:	6979      	ldr	r1, [r7, #20]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fee9 	bl	800094c <EEPROM24XX_Save_No_Page>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b82:	4013      	ands	r3, r2
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	bf14      	ite	ne
 8000b88:	2301      	movne	r3, #1
 8000b8a:	2300      	moveq	r3, #0
 8000b8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	data_to_write-=data_written;
 8000b90:	69fa      	ldr	r2, [r7, #28]
 8000b92:	69bb      	ldr	r3, [r7, #24]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	61fb      	str	r3, [r7, #28]

	//写中间页
	while(data_to_write>page_size)
 8000b98:	e020      	b.n	8000bdc <EEPROM24XX_Save+0xec>
	{
		ret &=EEPROM24XX_Save_No_Page(Address+size_of_data-data_to_write,buff+size_of_data-data_to_write,page_size);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	89fb      	ldrh	r3, [r7, #14]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	b298      	uxth	r0, r3
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	697a      	ldr	r2, [r7, #20]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	6a3a      	ldr	r2, [r7, #32]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	f7ff fec7 	bl	800094c <EEPROM24XX_Save_No_Page>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	bf14      	ite	ne
 8000bcc:	2301      	movne	r3, #1
 8000bce:	2300      	moveq	r3, #0
 8000bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		data_to_write-=page_size;
 8000bd4:	69fa      	ldr	r2, [r7, #28]
 8000bd6:	6a3b      	ldr	r3, [r7, #32]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	61fb      	str	r3, [r7, #28]
	while(data_to_write>page_size)
 8000bdc:	69fa      	ldr	r2, [r7, #28]
 8000bde:	6a3b      	ldr	r3, [r7, #32]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d8da      	bhi.n	8000b9a <EEPROM24XX_Save+0xaa>
	}

	//写最后一页
	ret &=EEPROM24XX_Save_No_Page(Address+size_of_data-data_to_write,buff+size_of_data-data_to_write,data_to_write);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	b29a      	uxth	r2, r3
 8000be8:	89fb      	ldrh	r3, [r7, #14]
 8000bea:	4413      	add	r3, r2
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	b298      	uxth	r0, r3
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	1ad3      	subs	r3, r2, r3
 8000bfc:	697a      	ldr	r2, [r7, #20]
 8000bfe:	4413      	add	r3, r2
 8000c00:	69fa      	ldr	r2, [r7, #28]
 8000c02:	4619      	mov	r1, r3
 8000c04:	f7ff fea2 	bl	800094c <EEPROM24XX_Save_No_Page>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c10:	4013      	ands	r3, r2
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	bf14      	ite	ne
 8000c16:	2301      	movne	r3, #1
 8000c18:	2300      	moveq	r3, #0
 8000c1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return ret;
 8000c1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3728      	adds	r7, #40	; 0x28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000000 	.word	0x20000000

08000c30 <EEPROM24XX_Load>:

//##########################################################################
bool		EEPROM24XX_Load(uint16_t Address,void *data,size_t size_of_data)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af04      	add	r7, sp, #16
 8000c36:	4603      	mov	r3, r0
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
 8000c3c:	81fb      	strh	r3, [r7, #14]

	uint8_t ret=0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	75fb      	strb	r3, [r7, #23]
	#if	(_EEPROM_USE_WP_PIN==1)
	HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_SET);
	#endif

	if ((_EEPROM_SIZE_KBIT==1) || (_EEPROM_SIZE_KBIT==2))
 8000c42:	4b4f      	ldr	r3, [pc, #316]	; (8000d80 <EEPROM24XX_Load+0x150>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d003      	beq.n	8000c52 <EEPROM24XX_Load+0x22>
 8000c4a:	4b4d      	ldr	r3, [pc, #308]	; (8000d80 <EEPROM24XX_Load+0x150>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d113      	bne.n	8000c7a <EEPROM24XX_Load+0x4a>
		{
			if(HAL_I2C_Mem_Read(&_EEPROM24XX_I2C,0xa0,Address,I2C_MEMADD_SIZE_8BIT,(uint8_t*)data,size_of_data,100) == HAL_OK) ret=1;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	89f9      	ldrh	r1, [r7, #14]
 8000c58:	2264      	movs	r2, #100	; 0x64
 8000c5a:	9202      	str	r2, [sp, #8]
 8000c5c:	9301      	str	r3, [sp, #4]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	2301      	movs	r3, #1
 8000c64:	460a      	mov	r2, r1
 8000c66:	21a0      	movs	r1, #160	; 0xa0
 8000c68:	4846      	ldr	r0, [pc, #280]	; (8000d84 <EEPROM24XX_Load+0x154>)
 8000c6a:	f003 fe7f 	bl	800496c <HAL_I2C_Mem_Read>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d17b      	bne.n	8000d6c <EEPROM24XX_Load+0x13c>
 8000c74:	2301      	movs	r3, #1
 8000c76:	75fb      	strb	r3, [r7, #23]
 8000c78:	e078      	b.n	8000d6c <EEPROM24XX_Load+0x13c>
		}
	else if (_EEPROM_SIZE_KBIT==4)
 8000c7a:	4b41      	ldr	r3, [pc, #260]	; (8000d80 <EEPROM24XX_Load+0x150>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b04      	cmp	r3, #4
 8000c80:	d11d      	bne.n	8000cbe <EEPROM24XX_Load+0x8e>
		{
		 	 if(HAL_I2C_Mem_Read(&_EEPROM24XX_I2C,0xa0|((Address&0x0100>>7)),(Address&0xff),I2C_MEMADD_SIZE_8BIT,(uint8_t*)data,size_of_data,100) == HAL_OK) ret=1;
 8000c82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	b21b      	sxth	r3, r3
 8000c8c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000c90:	b21b      	sxth	r3, r3
 8000c92:	b299      	uxth	r1, r3
 8000c94:	89fb      	ldrh	r3, [r7, #14]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	b298      	uxth	r0, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	2264      	movs	r2, #100	; 0x64
 8000ca0:	9202      	str	r2, [sp, #8]
 8000ca2:	9301      	str	r3, [sp, #4]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	9300      	str	r3, [sp, #0]
 8000ca8:	2301      	movs	r3, #1
 8000caa:	4602      	mov	r2, r0
 8000cac:	4835      	ldr	r0, [pc, #212]	; (8000d84 <EEPROM24XX_Load+0x154>)
 8000cae:	f003 fe5d 	bl	800496c <HAL_I2C_Mem_Read>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d159      	bne.n	8000d6c <EEPROM24XX_Load+0x13c>
 8000cb8:	2301      	movs	r3, #1
 8000cba:	75fb      	strb	r3, [r7, #23]
 8000cbc:	e056      	b.n	8000d6c <EEPROM24XX_Load+0x13c>
		}
	else if (_EEPROM_SIZE_KBIT==8)
 8000cbe:	4b30      	ldr	r3, [pc, #192]	; (8000d80 <EEPROM24XX_Load+0x150>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b08      	cmp	r3, #8
 8000cc4:	d11d      	bne.n	8000d02 <EEPROM24XX_Load+0xd2>
		{
			if(HAL_I2C_Mem_Read(&_EEPROM24XX_I2C,0xa0|((Address&0x0300>>7)),(Address&0xff),I2C_MEMADD_SIZE_8BIT,(uint8_t*)data,size_of_data,100) == HAL_OK) ret=1;
 8000cc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cca:	f003 0306 	and.w	r3, r3, #6
 8000cce:	b21b      	sxth	r3, r3
 8000cd0:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000cd4:	b21b      	sxth	r3, r3
 8000cd6:	b299      	uxth	r1, r3
 8000cd8:	89fb      	ldrh	r3, [r7, #14]
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	b298      	uxth	r0, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	2264      	movs	r2, #100	; 0x64
 8000ce4:	9202      	str	r2, [sp, #8]
 8000ce6:	9301      	str	r3, [sp, #4]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	2301      	movs	r3, #1
 8000cee:	4602      	mov	r2, r0
 8000cf0:	4824      	ldr	r0, [pc, #144]	; (8000d84 <EEPROM24XX_Load+0x154>)
 8000cf2:	f003 fe3b 	bl	800496c <HAL_I2C_Mem_Read>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d137      	bne.n	8000d6c <EEPROM24XX_Load+0x13c>
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	75fb      	strb	r3, [r7, #23]
 8000d00:	e034      	b.n	8000d6c <EEPROM24XX_Load+0x13c>
		}
	else if (_EEPROM_SIZE_KBIT==16)
 8000d02:	4b1f      	ldr	r3, [pc, #124]	; (8000d80 <EEPROM24XX_Load+0x150>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2b10      	cmp	r3, #16
 8000d08:	d11d      	bne.n	8000d46 <EEPROM24XX_Load+0x116>
		{
			if(HAL_I2C_Mem_Read(&_EEPROM24XX_I2C,0xa0|((Address&0x0700>>7)),(Address&0xff),I2C_MEMADD_SIZE_8BIT,(uint8_t*)data,size_of_data,100) == HAL_OK) ret=1;
 8000d0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d0e:	f003 030e 	and.w	r3, r3, #14
 8000d12:	b21b      	sxth	r3, r3
 8000d14:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000d18:	b21b      	sxth	r3, r3
 8000d1a:	b299      	uxth	r1, r3
 8000d1c:	89fb      	ldrh	r3, [r7, #14]
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	b298      	uxth	r0, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	2264      	movs	r2, #100	; 0x64
 8000d28:	9202      	str	r2, [sp, #8]
 8000d2a:	9301      	str	r3, [sp, #4]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	9300      	str	r3, [sp, #0]
 8000d30:	2301      	movs	r3, #1
 8000d32:	4602      	mov	r2, r0
 8000d34:	4813      	ldr	r0, [pc, #76]	; (8000d84 <EEPROM24XX_Load+0x154>)
 8000d36:	f003 fe19 	bl	800496c <HAL_I2C_Mem_Read>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d115      	bne.n	8000d6c <EEPROM24XX_Load+0x13c>
 8000d40:	2301      	movs	r3, #1
 8000d42:	75fb      	strb	r3, [r7, #23]
 8000d44:	e012      	b.n	8000d6c <EEPROM24XX_Load+0x13c>
		}
	else
		{
			if(HAL_I2C_Mem_Read(&_EEPROM24XX_I2C,0xa0,Address,I2C_MEMADD_SIZE_16BIT,(uint8_t*)data,size_of_data,100) == HAL_OK) ret=1;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	89f9      	ldrh	r1, [r7, #14]
 8000d4c:	2264      	movs	r2, #100	; 0x64
 8000d4e:	9202      	str	r2, [sp, #8]
 8000d50:	9301      	str	r3, [sp, #4]
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	2310      	movs	r3, #16
 8000d58:	460a      	mov	r2, r1
 8000d5a:	21a0      	movs	r1, #160	; 0xa0
 8000d5c:	4809      	ldr	r0, [pc, #36]	; (8000d84 <EEPROM24XX_Load+0x154>)
 8000d5e:	f003 fe05 	bl	800496c <HAL_I2C_Mem_Read>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d101      	bne.n	8000d6c <EEPROM24XX_Load+0x13c>
 8000d68:	2301      	movs	r3, #1
 8000d6a:	75fb      	strb	r3, [r7, #23]
		}


	if(ret)
 8000d6c:	7dfb      	ldrb	r3, [r7, #23]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <EEPROM24XX_Load+0x146>
		return true;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e000      	b.n	8000d78 <EEPROM24XX_Load+0x148>
	else
		return false;		
 8000d76:	2300      	movs	r3, #0
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000000 	.word	0x20000000
 8000d84:	2000100c 	.word	0x2000100c

08000d88 <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af02      	add	r7, sp, #8
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 8000d92:	f107 020f 	add.w	r2, r7, #15
 8000d96:	1df9      	adds	r1, r7, #7
 8000d98:	2364      	movs	r3, #100	; 0x64
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	4804      	ldr	r0, [pc, #16]	; (8000db0 <W25qxx_Spi+0x28>)
 8000da0:	f006 fc20 	bl	80075e4 <HAL_SPI_TransmitReceive>
	return ret;	
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200010a4 	.word	0x200010a4

08000db4 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2110      	movs	r1, #16
 8000dce:	4813      	ldr	r0, [pc, #76]	; (8000e1c <W25qxx_ReadID+0x68>)
 8000dd0:	f003 f866 	bl	8003ea0 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x9F);
 8000dd4:	209f      	movs	r0, #159	; 0x9f
 8000dd6:	f7ff ffd7 	bl	8000d88 <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000dda:	20a5      	movs	r0, #165	; 0xa5
 8000ddc:	f7ff ffd4 	bl	8000d88 <W25qxx_Spi>
 8000de0:	4603      	mov	r3, r0
 8000de2:	60bb      	str	r3, [r7, #8]
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000de4:	20a5      	movs	r0, #165	; 0xa5
 8000de6:	f7ff ffcf 	bl	8000d88 <W25qxx_Spi>
 8000dea:	4603      	mov	r3, r0
 8000dec:	607b      	str	r3, [r7, #4]
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000dee:	20a5      	movs	r0, #165	; 0xa5
 8000df0:	f7ff ffca 	bl	8000d88 <W25qxx_Spi>
 8000df4:	4603      	mov	r3, r0
 8000df6:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2110      	movs	r1, #16
 8000dfc:	4807      	ldr	r0, [pc, #28]	; (8000e1c <W25qxx_ReadID+0x68>)
 8000dfe:	f003 f84f 	bl	8003ea0 <HAL_GPIO_WritePin>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	041a      	lsls	r2, r3, #16
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	021b      	lsls	r3, r3, #8
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	683a      	ldr	r2, [r7, #0]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]
  return Temp;
 8000e12:	68fb      	ldr	r3, [r7, #12]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40010800 	.word	0x40010800

08000e20 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8000e20:	b590      	push	{r4, r7, lr}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2110      	movs	r1, #16
 8000e2a:	4816      	ldr	r0, [pc, #88]	; (8000e84 <W25qxx_ReadUniqID+0x64>)
 8000e2c:	f003 f838 	bl	8003ea0 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x4B);
 8000e30:	204b      	movs	r0, #75	; 0x4b
 8000e32:	f7ff ffa9 	bl	8000d88 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8000e36:	2300      	movs	r3, #0
 8000e38:	71fb      	strb	r3, [r7, #7]
 8000e3a:	e005      	b.n	8000e48 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000e3c:	20a5      	movs	r0, #165	; 0xa5
 8000e3e:	f7ff ffa3 	bl	8000d88 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	3301      	adds	r3, #1
 8000e46:	71fb      	strb	r3, [r7, #7]
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	2b03      	cmp	r3, #3
 8000e4c:	d9f6      	bls.n	8000e3c <W25qxx_ReadUniqID+0x1c>
	for(uint8_t	i=0;i<8;i++)
 8000e4e:	2300      	movs	r3, #0
 8000e50:	71bb      	strb	r3, [r7, #6]
 8000e52:	e00b      	b.n	8000e6c <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000e54:	79bc      	ldrb	r4, [r7, #6]
 8000e56:	20a5      	movs	r0, #165	; 0xa5
 8000e58:	f7ff ff96 	bl	8000d88 <W25qxx_Spi>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <W25qxx_ReadUniqID+0x68>)
 8000e62:	4423      	add	r3, r4
 8000e64:	705a      	strb	r2, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 8000e66:	79bb      	ldrb	r3, [r7, #6]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	71bb      	strb	r3, [r7, #6]
 8000e6c:	79bb      	ldrb	r3, [r7, #6]
 8000e6e:	2b07      	cmp	r3, #7
 8000e70:	d9f0      	bls.n	8000e54 <W25qxx_ReadUniqID+0x34>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000e72:	2201      	movs	r2, #1
 8000e74:	2110      	movs	r1, #16
 8000e76:	4803      	ldr	r0, [pc, #12]	; (8000e84 <W25qxx_ReadUniqID+0x64>)
 8000e78:	f003 f812 	bl	8003ea0 <HAL_GPIO_WritePin>
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd90      	pop	{r4, r7, pc}
 8000e84:	40010800 	.word	0x40010800
 8000e88:	200007d0 	.word	0x200007d0

08000e8c <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2110      	movs	r1, #16
 8000e94:	4807      	ldr	r0, [pc, #28]	; (8000eb4 <W25qxx_WriteEnable+0x28>)
 8000e96:	f003 f803 	bl	8003ea0 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x06);
 8000e9a:	2006      	movs	r0, #6
 8000e9c:	f7ff ff74 	bl	8000d88 <W25qxx_Spi>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2110      	movs	r1, #16
 8000ea4:	4803      	ldr	r0, [pc, #12]	; (8000eb4 <W25qxx_WriteEnable+0x28>)
 8000ea6:	f002 fffb 	bl	8003ea0 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f002 fafe 	bl	80034ac <HAL_Delay>
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40010800 	.word	0x40010800

08000eb8 <W25qxx_ReadStatusRegister>:
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
	uint8_t	status=0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2110      	movs	r1, #16
 8000eca:	481c      	ldr	r0, [pc, #112]	; (8000f3c <W25qxx_ReadStatusRegister+0x84>)
 8000ecc:	f002 ffe8 	bl	8003ea0 <HAL_GPIO_WritePin>
	if(SelectStatusRegister_1_2_3==1)
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d10c      	bne.n	8000ef0 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8000ed6:	2005      	movs	r0, #5
 8000ed8:	f7ff ff56 	bl	8000d88 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8000edc:	20a5      	movs	r0, #165	; 0xa5
 8000ede:	f7ff ff53 	bl	8000d88 <W25qxx_Spi>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8000ee6:	4a16      	ldr	r2, [pc, #88]	; (8000f40 <W25qxx_ReadStatusRegister+0x88>)
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
 8000eea:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8000eee:	e01b      	b.n	8000f28 <W25qxx_ReadStatusRegister+0x70>
	}
	else if(SelectStatusRegister_1_2_3==2)
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d10c      	bne.n	8000f10 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8000ef6:	2035      	movs	r0, #53	; 0x35
 8000ef8:	f7ff ff46 	bl	8000d88 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8000efc:	20a5      	movs	r0, #165	; 0xa5
 8000efe:	f7ff ff43 	bl	8000d88 <W25qxx_Spi>
 8000f02:	4603      	mov	r3, r0
 8000f04:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8000f06:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <W25qxx_ReadStatusRegister+0x88>)
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8000f0e:	e00b      	b.n	8000f28 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8000f10:	2015      	movs	r0, #21
 8000f12:	f7ff ff39 	bl	8000d88 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8000f16:	20a5      	movs	r0, #165	; 0xa5
 8000f18:	f7ff ff36 	bl	8000d88 <W25qxx_Spi>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8000f20:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <W25qxx_ReadStatusRegister+0x88>)
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}	
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	2110      	movs	r1, #16
 8000f2c:	4803      	ldr	r0, [pc, #12]	; (8000f3c <W25qxx_ReadStatusRegister+0x84>)
 8000f2e:	f002 ffb7 	bl	8003ea0 <HAL_GPIO_WritePin>
	return status;
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40010800 	.word	0x40010800
 8000f40:	200007d0 	.word	0x200007d0

08000f44 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8000f48:	2001      	movs	r0, #1
 8000f4a:	f002 faaf 	bl	80034ac <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2110      	movs	r1, #16
 8000f52:	480f      	ldr	r0, [pc, #60]	; (8000f90 <W25qxx_WaitForWriteEnd+0x4c>)
 8000f54:	f002 ffa4 	bl	8003ea0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8000f58:	2005      	movs	r0, #5
 8000f5a:	f7ff ff15 	bl	8000d88 <W25qxx_Spi>
  do
  {
    w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000f5e:	20a5      	movs	r0, #165	; 0xa5
 8000f60:	f7ff ff12 	bl	8000d88 <W25qxx_Spi>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461a      	mov	r2, r3
 8000f68:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <W25qxx_WaitForWriteEnd+0x50>)
 8000f6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8000f6e:	2001      	movs	r0, #1
 8000f70:	f002 fa9c 	bl	80034ac <HAL_Delay>
  }
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8000f74:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <W25qxx_WaitForWriteEnd+0x50>)
 8000f76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d1ed      	bne.n	8000f5e <W25qxx_WaitForWriteEnd+0x1a>
 HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000f82:	2201      	movs	r2, #1
 8000f84:	2110      	movs	r1, #16
 8000f86:	4802      	ldr	r0, [pc, #8]	; (8000f90 <W25qxx_WaitForWriteEnd+0x4c>)
 8000f88:	f002 ff8a 	bl	8003ea0 <HAL_GPIO_WritePin>
}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40010800 	.word	0x40010800
 8000f94:	200007d0 	.word	0x200007d0

08000f98 <W25qxx_Init>:
//###################################################################################################################
bool	W25qxx_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
	w25qxx.Lock=1;	
 8000f9e:	4b60      	ldr	r3, [pc, #384]	; (8001120 <W25qxx_Init+0x188>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick()<100)
 8000fa6:	e002      	b.n	8000fae <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f002 fa7f 	bl	80034ac <HAL_Delay>
	while(HAL_GetTick()<100)
 8000fae:	f002 fa73 	bl	8003498 <HAL_GetTick>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b63      	cmp	r3, #99	; 0x63
 8000fb6:	d9f7      	bls.n	8000fa8 <W25qxx_Init+0x10>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2110      	movs	r1, #16
 8000fbc:	4859      	ldr	r0, [pc, #356]	; (8001124 <W25qxx_Init+0x18c>)
 8000fbe:	f002 ff6f 	bl	8003ea0 <HAL_GPIO_WritePin>
  W25qxx_Delay(100);
 8000fc2:	2064      	movs	r0, #100	; 0x64
 8000fc4:	f002 fa72 	bl	80034ac <HAL_Delay>
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Init Begin...\r\n");
	#endif
	id=W25qxx_ReadID();
 8000fc8:	f7ff fef4 	bl	8000db4 <W25qxx_ReadID>
 8000fcc:	6078      	str	r0, [r7, #4]
	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ID:0x%X\r\n",id);
	#endif
	switch(id&0x0000FFFF)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8000fd6:	3b11      	subs	r3, #17
 8000fd8:	2b09      	cmp	r3, #9
 8000fda:	d860      	bhi.n	800109e <W25qxx_Init+0x106>
 8000fdc:	a201      	add	r2, pc, #4	; (adr r2, 8000fe4 <W25qxx_Init+0x4c>)
 8000fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe2:	bf00      	nop
 8000fe4:	08001091 	.word	0x08001091
 8000fe8:	08001083 	.word	0x08001083
 8000fec:	08001075 	.word	0x08001075
 8000ff0:	08001067 	.word	0x08001067
 8000ff4:	08001059 	.word	0x08001059
 8000ff8:	0800104b 	.word	0x0800104b
 8000ffc:	0800103d 	.word	0x0800103d
 8001000:	0800102d 	.word	0x0800102d
 8001004:	0800101d 	.word	0x0800101d
 8001008:	0800100d 	.word	0x0800100d
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 800100c:	4b44      	ldr	r3, [pc, #272]	; (8001120 <W25qxx_Init+0x188>)
 800100e:	220a      	movs	r2, #10
 8001010:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 8001012:	4b43      	ldr	r3, [pc, #268]	; (8001120 <W25qxx_Init+0x188>)
 8001014:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001018:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q512\r\n");
			#endif
		break;
 800101a:	e046      	b.n	80010aa <W25qxx_Init+0x112>
		case 0x4019:	// 	w25q256
			w25qxx.ID=W25Q256;
 800101c:	4b40      	ldr	r3, [pc, #256]	; (8001120 <W25qxx_Init+0x188>)
 800101e:	2209      	movs	r2, #9
 8001020:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 8001022:	4b3f      	ldr	r3, [pc, #252]	; (8001120 <W25qxx_Init+0x188>)
 8001024:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001028:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q256\r\n");
			#endif
		break;
 800102a:	e03e      	b.n	80010aa <W25qxx_Init+0x112>
		case 0x4018:	// 	w25q128
			w25qxx.ID=W25Q128;
 800102c:	4b3c      	ldr	r3, [pc, #240]	; (8001120 <W25qxx_Init+0x188>)
 800102e:	2208      	movs	r2, #8
 8001030:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 8001032:	4b3b      	ldr	r3, [pc, #236]	; (8001120 <W25qxx_Init+0x188>)
 8001034:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001038:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q128\r\n");
			#endif
		break;
 800103a:	e036      	b.n	80010aa <W25qxx_Init+0x112>
		case 0x4017:	//	w25q64
			w25qxx.ID=W25Q64;
 800103c:	4b38      	ldr	r3, [pc, #224]	; (8001120 <W25qxx_Init+0x188>)
 800103e:	2207      	movs	r2, #7
 8001040:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 8001042:	4b37      	ldr	r3, [pc, #220]	; (8001120 <W25qxx_Init+0x188>)
 8001044:	2280      	movs	r2, #128	; 0x80
 8001046:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q64\r\n");
			#endif
		break;
 8001048:	e02f      	b.n	80010aa <W25qxx_Init+0x112>
		case 0x4016:	//	w25q32
			w25qxx.ID=W25Q32;
 800104a:	4b35      	ldr	r3, [pc, #212]	; (8001120 <W25qxx_Init+0x188>)
 800104c:	2206      	movs	r2, #6
 800104e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 8001050:	4b33      	ldr	r3, [pc, #204]	; (8001120 <W25qxx_Init+0x188>)
 8001052:	2240      	movs	r2, #64	; 0x40
 8001054:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q32\r\n");
			#endif
		break;
 8001056:	e028      	b.n	80010aa <W25qxx_Init+0x112>
		case 0x4015:	//	w25q16
			w25qxx.ID=W25Q16;
 8001058:	4b31      	ldr	r3, [pc, #196]	; (8001120 <W25qxx_Init+0x188>)
 800105a:	2205      	movs	r2, #5
 800105c:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 800105e:	4b30      	ldr	r3, [pc, #192]	; (8001120 <W25qxx_Init+0x188>)
 8001060:	2220      	movs	r2, #32
 8001062:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q16\r\n");
			#endif
		break;
 8001064:	e021      	b.n	80010aa <W25qxx_Init+0x112>
		case 0x4014:	//	w25q80
			w25qxx.ID=W25Q80;
 8001066:	4b2e      	ldr	r3, [pc, #184]	; (8001120 <W25qxx_Init+0x188>)
 8001068:	2204      	movs	r2, #4
 800106a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 800106c:	4b2c      	ldr	r3, [pc, #176]	; (8001120 <W25qxx_Init+0x188>)
 800106e:	2210      	movs	r2, #16
 8001070:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q80\r\n");
			#endif
		break;
 8001072:	e01a      	b.n	80010aa <W25qxx_Init+0x112>
		case 0x4013:	//	w25q40
			w25qxx.ID=W25Q40;
 8001074:	4b2a      	ldr	r3, [pc, #168]	; (8001120 <W25qxx_Init+0x188>)
 8001076:	2203      	movs	r2, #3
 8001078:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 800107a:	4b29      	ldr	r3, [pc, #164]	; (8001120 <W25qxx_Init+0x188>)
 800107c:	2208      	movs	r2, #8
 800107e:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q40\r\n");
			#endif
		break;
 8001080:	e013      	b.n	80010aa <W25qxx_Init+0x112>
		case 0x4012:	//	w25q20
			w25qxx.ID=W25Q20;
 8001082:	4b27      	ldr	r3, [pc, #156]	; (8001120 <W25qxx_Init+0x188>)
 8001084:	2202      	movs	r2, #2
 8001086:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 8001088:	4b25      	ldr	r3, [pc, #148]	; (8001120 <W25qxx_Init+0x188>)
 800108a:	2204      	movs	r2, #4
 800108c:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q20\r\n");
			#endif
		break;
 800108e:	e00c      	b.n	80010aa <W25qxx_Init+0x112>
		case 0x4011:	//	w25q10
			w25qxx.ID=W25Q10;
 8001090:	4b23      	ldr	r3, [pc, #140]	; (8001120 <W25qxx_Init+0x188>)
 8001092:	2201      	movs	r2, #1
 8001094:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 8001096:	4b22      	ldr	r3, [pc, #136]	; (8001120 <W25qxx_Init+0x188>)
 8001098:	2202      	movs	r2, #2
 800109a:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q10\r\n");
			#endif
		break;
 800109c:	e005      	b.n	80010aa <W25qxx_Init+0x112>
		default:
				#if (_W25QXX_DEBUG==1)
				printf("w25qxx Unknown ID\r\n");
				#endif
			w25qxx.Lock=0;	
 800109e:	4b20      	ldr	r3, [pc, #128]	; (8001120 <W25qxx_Init+0x188>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return false;
 80010a6:	2300      	movs	r3, #0
 80010a8:	e036      	b.n	8001118 <W25qxx_Init+0x180>
				
	}		
	w25qxx.PageSize=256;
 80010aa:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <W25qxx_Init+0x188>)
 80010ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010b0:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize=0x1000;
 80010b2:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <W25qxx_Init+0x188>)
 80010b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010b8:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 80010ba:	4b19      	ldr	r3, [pc, #100]	; (8001120 <W25qxx_Init+0x188>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	011b      	lsls	r3, r3, #4
 80010c0:	4a17      	ldr	r2, [pc, #92]	; (8001120 <W25qxx_Init+0x188>)
 80010c2:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 80010c4:	4b16      	ldr	r3, [pc, #88]	; (8001120 <W25qxx_Init+0x188>)
 80010c6:	695b      	ldr	r3, [r3, #20]
 80010c8:	4a15      	ldr	r2, [pc, #84]	; (8001120 <W25qxx_Init+0x188>)
 80010ca:	6912      	ldr	r2, [r2, #16]
 80010cc:	fb02 f303 	mul.w	r3, r2, r3
 80010d0:	4a13      	ldr	r2, [pc, #76]	; (8001120 <W25qxx_Init+0x188>)
 80010d2:	8952      	ldrh	r2, [r2, #10]
 80010d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80010d8:	4a11      	ldr	r2, [pc, #68]	; (8001120 <W25qxx_Init+0x188>)
 80010da:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 80010dc:	4b10      	ldr	r3, [pc, #64]	; (8001120 <W25qxx_Init+0x188>)
 80010de:	691b      	ldr	r3, [r3, #16]
 80010e0:	011b      	lsls	r3, r3, #4
 80010e2:	4a0f      	ldr	r2, [pc, #60]	; (8001120 <W25qxx_Init+0x188>)
 80010e4:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <W25qxx_Init+0x188>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4a0d      	ldr	r2, [pc, #52]	; (8001120 <W25qxx_Init+0x188>)
 80010ec:	6912      	ldr	r2, [r2, #16]
 80010ee:	fb02 f303 	mul.w	r3, r2, r3
 80010f2:	0a9b      	lsrs	r3, r3, #10
 80010f4:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <W25qxx_Init+0x188>)
 80010f6:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 80010f8:	f7ff fe92 	bl	8000e20 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f7ff fedb 	bl	8000eb8 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8001102:	2002      	movs	r0, #2
 8001104:	f7ff fed8 	bl	8000eb8 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8001108:	2003      	movs	r0, #3
 800110a:	f7ff fed5 	bl	8000eb8 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
	#endif
	w25qxx.Lock=0;	
 800110e:	4b04      	ldr	r3, [pc, #16]	; (8001120 <W25qxx_Init+0x188>)
 8001110:	2200      	movs	r2, #0
 8001112:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8001116:	2301      	movs	r3, #1
}	
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200007d0 	.word	0x200007d0
 8001124:	40010800 	.word	0x40010800

08001128 <W25qxx_EraseChip>:
//###################################################################################################################
void	W25qxx_EraseChip(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	while(w25qxx.Lock==1)
 800112c:	e002      	b.n	8001134 <W25qxx_EraseChip+0xc>
		W25qxx_Delay(1);
 800112e:	2001      	movs	r0, #1
 8001130:	f002 f9bc 	bl	80034ac <HAL_Delay>
	while(w25qxx.Lock==1)
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <W25qxx_EraseChip+0x54>)
 8001136:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800113a:	2b01      	cmp	r3, #1
 800113c:	d0f7      	beq.n	800112e <W25qxx_EraseChip+0x6>
	w25qxx.Lock=1;	
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <W25qxx_EraseChip+0x54>)
 8001140:	2201      	movs	r2, #1
 8001142:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();	
	printf("w25qxx EraseChip Begin...\r\n");
	#endif
	W25qxx_WriteEnable();
 8001146:	f7ff fea1 	bl	8000e8c <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800114a:	2200      	movs	r2, #0
 800114c:	2110      	movs	r1, #16
 800114e:	480c      	ldr	r0, [pc, #48]	; (8001180 <W25qxx_EraseChip+0x58>)
 8001150:	f002 fea6 	bl	8003ea0 <HAL_GPIO_WritePin>
  W25qxx_Spi(0xC7);
 8001154:	20c7      	movs	r0, #199	; 0xc7
 8001156:	f7ff fe17 	bl	8000d88 <W25qxx_Spi>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800115a:	2201      	movs	r2, #1
 800115c:	2110      	movs	r1, #16
 800115e:	4808      	ldr	r0, [pc, #32]	; (8001180 <W25qxx_EraseChip+0x58>)
 8001160:	f002 fe9e 	bl	8003ea0 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8001164:	f7ff feee 	bl	8000f44 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseBlock done after %d ms!\r\n",HAL_GetTick()-StartTime);
	#endif
	W25qxx_Delay(10);
 8001168:	200a      	movs	r0, #10
 800116a:	f002 f99f 	bl	80034ac <HAL_Delay>
	w25qxx.Lock=0;	
 800116e:	4b03      	ldr	r3, [pc, #12]	; (800117c <W25qxx_EraseChip+0x54>)
 8001170:	2200      	movs	r2, #0
 8001172:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200007d0 	.word	0x200007d0
 8001180:	40010800 	.word	0x40010800

08001184 <W25qxx_EraseSector>:
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock==1)
 800118c:	e002      	b.n	8001194 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 800118e:	2001      	movs	r0, #1
 8001190:	f002 f98c 	bl	80034ac <HAL_Delay>
	while(w25qxx.Lock==1)
 8001194:	4b23      	ldr	r3, [pc, #140]	; (8001224 <W25qxx_EraseSector+0xa0>)
 8001196:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800119a:	2b01      	cmp	r3, #1
 800119c:	d0f7      	beq.n	800118e <W25qxx_EraseSector+0xa>
	w25qxx.Lock=1;	
 800119e:	4b21      	ldr	r3, [pc, #132]	; (8001224 <W25qxx_EraseSector+0xa0>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();	
	printf("w25qxx EraseSector %d Begin...\r\n",SectorAddr);
	#endif
	W25qxx_WaitForWriteEnd();
 80011a6:	f7ff fecd 	bl	8000f44 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 80011aa:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <W25qxx_EraseSector+0xa0>)
 80011ac:	691a      	ldr	r2, [r3, #16]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	fb02 f303 	mul.w	r3, r2, r3
 80011b4:	607b      	str	r3, [r7, #4]
  W25qxx_WriteEnable();
 80011b6:	f7ff fe69 	bl	8000e8c <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2110      	movs	r1, #16
 80011be:	481a      	ldr	r0, [pc, #104]	; (8001228 <W25qxx_EraseSector+0xa4>)
 80011c0:	f002 fe6e 	bl	8003ea0 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x20);
 80011c4:	2020      	movs	r0, #32
 80011c6:	f7ff fddf 	bl	8000d88 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 80011ca:	4b16      	ldr	r3, [pc, #88]	; (8001224 <W25qxx_EraseSector+0xa0>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b08      	cmp	r3, #8
 80011d0:	d905      	bls.n	80011de <W25qxx_EraseSector+0x5a>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	0e1b      	lsrs	r3, r3, #24
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fdd5 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	0c1b      	lsrs	r3, r3, #16
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fdcf 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	0a1b      	lsrs	r3, r3, #8
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fdc9 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi(SectorAddr & 0xFF);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff fdc4 	bl	8000d88 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001200:	2201      	movs	r2, #1
 8001202:	2110      	movs	r1, #16
 8001204:	4808      	ldr	r0, [pc, #32]	; (8001228 <W25qxx_EraseSector+0xa4>)
 8001206:	f002 fe4b 	bl	8003ea0 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 800120a:	f7ff fe9b 	bl	8000f44 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseSector done after %d ms\r\n",HAL_GetTick()-StartTime);
	#endif
	W25qxx_Delay(1);
 800120e:	2001      	movs	r0, #1
 8001210:	f002 f94c 	bl	80034ac <HAL_Delay>
	w25qxx.Lock=0;
 8001214:	4b03      	ldr	r3, [pc, #12]	; (8001224 <W25qxx_EraseSector+0xa0>)
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	200007d0 	.word	0x200007d0
 8001228:	40010800 	.word	0x40010800

0800122c <W25qxx_EraseBlock>:
//###################################################################################################################
void W25qxx_EraseBlock(uint32_t BlockAddr)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock==1)
 8001234:	e002      	b.n	800123c <W25qxx_EraseBlock+0x10>
		W25qxx_Delay(1);
 8001236:	2001      	movs	r0, #1
 8001238:	f002 f938 	bl	80034ac <HAL_Delay>
	while(w25qxx.Lock==1)
 800123c:	4b24      	ldr	r3, [pc, #144]	; (80012d0 <W25qxx_EraseBlock+0xa4>)
 800123e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001242:	2b01      	cmp	r3, #1
 8001244:	d0f7      	beq.n	8001236 <W25qxx_EraseBlock+0xa>
	w25qxx.Lock=1;	
 8001246:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <W25qxx_EraseBlock+0xa4>)
 8001248:	2201      	movs	r2, #1
 800124a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseBlock %d Begin...\r\n",BlockAddr);
	W25qxx_Delay(100);
	uint32_t	StartTime=HAL_GetTick();	
	#endif
	W25qxx_WaitForWriteEnd();
 800124e:	f7ff fe79 	bl	8000f44 <W25qxx_WaitForWriteEnd>
	BlockAddr = BlockAddr * w25qxx.SectorSize*16;
 8001252:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <W25qxx_EraseBlock+0xa4>)
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	fb02 f303 	mul.w	r3, r2, r3
 800125c:	011b      	lsls	r3, r3, #4
 800125e:	607b      	str	r3, [r7, #4]
  W25qxx_WriteEnable();
 8001260:	f7ff fe14 	bl	8000e8c <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	2110      	movs	r1, #16
 8001268:	481a      	ldr	r0, [pc, #104]	; (80012d4 <W25qxx_EraseBlock+0xa8>)
 800126a:	f002 fe19 	bl	8003ea0 <HAL_GPIO_WritePin>
  W25qxx_Spi(0xD8);
 800126e:	20d8      	movs	r0, #216	; 0xd8
 8001270:	f7ff fd8a 	bl	8000d88 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8001274:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <W25qxx_EraseBlock+0xa4>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b08      	cmp	r3, #8
 800127a:	d905      	bls.n	8001288 <W25qxx_EraseBlock+0x5c>
		W25qxx_Spi((BlockAddr & 0xFF000000) >> 24);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	0e1b      	lsrs	r3, r3, #24
 8001280:	b2db      	uxtb	r3, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fd80 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi((BlockAddr & 0xFF0000) >> 16);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	0c1b      	lsrs	r3, r3, #16
 800128c:	b2db      	uxtb	r3, r3
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fd7a 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi((BlockAddr & 0xFF00) >> 8);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	0a1b      	lsrs	r3, r3, #8
 8001298:	b2db      	uxtb	r3, r3
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fd74 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi(BlockAddr & 0xFF);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fd6f 	bl	8000d88 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80012aa:	2201      	movs	r2, #1
 80012ac:	2110      	movs	r1, #16
 80012ae:	4809      	ldr	r0, [pc, #36]	; (80012d4 <W25qxx_EraseBlock+0xa8>)
 80012b0:	f002 fdf6 	bl	8003ea0 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 80012b4:	f7ff fe46 	bl	8000f44 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseBlock done after %d ms\r\n",HAL_GetTick()-StartTime);
	W25qxx_Delay(100);
	#endif
	W25qxx_Delay(1);
 80012b8:	2001      	movs	r0, #1
 80012ba:	f002 f8f7 	bl	80034ac <HAL_Delay>
	w25qxx.Lock=0;
 80012be:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <W25qxx_EraseBlock+0xa4>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200007d0 	.word	0x200007d0
 80012d4:	40010800 	.word	0x40010800

080012d8 <W25qxx_SectorToPage>:
{
	return ((SectorAddress*w25qxx.SectorSize)/w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t	W25qxx_SectorToPage(uint32_t	SectorAddress)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	return (SectorAddress*w25qxx.SectorSize)/w25qxx.PageSize;
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <W25qxx_SectorToPage+0x24>)
 80012e2:	691b      	ldr	r3, [r3, #16]
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	fb02 f303 	mul.w	r3, r2, r3
 80012ea:	4a04      	ldr	r2, [pc, #16]	; (80012fc <W25qxx_SectorToPage+0x24>)
 80012ec:	8952      	ldrh	r2, [r2, #10]
 80012ee:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr
 80012fc:	200007d0 	.word	0x200007d0

08001300 <W25qxx_BlockToPage>:
//###################################################################################################################
uint32_t	W25qxx_BlockToPage(uint32_t	BlockAddress)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	return (BlockAddress*w25qxx.BlockSize)/w25qxx.PageSize;
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <W25qxx_BlockToPage+0x24>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	fb02 f303 	mul.w	r3, r2, r3
 8001312:	4a04      	ldr	r2, [pc, #16]	; (8001324 <W25qxx_BlockToPage+0x24>)
 8001314:	8952      	ldrh	r2, [r2, #10]
 8001316:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800131a:	4618      	mov	r0, r3
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	200007d0 	.word	0x200007d0

08001328 <W25qxx_IsEmptyPage>:
//###################################################################################################################
bool 	W25qxx_IsEmptyPage(uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToCheck_up_to_PageSize)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b090      	sub	sp, #64	; 0x40
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
	while(w25qxx.Lock==1)
 8001334:	e002      	b.n	800133c <W25qxx_IsEmptyPage+0x14>
	W25qxx_Delay(1);
 8001336:	2001      	movs	r0, #1
 8001338:	f002 f8b8 	bl	80034ac <HAL_Delay>
	while(w25qxx.Lock==1)
 800133c:	4b6d      	ldr	r3, [pc, #436]	; (80014f4 <W25qxx_IsEmptyPage+0x1cc>)
 800133e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001342:	2b01      	cmp	r3, #1
 8001344:	d0f7      	beq.n	8001336 <W25qxx_IsEmptyPage+0xe>
	w25qxx.Lock=1;	
 8001346:	4b6b      	ldr	r3, [pc, #428]	; (80014f4 <W25qxx_IsEmptyPage+0x1cc>)
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if(((NumByteToCheck_up_to_PageSize+OffsetInByte)>w25qxx.PageSize)||(NumByteToCheck_up_to_PageSize==0))
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	4413      	add	r3, r2
 8001354:	4a67      	ldr	r2, [pc, #412]	; (80014f4 <W25qxx_IsEmptyPage+0x1cc>)
 8001356:	8952      	ldrh	r2, [r2, #10]
 8001358:	4293      	cmp	r3, r2
 800135a:	d802      	bhi.n	8001362 <W25qxx_IsEmptyPage+0x3a>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d105      	bne.n	800136e <W25qxx_IsEmptyPage+0x46>
		NumByteToCheck_up_to_PageSize=w25qxx.PageSize-OffsetInByte;
 8001362:	4b64      	ldr	r3, [pc, #400]	; (80014f4 <W25qxx_IsEmptyPage+0x1cc>)
 8001364:	895b      	ldrh	r3, [r3, #10]
 8001366:	461a      	mov	r2, r3
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	607b      	str	r3, [r7, #4]
	uint32_t	StartTime=HAL_GetTick();
	#endif		
	uint8_t	pBuffer[32];
	uint32_t	WorkAddress;
	uint32_t	i;
	for(i=OffsetInByte; i<w25qxx.PageSize; i+=sizeof(pBuffer))
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001372:	e053      	b.n	800141c <W25qxx_IsEmptyPage+0xf4>
	{
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001374:	2200      	movs	r2, #0
 8001376:	2110      	movs	r1, #16
 8001378:	485f      	ldr	r0, [pc, #380]	; (80014f8 <W25qxx_IsEmptyPage+0x1d0>)
 800137a:	f002 fd91 	bl	8003ea0 <HAL_GPIO_WritePin>
		WorkAddress=(i+Page_Address*w25qxx.PageSize);
 800137e:	4b5d      	ldr	r3, [pc, #372]	; (80014f4 <W25qxx_IsEmptyPage+0x1cc>)
 8001380:	895b      	ldrh	r3, [r3, #10]
 8001382:	461a      	mov	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	fb03 f302 	mul.w	r3, r3, r2
 800138a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800138c:	4413      	add	r3, r2
 800138e:	637b      	str	r3, [r7, #52]	; 0x34
		W25qxx_Spi(0x0B);
 8001390:	200b      	movs	r0, #11
 8001392:	f7ff fcf9 	bl	8000d88 <W25qxx_Spi>
		if(w25qxx.ID>=W25Q256)
 8001396:	4b57      	ldr	r3, [pc, #348]	; (80014f4 <W25qxx_IsEmptyPage+0x1cc>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b08      	cmp	r3, #8
 800139c:	d905      	bls.n	80013aa <W25qxx_IsEmptyPage+0x82>
			W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 800139e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013a0:	0e1b      	lsrs	r3, r3, #24
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fcef 	bl	8000d88 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 80013aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ac:	0c1b      	lsrs	r3, r3, #16
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff fce9 	bl	8000d88 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 80013b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013b8:	0a1b      	lsrs	r3, r3, #8
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fce3 	bl	8000d88 <W25qxx_Spi>
		W25qxx_Spi(WorkAddress & 0xFF);
 80013c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fcde 	bl	8000d88 <W25qxx_Spi>
		W25qxx_Spi(0);
 80013cc:	2000      	movs	r0, #0
 80013ce:	f7ff fcdb 	bl	8000d88 <W25qxx_Spi>
		HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,sizeof(pBuffer),100);	
 80013d2:	f107 0114 	add.w	r1, r7, #20
 80013d6:	2364      	movs	r3, #100	; 0x64
 80013d8:	2220      	movs	r2, #32
 80013da:	4848      	ldr	r0, [pc, #288]	; (80014fc <W25qxx_IsEmptyPage+0x1d4>)
 80013dc:	f005 fff9 	bl	80073d2 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);	
 80013e0:	2201      	movs	r2, #1
 80013e2:	2110      	movs	r1, #16
 80013e4:	4844      	ldr	r0, [pc, #272]	; (80014f8 <W25qxx_IsEmptyPage+0x1d0>)
 80013e6:	f002 fd5b 	bl	8003ea0 <HAL_GPIO_WritePin>
		for(uint8_t x=0;x<sizeof(pBuffer);x++)
 80013ea:	2300      	movs	r3, #0
 80013ec:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80013f0:	e00d      	b.n	800140e <W25qxx_IsEmptyPage+0xe6>
		{
			if(pBuffer[x]!=0xFF)
 80013f2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013f6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80013fa:	4413      	add	r3, r2
 80013fc:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8001400:	2bff      	cmp	r3, #255	; 0xff
 8001402:	d16b      	bne.n	80014dc <W25qxx_IsEmptyPage+0x1b4>
		for(uint8_t x=0;x<sizeof(pBuffer);x++)
 8001404:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001408:	3301      	adds	r3, #1
 800140a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800140e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001412:	2b1f      	cmp	r3, #31
 8001414:	d9ed      	bls.n	80013f2 <W25qxx_IsEmptyPage+0xca>
	for(i=OffsetInByte; i<w25qxx.PageSize; i+=sizeof(pBuffer))
 8001416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001418:	3320      	adds	r3, #32
 800141a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800141c:	4b35      	ldr	r3, [pc, #212]	; (80014f4 <W25qxx_IsEmptyPage+0x1cc>)
 800141e:	895b      	ldrh	r3, [r3, #10]
 8001420:	461a      	mov	r2, r3
 8001422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001424:	4293      	cmp	r3, r2
 8001426:	d3a5      	bcc.n	8001374 <W25qxx_IsEmptyPage+0x4c>
				goto NOT_EMPTY;		
		}			
	}	
	if((w25qxx.PageSize+OffsetInByte)%sizeof(pBuffer)!=0)
 8001428:	4b32      	ldr	r3, [pc, #200]	; (80014f4 <W25qxx_IsEmptyPage+0x1cc>)
 800142a:	895b      	ldrh	r3, [r3, #10]
 800142c:	461a      	mov	r2, r3
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	4413      	add	r3, r2
 8001432:	f003 031f 	and.w	r3, r3, #31
 8001436:	2b00      	cmp	r3, #0
 8001438:	d04a      	beq.n	80014d0 <W25qxx_IsEmptyPage+0x1a8>
	{
		i-=sizeof(pBuffer);
 800143a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800143c:	3b20      	subs	r3, #32
 800143e:	63fb      	str	r3, [r7, #60]	; 0x3c
		for( ; i<w25qxx.PageSize; i++)
 8001440:	e040      	b.n	80014c4 <W25qxx_IsEmptyPage+0x19c>
		{
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001442:	2200      	movs	r2, #0
 8001444:	2110      	movs	r1, #16
 8001446:	482c      	ldr	r0, [pc, #176]	; (80014f8 <W25qxx_IsEmptyPage+0x1d0>)
 8001448:	f002 fd2a 	bl	8003ea0 <HAL_GPIO_WritePin>
			WorkAddress=(i+Page_Address*w25qxx.PageSize);
 800144c:	4b29      	ldr	r3, [pc, #164]	; (80014f4 <W25qxx_IsEmptyPage+0x1cc>)
 800144e:	895b      	ldrh	r3, [r3, #10]
 8001450:	461a      	mov	r2, r3
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	fb03 f302 	mul.w	r3, r3, r2
 8001458:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800145a:	4413      	add	r3, r2
 800145c:	637b      	str	r3, [r7, #52]	; 0x34
			W25qxx_Spi(0x0B);
 800145e:	200b      	movs	r0, #11
 8001460:	f7ff fc92 	bl	8000d88 <W25qxx_Spi>
			if(w25qxx.ID>=W25Q256)
 8001464:	4b23      	ldr	r3, [pc, #140]	; (80014f4 <W25qxx_IsEmptyPage+0x1cc>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b08      	cmp	r3, #8
 800146a:	d905      	bls.n	8001478 <W25qxx_IsEmptyPage+0x150>
				W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 800146c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800146e:	0e1b      	lsrs	r3, r3, #24
 8001470:	b2db      	uxtb	r3, r3
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fc88 	bl	8000d88 <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8001478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800147a:	0c1b      	lsrs	r3, r3, #16
 800147c:	b2db      	uxtb	r3, r3
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fc82 	bl	8000d88 <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8001484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001486:	0a1b      	lsrs	r3, r3, #8
 8001488:	b2db      	uxtb	r3, r3
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fc7c 	bl	8000d88 <W25qxx_Spi>
			W25qxx_Spi(WorkAddress & 0xFF);
 8001490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001492:	b2db      	uxtb	r3, r3
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fc77 	bl	8000d88 <W25qxx_Spi>
			W25qxx_Spi(0);
 800149a:	2000      	movs	r0, #0
 800149c:	f7ff fc74 	bl	8000d88 <W25qxx_Spi>
			HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,1,100);	
 80014a0:	f107 0114 	add.w	r1, r7, #20
 80014a4:	2364      	movs	r3, #100	; 0x64
 80014a6:	2201      	movs	r2, #1
 80014a8:	4814      	ldr	r0, [pc, #80]	; (80014fc <W25qxx_IsEmptyPage+0x1d4>)
 80014aa:	f005 ff92 	bl	80073d2 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);	
 80014ae:	2201      	movs	r2, #1
 80014b0:	2110      	movs	r1, #16
 80014b2:	4811      	ldr	r0, [pc, #68]	; (80014f8 <W25qxx_IsEmptyPage+0x1d0>)
 80014b4:	f002 fcf4 	bl	8003ea0 <HAL_GPIO_WritePin>
			if(pBuffer[0]!=0xFF)
 80014b8:	7d3b      	ldrb	r3, [r7, #20]
 80014ba:	2bff      	cmp	r3, #255	; 0xff
 80014bc:	d110      	bne.n	80014e0 <W25qxx_IsEmptyPage+0x1b8>
		for( ; i<w25qxx.PageSize; i++)
 80014be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014c0:	3301      	adds	r3, #1
 80014c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014c4:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <W25qxx_IsEmptyPage+0x1cc>)
 80014c6:	895b      	ldrh	r3, [r3, #10]
 80014c8:	461a      	mov	r2, r3
 80014ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d3b8      	bcc.n	8001442 <W25qxx_IsEmptyPage+0x11a>
	}	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx CheckPage is Empty in %d ms\r\n",HAL_GetTick()-StartTime);
	W25qxx_Delay(100);
	#endif	
	w25qxx.Lock=0;
 80014d0:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <W25qxx_IsEmptyPage+0x1cc>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;	
 80014d8:	2301      	movs	r3, #1
 80014da:	e007      	b.n	80014ec <W25qxx_IsEmptyPage+0x1c4>
				goto NOT_EMPTY;		
 80014dc:	bf00      	nop
 80014de:	e000      	b.n	80014e2 <W25qxx_IsEmptyPage+0x1ba>
				goto NOT_EMPTY;
 80014e0:	bf00      	nop
	NOT_EMPTY:
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx CheckPage is Not Empty in %d ms\r\n",HAL_GetTick()-StartTime);
	W25qxx_Delay(100);
	#endif	
	w25qxx.Lock=0;
 80014e2:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <W25qxx_IsEmptyPage+0x1cc>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return false;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3740      	adds	r7, #64	; 0x40
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	200007d0 	.word	0x200007d0
 80014f8:	40010800 	.word	0x40010800
 80014fc:	200010a4 	.word	0x200010a4

08001500 <W25qxx_IsEmptySector>:
//###################################################################################################################
bool 	W25qxx_IsEmptySector(uint32_t Sector_Address,uint32_t OffsetInByte,uint32_t NumByteToCheck_up_to_SectorSize)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b090      	sub	sp, #64	; 0x40
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
	while(w25qxx.Lock==1)
 800150c:	e002      	b.n	8001514 <W25qxx_IsEmptySector+0x14>
	W25qxx_Delay(1);
 800150e:	2001      	movs	r0, #1
 8001510:	f001 ffcc 	bl	80034ac <HAL_Delay>
	while(w25qxx.Lock==1)
 8001514:	4b68      	ldr	r3, [pc, #416]	; (80016b8 <W25qxx_IsEmptySector+0x1b8>)
 8001516:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800151a:	2b01      	cmp	r3, #1
 800151c:	d0f7      	beq.n	800150e <W25qxx_IsEmptySector+0xe>
	w25qxx.Lock=1;	
 800151e:	4b66      	ldr	r3, [pc, #408]	; (80016b8 <W25qxx_IsEmptySector+0x1b8>)
 8001520:	2201      	movs	r2, #1
 8001522:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if((NumByteToCheck_up_to_SectorSize>w25qxx.SectorSize)||(NumByteToCheck_up_to_SectorSize==0))
 8001526:	4b64      	ldr	r3, [pc, #400]	; (80016b8 <W25qxx_IsEmptySector+0x1b8>)
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	429a      	cmp	r2, r3
 800152e:	d802      	bhi.n	8001536 <W25qxx_IsEmptySector+0x36>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d102      	bne.n	800153c <W25qxx_IsEmptySector+0x3c>
		NumByteToCheck_up_to_SectorSize=w25qxx.SectorSize;
 8001536:	4b60      	ldr	r3, [pc, #384]	; (80016b8 <W25qxx_IsEmptySector+0x1b8>)
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	607b      	str	r3, [r7, #4]
	uint32_t	StartTime=HAL_GetTick();
	#endif		
	uint8_t	pBuffer[32];
	uint32_t	WorkAddress;
	uint32_t	i;
	for(i=OffsetInByte; i<w25qxx.SectorSize; i+=sizeof(pBuffer))
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001540:	e052      	b.n	80015e8 <W25qxx_IsEmptySector+0xe8>
	{
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	2110      	movs	r1, #16
 8001546:	485d      	ldr	r0, [pc, #372]	; (80016bc <W25qxx_IsEmptySector+0x1bc>)
 8001548:	f002 fcaa 	bl	8003ea0 <HAL_GPIO_WritePin>
		WorkAddress=(i+Sector_Address*w25qxx.SectorSize);
 800154c:	4b5a      	ldr	r3, [pc, #360]	; (80016b8 <W25qxx_IsEmptySector+0x1b8>)
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	68fa      	ldr	r2, [r7, #12]
 8001552:	fb02 f303 	mul.w	r3, r2, r3
 8001556:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001558:	4413      	add	r3, r2
 800155a:	637b      	str	r3, [r7, #52]	; 0x34
		W25qxx_Spi(0x0B);
 800155c:	200b      	movs	r0, #11
 800155e:	f7ff fc13 	bl	8000d88 <W25qxx_Spi>
		if(w25qxx.ID>=W25Q256)
 8001562:	4b55      	ldr	r3, [pc, #340]	; (80016b8 <W25qxx_IsEmptySector+0x1b8>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b08      	cmp	r3, #8
 8001568:	d905      	bls.n	8001576 <W25qxx_IsEmptySector+0x76>
			W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 800156a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800156c:	0e1b      	lsrs	r3, r3, #24
 800156e:	b2db      	uxtb	r3, r3
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fc09 	bl	8000d88 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8001576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001578:	0c1b      	lsrs	r3, r3, #16
 800157a:	b2db      	uxtb	r3, r3
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fc03 	bl	8000d88 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8001582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001584:	0a1b      	lsrs	r3, r3, #8
 8001586:	b2db      	uxtb	r3, r3
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fbfd 	bl	8000d88 <W25qxx_Spi>
		W25qxx_Spi(WorkAddress & 0xFF);
 800158e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001590:	b2db      	uxtb	r3, r3
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fbf8 	bl	8000d88 <W25qxx_Spi>
		W25qxx_Spi(0);
 8001598:	2000      	movs	r0, #0
 800159a:	f7ff fbf5 	bl	8000d88 <W25qxx_Spi>
		HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,sizeof(pBuffer),100);	
 800159e:	f107 0114 	add.w	r1, r7, #20
 80015a2:	2364      	movs	r3, #100	; 0x64
 80015a4:	2220      	movs	r2, #32
 80015a6:	4846      	ldr	r0, [pc, #280]	; (80016c0 <W25qxx_IsEmptySector+0x1c0>)
 80015a8:	f005 ff13 	bl	80073d2 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);	
 80015ac:	2201      	movs	r2, #1
 80015ae:	2110      	movs	r1, #16
 80015b0:	4842      	ldr	r0, [pc, #264]	; (80016bc <W25qxx_IsEmptySector+0x1bc>)
 80015b2:	f002 fc75 	bl	8003ea0 <HAL_GPIO_WritePin>
		for(uint8_t x=0;x<sizeof(pBuffer);x++)
 80015b6:	2300      	movs	r3, #0
 80015b8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80015bc:	e00d      	b.n	80015da <W25qxx_IsEmptySector+0xda>
		{
			if(pBuffer[x]!=0xFF)
 80015be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015c2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80015c6:	4413      	add	r3, r2
 80015c8:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80015cc:	2bff      	cmp	r3, #255	; 0xff
 80015ce:	d167      	bne.n	80016a0 <W25qxx_IsEmptySector+0x1a0>
		for(uint8_t x=0;x<sizeof(pBuffer);x++)
 80015d0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015d4:	3301      	adds	r3, #1
 80015d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80015da:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015de:	2b1f      	cmp	r3, #31
 80015e0:	d9ed      	bls.n	80015be <W25qxx_IsEmptySector+0xbe>
	for(i=OffsetInByte; i<w25qxx.SectorSize; i+=sizeof(pBuffer))
 80015e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015e4:	3320      	adds	r3, #32
 80015e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015e8:	4b33      	ldr	r3, [pc, #204]	; (80016b8 <W25qxx_IsEmptySector+0x1b8>)
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d3a7      	bcc.n	8001542 <W25qxx_IsEmptySector+0x42>
				goto NOT_EMPTY;		
		}			
	}	
	if((w25qxx.SectorSize+OffsetInByte)%sizeof(pBuffer)!=0)
 80015f2:	4b31      	ldr	r3, [pc, #196]	; (80016b8 <W25qxx_IsEmptySector+0x1b8>)
 80015f4:	691a      	ldr	r2, [r3, #16]
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	4413      	add	r3, r2
 80015fa:	f003 031f 	and.w	r3, r3, #31
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d048      	beq.n	8001694 <W25qxx_IsEmptySector+0x194>
	{
		i-=sizeof(pBuffer);
 8001602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001604:	3b20      	subs	r3, #32
 8001606:	63fb      	str	r3, [r7, #60]	; 0x3c
		for( ; i<w25qxx.SectorSize; i++)
 8001608:	e03f      	b.n	800168a <W25qxx_IsEmptySector+0x18a>
		{
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800160a:	2200      	movs	r2, #0
 800160c:	2110      	movs	r1, #16
 800160e:	482b      	ldr	r0, [pc, #172]	; (80016bc <W25qxx_IsEmptySector+0x1bc>)
 8001610:	f002 fc46 	bl	8003ea0 <HAL_GPIO_WritePin>
			WorkAddress=(i+Sector_Address*w25qxx.SectorSize);
 8001614:	4b28      	ldr	r3, [pc, #160]	; (80016b8 <W25qxx_IsEmptySector+0x1b8>)
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	fb02 f303 	mul.w	r3, r2, r3
 800161e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001620:	4413      	add	r3, r2
 8001622:	637b      	str	r3, [r7, #52]	; 0x34
			W25qxx_Spi(0x0B);
 8001624:	200b      	movs	r0, #11
 8001626:	f7ff fbaf 	bl	8000d88 <W25qxx_Spi>
			if(w25qxx.ID>=W25Q256)
 800162a:	4b23      	ldr	r3, [pc, #140]	; (80016b8 <W25qxx_IsEmptySector+0x1b8>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b08      	cmp	r3, #8
 8001630:	d905      	bls.n	800163e <W25qxx_IsEmptySector+0x13e>
				W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 8001632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001634:	0e1b      	lsrs	r3, r3, #24
 8001636:	b2db      	uxtb	r3, r3
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fba5 	bl	8000d88 <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 800163e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001640:	0c1b      	lsrs	r3, r3, #16
 8001642:	b2db      	uxtb	r3, r3
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fb9f 	bl	8000d88 <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 800164a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800164c:	0a1b      	lsrs	r3, r3, #8
 800164e:	b2db      	uxtb	r3, r3
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fb99 	bl	8000d88 <W25qxx_Spi>
			W25qxx_Spi(WorkAddress & 0xFF);
 8001656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001658:	b2db      	uxtb	r3, r3
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fb94 	bl	8000d88 <W25qxx_Spi>
			W25qxx_Spi(0);
 8001660:	2000      	movs	r0, #0
 8001662:	f7ff fb91 	bl	8000d88 <W25qxx_Spi>
			HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,1,100);	
 8001666:	f107 0114 	add.w	r1, r7, #20
 800166a:	2364      	movs	r3, #100	; 0x64
 800166c:	2201      	movs	r2, #1
 800166e:	4814      	ldr	r0, [pc, #80]	; (80016c0 <W25qxx_IsEmptySector+0x1c0>)
 8001670:	f005 feaf 	bl	80073d2 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);	
 8001674:	2201      	movs	r2, #1
 8001676:	2110      	movs	r1, #16
 8001678:	4810      	ldr	r0, [pc, #64]	; (80016bc <W25qxx_IsEmptySector+0x1bc>)
 800167a:	f002 fc11 	bl	8003ea0 <HAL_GPIO_WritePin>
			if(pBuffer[0]!=0xFF)
 800167e:	7d3b      	ldrb	r3, [r7, #20]
 8001680:	2bff      	cmp	r3, #255	; 0xff
 8001682:	d10f      	bne.n	80016a4 <W25qxx_IsEmptySector+0x1a4>
		for( ; i<w25qxx.SectorSize; i++)
 8001684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001686:	3301      	adds	r3, #1
 8001688:	63fb      	str	r3, [r7, #60]	; 0x3c
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <W25qxx_IsEmptySector+0x1b8>)
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001690:	429a      	cmp	r2, r3
 8001692:	d3ba      	bcc.n	800160a <W25qxx_IsEmptySector+0x10a>
	}	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx CheckSector is Empty in %d ms\r\n",HAL_GetTick()-StartTime);
	W25qxx_Delay(100);
	#endif	
	w25qxx.Lock=0;
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <W25qxx_IsEmptySector+0x1b8>)
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;	
 800169c:	2301      	movs	r3, #1
 800169e:	e007      	b.n	80016b0 <W25qxx_IsEmptySector+0x1b0>
				goto NOT_EMPTY;		
 80016a0:	bf00      	nop
 80016a2:	e000      	b.n	80016a6 <W25qxx_IsEmptySector+0x1a6>
				goto NOT_EMPTY;
 80016a4:	bf00      	nop
	NOT_EMPTY:
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx CheckSector is Not Empty in %d ms\r\n",HAL_GetTick()-StartTime);
	W25qxx_Delay(100);
	#endif	
	w25qxx.Lock=0;
 80016a6:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <W25qxx_IsEmptySector+0x1b8>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return false;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3740      	adds	r7, #64	; 0x40
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	200007d0 	.word	0x200007d0
 80016bc:	40010800 	.word	0x40010800
 80016c0:	200010a4 	.word	0x200010a4

080016c4 <W25qxx_IsEmptyBlock>:
//###################################################################################################################
bool 	W25qxx_IsEmptyBlock(uint32_t Block_Address,uint32_t OffsetInByte,uint32_t NumByteToCheck_up_to_BlockSize)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b090      	sub	sp, #64	; 0x40
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
	while(w25qxx.Lock==1)
 80016d0:	e002      	b.n	80016d8 <W25qxx_IsEmptyBlock+0x14>
	W25qxx_Delay(1);
 80016d2:	2001      	movs	r0, #1
 80016d4:	f001 feea 	bl	80034ac <HAL_Delay>
	while(w25qxx.Lock==1)
 80016d8:	4b68      	ldr	r3, [pc, #416]	; (800187c <W25qxx_IsEmptyBlock+0x1b8>)
 80016da:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d0f7      	beq.n	80016d2 <W25qxx_IsEmptyBlock+0xe>
	w25qxx.Lock=1;	
 80016e2:	4b66      	ldr	r3, [pc, #408]	; (800187c <W25qxx_IsEmptyBlock+0x1b8>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if((NumByteToCheck_up_to_BlockSize>w25qxx.BlockSize)||(NumByteToCheck_up_to_BlockSize==0))
 80016ea:	4b64      	ldr	r3, [pc, #400]	; (800187c <W25qxx_IsEmptyBlock+0x1b8>)
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d802      	bhi.n	80016fa <W25qxx_IsEmptyBlock+0x36>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d102      	bne.n	8001700 <W25qxx_IsEmptyBlock+0x3c>
		NumByteToCheck_up_to_BlockSize=w25qxx.BlockSize;
 80016fa:	4b60      	ldr	r3, [pc, #384]	; (800187c <W25qxx_IsEmptyBlock+0x1b8>)
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	607b      	str	r3, [r7, #4]
	uint32_t	StartTime=HAL_GetTick();
	#endif		
	uint8_t	pBuffer[32];
	uint32_t	WorkAddress;
	uint32_t	i;
	for(i=OffsetInByte; i<w25qxx.BlockSize; i+=sizeof(pBuffer))
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001704:	e052      	b.n	80017ac <W25qxx_IsEmptyBlock+0xe8>
	{
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001706:	2200      	movs	r2, #0
 8001708:	2110      	movs	r1, #16
 800170a:	485d      	ldr	r0, [pc, #372]	; (8001880 <W25qxx_IsEmptyBlock+0x1bc>)
 800170c:	f002 fbc8 	bl	8003ea0 <HAL_GPIO_WritePin>
		WorkAddress=(i+Block_Address*w25qxx.BlockSize);
 8001710:	4b5a      	ldr	r3, [pc, #360]	; (800187c <W25qxx_IsEmptyBlock+0x1b8>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	68fa      	ldr	r2, [r7, #12]
 8001716:	fb02 f303 	mul.w	r3, r2, r3
 800171a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800171c:	4413      	add	r3, r2
 800171e:	637b      	str	r3, [r7, #52]	; 0x34
		W25qxx_Spi(0x0B);
 8001720:	200b      	movs	r0, #11
 8001722:	f7ff fb31 	bl	8000d88 <W25qxx_Spi>
		if(w25qxx.ID>=W25Q256)
 8001726:	4b55      	ldr	r3, [pc, #340]	; (800187c <W25qxx_IsEmptyBlock+0x1b8>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b08      	cmp	r3, #8
 800172c:	d905      	bls.n	800173a <W25qxx_IsEmptyBlock+0x76>
			W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 800172e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001730:	0e1b      	lsrs	r3, r3, #24
 8001732:	b2db      	uxtb	r3, r3
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fb27 	bl	8000d88 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 800173a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800173c:	0c1b      	lsrs	r3, r3, #16
 800173e:	b2db      	uxtb	r3, r3
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fb21 	bl	8000d88 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8001746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001748:	0a1b      	lsrs	r3, r3, #8
 800174a:	b2db      	uxtb	r3, r3
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fb1b 	bl	8000d88 <W25qxx_Spi>
		W25qxx_Spi(WorkAddress & 0xFF);
 8001752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001754:	b2db      	uxtb	r3, r3
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fb16 	bl	8000d88 <W25qxx_Spi>
		W25qxx_Spi(0);
 800175c:	2000      	movs	r0, #0
 800175e:	f7ff fb13 	bl	8000d88 <W25qxx_Spi>
		HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,sizeof(pBuffer),100);	
 8001762:	f107 0114 	add.w	r1, r7, #20
 8001766:	2364      	movs	r3, #100	; 0x64
 8001768:	2220      	movs	r2, #32
 800176a:	4846      	ldr	r0, [pc, #280]	; (8001884 <W25qxx_IsEmptyBlock+0x1c0>)
 800176c:	f005 fe31 	bl	80073d2 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);	
 8001770:	2201      	movs	r2, #1
 8001772:	2110      	movs	r1, #16
 8001774:	4842      	ldr	r0, [pc, #264]	; (8001880 <W25qxx_IsEmptyBlock+0x1bc>)
 8001776:	f002 fb93 	bl	8003ea0 <HAL_GPIO_WritePin>
		for(uint8_t x=0;x<sizeof(pBuffer);x++)
 800177a:	2300      	movs	r3, #0
 800177c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8001780:	e00d      	b.n	800179e <W25qxx_IsEmptyBlock+0xda>
		{
			if(pBuffer[x]!=0xFF)
 8001782:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001786:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800178a:	4413      	add	r3, r2
 800178c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8001790:	2bff      	cmp	r3, #255	; 0xff
 8001792:	d167      	bne.n	8001864 <W25qxx_IsEmptyBlock+0x1a0>
		for(uint8_t x=0;x<sizeof(pBuffer);x++)
 8001794:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001798:	3301      	adds	r3, #1
 800179a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800179e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80017a2:	2b1f      	cmp	r3, #31
 80017a4:	d9ed      	bls.n	8001782 <W25qxx_IsEmptyBlock+0xbe>
	for(i=OffsetInByte; i<w25qxx.BlockSize; i+=sizeof(pBuffer))
 80017a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017a8:	3320      	adds	r3, #32
 80017aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017ac:	4b33      	ldr	r3, [pc, #204]	; (800187c <W25qxx_IsEmptyBlock+0x1b8>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d3a7      	bcc.n	8001706 <W25qxx_IsEmptyBlock+0x42>
				goto NOT_EMPTY;		
		}			
	}	
	if((w25qxx.BlockSize+OffsetInByte)%sizeof(pBuffer)!=0)
 80017b6:	4b31      	ldr	r3, [pc, #196]	; (800187c <W25qxx_IsEmptyBlock+0x1b8>)
 80017b8:	699a      	ldr	r2, [r3, #24]
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	4413      	add	r3, r2
 80017be:	f003 031f 	and.w	r3, r3, #31
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d048      	beq.n	8001858 <W25qxx_IsEmptyBlock+0x194>
	{
		i-=sizeof(pBuffer);
 80017c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017c8:	3b20      	subs	r3, #32
 80017ca:	63fb      	str	r3, [r7, #60]	; 0x3c
		for( ; i<w25qxx.BlockSize; i++)
 80017cc:	e03f      	b.n	800184e <W25qxx_IsEmptyBlock+0x18a>
		{
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2110      	movs	r1, #16
 80017d2:	482b      	ldr	r0, [pc, #172]	; (8001880 <W25qxx_IsEmptyBlock+0x1bc>)
 80017d4:	f002 fb64 	bl	8003ea0 <HAL_GPIO_WritePin>
			WorkAddress=(i+Block_Address*w25qxx.BlockSize);
 80017d8:	4b28      	ldr	r3, [pc, #160]	; (800187c <W25qxx_IsEmptyBlock+0x1b8>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	fb02 f303 	mul.w	r3, r2, r3
 80017e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017e4:	4413      	add	r3, r2
 80017e6:	637b      	str	r3, [r7, #52]	; 0x34
			W25qxx_Spi(0x0B);
 80017e8:	200b      	movs	r0, #11
 80017ea:	f7ff facd 	bl	8000d88 <W25qxx_Spi>
			if(w25qxx.ID>=W25Q256)
 80017ee:	4b23      	ldr	r3, [pc, #140]	; (800187c <W25qxx_IsEmptyBlock+0x1b8>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b08      	cmp	r3, #8
 80017f4:	d905      	bls.n	8001802 <W25qxx_IsEmptyBlock+0x13e>
				W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 80017f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017f8:	0e1b      	lsrs	r3, r3, #24
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fac3 	bl	8000d88 <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8001802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001804:	0c1b      	lsrs	r3, r3, #16
 8001806:	b2db      	uxtb	r3, r3
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fabd 	bl	8000d88 <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 800180e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001810:	0a1b      	lsrs	r3, r3, #8
 8001812:	b2db      	uxtb	r3, r3
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff fab7 	bl	8000d88 <W25qxx_Spi>
			W25qxx_Spi(WorkAddress & 0xFF);
 800181a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800181c:	b2db      	uxtb	r3, r3
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fab2 	bl	8000d88 <W25qxx_Spi>
			W25qxx_Spi(0);
 8001824:	2000      	movs	r0, #0
 8001826:	f7ff faaf 	bl	8000d88 <W25qxx_Spi>
			HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,1,100);	
 800182a:	f107 0114 	add.w	r1, r7, #20
 800182e:	2364      	movs	r3, #100	; 0x64
 8001830:	2201      	movs	r2, #1
 8001832:	4814      	ldr	r0, [pc, #80]	; (8001884 <W25qxx_IsEmptyBlock+0x1c0>)
 8001834:	f005 fdcd 	bl	80073d2 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);	
 8001838:	2201      	movs	r2, #1
 800183a:	2110      	movs	r1, #16
 800183c:	4810      	ldr	r0, [pc, #64]	; (8001880 <W25qxx_IsEmptyBlock+0x1bc>)
 800183e:	f002 fb2f 	bl	8003ea0 <HAL_GPIO_WritePin>
			if(pBuffer[0]!=0xFF)
 8001842:	7d3b      	ldrb	r3, [r7, #20]
 8001844:	2bff      	cmp	r3, #255	; 0xff
 8001846:	d10f      	bne.n	8001868 <W25qxx_IsEmptyBlock+0x1a4>
		for( ; i<w25qxx.BlockSize; i++)
 8001848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800184a:	3301      	adds	r3, #1
 800184c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800184e:	4b0b      	ldr	r3, [pc, #44]	; (800187c <W25qxx_IsEmptyBlock+0x1b8>)
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001854:	429a      	cmp	r2, r3
 8001856:	d3ba      	bcc.n	80017ce <W25qxx_IsEmptyBlock+0x10a>
	}	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx CheckBlock is Empty in %d ms\r\n",HAL_GetTick()-StartTime);
	W25qxx_Delay(100);
	#endif	
	w25qxx.Lock=0;
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <W25qxx_IsEmptyBlock+0x1b8>)
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;	
 8001860:	2301      	movs	r3, #1
 8001862:	e007      	b.n	8001874 <W25qxx_IsEmptyBlock+0x1b0>
				goto NOT_EMPTY;		
 8001864:	bf00      	nop
 8001866:	e000      	b.n	800186a <W25qxx_IsEmptyBlock+0x1a6>
				goto NOT_EMPTY;
 8001868:	bf00      	nop
	NOT_EMPTY:
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx CheckBlock is Not Empty in %d ms\r\n",HAL_GetTick()-StartTime);
	W25qxx_Delay(100);
	#endif	
	w25qxx.Lock=0;
 800186a:	4b04      	ldr	r3, [pc, #16]	; (800187c <W25qxx_IsEmptyBlock+0x1b8>)
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return false;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	3740      	adds	r7, #64	; 0x40
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	200007d0 	.word	0x200007d0
 8001880:	40010800 	.word	0x40010800
 8001884:	200010a4 	.word	0x200010a4

08001888 <W25qxx_WriteByte>:
//###################################################################################################################
void W25qxx_WriteByte(uint8_t pBuffer, uint32_t WriteAddr_inBytes)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	6039      	str	r1, [r7, #0]
 8001892:	71fb      	strb	r3, [r7, #7]
	while(w25qxx.Lock==1)
 8001894:	e002      	b.n	800189c <W25qxx_WriteByte+0x14>
		W25qxx_Delay(1);
 8001896:	2001      	movs	r0, #1
 8001898:	f001 fe08 	bl	80034ac <HAL_Delay>
	while(w25qxx.Lock==1)
 800189c:	4b21      	ldr	r3, [pc, #132]	; (8001924 <W25qxx_WriteByte+0x9c>)
 800189e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d0f7      	beq.n	8001896 <W25qxx_WriteByte+0xe>
	w25qxx.Lock=1;
 80018a6:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <W25qxx_WriteByte+0x9c>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();
	printf("w25qxx WriteByte 0x%02X at address %d begin...",pBuffer,WriteAddr_inBytes);
	#endif
	W25qxx_WaitForWriteEnd();
 80018ae:	f7ff fb49 	bl	8000f44 <W25qxx_WaitForWriteEnd>
  W25qxx_WriteEnable();
 80018b2:	f7ff faeb 	bl	8000e8c <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2110      	movs	r1, #16
 80018ba:	481b      	ldr	r0, [pc, #108]	; (8001928 <W25qxx_WriteByte+0xa0>)
 80018bc:	f002 faf0 	bl	8003ea0 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x02);
 80018c0:	2002      	movs	r0, #2
 80018c2:	f7ff fa61 	bl	8000d88 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 80018c6:	4b17      	ldr	r3, [pc, #92]	; (8001924 <W25qxx_WriteByte+0x9c>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b08      	cmp	r3, #8
 80018cc:	d905      	bls.n	80018da <W25qxx_WriteByte+0x52>
		W25qxx_Spi((WriteAddr_inBytes & 0xFF000000) >> 24);
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	0e1b      	lsrs	r3, r3, #24
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fa57 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi((WriteAddr_inBytes & 0xFF0000) >> 16);
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	0c1b      	lsrs	r3, r3, #16
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fa51 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi((WriteAddr_inBytes & 0xFF00) >> 8);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	0a1b      	lsrs	r3, r3, #8
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fa4b 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi(WriteAddr_inBytes & 0xFF);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fa46 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi(pBuffer);
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fa42 	bl	8000d88 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001904:	2201      	movs	r2, #1
 8001906:	2110      	movs	r1, #16
 8001908:	4807      	ldr	r0, [pc, #28]	; (8001928 <W25qxx_WriteByte+0xa0>)
 800190a:	f002 fac9 	bl	8003ea0 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 800190e:	f7ff fb19 	bl	8000f44 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx WriteByte done after %d ms\r\n",HAL_GetTick()-StartTime);
	#endif
	w25qxx.Lock=0;
 8001912:	4b04      	ldr	r3, [pc, #16]	; (8001924 <W25qxx_WriteByte+0x9c>)
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	200007d0 	.word	0x200007d0
 8001928:	40010800 	.word	0x40010800

0800192c <W25qxx_WritePage>:
//###################################################################################################################
void 	W25qxx_WritePage(uint8_t *pBuffer	,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToWrite_up_to_PageSize)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
 8001938:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 800193a:	e002      	b.n	8001942 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 800193c:	2001      	movs	r0, #1
 800193e:	f001 fdb5 	bl	80034ac <HAL_Delay>
	while(w25qxx.Lock==1)
 8001942:	4b37      	ldr	r3, [pc, #220]	; (8001a20 <W25qxx_WritePage+0xf4>)
 8001944:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001948:	2b01      	cmp	r3, #1
 800194a:	d0f7      	beq.n	800193c <W25qxx_WritePage+0x10>
	w25qxx.Lock=1;
 800194c:	4b34      	ldr	r3, [pc, #208]	; (8001a20 <W25qxx_WritePage+0xf4>)
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if(((NumByteToWrite_up_to_PageSize+OffsetInByte)>w25qxx.PageSize)||(NumByteToWrite_up_to_PageSize==0))
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4413      	add	r3, r2
 800195a:	4a31      	ldr	r2, [pc, #196]	; (8001a20 <W25qxx_WritePage+0xf4>)
 800195c:	8952      	ldrh	r2, [r2, #10]
 800195e:	4293      	cmp	r3, r2
 8001960:	d802      	bhi.n	8001968 <W25qxx_WritePage+0x3c>
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d105      	bne.n	8001974 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize=w25qxx.PageSize-OffsetInByte;
 8001968:	4b2d      	ldr	r3, [pc, #180]	; (8001a20 <W25qxx_WritePage+0xf4>)
 800196a:	895b      	ldrh	r3, [r3, #10]
 800196c:	461a      	mov	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	603b      	str	r3, [r7, #0]
	if((OffsetInByte+NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	4413      	add	r3, r2
 800197a:	4a29      	ldr	r2, [pc, #164]	; (8001a20 <W25qxx_WritePage+0xf4>)
 800197c:	8952      	ldrh	r2, [r2, #10]
 800197e:	4293      	cmp	r3, r2
 8001980:	d905      	bls.n	800198e <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 8001982:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <W25qxx_WritePage+0xf4>)
 8001984:	895b      	ldrh	r3, [r3, #10]
 8001986:	461a      	mov	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t	StartTime=HAL_GetTick();
	#endif	
	W25qxx_WaitForWriteEnd();
 800198e:	f7ff fad9 	bl	8000f44 <W25qxx_WaitForWriteEnd>
  W25qxx_WriteEnable();
 8001992:	f7ff fa7b 	bl	8000e8c <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001996:	2200      	movs	r2, #0
 8001998:	2110      	movs	r1, #16
 800199a:	4822      	ldr	r0, [pc, #136]	; (8001a24 <W25qxx_WritePage+0xf8>)
 800199c:	f002 fa80 	bl	8003ea0 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x02);
 80019a0:	2002      	movs	r0, #2
 80019a2:	f7ff f9f1 	bl	8000d88 <W25qxx_Spi>
	Page_Address = (Page_Address*w25qxx.PageSize)+OffsetInByte;	
 80019a6:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <W25qxx_WritePage+0xf4>)
 80019a8:	895b      	ldrh	r3, [r3, #10]
 80019aa:	461a      	mov	r2, r3
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	fb03 f302 	mul.w	r3, r3, r2
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	60bb      	str	r3, [r7, #8]
	if(w25qxx.ID>=W25Q256)
 80019b8:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <W25qxx_WritePage+0xf4>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b08      	cmp	r3, #8
 80019be:	d905      	bls.n	80019cc <W25qxx_WritePage+0xa0>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	0e1b      	lsrs	r3, r3, #24
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff f9de 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	0c1b      	lsrs	r3, r3, #16
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff f9d8 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	0a1b      	lsrs	r3, r3, #8
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff f9d2 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi(Page_Address&0xFF);
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff f9cd 	bl	8000d88 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI,pBuffer,NumByteToWrite_up_to_PageSize,100);	
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	2364      	movs	r3, #100	; 0x64
 80019f4:	68f9      	ldr	r1, [r7, #12]
 80019f6:	480c      	ldr	r0, [pc, #48]	; (8001a28 <W25qxx_WritePage+0xfc>)
 80019f8:	f005 fbb7 	bl	800716a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80019fc:	2201      	movs	r2, #1
 80019fe:	2110      	movs	r1, #16
 8001a00:	4808      	ldr	r0, [pc, #32]	; (8001a24 <W25qxx_WritePage+0xf8>)
 8001a02:	f002 fa4d 	bl	8003ea0 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 8001a06:	f7ff fa9d 	bl	8000f44 <W25qxx_WaitForWriteEnd>
	}	
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif	
	W25qxx_Delay(1);
 8001a0a:	2001      	movs	r0, #1
 8001a0c:	f001 fd4e 	bl	80034ac <HAL_Delay>
	w25qxx.Lock=0;
 8001a10:	4b03      	ldr	r3, [pc, #12]	; (8001a20 <W25qxx_WritePage+0xf4>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001a18:	bf00      	nop
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	200007d0 	.word	0x200007d0
 8001a24:	40010800 	.word	0x40010800
 8001a28:	200010a4 	.word	0x200010a4

08001a2c <W25qxx_WriteSector>:
//###################################################################################################################
void 	W25qxx_WriteSector(uint8_t *pBuffer	,uint32_t Sector_Address,uint32_t OffsetInByte	,uint32_t NumByteToWrite_up_to_SectorSize)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
 8001a38:	603b      	str	r3, [r7, #0]
	if((NumByteToWrite_up_to_SectorSize>w25qxx.SectorSize)||(NumByteToWrite_up_to_SectorSize==0))
 8001a3a:	4b2b      	ldr	r3, [pc, #172]	; (8001ae8 <W25qxx_WriteSector+0xbc>)
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d802      	bhi.n	8001a4a <W25qxx_WriteSector+0x1e>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d102      	bne.n	8001a50 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize=w25qxx.SectorSize;
 8001a4a:	4b27      	ldr	r3, [pc, #156]	; (8001ae8 <W25qxx_WriteSector+0xbc>)
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n",Sector_Address,OffsetInByte,NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
	#endif	
	if(OffsetInByte>=w25qxx.SectorSize)
 8001a50:	4b25      	ldr	r3, [pc, #148]	; (8001ae8 <W25qxx_WriteSector+0xbc>)
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d241      	bcs.n	8001ade <W25qxx_WriteSector+0xb2>
		return;
	}	
	uint32_t	StartPage;
	int32_t		BytesToWrite;
	uint32_t	LocalOffset;	
	if((OffsetInByte+NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	441a      	add	r2, r3
 8001a60:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <W25qxx_WriteSector+0xbc>)
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d905      	bls.n	8001a74 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize-OffsetInByte;
 8001a68:	4b1f      	ldr	r3, [pc, #124]	; (8001ae8 <W25qxx_WriteSector+0xbc>)
 8001a6a:	691a      	ldr	r2, [r3, #16]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	61bb      	str	r3, [r7, #24]
 8001a72:	e001      	b.n	8001a78 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;	
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address)+(OffsetInByte/w25qxx.PageSize);
 8001a78:	68b8      	ldr	r0, [r7, #8]
 8001a7a:	f7ff fc2d 	bl	80012d8 <W25qxx_SectorToPage>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <W25qxx_WriteSector+0xbc>)
 8001a82:	895b      	ldrh	r3, [r3, #10]
 8001a84:	4619      	mov	r1, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a8c:	4413      	add	r3, r2
 8001a8e:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;	
 8001a90:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <W25qxx_WriteSector+0xbc>)
 8001a92:	895b      	ldrh	r3, [r3, #10]
 8001a94:	461a      	mov	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a9c:	fb02 f201 	mul.w	r2, r2, r1
 8001aa0:	1a9b      	subs	r3, r3, r2
 8001aa2:	617b      	str	r3, [r7, #20]
	do
	{		
		W25qxx_WritePage(pBuffer,StartPage,LocalOffset,BytesToWrite);
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	69f9      	ldr	r1, [r7, #28]
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f7ff ff3e 	bl	800192c <W25qxx_WritePage>
		StartPage++;
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	61fb      	str	r3, [r7, #28]
		BytesToWrite-=w25qxx.PageSize-LocalOffset;
 8001ab6:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <W25qxx_WriteSector+0xbc>)
 8001ab8:	895b      	ldrh	r3, [r3, #10]
 8001aba:	461a      	mov	r2, r3
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	1a9a      	subs	r2, r3, r2
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
		pBuffer+=w25qxx.PageSize;	
 8001ac6:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <W25qxx_WriteSector+0xbc>)
 8001ac8:	895b      	ldrh	r3, [r3, #10]
 8001aca:	461a      	mov	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4413      	add	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
	}while(BytesToWrite>0);		
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	dce3      	bgt.n	8001aa4 <W25qxx_WriteSector+0x78>
 8001adc:	e000      	b.n	8001ae0 <W25qxx_WriteSector+0xb4>
		return;
 8001ade:	bf00      	nop
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
	#endif	
}
 8001ae0:	3720      	adds	r7, #32
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200007d0 	.word	0x200007d0

08001aec <W25qxx_WriteBlock>:
//###################################################################################################################
void 	W25qxx_WriteBlock	(uint8_t* pBuffer ,uint32_t Block_Address	,uint32_t OffsetInByte	,uint32_t	NumByteToWrite_up_to_BlockSize)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
 8001af8:	603b      	str	r3, [r7, #0]
	if((NumByteToWrite_up_to_BlockSize>w25qxx.BlockSize)||(NumByteToWrite_up_to_BlockSize==0))
 8001afa:	4b2b      	ldr	r3, [pc, #172]	; (8001ba8 <W25qxx_WriteBlock+0xbc>)
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d802      	bhi.n	8001b0a <W25qxx_WriteBlock+0x1e>
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d102      	bne.n	8001b10 <W25qxx_WriteBlock+0x24>
		NumByteToWrite_up_to_BlockSize=w25qxx.BlockSize;
 8001b0a:	4b27      	ldr	r3, [pc, #156]	; (8001ba8 <W25qxx_WriteBlock+0xbc>)
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx WriteBlock:%d, Offset:%d ,Write %d Bytes, begin...\r\n",Block_Address,OffsetInByte,NumByteToWrite_up_to_BlockSize);
	W25qxx_Delay(100);
	#endif	
	if(OffsetInByte>=w25qxx.BlockSize)
 8001b10:	4b25      	ldr	r3, [pc, #148]	; (8001ba8 <W25qxx_WriteBlock+0xbc>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d241      	bcs.n	8001b9e <W25qxx_WriteBlock+0xb2>
		return;
	}	
	uint32_t	StartPage;
	int32_t		BytesToWrite;
	uint32_t	LocalOffset;	
	if((OffsetInByte+NumByteToWrite_up_to_BlockSize) > w25qxx.BlockSize)
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	441a      	add	r2, r3
 8001b20:	4b21      	ldr	r3, [pc, #132]	; (8001ba8 <W25qxx_WriteBlock+0xbc>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d905      	bls.n	8001b34 <W25qxx_WriteBlock+0x48>
		BytesToWrite = w25qxx.BlockSize-OffsetInByte;
 8001b28:	4b1f      	ldr	r3, [pc, #124]	; (8001ba8 <W25qxx_WriteBlock+0xbc>)
 8001b2a:	699a      	ldr	r2, [r3, #24]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	61bb      	str	r3, [r7, #24]
 8001b32:	e001      	b.n	8001b38 <W25qxx_WriteBlock+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_BlockSize;	
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_BlockToPage(Block_Address)+(OffsetInByte/w25qxx.PageSize);
 8001b38:	68b8      	ldr	r0, [r7, #8]
 8001b3a:	f7ff fbe1 	bl	8001300 <W25qxx_BlockToPage>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	4b19      	ldr	r3, [pc, #100]	; (8001ba8 <W25qxx_WriteBlock+0xbc>)
 8001b42:	895b      	ldrh	r3, [r3, #10]
 8001b44:	4619      	mov	r1, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b4c:	4413      	add	r3, r2
 8001b4e:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;	
 8001b50:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <W25qxx_WriteBlock+0xbc>)
 8001b52:	895b      	ldrh	r3, [r3, #10]
 8001b54:	461a      	mov	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b5c:	fb02 f201 	mul.w	r2, r2, r1
 8001b60:	1a9b      	subs	r3, r3, r2
 8001b62:	617b      	str	r3, [r7, #20]
	do
	{		
		W25qxx_WritePage(pBuffer,StartPage,LocalOffset,BytesToWrite);
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	69f9      	ldr	r1, [r7, #28]
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f7ff fede 	bl	800192c <W25qxx_WritePage>
		StartPage++;
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	3301      	adds	r3, #1
 8001b74:	61fb      	str	r3, [r7, #28]
		BytesToWrite-=w25qxx.PageSize-LocalOffset;
 8001b76:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <W25qxx_WriteBlock+0xbc>)
 8001b78:	895b      	ldrh	r3, [r3, #10]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	1a9a      	subs	r2, r3, r2
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	4413      	add	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
		pBuffer+=w25qxx.PageSize;	
 8001b86:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <W25qxx_WriteBlock+0xbc>)
 8001b88:	895b      	ldrh	r3, [r3, #10]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	4413      	add	r3, r2
 8001b90:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
	}while(BytesToWrite>0);		
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	dce3      	bgt.n	8001b64 <W25qxx_WriteBlock+0x78>
 8001b9c:	e000      	b.n	8001ba0 <W25qxx_WriteBlock+0xb4>
		return;
 8001b9e:	bf00      	nop
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx WriteBlock Done\r\n");
	W25qxx_Delay(100);
	#endif	
}
 8001ba0:	3720      	adds	r7, #32
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200007d0 	.word	0x200007d0

08001bac <W25qxx_ReadByte>:
//###################################################################################################################
void 	W25qxx_ReadByte(uint8_t *pBuffer,uint32_t Bytes_Address)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
	while(w25qxx.Lock==1)
 8001bb6:	e002      	b.n	8001bbe <W25qxx_ReadByte+0x12>
		W25qxx_Delay(1);
 8001bb8:	2001      	movs	r0, #1
 8001bba:	f001 fc77 	bl	80034ac <HAL_Delay>
	while(w25qxx.Lock==1)
 8001bbe:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <W25qxx_ReadByte+0x98>)
 8001bc0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d0f7      	beq.n	8001bb8 <W25qxx_ReadByte+0xc>
	w25qxx.Lock=1;
 8001bc8:	4b1e      	ldr	r3, [pc, #120]	; (8001c44 <W25qxx_ReadByte+0x98>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();
	printf("w25qxx ReadByte at address %d begin...\r\n",Bytes_Address);
	#endif
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2110      	movs	r1, #16
 8001bd4:	481c      	ldr	r0, [pc, #112]	; (8001c48 <W25qxx_ReadByte+0x9c>)
 8001bd6:	f002 f963 	bl	8003ea0 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x0B);
 8001bda:	200b      	movs	r0, #11
 8001bdc:	f7ff f8d4 	bl	8000d88 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8001be0:	4b18      	ldr	r3, [pc, #96]	; (8001c44 <W25qxx_ReadByte+0x98>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	d905      	bls.n	8001bf4 <W25qxx_ReadByte+0x48>
		W25qxx_Spi((Bytes_Address & 0xFF000000) >> 24);
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	0e1b      	lsrs	r3, r3, #24
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff f8ca 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi((Bytes_Address & 0xFF0000) >> 16);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	0c1b      	lsrs	r3, r3, #16
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff f8c4 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi((Bytes_Address& 0xFF00) >> 8);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	0a1b      	lsrs	r3, r3, #8
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff f8be 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi(Bytes_Address & 0xFF);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff f8b9 	bl	8000d88 <W25qxx_Spi>
	W25qxx_Spi(0);
 8001c16:	2000      	movs	r0, #0
 8001c18:	f7ff f8b6 	bl	8000d88 <W25qxx_Spi>
	*pBuffer = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001c1c:	20a5      	movs	r0, #165	; 0xa5
 8001c1e:	f7ff f8b3 	bl	8000d88 <W25qxx_Spi>
 8001c22:	4603      	mov	r3, r0
 8001c24:	461a      	mov	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);	
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	2110      	movs	r1, #16
 8001c2e:	4806      	ldr	r0, [pc, #24]	; (8001c48 <W25qxx_ReadByte+0x9c>)
 8001c30:	f002 f936 	bl	8003ea0 <HAL_GPIO_WritePin>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ReadByte 0x%02X done after %d ms\r\n",*pBuffer,HAL_GetTick()-StartTime);
	#endif
	w25qxx.Lock=0;
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <W25qxx_ReadByte+0x98>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001c3c:	bf00      	nop
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	200007d0 	.word	0x200007d0
 8001c48:	40010800 	.word	0x40010800

08001c4c <W25qxx_ReadBytes>:
//###################################################################################################################
void W25qxx_ReadBytes(uint8_t* pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
	while(w25qxx.Lock==1)
 8001c58:	e002      	b.n	8001c60 <W25qxx_ReadBytes+0x14>
		W25qxx_Delay(1);
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	f001 fc26 	bl	80034ac <HAL_Delay>
	while(w25qxx.Lock==1)
 8001c60:	4b23      	ldr	r3, [pc, #140]	; (8001cf0 <W25qxx_ReadBytes+0xa4>)
 8001c62:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d0f7      	beq.n	8001c5a <W25qxx_ReadBytes+0xe>
	w25qxx.Lock=1;
 8001c6a:	4b21      	ldr	r3, [pc, #132]	; (8001cf0 <W25qxx_ReadBytes+0xa4>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();
	printf("w25qxx ReadBytes at Address:%d, %d Bytes  begin...\r\n",ReadAddr,NumByteToRead);
	#endif	
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2110      	movs	r1, #16
 8001c76:	481f      	ldr	r0, [pc, #124]	; (8001cf4 <W25qxx_ReadBytes+0xa8>)
 8001c78:	f002 f912 	bl	8003ea0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x0B);
 8001c7c:	200b      	movs	r0, #11
 8001c7e:	f7ff f883 	bl	8000d88 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8001c82:	4b1b      	ldr	r3, [pc, #108]	; (8001cf0 <W25qxx_ReadBytes+0xa4>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d905      	bls.n	8001c96 <W25qxx_ReadBytes+0x4a>
		W25qxx_Spi((ReadAddr & 0xFF000000) >> 24);
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	0e1b      	lsrs	r3, r3, #24
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff f879 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi((ReadAddr & 0xFF0000) >> 16);
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	0c1b      	lsrs	r3, r3, #16
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff f873 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi((ReadAddr& 0xFF00) >> 8);
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	0a1b      	lsrs	r3, r3, #8
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff f86d 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi(ReadAddr & 0xFF);
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff f868 	bl	8000d88 <W25qxx_Spi>
	W25qxx_Spi(0);
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f7ff f865 	bl	8000d88 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,NumByteToRead,2000);	
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001cc6:	68f9      	ldr	r1, [r7, #12]
 8001cc8:	480b      	ldr	r0, [pc, #44]	; (8001cf8 <W25qxx_ReadBytes+0xac>)
 8001cca:	f005 fb82 	bl	80073d2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001cce:	2201      	movs	r2, #1
 8001cd0:	2110      	movs	r1, #16
 8001cd2:	4808      	ldr	r0, [pc, #32]	; (8001cf4 <W25qxx_ReadBytes+0xa8>)
 8001cd4:	f002 f8e4 	bl	8003ea0 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadBytes done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif	
	W25qxx_Delay(1);
 8001cd8:	2001      	movs	r0, #1
 8001cda:	f001 fbe7 	bl	80034ac <HAL_Delay>
	w25qxx.Lock=0;
 8001cde:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <W25qxx_ReadBytes+0xa4>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200007d0 	.word	0x200007d0
 8001cf4:	40010800 	.word	0x40010800
 8001cf8:	200010a4 	.word	0x200010a4

08001cfc <W25qxx_ReadPage>:
//###################################################################################################################
void 	W25qxx_ReadPage(uint8_t *pBuffer,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToRead_up_to_PageSize)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
 8001d08:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 8001d0a:	e002      	b.n	8001d12 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	f001 fbcd 	bl	80034ac <HAL_Delay>
	while(w25qxx.Lock==1)
 8001d12:	4b34      	ldr	r3, [pc, #208]	; (8001de4 <W25qxx_ReadPage+0xe8>)
 8001d14:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d0f7      	beq.n	8001d0c <W25qxx_ReadPage+0x10>
	w25qxx.Lock=1;
 8001d1c:	4b31      	ldr	r3, [pc, #196]	; (8001de4 <W25qxx_ReadPage+0xe8>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if((NumByteToRead_up_to_PageSize>w25qxx.PageSize)||(NumByteToRead_up_to_PageSize==0))
 8001d24:	4b2f      	ldr	r3, [pc, #188]	; (8001de4 <W25qxx_ReadPage+0xe8>)
 8001d26:	895b      	ldrh	r3, [r3, #10]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d802      	bhi.n	8001d36 <W25qxx_ReadPage+0x3a>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d102      	bne.n	8001d3c <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize=w25qxx.PageSize;
 8001d36:	4b2b      	ldr	r3, [pc, #172]	; (8001de4 <W25qxx_ReadPage+0xe8>)
 8001d38:	895b      	ldrh	r3, [r3, #10]
 8001d3a:	603b      	str	r3, [r7, #0]
	if((OffsetInByte+NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	4413      	add	r3, r2
 8001d42:	4a28      	ldr	r2, [pc, #160]	; (8001de4 <W25qxx_ReadPage+0xe8>)
 8001d44:	8952      	ldrh	r2, [r2, #10]
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d905      	bls.n	8001d56 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 8001d4a:	4b26      	ldr	r3, [pc, #152]	; (8001de4 <W25qxx_ReadPage+0xe8>)
 8001d4c:	895b      	ldrh	r3, [r3, #10]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t	StartTime=HAL_GetTick();
	#endif	
	Page_Address = Page_Address*w25qxx.PageSize+OffsetInByte;
 8001d56:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <W25qxx_ReadPage+0xe8>)
 8001d58:	895b      	ldrh	r3, [r3, #10]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	fb03 f302 	mul.w	r3, r3, r2
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	4413      	add	r3, r2
 8001d66:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2110      	movs	r1, #16
 8001d6c:	481e      	ldr	r0, [pc, #120]	; (8001de8 <W25qxx_ReadPage+0xec>)
 8001d6e:	f002 f897 	bl	8003ea0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x0B);
 8001d72:	200b      	movs	r0, #11
 8001d74:	f7ff f808 	bl	8000d88 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8001d78:	4b1a      	ldr	r3, [pc, #104]	; (8001de4 <W25qxx_ReadPage+0xe8>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d905      	bls.n	8001d8c <W25qxx_ReadPage+0x90>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	0e1b      	lsrs	r3, r3, #24
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fffe 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	0c1b      	lsrs	r3, r3, #16
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fff8 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi((Page_Address& 0xFF00) >> 8);
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	0a1b      	lsrs	r3, r3, #8
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe fff2 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi(Page_Address & 0xFF);
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe ffed 	bl	8000d88 <W25qxx_Spi>
	W25qxx_Spi(0);
 8001dae:	2000      	movs	r0, #0
 8001db0:	f7fe ffea 	bl	8000d88 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,NumByteToRead_up_to_PageSize,100);	
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	2364      	movs	r3, #100	; 0x64
 8001dba:	68f9      	ldr	r1, [r7, #12]
 8001dbc:	480b      	ldr	r0, [pc, #44]	; (8001dec <W25qxx_ReadPage+0xf0>)
 8001dbe:	f005 fb08 	bl	80073d2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	2110      	movs	r1, #16
 8001dc6:	4808      	ldr	r0, [pc, #32]	; (8001de8 <W25qxx_ReadPage+0xec>)
 8001dc8:	f002 f86a 	bl	8003ea0 <HAL_GPIO_WritePin>
	}	
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif	
	W25qxx_Delay(1);
 8001dcc:	2001      	movs	r0, #1
 8001dce:	f001 fb6d 	bl	80034ac <HAL_Delay>
	w25qxx.Lock=0;
 8001dd2:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <W25qxx_ReadPage+0xe8>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001dda:	bf00      	nop
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	200007d0 	.word	0x200007d0
 8001de8:	40010800 	.word	0x40010800
 8001dec:	200010a4 	.word	0x200010a4

08001df0 <W25qxx_ReadSector>:
//###################################################################################################################
void 	W25qxx_ReadSector(uint8_t *pBuffer,uint32_t Sector_Address,uint32_t OffsetInByte,uint32_t NumByteToRead_up_to_SectorSize)
{	
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
 8001dfc:	603b      	str	r3, [r7, #0]
	if((NumByteToRead_up_to_SectorSize>w25qxx.SectorSize)||(NumByteToRead_up_to_SectorSize==0))
 8001dfe:	4b2b      	ldr	r3, [pc, #172]	; (8001eac <W25qxx_ReadSector+0xbc>)
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d802      	bhi.n	8001e0e <W25qxx_ReadSector+0x1e>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d102      	bne.n	8001e14 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize=w25qxx.SectorSize;
 8001e0e:	4b27      	ldr	r3, [pc, #156]	; (8001eac <W25qxx_ReadSector+0xbc>)
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n",Sector_Address,OffsetInByte,NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
	#endif	
	if(OffsetInByte>=w25qxx.SectorSize)
 8001e14:	4b25      	ldr	r3, [pc, #148]	; (8001eac <W25qxx_ReadSector+0xbc>)
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d241      	bcs.n	8001ea2 <W25qxx_ReadSector+0xb2>
		return;
	}	
	uint32_t	StartPage;
	int32_t		BytesToRead;
	uint32_t	LocalOffset;	
	if((OffsetInByte+NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	441a      	add	r2, r3
 8001e24:	4b21      	ldr	r3, [pc, #132]	; (8001eac <W25qxx_ReadSector+0xbc>)
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d905      	bls.n	8001e38 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize-OffsetInByte;
 8001e2c:	4b1f      	ldr	r3, [pc, #124]	; (8001eac <W25qxx_ReadSector+0xbc>)
 8001e2e:	691a      	ldr	r2, [r3, #16]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	61bb      	str	r3, [r7, #24]
 8001e36:	e001      	b.n	8001e3c <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;	
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address)+(OffsetInByte/w25qxx.PageSize);
 8001e3c:	68b8      	ldr	r0, [r7, #8]
 8001e3e:	f7ff fa4b 	bl	80012d8 <W25qxx_SectorToPage>
 8001e42:	4602      	mov	r2, r0
 8001e44:	4b19      	ldr	r3, [pc, #100]	; (8001eac <W25qxx_ReadSector+0xbc>)
 8001e46:	895b      	ldrh	r3, [r3, #10]
 8001e48:	4619      	mov	r1, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e50:	4413      	add	r3, r2
 8001e52:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;	
 8001e54:	4b15      	ldr	r3, [pc, #84]	; (8001eac <W25qxx_ReadSector+0xbc>)
 8001e56:	895b      	ldrh	r3, [r3, #10]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e60:	fb02 f201 	mul.w	r2, r2, r1
 8001e64:	1a9b      	subs	r3, r3, r2
 8001e66:	617b      	str	r3, [r7, #20]
	do
	{		
		W25qxx_ReadPage(pBuffer,StartPage,LocalOffset,BytesToRead);
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	69f9      	ldr	r1, [r7, #28]
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f7ff ff44 	bl	8001cfc <W25qxx_ReadPage>
		StartPage++;
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	3301      	adds	r3, #1
 8001e78:	61fb      	str	r3, [r7, #28]
		BytesToRead-=w25qxx.PageSize-LocalOffset;
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <W25qxx_ReadSector+0xbc>)
 8001e7c:	895b      	ldrh	r3, [r3, #10]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	1a9a      	subs	r2, r3, r2
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	4413      	add	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
		pBuffer+=w25qxx.PageSize;	
 8001e8a:	4b08      	ldr	r3, [pc, #32]	; (8001eac <W25qxx_ReadSector+0xbc>)
 8001e8c:	895b      	ldrh	r3, [r3, #10]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4413      	add	r3, r2
 8001e94:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
	}while(BytesToRead>0);		
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	dce3      	bgt.n	8001e68 <W25qxx_ReadSector+0x78>
 8001ea0:	e000      	b.n	8001ea4 <W25qxx_ReadSector+0xb4>
		return;
 8001ea2:	bf00      	nop
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
	#endif	
}
 8001ea4:	3720      	adds	r7, #32
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	200007d0 	.word	0x200007d0

08001eb0 <W25qxx_ReadBlock>:
//###################################################################################################################
void 	W25qxx_ReadBlock(uint8_t* pBuffer,uint32_t Block_Address,uint32_t OffsetInByte,uint32_t	NumByteToRead_up_to_BlockSize)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	603b      	str	r3, [r7, #0]
	if((NumByteToRead_up_to_BlockSize>w25qxx.BlockSize)||(NumByteToRead_up_to_BlockSize==0))
 8001ebe:	4b2b      	ldr	r3, [pc, #172]	; (8001f6c <W25qxx_ReadBlock+0xbc>)
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d802      	bhi.n	8001ece <W25qxx_ReadBlock+0x1e>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d102      	bne.n	8001ed4 <W25qxx_ReadBlock+0x24>
		NumByteToRead_up_to_BlockSize=w25qxx.BlockSize;
 8001ece:	4b27      	ldr	r3, [pc, #156]	; (8001f6c <W25qxx_ReadBlock+0xbc>)
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx ReadBlock:%d, Offset:%d ,Read %d Bytes, begin...\r\n",Block_Address,OffsetInByte,NumByteToRead_up_to_BlockSize);
	W25qxx_Delay(100);
	#endif	
	if(OffsetInByte>=w25qxx.BlockSize)
 8001ed4:	4b25      	ldr	r3, [pc, #148]	; (8001f6c <W25qxx_ReadBlock+0xbc>)
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d241      	bcs.n	8001f62 <W25qxx_ReadBlock+0xb2>
		return;
	}	
	uint32_t	StartPage;
	int32_t		BytesToRead;
	uint32_t	LocalOffset;	
	if((OffsetInByte+NumByteToRead_up_to_BlockSize) > w25qxx.BlockSize)
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	441a      	add	r2, r3
 8001ee4:	4b21      	ldr	r3, [pc, #132]	; (8001f6c <W25qxx_ReadBlock+0xbc>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d905      	bls.n	8001ef8 <W25qxx_ReadBlock+0x48>
		BytesToRead = w25qxx.BlockSize-OffsetInByte;
 8001eec:	4b1f      	ldr	r3, [pc, #124]	; (8001f6c <W25qxx_ReadBlock+0xbc>)
 8001eee:	699a      	ldr	r2, [r3, #24]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	61bb      	str	r3, [r7, #24]
 8001ef6:	e001      	b.n	8001efc <W25qxx_ReadBlock+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_BlockSize;	
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_BlockToPage(Block_Address)+(OffsetInByte/w25qxx.PageSize);
 8001efc:	68b8      	ldr	r0, [r7, #8]
 8001efe:	f7ff f9ff 	bl	8001300 <W25qxx_BlockToPage>
 8001f02:	4602      	mov	r2, r0
 8001f04:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <W25qxx_ReadBlock+0xbc>)
 8001f06:	895b      	ldrh	r3, [r3, #10]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f10:	4413      	add	r3, r2
 8001f12:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;	
 8001f14:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <W25qxx_ReadBlock+0xbc>)
 8001f16:	895b      	ldrh	r3, [r3, #10]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001f20:	fb02 f201 	mul.w	r2, r2, r1
 8001f24:	1a9b      	subs	r3, r3, r2
 8001f26:	617b      	str	r3, [r7, #20]
	do
	{		
		W25qxx_ReadPage(pBuffer,StartPage,LocalOffset,BytesToRead);
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	69f9      	ldr	r1, [r7, #28]
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f7ff fee4 	bl	8001cfc <W25qxx_ReadPage>
		StartPage++;
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	3301      	adds	r3, #1
 8001f38:	61fb      	str	r3, [r7, #28]
		BytesToRead-=w25qxx.PageSize-LocalOffset;
 8001f3a:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <W25qxx_ReadBlock+0xbc>)
 8001f3c:	895b      	ldrh	r3, [r3, #10]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	1a9a      	subs	r2, r3, r2
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	4413      	add	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
		pBuffer+=w25qxx.PageSize;	
 8001f4a:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <W25qxx_ReadBlock+0xbc>)
 8001f4c:	895b      	ldrh	r3, [r3, #10]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4413      	add	r3, r2
 8001f54:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
	}while(BytesToRead>0);		
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	dce3      	bgt.n	8001f28 <W25qxx_ReadBlock+0x78>
 8001f60:	e000      	b.n	8001f64 <W25qxx_ReadBlock+0xb4>
		return;
 8001f62:	bf00      	nop
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx ReadBlock Done\r\n");
	W25qxx_Delay(100);
	#endif	
}
 8001f64:	3720      	adds	r7, #32
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	200007d0 	.word	0x200007d0

08001f70 <init_user_call>:
};

WorkMode_t WorkMode=Mode_UART;

void init_user_call()//在硬件初始化完成后调用
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart2,UART_IT_IDLE);//打开总线空闲中断
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <init_user_call+0x1c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <init_user_call+0x1c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0210 	orr.w	r2, r2, #16
 8001f82:	60da      	str	r2, [r3, #12]
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	200010fc 	.word	0x200010fc

08001f90 <loop_user_call>:

void loop_user_call()//在Main函数里循环调用此函数
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
	if(linecode.IsUpdate)
 8001f94:	4b56      	ldr	r3, [pc, #344]	; (80020f0 <loop_user_call+0x160>)
 8001f96:	7a1b      	ldrb	r3, [r3, #8]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 809a 	beq.w	80020d2 <loop_user_call+0x142>
	{
		HAL_Delay(20);//延时20ms设置通信参数
 8001f9e:	2014      	movs	r0, #20
 8001fa0:	f001 fa84 	bl	80034ac <HAL_Delay>
		if(linecode.Rate<1500000)//速率小于1.5Mbps，为串口模式(极其有限的串口支持)
 8001fa4:	4b52      	ldr	r3, [pc, #328]	; (80020f0 <loop_user_call+0x160>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a52      	ldr	r2, [pc, #328]	; (80020f4 <loop_user_call+0x164>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d870      	bhi.n	8002090 <loop_user_call+0x100>
		{//重新初始化串口
			WorkMode=Mode_UART;
 8001fae:	4b52      	ldr	r3, [pc, #328]	; (80020f8 <loop_user_call+0x168>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
			huart2.Instance = USART2;
 8001fb4:	4b51      	ldr	r3, [pc, #324]	; (80020fc <loop_user_call+0x16c>)
 8001fb6:	4a52      	ldr	r2, [pc, #328]	; (8002100 <loop_user_call+0x170>)
 8001fb8:	601a      	str	r2, [r3, #0]

			huart2.Init.BaudRate = linecode.Rate;//linecode的速率
 8001fba:	4b4d      	ldr	r3, [pc, #308]	; (80020f0 <loop_user_call+0x160>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a4f      	ldr	r2, [pc, #316]	; (80020fc <loop_user_call+0x16c>)
 8001fc0:	6053      	str	r3, [r2, #4]

			huart2.Init.WordLength = UART_WORDLENGTH_8B;//只支持8/9数据位（包括校验位）
 8001fc2:	4b4e      	ldr	r3, [pc, #312]	; (80020fc <loop_user_call+0x16c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	609a      	str	r2, [r3, #8]
			if(linecode.DataBits==8 && linecode.Parity!=0)
 8001fc8:	4b49      	ldr	r3, [pc, #292]	; (80020f0 <loop_user_call+0x160>)
 8001fca:	88db      	ldrh	r3, [r3, #6]
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	d107      	bne.n	8001fe0 <loop_user_call+0x50>
 8001fd0:	4b47      	ldr	r3, [pc, #284]	; (80020f0 <loop_user_call+0x160>)
 8001fd2:	795b      	ldrb	r3, [r3, #5]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <loop_user_call+0x50>
			{
				huart2.Init.WordLength=UART_WORDLENGTH_9B;
 8001fd8:	4b48      	ldr	r3, [pc, #288]	; (80020fc <loop_user_call+0x16c>)
 8001fda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fde:	609a      	str	r2, [r3, #8]
			}

			huart2.Init.StopBits = UART_STOPBITS_1;
 8001fe0:	4b46      	ldr	r3, [pc, #280]	; (80020fc <loop_user_call+0x16c>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	60da      	str	r2, [r3, #12]
			if(linecode.StopBits==2)
 8001fe6:	4b42      	ldr	r3, [pc, #264]	; (80020f0 <loop_user_call+0x160>)
 8001fe8:	791b      	ldrb	r3, [r3, #4]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d103      	bne.n	8001ff6 <loop_user_call+0x66>
			{
				huart2.Init.StopBits=UART_STOPBITS_2;
 8001fee:	4b43      	ldr	r3, [pc, #268]	; (80020fc <loop_user_call+0x16c>)
 8001ff0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ff4:	60da      	str	r2, [r3, #12]
			}


			huart2.Init.Parity = UART_PARITY_NONE;
 8001ff6:	4b41      	ldr	r3, [pc, #260]	; (80020fc <loop_user_call+0x16c>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	611a      	str	r2, [r3, #16]
			if(linecode.Parity==1)
 8001ffc:	4b3c      	ldr	r3, [pc, #240]	; (80020f0 <loop_user_call+0x160>)
 8001ffe:	795b      	ldrb	r3, [r3, #5]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d103      	bne.n	800200c <loop_user_call+0x7c>
				huart2.Init.Parity = UART_PARITY_ODD;
 8002004:	4b3d      	ldr	r3, [pc, #244]	; (80020fc <loop_user_call+0x16c>)
 8002006:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800200a:	611a      	str	r2, [r3, #16]
			if(linecode.Parity==2)
 800200c:	4b38      	ldr	r3, [pc, #224]	; (80020f0 <loop_user_call+0x160>)
 800200e:	795b      	ldrb	r3, [r3, #5]
 8002010:	2b02      	cmp	r3, #2
 8002012:	d103      	bne.n	800201c <loop_user_call+0x8c>
				huart2.Init.Parity = UART_PARITY_EVEN;
 8002014:	4b39      	ldr	r3, [pc, #228]	; (80020fc <loop_user_call+0x16c>)
 8002016:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800201a:	611a      	str	r2, [r3, #16]



			huart2.Init.Mode = UART_MODE_TX_RX;
 800201c:	4b37      	ldr	r3, [pc, #220]	; (80020fc <loop_user_call+0x16c>)
 800201e:	220c      	movs	r2, #12
 8002020:	615a      	str	r2, [r3, #20]

			huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;//不支持流控
 8002022:	4b36      	ldr	r3, [pc, #216]	; (80020fc <loop_user_call+0x16c>)
 8002024:	2200      	movs	r2, #0
 8002026:	619a      	str	r2, [r3, #24]

			huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002028:	4b34      	ldr	r3, [pc, #208]	; (80020fc <loop_user_call+0x16c>)
 800202a:	2200      	movs	r2, #0
 800202c:	61da      	str	r2, [r3, #28]

			 if (HAL_UART_Init(&huart2) != HAL_OK)
 800202e:	4833      	ldr	r0, [pc, #204]	; (80020fc <loop_user_call+0x16c>)
 8002030:	f005 ff4c 	bl	8007ecc <HAL_UART_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d028      	beq.n	800208c <loop_user_call+0xfc>
			  {//打开失败则使用默认设置
				  huart2.Instance = USART2;
 800203a:	4b30      	ldr	r3, [pc, #192]	; (80020fc <loop_user_call+0x16c>)
 800203c:	4a30      	ldr	r2, [pc, #192]	; (8002100 <loop_user_call+0x170>)
 800203e:	601a      	str	r2, [r3, #0]
				  huart2.Init.BaudRate = 115200;
 8002040:	4b2e      	ldr	r3, [pc, #184]	; (80020fc <loop_user_call+0x16c>)
 8002042:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002046:	605a      	str	r2, [r3, #4]
				  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002048:	4b2c      	ldr	r3, [pc, #176]	; (80020fc <loop_user_call+0x16c>)
 800204a:	2200      	movs	r2, #0
 800204c:	609a      	str	r2, [r3, #8]
				  huart2.Init.StopBits = UART_STOPBITS_1;
 800204e:	4b2b      	ldr	r3, [pc, #172]	; (80020fc <loop_user_call+0x16c>)
 8002050:	2200      	movs	r2, #0
 8002052:	60da      	str	r2, [r3, #12]
				  huart2.Init.Parity = UART_PARITY_NONE;
 8002054:	4b29      	ldr	r3, [pc, #164]	; (80020fc <loop_user_call+0x16c>)
 8002056:	2200      	movs	r2, #0
 8002058:	611a      	str	r2, [r3, #16]
				  huart2.Init.Mode = UART_MODE_TX_RX;
 800205a:	4b28      	ldr	r3, [pc, #160]	; (80020fc <loop_user_call+0x16c>)
 800205c:	220c      	movs	r2, #12
 800205e:	615a      	str	r2, [r3, #20]
				  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002060:	4b26      	ldr	r3, [pc, #152]	; (80020fc <loop_user_call+0x16c>)
 8002062:	2200      	movs	r2, #0
 8002064:	619a      	str	r2, [r3, #24]
				  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002066:	4b25      	ldr	r3, [pc, #148]	; (80020fc <loop_user_call+0x16c>)
 8002068:	2200      	movs	r2, #0
 800206a:	61da      	str	r2, [r3, #28]
				  HAL_UART_Init(&huart2);
 800206c:	4823      	ldr	r0, [pc, #140]	; (80020fc <loop_user_call+0x16c>)
 800206e:	f005 ff2d 	bl	8007ecc <HAL_UART_Init>
				  linecode.DataBits=8;
 8002072:	4b1f      	ldr	r3, [pc, #124]	; (80020f0 <loop_user_call+0x160>)
 8002074:	2208      	movs	r2, #8
 8002076:	80da      	strh	r2, [r3, #6]
				  linecode.Parity=0;
 8002078:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <loop_user_call+0x160>)
 800207a:	2200      	movs	r2, #0
 800207c:	715a      	strb	r2, [r3, #5]
				  linecode.Rate=115200;
 800207e:	4b1c      	ldr	r3, [pc, #112]	; (80020f0 <loop_user_call+0x160>)
 8002080:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002084:	601a      	str	r2, [r3, #0]
				  linecode.StopBits=0;
 8002086:	4b1a      	ldr	r3, [pc, #104]	; (80020f0 <loop_user_call+0x160>)
 8002088:	2200      	movs	r2, #0
 800208a:	711a      	strb	r2, [r3, #4]
			  }
			 uart_start_receive();
 800208c:	f000 fd54 	bl	8002b38 <uart_start_receive>
		}

		if(linecode.Rate>=1500000)//切换为i2c模式
 8002090:	4b17      	ldr	r3, [pc, #92]	; (80020f0 <loop_user_call+0x160>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a17      	ldr	r2, [pc, #92]	; (80020f4 <loop_user_call+0x164>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d909      	bls.n	80020ae <loop_user_call+0x11e>
		{
			WorkMode=Mode_I2C_RAW;
 800209a:	4b17      	ldr	r3, [pc, #92]	; (80020f8 <loop_user_call+0x168>)
 800209c:	2203      	movs	r2, #3
 800209e:	701a      	strb	r2, [r3, #0]

			if(linecode.StopBits!=0)
 80020a0:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <loop_user_call+0x160>)
 80020a2:	791b      	ldrb	r3, [r3, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d002      	beq.n	80020ae <loop_user_call+0x11e>
			{
						WorkMode=Mode_I2C_CMD;
 80020a8:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <loop_user_call+0x168>)
 80020aa:	2204      	movs	r2, #4
 80020ac:	701a      	strb	r2, [r3, #0]
			}
		}

		if(linecode.Rate>=2000000)//切换为spi模式
 80020ae:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <loop_user_call+0x160>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a14      	ldr	r2, [pc, #80]	; (8002104 <loop_user_call+0x174>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d909      	bls.n	80020cc <loop_user_call+0x13c>
		{
			WorkMode=Mode_SPI_RAW;
 80020b8:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <loop_user_call+0x168>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	701a      	strb	r2, [r3, #0]

			if(linecode.StopBits!=0)
 80020be:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <loop_user_call+0x160>)
 80020c0:	791b      	ldrb	r3, [r3, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d002      	beq.n	80020cc <loop_user_call+0x13c>
			{
				WorkMode=Mode_SPI_CMD;
 80020c6:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <loop_user_call+0x168>)
 80020c8:	2202      	movs	r2, #2
 80020ca:	701a      	strb	r2, [r3, #0]
			}
		}
		linecode.IsUpdate=0;
 80020cc:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <loop_user_call+0x160>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	721a      	strb	r2, [r3, #8]
	}

	if(WorkMode==Mode_SPI_CMD)
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <loop_user_call+0x168>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d101      	bne.n	80020de <loop_user_call+0x14e>
			spi_cmd_process_call();//调用spi命令处理函数（不在中断中处理）
 80020da:	f000 f9fb 	bl	80024d4 <spi_cmd_process_call>
	if(WorkMode==Mode_I2C_CMD)
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <loop_user_call+0x168>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d101      	bne.n	80020ea <loop_user_call+0x15a>
			i2c_cmd_process_call();//调用i2c命令处理函数（不在中断中处理）
 80020e6:	f000 f8b5 	bl	8002254 <i2c_cmd_process_call>
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000004 	.word	0x20000004
 80020f4:	0016e35f 	.word	0x0016e35f
 80020f8:	200001c0 	.word	0x200001c0
 80020fc:	200010fc 	.word	0x200010fc
 8002100:	40004400 	.word	0x40004400
 8002104:	001e847f 	.word	0x001e847f

08002108 <cdc_receive_call>:

void cdc_receive_call(uint8_t* Buf, uint32_t Len)//由USB CDC/ACM接收数据时调用
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af02      	add	r7, sp, #8
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
	switch(WorkMode)
 8002112:	4b41      	ldr	r3, [pc, #260]	; (8002218 <cdc_receive_call+0x110>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	3b01      	subs	r3, #1
 8002118:	2b03      	cmp	r3, #3
 800211a:	d80b      	bhi.n	8002134 <cdc_receive_call+0x2c>
 800211c:	a201      	add	r2, pc, #4	; (adr r2, 8002124 <cdc_receive_call+0x1c>)
 800211e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002122:	bf00      	nop
 8002124:	0800213f 	.word	0x0800213f
 8002128:	08002157 	.word	0x08002157
 800212c:	08002181 	.word	0x08002181
 8002130:	080021e1 	.word	0x080021e1
	{
	default:
		uart_transmit(Buf,Len);
 8002134:	6839      	ldr	r1, [r7, #0]
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 fcc6 	bl	8002ac8 <uart_transmit>
		break;
 800213c:	e068      	b.n	8002210 <cdc_receive_call+0x108>
	case Mode_SPI_RAW:
		CDC_Transmit_FS(spi_transmitReceive(Buf,Len),Len);
 800213e:	6839      	ldr	r1, [r7, #0]
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f98f 	bl	8002464 <spi_transmitReceive>
 8002146:	4602      	mov	r2, r0
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	b29b      	uxth	r3, r3
 800214c:	4619      	mov	r1, r3
 800214e:	4610      	mov	r0, r2
 8002150:	f009 fa06 	bl	800b560 <CDC_Transmit_FS>
		break;
 8002154:	e05c      	b.n	8002210 <cdc_receive_call+0x108>
	case Mode_SPI_CMD:
		if(spi_cmd_data.IsUpdate!=0) break;//上条命令未处理，忽略下一条命令
 8002156:	4b31      	ldr	r3, [pc, #196]	; (800221c <cdc_receive_call+0x114>)
 8002158:	791b      	ldrb	r3, [r3, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d155      	bne.n	800220a <cdc_receive_call+0x102>
		spi_cmd_data.length=Len;
 800215e:	4a2f      	ldr	r2, [pc, #188]	; (800221c <cdc_receive_call+0x114>)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	6013      	str	r3, [r2, #0]
		memcpy(spi_cmd_data.data,Buf,Len);
 8002164:	4b2d      	ldr	r3, [pc, #180]	; (800221c <cdc_receive_call+0x114>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	4618      	mov	r0, r3
 800216e:	f009 fded 	bl	800bd4c <memcpy>
		spi_cmd_data.IsUpdate++;
 8002172:	4b2a      	ldr	r3, [pc, #168]	; (800221c <cdc_receive_call+0x114>)
 8002174:	791b      	ldrb	r3, [r3, #4]
 8002176:	3301      	adds	r3, #1
 8002178:	b2da      	uxtb	r2, r3
 800217a:	4b28      	ldr	r3, [pc, #160]	; (800221c <cdc_receive_call+0x114>)
 800217c:	711a      	strb	r2, [r3, #4]
		break;
 800217e:	e047      	b.n	8002210 <cdc_receive_call+0x108>
	case Mode_I2C_RAW:
		if(Buf[0] & 0x01)//首字符表示8位器件地址(最低位表示读/写)，写入/读取长度位Len-1
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b00      	cmp	r3, #0
 800218a:	d011      	beq.n	80021b0 <cdc_receive_call+0xa8>
		{
			HAL_I2C_Master_Receive(&hi2c1,Buf[0],&Buf[1],Len-1,1000+Len);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	b299      	uxth	r1, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	b29b      	uxth	r3, r3
 800219a:	3b01      	subs	r3, #1
 800219c:	b298      	uxth	r0, r3
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	4603      	mov	r3, r0
 80021a8:	481d      	ldr	r0, [pc, #116]	; (8002220 <cdc_receive_call+0x118>)
 80021aa:	f002 f8b7 	bl	800431c <HAL_I2C_Master_Receive>
 80021ae:	e010      	b.n	80021d2 <cdc_receive_call+0xca>
		}
		else
		{
			HAL_I2C_Master_Transmit(&hi2c1,Buf[0],&Buf[1],Len-1,1000+Len);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	b299      	uxth	r1, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	1c5a      	adds	r2, r3, #1
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	b29b      	uxth	r3, r3
 80021be:	3b01      	subs	r3, #1
 80021c0:	b298      	uxth	r0, r3
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	4603      	mov	r3, r0
 80021cc:	4814      	ldr	r0, [pc, #80]	; (8002220 <cdc_receive_call+0x118>)
 80021ce:	f001 ffa7 	bl	8004120 <HAL_I2C_Master_Transmit>
		}
		CDC_Transmit_FS(Buf,Len);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	4619      	mov	r1, r3
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f009 f9c1 	bl	800b560 <CDC_Transmit_FS>
		break;
 80021de:	e017      	b.n	8002210 <cdc_receive_call+0x108>
	case Mode_I2C_CMD:
		if(i2c_cmd_data.IsUpdate!=0) break;//上条命令未处理，忽略下一条命令
 80021e0:	4b10      	ldr	r3, [pc, #64]	; (8002224 <cdc_receive_call+0x11c>)
 80021e2:	791b      	ldrb	r3, [r3, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d112      	bne.n	800220e <cdc_receive_call+0x106>
		i2c_cmd_data.length=Len;
 80021e8:	4a0e      	ldr	r2, [pc, #56]	; (8002224 <cdc_receive_call+0x11c>)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	6013      	str	r3, [r2, #0]
		memcpy(i2c_cmd_data.data,Buf,Len);
 80021ee:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <cdc_receive_call+0x11c>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f009 fda8 	bl	800bd4c <memcpy>
		i2c_cmd_data.IsUpdate++;
 80021fc:	4b09      	ldr	r3, [pc, #36]	; (8002224 <cdc_receive_call+0x11c>)
 80021fe:	791b      	ldrb	r3, [r3, #4]
 8002200:	3301      	adds	r3, #1
 8002202:	b2da      	uxtb	r2, r3
 8002204:	4b07      	ldr	r3, [pc, #28]	; (8002224 <cdc_receive_call+0x11c>)
 8002206:	711a      	strb	r2, [r3, #4]
		break;
 8002208:	e002      	b.n	8002210 <cdc_receive_call+0x108>
		if(spi_cmd_data.IsUpdate!=0) break;//上条命令未处理，忽略下一条命令
 800220a:	bf00      	nop
 800220c:	e000      	b.n	8002210 <cdc_receive_call+0x108>
		if(i2c_cmd_data.IsUpdate!=0) break;//上条命令未处理，忽略下一条命令
 800220e:	bf00      	nop

	}
}
 8002210:	bf00      	nop
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	200001c0 	.word	0x200001c0
 800221c:	2000001c 	.word	0x2000001c
 8002220:	2000100c 	.word	0x2000100c
 8002224:	20000010 	.word	0x20000010

08002228 <uart_receive_call>:

void uart_receive_call(void * buf,size_t len)//接收数据完成后调用此函数
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
	if(WorkMode!=Mode_UART)
 8002232:	4b07      	ldr	r3, [pc, #28]	; (8002250 <uart_receive_call+0x28>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d106      	bne.n	8002248 <uart_receive_call+0x20>
		return;//检查模式
	CDC_Transmit_FS(buf,len);//发送给上位机
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	b29b      	uxth	r3, r3
 800223e:	4619      	mov	r1, r3
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f009 f98d 	bl	800b560 <CDC_Transmit_FS>
 8002246:	e000      	b.n	800224a <uart_receive_call+0x22>
		return;//检查模式
 8002248:	bf00      	nop
}
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	200001c0 	.word	0x200001c0

08002254 <i2c_cmd_process_call>:
.data=i2c_rx_buff,
.IsUpdate=0
};

void i2c_cmd_process_call()//i2c命令模式处理函数
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
	if(i2c_cmd_data.IsUpdate)
 800225a:	4b6a      	ldr	r3, [pc, #424]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 800225c:	791b      	ldrb	r3, [r3, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	f000 80cc 	beq.w	80023fc <i2c_cmd_process_call+0x1a8>
	{
		switch(i2c_cmd_data.data[0])
 8002264:	4b67      	ldr	r3, [pc, #412]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d047      	beq.n	80022fe <i2c_cmd_process_call+0xaa>
 800226e:	2b03      	cmp	r3, #3
 8002270:	f000 8087 	beq.w	8002382 <i2c_cmd_process_call+0x12e>
 8002274:	2b01      	cmp	r3, #1
 8002276:	d007      	beq.n	8002288 <i2c_cmd_process_call+0x34>
		{
		default:
			i2c_cmd_data.data[0]=0xff;
 8002278:	4b62      	ldr	r3, [pc, #392]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	22ff      	movs	r2, #255	; 0xff
 800227e:	701a      	strb	r2, [r3, #0]
			i2c_cmd_data.length=1;
 8002280:	4b60      	ldr	r3, [pc, #384]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 8002282:	2201      	movs	r2, #1
 8002284:	601a      	str	r2, [r3, #0]
			break;
 8002286:	e0ad      	b.n	80023e4 <i2c_cmd_process_call+0x190>
		case 1://设置目标EEPROM容量，并检测EEPROM,两字节数据（低字节在前）
			if(i2c_cmd_data.length>=3 && EEPROM24XX_IsConnected())
 8002288:	4b5e      	ldr	r3, [pc, #376]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b02      	cmp	r3, #2
 800228e:	d92d      	bls.n	80022ec <i2c_cmd_process_call+0x98>
 8002290:	f7fe fb4a 	bl	8000928 <EEPROM24XX_IsConnected>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d028      	beq.n	80022ec <i2c_cmd_process_call+0x98>
			{
				uint32_t size=i2c_cmd_data.data[1]+(uint32_t)i2c_cmd_data.data[2]*256;
 800229a:	4b5a      	ldr	r3, [pc, #360]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	3301      	adds	r3, #1
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	461a      	mov	r2, r3
 80022a4:	4b57      	ldr	r3, [pc, #348]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	3302      	adds	r3, #2
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	021b      	lsls	r3, r3, #8
 80022ae:	4413      	add	r3, r2
 80022b0:	607b      	str	r3, [r7, #4]
				if(size!=0)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d015      	beq.n	80022e4 <i2c_cmd_process_call+0x90>
				{
					size_t i=0,j=0x01;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	2301      	movs	r3, #1
 80022be:	603b      	str	r3, [r7, #0]
					while(!((j<<i)&size))
 80022c0:	e002      	b.n	80022c8 <i2c_cmd_process_call+0x74>
						i++;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	3301      	adds	r3, #1
 80022c6:	60fb      	str	r3, [r7, #12]
					while(!((j<<i)&size))
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	409a      	lsls	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4013      	ands	r3, r2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f5      	beq.n	80022c2 <i2c_cmd_process_call+0x6e>
					_EEPROM_SIZE_KBIT=(j<<i);
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	4a4a      	ldr	r2, [pc, #296]	; (8002408 <i2c_cmd_process_call+0x1b4>)
 80022e0:	6013      	str	r3, [r2, #0]
			{
 80022e2:	e00b      	b.n	80022fc <i2c_cmd_process_call+0xa8>
				}
				else
				{
					_EEPROM_SIZE_KBIT=64;//默认为64
 80022e4:	4b48      	ldr	r3, [pc, #288]	; (8002408 <i2c_cmd_process_call+0x1b4>)
 80022e6:	2240      	movs	r2, #64	; 0x40
 80022e8:	601a      	str	r2, [r3, #0]
			{
 80022ea:	e007      	b.n	80022fc <i2c_cmd_process_call+0xa8>
				}
			}
			else
			{
				i2c_cmd_data.data[0]=0xff;
 80022ec:	4b45      	ldr	r3, [pc, #276]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	22ff      	movs	r2, #255	; 0xff
 80022f2:	701a      	strb	r2, [r3, #0]
				i2c_cmd_data.length=1;
 80022f4:	4b43      	ldr	r3, [pc, #268]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	601a      	str	r2, [r3, #0]
			}
			break;
 80022fa:	e073      	b.n	80023e4 <i2c_cmd_process_call+0x190>
 80022fc:	e072      	b.n	80023e4 <i2c_cmd_process_call+0x190>
		case 2://读取EEPROM，地址（2字节，低字节在前）+待读取的数据长度（两字节,低字节在前，最多512字节）

			{
				uint32_t i=i2c_cmd_data.data[3]+(uint32_t)i2c_cmd_data.data[4]*256;
 80022fe:	4b41      	ldr	r3, [pc, #260]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	3303      	adds	r3, #3
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	4b3e      	ldr	r3, [pc, #248]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	3304      	adds	r3, #4
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	021b      	lsls	r3, r3, #8
 8002312:	4413      	add	r3, r2
 8002314:	60bb      	str	r3, [r7, #8]
				if(i==0 || i>512)
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d003      	beq.n	8002324 <i2c_cmd_process_call+0xd0>
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002322:	d902      	bls.n	800232a <i2c_cmd_process_call+0xd6>
					i=512;
 8002324:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002328:	60bb      	str	r3, [r7, #8]
				if(!(i2c_cmd_data.length >=5 && EEPROM24XX_Load(i2c_cmd_data.data[1]+(uint32_t)i2c_cmd_data.data[2]*256,&i2c_cmd_data.data[1],i)))
 800232a:	4b36      	ldr	r3, [pc, #216]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2b04      	cmp	r3, #4
 8002330:	d91a      	bls.n	8002368 <i2c_cmd_process_call+0x114>
 8002332:	4b34      	ldr	r3, [pc, #208]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	3301      	adds	r3, #1
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	b29a      	uxth	r2, r3
 800233c:	4b31      	ldr	r3, [pc, #196]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	3302      	adds	r3, #2
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	b29b      	uxth	r3, r3
 8002346:	021b      	lsls	r3, r3, #8
 8002348:	b29b      	uxth	r3, r3
 800234a:	4413      	add	r3, r2
 800234c:	b298      	uxth	r0, r3
 800234e:	4b2d      	ldr	r3, [pc, #180]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	3301      	adds	r3, #1
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	4619      	mov	r1, r3
 8002358:	f7fe fc6a 	bl	8000c30 <EEPROM24XX_Load>
 800235c:	4603      	mov	r3, r0
 800235e:	f083 0301 	eor.w	r3, r3, #1
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	d007      	beq.n	8002378 <i2c_cmd_process_call+0x124>
				{
					i2c_cmd_data.data[0]=0xff;
 8002368:	4b26      	ldr	r3, [pc, #152]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	22ff      	movs	r2, #255	; 0xff
 800236e:	701a      	strb	r2, [r3, #0]
					i2c_cmd_data.length=1;
 8002370:	4b24      	ldr	r3, [pc, #144]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 8002372:	2201      	movs	r2, #1
 8002374:	601a      	str	r2, [r3, #0]
				else
				{
					i2c_cmd_data.length=1+i;
				}
			}
			break;
 8002376:	e035      	b.n	80023e4 <i2c_cmd_process_call+0x190>
					i2c_cmd_data.length=1+i;
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	3301      	adds	r3, #1
 800237c:	4a21      	ldr	r2, [pc, #132]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 800237e:	6013      	str	r3, [r2, #0]
			break;
 8002380:	e030      	b.n	80023e4 <i2c_cmd_process_call+0x190>
		case 3://写入EEPROM,地址（2字节，低字节在前）+待写入的数据
			if(i2c_cmd_data.length<=4)
 8002382:	4b20      	ldr	r3, [pc, #128]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b04      	cmp	r3, #4
 8002388:	d807      	bhi.n	800239a <i2c_cmd_process_call+0x146>
			{
				i2c_cmd_data.data[0]=0xff;
 800238a:	4b1e      	ldr	r3, [pc, #120]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	22ff      	movs	r2, #255	; 0xff
 8002390:	701a      	strb	r2, [r3, #0]
				i2c_cmd_data.length=1;
 8002392:	4b1c      	ldr	r3, [pc, #112]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 8002394:	2201      	movs	r2, #1
 8002396:	601a      	str	r2, [r3, #0]
				break;
 8002398:	e024      	b.n	80023e4 <i2c_cmd_process_call+0x190>
			}

			if(!EEPROM24XX_Save(i2c_cmd_data.data[1]+(uint32_t)i2c_cmd_data.data[2]*256,&i2c_cmd_data.data[3],i2c_cmd_data.length-3))
 800239a:	4b1a      	ldr	r3, [pc, #104]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	3301      	adds	r3, #1
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	4b17      	ldr	r3, [pc, #92]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	3302      	adds	r3, #2
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	021b      	lsls	r3, r3, #8
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	4413      	add	r3, r2
 80023b4:	b298      	uxth	r0, r3
 80023b6:	4b13      	ldr	r3, [pc, #76]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	1cd9      	adds	r1, r3, #3
 80023bc:	4b11      	ldr	r3, [pc, #68]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	3b03      	subs	r3, #3
 80023c2:	461a      	mov	r2, r3
 80023c4:	f7fe fb94 	bl	8000af0 <EEPROM24XX_Save>
 80023c8:	4603      	mov	r3, r0
 80023ca:	f083 0301 	eor.w	r3, r3, #1
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d006      	beq.n	80023e2 <i2c_cmd_process_call+0x18e>
			{
				i2c_cmd_data.data[0]=0xff;
 80023d4:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	22ff      	movs	r2, #255	; 0xff
 80023da:	701a      	strb	r2, [r3, #0]
				i2c_cmd_data.length=1;
 80023dc:	4b09      	ldr	r3, [pc, #36]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 80023de:	2201      	movs	r2, #1
 80023e0:	601a      	str	r2, [r3, #0]
			}
			break;
 80023e2:	bf00      	nop


		}

		CDC_Transmit_FS(i2c_cmd_data.data,i2c_cmd_data.length);
 80023e4:	4b07      	ldr	r3, [pc, #28]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	4619      	mov	r1, r3
 80023f0:	4610      	mov	r0, r2
 80023f2:	f009 f8b5 	bl	800b560 <CDC_Transmit_FS>
		i2c_cmd_data.IsUpdate=0;
 80023f6:	4b03      	ldr	r3, [pc, #12]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	711a      	strb	r2, [r3, #4]
	}
}
 80023fc:	bf00      	nop
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	20000010 	.word	0x20000010
 8002408:	20000000 	.word	0x20000000

0800240c <U8A2U32>:
#include "w25qxx.h"
#include "userapp.h"

//uint8数组转uint32函数,小端模式
static uint32_t U8A2U32(void * p)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
	uint8_t * data=(uint8_t *)p;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	60fb      	str	r3, [r7, #12]
	return (((uint32_t)data[3])<<24)+(((uint32_t)data[2])<<16)+(((uint32_t)data[1])<<8)+(((uint32_t)data[0])<<0);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	3303      	adds	r3, #3
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	061a      	lsls	r2, r3, #24
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	3302      	adds	r3, #2
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	041b      	lsls	r3, r3, #16
 8002428:	441a      	add	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	3301      	adds	r3, #1
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	021b      	lsls	r3, r3, #8
 8002432:	4413      	add	r3, r2
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	7812      	ldrb	r2, [r2, #0]
 8002438:	4413      	add	r3, r2
}
 800243a:	4618      	mov	r0, r3
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr

08002444 <delay>:
.data=spi_rx_buff,
.length=0
};

void delay(size_t delay)//中断中不能调用HAL_Delay时使用
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
while(delay--);
 800244c:	bf00      	nop
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	1e5a      	subs	r2, r3, #1
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1fa      	bne.n	800244e <delay+0xa>
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr
	...

08002464 <spi_transmitReceive>:
void * spi_transmitReceive(void * txbuff,size_t len)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af02      	add	r7, sp, #8
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
	 SPI_CS_HIGH();
 800246e:	2201      	movs	r2, #1
 8002470:	2110      	movs	r1, #16
 8002472:	4815      	ldr	r0, [pc, #84]	; (80024c8 <spi_transmitReceive+0x64>)
 8002474:	f001 fd14 	bl	8003ea0 <HAL_GPIO_WritePin>
	 delay(48*5);//
 8002478:	20f0      	movs	r0, #240	; 0xf0
 800247a:	f7ff ffe3 	bl	8002444 <delay>
	 SPI_CS_LOW();
 800247e:	2200      	movs	r2, #0
 8002480:	2110      	movs	r1, #16
 8002482:	4811      	ldr	r0, [pc, #68]	; (80024c8 <spi_transmitReceive+0x64>)
 8002484:	f001 fd0c 	bl	8003ea0 <HAL_GPIO_WritePin>
	 delay(48*5);
 8002488:	20f0      	movs	r0, #240	; 0xf0
 800248a:	f7ff ffdb 	bl	8002444 <delay>
	 memset(spi_rx_buff,0,sizeof(spi_rx_buff));
 800248e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002492:	2100      	movs	r1, #0
 8002494:	480d      	ldr	r0, [pc, #52]	; (80024cc <spi_transmitReceive+0x68>)
 8002496:	f009 fc64 	bl	800bd62 <memset>
	 HAL_SPI_TransmitReceive(&hspi1,txbuff,spi_rx_buff,len,1000+len);
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	b29a      	uxth	r2, r3
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	4613      	mov	r3, r2
 80024a8:	4a08      	ldr	r2, [pc, #32]	; (80024cc <spi_transmitReceive+0x68>)
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	4808      	ldr	r0, [pc, #32]	; (80024d0 <spi_transmitReceive+0x6c>)
 80024ae:	f005 f899 	bl	80075e4 <HAL_SPI_TransmitReceive>
	 SPI_CS_HIGH();
 80024b2:	2201      	movs	r2, #1
 80024b4:	2110      	movs	r1, #16
 80024b6:	4804      	ldr	r0, [pc, #16]	; (80024c8 <spi_transmitReceive+0x64>)
 80024b8:	f001 fcf2 	bl	8003ea0 <HAL_GPIO_WritePin>
	 return spi_rx_buff;
 80024bc:	4b03      	ldr	r3, [pc, #12]	; (80024cc <spi_transmitReceive+0x68>)
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40010800 	.word	0x40010800
 80024cc:	200001c4 	.word	0x200001c4
 80024d0:	200010a4 	.word	0x200010a4

080024d4 <spi_cmd_process_call>:

void spi_cmd_process_call()//spi命令模式处理函数
{
 80024d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024d6:	af00      	add	r7, sp, #0
	if(spi_cmd_data.IsUpdate)//有新的命令
 80024d8:	4baa      	ldr	r3, [pc, #680]	; (8002784 <spi_cmd_process_call+0x2b0>)
 80024da:	791b      	ldrb	r3, [r3, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 82ef 	beq.w	8002ac0 <spi_cmd_process_call+0x5ec>
	{

		switch(spi_cmd_data.data[0])//判断命令号
 80024e2:	4ba8      	ldr	r3, [pc, #672]	; (8002784 <spi_cmd_process_call+0x2b0>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b10      	cmp	r3, #16
 80024ea:	d825      	bhi.n	8002538 <spi_cmd_process_call+0x64>
 80024ec:	a201      	add	r2, pc, #4	; (adr r2, 80024f4 <spi_cmd_process_call+0x20>)
 80024ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f2:	bf00      	nop
 80024f4:	08002549 	.word	0x08002549
 80024f8:	080025ab 	.word	0x080025ab
 80024fc:	080025dd 	.word	0x080025dd
 8002500:	080025e3 	.word	0x080025e3
 8002504:	08002611 	.word	0x08002611
 8002508:	0800263f 	.word	0x0800263f
 800250c:	08002699 	.word	0x08002699
 8002510:	080026f3 	.word	0x080026f3
 8002514:	0800274d 	.word	0x0800274d
 8002518:	08002791 	.word	0x08002791
 800251c:	080027dd 	.word	0x080027dd
 8002520:	08002829 	.word	0x08002829
 8002524:	08002875 	.word	0x08002875
 8002528:	080028b1 	.word	0x080028b1
 800252c:	08002921 	.word	0x08002921
 8002530:	0800299f 	.word	0x0800299f
 8002534:	08002a21 	.word	0x08002a21
		{
		default:
			spi_cmd_data.data[0]=0xff;//无效命令的返回
 8002538:	4b92      	ldr	r3, [pc, #584]	; (8002784 <spi_cmd_process_call+0x2b0>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	22ff      	movs	r2, #255	; 0xff
 800253e:	701a      	strb	r2, [r3, #0]
			spi_cmd_data.length=0x01;
 8002540:	4b90      	ldr	r3, [pc, #576]	; (8002784 <spi_cmd_process_call+0x2b0>)
 8002542:	2201      	movs	r2, #1
 8002544:	601a      	str	r2, [r3, #0]
			break;
 8002546:	e2af      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
		case 0://0号命令，设置spi通信参数，字节1为CPOL,字节2为CPHA,字节3字节序(MSB/LSB))
			if(spi_cmd_data.length>=2)
 8002548:	4b8e      	ldr	r3, [pc, #568]	; (8002784 <spi_cmd_process_call+0x2b0>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d90a      	bls.n	8002566 <spi_cmd_process_call+0x92>
				hspi1.Init.CLKPolarity=spi_cmd_data.data[1]?SPI_POLARITY_HIGH:SPI_POLARITY_LOW;
 8002550:	4b8c      	ldr	r3, [pc, #560]	; (8002784 <spi_cmd_process_call+0x2b0>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	3301      	adds	r3, #1
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <spi_cmd_process_call+0x8c>
 800255c:	2302      	movs	r3, #2
 800255e:	e000      	b.n	8002562 <spi_cmd_process_call+0x8e>
 8002560:	2300      	movs	r3, #0
 8002562:	4a89      	ldr	r2, [pc, #548]	; (8002788 <spi_cmd_process_call+0x2b4>)
 8002564:	6113      	str	r3, [r2, #16]
			if(spi_cmd_data.length>=3)
 8002566:	4b87      	ldr	r3, [pc, #540]	; (8002784 <spi_cmd_process_call+0x2b0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d90a      	bls.n	8002584 <spi_cmd_process_call+0xb0>
				hspi1.Init.CLKPhase=spi_cmd_data.data[2]?SPI_PHASE_2EDGE:SPI_PHASE_1EDGE;
 800256e:	4b85      	ldr	r3, [pc, #532]	; (8002784 <spi_cmd_process_call+0x2b0>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	3302      	adds	r3, #2
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <spi_cmd_process_call+0xaa>
 800257a:	2301      	movs	r3, #1
 800257c:	e000      	b.n	8002580 <spi_cmd_process_call+0xac>
 800257e:	2300      	movs	r3, #0
 8002580:	4a81      	ldr	r2, [pc, #516]	; (8002788 <spi_cmd_process_call+0x2b4>)
 8002582:	6153      	str	r3, [r2, #20]
			if(spi_cmd_data.length>=4)
 8002584:	4b7f      	ldr	r3, [pc, #508]	; (8002784 <spi_cmd_process_call+0x2b0>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b03      	cmp	r3, #3
 800258a:	d90a      	bls.n	80025a2 <spi_cmd_process_call+0xce>
				hspi1.Init.FirstBit=spi_cmd_data.data[3]?SPI_FIRSTBIT_LSB:SPI_FIRSTBIT_MSB;
 800258c:	4b7d      	ldr	r3, [pc, #500]	; (8002784 <spi_cmd_process_call+0x2b0>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	3303      	adds	r3, #3
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <spi_cmd_process_call+0xc8>
 8002598:	2380      	movs	r3, #128	; 0x80
 800259a:	e000      	b.n	800259e <spi_cmd_process_call+0xca>
 800259c:	2300      	movs	r3, #0
 800259e:	4a7a      	ldr	r2, [pc, #488]	; (8002788 <spi_cmd_process_call+0x2b4>)
 80025a0:	6213      	str	r3, [r2, #32]
			HAL_SPI_Init(&hspi1);
 80025a2:	4879      	ldr	r0, [pc, #484]	; (8002788 <spi_cmd_process_call+0x2b4>)
 80025a4:	f004 fd80 	bl	80070a8 <HAL_SPI_Init>

			break;
 80025a8:	e27e      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
		case 1://1号命令，重新初始化spi flash通信
			if(W25qxx_Init())
 80025aa:	f7fe fcf5 	bl	8000f98 <W25qxx_Init>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00b      	beq.n	80025cc <spi_cmd_process_call+0xf8>
			{
				memcpy(&(spi_cmd_data.data[1]),&w25qxx,sizeof(w25qxx));
 80025b4:	4b73      	ldr	r3, [pc, #460]	; (8002784 <spi_cmd_process_call+0x2b0>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	3301      	adds	r3, #1
 80025ba:	2228      	movs	r2, #40	; 0x28
 80025bc:	4973      	ldr	r1, [pc, #460]	; (800278c <spi_cmd_process_call+0x2b8>)
 80025be:	4618      	mov	r0, r3
 80025c0:	f009 fbc4 	bl	800bd4c <memcpy>
				spi_cmd_data.length=sizeof(w25qxx)+1;
 80025c4:	4b6f      	ldr	r3, [pc, #444]	; (8002784 <spi_cmd_process_call+0x2b0>)
 80025c6:	2229      	movs	r2, #41	; 0x29
 80025c8:	601a      	str	r2, [r3, #0]
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
				spi_cmd_data.length=0x01;
			}

			break;
 80025ca:	e26d      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 80025cc:	4b6d      	ldr	r3, [pc, #436]	; (8002784 <spi_cmd_process_call+0x2b0>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	22ff      	movs	r2, #255	; 0xff
 80025d2:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 80025d4:	4b6b      	ldr	r3, [pc, #428]	; (8002784 <spi_cmd_process_call+0x2b0>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	601a      	str	r2, [r3, #0]
			break;
 80025da:	e265      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>

		case 2://2号命令，W25qxx_EraseChip,芯片擦除
			W25qxx_EraseChip();
 80025dc:	f7fe fda4 	bl	8001128 <W25qxx_EraseChip>

			break;
 80025e0:	e262      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
		case 3://3号命令,W25qxx_EraseSector,擦除扇区，前四字节为扇区地址（小端模式）
			if(spi_cmd_data.length>=5)
 80025e2:	4b68      	ldr	r3, [pc, #416]	; (8002784 <spi_cmd_process_call+0x2b0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d90a      	bls.n	8002600 <spi_cmd_process_call+0x12c>
				W25qxx_EraseSector(U8A2U32(&(spi_cmd_data.data[1])));
 80025ea:	4b66      	ldr	r3, [pc, #408]	; (8002784 <spi_cmd_process_call+0x2b0>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	3301      	adds	r3, #1
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ff0b 	bl	800240c <U8A2U32>
 80025f6:	4603      	mov	r3, r0
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fe fdc3 	bl	8001184 <W25qxx_EraseSector>
						spi_cmd_data.data[0]=0xff;//失败命令的返回
						spi_cmd_data.length=0x01;

				}

			break;
 80025fe:	e253      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
						spi_cmd_data.data[0]=0xff;//失败命令的返回
 8002600:	4b60      	ldr	r3, [pc, #384]	; (8002784 <spi_cmd_process_call+0x2b0>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	22ff      	movs	r2, #255	; 0xff
 8002606:	701a      	strb	r2, [r3, #0]
						spi_cmd_data.length=0x01;
 8002608:	4b5e      	ldr	r3, [pc, #376]	; (8002784 <spi_cmd_process_call+0x2b0>)
 800260a:	2201      	movs	r2, #1
 800260c:	601a      	str	r2, [r3, #0]
			break;
 800260e:	e24b      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
		case 4://4号命令，W25qxx_EraseBlock，擦除块，，前四字节为块地址（小端模式）
			if(spi_cmd_data.length>=5)
 8002610:	4b5c      	ldr	r3, [pc, #368]	; (8002784 <spi_cmd_process_call+0x2b0>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2b04      	cmp	r3, #4
 8002616:	d90a      	bls.n	800262e <spi_cmd_process_call+0x15a>
				W25qxx_EraseBlock(U8A2U32(&(spi_cmd_data.data[1])));
 8002618:	4b5a      	ldr	r3, [pc, #360]	; (8002784 <spi_cmd_process_call+0x2b0>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	3301      	adds	r3, #1
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff fef4 	bl	800240c <U8A2U32>
 8002624:	4603      	mov	r3, r0
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe fe00 	bl	800122c <W25qxx_EraseBlock>
					spi_cmd_data.data[0]=0xff;//失败命令的返回
					spi_cmd_data.length=0x01;

				}

			break;
 800262c:	e23c      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
					spi_cmd_data.data[0]=0xff;//失败命令的返回
 800262e:	4b55      	ldr	r3, [pc, #340]	; (8002784 <spi_cmd_process_call+0x2b0>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	22ff      	movs	r2, #255	; 0xff
 8002634:	701a      	strb	r2, [r3, #0]
					spi_cmd_data.length=0x01;
 8002636:	4b53      	ldr	r3, [pc, #332]	; (8002784 <spi_cmd_process_call+0x2b0>)
 8002638:	2201      	movs	r2, #1
 800263a:	601a      	str	r2, [r3, #0]
			break;
 800263c:	e234      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
		case 5://5号命令，W25qxx_IsEmptyPage，检查页是否为空,地址(4字节)+偏移(4字节)+数量(4字节)，均为小端模式
			if(!(spi_cmd_data.length>=13 && W25qxx_IsEmptyPage(U8A2U32(&(spi_cmd_data.data[1])),U8A2U32(&(spi_cmd_data.data[5])),U8A2U32(&(spi_cmd_data.data[9])))))
 800263e:	4b51      	ldr	r3, [pc, #324]	; (8002784 <spi_cmd_process_call+0x2b0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2b0c      	cmp	r3, #12
 8002644:	d920      	bls.n	8002688 <spi_cmd_process_call+0x1b4>
 8002646:	4b4f      	ldr	r3, [pc, #316]	; (8002784 <spi_cmd_process_call+0x2b0>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	3301      	adds	r3, #1
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fedd 	bl	800240c <U8A2U32>
 8002652:	4604      	mov	r4, r0
 8002654:	4b4b      	ldr	r3, [pc, #300]	; (8002784 <spi_cmd_process_call+0x2b0>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	3305      	adds	r3, #5
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff fed6 	bl	800240c <U8A2U32>
 8002660:	4605      	mov	r5, r0
 8002662:	4b48      	ldr	r3, [pc, #288]	; (8002784 <spi_cmd_process_call+0x2b0>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	3309      	adds	r3, #9
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fecf 	bl	800240c <U8A2U32>
 800266e:	4603      	mov	r3, r0
 8002670:	461a      	mov	r2, r3
 8002672:	4629      	mov	r1, r5
 8002674:	4620      	mov	r0, r4
 8002676:	f7fe fe57 	bl	8001328 <W25qxx_IsEmptyPage>
 800267a:	4603      	mov	r3, r0
 800267c:	f083 0301 	eor.w	r3, r3, #1
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 820b 	beq.w	8002a9e <spi_cmd_process_call+0x5ca>
			{
					spi_cmd_data.data[0]=0xff;//失败命令的返回
 8002688:	4b3e      	ldr	r3, [pc, #248]	; (8002784 <spi_cmd_process_call+0x2b0>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	22ff      	movs	r2, #255	; 0xff
 800268e:	701a      	strb	r2, [r3, #0]
					spi_cmd_data.length=0x01;
 8002690:	4b3c      	ldr	r3, [pc, #240]	; (8002784 <spi_cmd_process_call+0x2b0>)
 8002692:	2201      	movs	r2, #1
 8002694:	601a      	str	r2, [r3, #0]
			}

			break;
 8002696:	e202      	b.n	8002a9e <spi_cmd_process_call+0x5ca>
		case 6://6号命令，W25qxx_IsEmptySector,检查扇区是否为空,地址(4字节)+偏移(4字节)+数量(4字节)，均为小端模式
			if(!(spi_cmd_data.length>=13 && W25qxx_IsEmptySector(U8A2U32(&(spi_cmd_data.data[1])),U8A2U32(&(spi_cmd_data.data[5])),U8A2U32(&(spi_cmd_data.data[9])))))
 8002698:	4b3a      	ldr	r3, [pc, #232]	; (8002784 <spi_cmd_process_call+0x2b0>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b0c      	cmp	r3, #12
 800269e:	d920      	bls.n	80026e2 <spi_cmd_process_call+0x20e>
 80026a0:	4b38      	ldr	r3, [pc, #224]	; (8002784 <spi_cmd_process_call+0x2b0>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	3301      	adds	r3, #1
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff feb0 	bl	800240c <U8A2U32>
 80026ac:	4604      	mov	r4, r0
 80026ae:	4b35      	ldr	r3, [pc, #212]	; (8002784 <spi_cmd_process_call+0x2b0>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	3305      	adds	r3, #5
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fea9 	bl	800240c <U8A2U32>
 80026ba:	4605      	mov	r5, r0
 80026bc:	4b31      	ldr	r3, [pc, #196]	; (8002784 <spi_cmd_process_call+0x2b0>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	3309      	adds	r3, #9
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff fea2 	bl	800240c <U8A2U32>
 80026c8:	4603      	mov	r3, r0
 80026ca:	461a      	mov	r2, r3
 80026cc:	4629      	mov	r1, r5
 80026ce:	4620      	mov	r0, r4
 80026d0:	f7fe ff16 	bl	8001500 <W25qxx_IsEmptySector>
 80026d4:	4603      	mov	r3, r0
 80026d6:	f083 0301 	eor.w	r3, r3, #1
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 81e0 	beq.w	8002aa2 <spi_cmd_process_call+0x5ce>
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 80026e2:	4b28      	ldr	r3, [pc, #160]	; (8002784 <spi_cmd_process_call+0x2b0>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	22ff      	movs	r2, #255	; 0xff
 80026e8:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 80026ea:	4b26      	ldr	r3, [pc, #152]	; (8002784 <spi_cmd_process_call+0x2b0>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	601a      	str	r2, [r3, #0]
			}

			break;
 80026f0:	e1d7      	b.n	8002aa2 <spi_cmd_process_call+0x5ce>
		case 7://7号命令，W25qxx_IsEmptyBlock，检查块是否为空,地址(4字节)+偏移(4字节)+数量(4字节)，均为小端模式
			if(!(spi_cmd_data.length>=13 && W25qxx_IsEmptyBlock(U8A2U32(&(spi_cmd_data.data[1])),U8A2U32(&(spi_cmd_data.data[5])),U8A2U32(&(spi_cmd_data.data[9])))))
 80026f2:	4b24      	ldr	r3, [pc, #144]	; (8002784 <spi_cmd_process_call+0x2b0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b0c      	cmp	r3, #12
 80026f8:	d920      	bls.n	800273c <spi_cmd_process_call+0x268>
 80026fa:	4b22      	ldr	r3, [pc, #136]	; (8002784 <spi_cmd_process_call+0x2b0>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	3301      	adds	r3, #1
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff fe83 	bl	800240c <U8A2U32>
 8002706:	4604      	mov	r4, r0
 8002708:	4b1e      	ldr	r3, [pc, #120]	; (8002784 <spi_cmd_process_call+0x2b0>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	3305      	adds	r3, #5
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff fe7c 	bl	800240c <U8A2U32>
 8002714:	4605      	mov	r5, r0
 8002716:	4b1b      	ldr	r3, [pc, #108]	; (8002784 <spi_cmd_process_call+0x2b0>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	3309      	adds	r3, #9
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff fe75 	bl	800240c <U8A2U32>
 8002722:	4603      	mov	r3, r0
 8002724:	461a      	mov	r2, r3
 8002726:	4629      	mov	r1, r5
 8002728:	4620      	mov	r0, r4
 800272a:	f7fe ffcb 	bl	80016c4 <W25qxx_IsEmptyBlock>
 800272e:	4603      	mov	r3, r0
 8002730:	f083 0301 	eor.w	r3, r3, #1
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 81b5 	beq.w	8002aa6 <spi_cmd_process_call+0x5d2>
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 800273c:	4b11      	ldr	r3, [pc, #68]	; (8002784 <spi_cmd_process_call+0x2b0>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	22ff      	movs	r2, #255	; 0xff
 8002742:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 8002744:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <spi_cmd_process_call+0x2b0>)
 8002746:	2201      	movs	r2, #1
 8002748:	601a      	str	r2, [r3, #0]
			}

			break;
 800274a:	e1ac      	b.n	8002aa6 <spi_cmd_process_call+0x5d2>
		case 8://8号命令，W25qxx_WriteByte，写入1字节数据(需要先手动擦除)，地址(4字节)+数据(1字节)
			if(spi_cmd_data.length>=6)
 800274c:	4b0d      	ldr	r3, [pc, #52]	; (8002784 <spi_cmd_process_call+0x2b0>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b05      	cmp	r3, #5
 8002752:	d90f      	bls.n	8002774 <spi_cmd_process_call+0x2a0>
			{
				W25qxx_WriteByte(spi_cmd_data.data[5],U8A2U32(&(spi_cmd_data.data[1])));
 8002754:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <spi_cmd_process_call+0x2b0>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	3305      	adds	r3, #5
 800275a:	781c      	ldrb	r4, [r3, #0]
 800275c:	4b09      	ldr	r3, [pc, #36]	; (8002784 <spi_cmd_process_call+0x2b0>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	3301      	adds	r3, #1
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff fe52 	bl	800240c <U8A2U32>
 8002768:	4603      	mov	r3, r0
 800276a:	4619      	mov	r1, r3
 800276c:	4620      	mov	r0, r4
 800276e:	f7ff f88b 	bl	8001888 <W25qxx_WriteByte>
			else
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
				spi_cmd_data.length=0x01;
			}
			break;
 8002772:	e199      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 8002774:	4b03      	ldr	r3, [pc, #12]	; (8002784 <spi_cmd_process_call+0x2b0>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	22ff      	movs	r2, #255	; 0xff
 800277a:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 800277c:	4b01      	ldr	r3, [pc, #4]	; (8002784 <spi_cmd_process_call+0x2b0>)
 800277e:	2201      	movs	r2, #1
 8002780:	601a      	str	r2, [r3, #0]
			break;
 8002782:	e191      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
 8002784:	2000001c 	.word	0x2000001c
 8002788:	200010a4 	.word	0x200010a4
 800278c:	200007d0 	.word	0x200007d0
		case 9://9号命令，W25qxx_WritePage,按页写入数据，地址(4字节)+偏移(4字节)+数据(不定字节)，均为小端模式
			if(spi_cmd_data.length>=10)
 8002790:	4ba2      	ldr	r3, [pc, #648]	; (8002a1c <spi_cmd_process_call+0x548>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b09      	cmp	r3, #9
 8002796:	d919      	bls.n	80027cc <spi_cmd_process_call+0x2f8>
			{
				W25qxx_WritePage(&(spi_cmd_data.data[9]),U8A2U32(&(spi_cmd_data.data[1])),U8A2U32(&(spi_cmd_data.data[5])),spi_cmd_data.length-9);
 8002798:	4ba0      	ldr	r3, [pc, #640]	; (8002a1c <spi_cmd_process_call+0x548>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f103 0409 	add.w	r4, r3, #9
 80027a0:	4b9e      	ldr	r3, [pc, #632]	; (8002a1c <spi_cmd_process_call+0x548>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	3301      	adds	r3, #1
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fe30 	bl	800240c <U8A2U32>
 80027ac:	4605      	mov	r5, r0
 80027ae:	4b9b      	ldr	r3, [pc, #620]	; (8002a1c <spi_cmd_process_call+0x548>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	3305      	adds	r3, #5
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fe29 	bl	800240c <U8A2U32>
 80027ba:	4602      	mov	r2, r0
 80027bc:	4b97      	ldr	r3, [pc, #604]	; (8002a1c <spi_cmd_process_call+0x548>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	3b09      	subs	r3, #9
 80027c2:	4629      	mov	r1, r5
 80027c4:	4620      	mov	r0, r4
 80027c6:	f7ff f8b1 	bl	800192c <W25qxx_WritePage>
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
				spi_cmd_data.length=0x01;
			}

			break;
 80027ca:	e16d      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 80027cc:	4b93      	ldr	r3, [pc, #588]	; (8002a1c <spi_cmd_process_call+0x548>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	22ff      	movs	r2, #255	; 0xff
 80027d2:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 80027d4:	4b91      	ldr	r3, [pc, #580]	; (8002a1c <spi_cmd_process_call+0x548>)
 80027d6:	2201      	movs	r2, #1
 80027d8:	601a      	str	r2, [r3, #0]
			break;
 80027da:	e165      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
		case 10://10号命令,W25qxx_WriteSector,按扇区写入数据，地址(4字节)+偏移(4字节)+数据(不定字节)，均为小端模式
			if(spi_cmd_data.length>=10)
 80027dc:	4b8f      	ldr	r3, [pc, #572]	; (8002a1c <spi_cmd_process_call+0x548>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b09      	cmp	r3, #9
 80027e2:	d919      	bls.n	8002818 <spi_cmd_process_call+0x344>
			{
				W25qxx_WriteSector(&(spi_cmd_data.data[9]),U8A2U32(&(spi_cmd_data.data[1])),U8A2U32(&(spi_cmd_data.data[5])),spi_cmd_data.length-9);
 80027e4:	4b8d      	ldr	r3, [pc, #564]	; (8002a1c <spi_cmd_process_call+0x548>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f103 0409 	add.w	r4, r3, #9
 80027ec:	4b8b      	ldr	r3, [pc, #556]	; (8002a1c <spi_cmd_process_call+0x548>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	3301      	adds	r3, #1
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff fe0a 	bl	800240c <U8A2U32>
 80027f8:	4605      	mov	r5, r0
 80027fa:	4b88      	ldr	r3, [pc, #544]	; (8002a1c <spi_cmd_process_call+0x548>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	3305      	adds	r3, #5
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff fe03 	bl	800240c <U8A2U32>
 8002806:	4602      	mov	r2, r0
 8002808:	4b84      	ldr	r3, [pc, #528]	; (8002a1c <spi_cmd_process_call+0x548>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	3b09      	subs	r3, #9
 800280e:	4629      	mov	r1, r5
 8002810:	4620      	mov	r0, r4
 8002812:	f7ff f90b 	bl	8001a2c <W25qxx_WriteSector>
			else
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
				spi_cmd_data.length=0x01;
			}
			break;
 8002816:	e147      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 8002818:	4b80      	ldr	r3, [pc, #512]	; (8002a1c <spi_cmd_process_call+0x548>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	22ff      	movs	r2, #255	; 0xff
 800281e:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 8002820:	4b7e      	ldr	r3, [pc, #504]	; (8002a1c <spi_cmd_process_call+0x548>)
 8002822:	2201      	movs	r2, #1
 8002824:	601a      	str	r2, [r3, #0]
			break;
 8002826:	e13f      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
		case 11://11号命令,W25qxx_WriteBlock,按块写入数据，地址(4字节)+偏移(4字节)+数据(不定字节)，均为小端模式
			if(spi_cmd_data.length>=10)
 8002828:	4b7c      	ldr	r3, [pc, #496]	; (8002a1c <spi_cmd_process_call+0x548>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b09      	cmp	r3, #9
 800282e:	d919      	bls.n	8002864 <spi_cmd_process_call+0x390>
			{
				W25qxx_WriteBlock(&(spi_cmd_data.data[9]),U8A2U32(&(spi_cmd_data.data[1])),U8A2U32(&(spi_cmd_data.data[5])),spi_cmd_data.length-9);
 8002830:	4b7a      	ldr	r3, [pc, #488]	; (8002a1c <spi_cmd_process_call+0x548>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f103 0409 	add.w	r4, r3, #9
 8002838:	4b78      	ldr	r3, [pc, #480]	; (8002a1c <spi_cmd_process_call+0x548>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	3301      	adds	r3, #1
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff fde4 	bl	800240c <U8A2U32>
 8002844:	4605      	mov	r5, r0
 8002846:	4b75      	ldr	r3, [pc, #468]	; (8002a1c <spi_cmd_process_call+0x548>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	3305      	adds	r3, #5
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fddd 	bl	800240c <U8A2U32>
 8002852:	4602      	mov	r2, r0
 8002854:	4b71      	ldr	r3, [pc, #452]	; (8002a1c <spi_cmd_process_call+0x548>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	3b09      	subs	r3, #9
 800285a:	4629      	mov	r1, r5
 800285c:	4620      	mov	r0, r4
 800285e:	f7ff f945 	bl	8001aec <W25qxx_WriteBlock>
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
				spi_cmd_data.length=0x01;
			}

			break;
 8002862:	e121      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 8002864:	4b6d      	ldr	r3, [pc, #436]	; (8002a1c <spi_cmd_process_call+0x548>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	22ff      	movs	r2, #255	; 0xff
 800286a:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 800286c:	4b6b      	ldr	r3, [pc, #428]	; (8002a1c <spi_cmd_process_call+0x548>)
 800286e:	2201      	movs	r2, #1
 8002870:	601a      	str	r2, [r3, #0]
			break;
 8002872:	e119      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
		case 12://12号命令，W25qxx_ReadByte，读取1字节数据，地址(4字节)
			if(spi_cmd_data.length>=5)
 8002874:	4b69      	ldr	r3, [pc, #420]	; (8002a1c <spi_cmd_process_call+0x548>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2b04      	cmp	r3, #4
 800287a:	d911      	bls.n	80028a0 <spi_cmd_process_call+0x3cc>
			{
				W25qxx_ReadByte(&spi_cmd_data.data[5],U8A2U32(&spi_cmd_data.data[1]));
 800287c:	4b67      	ldr	r3, [pc, #412]	; (8002a1c <spi_cmd_process_call+0x548>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	1d5c      	adds	r4, r3, #5
 8002882:	4b66      	ldr	r3, [pc, #408]	; (8002a1c <spi_cmd_process_call+0x548>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	3301      	adds	r3, #1
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff fdbf 	bl	800240c <U8A2U32>
 800288e:	4603      	mov	r3, r0
 8002890:	4619      	mov	r1, r3
 8002892:	4620      	mov	r0, r4
 8002894:	f7ff f98a 	bl	8001bac <W25qxx_ReadByte>
				spi_cmd_data.length=6;
 8002898:	4b60      	ldr	r3, [pc, #384]	; (8002a1c <spi_cmd_process_call+0x548>)
 800289a:	2206      	movs	r2, #6
 800289c:	601a      	str	r2, [r3, #0]
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
				spi_cmd_data.length=0x01;
			}

			break;
 800289e:	e103      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 80028a0:	4b5e      	ldr	r3, [pc, #376]	; (8002a1c <spi_cmd_process_call+0x548>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	22ff      	movs	r2, #255	; 0xff
 80028a6:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 80028a8:	4b5c      	ldr	r3, [pc, #368]	; (8002a1c <spi_cmd_process_call+0x548>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	601a      	str	r2, [r3, #0]
			break;
 80028ae:	e0fb      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
		case 13://13号命令，W25qxx_ReadBytes，读多字节数据，地址(4字节)+数量(4字节)
			if(spi_cmd_data.length>=9 && U8A2U32(&spi_cmd_data.data[5]) <= 512)//1次最多读512字节
 80028b0:	4b5a      	ldr	r3, [pc, #360]	; (8002a1c <spi_cmd_process_call+0x548>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d92b      	bls.n	8002910 <spi_cmd_process_call+0x43c>
 80028b8:	4b58      	ldr	r3, [pc, #352]	; (8002a1c <spi_cmd_process_call+0x548>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	3305      	adds	r3, #5
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff fda4 	bl	800240c <U8A2U32>
 80028c4:	4603      	mov	r3, r0
 80028c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028ca:	d821      	bhi.n	8002910 <spi_cmd_process_call+0x43c>
			{
				W25qxx_ReadBytes(&spi_cmd_data.data[9],U8A2U32(&spi_cmd_data.data[1]),U8A2U32(&spi_cmd_data.data[5]));
 80028cc:	4b53      	ldr	r3, [pc, #332]	; (8002a1c <spi_cmd_process_call+0x548>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f103 0409 	add.w	r4, r3, #9
 80028d4:	4b51      	ldr	r3, [pc, #324]	; (8002a1c <spi_cmd_process_call+0x548>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	3301      	adds	r3, #1
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff fd96 	bl	800240c <U8A2U32>
 80028e0:	4605      	mov	r5, r0
 80028e2:	4b4e      	ldr	r3, [pc, #312]	; (8002a1c <spi_cmd_process_call+0x548>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	3305      	adds	r3, #5
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff fd8f 	bl	800240c <U8A2U32>
 80028ee:	4603      	mov	r3, r0
 80028f0:	461a      	mov	r2, r3
 80028f2:	4629      	mov	r1, r5
 80028f4:	4620      	mov	r0, r4
 80028f6:	f7ff f9a9 	bl	8001c4c <W25qxx_ReadBytes>
				spi_cmd_data.length=9+U8A2U32(&spi_cmd_data.data[5]);
 80028fa:	4b48      	ldr	r3, [pc, #288]	; (8002a1c <spi_cmd_process_call+0x548>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	3305      	adds	r3, #5
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff fd83 	bl	800240c <U8A2U32>
 8002906:	4603      	mov	r3, r0
 8002908:	3309      	adds	r3, #9
 800290a:	4a44      	ldr	r2, [pc, #272]	; (8002a1c <spi_cmd_process_call+0x548>)
 800290c:	6013      	str	r3, [r2, #0]
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
				spi_cmd_data.length=0x01;
			}

			break;
 800290e:	e0cb      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 8002910:	4b42      	ldr	r3, [pc, #264]	; (8002a1c <spi_cmd_process_call+0x548>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	22ff      	movs	r2, #255	; 0xff
 8002916:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 8002918:	4b40      	ldr	r3, [pc, #256]	; (8002a1c <spi_cmd_process_call+0x548>)
 800291a:	2201      	movs	r2, #1
 800291c:	601a      	str	r2, [r3, #0]
			break;
 800291e:	e0c3      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
		case 14://14号命令，W25qxx_ReadPage，按页读多字节数据，地址(4字节)+偏移(4字节)+数量(4字节),数量需要大于0
			if(spi_cmd_data.length>=13 && U8A2U32(&spi_cmd_data.data[9]) <= 512)//1次最多读512字节
 8002920:	4b3e      	ldr	r3, [pc, #248]	; (8002a1c <spi_cmd_process_call+0x548>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b0c      	cmp	r3, #12
 8002926:	d932      	bls.n	800298e <spi_cmd_process_call+0x4ba>
 8002928:	4b3c      	ldr	r3, [pc, #240]	; (8002a1c <spi_cmd_process_call+0x548>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	3309      	adds	r3, #9
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff fd6c 	bl	800240c <U8A2U32>
 8002934:	4603      	mov	r3, r0
 8002936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800293a:	d828      	bhi.n	800298e <spi_cmd_process_call+0x4ba>
			{
				W25qxx_ReadPage(&spi_cmd_data.data[13],U8A2U32(&spi_cmd_data.data[1]),U8A2U32(&spi_cmd_data.data[5]),U8A2U32(&spi_cmd_data.data[9]));
 800293c:	4b37      	ldr	r3, [pc, #220]	; (8002a1c <spi_cmd_process_call+0x548>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f103 040d 	add.w	r4, r3, #13
 8002944:	4b35      	ldr	r3, [pc, #212]	; (8002a1c <spi_cmd_process_call+0x548>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	3301      	adds	r3, #1
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff fd5e 	bl	800240c <U8A2U32>
 8002950:	4605      	mov	r5, r0
 8002952:	4b32      	ldr	r3, [pc, #200]	; (8002a1c <spi_cmd_process_call+0x548>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	3305      	adds	r3, #5
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff fd57 	bl	800240c <U8A2U32>
 800295e:	4606      	mov	r6, r0
 8002960:	4b2e      	ldr	r3, [pc, #184]	; (8002a1c <spi_cmd_process_call+0x548>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	3309      	adds	r3, #9
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff fd50 	bl	800240c <U8A2U32>
 800296c:	4603      	mov	r3, r0
 800296e:	4632      	mov	r2, r6
 8002970:	4629      	mov	r1, r5
 8002972:	4620      	mov	r0, r4
 8002974:	f7ff f9c2 	bl	8001cfc <W25qxx_ReadPage>
				spi_cmd_data.length=13+U8A2U32(&spi_cmd_data.data[9]);
 8002978:	4b28      	ldr	r3, [pc, #160]	; (8002a1c <spi_cmd_process_call+0x548>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	3309      	adds	r3, #9
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff fd44 	bl	800240c <U8A2U32>
 8002984:	4603      	mov	r3, r0
 8002986:	330d      	adds	r3, #13
 8002988:	4a24      	ldr	r2, [pc, #144]	; (8002a1c <spi_cmd_process_call+0x548>)
 800298a:	6013      	str	r3, [r2, #0]
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
				spi_cmd_data.length=0x01;
			}

			break;
 800298c:	e08c      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 800298e:	4b23      	ldr	r3, [pc, #140]	; (8002a1c <spi_cmd_process_call+0x548>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	22ff      	movs	r2, #255	; 0xff
 8002994:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 8002996:	4b21      	ldr	r3, [pc, #132]	; (8002a1c <spi_cmd_process_call+0x548>)
 8002998:	2201      	movs	r2, #1
 800299a:	601a      	str	r2, [r3, #0]
			break;
 800299c:	e084      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>

		case 15://15号命令，W25qxx_ReadSector，按页读多字节数据，地址(4字节)+偏移(4字节)+数量(4字节),数量需要大于0
			if(spi_cmd_data.length>=13 && U8A2U32(&spi_cmd_data.data[9]) <= 512)//1次最多读512字节
 800299e:	4b1f      	ldr	r3, [pc, #124]	; (8002a1c <spi_cmd_process_call+0x548>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2b0c      	cmp	r3, #12
 80029a4:	d932      	bls.n	8002a0c <spi_cmd_process_call+0x538>
 80029a6:	4b1d      	ldr	r3, [pc, #116]	; (8002a1c <spi_cmd_process_call+0x548>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	3309      	adds	r3, #9
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff fd2d 	bl	800240c <U8A2U32>
 80029b2:	4603      	mov	r3, r0
 80029b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029b8:	d828      	bhi.n	8002a0c <spi_cmd_process_call+0x538>
			{
				W25qxx_ReadSector(&spi_cmd_data.data[13],U8A2U32(&spi_cmd_data.data[1]),U8A2U32(&spi_cmd_data.data[5]),U8A2U32(&spi_cmd_data.data[9]));
 80029ba:	4b18      	ldr	r3, [pc, #96]	; (8002a1c <spi_cmd_process_call+0x548>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f103 040d 	add.w	r4, r3, #13
 80029c2:	4b16      	ldr	r3, [pc, #88]	; (8002a1c <spi_cmd_process_call+0x548>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	3301      	adds	r3, #1
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff fd1f 	bl	800240c <U8A2U32>
 80029ce:	4605      	mov	r5, r0
 80029d0:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <spi_cmd_process_call+0x548>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	3305      	adds	r3, #5
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff fd18 	bl	800240c <U8A2U32>
 80029dc:	4606      	mov	r6, r0
 80029de:	4b0f      	ldr	r3, [pc, #60]	; (8002a1c <spi_cmd_process_call+0x548>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	3309      	adds	r3, #9
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fd11 	bl	800240c <U8A2U32>
 80029ea:	4603      	mov	r3, r0
 80029ec:	4632      	mov	r2, r6
 80029ee:	4629      	mov	r1, r5
 80029f0:	4620      	mov	r0, r4
 80029f2:	f7ff f9fd 	bl	8001df0 <W25qxx_ReadSector>
				spi_cmd_data.length=13+U8A2U32(&spi_cmd_data.data[9]);
 80029f6:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <spi_cmd_process_call+0x548>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	3309      	adds	r3, #9
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff fd05 	bl	800240c <U8A2U32>
 8002a02:	4603      	mov	r3, r0
 8002a04:	330d      	adds	r3, #13
 8002a06:	4a05      	ldr	r2, [pc, #20]	; (8002a1c <spi_cmd_process_call+0x548>)
 8002a08:	6013      	str	r3, [r2, #0]
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
				spi_cmd_data.length=0x01;
			}

			break;
 8002a0a:	e04d      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 8002a0c:	4b03      	ldr	r3, [pc, #12]	; (8002a1c <spi_cmd_process_call+0x548>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	22ff      	movs	r2, #255	; 0xff
 8002a12:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 8002a14:	4b01      	ldr	r3, [pc, #4]	; (8002a1c <spi_cmd_process_call+0x548>)
 8002a16:	2201      	movs	r2, #1
 8002a18:	601a      	str	r2, [r3, #0]
			break;
 8002a1a:	e045      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
 8002a1c:	2000001c 	.word	0x2000001c

		case 16://16号命令，W25qxx_ReadBlock，按页读多字节数据，地址(4字节)+偏移(4字节)+数量(4字节),数量需要大于0
			if(spi_cmd_data.length>=13 && U8A2U32(&spi_cmd_data.data[9]) <= 512)
 8002a20:	4b28      	ldr	r3, [pc, #160]	; (8002ac4 <spi_cmd_process_call+0x5f0>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b0c      	cmp	r3, #12
 8002a26:	d932      	bls.n	8002a8e <spi_cmd_process_call+0x5ba>
 8002a28:	4b26      	ldr	r3, [pc, #152]	; (8002ac4 <spi_cmd_process_call+0x5f0>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	3309      	adds	r3, #9
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff fcec 	bl	800240c <U8A2U32>
 8002a34:	4603      	mov	r3, r0
 8002a36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a3a:	d828      	bhi.n	8002a8e <spi_cmd_process_call+0x5ba>
			{
				W25qxx_ReadBlock(&spi_cmd_data.data[13],U8A2U32(&spi_cmd_data.data[1]),U8A2U32(&spi_cmd_data.data[5]),U8A2U32(&spi_cmd_data.data[9]));
 8002a3c:	4b21      	ldr	r3, [pc, #132]	; (8002ac4 <spi_cmd_process_call+0x5f0>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f103 040d 	add.w	r4, r3, #13
 8002a44:	4b1f      	ldr	r3, [pc, #124]	; (8002ac4 <spi_cmd_process_call+0x5f0>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff fcde 	bl	800240c <U8A2U32>
 8002a50:	4605      	mov	r5, r0
 8002a52:	4b1c      	ldr	r3, [pc, #112]	; (8002ac4 <spi_cmd_process_call+0x5f0>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	3305      	adds	r3, #5
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff fcd7 	bl	800240c <U8A2U32>
 8002a5e:	4606      	mov	r6, r0
 8002a60:	4b18      	ldr	r3, [pc, #96]	; (8002ac4 <spi_cmd_process_call+0x5f0>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	3309      	adds	r3, #9
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff fcd0 	bl	800240c <U8A2U32>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	4632      	mov	r2, r6
 8002a70:	4629      	mov	r1, r5
 8002a72:	4620      	mov	r0, r4
 8002a74:	f7ff fa1c 	bl	8001eb0 <W25qxx_ReadBlock>
				spi_cmd_data.length=13+U8A2U32(&spi_cmd_data.data[9]);
 8002a78:	4b12      	ldr	r3, [pc, #72]	; (8002ac4 <spi_cmd_process_call+0x5f0>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	3309      	adds	r3, #9
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff fcc4 	bl	800240c <U8A2U32>
 8002a84:	4603      	mov	r3, r0
 8002a86:	330d      	adds	r3, #13
 8002a88:	4a0e      	ldr	r2, [pc, #56]	; (8002ac4 <spi_cmd_process_call+0x5f0>)
 8002a8a:	6013      	str	r3, [r2, #0]
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
				spi_cmd_data.length=0x01;
			}

			break;
 8002a8c:	e00c      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 8002a8e:	4b0d      	ldr	r3, [pc, #52]	; (8002ac4 <spi_cmd_process_call+0x5f0>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	22ff      	movs	r2, #255	; 0xff
 8002a94:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 8002a96:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <spi_cmd_process_call+0x5f0>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]
			break;
 8002a9c:	e004      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
			break;
 8002a9e:	bf00      	nop
 8002aa0:	e002      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
			break;
 8002aa2:	bf00      	nop
 8002aa4:	e000      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
			break;
 8002aa6:	bf00      	nop
		}

		CDC_Transmit_FS(spi_cmd_data.data,spi_cmd_data.length);
 8002aa8:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <spi_cmd_process_call+0x5f0>)
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <spi_cmd_process_call+0x5f0>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	f008 fd53 	bl	800b560 <CDC_Transmit_FS>
		spi_cmd_data.IsUpdate=0;
 8002aba:	4b02      	ldr	r3, [pc, #8]	; (8002ac4 <spi_cmd_process_call+0x5f0>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	711a      	strb	r2, [r3, #4]
	}
}
 8002ac0:	bf00      	nop
 8002ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ac4:	2000001c 	.word	0x2000001c

08002ac8 <uart_transmit>:

#include "userapp.h"
uint8_t uart_rx_buff[1000];//接收缓冲
//uint8_t uart_tx_buff[1000];//发送缓冲
uint8_t uart_transmit(void * buf,size_t len)//发送数据到串口
{
 8002ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2,buf,len,(uint32_t)(len*(1000.0/linecode.Rate))+1000);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	b29c      	uxth	r4, r3
 8002ad6:	6838      	ldr	r0, [r7, #0]
 8002ad8:	f7fd fc7a 	bl	80003d0 <__aeabi_ui2d>
 8002adc:	4605      	mov	r5, r0
 8002ade:	460e      	mov	r6, r1
 8002ae0:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <uart_transmit+0x64>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fd fc73 	bl	80003d0 <__aeabi_ui2d>
 8002aea:	4602      	mov	r2, r0
 8002aec:	460b      	mov	r3, r1
 8002aee:	f04f 0000 	mov.w	r0, #0
 8002af2:	490f      	ldr	r1, [pc, #60]	; (8002b30 <uart_transmit+0x68>)
 8002af4:	f7fd fe10 	bl	8000718 <__aeabi_ddiv>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4628      	mov	r0, r5
 8002afe:	4631      	mov	r1, r6
 8002b00:	f7fd fce0 	bl	80004c4 <__aeabi_dmul>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	4610      	mov	r0, r2
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	f7fd feec 	bl	80008e8 <__aeabi_d2uiz>
 8002b10:	4603      	mov	r3, r0
 8002b12:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002b16:	4622      	mov	r2, r4
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	4806      	ldr	r0, [pc, #24]	; (8002b34 <uart_transmit+0x6c>)
 8002b1c:	f005 fa23 	bl	8007f66 <HAL_UART_Transmit>
	return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000004 	.word	0x20000004
 8002b30:	408f4000 	.word	0x408f4000
 8002b34:	200010fc 	.word	0x200010fc

08002b38 <uart_start_receive>:

void uart_start_receive()
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
	if(huart2.gState !=HAL_UART_STATE_READY && huart2.gState != HAL_UART_STATE_BUSY_TX)
 8002b3c:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <uart_start_receive+0x4c>)
 8002b3e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b20      	cmp	r3, #32
 8002b46:	d008      	beq.n	8002b5a <uart_start_receive+0x22>
 8002b48:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <uart_start_receive+0x4c>)
 8002b4a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b21      	cmp	r3, #33	; 0x21
 8002b52:	d002      	beq.n	8002b5a <uart_start_receive+0x22>
			HAL_UART_DMAStop(&huart2);
 8002b54:	480b      	ldr	r0, [pc, #44]	; (8002b84 <uart_start_receive+0x4c>)
 8002b56:	f005 fb1f 	bl	8008198 <HAL_UART_DMAStop>
	if(huart2.gState == HAL_UART_STATE_BUSY_TX)
 8002b5a:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <uart_start_receive+0x4c>)
 8002b5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b21      	cmp	r3, #33	; 0x21
 8002b64:	d106      	bne.n	8002b74 <uart_start_receive+0x3c>
			while(huart2.gState!=HAL_UART_STATE_READY);//等待发送完成
 8002b66:	bf00      	nop
 8002b68:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <uart_start_receive+0x4c>)
 8002b6a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b20      	cmp	r3, #32
 8002b72:	d1f9      	bne.n	8002b68 <uart_start_receive+0x30>
	HAL_UART_Receive_DMA(&huart2,uart_rx_buff,sizeof(uart_rx_buff));
 8002b74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b78:	4903      	ldr	r1, [pc, #12]	; (8002b88 <uart_start_receive+0x50>)
 8002b7a:	4802      	ldr	r0, [pc, #8]	; (8002b84 <uart_start_receive+0x4c>)
 8002b7c:	f005 fa8c 	bl	8008098 <HAL_UART_Receive_DMA>
}
 8002b80:	bf00      	nop
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	200010fc 	.word	0x200010fc
 8002b88:	20000be0 	.word	0x20000be0

08002b8c <uart_finish_receive>:

void uart_finish_receive()
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
	if(huart2.gState !=HAL_UART_STATE_READY && huart2.gState != HAL_UART_STATE_BUSY_TX)
 8002b92:	4b1a      	ldr	r3, [pc, #104]	; (8002bfc <uart_finish_receive+0x70>)
 8002b94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b20      	cmp	r3, #32
 8002b9c:	d008      	beq.n	8002bb0 <uart_finish_receive+0x24>
 8002b9e:	4b17      	ldr	r3, [pc, #92]	; (8002bfc <uart_finish_receive+0x70>)
 8002ba0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b21      	cmp	r3, #33	; 0x21
 8002ba8:	d002      	beq.n	8002bb0 <uart_finish_receive+0x24>
		HAL_UART_DMAStop(&huart2);
 8002baa:	4814      	ldr	r0, [pc, #80]	; (8002bfc <uart_finish_receive+0x70>)
 8002bac:	f005 faf4 	bl	8008198 <HAL_UART_DMAStop>
	if(huart2.gState == HAL_UART_STATE_BUSY_TX)
 8002bb0:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <uart_finish_receive+0x70>)
 8002bb2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b21      	cmp	r3, #33	; 0x21
 8002bba:	d106      	bne.n	8002bca <uart_finish_receive+0x3e>
		while(huart2.gState!=HAL_UART_STATE_READY);//等待发送完成
 8002bbc:	bf00      	nop
 8002bbe:	4b0f      	ldr	r3, [pc, #60]	; (8002bfc <uart_finish_receive+0x70>)
 8002bc0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b20      	cmp	r3, #32
 8002bc8:	d1f9      	bne.n	8002bbe <uart_finish_receive+0x32>
	size_t count=sizeof(uart_rx_buff)-huart2.hdmarx->Instance->CNDTR;
 8002bca:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <uart_finish_receive+0x70>)
 8002bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8002bd6:	607b      	str	r3, [r7, #4]
	 uart_receive_call(uart_rx_buff,count);
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	4809      	ldr	r0, [pc, #36]	; (8002c00 <uart_finish_receive+0x74>)
 8002bdc:	f7ff fb24 	bl	8002228 <uart_receive_call>
	HAL_UART_DMAStop(&huart2);
 8002be0:	4806      	ldr	r0, [pc, #24]	; (8002bfc <uart_finish_receive+0x70>)
 8002be2:	f005 fad9 	bl	8008198 <HAL_UART_DMAStop>
	HAL_UART_Receive_DMA(&huart2,uart_rx_buff,sizeof(uart_rx_buff));
 8002be6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bea:	4905      	ldr	r1, [pc, #20]	; (8002c00 <uart_finish_receive+0x74>)
 8002bec:	4803      	ldr	r0, [pc, #12]	; (8002bfc <uart_finish_receive+0x70>)
 8002bee:	f005 fa53 	bl	8008098 <HAL_UART_Receive_DMA>
}
 8002bf2:	bf00      	nop
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	200010fc 	.word	0x200010fc
 8002c00:	20000be0 	.word	0x20000be0

08002c04 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//DMA接收全满
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
	 UNUSED(huart);
	 uart_finish_receive();
 8002c0c:	f7ff ffbe 	bl	8002b8c <uart_finish_receive>
}
 8002c10:	bf00      	nop
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_UART_RxHalfCpltCallback>:
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)//DMA接收半满
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
	 UNUSED(huart);
	 uart_finish_receive();
 8002c20:	f7ff ffb4 	bl	8002b8c <uart_finish_receive>
}
 8002c24:	bf00      	nop
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c30:	f000 fc0a 	bl	8003448 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c34:	f000 f811 	bl	8002c5a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c38:	f000 f92c 	bl	8002e94 <MX_GPIO_Init>
  MX_DMA_Init();
 8002c3c:	f000 f904 	bl	8002e48 <MX_DMA_Init>
  MX_I2C1_Init();
 8002c40:	f000 f862 	bl	8002d08 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002c44:	f000 f8a0 	bl	8002d88 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002c48:	f000 f8d4 	bl	8002df4 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8002c4c:	f008 fba8 	bl	800b3a0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  init_user_call();
 8002c50:	f7ff f98e 	bl	8001f70 <init_user_call>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_user_call();
 8002c54:	f7ff f99c 	bl	8001f90 <loop_user_call>
 8002c58:	e7fc      	b.n	8002c54 <main+0x28>

08002c5a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b094      	sub	sp, #80	; 0x50
 8002c5e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c64:	2228      	movs	r2, #40	; 0x28
 8002c66:	2100      	movs	r1, #0
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f009 f87a 	bl	800bd62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c6e:	f107 0314 	add.w	r3, r7, #20
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	605a      	str	r2, [r3, #4]
 8002c78:	609a      	str	r2, [r3, #8]
 8002c7a:	60da      	str	r2, [r3, #12]
 8002c7c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c7e:	1d3b      	adds	r3, r7, #4
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c92:	2310      	movs	r3, #16
 8002c94:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c96:	2302      	movs	r3, #2
 8002c98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002c9e:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8002ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ca4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f003 fcfb 	bl	80066a4 <HAL_RCC_OscConfig>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002cb4:	f000 f93e 	bl	8002f34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cb8:	230f      	movs	r3, #15
 8002cba:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002cc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cc8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002cce:	f107 0314 	add.w	r3, r7, #20
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f003 ff65 	bl	8006ba4 <HAL_RCC_ClockConfig>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002ce0:	f000 f928 	bl	8002f34 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002ce4:	2310      	movs	r3, #16
 8002ce6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002ce8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cec:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cee:	1d3b      	adds	r3, r7, #4
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f004 f923 	bl	8006f3c <HAL_RCCEx_PeriphCLKConfig>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002cfc:	f000 f91a 	bl	8002f34 <Error_Handler>
  }
}
 8002d00:	bf00      	nop
 8002d02:	3750      	adds	r7, #80	; 0x50
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  __HAL_RCC_I2C1_CLK_ENABLE();
 8002d0e:	4b1a      	ldr	r3, [pc, #104]	; (8002d78 <MX_I2C1_Init+0x70>)
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	4a19      	ldr	r2, [pc, #100]	; (8002d78 <MX_I2C1_Init+0x70>)
 8002d14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d18:	61d3      	str	r3, [r2, #28]
 8002d1a:	4b17      	ldr	r3, [pc, #92]	; (8002d78 <MX_I2C1_Init+0x70>)
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d22:	607b      	str	r3, [r7, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d26:	4b15      	ldr	r3, [pc, #84]	; (8002d7c <MX_I2C1_Init+0x74>)
 8002d28:	4a15      	ldr	r2, [pc, #84]	; (8002d80 <MX_I2C1_Init+0x78>)
 8002d2a:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002d2c:	4b13      	ldr	r3, [pc, #76]	; (8002d7c <MX_I2C1_Init+0x74>)
 8002d2e:	4a15      	ldr	r2, [pc, #84]	; (8002d84 <MX_I2C1_Init+0x7c>)
 8002d30:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d32:	4b12      	ldr	r3, [pc, #72]	; (8002d7c <MX_I2C1_Init+0x74>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002d38:	4b10      	ldr	r3, [pc, #64]	; (8002d7c <MX_I2C1_Init+0x74>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d3e:	4b0f      	ldr	r3, [pc, #60]	; (8002d7c <MX_I2C1_Init+0x74>)
 8002d40:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d44:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d46:	4b0d      	ldr	r3, [pc, #52]	; (8002d7c <MX_I2C1_Init+0x74>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <MX_I2C1_Init+0x74>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d52:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <MX_I2C1_Init+0x74>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d58:	4b08      	ldr	r3, [pc, #32]	; (8002d7c <MX_I2C1_Init+0x74>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d5e:	4807      	ldr	r0, [pc, #28]	; (8002d7c <MX_I2C1_Init+0x74>)
 8002d60:	f001 f8b6 	bl	8003ed0 <HAL_I2C_Init>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <MX_I2C1_Init+0x66>
  {
    Error_Handler();
 8002d6a:	f000 f8e3 	bl	8002f34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	2000100c 	.word	0x2000100c
 8002d80:	40005400 	.word	0x40005400
 8002d84:	000186a0 	.word	0x000186a0

08002d88 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002d8c:	4b17      	ldr	r3, [pc, #92]	; (8002dec <MX_SPI1_Init+0x64>)
 8002d8e:	4a18      	ldr	r2, [pc, #96]	; (8002df0 <MX_SPI1_Init+0x68>)
 8002d90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d92:	4b16      	ldr	r3, [pc, #88]	; (8002dec <MX_SPI1_Init+0x64>)
 8002d94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d9a:	4b14      	ldr	r3, [pc, #80]	; (8002dec <MX_SPI1_Init+0x64>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002da0:	4b12      	ldr	r3, [pc, #72]	; (8002dec <MX_SPI1_Init+0x64>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002da6:	4b11      	ldr	r3, [pc, #68]	; (8002dec <MX_SPI1_Init+0x64>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002dac:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <MX_SPI1_Init+0x64>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002db2:	4b0e      	ldr	r3, [pc, #56]	; (8002dec <MX_SPI1_Init+0x64>)
 8002db4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002db8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002dba:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <MX_SPI1_Init+0x64>)
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002dc0:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <MX_SPI1_Init+0x64>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002dc6:	4b09      	ldr	r3, [pc, #36]	; (8002dec <MX_SPI1_Init+0x64>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dcc:	4b07      	ldr	r3, [pc, #28]	; (8002dec <MX_SPI1_Init+0x64>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002dd2:	4b06      	ldr	r3, [pc, #24]	; (8002dec <MX_SPI1_Init+0x64>)
 8002dd4:	220a      	movs	r2, #10
 8002dd6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002dd8:	4804      	ldr	r0, [pc, #16]	; (8002dec <MX_SPI1_Init+0x64>)
 8002dda:	f004 f965 	bl	80070a8 <HAL_SPI_Init>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002de4:	f000 f8a6 	bl	8002f34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002de8:	bf00      	nop
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	200010a4 	.word	0x200010a4
 8002df0:	40013000 	.word	0x40013000

08002df4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002df8:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <MX_USART2_UART_Init+0x4c>)
 8002dfa:	4a12      	ldr	r2, [pc, #72]	; (8002e44 <MX_USART2_UART_Init+0x50>)
 8002dfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002dfe:	4b10      	ldr	r3, [pc, #64]	; (8002e40 <MX_USART2_UART_Init+0x4c>)
 8002e00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e06:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <MX_USART2_UART_Init+0x4c>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e0c:	4b0c      	ldr	r3, [pc, #48]	; (8002e40 <MX_USART2_UART_Init+0x4c>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e12:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <MX_USART2_UART_Init+0x4c>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e18:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <MX_USART2_UART_Init+0x4c>)
 8002e1a:	220c      	movs	r2, #12
 8002e1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002e1e:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <MX_USART2_UART_Init+0x4c>)
 8002e20:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002e24:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e26:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <MX_USART2_UART_Init+0x4c>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e2c:	4804      	ldr	r0, [pc, #16]	; (8002e40 <MX_USART2_UART_Init+0x4c>)
 8002e2e:	f005 f84d 	bl	8007ecc <HAL_UART_Init>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8002e38:	f000 f87c 	bl	8002f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e3c:	bf00      	nop
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	200010fc 	.word	0x200010fc
 8002e44:	40004400 	.word	0x40004400

08002e48 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e4e:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <MX_DMA_Init+0x48>)
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	4a0f      	ldr	r2, [pc, #60]	; (8002e90 <MX_DMA_Init+0x48>)
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	6153      	str	r3, [r2, #20]
 8002e5a:	4b0d      	ldr	r3, [pc, #52]	; (8002e90 <MX_DMA_Init+0x48>)
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	607b      	str	r3, [r7, #4]
 8002e64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002e66:	2200      	movs	r2, #0
 8002e68:	2100      	movs	r1, #0
 8002e6a:	2010      	movs	r0, #16
 8002e6c:	f000 fbf5 	bl	800365a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002e70:	2010      	movs	r0, #16
 8002e72:	f000 fc0e 	bl	8003692 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002e76:	2200      	movs	r2, #0
 8002e78:	2100      	movs	r1, #0
 8002e7a:	2011      	movs	r0, #17
 8002e7c:	f000 fbed 	bl	800365a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002e80:	2011      	movs	r0, #17
 8002e82:	f000 fc06 	bl	8003692 <HAL_NVIC_EnableIRQ>

}
 8002e86:	bf00      	nop
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40021000 	.word	0x40021000

08002e94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e9a:	f107 0308 	add.w	r3, r7, #8
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	605a      	str	r2, [r3, #4]
 8002ea4:	609a      	str	r2, [r3, #8]
 8002ea6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ea8:	4b17      	ldr	r3, [pc, #92]	; (8002f08 <MX_GPIO_Init+0x74>)
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	4a16      	ldr	r2, [pc, #88]	; (8002f08 <MX_GPIO_Init+0x74>)
 8002eae:	f043 0304 	orr.w	r3, r3, #4
 8002eb2:	6193      	str	r3, [r2, #24]
 8002eb4:	4b14      	ldr	r3, [pc, #80]	; (8002f08 <MX_GPIO_Init+0x74>)
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	607b      	str	r3, [r7, #4]
 8002ebe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ec0:	4b11      	ldr	r3, [pc, #68]	; (8002f08 <MX_GPIO_Init+0x74>)
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	4a10      	ldr	r2, [pc, #64]	; (8002f08 <MX_GPIO_Init+0x74>)
 8002ec6:	f043 0308 	orr.w	r3, r3, #8
 8002eca:	6193      	str	r3, [r2, #24]
 8002ecc:	4b0e      	ldr	r3, [pc, #56]	; (8002f08 <MX_GPIO_Init+0x74>)
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	603b      	str	r3, [r7, #0]
 8002ed6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002ed8:	2201      	movs	r2, #1
 8002eda:	2110      	movs	r1, #16
 8002edc:	480b      	ldr	r0, [pc, #44]	; (8002f0c <MX_GPIO_Init+0x78>)
 8002ede:	f000 ffdf 	bl	8003ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002ee2:	2310      	movs	r3, #16
 8002ee4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eea:	2300      	movs	r3, #0
 8002eec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ef2:	f107 0308 	add.w	r3, r7, #8
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	4804      	ldr	r0, [pc, #16]	; (8002f0c <MX_GPIO_Init+0x78>)
 8002efa:	f000 fe77 	bl	8003bec <HAL_GPIO_Init>

}
 8002efe:	bf00      	nop
 8002f00:	3718      	adds	r7, #24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	40010800 	.word	0x40010800

08002f10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a04      	ldr	r2, [pc, #16]	; (8002f30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d101      	bne.n	8002f26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002f22:	f000 faa7 	bl	8003474 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002f26:	bf00      	nop
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40000800 	.word	0x40000800

08002f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002f38:	bf00      	nop
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr

08002f40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f46:	4b15      	ldr	r3, [pc, #84]	; (8002f9c <HAL_MspInit+0x5c>)
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	4a14      	ldr	r2, [pc, #80]	; (8002f9c <HAL_MspInit+0x5c>)
 8002f4c:	f043 0301 	orr.w	r3, r3, #1
 8002f50:	6193      	str	r3, [r2, #24]
 8002f52:	4b12      	ldr	r3, [pc, #72]	; (8002f9c <HAL_MspInit+0x5c>)
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	60bb      	str	r3, [r7, #8]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f5e:	4b0f      	ldr	r3, [pc, #60]	; (8002f9c <HAL_MspInit+0x5c>)
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	4a0e      	ldr	r2, [pc, #56]	; (8002f9c <HAL_MspInit+0x5c>)
 8002f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f68:	61d3      	str	r3, [r2, #28]
 8002f6a:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <HAL_MspInit+0x5c>)
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f72:	607b      	str	r3, [r7, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002f76:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <HAL_MspInit+0x60>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f8a:	60fb      	str	r3, [r7, #12]
 8002f8c:	4a04      	ldr	r2, [pc, #16]	; (8002fa0 <HAL_MspInit+0x60>)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f92:	bf00      	nop
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	40010000 	.word	0x40010000

08002fa4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b088      	sub	sp, #32
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fac:	f107 0310 	add.w	r3, r7, #16
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	605a      	str	r2, [r3, #4]
 8002fb6:	609a      	str	r2, [r3, #8]
 8002fb8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a15      	ldr	r2, [pc, #84]	; (8003014 <HAL_I2C_MspInit+0x70>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d123      	bne.n	800300c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fc4:	4b14      	ldr	r3, [pc, #80]	; (8003018 <HAL_I2C_MspInit+0x74>)
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	4a13      	ldr	r2, [pc, #76]	; (8003018 <HAL_I2C_MspInit+0x74>)
 8002fca:	f043 0308 	orr.w	r3, r3, #8
 8002fce:	6193      	str	r3, [r2, #24]
 8002fd0:	4b11      	ldr	r3, [pc, #68]	; (8003018 <HAL_I2C_MspInit+0x74>)
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	f003 0308 	and.w	r3, r3, #8
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002fdc:	23c0      	movs	r3, #192	; 0xc0
 8002fde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fe0:	2312      	movs	r3, #18
 8002fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fe8:	f107 0310 	add.w	r3, r7, #16
 8002fec:	4619      	mov	r1, r3
 8002fee:	480b      	ldr	r0, [pc, #44]	; (800301c <HAL_I2C_MspInit+0x78>)
 8002ff0:	f000 fdfc 	bl	8003bec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ff4:	4b08      	ldr	r3, [pc, #32]	; (8003018 <HAL_I2C_MspInit+0x74>)
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	4a07      	ldr	r2, [pc, #28]	; (8003018 <HAL_I2C_MspInit+0x74>)
 8002ffa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ffe:	61d3      	str	r3, [r2, #28]
 8003000:	4b05      	ldr	r3, [pc, #20]	; (8003018 <HAL_I2C_MspInit+0x74>)
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800300c:	bf00      	nop
 800300e:	3720      	adds	r7, #32
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40005400 	.word	0x40005400
 8003018:	40021000 	.word	0x40021000
 800301c:	40010c00 	.word	0x40010c00

08003020 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b088      	sub	sp, #32
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003028:	f107 0310 	add.w	r3, r7, #16
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	605a      	str	r2, [r3, #4]
 8003032:	609a      	str	r2, [r3, #8]
 8003034:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a1b      	ldr	r2, [pc, #108]	; (80030a8 <HAL_SPI_MspInit+0x88>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d12f      	bne.n	80030a0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003040:	4b1a      	ldr	r3, [pc, #104]	; (80030ac <HAL_SPI_MspInit+0x8c>)
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	4a19      	ldr	r2, [pc, #100]	; (80030ac <HAL_SPI_MspInit+0x8c>)
 8003046:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800304a:	6193      	str	r3, [r2, #24]
 800304c:	4b17      	ldr	r3, [pc, #92]	; (80030ac <HAL_SPI_MspInit+0x8c>)
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003058:	4b14      	ldr	r3, [pc, #80]	; (80030ac <HAL_SPI_MspInit+0x8c>)
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	4a13      	ldr	r2, [pc, #76]	; (80030ac <HAL_SPI_MspInit+0x8c>)
 800305e:	f043 0304 	orr.w	r3, r3, #4
 8003062:	6193      	str	r3, [r2, #24]
 8003064:	4b11      	ldr	r3, [pc, #68]	; (80030ac <HAL_SPI_MspInit+0x8c>)
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	60bb      	str	r3, [r7, #8]
 800306e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003070:	23a0      	movs	r3, #160	; 0xa0
 8003072:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003074:	2302      	movs	r3, #2
 8003076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003078:	2303      	movs	r3, #3
 800307a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800307c:	f107 0310 	add.w	r3, r7, #16
 8003080:	4619      	mov	r1, r3
 8003082:	480b      	ldr	r0, [pc, #44]	; (80030b0 <HAL_SPI_MspInit+0x90>)
 8003084:	f000 fdb2 	bl	8003bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003088:	2340      	movs	r3, #64	; 0x40
 800308a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800308c:	2300      	movs	r3, #0
 800308e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003090:	2300      	movs	r3, #0
 8003092:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003094:	f107 0310 	add.w	r3, r7, #16
 8003098:	4619      	mov	r1, r3
 800309a:	4805      	ldr	r0, [pc, #20]	; (80030b0 <HAL_SPI_MspInit+0x90>)
 800309c:	f000 fda6 	bl	8003bec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80030a0:	bf00      	nop
 80030a2:	3720      	adds	r7, #32
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40013000 	.word	0x40013000
 80030ac:	40021000 	.word	0x40021000
 80030b0:	40010800 	.word	0x40010800

080030b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b088      	sub	sp, #32
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030bc:	f107 0310 	add.w	r3, r7, #16
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	605a      	str	r2, [r3, #4]
 80030c6:	609a      	str	r2, [r3, #8]
 80030c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a4c      	ldr	r2, [pc, #304]	; (8003200 <HAL_UART_MspInit+0x14c>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	f040 8091 	bne.w	80031f8 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80030d6:	4b4b      	ldr	r3, [pc, #300]	; (8003204 <HAL_UART_MspInit+0x150>)
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	4a4a      	ldr	r2, [pc, #296]	; (8003204 <HAL_UART_MspInit+0x150>)
 80030dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030e0:	61d3      	str	r3, [r2, #28]
 80030e2:	4b48      	ldr	r3, [pc, #288]	; (8003204 <HAL_UART_MspInit+0x150>)
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ee:	4b45      	ldr	r3, [pc, #276]	; (8003204 <HAL_UART_MspInit+0x150>)
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	4a44      	ldr	r2, [pc, #272]	; (8003204 <HAL_UART_MspInit+0x150>)
 80030f4:	f043 0304 	orr.w	r3, r3, #4
 80030f8:	6193      	str	r3, [r2, #24]
 80030fa:	4b42      	ldr	r3, [pc, #264]	; (8003204 <HAL_UART_MspInit+0x150>)
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	60bb      	str	r3, [r7, #8]
 8003104:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> USART2_CTS
    PA1     ------> USART2_RTS
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003106:	2301      	movs	r3, #1
 8003108:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800310a:	2300      	movs	r3, #0
 800310c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310e:	2300      	movs	r3, #0
 8003110:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003112:	f107 0310 	add.w	r3, r7, #16
 8003116:	4619      	mov	r1, r3
 8003118:	483b      	ldr	r0, [pc, #236]	; (8003208 <HAL_UART_MspInit+0x154>)
 800311a:	f000 fd67 	bl	8003bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800311e:	2306      	movs	r3, #6
 8003120:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003122:	2302      	movs	r3, #2
 8003124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003126:	2303      	movs	r3, #3
 8003128:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800312a:	f107 0310 	add.w	r3, r7, #16
 800312e:	4619      	mov	r1, r3
 8003130:	4835      	ldr	r0, [pc, #212]	; (8003208 <HAL_UART_MspInit+0x154>)
 8003132:	f000 fd5b 	bl	8003bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003136:	2308      	movs	r3, #8
 8003138:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800313a:	2300      	movs	r3, #0
 800313c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800313e:	2301      	movs	r3, #1
 8003140:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003142:	f107 0310 	add.w	r3, r7, #16
 8003146:	4619      	mov	r1, r3
 8003148:	482f      	ldr	r0, [pc, #188]	; (8003208 <HAL_UART_MspInit+0x154>)
 800314a:	f000 fd4f 	bl	8003bec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800314e:	4b2f      	ldr	r3, [pc, #188]	; (800320c <HAL_UART_MspInit+0x158>)
 8003150:	4a2f      	ldr	r2, [pc, #188]	; (8003210 <HAL_UART_MspInit+0x15c>)
 8003152:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003154:	4b2d      	ldr	r3, [pc, #180]	; (800320c <HAL_UART_MspInit+0x158>)
 8003156:	2200      	movs	r2, #0
 8003158:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800315a:	4b2c      	ldr	r3, [pc, #176]	; (800320c <HAL_UART_MspInit+0x158>)
 800315c:	2200      	movs	r2, #0
 800315e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003160:	4b2a      	ldr	r3, [pc, #168]	; (800320c <HAL_UART_MspInit+0x158>)
 8003162:	2280      	movs	r2, #128	; 0x80
 8003164:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003166:	4b29      	ldr	r3, [pc, #164]	; (800320c <HAL_UART_MspInit+0x158>)
 8003168:	2200      	movs	r2, #0
 800316a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800316c:	4b27      	ldr	r3, [pc, #156]	; (800320c <HAL_UART_MspInit+0x158>)
 800316e:	2200      	movs	r2, #0
 8003170:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003172:	4b26      	ldr	r3, [pc, #152]	; (800320c <HAL_UART_MspInit+0x158>)
 8003174:	2200      	movs	r2, #0
 8003176:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003178:	4b24      	ldr	r3, [pc, #144]	; (800320c <HAL_UART_MspInit+0x158>)
 800317a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800317e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003180:	4822      	ldr	r0, [pc, #136]	; (800320c <HAL_UART_MspInit+0x158>)
 8003182:	f000 fa95 	bl	80036b0 <HAL_DMA_Init>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <HAL_UART_MspInit+0xdc>
    {
      Error_Handler();
 800318c:	f7ff fed2 	bl	8002f34 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a1e      	ldr	r2, [pc, #120]	; (800320c <HAL_UART_MspInit+0x158>)
 8003194:	635a      	str	r2, [r3, #52]	; 0x34
 8003196:	4a1d      	ldr	r2, [pc, #116]	; (800320c <HAL_UART_MspInit+0x158>)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800319c:	4b1d      	ldr	r3, [pc, #116]	; (8003214 <HAL_UART_MspInit+0x160>)
 800319e:	4a1e      	ldr	r2, [pc, #120]	; (8003218 <HAL_UART_MspInit+0x164>)
 80031a0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031a2:	4b1c      	ldr	r3, [pc, #112]	; (8003214 <HAL_UART_MspInit+0x160>)
 80031a4:	2210      	movs	r2, #16
 80031a6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031a8:	4b1a      	ldr	r3, [pc, #104]	; (8003214 <HAL_UART_MspInit+0x160>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80031ae:	4b19      	ldr	r3, [pc, #100]	; (8003214 <HAL_UART_MspInit+0x160>)
 80031b0:	2280      	movs	r2, #128	; 0x80
 80031b2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031b4:	4b17      	ldr	r3, [pc, #92]	; (8003214 <HAL_UART_MspInit+0x160>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031ba:	4b16      	ldr	r3, [pc, #88]	; (8003214 <HAL_UART_MspInit+0x160>)
 80031bc:	2200      	movs	r2, #0
 80031be:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80031c0:	4b14      	ldr	r3, [pc, #80]	; (8003214 <HAL_UART_MspInit+0x160>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80031c6:	4b13      	ldr	r3, [pc, #76]	; (8003214 <HAL_UART_MspInit+0x160>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80031cc:	4811      	ldr	r0, [pc, #68]	; (8003214 <HAL_UART_MspInit+0x160>)
 80031ce:	f000 fa6f 	bl	80036b0 <HAL_DMA_Init>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80031d8:	f7ff feac 	bl	8002f34 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a0d      	ldr	r2, [pc, #52]	; (8003214 <HAL_UART_MspInit+0x160>)
 80031e0:	631a      	str	r2, [r3, #48]	; 0x30
 80031e2:	4a0c      	ldr	r2, [pc, #48]	; (8003214 <HAL_UART_MspInit+0x160>)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80031e8:	2200      	movs	r2, #0
 80031ea:	2100      	movs	r1, #0
 80031ec:	2026      	movs	r0, #38	; 0x26
 80031ee:	f000 fa34 	bl	800365a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80031f2:	2026      	movs	r0, #38	; 0x26
 80031f4:	f000 fa4d 	bl	8003692 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80031f8:	bf00      	nop
 80031fa:	3720      	adds	r7, #32
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40004400 	.word	0x40004400
 8003204:	40021000 	.word	0x40021000
 8003208:	40010800 	.word	0x40010800
 800320c:	20000fc8 	.word	0x20000fc8
 8003210:	4002006c 	.word	0x4002006c
 8003214:	20001060 	.word	0x20001060
 8003218:	40020080 	.word	0x40020080

0800321c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b08c      	sub	sp, #48	; 0x30
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003224:	2300      	movs	r3, #0
 8003226:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003228:	2300      	movs	r3, #0
 800322a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 800322c:	2200      	movs	r2, #0
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	201e      	movs	r0, #30
 8003232:	f000 fa12 	bl	800365a <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8003236:	201e      	movs	r0, #30
 8003238:	f000 fa2b 	bl	8003692 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800323c:	4b1f      	ldr	r3, [pc, #124]	; (80032bc <HAL_InitTick+0xa0>)
 800323e:	69db      	ldr	r3, [r3, #28]
 8003240:	4a1e      	ldr	r2, [pc, #120]	; (80032bc <HAL_InitTick+0xa0>)
 8003242:	f043 0304 	orr.w	r3, r3, #4
 8003246:	61d3      	str	r3, [r2, #28]
 8003248:	4b1c      	ldr	r3, [pc, #112]	; (80032bc <HAL_InitTick+0xa0>)
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003254:	f107 0210 	add.w	r2, r7, #16
 8003258:	f107 0314 	add.w	r3, r7, #20
 800325c:	4611      	mov	r1, r2
 800325e:	4618      	mov	r0, r3
 8003260:	f003 fe1e 	bl	8006ea0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003264:	f003 fdf4 	bl	8006e50 <HAL_RCC_GetPCLK1Freq>
 8003268:	4603      	mov	r3, r0
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800326e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003270:	4a13      	ldr	r2, [pc, #76]	; (80032c0 <HAL_InitTick+0xa4>)
 8003272:	fba2 2303 	umull	r2, r3, r2, r3
 8003276:	0c9b      	lsrs	r3, r3, #18
 8003278:	3b01      	subs	r3, #1
 800327a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800327c:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <HAL_InitTick+0xa8>)
 800327e:	4a12      	ldr	r2, [pc, #72]	; (80032c8 <HAL_InitTick+0xac>)
 8003280:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8003282:	4b10      	ldr	r3, [pc, #64]	; (80032c4 <HAL_InitTick+0xa8>)
 8003284:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003288:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800328a:	4a0e      	ldr	r2, [pc, #56]	; (80032c4 <HAL_InitTick+0xa8>)
 800328c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8003290:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <HAL_InitTick+0xa8>)
 8003292:	2200      	movs	r2, #0
 8003294:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003296:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <HAL_InitTick+0xa8>)
 8003298:	2200      	movs	r2, #0
 800329a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800329c:	4809      	ldr	r0, [pc, #36]	; (80032c4 <HAL_InitTick+0xa8>)
 800329e:	f004 fc1d 	bl	8007adc <HAL_TIM_Base_Init>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d104      	bne.n	80032b2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80032a8:	4806      	ldr	r0, [pc, #24]	; (80032c4 <HAL_InitTick+0xa8>)
 80032aa:	f004 fc4b 	bl	8007b44 <HAL_TIM_Base_Start_IT>
 80032ae:	4603      	mov	r3, r0
 80032b0:	e000      	b.n	80032b4 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3730      	adds	r7, #48	; 0x30
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40021000 	.word	0x40021000
 80032c0:	431bde83 	.word	0x431bde83
 80032c4:	2000113c 	.word	0x2000113c
 80032c8:	40000800 	.word	0x40000800

080032cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80032d0:	bf00      	nop
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr

080032d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032dc:	e7fe      	b.n	80032dc <HardFault_Handler+0x4>

080032de <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032de:	b480      	push	{r7}
 80032e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032e2:	e7fe      	b.n	80032e2 <MemManage_Handler+0x4>

080032e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032e8:	e7fe      	b.n	80032e8 <BusFault_Handler+0x4>

080032ea <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032ea:	b480      	push	{r7}
 80032ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032ee:	e7fe      	b.n	80032ee <UsageFault_Handler+0x4>

080032f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032f4:	bf00      	nop
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr

080032fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003300:	bf00      	nop
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr

08003308 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800330c:	bf00      	nop
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr

08003314 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003318:	bf00      	nop
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr

08003320 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003324:	4802      	ldr	r0, [pc, #8]	; (8003330 <DMA1_Channel6_IRQHandler+0x10>)
 8003326:	f000 fb2d 	bl	8003984 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800332a:	bf00      	nop
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	20000fc8 	.word	0x20000fc8

08003334 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003338:	4802      	ldr	r0, [pc, #8]	; (8003344 <DMA1_Channel7_IRQHandler+0x10>)
 800333a:	f000 fb23 	bl	8003984 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800333e:	bf00      	nop
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	20001060 	.word	0x20001060

08003348 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800334c:	4802      	ldr	r0, [pc, #8]	; (8003358 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800334e:	f002 fbce 	bl	8005aee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003352:	bf00      	nop
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	20001e14 	.word	0x20001e14

0800335c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003360:	4802      	ldr	r0, [pc, #8]	; (800336c <TIM4_IRQHandler+0x10>)
 8003362:	f004 fc12 	bl	8007b8a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003366:	bf00      	nop
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	2000113c 	.word	0x2000113c

08003370 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  if(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_IDLE))
 8003374:	4b06      	ldr	r3, [pc, #24]	; (8003390 <USART2_IRQHandler+0x20>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0310 	and.w	r3, r3, #16
 800337e:	2b10      	cmp	r3, #16
 8003380:	d101      	bne.n	8003386 <USART2_IRQHandler+0x16>
	  uart_finish_receive();//空闲中断
 8003382:	f7ff fc03 	bl	8002b8c <uart_finish_receive>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003386:	4802      	ldr	r0, [pc, #8]	; (8003390 <USART2_IRQHandler+0x20>)
 8003388:	f004 ff62 	bl	8008250 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800338c:	bf00      	nop
 800338e:	bd80      	pop	{r7, pc}
 8003390:	200010fc 	.word	0x200010fc

08003394 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003398:	4b15      	ldr	r3, [pc, #84]	; (80033f0 <SystemInit+0x5c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a14      	ldr	r2, [pc, #80]	; (80033f0 <SystemInit+0x5c>)
 800339e:	f043 0301 	orr.w	r3, r3, #1
 80033a2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80033a4:	4b12      	ldr	r3, [pc, #72]	; (80033f0 <SystemInit+0x5c>)
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	4911      	ldr	r1, [pc, #68]	; (80033f0 <SystemInit+0x5c>)
 80033aa:	4b12      	ldr	r3, [pc, #72]	; (80033f4 <SystemInit+0x60>)
 80033ac:	4013      	ands	r3, r2
 80033ae:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80033b0:	4b0f      	ldr	r3, [pc, #60]	; (80033f0 <SystemInit+0x5c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a0e      	ldr	r2, [pc, #56]	; (80033f0 <SystemInit+0x5c>)
 80033b6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80033ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033be:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <SystemInit+0x5c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a0a      	ldr	r2, [pc, #40]	; (80033f0 <SystemInit+0x5c>)
 80033c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ca:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80033cc:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <SystemInit+0x5c>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	4a07      	ldr	r2, [pc, #28]	; (80033f0 <SystemInit+0x5c>)
 80033d2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80033d6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80033d8:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <SystemInit+0x5c>)
 80033da:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80033de:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80033e0:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <SystemInit+0x64>)
 80033e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033e6:	609a      	str	r2, [r3, #8]
#endif 
}
 80033e8:	bf00      	nop
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr
 80033f0:	40021000 	.word	0x40021000
 80033f4:	f8ff0000 	.word	0xf8ff0000
 80033f8:	e000ed00 	.word	0xe000ed00

080033fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80033fc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80033fe:	e003      	b.n	8003408 <LoopCopyDataInit>

08003400 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003400:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003402:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003404:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003406:	3104      	adds	r1, #4

08003408 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003408:	480a      	ldr	r0, [pc, #40]	; (8003434 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800340a:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800340c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800340e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003410:	d3f6      	bcc.n	8003400 <CopyDataInit>
  ldr r2, =_sbss
 8003412:	4a0a      	ldr	r2, [pc, #40]	; (800343c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003414:	e002      	b.n	800341c <LoopFillZerobss>

08003416 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003416:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003418:	f842 3b04 	str.w	r3, [r2], #4

0800341c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800341c:	4b08      	ldr	r3, [pc, #32]	; (8003440 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800341e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003420:	d3f9      	bcc.n	8003416 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003422:	f7ff ffb7 	bl	8003394 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003426:	f008 fc6d 	bl	800bd04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800342a:	f7ff fbff 	bl	8002c2c <main>
  bx lr
 800342e:	4770      	bx	lr
  ldr r3, =_sidata
 8003430:	0800bdfc 	.word	0x0800bdfc
  ldr r0, =_sdata
 8003434:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003438:	200001a4 	.word	0x200001a4
  ldr r2, =_sbss
 800343c:	200001a4 	.word	0x200001a4
  ldr r3, = _ebss
 8003440:	20002080 	.word	0x20002080

08003444 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003444:	e7fe      	b.n	8003444 <ADC1_2_IRQHandler>
	...

08003448 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800344c:	4b08      	ldr	r3, [pc, #32]	; (8003470 <HAL_Init+0x28>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a07      	ldr	r2, [pc, #28]	; (8003470 <HAL_Init+0x28>)
 8003452:	f043 0310 	orr.w	r3, r3, #16
 8003456:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003458:	2003      	movs	r0, #3
 800345a:	f000 f8f3 	bl	8003644 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800345e:	2000      	movs	r0, #0
 8003460:	f7ff fedc 	bl	800321c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003464:	f7ff fd6c 	bl	8002f40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40022000 	.word	0x40022000

08003474 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003478:	4b05      	ldr	r3, [pc, #20]	; (8003490 <HAL_IncTick+0x1c>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	461a      	mov	r2, r3
 800347e:	4b05      	ldr	r3, [pc, #20]	; (8003494 <HAL_IncTick+0x20>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4413      	add	r3, r2
 8003484:	4a03      	ldr	r2, [pc, #12]	; (8003494 <HAL_IncTick+0x20>)
 8003486:	6013      	str	r3, [r2, #0]
}
 8003488:	bf00      	nop
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr
 8003490:	20000030 	.word	0x20000030
 8003494:	2000117c 	.word	0x2000117c

08003498 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  return uwTick;
 800349c:	4b02      	ldr	r3, [pc, #8]	; (80034a8 <HAL_GetTick+0x10>)
 800349e:	681b      	ldr	r3, [r3, #0]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bc80      	pop	{r7}
 80034a6:	4770      	bx	lr
 80034a8:	2000117c 	.word	0x2000117c

080034ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034b4:	f7ff fff0 	bl	8003498 <HAL_GetTick>
 80034b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c4:	d005      	beq.n	80034d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034c6:	4b09      	ldr	r3, [pc, #36]	; (80034ec <HAL_Delay+0x40>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	461a      	mov	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4413      	add	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034d2:	bf00      	nop
 80034d4:	f7ff ffe0 	bl	8003498 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d8f7      	bhi.n	80034d4 <HAL_Delay+0x28>
  {
  }
}
 80034e4:	bf00      	nop
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	20000030 	.word	0x20000030

080034f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003500:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <__NVIC_SetPriorityGrouping+0x44>)
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800350c:	4013      	ands	r3, r2
 800350e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003518:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800351c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003522:	4a04      	ldr	r2, [pc, #16]	; (8003534 <__NVIC_SetPriorityGrouping+0x44>)
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	60d3      	str	r3, [r2, #12]
}
 8003528:	bf00      	nop
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	e000ed00 	.word	0xe000ed00

08003538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800353c:	4b04      	ldr	r3, [pc, #16]	; (8003550 <__NVIC_GetPriorityGrouping+0x18>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	0a1b      	lsrs	r3, r3, #8
 8003542:	f003 0307 	and.w	r3, r3, #7
}
 8003546:	4618      	mov	r0, r3
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	e000ed00 	.word	0xe000ed00

08003554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	4603      	mov	r3, r0
 800355c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800355e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003562:	2b00      	cmp	r3, #0
 8003564:	db0b      	blt.n	800357e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003566:	79fb      	ldrb	r3, [r7, #7]
 8003568:	f003 021f 	and.w	r2, r3, #31
 800356c:	4906      	ldr	r1, [pc, #24]	; (8003588 <__NVIC_EnableIRQ+0x34>)
 800356e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003572:	095b      	lsrs	r3, r3, #5
 8003574:	2001      	movs	r0, #1
 8003576:	fa00 f202 	lsl.w	r2, r0, r2
 800357a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr
 8003588:	e000e100 	.word	0xe000e100

0800358c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	6039      	str	r1, [r7, #0]
 8003596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359c:	2b00      	cmp	r3, #0
 800359e:	db0a      	blt.n	80035b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	490c      	ldr	r1, [pc, #48]	; (80035d8 <__NVIC_SetPriority+0x4c>)
 80035a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035aa:	0112      	lsls	r2, r2, #4
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	440b      	add	r3, r1
 80035b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035b4:	e00a      	b.n	80035cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	4908      	ldr	r1, [pc, #32]	; (80035dc <__NVIC_SetPriority+0x50>)
 80035bc:	79fb      	ldrb	r3, [r7, #7]
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	3b04      	subs	r3, #4
 80035c4:	0112      	lsls	r2, r2, #4
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	440b      	add	r3, r1
 80035ca:	761a      	strb	r2, [r3, #24]
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bc80      	pop	{r7}
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	e000e100 	.word	0xe000e100
 80035dc:	e000ed00 	.word	0xe000ed00

080035e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b089      	sub	sp, #36	; 0x24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f1c3 0307 	rsb	r3, r3, #7
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	bf28      	it	cs
 80035fe:	2304      	movcs	r3, #4
 8003600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	3304      	adds	r3, #4
 8003606:	2b06      	cmp	r3, #6
 8003608:	d902      	bls.n	8003610 <NVIC_EncodePriority+0x30>
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	3b03      	subs	r3, #3
 800360e:	e000      	b.n	8003612 <NVIC_EncodePriority+0x32>
 8003610:	2300      	movs	r3, #0
 8003612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003614:	f04f 32ff 	mov.w	r2, #4294967295
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43da      	mvns	r2, r3
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	401a      	ands	r2, r3
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003628:	f04f 31ff 	mov.w	r1, #4294967295
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	fa01 f303 	lsl.w	r3, r1, r3
 8003632:	43d9      	mvns	r1, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003638:	4313      	orrs	r3, r2
         );
}
 800363a:	4618      	mov	r0, r3
 800363c:	3724      	adds	r7, #36	; 0x24
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr

08003644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7ff ff4f 	bl	80034f0 <__NVIC_SetPriorityGrouping>
}
 8003652:	bf00      	nop
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800365a:	b580      	push	{r7, lr}
 800365c:	b086      	sub	sp, #24
 800365e:	af00      	add	r7, sp, #0
 8003660:	4603      	mov	r3, r0
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	607a      	str	r2, [r7, #4]
 8003666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003668:	2300      	movs	r3, #0
 800366a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800366c:	f7ff ff64 	bl	8003538 <__NVIC_GetPriorityGrouping>
 8003670:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	68b9      	ldr	r1, [r7, #8]
 8003676:	6978      	ldr	r0, [r7, #20]
 8003678:	f7ff ffb2 	bl	80035e0 <NVIC_EncodePriority>
 800367c:	4602      	mov	r2, r0
 800367e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003682:	4611      	mov	r1, r2
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff ff81 	bl	800358c <__NVIC_SetPriority>
}
 800368a:	bf00      	nop
 800368c:	3718      	adds	r7, #24
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	4603      	mov	r3, r0
 800369a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800369c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff ff57 	bl	8003554 <__NVIC_EnableIRQ>
}
 80036a6:	bf00      	nop
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e043      	b.n	800374e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	461a      	mov	r2, r3
 80036cc:	4b22      	ldr	r3, [pc, #136]	; (8003758 <HAL_DMA_Init+0xa8>)
 80036ce:	4413      	add	r3, r2
 80036d0:	4a22      	ldr	r2, [pc, #136]	; (800375c <HAL_DMA_Init+0xac>)
 80036d2:	fba2 2303 	umull	r2, r3, r2, r3
 80036d6:	091b      	lsrs	r3, r3, #4
 80036d8:	009a      	lsls	r2, r3, #2
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a1f      	ldr	r2, [pc, #124]	; (8003760 <HAL_DMA_Init+0xb0>)
 80036e2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80036fa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80036fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003708:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003714:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003720:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	4313      	orrs	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr
 8003758:	bffdfff8 	.word	0xbffdfff8
 800375c:	cccccccd 	.word	0xcccccccd
 8003760:	40020000 	.word	0x40020000

08003764 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
 8003770:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f893 3020 	ldrb.w	r3, [r3, #32]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_DMA_Start_IT+0x20>
 8003780:	2302      	movs	r3, #2
 8003782:	e04a      	b.n	800381a <HAL_DMA_Start_IT+0xb6>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003792:	2b01      	cmp	r3, #1
 8003794:	d13a      	bne.n	800380c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2202      	movs	r2, #2
 800379a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	68b9      	ldr	r1, [r7, #8]
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f9e8 	bl	8003b90 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d008      	beq.n	80037da <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 020e 	orr.w	r2, r2, #14
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	e00f      	b.n	80037fa <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0204 	bic.w	r2, r2, #4
 80037e8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f042 020a 	orr.w	r2, r2, #10
 80037f8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f042 0201 	orr.w	r2, r2, #1
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	e005      	b.n	8003818 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003814:	2302      	movs	r3, #2
 8003816:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003818:	7dfb      	ldrb	r3, [r7, #23]
}
 800381a:	4618      	mov	r0, r3
 800381c:	3718      	adds	r7, #24
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003822:	b480      	push	{r7}
 8003824:	b085      	sub	sp, #20
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800382a:	2300      	movs	r3, #0
 800382c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003834:	2b02      	cmp	r3, #2
 8003836:	d008      	beq.n	800384a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2204      	movs	r2, #4
 800383c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e020      	b.n	800388c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 020e 	bic.w	r2, r2, #14
 8003858:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0201 	bic.w	r2, r2, #1
 8003868:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003872:	2101      	movs	r1, #1
 8003874:	fa01 f202 	lsl.w	r2, r1, r2
 8003878:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800388a:	7bfb      	ldrb	r3, [r7, #15]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr
	...

08003898 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038a0:	2300      	movs	r3, #0
 80038a2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d005      	beq.n	80038ba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2204      	movs	r2, #4
 80038b2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	73fb      	strb	r3, [r7, #15]
 80038b8:	e051      	b.n	800395e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 020e 	bic.w	r2, r2, #14
 80038c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0201 	bic.w	r2, r2, #1
 80038d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a22      	ldr	r2, [pc, #136]	; (8003968 <HAL_DMA_Abort_IT+0xd0>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d029      	beq.n	8003938 <HAL_DMA_Abort_IT+0xa0>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a20      	ldr	r2, [pc, #128]	; (800396c <HAL_DMA_Abort_IT+0xd4>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d022      	beq.n	8003934 <HAL_DMA_Abort_IT+0x9c>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a1f      	ldr	r2, [pc, #124]	; (8003970 <HAL_DMA_Abort_IT+0xd8>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d01a      	beq.n	800392e <HAL_DMA_Abort_IT+0x96>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a1d      	ldr	r2, [pc, #116]	; (8003974 <HAL_DMA_Abort_IT+0xdc>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d012      	beq.n	8003928 <HAL_DMA_Abort_IT+0x90>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a1c      	ldr	r2, [pc, #112]	; (8003978 <HAL_DMA_Abort_IT+0xe0>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d00a      	beq.n	8003922 <HAL_DMA_Abort_IT+0x8a>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a1a      	ldr	r2, [pc, #104]	; (800397c <HAL_DMA_Abort_IT+0xe4>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d102      	bne.n	800391c <HAL_DMA_Abort_IT+0x84>
 8003916:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800391a:	e00e      	b.n	800393a <HAL_DMA_Abort_IT+0xa2>
 800391c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003920:	e00b      	b.n	800393a <HAL_DMA_Abort_IT+0xa2>
 8003922:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003926:	e008      	b.n	800393a <HAL_DMA_Abort_IT+0xa2>
 8003928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800392c:	e005      	b.n	800393a <HAL_DMA_Abort_IT+0xa2>
 800392e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003932:	e002      	b.n	800393a <HAL_DMA_Abort_IT+0xa2>
 8003934:	2310      	movs	r3, #16
 8003936:	e000      	b.n	800393a <HAL_DMA_Abort_IT+0xa2>
 8003938:	2301      	movs	r3, #1
 800393a:	4a11      	ldr	r2, [pc, #68]	; (8003980 <HAL_DMA_Abort_IT+0xe8>)
 800393c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	4798      	blx	r3
    } 
  }
  return status;
 800395e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40020008 	.word	0x40020008
 800396c:	4002001c 	.word	0x4002001c
 8003970:	40020030 	.word	0x40020030
 8003974:	40020044 	.word	0x40020044
 8003978:	40020058 	.word	0x40020058
 800397c:	4002006c 	.word	0x4002006c
 8003980:	40020000 	.word	0x40020000

08003984 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a0:	2204      	movs	r2, #4
 80039a2:	409a      	lsls	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4013      	ands	r3, r2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d04f      	beq.n	8003a4c <HAL_DMA_IRQHandler+0xc8>
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d04a      	beq.n	8003a4c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0320 	and.w	r3, r3, #32
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d107      	bne.n	80039d4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0204 	bic.w	r2, r2, #4
 80039d2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a66      	ldr	r2, [pc, #408]	; (8003b74 <HAL_DMA_IRQHandler+0x1f0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d029      	beq.n	8003a32 <HAL_DMA_IRQHandler+0xae>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a65      	ldr	r2, [pc, #404]	; (8003b78 <HAL_DMA_IRQHandler+0x1f4>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d022      	beq.n	8003a2e <HAL_DMA_IRQHandler+0xaa>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a63      	ldr	r2, [pc, #396]	; (8003b7c <HAL_DMA_IRQHandler+0x1f8>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d01a      	beq.n	8003a28 <HAL_DMA_IRQHandler+0xa4>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a62      	ldr	r2, [pc, #392]	; (8003b80 <HAL_DMA_IRQHandler+0x1fc>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d012      	beq.n	8003a22 <HAL_DMA_IRQHandler+0x9e>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a60      	ldr	r2, [pc, #384]	; (8003b84 <HAL_DMA_IRQHandler+0x200>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d00a      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x98>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a5f      	ldr	r2, [pc, #380]	; (8003b88 <HAL_DMA_IRQHandler+0x204>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d102      	bne.n	8003a16 <HAL_DMA_IRQHandler+0x92>
 8003a10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a14:	e00e      	b.n	8003a34 <HAL_DMA_IRQHandler+0xb0>
 8003a16:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003a1a:	e00b      	b.n	8003a34 <HAL_DMA_IRQHandler+0xb0>
 8003a1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a20:	e008      	b.n	8003a34 <HAL_DMA_IRQHandler+0xb0>
 8003a22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a26:	e005      	b.n	8003a34 <HAL_DMA_IRQHandler+0xb0>
 8003a28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a2c:	e002      	b.n	8003a34 <HAL_DMA_IRQHandler+0xb0>
 8003a2e:	2340      	movs	r3, #64	; 0x40
 8003a30:	e000      	b.n	8003a34 <HAL_DMA_IRQHandler+0xb0>
 8003a32:	2304      	movs	r3, #4
 8003a34:	4a55      	ldr	r2, [pc, #340]	; (8003b8c <HAL_DMA_IRQHandler+0x208>)
 8003a36:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 8094 	beq.w	8003b6a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003a4a:	e08e      	b.n	8003b6a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a50:	2202      	movs	r2, #2
 8003a52:	409a      	lsls	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4013      	ands	r3, r2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d056      	beq.n	8003b0a <HAL_DMA_IRQHandler+0x186>
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d051      	beq.n	8003b0a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0320 	and.w	r3, r3, #32
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10b      	bne.n	8003a8c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 020a 	bic.w	r2, r2, #10
 8003a82:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a38      	ldr	r2, [pc, #224]	; (8003b74 <HAL_DMA_IRQHandler+0x1f0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d029      	beq.n	8003aea <HAL_DMA_IRQHandler+0x166>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a37      	ldr	r2, [pc, #220]	; (8003b78 <HAL_DMA_IRQHandler+0x1f4>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d022      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0x162>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a35      	ldr	r2, [pc, #212]	; (8003b7c <HAL_DMA_IRQHandler+0x1f8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d01a      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x15c>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a34      	ldr	r2, [pc, #208]	; (8003b80 <HAL_DMA_IRQHandler+0x1fc>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d012      	beq.n	8003ada <HAL_DMA_IRQHandler+0x156>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a32      	ldr	r2, [pc, #200]	; (8003b84 <HAL_DMA_IRQHandler+0x200>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d00a      	beq.n	8003ad4 <HAL_DMA_IRQHandler+0x150>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a31      	ldr	r2, [pc, #196]	; (8003b88 <HAL_DMA_IRQHandler+0x204>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d102      	bne.n	8003ace <HAL_DMA_IRQHandler+0x14a>
 8003ac8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003acc:	e00e      	b.n	8003aec <HAL_DMA_IRQHandler+0x168>
 8003ace:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ad2:	e00b      	b.n	8003aec <HAL_DMA_IRQHandler+0x168>
 8003ad4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ad8:	e008      	b.n	8003aec <HAL_DMA_IRQHandler+0x168>
 8003ada:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ade:	e005      	b.n	8003aec <HAL_DMA_IRQHandler+0x168>
 8003ae0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ae4:	e002      	b.n	8003aec <HAL_DMA_IRQHandler+0x168>
 8003ae6:	2320      	movs	r3, #32
 8003ae8:	e000      	b.n	8003aec <HAL_DMA_IRQHandler+0x168>
 8003aea:	2302      	movs	r3, #2
 8003aec:	4a27      	ldr	r2, [pc, #156]	; (8003b8c <HAL_DMA_IRQHandler+0x208>)
 8003aee:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d034      	beq.n	8003b6a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003b08:	e02f      	b.n	8003b6a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	2208      	movs	r2, #8
 8003b10:	409a      	lsls	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	4013      	ands	r3, r2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d028      	beq.n	8003b6c <HAL_DMA_IRQHandler+0x1e8>
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	f003 0308 	and.w	r3, r3, #8
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d023      	beq.n	8003b6c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 020e 	bic.w	r2, r2, #14
 8003b32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b42:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d004      	beq.n	8003b6c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	4798      	blx	r3
    }
  }
  return;
 8003b6a:	bf00      	nop
 8003b6c:	bf00      	nop
}
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40020008 	.word	0x40020008
 8003b78:	4002001c 	.word	0x4002001c
 8003b7c:	40020030 	.word	0x40020030
 8003b80:	40020044 	.word	0x40020044
 8003b84:	40020058 	.word	0x40020058
 8003b88:	4002006c 	.word	0x4002006c
 8003b8c:	40020000 	.word	0x40020000

08003b90 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
 8003b9c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8003bac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2b10      	cmp	r3, #16
 8003bbc:	d108      	bne.n	8003bd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003bce:	e007      	b.n	8003be0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	60da      	str	r2, [r3, #12]
}
 8003be0:	bf00      	nop
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bc80      	pop	{r7}
 8003be8:	4770      	bx	lr
	...

08003bec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b08b      	sub	sp, #44	; 0x2c
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bfe:	e127      	b.n	8003e50 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003c00:	2201      	movs	r2, #1
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	69fa      	ldr	r2, [r7, #28]
 8003c10:	4013      	ands	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	f040 8116 	bne.w	8003e4a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b12      	cmp	r3, #18
 8003c24:	d034      	beq.n	8003c90 <HAL_GPIO_Init+0xa4>
 8003c26:	2b12      	cmp	r3, #18
 8003c28:	d80d      	bhi.n	8003c46 <HAL_GPIO_Init+0x5a>
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d02b      	beq.n	8003c86 <HAL_GPIO_Init+0x9a>
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d804      	bhi.n	8003c3c <HAL_GPIO_Init+0x50>
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d031      	beq.n	8003c9a <HAL_GPIO_Init+0xae>
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d01c      	beq.n	8003c74 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003c3a:	e048      	b.n	8003cce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003c3c:	2b03      	cmp	r3, #3
 8003c3e:	d043      	beq.n	8003cc8 <HAL_GPIO_Init+0xdc>
 8003c40:	2b11      	cmp	r3, #17
 8003c42:	d01b      	beq.n	8003c7c <HAL_GPIO_Init+0x90>
          break;
 8003c44:	e043      	b.n	8003cce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003c46:	4a89      	ldr	r2, [pc, #548]	; (8003e6c <HAL_GPIO_Init+0x280>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d026      	beq.n	8003c9a <HAL_GPIO_Init+0xae>
 8003c4c:	4a87      	ldr	r2, [pc, #540]	; (8003e6c <HAL_GPIO_Init+0x280>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d806      	bhi.n	8003c60 <HAL_GPIO_Init+0x74>
 8003c52:	4a87      	ldr	r2, [pc, #540]	; (8003e70 <HAL_GPIO_Init+0x284>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d020      	beq.n	8003c9a <HAL_GPIO_Init+0xae>
 8003c58:	4a86      	ldr	r2, [pc, #536]	; (8003e74 <HAL_GPIO_Init+0x288>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d01d      	beq.n	8003c9a <HAL_GPIO_Init+0xae>
          break;
 8003c5e:	e036      	b.n	8003cce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003c60:	4a85      	ldr	r2, [pc, #532]	; (8003e78 <HAL_GPIO_Init+0x28c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d019      	beq.n	8003c9a <HAL_GPIO_Init+0xae>
 8003c66:	4a85      	ldr	r2, [pc, #532]	; (8003e7c <HAL_GPIO_Init+0x290>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d016      	beq.n	8003c9a <HAL_GPIO_Init+0xae>
 8003c6c:	4a84      	ldr	r2, [pc, #528]	; (8003e80 <HAL_GPIO_Init+0x294>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d013      	beq.n	8003c9a <HAL_GPIO_Init+0xae>
          break;
 8003c72:	e02c      	b.n	8003cce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	623b      	str	r3, [r7, #32]
          break;
 8003c7a:	e028      	b.n	8003cce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	3304      	adds	r3, #4
 8003c82:	623b      	str	r3, [r7, #32]
          break;
 8003c84:	e023      	b.n	8003cce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	3308      	adds	r3, #8
 8003c8c:	623b      	str	r3, [r7, #32]
          break;
 8003c8e:	e01e      	b.n	8003cce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	330c      	adds	r3, #12
 8003c96:	623b      	str	r3, [r7, #32]
          break;
 8003c98:	e019      	b.n	8003cce <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d102      	bne.n	8003ca8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003ca2:	2304      	movs	r3, #4
 8003ca4:	623b      	str	r3, [r7, #32]
          break;
 8003ca6:	e012      	b.n	8003cce <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d105      	bne.n	8003cbc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003cb0:	2308      	movs	r3, #8
 8003cb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	69fa      	ldr	r2, [r7, #28]
 8003cb8:	611a      	str	r2, [r3, #16]
          break;
 8003cba:	e008      	b.n	8003cce <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003cbc:	2308      	movs	r3, #8
 8003cbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	69fa      	ldr	r2, [r7, #28]
 8003cc4:	615a      	str	r2, [r3, #20]
          break;
 8003cc6:	e002      	b.n	8003cce <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	623b      	str	r3, [r7, #32]
          break;
 8003ccc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	2bff      	cmp	r3, #255	; 0xff
 8003cd2:	d801      	bhi.n	8003cd8 <HAL_GPIO_Init+0xec>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	e001      	b.n	8003cdc <HAL_GPIO_Init+0xf0>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3304      	adds	r3, #4
 8003cdc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	2bff      	cmp	r3, #255	; 0xff
 8003ce2:	d802      	bhi.n	8003cea <HAL_GPIO_Init+0xfe>
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	e002      	b.n	8003cf0 <HAL_GPIO_Init+0x104>
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	3b08      	subs	r3, #8
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	210f      	movs	r1, #15
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfe:	43db      	mvns	r3, r3
 8003d00:	401a      	ands	r2, r3
 8003d02:	6a39      	ldr	r1, [r7, #32]
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 8096 	beq.w	8003e4a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003d1e:	4b59      	ldr	r3, [pc, #356]	; (8003e84 <HAL_GPIO_Init+0x298>)
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	4a58      	ldr	r2, [pc, #352]	; (8003e84 <HAL_GPIO_Init+0x298>)
 8003d24:	f043 0301 	orr.w	r3, r3, #1
 8003d28:	6193      	str	r3, [r2, #24]
 8003d2a:	4b56      	ldr	r3, [pc, #344]	; (8003e84 <HAL_GPIO_Init+0x298>)
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	60bb      	str	r3, [r7, #8]
 8003d34:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003d36:	4a54      	ldr	r2, [pc, #336]	; (8003e88 <HAL_GPIO_Init+0x29c>)
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	089b      	lsrs	r3, r3, #2
 8003d3c:	3302      	adds	r3, #2
 8003d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d42:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	220f      	movs	r2, #15
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	43db      	mvns	r3, r3
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4013      	ands	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a4b      	ldr	r2, [pc, #300]	; (8003e8c <HAL_GPIO_Init+0x2a0>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d013      	beq.n	8003d8a <HAL_GPIO_Init+0x19e>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a4a      	ldr	r2, [pc, #296]	; (8003e90 <HAL_GPIO_Init+0x2a4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d00d      	beq.n	8003d86 <HAL_GPIO_Init+0x19a>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a49      	ldr	r2, [pc, #292]	; (8003e94 <HAL_GPIO_Init+0x2a8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d007      	beq.n	8003d82 <HAL_GPIO_Init+0x196>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a48      	ldr	r2, [pc, #288]	; (8003e98 <HAL_GPIO_Init+0x2ac>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d101      	bne.n	8003d7e <HAL_GPIO_Init+0x192>
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e006      	b.n	8003d8c <HAL_GPIO_Init+0x1a0>
 8003d7e:	2304      	movs	r3, #4
 8003d80:	e004      	b.n	8003d8c <HAL_GPIO_Init+0x1a0>
 8003d82:	2302      	movs	r3, #2
 8003d84:	e002      	b.n	8003d8c <HAL_GPIO_Init+0x1a0>
 8003d86:	2301      	movs	r3, #1
 8003d88:	e000      	b.n	8003d8c <HAL_GPIO_Init+0x1a0>
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d8e:	f002 0203 	and.w	r2, r2, #3
 8003d92:	0092      	lsls	r2, r2, #2
 8003d94:	4093      	lsls	r3, r2
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003d9c:	493a      	ldr	r1, [pc, #232]	; (8003e88 <HAL_GPIO_Init+0x29c>)
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	089b      	lsrs	r3, r3, #2
 8003da2:	3302      	adds	r3, #2
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d006      	beq.n	8003dc4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003db6:	4b39      	ldr	r3, [pc, #228]	; (8003e9c <HAL_GPIO_Init+0x2b0>)
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	4938      	ldr	r1, [pc, #224]	; (8003e9c <HAL_GPIO_Init+0x2b0>)
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	600b      	str	r3, [r1, #0]
 8003dc2:	e006      	b.n	8003dd2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003dc4:	4b35      	ldr	r3, [pc, #212]	; (8003e9c <HAL_GPIO_Init+0x2b0>)
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	4933      	ldr	r1, [pc, #204]	; (8003e9c <HAL_GPIO_Init+0x2b0>)
 8003dce:	4013      	ands	r3, r2
 8003dd0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d006      	beq.n	8003dec <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003dde:	4b2f      	ldr	r3, [pc, #188]	; (8003e9c <HAL_GPIO_Init+0x2b0>)
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	492e      	ldr	r1, [pc, #184]	; (8003e9c <HAL_GPIO_Init+0x2b0>)
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	604b      	str	r3, [r1, #4]
 8003dea:	e006      	b.n	8003dfa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003dec:	4b2b      	ldr	r3, [pc, #172]	; (8003e9c <HAL_GPIO_Init+0x2b0>)
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	43db      	mvns	r3, r3
 8003df4:	4929      	ldr	r1, [pc, #164]	; (8003e9c <HAL_GPIO_Init+0x2b0>)
 8003df6:	4013      	ands	r3, r2
 8003df8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d006      	beq.n	8003e14 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003e06:	4b25      	ldr	r3, [pc, #148]	; (8003e9c <HAL_GPIO_Init+0x2b0>)
 8003e08:	689a      	ldr	r2, [r3, #8]
 8003e0a:	4924      	ldr	r1, [pc, #144]	; (8003e9c <HAL_GPIO_Init+0x2b0>)
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	608b      	str	r3, [r1, #8]
 8003e12:	e006      	b.n	8003e22 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003e14:	4b21      	ldr	r3, [pc, #132]	; (8003e9c <HAL_GPIO_Init+0x2b0>)
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	43db      	mvns	r3, r3
 8003e1c:	491f      	ldr	r1, [pc, #124]	; (8003e9c <HAL_GPIO_Init+0x2b0>)
 8003e1e:	4013      	ands	r3, r2
 8003e20:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d006      	beq.n	8003e3c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e2e:	4b1b      	ldr	r3, [pc, #108]	; (8003e9c <HAL_GPIO_Init+0x2b0>)
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	491a      	ldr	r1, [pc, #104]	; (8003e9c <HAL_GPIO_Init+0x2b0>)
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60cb      	str	r3, [r1, #12]
 8003e3a:	e006      	b.n	8003e4a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e3c:	4b17      	ldr	r3, [pc, #92]	; (8003e9c <HAL_GPIO_Init+0x2b0>)
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	43db      	mvns	r3, r3
 8003e44:	4915      	ldr	r1, [pc, #84]	; (8003e9c <HAL_GPIO_Init+0x2b0>)
 8003e46:	4013      	ands	r3, r2
 8003e48:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	fa22 f303 	lsr.w	r3, r2, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f47f aed0 	bne.w	8003c00 <HAL_GPIO_Init+0x14>
  }
}
 8003e60:	bf00      	nop
 8003e62:	372c      	adds	r7, #44	; 0x2c
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bc80      	pop	{r7}
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	10210000 	.word	0x10210000
 8003e70:	10110000 	.word	0x10110000
 8003e74:	10120000 	.word	0x10120000
 8003e78:	10310000 	.word	0x10310000
 8003e7c:	10320000 	.word	0x10320000
 8003e80:	10220000 	.word	0x10220000
 8003e84:	40021000 	.word	0x40021000
 8003e88:	40010000 	.word	0x40010000
 8003e8c:	40010800 	.word	0x40010800
 8003e90:	40010c00 	.word	0x40010c00
 8003e94:	40011000 	.word	0x40011000
 8003e98:	40011400 	.word	0x40011400
 8003e9c:	40010400 	.word	0x40010400

08003ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	807b      	strh	r3, [r7, #2]
 8003eac:	4613      	mov	r3, r2
 8003eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003eb0:	787b      	ldrb	r3, [r7, #1]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003eb6:	887a      	ldrh	r2, [r7, #2]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003ebc:	e003      	b.n	8003ec6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ebe:	887b      	ldrh	r3, [r7, #2]
 8003ec0:	041a      	lsls	r2, r3, #16
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	611a      	str	r2, [r3, #16]
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc80      	pop	{r7}
 8003ece:	4770      	bx	lr

08003ed0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e10f      	b.n	8004102 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d106      	bne.n	8003efc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7ff f854 	bl	8002fa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2224      	movs	r2, #36	; 0x24
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0201 	bic.w	r2, r2, #1
 8003f12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f14:	f002 ff9c 	bl	8006e50 <HAL_RCC_GetPCLK1Freq>
 8003f18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	4a7b      	ldr	r2, [pc, #492]	; (800410c <HAL_I2C_Init+0x23c>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d807      	bhi.n	8003f34 <HAL_I2C_Init+0x64>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4a7a      	ldr	r2, [pc, #488]	; (8004110 <HAL_I2C_Init+0x240>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	bf94      	ite	ls
 8003f2c:	2301      	movls	r3, #1
 8003f2e:	2300      	movhi	r3, #0
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	e006      	b.n	8003f42 <HAL_I2C_Init+0x72>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4a77      	ldr	r2, [pc, #476]	; (8004114 <HAL_I2C_Init+0x244>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	bf94      	ite	ls
 8003f3c:	2301      	movls	r3, #1
 8003f3e:	2300      	movhi	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e0db      	b.n	8004102 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	4a72      	ldr	r2, [pc, #456]	; (8004118 <HAL_I2C_Init+0x248>)
 8003f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f52:	0c9b      	lsrs	r3, r3, #18
 8003f54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	4a64      	ldr	r2, [pc, #400]	; (800410c <HAL_I2C_Init+0x23c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d802      	bhi.n	8003f84 <HAL_I2C_Init+0xb4>
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	3301      	adds	r3, #1
 8003f82:	e009      	b.n	8003f98 <HAL_I2C_Init+0xc8>
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f8a:	fb02 f303 	mul.w	r3, r2, r3
 8003f8e:	4a63      	ldr	r2, [pc, #396]	; (800411c <HAL_I2C_Init+0x24c>)
 8003f90:	fba2 2303 	umull	r2, r3, r2, r3
 8003f94:	099b      	lsrs	r3, r3, #6
 8003f96:	3301      	adds	r3, #1
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6812      	ldr	r2, [r2, #0]
 8003f9c:	430b      	orrs	r3, r1
 8003f9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003faa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	4956      	ldr	r1, [pc, #344]	; (800410c <HAL_I2C_Init+0x23c>)
 8003fb4:	428b      	cmp	r3, r1
 8003fb6:	d80d      	bhi.n	8003fd4 <HAL_I2C_Init+0x104>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	1e59      	subs	r1, r3, #1
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	bf38      	it	cc
 8003fd0:	2304      	movcc	r3, #4
 8003fd2:	e04f      	b.n	8004074 <HAL_I2C_Init+0x1a4>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d111      	bne.n	8004000 <HAL_I2C_Init+0x130>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	1e58      	subs	r0, r3, #1
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6859      	ldr	r1, [r3, #4]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	440b      	add	r3, r1
 8003fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fee:	3301      	adds	r3, #1
 8003ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	bf0c      	ite	eq
 8003ff8:	2301      	moveq	r3, #1
 8003ffa:	2300      	movne	r3, #0
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	e012      	b.n	8004026 <HAL_I2C_Init+0x156>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	1e58      	subs	r0, r3, #1
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6859      	ldr	r1, [r3, #4]
 8004008:	460b      	mov	r3, r1
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	0099      	lsls	r1, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	fbb0 f3f3 	udiv	r3, r0, r3
 8004016:	3301      	adds	r3, #1
 8004018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800401c:	2b00      	cmp	r3, #0
 800401e:	bf0c      	ite	eq
 8004020:	2301      	moveq	r3, #1
 8004022:	2300      	movne	r3, #0
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <HAL_I2C_Init+0x15e>
 800402a:	2301      	movs	r3, #1
 800402c:	e022      	b.n	8004074 <HAL_I2C_Init+0x1a4>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10e      	bne.n	8004054 <HAL_I2C_Init+0x184>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	1e58      	subs	r0, r3, #1
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6859      	ldr	r1, [r3, #4]
 800403e:	460b      	mov	r3, r1
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	440b      	add	r3, r1
 8004044:	fbb0 f3f3 	udiv	r3, r0, r3
 8004048:	3301      	adds	r3, #1
 800404a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800404e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004052:	e00f      	b.n	8004074 <HAL_I2C_Init+0x1a4>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	1e58      	subs	r0, r3, #1
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6859      	ldr	r1, [r3, #4]
 800405c:	460b      	mov	r3, r1
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	440b      	add	r3, r1
 8004062:	0099      	lsls	r1, r3, #2
 8004064:	440b      	add	r3, r1
 8004066:	fbb0 f3f3 	udiv	r3, r0, r3
 800406a:	3301      	adds	r3, #1
 800406c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004070:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	6809      	ldr	r1, [r1, #0]
 8004078:	4313      	orrs	r3, r2
 800407a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69da      	ldr	r2, [r3, #28]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	431a      	orrs	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6911      	ldr	r1, [r2, #16]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	68d2      	ldr	r2, [r2, #12]
 80040ae:	4311      	orrs	r1, r2
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6812      	ldr	r2, [r2, #0]
 80040b4:	430b      	orrs	r3, r1
 80040b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	695a      	ldr	r2, [r3, #20]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f042 0201 	orr.w	r2, r2, #1
 80040e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2220      	movs	r2, #32
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	000186a0 	.word	0x000186a0
 8004110:	001e847f 	.word	0x001e847f
 8004114:	003d08ff 	.word	0x003d08ff
 8004118:	431bde83 	.word	0x431bde83
 800411c:	10624dd3 	.word	0x10624dd3

08004120 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b088      	sub	sp, #32
 8004124:	af02      	add	r7, sp, #8
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	607a      	str	r2, [r7, #4]
 800412a:	461a      	mov	r2, r3
 800412c:	460b      	mov	r3, r1
 800412e:	817b      	strh	r3, [r7, #10]
 8004130:	4613      	mov	r3, r2
 8004132:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004134:	f7ff f9b0 	bl	8003498 <HAL_GetTick>
 8004138:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b20      	cmp	r3, #32
 8004144:	f040 80e0 	bne.w	8004308 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	2319      	movs	r3, #25
 800414e:	2201      	movs	r2, #1
 8004150:	4970      	ldr	r1, [pc, #448]	; (8004314 <HAL_I2C_Master_Transmit+0x1f4>)
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f001 f9e8 	bl	8005528 <I2C_WaitOnFlagUntilTimeout>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800415e:	2302      	movs	r3, #2
 8004160:	e0d3      	b.n	800430a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004168:	2b01      	cmp	r3, #1
 800416a:	d101      	bne.n	8004170 <HAL_I2C_Master_Transmit+0x50>
 800416c:	2302      	movs	r3, #2
 800416e:	e0cc      	b.n	800430a <HAL_I2C_Master_Transmit+0x1ea>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b01      	cmp	r3, #1
 8004184:	d007      	beq.n	8004196 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f042 0201 	orr.w	r2, r2, #1
 8004194:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2221      	movs	r2, #33	; 0x21
 80041aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2210      	movs	r2, #16
 80041b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	893a      	ldrh	r2, [r7, #8]
 80041c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	4a50      	ldr	r2, [pc, #320]	; (8004318 <HAL_I2C_Master_Transmit+0x1f8>)
 80041d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80041d8:	8979      	ldrh	r1, [r7, #10]
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	6a3a      	ldr	r2, [r7, #32]
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 ff1c 	bl	800501c <I2C_MasterRequestWrite>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e08d      	b.n	800430a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ee:	2300      	movs	r3, #0
 80041f0:	613b      	str	r3, [r7, #16]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	613b      	str	r3, [r7, #16]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004204:	e066      	b.n	80042d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	6a39      	ldr	r1, [r7, #32]
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f001 fa62 	bl	80056d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00d      	beq.n	8004232 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	2b04      	cmp	r3, #4
 800421c:	d107      	bne.n	800422e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800422c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e06b      	b.n	800430a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	781a      	ldrb	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424c:	b29b      	uxth	r3, r3
 800424e:	3b01      	subs	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800425a:	3b01      	subs	r3, #1
 800425c:	b29a      	uxth	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b04      	cmp	r3, #4
 800426e:	d11b      	bne.n	80042a8 <HAL_I2C_Master_Transmit+0x188>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004274:	2b00      	cmp	r3, #0
 8004276:	d017      	beq.n	80042a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	781a      	ldrb	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	1c5a      	adds	r2, r3, #1
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004292:	b29b      	uxth	r3, r3
 8004294:	3b01      	subs	r3, #1
 8004296:	b29a      	uxth	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	6a39      	ldr	r1, [r7, #32]
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f001 fa52 	bl	8005756 <I2C_WaitOnBTFFlagUntilTimeout>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00d      	beq.n	80042d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042bc:	2b04      	cmp	r3, #4
 80042be:	d107      	bne.n	80042d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e01a      	b.n	800430a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d194      	bne.n	8004206 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2220      	movs	r2, #32
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004304:	2300      	movs	r3, #0
 8004306:	e000      	b.n	800430a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004308:	2302      	movs	r3, #2
  }
}
 800430a:	4618      	mov	r0, r3
 800430c:	3718      	adds	r7, #24
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	00100002 	.word	0x00100002
 8004318:	ffff0000 	.word	0xffff0000

0800431c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08c      	sub	sp, #48	; 0x30
 8004320:	af02      	add	r7, sp, #8
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	607a      	str	r2, [r7, #4]
 8004326:	461a      	mov	r2, r3
 8004328:	460b      	mov	r3, r1
 800432a:	817b      	strh	r3, [r7, #10]
 800432c:	4613      	mov	r3, r2
 800432e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004330:	f7ff f8b2 	bl	8003498 <HAL_GetTick>
 8004334:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b20      	cmp	r3, #32
 8004340:	f040 8213 	bne.w	800476a <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	2319      	movs	r3, #25
 800434a:	2201      	movs	r2, #1
 800434c:	497e      	ldr	r1, [pc, #504]	; (8004548 <HAL_I2C_Master_Receive+0x22c>)
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f001 f8ea 	bl	8005528 <I2C_WaitOnFlagUntilTimeout>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800435a:	2302      	movs	r3, #2
 800435c:	e206      	b.n	800476c <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_I2C_Master_Receive+0x50>
 8004368:	2302      	movs	r3, #2
 800436a:	e1ff      	b.n	800476c <HAL_I2C_Master_Receive+0x450>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b01      	cmp	r3, #1
 8004380:	d007      	beq.n	8004392 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f042 0201 	orr.w	r2, r2, #1
 8004390:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2222      	movs	r2, #34	; 0x22
 80043a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2210      	movs	r2, #16
 80043ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	893a      	ldrh	r2, [r7, #8]
 80043c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	4a5e      	ldr	r2, [pc, #376]	; (800454c <HAL_I2C_Master_Receive+0x230>)
 80043d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80043d4:	8979      	ldrh	r1, [r7, #10]
 80043d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f000 fe94 	bl	8005108 <I2C_MasterRequestRead>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e1c0      	b.n	800476c <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d113      	bne.n	800441a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043f2:	2300      	movs	r3, #0
 80043f4:	623b      	str	r3, [r7, #32]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	623b      	str	r3, [r7, #32]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	623b      	str	r3, [r7, #32]
 8004406:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	e194      	b.n	8004744 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441e:	2b01      	cmp	r3, #1
 8004420:	d11d      	bne.n	800445e <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004430:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004432:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004434:	2300      	movs	r3, #0
 8004436:	61fb      	str	r3, [r7, #28]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	61fb      	str	r3, [r7, #28]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	61fb      	str	r3, [r7, #28]
 8004448:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004458:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800445a:	b662      	cpsie	i
 800445c:	e172      	b.n	8004744 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004462:	2b02      	cmp	r3, #2
 8004464:	d11d      	bne.n	80044a2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004474:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004476:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004478:	2300      	movs	r3, #0
 800447a:	61bb      	str	r3, [r7, #24]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	61bb      	str	r3, [r7, #24]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	61bb      	str	r3, [r7, #24]
 800448c:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800449c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800449e:	b662      	cpsie	i
 80044a0:	e150      	b.n	8004744 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044b2:	2300      	movs	r3, #0
 80044b4:	617b      	str	r3, [r7, #20]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	617b      	str	r3, [r7, #20]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	617b      	str	r3, [r7, #20]
 80044c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80044c8:	e13c      	b.n	8004744 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ce:	2b03      	cmp	r3, #3
 80044d0:	f200 80f5 	bhi.w	80046be <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d123      	bne.n	8004524 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f001 f979 	bl	80057d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e13d      	b.n	800476c <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691a      	ldr	r2, [r3, #16]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004518:	b29b      	uxth	r3, r3
 800451a:	3b01      	subs	r3, #1
 800451c:	b29a      	uxth	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004522:	e10f      	b.n	8004744 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004528:	2b02      	cmp	r3, #2
 800452a:	d150      	bne.n	80045ce <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004532:	2200      	movs	r2, #0
 8004534:	4906      	ldr	r1, [pc, #24]	; (8004550 <HAL_I2C_Master_Receive+0x234>)
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 fff6 	bl	8005528 <I2C_WaitOnFlagUntilTimeout>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d008      	beq.n	8004554 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e112      	b.n	800476c <HAL_I2C_Master_Receive+0x450>
 8004546:	bf00      	nop
 8004548:	00100002 	.word	0x00100002
 800454c:	ffff0000 	.word	0xffff0000
 8004550:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004554:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004564:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	691a      	ldr	r2, [r3, #16]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	b2d2      	uxtb	r2, r2
 8004572:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004582:	3b01      	subs	r3, #1
 8004584:	b29a      	uxth	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458e:	b29b      	uxth	r3, r3
 8004590:	3b01      	subs	r3, #1
 8004592:	b29a      	uxth	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004598:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	691a      	ldr	r2, [r3, #16]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	b2d2      	uxtb	r2, r2
 80045a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	1c5a      	adds	r2, r3, #1
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	3b01      	subs	r3, #1
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045cc:	e0ba      	b.n	8004744 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d4:	2200      	movs	r2, #0
 80045d6:	4967      	ldr	r1, [pc, #412]	; (8004774 <HAL_I2C_Master_Receive+0x458>)
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 ffa5 	bl	8005528 <I2C_WaitOnFlagUntilTimeout>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e0c1      	b.n	800476c <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80045f8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	691a      	ldr	r2, [r3, #16]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	1c5a      	adds	r2, r3, #1
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004616:	3b01      	subs	r3, #1
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004622:	b29b      	uxth	r3, r3
 8004624:	3b01      	subs	r3, #1
 8004626:	b29a      	uxth	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004632:	2200      	movs	r2, #0
 8004634:	494f      	ldr	r1, [pc, #316]	; (8004774 <HAL_I2C_Master_Receive+0x458>)
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 ff76 	bl	8005528 <I2C_WaitOnFlagUntilTimeout>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e092      	b.n	800476c <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004654:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691a      	ldr	r2, [r3, #16]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	b2d2      	uxtb	r2, r2
 8004662:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004672:	3b01      	subs	r3, #1
 8004674:	b29a      	uxth	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004688:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	691a      	ldr	r2, [r3, #16]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	b2d2      	uxtb	r2, r2
 8004696:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	1c5a      	adds	r2, r3, #1
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a6:	3b01      	subs	r3, #1
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046bc:	e042      	b.n	8004744 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f001 f888 	bl	80057d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e04c      	b.n	800476c <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	691a      	ldr	r2, [r3, #16]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046dc:	b2d2      	uxtb	r2, r2
 80046de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	f003 0304 	and.w	r3, r3, #4
 800470e:	2b04      	cmp	r3, #4
 8004710:	d118      	bne.n	8004744 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	691a      	ldr	r2, [r3, #16]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	b2d2      	uxtb	r2, r2
 800471e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	1c5a      	adds	r2, r3, #1
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472e:	3b01      	subs	r3, #1
 8004730:	b29a      	uxth	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800473a:	b29b      	uxth	r3, r3
 800473c:	3b01      	subs	r3, #1
 800473e:	b29a      	uxth	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004748:	2b00      	cmp	r3, #0
 800474a:	f47f aebe 	bne.w	80044ca <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2220      	movs	r2, #32
 8004752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004766:	2300      	movs	r3, #0
 8004768:	e000      	b.n	800476c <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 800476a:	2302      	movs	r3, #2
  }
}
 800476c:	4618      	mov	r0, r3
 800476e:	3728      	adds	r7, #40	; 0x28
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	00010004 	.word	0x00010004

08004778 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b088      	sub	sp, #32
 800477c:	af02      	add	r7, sp, #8
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	4608      	mov	r0, r1
 8004782:	4611      	mov	r1, r2
 8004784:	461a      	mov	r2, r3
 8004786:	4603      	mov	r3, r0
 8004788:	817b      	strh	r3, [r7, #10]
 800478a:	460b      	mov	r3, r1
 800478c:	813b      	strh	r3, [r7, #8]
 800478e:	4613      	mov	r3, r2
 8004790:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004792:	f7fe fe81 	bl	8003498 <HAL_GetTick>
 8004796:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b20      	cmp	r3, #32
 80047a2:	f040 80d9 	bne.w	8004958 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	2319      	movs	r3, #25
 80047ac:	2201      	movs	r2, #1
 80047ae:	496d      	ldr	r1, [pc, #436]	; (8004964 <HAL_I2C_Mem_Write+0x1ec>)
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 feb9 	bl	8005528 <I2C_WaitOnFlagUntilTimeout>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80047bc:	2302      	movs	r3, #2
 80047be:	e0cc      	b.n	800495a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d101      	bne.n	80047ce <HAL_I2C_Mem_Write+0x56>
 80047ca:	2302      	movs	r3, #2
 80047cc:	e0c5      	b.n	800495a <HAL_I2C_Mem_Write+0x1e2>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d007      	beq.n	80047f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0201 	orr.w	r2, r2, #1
 80047f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004802:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2221      	movs	r2, #33	; 0x21
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2240      	movs	r2, #64	; 0x40
 8004810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6a3a      	ldr	r2, [r7, #32]
 800481e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004824:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482a:	b29a      	uxth	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4a4d      	ldr	r2, [pc, #308]	; (8004968 <HAL_I2C_Mem_Write+0x1f0>)
 8004834:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004836:	88f8      	ldrh	r0, [r7, #6]
 8004838:	893a      	ldrh	r2, [r7, #8]
 800483a:	8979      	ldrh	r1, [r7, #10]
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	9301      	str	r3, [sp, #4]
 8004840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	4603      	mov	r3, r0
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 fd14 	bl	8005274 <I2C_RequestMemoryWrite>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d052      	beq.n	80048f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e081      	b.n	800495a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 ff3a 	bl	80056d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00d      	beq.n	8004882 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	2b04      	cmp	r3, #4
 800486c:	d107      	bne.n	800487e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800487c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e06b      	b.n	800495a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	781a      	ldrb	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004892:	1c5a      	adds	r2, r3, #1
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800489c:	3b01      	subs	r3, #1
 800489e:	b29a      	uxth	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	3b01      	subs	r3, #1
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b04      	cmp	r3, #4
 80048be:	d11b      	bne.n	80048f8 <HAL_I2C_Mem_Write+0x180>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d017      	beq.n	80048f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	781a      	ldrb	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	1c5a      	adds	r2, r3, #1
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e2:	3b01      	subs	r3, #1
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	3b01      	subs	r3, #1
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1aa      	bne.n	8004856 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f000 ff26 	bl	8005756 <I2C_WaitOnBTFFlagUntilTimeout>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00d      	beq.n	800492c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004914:	2b04      	cmp	r3, #4
 8004916:	d107      	bne.n	8004928 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004926:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e016      	b.n	800495a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800493a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2220      	movs	r2, #32
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004954:	2300      	movs	r3, #0
 8004956:	e000      	b.n	800495a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004958:	2302      	movs	r3, #2
  }
}
 800495a:	4618      	mov	r0, r3
 800495c:	3718      	adds	r7, #24
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	00100002 	.word	0x00100002
 8004968:	ffff0000 	.word	0xffff0000

0800496c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b08c      	sub	sp, #48	; 0x30
 8004970:	af02      	add	r7, sp, #8
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	4608      	mov	r0, r1
 8004976:	4611      	mov	r1, r2
 8004978:	461a      	mov	r2, r3
 800497a:	4603      	mov	r3, r0
 800497c:	817b      	strh	r3, [r7, #10]
 800497e:	460b      	mov	r3, r1
 8004980:	813b      	strh	r3, [r7, #8]
 8004982:	4613      	mov	r3, r2
 8004984:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004986:	f7fe fd87 	bl	8003498 <HAL_GetTick>
 800498a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b20      	cmp	r3, #32
 8004996:	f040 8218 	bne.w	8004dca <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	2319      	movs	r3, #25
 80049a0:	2201      	movs	r2, #1
 80049a2:	4981      	ldr	r1, [pc, #516]	; (8004ba8 <HAL_I2C_Mem_Read+0x23c>)
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f000 fdbf 	bl	8005528 <I2C_WaitOnFlagUntilTimeout>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d001      	beq.n	80049b4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80049b0:	2302      	movs	r3, #2
 80049b2:	e20b      	b.n	8004dcc <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d101      	bne.n	80049c2 <HAL_I2C_Mem_Read+0x56>
 80049be:	2302      	movs	r3, #2
 80049c0:	e204      	b.n	8004dcc <HAL_I2C_Mem_Read+0x460>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d007      	beq.n	80049e8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f042 0201 	orr.w	r2, r2, #1
 80049e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2222      	movs	r2, #34	; 0x22
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2240      	movs	r2, #64	; 0x40
 8004a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004a18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4a61      	ldr	r2, [pc, #388]	; (8004bac <HAL_I2C_Mem_Read+0x240>)
 8004a28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a2a:	88f8      	ldrh	r0, [r7, #6]
 8004a2c:	893a      	ldrh	r2, [r7, #8]
 8004a2e:	8979      	ldrh	r1, [r7, #10]
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	9301      	str	r3, [sp, #4]
 8004a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	4603      	mov	r3, r0
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f000 fca4 	bl	8005388 <I2C_RequestMemoryRead>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e1c0      	b.n	8004dcc <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d113      	bne.n	8004a7a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a52:	2300      	movs	r3, #0
 8004a54:	623b      	str	r3, [r7, #32]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	623b      	str	r3, [r7, #32]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	623b      	str	r3, [r7, #32]
 8004a66:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	e194      	b.n	8004da4 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d11d      	bne.n	8004abe <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a90:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a92:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a94:	2300      	movs	r3, #0
 8004a96:	61fb      	str	r3, [r7, #28]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	61fb      	str	r3, [r7, #28]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	61fb      	str	r3, [r7, #28]
 8004aa8:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ab8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004aba:	b662      	cpsie	i
 8004abc:	e172      	b.n	8004da4 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d11d      	bne.n	8004b02 <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ad4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ad6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ad8:	2300      	movs	r3, #0
 8004ada:	61bb      	str	r3, [r7, #24]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	61bb      	str	r3, [r7, #24]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	61bb      	str	r3, [r7, #24]
 8004aec:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004afc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004afe:	b662      	cpsie	i
 8004b00:	e150      	b.n	8004da4 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b10:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b12:	2300      	movs	r3, #0
 8004b14:	617b      	str	r3, [r7, #20]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	617b      	str	r3, [r7, #20]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	617b      	str	r3, [r7, #20]
 8004b26:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004b28:	e13c      	b.n	8004da4 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	f200 80f5 	bhi.w	8004d1e <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d123      	bne.n	8004b84 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f000 fe49 	bl	80057d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e13d      	b.n	8004dcc <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	691a      	ldr	r2, [r3, #16]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b82:	e10f      	b.n	8004da4 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d150      	bne.n	8004c2e <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b92:	2200      	movs	r2, #0
 8004b94:	4906      	ldr	r1, [pc, #24]	; (8004bb0 <HAL_I2C_Mem_Read+0x244>)
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 fcc6 	bl	8005528 <I2C_WaitOnFlagUntilTimeout>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d008      	beq.n	8004bb4 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e112      	b.n	8004dcc <HAL_I2C_Mem_Read+0x460>
 8004ba6:	bf00      	nop
 8004ba8:	00100002 	.word	0x00100002
 8004bac:	ffff0000 	.word	0xffff0000
 8004bb0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004bb4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bc4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	691a      	ldr	r2, [r3, #16]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	b2d2      	uxtb	r2, r2
 8004bd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	1c5a      	adds	r2, r3, #1
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be2:	3b01      	subs	r3, #1
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004bf8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	691a      	ldr	r2, [r3, #16]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c04:	b2d2      	uxtb	r2, r2
 8004c06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	1c5a      	adds	r2, r3, #1
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c16:	3b01      	subs	r3, #1
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	3b01      	subs	r3, #1
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c2c:	e0ba      	b.n	8004da4 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c34:	2200      	movs	r2, #0
 8004c36:	4967      	ldr	r1, [pc, #412]	; (8004dd4 <HAL_I2C_Mem_Read+0x468>)
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 fc75 	bl	8005528 <I2C_WaitOnFlagUntilTimeout>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e0c1      	b.n	8004dcc <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c56:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004c58:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	691a      	ldr	r2, [r3, #16]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c64:	b2d2      	uxtb	r2, r2
 8004c66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6c:	1c5a      	adds	r2, r3, #1
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c76:	3b01      	subs	r3, #1
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	3b01      	subs	r3, #1
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c92:	2200      	movs	r2, #0
 8004c94:	494f      	ldr	r1, [pc, #316]	; (8004dd4 <HAL_I2C_Mem_Read+0x468>)
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 fc46 	bl	8005528 <I2C_WaitOnFlagUntilTimeout>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e092      	b.n	8004dcc <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cb4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	691a      	ldr	r2, [r3, #16]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	b2d2      	uxtb	r2, r2
 8004cc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	1c5a      	adds	r2, r3, #1
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004ce8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	691a      	ldr	r2, [r3, #16]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf4:	b2d2      	uxtb	r2, r2
 8004cf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	1c5a      	adds	r2, r3, #1
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d06:	3b01      	subs	r3, #1
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	3b01      	subs	r3, #1
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d1c:	e042      	b.n	8004da4 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f000 fd58 	bl	80057d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e04c      	b.n	8004dcc <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	691a      	ldr	r2, [r3, #16]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3c:	b2d2      	uxtb	r2, r2
 8004d3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	1c5a      	adds	r2, r3, #1
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	f003 0304 	and.w	r3, r3, #4
 8004d6e:	2b04      	cmp	r3, #4
 8004d70:	d118      	bne.n	8004da4 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	691a      	ldr	r2, [r3, #16]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	b2d2      	uxtb	r2, r2
 8004d7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f47f aebe 	bne.w	8004b2a <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2220      	movs	r2, #32
 8004db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	e000      	b.n	8004dcc <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 8004dca:	2302      	movs	r3, #2
  }
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3728      	adds	r7, #40	; 0x28
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	00010004 	.word	0x00010004

08004dd8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08a      	sub	sp, #40	; 0x28
 8004ddc:	af02      	add	r7, sp, #8
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	607a      	str	r2, [r7, #4]
 8004de2:	603b      	str	r3, [r7, #0]
 8004de4:	460b      	mov	r3, r1
 8004de6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004de8:	f7fe fb56 	bl	8003498 <HAL_GetTick>
 8004dec:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004dee:	2301      	movs	r3, #1
 8004df0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b20      	cmp	r3, #32
 8004dfc:	f040 8105 	bne.w	800500a <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	2319      	movs	r3, #25
 8004e06:	2201      	movs	r2, #1
 8004e08:	4982      	ldr	r1, [pc, #520]	; (8005014 <HAL_I2C_IsDeviceReady+0x23c>)
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f000 fb8c 	bl	8005528 <I2C_WaitOnFlagUntilTimeout>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004e16:	2302      	movs	r3, #2
 8004e18:	e0f8      	b.n	800500c <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d101      	bne.n	8004e28 <HAL_I2C_IsDeviceReady+0x50>
 8004e24:	2302      	movs	r3, #2
 8004e26:	e0f1      	b.n	800500c <HAL_I2C_IsDeviceReady+0x234>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d007      	beq.n	8004e4e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f042 0201 	orr.w	r2, r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2224      	movs	r2, #36	; 0x24
 8004e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4a6a      	ldr	r2, [pc, #424]	; (8005018 <HAL_I2C_IsDeviceReady+0x240>)
 8004e70:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e80:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 fb4a 	bl	8005528 <I2C_WaitOnFlagUntilTimeout>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e0b6      	b.n	800500c <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e9e:	897b      	ldrh	r3, [r7, #10]
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004eac:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004eae:	f7fe faf3 	bl	8003498 <HAL_GetTick>
 8004eb2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	bf0c      	ite	eq
 8004ec2:	2301      	moveq	r3, #1
 8004ec4:	2300      	movne	r3, #0
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ed8:	bf0c      	ite	eq
 8004eda:	2301      	moveq	r3, #1
 8004edc:	2300      	movne	r3, #0
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004ee2:	e025      	b.n	8004f30 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ee4:	f7fe fad8 	bl	8003498 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d302      	bcc.n	8004efa <HAL_I2C_IsDeviceReady+0x122>
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d103      	bne.n	8004f02 <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	22a0      	movs	r2, #160	; 0xa0
 8004efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	bf0c      	ite	eq
 8004f10:	2301      	moveq	r3, #1
 8004f12:	2300      	movne	r3, #0
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f26:	bf0c      	ite	eq
 8004f28:	2301      	moveq	r3, #1
 8004f2a:	2300      	movne	r3, #0
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2ba0      	cmp	r3, #160	; 0xa0
 8004f3a:	d005      	beq.n	8004f48 <HAL_I2C_IsDeviceReady+0x170>
 8004f3c:	7dfb      	ldrb	r3, [r7, #23]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d102      	bne.n	8004f48 <HAL_I2C_IsDeviceReady+0x170>
 8004f42:	7dbb      	ldrb	r3, [r7, #22]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d0cd      	beq.n	8004ee4 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d129      	bne.n	8004fb2 <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f6c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f6e:	2300      	movs	r3, #0
 8004f70:	613b      	str	r3, [r7, #16]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	613b      	str	r3, [r7, #16]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	613b      	str	r3, [r7, #16]
 8004f82:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	2319      	movs	r3, #25
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	4921      	ldr	r1, [pc, #132]	; (8005014 <HAL_I2C_IsDeviceReady+0x23c>)
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f000 faca 	bl	8005528 <I2C_WaitOnFlagUntilTimeout>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e036      	b.n	800500c <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	e02c      	b.n	800500c <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fc0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fca:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	9300      	str	r3, [sp, #0]
 8004fd0:	2319      	movs	r3, #25
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	490f      	ldr	r1, [pc, #60]	; (8005014 <HAL_I2C_IsDeviceReady+0x23c>)
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f000 faa6 	bl	8005528 <I2C_WaitOnFlagUntilTimeout>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e012      	b.n	800500c <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	f4ff af3e 	bcc.w	8004e72 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2220      	movs	r2, #32
 8004ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 800500a:	2302      	movs	r3, #2
  }
}
 800500c:	4618      	mov	r0, r3
 800500e:	3720      	adds	r7, #32
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	00100002 	.word	0x00100002
 8005018:	ffff0000 	.word	0xffff0000

0800501c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b088      	sub	sp, #32
 8005020:	af02      	add	r7, sp, #8
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	607a      	str	r2, [r7, #4]
 8005026:	603b      	str	r3, [r7, #0]
 8005028:	460b      	mov	r3, r1
 800502a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005030:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	2b08      	cmp	r3, #8
 8005036:	d006      	beq.n	8005046 <I2C_MasterRequestWrite+0x2a>
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d003      	beq.n	8005046 <I2C_MasterRequestWrite+0x2a>
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005044:	d108      	bne.n	8005058 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	e00b      	b.n	8005070 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505c:	2b12      	cmp	r3, #18
 800505e:	d107      	bne.n	8005070 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800506e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f000 fa53 	bl	8005528 <I2C_WaitOnFlagUntilTimeout>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d001      	beq.n	800508c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e035      	b.n	80050f8 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005094:	d108      	bne.n	80050a8 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005096:	897b      	ldrh	r3, [r7, #10]
 8005098:	b2db      	uxtb	r3, r3
 800509a:	461a      	mov	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050a4:	611a      	str	r2, [r3, #16]
 80050a6:	e01b      	b.n	80050e0 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80050a8:	897b      	ldrh	r3, [r7, #10]
 80050aa:	11db      	asrs	r3, r3, #7
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	f003 0306 	and.w	r3, r3, #6
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	f063 030f 	orn	r3, r3, #15
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	490e      	ldr	r1, [pc, #56]	; (8005100 <I2C_MasterRequestWrite+0xe4>)
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f000 fa85 	bl	80055d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e010      	b.n	80050f8 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80050d6:	897b      	ldrh	r3, [r7, #10]
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	4907      	ldr	r1, [pc, #28]	; (8005104 <I2C_MasterRequestWrite+0xe8>)
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f000 fa75 	bl	80055d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d001      	beq.n	80050f6 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e000      	b.n	80050f8 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3718      	adds	r7, #24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	00010008 	.word	0x00010008
 8005104:	00010002 	.word	0x00010002

08005108 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b088      	sub	sp, #32
 800510c:	af02      	add	r7, sp, #8
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	607a      	str	r2, [r7, #4]
 8005112:	603b      	str	r3, [r7, #0]
 8005114:	460b      	mov	r3, r1
 8005116:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800512c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2b08      	cmp	r3, #8
 8005132:	d006      	beq.n	8005142 <I2C_MasterRequestRead+0x3a>
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d003      	beq.n	8005142 <I2C_MasterRequestRead+0x3a>
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005140:	d108      	bne.n	8005154 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	e00b      	b.n	800516c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005158:	2b11      	cmp	r3, #17
 800515a:	d107      	bne.n	800516c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800516a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f000 f9d5 	bl	8005528 <I2C_WaitOnFlagUntilTimeout>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e06d      	b.n	8005264 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005190:	d108      	bne.n	80051a4 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005192:	897b      	ldrh	r3, [r7, #10]
 8005194:	b2db      	uxtb	r3, r3
 8005196:	f043 0301 	orr.w	r3, r3, #1
 800519a:	b2da      	uxtb	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	611a      	str	r2, [r3, #16]
 80051a2:	e053      	b.n	800524c <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80051a4:	897b      	ldrh	r3, [r7, #10]
 80051a6:	11db      	asrs	r3, r3, #7
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	f003 0306 	and.w	r3, r3, #6
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	f063 030f 	orn	r3, r3, #15
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	492a      	ldr	r1, [pc, #168]	; (800526c <I2C_MasterRequestRead+0x164>)
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f000 fa07 	bl	80055d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e048      	b.n	8005264 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80051d2:	897b      	ldrh	r3, [r7, #10]
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	4923      	ldr	r1, [pc, #140]	; (8005270 <I2C_MasterRequestRead+0x168>)
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f000 f9f7 	bl	80055d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e038      	b.n	8005264 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051f2:	2300      	movs	r3, #0
 80051f4:	613b      	str	r3, [r7, #16]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	613b      	str	r3, [r7, #16]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	613b      	str	r3, [r7, #16]
 8005206:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005216:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f000 f97f 	bl	8005528 <I2C_WaitOnFlagUntilTimeout>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d001      	beq.n	8005234 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e017      	b.n	8005264 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005234:	897b      	ldrh	r3, [r7, #10]
 8005236:	11db      	asrs	r3, r3, #7
 8005238:	b2db      	uxtb	r3, r3
 800523a:	f003 0306 	and.w	r3, r3, #6
 800523e:	b2db      	uxtb	r3, r3
 8005240:	f063 030e 	orn	r3, r3, #14
 8005244:	b2da      	uxtb	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	4907      	ldr	r1, [pc, #28]	; (8005270 <I2C_MasterRequestRead+0x168>)
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f000 f9bf 	bl	80055d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e000      	b.n	8005264 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3718      	adds	r7, #24
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	00010008 	.word	0x00010008
 8005270:	00010002 	.word	0x00010002

08005274 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b088      	sub	sp, #32
 8005278:	af02      	add	r7, sp, #8
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	4608      	mov	r0, r1
 800527e:	4611      	mov	r1, r2
 8005280:	461a      	mov	r2, r3
 8005282:	4603      	mov	r3, r0
 8005284:	817b      	strh	r3, [r7, #10]
 8005286:	460b      	mov	r3, r1
 8005288:	813b      	strh	r3, [r7, #8]
 800528a:	4613      	mov	r3, r2
 800528c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800529c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	6a3b      	ldr	r3, [r7, #32]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 f93c 	bl	8005528 <I2C_WaitOnFlagUntilTimeout>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e05f      	b.n	800537a <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052ba:	897b      	ldrh	r3, [r7, #10]
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	461a      	mov	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	6a3a      	ldr	r2, [r7, #32]
 80052ce:	492d      	ldr	r1, [pc, #180]	; (8005384 <I2C_RequestMemoryWrite+0x110>)
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f000 f980 	bl	80055d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d001      	beq.n	80052e0 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e04c      	b.n	800537a <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052e0:	2300      	movs	r3, #0
 80052e2:	617b      	str	r3, [r7, #20]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	617b      	str	r3, [r7, #20]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	617b      	str	r3, [r7, #20]
 80052f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f8:	6a39      	ldr	r1, [r7, #32]
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 f9ea 	bl	80056d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00d      	beq.n	8005322 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	2b04      	cmp	r3, #4
 800530c:	d107      	bne.n	800531e <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800531c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e02b      	b.n	800537a <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005322:	88fb      	ldrh	r3, [r7, #6]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d105      	bne.n	8005334 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005328:	893b      	ldrh	r3, [r7, #8]
 800532a:	b2da      	uxtb	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	611a      	str	r2, [r3, #16]
 8005332:	e021      	b.n	8005378 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005334:	893b      	ldrh	r3, [r7, #8]
 8005336:	0a1b      	lsrs	r3, r3, #8
 8005338:	b29b      	uxth	r3, r3
 800533a:	b2da      	uxtb	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005344:	6a39      	ldr	r1, [r7, #32]
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 f9c4 	bl	80056d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00d      	beq.n	800536e <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	2b04      	cmp	r3, #4
 8005358:	d107      	bne.n	800536a <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005368:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e005      	b.n	800537a <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800536e:	893b      	ldrh	r3, [r7, #8]
 8005370:	b2da      	uxtb	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3718      	adds	r7, #24
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	00010002 	.word	0x00010002

08005388 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b088      	sub	sp, #32
 800538c:	af02      	add	r7, sp, #8
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	4608      	mov	r0, r1
 8005392:	4611      	mov	r1, r2
 8005394:	461a      	mov	r2, r3
 8005396:	4603      	mov	r3, r0
 8005398:	817b      	strh	r3, [r7, #10]
 800539a:	460b      	mov	r3, r1
 800539c:	813b      	strh	r3, [r7, #8]
 800539e:	4613      	mov	r3, r2
 80053a0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053b0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f000 f8aa 	bl	8005528 <I2C_WaitOnFlagUntilTimeout>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e09e      	b.n	800551c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053de:	897b      	ldrh	r3, [r7, #10]
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	461a      	mov	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f0:	6a3a      	ldr	r2, [r7, #32]
 80053f2:	494c      	ldr	r1, [pc, #304]	; (8005524 <I2C_RequestMemoryRead+0x19c>)
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 f8ee 	bl	80055d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e08b      	b.n	800551c <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005404:	2300      	movs	r3, #0
 8005406:	617b      	str	r3, [r7, #20]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	617b      	str	r3, [r7, #20]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	617b      	str	r3, [r7, #20]
 8005418:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800541a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800541c:	6a39      	ldr	r1, [r7, #32]
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f000 f958 	bl	80056d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00d      	beq.n	8005446 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	2b04      	cmp	r3, #4
 8005430:	d107      	bne.n	8005442 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005440:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e06a      	b.n	800551c <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005446:	88fb      	ldrh	r3, [r7, #6]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d105      	bne.n	8005458 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800544c:	893b      	ldrh	r3, [r7, #8]
 800544e:	b2da      	uxtb	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	611a      	str	r2, [r3, #16]
 8005456:	e021      	b.n	800549c <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005458:	893b      	ldrh	r3, [r7, #8]
 800545a:	0a1b      	lsrs	r3, r3, #8
 800545c:	b29b      	uxth	r3, r3
 800545e:	b2da      	uxtb	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005468:	6a39      	ldr	r1, [r7, #32]
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f000 f932 	bl	80056d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00d      	beq.n	8005492 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	2b04      	cmp	r3, #4
 800547c:	d107      	bne.n	800548e <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800548c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e044      	b.n	800551c <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005492:	893b      	ldrh	r3, [r7, #8]
 8005494:	b2da      	uxtb	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800549c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800549e:	6a39      	ldr	r1, [r7, #32]
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f000 f917 	bl	80056d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00d      	beq.n	80054c8 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b0:	2b04      	cmp	r3, #4
 80054b2:	d107      	bne.n	80054c4 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e029      	b.n	800551c <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	6a3b      	ldr	r3, [r7, #32]
 80054de:	2200      	movs	r2, #0
 80054e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f000 f81f 	bl	8005528 <I2C_WaitOnFlagUntilTimeout>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e013      	b.n	800551c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80054f4:	897b      	ldrh	r3, [r7, #10]
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	f043 0301 	orr.w	r3, r3, #1
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	6a3a      	ldr	r2, [r7, #32]
 8005508:	4906      	ldr	r1, [pc, #24]	; (8005524 <I2C_RequestMemoryRead+0x19c>)
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f000 f863 	bl	80055d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e000      	b.n	800551c <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3718      	adds	r7, #24
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	00010002 	.word	0x00010002

08005528 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	603b      	str	r3, [r7, #0]
 8005534:	4613      	mov	r3, r2
 8005536:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005538:	e025      	b.n	8005586 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005540:	d021      	beq.n	8005586 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005542:	f7fd ffa9 	bl	8003498 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	429a      	cmp	r2, r3
 8005550:	d302      	bcc.n	8005558 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d116      	bne.n	8005586 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2220      	movs	r2, #32
 8005562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005572:	f043 0220 	orr.w	r2, r3, #32
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e023      	b.n	80055ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	0c1b      	lsrs	r3, r3, #16
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b01      	cmp	r3, #1
 800558e:	d10d      	bne.n	80055ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	43da      	mvns	r2, r3
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	4013      	ands	r3, r2
 800559c:	b29b      	uxth	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	bf0c      	ite	eq
 80055a2:	2301      	moveq	r3, #1
 80055a4:	2300      	movne	r3, #0
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	461a      	mov	r2, r3
 80055aa:	e00c      	b.n	80055c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	43da      	mvns	r2, r3
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	4013      	ands	r3, r2
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	bf0c      	ite	eq
 80055be:	2301      	moveq	r3, #1
 80055c0:	2300      	movne	r3, #0
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	461a      	mov	r2, r3
 80055c6:	79fb      	ldrb	r3, [r7, #7]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d0b6      	beq.n	800553a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b084      	sub	sp, #16
 80055da:	af00      	add	r7, sp, #0
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	607a      	str	r2, [r7, #4]
 80055e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055e4:	e051      	b.n	800568a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	695b      	ldr	r3, [r3, #20]
 80055ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055f4:	d123      	bne.n	800563e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005604:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800560e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2220      	movs	r2, #32
 800561a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	f043 0204 	orr.w	r2, r3, #4
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e046      	b.n	80056cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005644:	d021      	beq.n	800568a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005646:	f7fd ff27 	bl	8003498 <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	429a      	cmp	r2, r3
 8005654:	d302      	bcc.n	800565c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d116      	bne.n	800568a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2220      	movs	r2, #32
 8005666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005676:	f043 0220 	orr.w	r2, r3, #32
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e020      	b.n	80056cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	0c1b      	lsrs	r3, r3, #16
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b01      	cmp	r3, #1
 8005692:	d10c      	bne.n	80056ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	43da      	mvns	r2, r3
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	4013      	ands	r3, r2
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	bf14      	ite	ne
 80056a6:	2301      	movne	r3, #1
 80056a8:	2300      	moveq	r3, #0
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	e00b      	b.n	80056c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	43da      	mvns	r2, r3
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	4013      	ands	r3, r2
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	bf14      	ite	ne
 80056c0:	2301      	movne	r3, #1
 80056c2:	2300      	moveq	r3, #0
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d18d      	bne.n	80055e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056e0:	e02d      	b.n	800573e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f000 f8ce 	bl	8005884 <I2C_IsAcknowledgeFailed>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e02d      	b.n	800574e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f8:	d021      	beq.n	800573e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056fa:	f7fd fecd 	bl	8003498 <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	68ba      	ldr	r2, [r7, #8]
 8005706:	429a      	cmp	r2, r3
 8005708:	d302      	bcc.n	8005710 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d116      	bne.n	800573e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2220      	movs	r2, #32
 800571a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	f043 0220 	orr.w	r2, r3, #32
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e007      	b.n	800574e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	695b      	ldr	r3, [r3, #20]
 8005744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005748:	2b80      	cmp	r3, #128	; 0x80
 800574a:	d1ca      	bne.n	80056e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b084      	sub	sp, #16
 800575a:	af00      	add	r7, sp, #0
 800575c:	60f8      	str	r0, [r7, #12]
 800575e:	60b9      	str	r1, [r7, #8]
 8005760:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005762:	e02d      	b.n	80057c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 f88d 	bl	8005884 <I2C_IsAcknowledgeFailed>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e02d      	b.n	80057d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577a:	d021      	beq.n	80057c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800577c:	f7fd fe8c 	bl	8003498 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	429a      	cmp	r2, r3
 800578a:	d302      	bcc.n	8005792 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d116      	bne.n	80057c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2220      	movs	r2, #32
 800579c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ac:	f043 0220 	orr.w	r2, r3, #32
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e007      	b.n	80057d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	f003 0304 	and.w	r3, r3, #4
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	d1ca      	bne.n	8005764 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057e4:	e042      	b.n	800586c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	f003 0310 	and.w	r3, r3, #16
 80057f0:	2b10      	cmp	r3, #16
 80057f2:	d119      	bne.n	8005828 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f06f 0210 	mvn.w	r2, #16
 80057fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2220      	movs	r2, #32
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e029      	b.n	800587c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005828:	f7fd fe36 	bl	8003498 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	429a      	cmp	r2, r3
 8005836:	d302      	bcc.n	800583e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d116      	bne.n	800586c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2220      	movs	r2, #32
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005858:	f043 0220 	orr.w	r2, r3, #32
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e007      	b.n	800587c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005876:	2b40      	cmp	r3, #64	; 0x40
 8005878:	d1b5      	bne.n	80057e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800589a:	d11b      	bne.n	80058d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2220      	movs	r2, #32
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c0:	f043 0204 	orr.w	r2, r3, #4
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e000      	b.n	80058d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	370c      	adds	r7, #12
 80058da:	46bd      	mov	sp, r7
 80058dc:	bc80      	pop	{r7}
 80058de:	4770      	bx	lr

080058e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80058e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058e2:	b08b      	sub	sp, #44	; 0x2c
 80058e4:	af06      	add	r7, sp, #24
 80058e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e0d3      	b.n	8005a9a <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d106      	bne.n	800590c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f005 ff5e 	bl	800b7c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2203      	movs	r2, #3
 8005910:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4618      	mov	r0, r3
 800591a:	f003 f8b2 	bl	8008a82 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	603b      	str	r3, [r7, #0]
 8005924:	687e      	ldr	r6, [r7, #4]
 8005926:	466d      	mov	r5, sp
 8005928:	f106 0410 	add.w	r4, r6, #16
 800592c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800592e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005930:	6823      	ldr	r3, [r4, #0]
 8005932:	602b      	str	r3, [r5, #0]
 8005934:	1d33      	adds	r3, r6, #4
 8005936:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005938:	6838      	ldr	r0, [r7, #0]
 800593a:	f003 f87b 	bl	8008a34 <USB_CoreInit>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d005      	beq.n	8005950 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e0a4      	b.n	8005a9a <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2100      	movs	r1, #0
 8005956:	4618      	mov	r0, r3
 8005958:	f003 f8af 	bl	8008aba <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800595c:	2300      	movs	r3, #0
 800595e:	73fb      	strb	r3, [r7, #15]
 8005960:	e035      	b.n	80059ce <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005962:	7bfb      	ldrb	r3, [r7, #15]
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	015b      	lsls	r3, r3, #5
 8005968:	4413      	add	r3, r2
 800596a:	3329      	adds	r3, #41	; 0x29
 800596c:	2201      	movs	r2, #1
 800596e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005970:	7bfb      	ldrb	r3, [r7, #15]
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	015b      	lsls	r3, r3, #5
 8005976:	4413      	add	r3, r2
 8005978:	3328      	adds	r3, #40	; 0x28
 800597a:	7bfa      	ldrb	r2, [r7, #15]
 800597c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800597e:	7bfb      	ldrb	r3, [r7, #15]
 8005980:	7bfa      	ldrb	r2, [r7, #15]
 8005982:	b291      	uxth	r1, r2
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	015b      	lsls	r3, r3, #5
 8005988:	4413      	add	r3, r2
 800598a:	3336      	adds	r3, #54	; 0x36
 800598c:	460a      	mov	r2, r1
 800598e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005990:	7bfb      	ldrb	r3, [r7, #15]
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	015b      	lsls	r3, r3, #5
 8005996:	4413      	add	r3, r2
 8005998:	332b      	adds	r3, #43	; 0x2b
 800599a:	2200      	movs	r2, #0
 800599c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800599e:	7bfb      	ldrb	r3, [r7, #15]
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	015b      	lsls	r3, r3, #5
 80059a4:	4413      	add	r3, r2
 80059a6:	3338      	adds	r3, #56	; 0x38
 80059a8:	2200      	movs	r2, #0
 80059aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	015b      	lsls	r3, r3, #5
 80059b2:	4413      	add	r3, r2
 80059b4:	333c      	adds	r3, #60	; 0x3c
 80059b6:	2200      	movs	r2, #0
 80059b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	3302      	adds	r3, #2
 80059c0:	015b      	lsls	r3, r3, #5
 80059c2:	4413      	add	r3, r2
 80059c4:	2200      	movs	r2, #0
 80059c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059c8:	7bfb      	ldrb	r3, [r7, #15]
 80059ca:	3301      	adds	r3, #1
 80059cc:	73fb      	strb	r3, [r7, #15]
 80059ce:	7bfa      	ldrb	r2, [r7, #15]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d3c4      	bcc.n	8005962 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059d8:	2300      	movs	r3, #0
 80059da:	73fb      	strb	r3, [r7, #15]
 80059dc:	e031      	b.n	8005a42 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80059de:	7bfb      	ldrb	r3, [r7, #15]
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	015b      	lsls	r3, r3, #5
 80059e4:	4413      	add	r3, r2
 80059e6:	f203 1329 	addw	r3, r3, #297	; 0x129
 80059ea:	2200      	movs	r2, #0
 80059ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80059ee:	7bfb      	ldrb	r3, [r7, #15]
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	015b      	lsls	r3, r3, #5
 80059f4:	4413      	add	r3, r2
 80059f6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80059fa:	7bfa      	ldrb	r2, [r7, #15]
 80059fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80059fe:	7bfb      	ldrb	r3, [r7, #15]
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	015b      	lsls	r3, r3, #5
 8005a04:	4413      	add	r3, r2
 8005a06:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005a0e:	7bfb      	ldrb	r3, [r7, #15]
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	015b      	lsls	r3, r3, #5
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005a1e:	7bfb      	ldrb	r3, [r7, #15]
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	015b      	lsls	r3, r3, #5
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005a2e:	7bfb      	ldrb	r3, [r7, #15]
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	330a      	adds	r3, #10
 8005a34:	015b      	lsls	r3, r3, #5
 8005a36:	4413      	add	r3, r2
 8005a38:	2200      	movs	r2, #0
 8005a3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	73fb      	strb	r3, [r7, #15]
 8005a42:	7bfa      	ldrb	r2, [r7, #15]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d3c8      	bcc.n	80059de <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	603b      	str	r3, [r7, #0]
 8005a52:	687e      	ldr	r6, [r7, #4]
 8005a54:	466d      	mov	r5, sp
 8005a56:	f106 0410 	add.w	r4, r6, #16
 8005a5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	602b      	str	r3, [r5, #0]
 8005a62:	1d33      	adds	r3, r6, #4
 8005a64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a66:	6838      	ldr	r0, [r7, #0]
 8005a68:	f003 f833 	bl	8008ad2 <USB_DevInit>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d005      	beq.n	8005a7e <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2202      	movs	r2, #2
 8005a76:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e00d      	b.n	8005a9a <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4618      	mov	r0, r3
 8005a94:	f004 f871 	bl	8009b7a <USB_DevDisconnect>

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3714      	adds	r7, #20
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005aa2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b082      	sub	sp, #8
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d101      	bne.n	8005ab8 <HAL_PCD_Start+0x16>
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	e016      	b.n	8005ae6 <HAL_PCD_Start+0x44>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f006 f8e7 	bl	800bc96 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f004 f84a 	bl	8009b66 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f002 ffbc 	bl	8008a54 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b082      	sub	sp, #8
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f004 f847 	bl	8009b8e <USB_ReadInterrupts>
 8005b00:	4603      	mov	r3, r0
 8005b02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b0a:	d102      	bne.n	8005b12 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 faf3 	bl	80060f8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f004 f839 	bl	8009b8e <USB_ReadInterrupts>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b26:	d112      	bne.n	8005b4e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b3a:	b292      	uxth	r2, r2
 8005b3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f005 feb6 	bl	800b8b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005b46:	2100      	movs	r1, #0
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 f8de 	bl	8005d0a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f004 f81b 	bl	8009b8e <USB_ReadInterrupts>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b62:	d10b      	bne.n	8005b7c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b76:	b292      	uxth	r2, r2
 8005b78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f004 f804 	bl	8009b8e <USB_ReadInterrupts>
 8005b86:	4603      	mov	r3, r0
 8005b88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b90:	d10b      	bne.n	8005baa <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ba4:	b292      	uxth	r2, r2
 8005ba6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f003 ffed 	bl	8009b8e <USB_ReadInterrupts>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bbe:	d126      	bne.n	8005c0e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 0204 	bic.w	r2, r2, #4
 8005bd2:	b292      	uxth	r2, r2
 8005bd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 0208 	bic.w	r2, r2, #8
 8005bea:	b292      	uxth	r2, r2
 8005bec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f005 fe97 	bl	800b924 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c08:	b292      	uxth	r2, r2
 8005c0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f003 ffbb 	bl	8009b8e <USB_ReadInterrupts>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c22:	d13d      	bne.n	8005ca0 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f042 0208 	orr.w	r2, r2, #8
 8005c36:	b292      	uxth	r2, r2
 8005c38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c4e:	b292      	uxth	r2, r2
 8005c50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f042 0204 	orr.w	r2, r2, #4
 8005c66:	b292      	uxth	r2, r2
 8005c68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f003 ff8c 	bl	8009b8e <USB_ReadInterrupts>
 8005c76:	4603      	mov	r3, r0
 8005c78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c80:	d10b      	bne.n	8005c9a <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c94:	b292      	uxth	r2, r2
 8005c96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f005 fe28 	bl	800b8f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f003 ff72 	bl	8009b8e <USB_ReadInterrupts>
 8005caa:	4603      	mov	r3, r0
 8005cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cb4:	d10e      	bne.n	8005cd4 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005cc8:	b292      	uxth	r2, r2
 8005cca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f005 fde1 	bl	800b896 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f003 ff58 	bl	8009b8e <USB_ReadInterrupts>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ce8:	d10b      	bne.n	8005d02 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cfc:	b292      	uxth	r2, r2
 8005cfe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8005d02:	bf00      	nop
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b082      	sub	sp, #8
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
 8005d12:	460b      	mov	r3, r1
 8005d14:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d101      	bne.n	8005d24 <HAL_PCD_SetAddress+0x1a>
 8005d20:	2302      	movs	r3, #2
 8005d22:	e013      	b.n	8005d4c <HAL_PCD_SetAddress+0x42>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	78fa      	ldrb	r2, [r7, #3]
 8005d30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	78fa      	ldrb	r2, [r7, #3]
 8005d3a:	4611      	mov	r1, r2
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f003 feff 	bl	8009b40 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3708      	adds	r7, #8
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	4608      	mov	r0, r1
 8005d5e:	4611      	mov	r1, r2
 8005d60:	461a      	mov	r2, r3
 8005d62:	4603      	mov	r3, r0
 8005d64:	70fb      	strb	r3, [r7, #3]
 8005d66:	460b      	mov	r3, r1
 8005d68:	803b      	strh	r3, [r7, #0]
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005d72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	da0b      	bge.n	8005d92 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d7a:	78fb      	ldrb	r3, [r7, #3]
 8005d7c:	f003 0307 	and.w	r3, r3, #7
 8005d80:	015b      	lsls	r3, r3, #5
 8005d82:	3328      	adds	r3, #40	; 0x28
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	4413      	add	r3, r2
 8005d88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	705a      	strb	r2, [r3, #1]
 8005d90:	e00b      	b.n	8005daa <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d92:	78fb      	ldrb	r3, [r7, #3]
 8005d94:	f003 0307 	and.w	r3, r3, #7
 8005d98:	015b      	lsls	r3, r3, #5
 8005d9a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	4413      	add	r3, r2
 8005da2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005daa:	78fb      	ldrb	r3, [r7, #3]
 8005dac:	f003 0307 	and.w	r3, r3, #7
 8005db0:	b2da      	uxtb	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005db6:	883a      	ldrh	r2, [r7, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	78ba      	ldrb	r2, [r7, #2]
 8005dc0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	785b      	ldrb	r3, [r3, #1]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d004      	beq.n	8005dd4 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005dd4:	78bb      	ldrb	r3, [r7, #2]
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d102      	bne.n	8005de0 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d101      	bne.n	8005dee <HAL_PCD_EP_Open+0x9a>
 8005dea:	2302      	movs	r3, #2
 8005dec:	e00e      	b.n	8005e0c <HAL_PCD_EP_Open+0xb8>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68f9      	ldr	r1, [r7, #12]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f002 fe8d 	bl	8008b1c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8005e0a:	7afb      	ldrb	r3, [r7, #11]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3710      	adds	r7, #16
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005e20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	da0b      	bge.n	8005e40 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e28:	78fb      	ldrb	r3, [r7, #3]
 8005e2a:	f003 0307 	and.w	r3, r3, #7
 8005e2e:	015b      	lsls	r3, r3, #5
 8005e30:	3328      	adds	r3, #40	; 0x28
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	4413      	add	r3, r2
 8005e36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	705a      	strb	r2, [r3, #1]
 8005e3e:	e00b      	b.n	8005e58 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e40:	78fb      	ldrb	r3, [r7, #3]
 8005e42:	f003 0307 	and.w	r3, r3, #7
 8005e46:	015b      	lsls	r3, r3, #5
 8005e48:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	4413      	add	r3, r2
 8005e50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005e58:	78fb      	ldrb	r3, [r7, #3]
 8005e5a:	f003 0307 	and.w	r3, r3, #7
 8005e5e:	b2da      	uxtb	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d101      	bne.n	8005e72 <HAL_PCD_EP_Close+0x5e>
 8005e6e:	2302      	movs	r3, #2
 8005e70:	e00e      	b.n	8005e90 <HAL_PCD_EP_Close+0x7c>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68f9      	ldr	r1, [r7, #12]
 8005e80:	4618      	mov	r0, r3
 8005e82:	f003 f939 	bl	80090f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b086      	sub	sp, #24
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	607a      	str	r2, [r7, #4]
 8005ea2:	603b      	str	r3, [r7, #0]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ea8:	7afb      	ldrb	r3, [r7, #11]
 8005eaa:	f003 0307 	and.w	r3, r3, #7
 8005eae:	015b      	lsls	r3, r3, #5
 8005eb0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ed2:	7afb      	ldrb	r3, [r7, #11]
 8005ed4:	f003 0307 	and.w	r3, r3, #7
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ede:	7afb      	ldrb	r3, [r7, #11]
 8005ee0:	f003 0307 	and.w	r3, r3, #7
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d106      	bne.n	8005ef6 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6979      	ldr	r1, [r7, #20]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f003 fa98 	bl	8009424 <USB_EPStartXfer>
 8005ef4:	e005      	b.n	8005f02 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	6979      	ldr	r1, [r7, #20]
 8005efc:	4618      	mov	r0, r3
 8005efe:	f003 fa91 	bl	8009424 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3718      	adds	r7, #24
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	460b      	mov	r3, r1
 8005f16:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005f18:	78fb      	ldrb	r3, [r7, #3]
 8005f1a:	f003 0307 	and.w	r3, r3, #7
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	330a      	adds	r3, #10
 8005f22:	015b      	lsls	r3, r3, #5
 8005f24:	4413      	add	r3, r2
 8005f26:	3304      	adds	r3, #4
 8005f28:	681b      	ldr	r3, [r3, #0]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bc80      	pop	{r7}
 8005f32:	4770      	bx	lr

08005f34 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b086      	sub	sp, #24
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	607a      	str	r2, [r7, #4]
 8005f3e:	603b      	str	r3, [r7, #0]
 8005f40:	460b      	mov	r3, r1
 8005f42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f44:	7afb      	ldrb	r3, [r7, #11]
 8005f46:	f003 0307 	and.w	r3, r3, #7
 8005f4a:	015b      	lsls	r3, r3, #5
 8005f4c:	3328      	adds	r3, #40	; 0x28
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	4413      	add	r3, r2
 8005f52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	2200      	movs	r2, #0
 8005f64:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f6c:	7afb      	ldrb	r3, [r7, #11]
 8005f6e:	f003 0307 	and.w	r3, r3, #7
 8005f72:	b2da      	uxtb	r2, r3
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005f78:	7afb      	ldrb	r3, [r7, #11]
 8005f7a:	f003 0307 	and.w	r3, r3, #7
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d106      	bne.n	8005f90 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	6979      	ldr	r1, [r7, #20]
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f003 fa4b 	bl	8009424 <USB_EPStartXfer>
 8005f8e:	e005      	b.n	8005f9c <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6979      	ldr	r1, [r7, #20]
 8005f96:	4618      	mov	r0, r3
 8005f98:	f003 fa44 	bl	8009424 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3718      	adds	r7, #24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b084      	sub	sp, #16
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
 8005fae:	460b      	mov	r3, r1
 8005fb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005fb2:	78fb      	ldrb	r3, [r7, #3]
 8005fb4:	f003 0207 	and.w	r2, r3, #7
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d901      	bls.n	8005fc4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e046      	b.n	8006052 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005fc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	da0b      	bge.n	8005fe4 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fcc:	78fb      	ldrb	r3, [r7, #3]
 8005fce:	f003 0307 	and.w	r3, r3, #7
 8005fd2:	015b      	lsls	r3, r3, #5
 8005fd4:	3328      	adds	r3, #40	; 0x28
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	4413      	add	r3, r2
 8005fda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	705a      	strb	r2, [r3, #1]
 8005fe2:	e009      	b.n	8005ff8 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005fe4:	78fb      	ldrb	r3, [r7, #3]
 8005fe6:	015b      	lsls	r3, r3, #5
 8005fe8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	4413      	add	r3, r2
 8005ff0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ffe:	78fb      	ldrb	r3, [r7, #3]
 8006000:	f003 0307 	and.w	r3, r3, #7
 8006004:	b2da      	uxtb	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8006010:	2b01      	cmp	r3, #1
 8006012:	d101      	bne.n	8006018 <HAL_PCD_EP_SetStall+0x72>
 8006014:	2302      	movs	r3, #2
 8006016:	e01c      	b.n	8006052 <HAL_PCD_EP_SetStall+0xac>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68f9      	ldr	r1, [r7, #12]
 8006026:	4618      	mov	r0, r3
 8006028:	f003 fcb4 	bl	8009994 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800602c:	78fb      	ldrb	r3, [r7, #3]
 800602e:	f003 0307 	and.w	r3, r3, #7
 8006032:	2b00      	cmp	r3, #0
 8006034:	d108      	bne.n	8006048 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006040:	4619      	mov	r1, r3
 8006042:	4610      	mov	r0, r2
 8006044:	f003 fdb2 	bl	8009bac <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800605a:	b580      	push	{r7, lr}
 800605c:	b084      	sub	sp, #16
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
 8006062:	460b      	mov	r3, r1
 8006064:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006066:	78fb      	ldrb	r3, [r7, #3]
 8006068:	f003 020f 	and.w	r2, r3, #15
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	429a      	cmp	r2, r3
 8006072:	d901      	bls.n	8006078 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e03a      	b.n	80060ee <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006078:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800607c:	2b00      	cmp	r3, #0
 800607e:	da0b      	bge.n	8006098 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006080:	78fb      	ldrb	r3, [r7, #3]
 8006082:	f003 0307 	and.w	r3, r3, #7
 8006086:	015b      	lsls	r3, r3, #5
 8006088:	3328      	adds	r3, #40	; 0x28
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	4413      	add	r3, r2
 800608e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2201      	movs	r2, #1
 8006094:	705a      	strb	r2, [r3, #1]
 8006096:	e00b      	b.n	80060b0 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006098:	78fb      	ldrb	r3, [r7, #3]
 800609a:	f003 0307 	and.w	r3, r3, #7
 800609e:	015b      	lsls	r3, r3, #5
 80060a0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	4413      	add	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060b6:	78fb      	ldrb	r3, [r7, #3]
 80060b8:	f003 0307 	and.w	r3, r3, #7
 80060bc:	b2da      	uxtb	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d101      	bne.n	80060d0 <HAL_PCD_EP_ClrStall+0x76>
 80060cc:	2302      	movs	r3, #2
 80060ce:	e00e      	b.n	80060ee <HAL_PCD_EP_ClrStall+0x94>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68f9      	ldr	r1, [r7, #12]
 80060de:	4618      	mov	r0, r3
 80060e0:	f003 fc9a 	bl	8009a18 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
	...

080060f8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80060f8:	b590      	push	{r4, r7, lr}
 80060fa:	b089      	sub	sp, #36	; 0x24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006100:	e282      	b.n	8006608 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800610a:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800610c:	8afb      	ldrh	r3, [r7, #22]
 800610e:	b2db      	uxtb	r3, r3
 8006110:	f003 030f 	and.w	r3, r3, #15
 8006114:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8006116:	7d7b      	ldrb	r3, [r7, #21]
 8006118:	2b00      	cmp	r3, #0
 800611a:	f040 8142 	bne.w	80063a2 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800611e:	8afb      	ldrh	r3, [r7, #22]
 8006120:	f003 0310 	and.w	r3, r3, #16
 8006124:	2b00      	cmp	r3, #0
 8006126:	d151      	bne.n	80061cc <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	b29b      	uxth	r3, r3
 8006130:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006138:	b29c      	uxth	r4, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8006142:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006146:	b29b      	uxth	r3, r3
 8006148:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	3328      	adds	r3, #40	; 0x28
 800614e:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006158:	b29b      	uxth	r3, r3
 800615a:	461a      	mov	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	00db      	lsls	r3, r3, #3
 8006162:	4413      	add	r3, r2
 8006164:	3302      	adds	r3, #2
 8006166:	005b      	lsls	r3, r3, #1
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	6812      	ldr	r2, [r2, #0]
 800616c:	4413      	add	r3, r2
 800616e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006172:	881b      	ldrh	r3, [r3, #0]
 8006174:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	695a      	ldr	r2, [r3, #20]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	69db      	ldr	r3, [r3, #28]
 8006184:	441a      	add	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800618a:	2100      	movs	r1, #0
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f005 fb6b 	bl	800b868 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b00      	cmp	r3, #0
 800619c:	f000 8234 	beq.w	8006608 <PCD_EP_ISR_Handler+0x510>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f040 822f 	bne.w	8006608 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	b292      	uxth	r2, r2
 80061be:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80061ca:	e21d      	b.n	8006608 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80061d2:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	881b      	ldrh	r3, [r3, #0]
 80061da:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80061dc:	8a7b      	ldrh	r3, [r7, #18]
 80061de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d033      	beq.n	800624e <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	461a      	mov	r2, r3
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	00db      	lsls	r3, r3, #3
 80061f8:	4413      	add	r3, r2
 80061fa:	3306      	adds	r3, #6
 80061fc:	005b      	lsls	r3, r3, #1
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	6812      	ldr	r2, [r2, #0]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006208:	881b      	ldrh	r3, [r3, #0]
 800620a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6818      	ldr	r0, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f503 710c 	add.w	r1, r3, #560	; 0x230
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006224:	b29b      	uxth	r3, r3
 8006226:	f003 fd10 	bl	8009c4a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	881b      	ldrh	r3, [r3, #0]
 8006230:	b29a      	uxth	r2, r3
 8006232:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006236:	4013      	ands	r3, r2
 8006238:	b29c      	uxth	r4, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8006242:	b292      	uxth	r2, r2
 8006244:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f005 fae4 	bl	800b814 <HAL_PCD_SetupStageCallback>
 800624c:	e1dc      	b.n	8006608 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800624e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006252:	2b00      	cmp	r3, #0
 8006254:	f280 81d8 	bge.w	8006608 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	881b      	ldrh	r3, [r3, #0]
 800625e:	b29a      	uxth	r2, r3
 8006260:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006264:	4013      	ands	r3, r2
 8006266:	b29c      	uxth	r4, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8006270:	b292      	uxth	r2, r2
 8006272:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800627c:	b29b      	uxth	r3, r3
 800627e:	461a      	mov	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	00db      	lsls	r3, r3, #3
 8006286:	4413      	add	r3, r2
 8006288:	3306      	adds	r3, #6
 800628a:	005b      	lsls	r3, r3, #1
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	6812      	ldr	r2, [r2, #0]
 8006290:	4413      	add	r3, r2
 8006292:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006296:	881b      	ldrh	r3, [r3, #0]
 8006298:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	69db      	ldr	r3, [r3, #28]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d019      	beq.n	80062dc <PCD_EP_ISR_Handler+0x1e4>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	695b      	ldr	r3, [r3, #20]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d015      	beq.n	80062dc <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6818      	ldr	r0, [r3, #0]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6959      	ldr	r1, [r3, #20]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	f003 fcc2 	bl	8009c4a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	695a      	ldr	r2, [r3, #20]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	441a      	add	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80062d4:	2100      	movs	r1, #0
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f005 faae 	bl	800b838 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	461c      	mov	r4, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	441c      	add	r4, r3
 80062ee:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 80062f2:	461c      	mov	r4, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10e      	bne.n	800631a <PCD_EP_ISR_Handler+0x222>
 80062fc:	8823      	ldrh	r3, [r4, #0]
 80062fe:	b29b      	uxth	r3, r3
 8006300:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006304:	b29b      	uxth	r3, r3
 8006306:	8023      	strh	r3, [r4, #0]
 8006308:	8823      	ldrh	r3, [r4, #0]
 800630a:	b29b      	uxth	r3, r3
 800630c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006314:	b29b      	uxth	r3, r3
 8006316:	8023      	strh	r3, [r4, #0]
 8006318:	e02d      	b.n	8006376 <PCD_EP_ISR_Handler+0x27e>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	2b3e      	cmp	r3, #62	; 0x3e
 8006320:	d812      	bhi.n	8006348 <PCD_EP_ISR_Handler+0x250>
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	085b      	lsrs	r3, r3, #1
 8006328:	61bb      	str	r3, [r7, #24]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b00      	cmp	r3, #0
 8006334:	d002      	beq.n	800633c <PCD_EP_ISR_Handler+0x244>
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	3301      	adds	r3, #1
 800633a:	61bb      	str	r3, [r7, #24]
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	b29b      	uxth	r3, r3
 8006340:	029b      	lsls	r3, r3, #10
 8006342:	b29b      	uxth	r3, r3
 8006344:	8023      	strh	r3, [r4, #0]
 8006346:	e016      	b.n	8006376 <PCD_EP_ISR_Handler+0x27e>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	095b      	lsrs	r3, r3, #5
 800634e:	61bb      	str	r3, [r7, #24]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	f003 031f 	and.w	r3, r3, #31
 8006358:	2b00      	cmp	r3, #0
 800635a:	d102      	bne.n	8006362 <PCD_EP_ISR_Handler+0x26a>
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	3b01      	subs	r3, #1
 8006360:	61bb      	str	r3, [r7, #24]
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	b29b      	uxth	r3, r3
 8006366:	029b      	lsls	r3, r3, #10
 8006368:	b29b      	uxth	r3, r3
 800636a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800636e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006372:	b29b      	uxth	r3, r3
 8006374:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	881b      	ldrh	r3, [r3, #0]
 800637c:	b29b      	uxth	r3, r3
 800637e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006386:	b29c      	uxth	r4, r3
 8006388:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800638c:	b29c      	uxth	r4, r3
 800638e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006392:	b29c      	uxth	r4, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	4ba2      	ldr	r3, [pc, #648]	; (8006624 <PCD_EP_ISR_Handler+0x52c>)
 800639a:	4323      	orrs	r3, r4
 800639c:	b29b      	uxth	r3, r3
 800639e:	8013      	strh	r3, [r2, #0]
 80063a0:	e132      	b.n	8006608 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	461a      	mov	r2, r3
 80063a8:	7d7b      	ldrb	r3, [r7, #21]
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4413      	add	r3, r2
 80063ae:	881b      	ldrh	r3, [r3, #0]
 80063b0:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80063b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f280 80d1 	bge.w	800655e <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	461a      	mov	r2, r3
 80063c2:	7d7b      	ldrb	r3, [r7, #21]
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4413      	add	r3, r2
 80063c8:	881b      	ldrh	r3, [r3, #0]
 80063ca:	b29a      	uxth	r2, r3
 80063cc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80063d0:	4013      	ands	r3, r2
 80063d2:	b29c      	uxth	r4, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	461a      	mov	r2, r3
 80063da:	7d7b      	ldrb	r3, [r7, #21]
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80063e4:	b292      	uxth	r2, r2
 80063e6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80063e8:	7d7b      	ldrb	r3, [r7, #21]
 80063ea:	015b      	lsls	r3, r3, #5
 80063ec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	4413      	add	r3, r2
 80063f4:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	7b1b      	ldrb	r3, [r3, #12]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d121      	bne.n	8006442 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006406:	b29b      	uxth	r3, r3
 8006408:	461a      	mov	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	00db      	lsls	r3, r3, #3
 8006410:	4413      	add	r3, r2
 8006412:	3306      	adds	r3, #6
 8006414:	005b      	lsls	r3, r3, #1
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	6812      	ldr	r2, [r2, #0]
 800641a:	4413      	add	r3, r2
 800641c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006420:	881b      	ldrh	r3, [r3, #0]
 8006422:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006426:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8006428:	8bfb      	ldrh	r3, [r7, #30]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d072      	beq.n	8006514 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6818      	ldr	r0, [r3, #0]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6959      	ldr	r1, [r3, #20]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	88da      	ldrh	r2, [r3, #6]
 800643a:	8bfb      	ldrh	r3, [r7, #30]
 800643c:	f003 fc05 	bl	8009c4a <USB_ReadPMA>
 8006440:	e068      	b.n	8006514 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	461a      	mov	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4413      	add	r3, r2
 8006450:	881b      	ldrh	r3, [r3, #0]
 8006452:	b29b      	uxth	r3, r3
 8006454:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006458:	2b00      	cmp	r3, #0
 800645a:	d021      	beq.n	80064a0 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006464:	b29b      	uxth	r3, r3
 8006466:	461a      	mov	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	00db      	lsls	r3, r3, #3
 800646e:	4413      	add	r3, r2
 8006470:	3302      	adds	r3, #2
 8006472:	005b      	lsls	r3, r3, #1
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	6812      	ldr	r2, [r2, #0]
 8006478:	4413      	add	r3, r2
 800647a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800647e:	881b      	ldrh	r3, [r3, #0]
 8006480:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006484:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8006486:	8bfb      	ldrh	r3, [r7, #30]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d02a      	beq.n	80064e2 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6818      	ldr	r0, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6959      	ldr	r1, [r3, #20]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	891a      	ldrh	r2, [r3, #8]
 8006498:	8bfb      	ldrh	r3, [r7, #30]
 800649a:	f003 fbd6 	bl	8009c4a <USB_ReadPMA>
 800649e:	e020      	b.n	80064e2 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	461a      	mov	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	00db      	lsls	r3, r3, #3
 80064b2:	4413      	add	r3, r2
 80064b4:	3306      	adds	r3, #6
 80064b6:	005b      	lsls	r3, r3, #1
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	6812      	ldr	r2, [r2, #0]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064c8:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80064ca:	8bfb      	ldrh	r3, [r7, #30]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d008      	beq.n	80064e2 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6818      	ldr	r0, [r3, #0]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6959      	ldr	r1, [r3, #20]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	895a      	ldrh	r2, [r3, #10]
 80064dc:	8bfb      	ldrh	r3, [r7, #30]
 80064de:	f003 fbb4 	bl	8009c4a <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	461a      	mov	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064fc:	b29c      	uxth	r4, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	461a      	mov	r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	441a      	add	r2, r3
 800650c:	4b46      	ldr	r3, [pc, #280]	; (8006628 <PCD_EP_ISR_Handler+0x530>)
 800650e:	4323      	orrs	r3, r4
 8006510:	b29b      	uxth	r3, r3
 8006512:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	69da      	ldr	r2, [r3, #28]
 8006518:	8bfb      	ldrh	r3, [r7, #30]
 800651a:	441a      	add	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	695a      	ldr	r2, [r3, #20]
 8006524:	8bfb      	ldrh	r3, [r7, #30]
 8006526:	441a      	add	r2, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d004      	beq.n	800653e <PCD_EP_ISR_Handler+0x446>
 8006534:	8bfa      	ldrh	r2, [r7, #30]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	429a      	cmp	r2, r3
 800653c:	d206      	bcs.n	800654c <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	4619      	mov	r1, r3
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f005 f977 	bl	800b838 <HAL_PCD_DataOutStageCallback>
 800654a:	e008      	b.n	800655e <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	7819      	ldrb	r1, [r3, #0]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	695a      	ldr	r2, [r3, #20]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f7ff fc9d 	bl	8005e98 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800655e:	8a7b      	ldrh	r3, [r7, #18]
 8006560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006564:	2b00      	cmp	r3, #0
 8006566:	d04f      	beq.n	8006608 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8006568:	7d7b      	ldrb	r3, [r7, #21]
 800656a:	015b      	lsls	r3, r3, #5
 800656c:	3328      	adds	r3, #40	; 0x28
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	4413      	add	r3, r2
 8006572:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	461a      	mov	r2, r3
 800657a:	7d7b      	ldrb	r3, [r7, #21]
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4413      	add	r3, r2
 8006580:	881b      	ldrh	r3, [r3, #0]
 8006582:	b29b      	uxth	r3, r3
 8006584:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800658c:	b29c      	uxth	r4, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	461a      	mov	r2, r3
 8006594:	7d7b      	ldrb	r3, [r7, #21]
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	441a      	add	r2, r3
 800659a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800659e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	461a      	mov	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	00db      	lsls	r3, r3, #3
 80065b8:	4413      	add	r3, r2
 80065ba:	3302      	adds	r3, #2
 80065bc:	005b      	lsls	r3, r3, #1
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	6812      	ldr	r2, [r2, #0]
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065c8:	881b      	ldrh	r3, [r3, #0]
 80065ca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	695a      	ldr	r2, [r3, #20]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	69db      	ldr	r3, [r3, #28]
 80065da:	441a      	add	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d106      	bne.n	80065f6 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	4619      	mov	r1, r3
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f005 f93a 	bl	800b868 <HAL_PCD_DataInStageCallback>
 80065f4:	e008      	b.n	8006608 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	7819      	ldrb	r1, [r3, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	695a      	ldr	r2, [r3, #20]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f7ff fc96 	bl	8005f34 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006610:	b29b      	uxth	r3, r3
 8006612:	b21b      	sxth	r3, r3
 8006614:	2b00      	cmp	r3, #0
 8006616:	f6ff ad74 	blt.w	8006102 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3724      	adds	r7, #36	; 0x24
 8006620:	46bd      	mov	sp, r7
 8006622:	bd90      	pop	{r4, r7, pc}
 8006624:	ffff8080 	.word	0xffff8080
 8006628:	ffff80c0 	.word	0xffff80c0

0800662c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 800662c:	b480      	push	{r7}
 800662e:	b087      	sub	sp, #28
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	607b      	str	r3, [r7, #4]
 8006636:	460b      	mov	r3, r1
 8006638:	817b      	strh	r3, [r7, #10]
 800663a:	4613      	mov	r3, r2
 800663c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800663e:	897b      	ldrh	r3, [r7, #10]
 8006640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006644:	b29b      	uxth	r3, r3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d008      	beq.n	800665c <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800664a:	897b      	ldrh	r3, [r7, #10]
 800664c:	f003 0307 	and.w	r3, r3, #7
 8006650:	015b      	lsls	r3, r3, #5
 8006652:	3328      	adds	r3, #40	; 0x28
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	4413      	add	r3, r2
 8006658:	617b      	str	r3, [r7, #20]
 800665a:	e006      	b.n	800666a <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800665c:	897b      	ldrh	r3, [r7, #10]
 800665e:	015b      	lsls	r3, r3, #5
 8006660:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	4413      	add	r3, r2
 8006668:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800666a:	893b      	ldrh	r3, [r7, #8]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d107      	bne.n	8006680 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	2200      	movs	r2, #0
 8006674:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	b29a      	uxth	r2, r3
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	80da      	strh	r2, [r3, #6]
 800667e:	e00b      	b.n	8006698 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	2201      	movs	r2, #1
 8006684:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	b29a      	uxth	r2, r3
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	0c1b      	lsrs	r3, r3, #16
 8006692:	b29a      	uxth	r2, r3
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	371c      	adds	r7, #28
 800669e:	46bd      	mov	sp, r7
 80066a0:	bc80      	pop	{r7}
 80066a2:	4770      	bx	lr

080066a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d101      	bne.n	80066b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e26c      	b.n	8006b90 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f000 8087 	beq.w	80067d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80066c4:	4b92      	ldr	r3, [pc, #584]	; (8006910 <HAL_RCC_OscConfig+0x26c>)
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f003 030c 	and.w	r3, r3, #12
 80066cc:	2b04      	cmp	r3, #4
 80066ce:	d00c      	beq.n	80066ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80066d0:	4b8f      	ldr	r3, [pc, #572]	; (8006910 <HAL_RCC_OscConfig+0x26c>)
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f003 030c 	and.w	r3, r3, #12
 80066d8:	2b08      	cmp	r3, #8
 80066da:	d112      	bne.n	8006702 <HAL_RCC_OscConfig+0x5e>
 80066dc:	4b8c      	ldr	r3, [pc, #560]	; (8006910 <HAL_RCC_OscConfig+0x26c>)
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066e8:	d10b      	bne.n	8006702 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066ea:	4b89      	ldr	r3, [pc, #548]	; (8006910 <HAL_RCC_OscConfig+0x26c>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d06c      	beq.n	80067d0 <HAL_RCC_OscConfig+0x12c>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d168      	bne.n	80067d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e246      	b.n	8006b90 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800670a:	d106      	bne.n	800671a <HAL_RCC_OscConfig+0x76>
 800670c:	4b80      	ldr	r3, [pc, #512]	; (8006910 <HAL_RCC_OscConfig+0x26c>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a7f      	ldr	r2, [pc, #508]	; (8006910 <HAL_RCC_OscConfig+0x26c>)
 8006712:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006716:	6013      	str	r3, [r2, #0]
 8006718:	e02e      	b.n	8006778 <HAL_RCC_OscConfig+0xd4>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10c      	bne.n	800673c <HAL_RCC_OscConfig+0x98>
 8006722:	4b7b      	ldr	r3, [pc, #492]	; (8006910 <HAL_RCC_OscConfig+0x26c>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a7a      	ldr	r2, [pc, #488]	; (8006910 <HAL_RCC_OscConfig+0x26c>)
 8006728:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800672c:	6013      	str	r3, [r2, #0]
 800672e:	4b78      	ldr	r3, [pc, #480]	; (8006910 <HAL_RCC_OscConfig+0x26c>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a77      	ldr	r2, [pc, #476]	; (8006910 <HAL_RCC_OscConfig+0x26c>)
 8006734:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006738:	6013      	str	r3, [r2, #0]
 800673a:	e01d      	b.n	8006778 <HAL_RCC_OscConfig+0xd4>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006744:	d10c      	bne.n	8006760 <HAL_RCC_OscConfig+0xbc>
 8006746:	4b72      	ldr	r3, [pc, #456]	; (8006910 <HAL_RCC_OscConfig+0x26c>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a71      	ldr	r2, [pc, #452]	; (8006910 <HAL_RCC_OscConfig+0x26c>)
 800674c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006750:	6013      	str	r3, [r2, #0]
 8006752:	4b6f      	ldr	r3, [pc, #444]	; (8006910 <HAL_RCC_OscConfig+0x26c>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a6e      	ldr	r2, [pc, #440]	; (8006910 <HAL_RCC_OscConfig+0x26c>)
 8006758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800675c:	6013      	str	r3, [r2, #0]
 800675e:	e00b      	b.n	8006778 <HAL_RCC_OscConfig+0xd4>
 8006760:	4b6b      	ldr	r3, [pc, #428]	; (8006910 <HAL_RCC_OscConfig+0x26c>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a6a      	ldr	r2, [pc, #424]	; (8006910 <HAL_RCC_OscConfig+0x26c>)
 8006766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800676a:	6013      	str	r3, [r2, #0]
 800676c:	4b68      	ldr	r3, [pc, #416]	; (8006910 <HAL_RCC_OscConfig+0x26c>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a67      	ldr	r2, [pc, #412]	; (8006910 <HAL_RCC_OscConfig+0x26c>)
 8006772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006776:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d013      	beq.n	80067a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006780:	f7fc fe8a 	bl	8003498 <HAL_GetTick>
 8006784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006786:	e008      	b.n	800679a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006788:	f7fc fe86 	bl	8003498 <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	2b64      	cmp	r3, #100	; 0x64
 8006794:	d901      	bls.n	800679a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e1fa      	b.n	8006b90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800679a:	4b5d      	ldr	r3, [pc, #372]	; (8006910 <HAL_RCC_OscConfig+0x26c>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d0f0      	beq.n	8006788 <HAL_RCC_OscConfig+0xe4>
 80067a6:	e014      	b.n	80067d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067a8:	f7fc fe76 	bl	8003498 <HAL_GetTick>
 80067ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067ae:	e008      	b.n	80067c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067b0:	f7fc fe72 	bl	8003498 <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	2b64      	cmp	r3, #100	; 0x64
 80067bc:	d901      	bls.n	80067c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e1e6      	b.n	8006b90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067c2:	4b53      	ldr	r3, [pc, #332]	; (8006910 <HAL_RCC_OscConfig+0x26c>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1f0      	bne.n	80067b0 <HAL_RCC_OscConfig+0x10c>
 80067ce:	e000      	b.n	80067d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0302 	and.w	r3, r3, #2
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d063      	beq.n	80068a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80067de:	4b4c      	ldr	r3, [pc, #304]	; (8006910 <HAL_RCC_OscConfig+0x26c>)
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f003 030c 	and.w	r3, r3, #12
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00b      	beq.n	8006802 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80067ea:	4b49      	ldr	r3, [pc, #292]	; (8006910 <HAL_RCC_OscConfig+0x26c>)
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f003 030c 	and.w	r3, r3, #12
 80067f2:	2b08      	cmp	r3, #8
 80067f4:	d11c      	bne.n	8006830 <HAL_RCC_OscConfig+0x18c>
 80067f6:	4b46      	ldr	r3, [pc, #280]	; (8006910 <HAL_RCC_OscConfig+0x26c>)
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d116      	bne.n	8006830 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006802:	4b43      	ldr	r3, [pc, #268]	; (8006910 <HAL_RCC_OscConfig+0x26c>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d005      	beq.n	800681a <HAL_RCC_OscConfig+0x176>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d001      	beq.n	800681a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e1ba      	b.n	8006b90 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800681a:	4b3d      	ldr	r3, [pc, #244]	; (8006910 <HAL_RCC_OscConfig+0x26c>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	00db      	lsls	r3, r3, #3
 8006828:	4939      	ldr	r1, [pc, #228]	; (8006910 <HAL_RCC_OscConfig+0x26c>)
 800682a:	4313      	orrs	r3, r2
 800682c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800682e:	e03a      	b.n	80068a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d020      	beq.n	800687a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006838:	4b36      	ldr	r3, [pc, #216]	; (8006914 <HAL_RCC_OscConfig+0x270>)
 800683a:	2201      	movs	r2, #1
 800683c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800683e:	f7fc fe2b 	bl	8003498 <HAL_GetTick>
 8006842:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006844:	e008      	b.n	8006858 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006846:	f7fc fe27 	bl	8003498 <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	2b02      	cmp	r3, #2
 8006852:	d901      	bls.n	8006858 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006854:	2303      	movs	r3, #3
 8006856:	e19b      	b.n	8006b90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006858:	4b2d      	ldr	r3, [pc, #180]	; (8006910 <HAL_RCC_OscConfig+0x26c>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0302 	and.w	r3, r3, #2
 8006860:	2b00      	cmp	r3, #0
 8006862:	d0f0      	beq.n	8006846 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006864:	4b2a      	ldr	r3, [pc, #168]	; (8006910 <HAL_RCC_OscConfig+0x26c>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	695b      	ldr	r3, [r3, #20]
 8006870:	00db      	lsls	r3, r3, #3
 8006872:	4927      	ldr	r1, [pc, #156]	; (8006910 <HAL_RCC_OscConfig+0x26c>)
 8006874:	4313      	orrs	r3, r2
 8006876:	600b      	str	r3, [r1, #0]
 8006878:	e015      	b.n	80068a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800687a:	4b26      	ldr	r3, [pc, #152]	; (8006914 <HAL_RCC_OscConfig+0x270>)
 800687c:	2200      	movs	r2, #0
 800687e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006880:	f7fc fe0a 	bl	8003498 <HAL_GetTick>
 8006884:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006886:	e008      	b.n	800689a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006888:	f7fc fe06 	bl	8003498 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b02      	cmp	r3, #2
 8006894:	d901      	bls.n	800689a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e17a      	b.n	8006b90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800689a:	4b1d      	ldr	r3, [pc, #116]	; (8006910 <HAL_RCC_OscConfig+0x26c>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0302 	and.w	r3, r3, #2
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1f0      	bne.n	8006888 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0308 	and.w	r3, r3, #8
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d03a      	beq.n	8006928 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d019      	beq.n	80068ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068ba:	4b17      	ldr	r3, [pc, #92]	; (8006918 <HAL_RCC_OscConfig+0x274>)
 80068bc:	2201      	movs	r2, #1
 80068be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068c0:	f7fc fdea 	bl	8003498 <HAL_GetTick>
 80068c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068c6:	e008      	b.n	80068da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068c8:	f7fc fde6 	bl	8003498 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d901      	bls.n	80068da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e15a      	b.n	8006b90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068da:	4b0d      	ldr	r3, [pc, #52]	; (8006910 <HAL_RCC_OscConfig+0x26c>)
 80068dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d0f0      	beq.n	80068c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80068e6:	2001      	movs	r0, #1
 80068e8:	f000 fb0a 	bl	8006f00 <RCC_Delay>
 80068ec:	e01c      	b.n	8006928 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068ee:	4b0a      	ldr	r3, [pc, #40]	; (8006918 <HAL_RCC_OscConfig+0x274>)
 80068f0:	2200      	movs	r2, #0
 80068f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068f4:	f7fc fdd0 	bl	8003498 <HAL_GetTick>
 80068f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068fa:	e00f      	b.n	800691c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068fc:	f7fc fdcc 	bl	8003498 <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	2b02      	cmp	r3, #2
 8006908:	d908      	bls.n	800691c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e140      	b.n	8006b90 <HAL_RCC_OscConfig+0x4ec>
 800690e:	bf00      	nop
 8006910:	40021000 	.word	0x40021000
 8006914:	42420000 	.word	0x42420000
 8006918:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800691c:	4b9e      	ldr	r3, [pc, #632]	; (8006b98 <HAL_RCC_OscConfig+0x4f4>)
 800691e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006920:	f003 0302 	and.w	r3, r3, #2
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1e9      	bne.n	80068fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0304 	and.w	r3, r3, #4
 8006930:	2b00      	cmp	r3, #0
 8006932:	f000 80a6 	beq.w	8006a82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006936:	2300      	movs	r3, #0
 8006938:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800693a:	4b97      	ldr	r3, [pc, #604]	; (8006b98 <HAL_RCC_OscConfig+0x4f4>)
 800693c:	69db      	ldr	r3, [r3, #28]
 800693e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d10d      	bne.n	8006962 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006946:	4b94      	ldr	r3, [pc, #592]	; (8006b98 <HAL_RCC_OscConfig+0x4f4>)
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	4a93      	ldr	r2, [pc, #588]	; (8006b98 <HAL_RCC_OscConfig+0x4f4>)
 800694c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006950:	61d3      	str	r3, [r2, #28]
 8006952:	4b91      	ldr	r3, [pc, #580]	; (8006b98 <HAL_RCC_OscConfig+0x4f4>)
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800695a:	60bb      	str	r3, [r7, #8]
 800695c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800695e:	2301      	movs	r3, #1
 8006960:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006962:	4b8e      	ldr	r3, [pc, #568]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800696a:	2b00      	cmp	r3, #0
 800696c:	d118      	bne.n	80069a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800696e:	4b8b      	ldr	r3, [pc, #556]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a8a      	ldr	r2, [pc, #552]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 8006974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006978:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800697a:	f7fc fd8d 	bl	8003498 <HAL_GetTick>
 800697e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006980:	e008      	b.n	8006994 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006982:	f7fc fd89 	bl	8003498 <HAL_GetTick>
 8006986:	4602      	mov	r2, r0
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	2b64      	cmp	r3, #100	; 0x64
 800698e:	d901      	bls.n	8006994 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006990:	2303      	movs	r3, #3
 8006992:	e0fd      	b.n	8006b90 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006994:	4b81      	ldr	r3, [pc, #516]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800699c:	2b00      	cmp	r3, #0
 800699e:	d0f0      	beq.n	8006982 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d106      	bne.n	80069b6 <HAL_RCC_OscConfig+0x312>
 80069a8:	4b7b      	ldr	r3, [pc, #492]	; (8006b98 <HAL_RCC_OscConfig+0x4f4>)
 80069aa:	6a1b      	ldr	r3, [r3, #32]
 80069ac:	4a7a      	ldr	r2, [pc, #488]	; (8006b98 <HAL_RCC_OscConfig+0x4f4>)
 80069ae:	f043 0301 	orr.w	r3, r3, #1
 80069b2:	6213      	str	r3, [r2, #32]
 80069b4:	e02d      	b.n	8006a12 <HAL_RCC_OscConfig+0x36e>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10c      	bne.n	80069d8 <HAL_RCC_OscConfig+0x334>
 80069be:	4b76      	ldr	r3, [pc, #472]	; (8006b98 <HAL_RCC_OscConfig+0x4f4>)
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	4a75      	ldr	r2, [pc, #468]	; (8006b98 <HAL_RCC_OscConfig+0x4f4>)
 80069c4:	f023 0301 	bic.w	r3, r3, #1
 80069c8:	6213      	str	r3, [r2, #32]
 80069ca:	4b73      	ldr	r3, [pc, #460]	; (8006b98 <HAL_RCC_OscConfig+0x4f4>)
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	4a72      	ldr	r2, [pc, #456]	; (8006b98 <HAL_RCC_OscConfig+0x4f4>)
 80069d0:	f023 0304 	bic.w	r3, r3, #4
 80069d4:	6213      	str	r3, [r2, #32]
 80069d6:	e01c      	b.n	8006a12 <HAL_RCC_OscConfig+0x36e>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	2b05      	cmp	r3, #5
 80069de:	d10c      	bne.n	80069fa <HAL_RCC_OscConfig+0x356>
 80069e0:	4b6d      	ldr	r3, [pc, #436]	; (8006b98 <HAL_RCC_OscConfig+0x4f4>)
 80069e2:	6a1b      	ldr	r3, [r3, #32]
 80069e4:	4a6c      	ldr	r2, [pc, #432]	; (8006b98 <HAL_RCC_OscConfig+0x4f4>)
 80069e6:	f043 0304 	orr.w	r3, r3, #4
 80069ea:	6213      	str	r3, [r2, #32]
 80069ec:	4b6a      	ldr	r3, [pc, #424]	; (8006b98 <HAL_RCC_OscConfig+0x4f4>)
 80069ee:	6a1b      	ldr	r3, [r3, #32]
 80069f0:	4a69      	ldr	r2, [pc, #420]	; (8006b98 <HAL_RCC_OscConfig+0x4f4>)
 80069f2:	f043 0301 	orr.w	r3, r3, #1
 80069f6:	6213      	str	r3, [r2, #32]
 80069f8:	e00b      	b.n	8006a12 <HAL_RCC_OscConfig+0x36e>
 80069fa:	4b67      	ldr	r3, [pc, #412]	; (8006b98 <HAL_RCC_OscConfig+0x4f4>)
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	4a66      	ldr	r2, [pc, #408]	; (8006b98 <HAL_RCC_OscConfig+0x4f4>)
 8006a00:	f023 0301 	bic.w	r3, r3, #1
 8006a04:	6213      	str	r3, [r2, #32]
 8006a06:	4b64      	ldr	r3, [pc, #400]	; (8006b98 <HAL_RCC_OscConfig+0x4f4>)
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	4a63      	ldr	r2, [pc, #396]	; (8006b98 <HAL_RCC_OscConfig+0x4f4>)
 8006a0c:	f023 0304 	bic.w	r3, r3, #4
 8006a10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d015      	beq.n	8006a46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a1a:	f7fc fd3d 	bl	8003498 <HAL_GetTick>
 8006a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a20:	e00a      	b.n	8006a38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a22:	f7fc fd39 	bl	8003498 <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d901      	bls.n	8006a38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e0ab      	b.n	8006b90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a38:	4b57      	ldr	r3, [pc, #348]	; (8006b98 <HAL_RCC_OscConfig+0x4f4>)
 8006a3a:	6a1b      	ldr	r3, [r3, #32]
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d0ee      	beq.n	8006a22 <HAL_RCC_OscConfig+0x37e>
 8006a44:	e014      	b.n	8006a70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a46:	f7fc fd27 	bl	8003498 <HAL_GetTick>
 8006a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a4c:	e00a      	b.n	8006a64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a4e:	f7fc fd23 	bl	8003498 <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d901      	bls.n	8006a64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e095      	b.n	8006b90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a64:	4b4c      	ldr	r3, [pc, #304]	; (8006b98 <HAL_RCC_OscConfig+0x4f4>)
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	f003 0302 	and.w	r3, r3, #2
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d1ee      	bne.n	8006a4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006a70:	7dfb      	ldrb	r3, [r7, #23]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d105      	bne.n	8006a82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a76:	4b48      	ldr	r3, [pc, #288]	; (8006b98 <HAL_RCC_OscConfig+0x4f4>)
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	4a47      	ldr	r2, [pc, #284]	; (8006b98 <HAL_RCC_OscConfig+0x4f4>)
 8006a7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	69db      	ldr	r3, [r3, #28]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f000 8081 	beq.w	8006b8e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a8c:	4b42      	ldr	r3, [pc, #264]	; (8006b98 <HAL_RCC_OscConfig+0x4f4>)
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f003 030c 	and.w	r3, r3, #12
 8006a94:	2b08      	cmp	r3, #8
 8006a96:	d061      	beq.n	8006b5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	69db      	ldr	r3, [r3, #28]
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d146      	bne.n	8006b2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aa0:	4b3f      	ldr	r3, [pc, #252]	; (8006ba0 <HAL_RCC_OscConfig+0x4fc>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aa6:	f7fc fcf7 	bl	8003498 <HAL_GetTick>
 8006aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006aac:	e008      	b.n	8006ac0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006aae:	f7fc fcf3 	bl	8003498 <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d901      	bls.n	8006ac0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e067      	b.n	8006b90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ac0:	4b35      	ldr	r3, [pc, #212]	; (8006b98 <HAL_RCC_OscConfig+0x4f4>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1f0      	bne.n	8006aae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6a1b      	ldr	r3, [r3, #32]
 8006ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ad4:	d108      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006ad6:	4b30      	ldr	r3, [pc, #192]	; (8006b98 <HAL_RCC_OscConfig+0x4f4>)
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	492d      	ldr	r1, [pc, #180]	; (8006b98 <HAL_RCC_OscConfig+0x4f4>)
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ae8:	4b2b      	ldr	r3, [pc, #172]	; (8006b98 <HAL_RCC_OscConfig+0x4f4>)
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a19      	ldr	r1, [r3, #32]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af8:	430b      	orrs	r3, r1
 8006afa:	4927      	ldr	r1, [pc, #156]	; (8006b98 <HAL_RCC_OscConfig+0x4f4>)
 8006afc:	4313      	orrs	r3, r2
 8006afe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b00:	4b27      	ldr	r3, [pc, #156]	; (8006ba0 <HAL_RCC_OscConfig+0x4fc>)
 8006b02:	2201      	movs	r2, #1
 8006b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b06:	f7fc fcc7 	bl	8003498 <HAL_GetTick>
 8006b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006b0c:	e008      	b.n	8006b20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b0e:	f7fc fcc3 	bl	8003498 <HAL_GetTick>
 8006b12:	4602      	mov	r2, r0
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d901      	bls.n	8006b20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e037      	b.n	8006b90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006b20:	4b1d      	ldr	r3, [pc, #116]	; (8006b98 <HAL_RCC_OscConfig+0x4f4>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d0f0      	beq.n	8006b0e <HAL_RCC_OscConfig+0x46a>
 8006b2c:	e02f      	b.n	8006b8e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b2e:	4b1c      	ldr	r3, [pc, #112]	; (8006ba0 <HAL_RCC_OscConfig+0x4fc>)
 8006b30:	2200      	movs	r2, #0
 8006b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b34:	f7fc fcb0 	bl	8003498 <HAL_GetTick>
 8006b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b3a:	e008      	b.n	8006b4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b3c:	f7fc fcac 	bl	8003498 <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d901      	bls.n	8006b4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e020      	b.n	8006b90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b4e:	4b12      	ldr	r3, [pc, #72]	; (8006b98 <HAL_RCC_OscConfig+0x4f4>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1f0      	bne.n	8006b3c <HAL_RCC_OscConfig+0x498>
 8006b5a:	e018      	b.n	8006b8e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	69db      	ldr	r3, [r3, #28]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d101      	bne.n	8006b68 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e013      	b.n	8006b90 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006b68:	4b0b      	ldr	r3, [pc, #44]	; (8006b98 <HAL_RCC_OscConfig+0x4f4>)
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a1b      	ldr	r3, [r3, #32]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d106      	bne.n	8006b8a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d001      	beq.n	8006b8e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e000      	b.n	8006b90 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3718      	adds	r7, #24
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	40021000 	.word	0x40021000
 8006b9c:	40007000 	.word	0x40007000
 8006ba0:	42420060 	.word	0x42420060

08006ba4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d101      	bne.n	8006bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e0d0      	b.n	8006d5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006bb8:	4b6a      	ldr	r3, [pc, #424]	; (8006d64 <HAL_RCC_ClockConfig+0x1c0>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 0307 	and.w	r3, r3, #7
 8006bc0:	683a      	ldr	r2, [r7, #0]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d910      	bls.n	8006be8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bc6:	4b67      	ldr	r3, [pc, #412]	; (8006d64 <HAL_RCC_ClockConfig+0x1c0>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f023 0207 	bic.w	r2, r3, #7
 8006bce:	4965      	ldr	r1, [pc, #404]	; (8006d64 <HAL_RCC_ClockConfig+0x1c0>)
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bd6:	4b63      	ldr	r3, [pc, #396]	; (8006d64 <HAL_RCC_ClockConfig+0x1c0>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0307 	and.w	r3, r3, #7
 8006bde:	683a      	ldr	r2, [r7, #0]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d001      	beq.n	8006be8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e0b8      	b.n	8006d5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0302 	and.w	r3, r3, #2
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d020      	beq.n	8006c36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0304 	and.w	r3, r3, #4
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d005      	beq.n	8006c0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c00:	4b59      	ldr	r3, [pc, #356]	; (8006d68 <HAL_RCC_ClockConfig+0x1c4>)
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	4a58      	ldr	r2, [pc, #352]	; (8006d68 <HAL_RCC_ClockConfig+0x1c4>)
 8006c06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006c0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0308 	and.w	r3, r3, #8
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d005      	beq.n	8006c24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c18:	4b53      	ldr	r3, [pc, #332]	; (8006d68 <HAL_RCC_ClockConfig+0x1c4>)
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	4a52      	ldr	r2, [pc, #328]	; (8006d68 <HAL_RCC_ClockConfig+0x1c4>)
 8006c1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006c22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c24:	4b50      	ldr	r3, [pc, #320]	; (8006d68 <HAL_RCC_ClockConfig+0x1c4>)
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	494d      	ldr	r1, [pc, #308]	; (8006d68 <HAL_RCC_ClockConfig+0x1c4>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0301 	and.w	r3, r3, #1
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d040      	beq.n	8006cc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d107      	bne.n	8006c5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c4a:	4b47      	ldr	r3, [pc, #284]	; (8006d68 <HAL_RCC_ClockConfig+0x1c4>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d115      	bne.n	8006c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e07f      	b.n	8006d5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d107      	bne.n	8006c72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c62:	4b41      	ldr	r3, [pc, #260]	; (8006d68 <HAL_RCC_ClockConfig+0x1c4>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d109      	bne.n	8006c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e073      	b.n	8006d5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c72:	4b3d      	ldr	r3, [pc, #244]	; (8006d68 <HAL_RCC_ClockConfig+0x1c4>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0302 	and.w	r3, r3, #2
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d101      	bne.n	8006c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e06b      	b.n	8006d5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c82:	4b39      	ldr	r3, [pc, #228]	; (8006d68 <HAL_RCC_ClockConfig+0x1c4>)
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	f023 0203 	bic.w	r2, r3, #3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	4936      	ldr	r1, [pc, #216]	; (8006d68 <HAL_RCC_ClockConfig+0x1c4>)
 8006c90:	4313      	orrs	r3, r2
 8006c92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c94:	f7fc fc00 	bl	8003498 <HAL_GetTick>
 8006c98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c9a:	e00a      	b.n	8006cb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c9c:	f7fc fbfc 	bl	8003498 <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d901      	bls.n	8006cb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e053      	b.n	8006d5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cb2:	4b2d      	ldr	r3, [pc, #180]	; (8006d68 <HAL_RCC_ClockConfig+0x1c4>)
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	f003 020c 	and.w	r2, r3, #12
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d1eb      	bne.n	8006c9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006cc4:	4b27      	ldr	r3, [pc, #156]	; (8006d64 <HAL_RCC_ClockConfig+0x1c0>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0307 	and.w	r3, r3, #7
 8006ccc:	683a      	ldr	r2, [r7, #0]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d210      	bcs.n	8006cf4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cd2:	4b24      	ldr	r3, [pc, #144]	; (8006d64 <HAL_RCC_ClockConfig+0x1c0>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f023 0207 	bic.w	r2, r3, #7
 8006cda:	4922      	ldr	r1, [pc, #136]	; (8006d64 <HAL_RCC_ClockConfig+0x1c0>)
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ce2:	4b20      	ldr	r3, [pc, #128]	; (8006d64 <HAL_RCC_ClockConfig+0x1c0>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0307 	and.w	r3, r3, #7
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d001      	beq.n	8006cf4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e032      	b.n	8006d5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0304 	and.w	r3, r3, #4
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d008      	beq.n	8006d12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d00:	4b19      	ldr	r3, [pc, #100]	; (8006d68 <HAL_RCC_ClockConfig+0x1c4>)
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	4916      	ldr	r1, [pc, #88]	; (8006d68 <HAL_RCC_ClockConfig+0x1c4>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 0308 	and.w	r3, r3, #8
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d009      	beq.n	8006d32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006d1e:	4b12      	ldr	r3, [pc, #72]	; (8006d68 <HAL_RCC_ClockConfig+0x1c4>)
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	00db      	lsls	r3, r3, #3
 8006d2c:	490e      	ldr	r1, [pc, #56]	; (8006d68 <HAL_RCC_ClockConfig+0x1c4>)
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006d32:	f000 f821 	bl	8006d78 <HAL_RCC_GetSysClockFreq>
 8006d36:	4601      	mov	r1, r0
 8006d38:	4b0b      	ldr	r3, [pc, #44]	; (8006d68 <HAL_RCC_ClockConfig+0x1c4>)
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	091b      	lsrs	r3, r3, #4
 8006d3e:	f003 030f 	and.w	r3, r3, #15
 8006d42:	4a0a      	ldr	r2, [pc, #40]	; (8006d6c <HAL_RCC_ClockConfig+0x1c8>)
 8006d44:	5cd3      	ldrb	r3, [r2, r3]
 8006d46:	fa21 f303 	lsr.w	r3, r1, r3
 8006d4a:	4a09      	ldr	r2, [pc, #36]	; (8006d70 <HAL_RCC_ClockConfig+0x1cc>)
 8006d4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006d4e:	4b09      	ldr	r3, [pc, #36]	; (8006d74 <HAL_RCC_ClockConfig+0x1d0>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7fc fa62 	bl	800321c <HAL_InitTick>

  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	40022000 	.word	0x40022000
 8006d68:	40021000 	.word	0x40021000
 8006d6c:	0800bddc 	.word	0x0800bddc
 8006d70:	20000028 	.word	0x20000028
 8006d74:	2000002c 	.word	0x2000002c

08006d78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d78:	b490      	push	{r4, r7}
 8006d7a:	b08a      	sub	sp, #40	; 0x28
 8006d7c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006d7e:	4b2a      	ldr	r3, [pc, #168]	; (8006e28 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006d80:	1d3c      	adds	r4, r7, #4
 8006d82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006d84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006d88:	4b28      	ldr	r3, [pc, #160]	; (8006e2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006d8a:	881b      	ldrh	r3, [r3, #0]
 8006d8c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	61fb      	str	r3, [r7, #28]
 8006d92:	2300      	movs	r3, #0
 8006d94:	61bb      	str	r3, [r7, #24]
 8006d96:	2300      	movs	r3, #0
 8006d98:	627b      	str	r3, [r7, #36]	; 0x24
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006da2:	4b23      	ldr	r3, [pc, #140]	; (8006e30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	f003 030c 	and.w	r3, r3, #12
 8006dae:	2b04      	cmp	r3, #4
 8006db0:	d002      	beq.n	8006db8 <HAL_RCC_GetSysClockFreq+0x40>
 8006db2:	2b08      	cmp	r3, #8
 8006db4:	d003      	beq.n	8006dbe <HAL_RCC_GetSysClockFreq+0x46>
 8006db6:	e02d      	b.n	8006e14 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006db8:	4b1e      	ldr	r3, [pc, #120]	; (8006e34 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006dba:	623b      	str	r3, [r7, #32]
      break;
 8006dbc:	e02d      	b.n	8006e1a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	0c9b      	lsrs	r3, r3, #18
 8006dc2:	f003 030f 	and.w	r3, r3, #15
 8006dc6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006dca:	4413      	add	r3, r2
 8006dcc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006dd0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d013      	beq.n	8006e04 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006ddc:	4b14      	ldr	r3, [pc, #80]	; (8006e30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	0c5b      	lsrs	r3, r3, #17
 8006de2:	f003 0301 	and.w	r3, r3, #1
 8006de6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006dea:	4413      	add	r3, r2
 8006dec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006df0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	4a0f      	ldr	r2, [pc, #60]	; (8006e34 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006df6:	fb02 f203 	mul.w	r2, r2, r3
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e00:	627b      	str	r3, [r7, #36]	; 0x24
 8006e02:	e004      	b.n	8006e0e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	4a0c      	ldr	r2, [pc, #48]	; (8006e38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006e08:	fb02 f303 	mul.w	r3, r2, r3
 8006e0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e10:	623b      	str	r3, [r7, #32]
      break;
 8006e12:	e002      	b.n	8006e1a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006e14:	4b07      	ldr	r3, [pc, #28]	; (8006e34 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006e16:	623b      	str	r3, [r7, #32]
      break;
 8006e18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3728      	adds	r7, #40	; 0x28
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bc90      	pop	{r4, r7}
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	0800bd8c 	.word	0x0800bd8c
 8006e2c:	0800bd9c 	.word	0x0800bd9c
 8006e30:	40021000 	.word	0x40021000
 8006e34:	007a1200 	.word	0x007a1200
 8006e38:	003d0900 	.word	0x003d0900

08006e3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e40:	4b02      	ldr	r3, [pc, #8]	; (8006e4c <HAL_RCC_GetHCLKFreq+0x10>)
 8006e42:	681b      	ldr	r3, [r3, #0]
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bc80      	pop	{r7}
 8006e4a:	4770      	bx	lr
 8006e4c:	20000028 	.word	0x20000028

08006e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006e54:	f7ff fff2 	bl	8006e3c <HAL_RCC_GetHCLKFreq>
 8006e58:	4601      	mov	r1, r0
 8006e5a:	4b05      	ldr	r3, [pc, #20]	; (8006e70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	0a1b      	lsrs	r3, r3, #8
 8006e60:	f003 0307 	and.w	r3, r3, #7
 8006e64:	4a03      	ldr	r2, [pc, #12]	; (8006e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e66:	5cd3      	ldrb	r3, [r2, r3]
 8006e68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	40021000 	.word	0x40021000
 8006e74:	0800bdec 	.word	0x0800bdec

08006e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006e7c:	f7ff ffde 	bl	8006e3c <HAL_RCC_GetHCLKFreq>
 8006e80:	4601      	mov	r1, r0
 8006e82:	4b05      	ldr	r3, [pc, #20]	; (8006e98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	0adb      	lsrs	r3, r3, #11
 8006e88:	f003 0307 	and.w	r3, r3, #7
 8006e8c:	4a03      	ldr	r2, [pc, #12]	; (8006e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e8e:	5cd3      	ldrb	r3, [r2, r3]
 8006e90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	40021000 	.word	0x40021000
 8006e9c:	0800bdec 	.word	0x0800bdec

08006ea0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	220f      	movs	r2, #15
 8006eae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006eb0:	4b11      	ldr	r3, [pc, #68]	; (8006ef8 <HAL_RCC_GetClockConfig+0x58>)
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f003 0203 	and.w	r2, r3, #3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006ebc:	4b0e      	ldr	r3, [pc, #56]	; (8006ef8 <HAL_RCC_GetClockConfig+0x58>)
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006ec8:	4b0b      	ldr	r3, [pc, #44]	; (8006ef8 <HAL_RCC_GetClockConfig+0x58>)
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006ed4:	4b08      	ldr	r3, [pc, #32]	; (8006ef8 <HAL_RCC_GetClockConfig+0x58>)
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	08db      	lsrs	r3, r3, #3
 8006eda:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006ee2:	4b06      	ldr	r3, [pc, #24]	; (8006efc <HAL_RCC_GetClockConfig+0x5c>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0207 	and.w	r2, r3, #7
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8006eee:	bf00      	nop
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bc80      	pop	{r7}
 8006ef6:	4770      	bx	lr
 8006ef8:	40021000 	.word	0x40021000
 8006efc:	40022000 	.word	0x40022000

08006f00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006f08:	4b0a      	ldr	r3, [pc, #40]	; (8006f34 <RCC_Delay+0x34>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a0a      	ldr	r2, [pc, #40]	; (8006f38 <RCC_Delay+0x38>)
 8006f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f12:	0a5b      	lsrs	r3, r3, #9
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	fb02 f303 	mul.w	r3, r2, r3
 8006f1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006f1c:	bf00      	nop
  }
  while (Delay --);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	1e5a      	subs	r2, r3, #1
 8006f22:	60fa      	str	r2, [r7, #12]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1f9      	bne.n	8006f1c <RCC_Delay+0x1c>
}
 8006f28:	bf00      	nop
 8006f2a:	3714      	adds	r7, #20
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bc80      	pop	{r7}
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	20000028 	.word	0x20000028
 8006f38:	10624dd3 	.word	0x10624dd3

08006f3c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b086      	sub	sp, #24
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006f44:	2300      	movs	r3, #0
 8006f46:	613b      	str	r3, [r7, #16]
 8006f48:	2300      	movs	r3, #0
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0301 	and.w	r3, r3, #1
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d07d      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f5c:	4b4f      	ldr	r3, [pc, #316]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f5e:	69db      	ldr	r3, [r3, #28]
 8006f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10d      	bne.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f68:	4b4c      	ldr	r3, [pc, #304]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f6a:	69db      	ldr	r3, [r3, #28]
 8006f6c:	4a4b      	ldr	r2, [pc, #300]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f72:	61d3      	str	r3, [r2, #28]
 8006f74:	4b49      	ldr	r3, [pc, #292]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f76:	69db      	ldr	r3, [r3, #28]
 8006f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f7c:	60bb      	str	r3, [r7, #8]
 8006f7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f80:	2301      	movs	r3, #1
 8006f82:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f84:	4b46      	ldr	r3, [pc, #280]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d118      	bne.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f90:	4b43      	ldr	r3, [pc, #268]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a42      	ldr	r2, [pc, #264]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f9c:	f7fc fa7c 	bl	8003498 <HAL_GetTick>
 8006fa0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fa2:	e008      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fa4:	f7fc fa78 	bl	8003498 <HAL_GetTick>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	2b64      	cmp	r3, #100	; 0x64
 8006fb0:	d901      	bls.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e06d      	b.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fb6:	4b3a      	ldr	r3, [pc, #232]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d0f0      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006fc2:	4b36      	ldr	r3, [pc, #216]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d02e      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d027      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006fe0:	4b2e      	ldr	r3, [pc, #184]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fe2:	6a1b      	ldr	r3, [r3, #32]
 8006fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fe8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006fea:	4b2e      	ldr	r3, [pc, #184]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006fec:	2201      	movs	r2, #1
 8006fee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ff0:	4b2c      	ldr	r3, [pc, #176]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006ff6:	4a29      	ldr	r2, [pc, #164]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	2b00      	cmp	r3, #0
 8007004:	d014      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007006:	f7fc fa47 	bl	8003498 <HAL_GetTick>
 800700a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800700c:	e00a      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800700e:	f7fc fa43 	bl	8003498 <HAL_GetTick>
 8007012:	4602      	mov	r2, r0
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	f241 3288 	movw	r2, #5000	; 0x1388
 800701c:	4293      	cmp	r3, r2
 800701e:	d901      	bls.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007020:	2303      	movs	r3, #3
 8007022:	e036      	b.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007024:	4b1d      	ldr	r3, [pc, #116]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007026:	6a1b      	ldr	r3, [r3, #32]
 8007028:	f003 0302 	and.w	r3, r3, #2
 800702c:	2b00      	cmp	r3, #0
 800702e:	d0ee      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007030:	4b1a      	ldr	r3, [pc, #104]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007032:	6a1b      	ldr	r3, [r3, #32]
 8007034:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	4917      	ldr	r1, [pc, #92]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800703e:	4313      	orrs	r3, r2
 8007040:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007042:	7dfb      	ldrb	r3, [r7, #23]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d105      	bne.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007048:	4b14      	ldr	r3, [pc, #80]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800704a:	69db      	ldr	r3, [r3, #28]
 800704c:	4a13      	ldr	r2, [pc, #76]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800704e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007052:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0302 	and.w	r3, r3, #2
 800705c:	2b00      	cmp	r3, #0
 800705e:	d008      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007060:	4b0e      	ldr	r3, [pc, #56]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	490b      	ldr	r1, [pc, #44]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800706e:	4313      	orrs	r3, r2
 8007070:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 0310 	and.w	r3, r3, #16
 800707a:	2b00      	cmp	r3, #0
 800707c:	d008      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800707e:	4b07      	ldr	r3, [pc, #28]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	4904      	ldr	r1, [pc, #16]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800708c:	4313      	orrs	r3, r2
 800708e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3718      	adds	r7, #24
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	40021000 	.word	0x40021000
 80070a0:	40007000 	.word	0x40007000
 80070a4:	42420440 	.word	0x42420440

080070a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d101      	bne.n	80070ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e053      	b.n	8007162 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d106      	bne.n	80070da <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f7fb ffa3 	bl	8003020 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2202      	movs	r2, #2
 80070de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070f0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685a      	ldr	r2, [r3, #4]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	431a      	orrs	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	431a      	orrs	r2, r3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	431a      	orrs	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	695b      	ldr	r3, [r3, #20]
 800710c:	431a      	orrs	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	699b      	ldr	r3, [r3, #24]
 8007112:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007116:	431a      	orrs	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	69db      	ldr	r3, [r3, #28]
 800711c:	431a      	orrs	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	ea42 0103 	orr.w	r1, r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	430a      	orrs	r2, r1
 8007130:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	699b      	ldr	r3, [r3, #24]
 8007136:	0c1a      	lsrs	r2, r3, #16
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f002 0204 	and.w	r2, r2, #4
 8007140:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	69da      	ldr	r2, [r3, #28]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007150:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b088      	sub	sp, #32
 800716e:	af00      	add	r7, sp, #0
 8007170:	60f8      	str	r0, [r7, #12]
 8007172:	60b9      	str	r1, [r7, #8]
 8007174:	603b      	str	r3, [r7, #0]
 8007176:	4613      	mov	r3, r2
 8007178:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800717a:	2300      	movs	r3, #0
 800717c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007184:	2b01      	cmp	r3, #1
 8007186:	d101      	bne.n	800718c <HAL_SPI_Transmit+0x22>
 8007188:	2302      	movs	r3, #2
 800718a:	e11e      	b.n	80073ca <HAL_SPI_Transmit+0x260>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007194:	f7fc f980 	bl	8003498 <HAL_GetTick>
 8007198:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800719a:	88fb      	ldrh	r3, [r7, #6]
 800719c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d002      	beq.n	80071b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80071aa:	2302      	movs	r3, #2
 80071ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80071ae:	e103      	b.n	80073b8 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d002      	beq.n	80071bc <HAL_SPI_Transmit+0x52>
 80071b6:	88fb      	ldrh	r3, [r7, #6]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d102      	bne.n	80071c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80071c0:	e0fa      	b.n	80073b8 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2203      	movs	r2, #3
 80071c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	88fa      	ldrh	r2, [r7, #6]
 80071da:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	88fa      	ldrh	r2, [r7, #6]
 80071e0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2200      	movs	r2, #0
 80071ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007208:	d107      	bne.n	800721a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007218:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007224:	2b40      	cmp	r3, #64	; 0x40
 8007226:	d007      	beq.n	8007238 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007236:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007240:	d14b      	bne.n	80072da <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d002      	beq.n	8007250 <HAL_SPI_Transmit+0xe6>
 800724a:	8afb      	ldrh	r3, [r7, #22]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d13e      	bne.n	80072ce <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007254:	881a      	ldrh	r2, [r3, #0]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007260:	1c9a      	adds	r2, r3, #2
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800726a:	b29b      	uxth	r3, r3
 800726c:	3b01      	subs	r3, #1
 800726e:	b29a      	uxth	r2, r3
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007274:	e02b      	b.n	80072ce <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f003 0302 	and.w	r3, r3, #2
 8007280:	2b02      	cmp	r3, #2
 8007282:	d112      	bne.n	80072aa <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007288:	881a      	ldrh	r2, [r3, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007294:	1c9a      	adds	r2, r3, #2
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800729e:	b29b      	uxth	r3, r3
 80072a0:	3b01      	subs	r3, #1
 80072a2:	b29a      	uxth	r2, r3
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80072a8:	e011      	b.n	80072ce <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072aa:	f7fc f8f5 	bl	8003498 <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	683a      	ldr	r2, [r7, #0]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d803      	bhi.n	80072c2 <HAL_SPI_Transmit+0x158>
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c0:	d102      	bne.n	80072c8 <HAL_SPI_Transmit+0x15e>
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d102      	bne.n	80072ce <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80072c8:	2303      	movs	r3, #3
 80072ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80072cc:	e074      	b.n	80073b8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1ce      	bne.n	8007276 <HAL_SPI_Transmit+0x10c>
 80072d8:	e04c      	b.n	8007374 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d002      	beq.n	80072e8 <HAL_SPI_Transmit+0x17e>
 80072e2:	8afb      	ldrh	r3, [r7, #22]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d140      	bne.n	800736a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	330c      	adds	r3, #12
 80072f2:	7812      	ldrb	r2, [r2, #0]
 80072f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072fa:	1c5a      	adds	r2, r3, #1
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007304:	b29b      	uxth	r3, r3
 8007306:	3b01      	subs	r3, #1
 8007308:	b29a      	uxth	r2, r3
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800730e:	e02c      	b.n	800736a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	f003 0302 	and.w	r3, r3, #2
 800731a:	2b02      	cmp	r3, #2
 800731c:	d113      	bne.n	8007346 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	330c      	adds	r3, #12
 8007328:	7812      	ldrb	r2, [r2, #0]
 800732a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007330:	1c5a      	adds	r2, r3, #1
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800733a:	b29b      	uxth	r3, r3
 800733c:	3b01      	subs	r3, #1
 800733e:	b29a      	uxth	r2, r3
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	86da      	strh	r2, [r3, #54]	; 0x36
 8007344:	e011      	b.n	800736a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007346:	f7fc f8a7 	bl	8003498 <HAL_GetTick>
 800734a:	4602      	mov	r2, r0
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	683a      	ldr	r2, [r7, #0]
 8007352:	429a      	cmp	r2, r3
 8007354:	d803      	bhi.n	800735e <HAL_SPI_Transmit+0x1f4>
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800735c:	d102      	bne.n	8007364 <HAL_SPI_Transmit+0x1fa>
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d102      	bne.n	800736a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8007364:	2303      	movs	r3, #3
 8007366:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007368:	e026      	b.n	80073b8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800736e:	b29b      	uxth	r3, r3
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1cd      	bne.n	8007310 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007374:	69ba      	ldr	r2, [r7, #24]
 8007376:	6839      	ldr	r1, [r7, #0]
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f000 fb91 	bl	8007aa0 <SPI_EndRxTxTransaction>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d002      	beq.n	800738a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2220      	movs	r2, #32
 8007388:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10a      	bne.n	80073a8 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007392:	2300      	movs	r3, #0
 8007394:	613b      	str	r3, [r7, #16]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	613b      	str	r3, [r7, #16]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	613b      	str	r3, [r7, #16]
 80073a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d002      	beq.n	80073b6 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	77fb      	strb	r3, [r7, #31]
 80073b4:	e000      	b.n	80073b8 <HAL_SPI_Transmit+0x24e>
  }

error:
 80073b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80073c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3720      	adds	r7, #32
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b088      	sub	sp, #32
 80073d6:	af02      	add	r7, sp, #8
 80073d8:	60f8      	str	r0, [r7, #12]
 80073da:	60b9      	str	r1, [r7, #8]
 80073dc:	603b      	str	r3, [r7, #0]
 80073de:	4613      	mov	r3, r2
 80073e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80073e2:	2300      	movs	r3, #0
 80073e4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073ee:	d112      	bne.n	8007416 <HAL_SPI_Receive+0x44>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10e      	bne.n	8007416 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2204      	movs	r2, #4
 80073fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007400:	88fa      	ldrh	r2, [r7, #6]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	4613      	mov	r3, r2
 8007408:	68ba      	ldr	r2, [r7, #8]
 800740a:	68b9      	ldr	r1, [r7, #8]
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	f000 f8e9 	bl	80075e4 <HAL_SPI_TransmitReceive>
 8007412:	4603      	mov	r3, r0
 8007414:	e0e2      	b.n	80075dc <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800741c:	2b01      	cmp	r3, #1
 800741e:	d101      	bne.n	8007424 <HAL_SPI_Receive+0x52>
 8007420:	2302      	movs	r3, #2
 8007422:	e0db      	b.n	80075dc <HAL_SPI_Receive+0x20a>
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800742c:	f7fc f834 	bl	8003498 <HAL_GetTick>
 8007430:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b01      	cmp	r3, #1
 800743c:	d002      	beq.n	8007444 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800743e:	2302      	movs	r3, #2
 8007440:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007442:	e0c2      	b.n	80075ca <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d002      	beq.n	8007450 <HAL_SPI_Receive+0x7e>
 800744a:	88fb      	ldrh	r3, [r7, #6]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d102      	bne.n	8007456 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007454:	e0b9      	b.n	80075ca <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2204      	movs	r2, #4
 800745a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	68ba      	ldr	r2, [r7, #8]
 8007468:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	88fa      	ldrh	r2, [r7, #6]
 800746e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	88fa      	ldrh	r2, [r7, #6]
 8007474:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2200      	movs	r2, #0
 800748c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800749c:	d107      	bne.n	80074ae <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80074ac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b8:	2b40      	cmp	r3, #64	; 0x40
 80074ba:	d007      	beq.n	80074cc <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074ca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d162      	bne.n	800759a <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80074d4:	e02e      	b.n	8007534 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f003 0301 	and.w	r3, r3, #1
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d115      	bne.n	8007510 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f103 020c 	add.w	r2, r3, #12
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f0:	7812      	ldrb	r2, [r2, #0]
 80074f2:	b2d2      	uxtb	r2, r2
 80074f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fa:	1c5a      	adds	r2, r3, #1
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007504:	b29b      	uxth	r3, r3
 8007506:	3b01      	subs	r3, #1
 8007508:	b29a      	uxth	r2, r3
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800750e:	e011      	b.n	8007534 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007510:	f7fb ffc2 	bl	8003498 <HAL_GetTick>
 8007514:	4602      	mov	r2, r0
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	429a      	cmp	r2, r3
 800751e:	d803      	bhi.n	8007528 <HAL_SPI_Receive+0x156>
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007526:	d102      	bne.n	800752e <HAL_SPI_Receive+0x15c>
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d102      	bne.n	8007534 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800752e:	2303      	movs	r3, #3
 8007530:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007532:	e04a      	b.n	80075ca <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007538:	b29b      	uxth	r3, r3
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1cb      	bne.n	80074d6 <HAL_SPI_Receive+0x104>
 800753e:	e031      	b.n	80075a4 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	f003 0301 	and.w	r3, r3, #1
 800754a:	2b01      	cmp	r3, #1
 800754c:	d113      	bne.n	8007576 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68da      	ldr	r2, [r3, #12]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007558:	b292      	uxth	r2, r2
 800755a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007560:	1c9a      	adds	r2, r3, #2
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800756a:	b29b      	uxth	r3, r3
 800756c:	3b01      	subs	r3, #1
 800756e:	b29a      	uxth	r2, r3
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007574:	e011      	b.n	800759a <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007576:	f7fb ff8f 	bl	8003498 <HAL_GetTick>
 800757a:	4602      	mov	r2, r0
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	683a      	ldr	r2, [r7, #0]
 8007582:	429a      	cmp	r2, r3
 8007584:	d803      	bhi.n	800758e <HAL_SPI_Receive+0x1bc>
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800758c:	d102      	bne.n	8007594 <HAL_SPI_Receive+0x1c2>
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d102      	bne.n	800759a <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007598:	e017      	b.n	80075ca <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800759e:	b29b      	uxth	r3, r3
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d1cd      	bne.n	8007540 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075a4:	693a      	ldr	r2, [r7, #16]
 80075a6:	6839      	ldr	r1, [r7, #0]
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f000 fa27 	bl	80079fc <SPI_EndRxTransaction>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d002      	beq.n	80075ba <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2220      	movs	r2, #32
 80075b8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d002      	beq.n	80075c8 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	75fb      	strb	r3, [r7, #23]
 80075c6:	e000      	b.n	80075ca <HAL_SPI_Receive+0x1f8>
  }

error :
 80075c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80075da:	7dfb      	ldrb	r3, [r7, #23]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3718      	adds	r7, #24
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b08c      	sub	sp, #48	; 0x30
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
 80075f0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80075f2:	2301      	movs	r3, #1
 80075f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80075f6:	2300      	movs	r3, #0
 80075f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007602:	2b01      	cmp	r3, #1
 8007604:	d101      	bne.n	800760a <HAL_SPI_TransmitReceive+0x26>
 8007606:	2302      	movs	r3, #2
 8007608:	e18a      	b.n	8007920 <HAL_SPI_TransmitReceive+0x33c>
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2201      	movs	r2, #1
 800760e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007612:	f7fb ff41 	bl	8003498 <HAL_GetTick>
 8007616:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800761e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007628:	887b      	ldrh	r3, [r7, #2]
 800762a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800762c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007630:	2b01      	cmp	r3, #1
 8007632:	d00f      	beq.n	8007654 <HAL_SPI_TransmitReceive+0x70>
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800763a:	d107      	bne.n	800764c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d103      	bne.n	800764c <HAL_SPI_TransmitReceive+0x68>
 8007644:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007648:	2b04      	cmp	r3, #4
 800764a:	d003      	beq.n	8007654 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800764c:	2302      	movs	r3, #2
 800764e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007652:	e15b      	b.n	800790c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d005      	beq.n	8007666 <HAL_SPI_TransmitReceive+0x82>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d002      	beq.n	8007666 <HAL_SPI_TransmitReceive+0x82>
 8007660:	887b      	ldrh	r3, [r7, #2]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d103      	bne.n	800766e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800766c:	e14e      	b.n	800790c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b04      	cmp	r3, #4
 8007678:	d003      	beq.n	8007682 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2205      	movs	r2, #5
 800767e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2200      	movs	r2, #0
 8007686:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	887a      	ldrh	r2, [r7, #2]
 8007692:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	887a      	ldrh	r2, [r7, #2]
 8007698:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	887a      	ldrh	r2, [r7, #2]
 80076a4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	887a      	ldrh	r2, [r7, #2]
 80076aa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c2:	2b40      	cmp	r3, #64	; 0x40
 80076c4:	d007      	beq.n	80076d6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076de:	d178      	bne.n	80077d2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d002      	beq.n	80076ee <HAL_SPI_TransmitReceive+0x10a>
 80076e8:	8b7b      	ldrh	r3, [r7, #26]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d166      	bne.n	80077bc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f2:	881a      	ldrh	r2, [r3, #0]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fe:	1c9a      	adds	r2, r3, #2
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007708:	b29b      	uxth	r3, r3
 800770a:	3b01      	subs	r3, #1
 800770c:	b29a      	uxth	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007712:	e053      	b.n	80077bc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	f003 0302 	and.w	r3, r3, #2
 800771e:	2b02      	cmp	r3, #2
 8007720:	d11b      	bne.n	800775a <HAL_SPI_TransmitReceive+0x176>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007726:	b29b      	uxth	r3, r3
 8007728:	2b00      	cmp	r3, #0
 800772a:	d016      	beq.n	800775a <HAL_SPI_TransmitReceive+0x176>
 800772c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772e:	2b01      	cmp	r3, #1
 8007730:	d113      	bne.n	800775a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007736:	881a      	ldrh	r2, [r3, #0]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007742:	1c9a      	adds	r2, r3, #2
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800774c:	b29b      	uxth	r3, r3
 800774e:	3b01      	subs	r3, #1
 8007750:	b29a      	uxth	r2, r3
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007756:	2300      	movs	r3, #0
 8007758:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	f003 0301 	and.w	r3, r3, #1
 8007764:	2b01      	cmp	r3, #1
 8007766:	d119      	bne.n	800779c <HAL_SPI_TransmitReceive+0x1b8>
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800776c:	b29b      	uxth	r3, r3
 800776e:	2b00      	cmp	r3, #0
 8007770:	d014      	beq.n	800779c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68da      	ldr	r2, [r3, #12]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777c:	b292      	uxth	r2, r2
 800777e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007784:	1c9a      	adds	r2, r3, #2
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800778e:	b29b      	uxth	r3, r3
 8007790:	3b01      	subs	r3, #1
 8007792:	b29a      	uxth	r2, r3
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007798:	2301      	movs	r3, #1
 800779a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800779c:	f7fb fe7c 	bl	8003498 <HAL_GetTick>
 80077a0:	4602      	mov	r2, r0
 80077a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a4:	1ad3      	subs	r3, r2, r3
 80077a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d807      	bhi.n	80077bc <HAL_SPI_TransmitReceive+0x1d8>
 80077ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b2:	d003      	beq.n	80077bc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80077b4:	2303      	movs	r3, #3
 80077b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80077ba:	e0a7      	b.n	800790c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1a6      	bne.n	8007714 <HAL_SPI_TransmitReceive+0x130>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d1a1      	bne.n	8007714 <HAL_SPI_TransmitReceive+0x130>
 80077d0:	e07c      	b.n	80078cc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d002      	beq.n	80077e0 <HAL_SPI_TransmitReceive+0x1fc>
 80077da:	8b7b      	ldrh	r3, [r7, #26]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d16b      	bne.n	80078b8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	330c      	adds	r3, #12
 80077ea:	7812      	ldrb	r2, [r2, #0]
 80077ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f2:	1c5a      	adds	r2, r3, #1
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	3b01      	subs	r3, #1
 8007800:	b29a      	uxth	r2, r3
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007806:	e057      	b.n	80078b8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f003 0302 	and.w	r3, r3, #2
 8007812:	2b02      	cmp	r3, #2
 8007814:	d11c      	bne.n	8007850 <HAL_SPI_TransmitReceive+0x26c>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800781a:	b29b      	uxth	r3, r3
 800781c:	2b00      	cmp	r3, #0
 800781e:	d017      	beq.n	8007850 <HAL_SPI_TransmitReceive+0x26c>
 8007820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007822:	2b01      	cmp	r3, #1
 8007824:	d114      	bne.n	8007850 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	330c      	adds	r3, #12
 8007830:	7812      	ldrb	r2, [r2, #0]
 8007832:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007838:	1c5a      	adds	r2, r3, #1
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007842:	b29b      	uxth	r3, r3
 8007844:	3b01      	subs	r3, #1
 8007846:	b29a      	uxth	r2, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800784c:	2300      	movs	r3, #0
 800784e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	f003 0301 	and.w	r3, r3, #1
 800785a:	2b01      	cmp	r3, #1
 800785c:	d119      	bne.n	8007892 <HAL_SPI_TransmitReceive+0x2ae>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007862:	b29b      	uxth	r3, r3
 8007864:	2b00      	cmp	r3, #0
 8007866:	d014      	beq.n	8007892 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68da      	ldr	r2, [r3, #12]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007872:	b2d2      	uxtb	r2, r2
 8007874:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787a:	1c5a      	adds	r2, r3, #1
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007884:	b29b      	uxth	r3, r3
 8007886:	3b01      	subs	r3, #1
 8007888:	b29a      	uxth	r2, r3
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800788e:	2301      	movs	r3, #1
 8007890:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007892:	f7fb fe01 	bl	8003498 <HAL_GetTick>
 8007896:	4602      	mov	r2, r0
 8007898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789a:	1ad3      	subs	r3, r2, r3
 800789c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800789e:	429a      	cmp	r2, r3
 80078a0:	d803      	bhi.n	80078aa <HAL_SPI_TransmitReceive+0x2c6>
 80078a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a8:	d102      	bne.n	80078b0 <HAL_SPI_TransmitReceive+0x2cc>
 80078aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d103      	bne.n	80078b8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80078b6:	e029      	b.n	800790c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078bc:	b29b      	uxth	r3, r3
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1a2      	bne.n	8007808 <HAL_SPI_TransmitReceive+0x224>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d19d      	bne.n	8007808 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f000 f8e5 	bl	8007aa0 <SPI_EndRxTxTransaction>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d006      	beq.n	80078ea <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2220      	movs	r2, #32
 80078e6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80078e8:	e010      	b.n	800790c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d10b      	bne.n	800790a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078f2:	2300      	movs	r3, #0
 80078f4:	617b      	str	r3, [r7, #20]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	617b      	str	r3, [r7, #20]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	617b      	str	r3, [r7, #20]
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	e000      	b.n	800790c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800790a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2200      	movs	r2, #0
 8007918:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800791c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007920:	4618      	mov	r0, r3
 8007922:	3730      	adds	r7, #48	; 0x30
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	603b      	str	r3, [r7, #0]
 8007934:	4613      	mov	r3, r2
 8007936:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007938:	e04c      	b.n	80079d4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007940:	d048      	beq.n	80079d4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007942:	f7fb fda9 	bl	8003498 <HAL_GetTick>
 8007946:	4602      	mov	r2, r0
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	683a      	ldr	r2, [r7, #0]
 800794e:	429a      	cmp	r2, r3
 8007950:	d902      	bls.n	8007958 <SPI_WaitFlagStateUntilTimeout+0x30>
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d13d      	bne.n	80079d4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	685a      	ldr	r2, [r3, #4]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007966:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007970:	d111      	bne.n	8007996 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800797a:	d004      	beq.n	8007986 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007984:	d107      	bne.n	8007996 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007994:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800799a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800799e:	d10f      	bne.n	80079c0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80079ae:	601a      	str	r2, [r3, #0]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80079be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80079d0:	2303      	movs	r3, #3
 80079d2:	e00f      	b.n	80079f4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	689a      	ldr	r2, [r3, #8]
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	4013      	ands	r3, r2
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	bf0c      	ite	eq
 80079e4:	2301      	moveq	r3, #1
 80079e6:	2300      	movne	r3, #0
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	461a      	mov	r2, r3
 80079ec:	79fb      	ldrb	r3, [r7, #7]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d1a3      	bne.n	800793a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3710      	adds	r7, #16
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b086      	sub	sp, #24
 8007a00:	af02      	add	r7, sp, #8
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a10:	d111      	bne.n	8007a36 <SPI_EndRxTransaction+0x3a>
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a1a:	d004      	beq.n	8007a26 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a24:	d107      	bne.n	8007a36 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a34:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a3e:	d117      	bne.n	8007a70 <SPI_EndRxTransaction+0x74>
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a48:	d112      	bne.n	8007a70 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	9300      	str	r3, [sp, #0]
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	2200      	movs	r2, #0
 8007a52:	2101      	movs	r1, #1
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f7ff ff67 	bl	8007928 <SPI_WaitFlagStateUntilTimeout>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d01a      	beq.n	8007a96 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a64:	f043 0220 	orr.w	r2, r3, #32
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	e013      	b.n	8007a98 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	9300      	str	r3, [sp, #0]
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	2200      	movs	r2, #0
 8007a78:	2180      	movs	r1, #128	; 0x80
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f7ff ff54 	bl	8007928 <SPI_WaitFlagStateUntilTimeout>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d007      	beq.n	8007a96 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a8a:	f043 0220 	orr.w	r2, r3, #32
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	e000      	b.n	8007a98 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b086      	sub	sp, #24
 8007aa4:	af02      	add	r7, sp, #8
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	9300      	str	r3, [sp, #0]
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	2180      	movs	r1, #128	; 0x80
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f7ff ff36 	bl	8007928 <SPI_WaitFlagStateUntilTimeout>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d007      	beq.n	8007ad2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ac6:	f043 0220 	orr.w	r2, r3, #32
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e000      	b.n	8007ad4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3710      	adds	r7, #16
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d101      	bne.n	8007aee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e01d      	b.n	8007b2a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d106      	bne.n	8007b08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f815 	bl	8007b32 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2202      	movs	r2, #2
 8007b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	3304      	adds	r3, #4
 8007b18:	4619      	mov	r1, r3
 8007b1a:	4610      	mov	r0, r2
 8007b1c:	f000 f962 	bl	8007de4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3708      	adds	r7, #8
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007b32:	b480      	push	{r7}
 8007b34:	b083      	sub	sp, #12
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007b3a:	bf00      	nop
 8007b3c:	370c      	adds	r7, #12
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bc80      	pop	{r7}
 8007b42:	4770      	bx	lr

08007b44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68da      	ldr	r2, [r3, #12]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f042 0201 	orr.w	r2, r2, #1
 8007b5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	f003 0307 	and.w	r3, r3, #7
 8007b66:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2b06      	cmp	r3, #6
 8007b6c:	d007      	beq.n	8007b7e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f042 0201 	orr.w	r2, r2, #1
 8007b7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3714      	adds	r7, #20
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bc80      	pop	{r7}
 8007b88:	4770      	bx	lr

08007b8a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b082      	sub	sp, #8
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	f003 0302 	and.w	r3, r3, #2
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d122      	bne.n	8007be6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	f003 0302 	and.w	r3, r3, #2
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	d11b      	bne.n	8007be6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f06f 0202 	mvn.w	r2, #2
 8007bb6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	699b      	ldr	r3, [r3, #24]
 8007bc4:	f003 0303 	and.w	r3, r3, #3
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d003      	beq.n	8007bd4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 f8ed 	bl	8007dac <HAL_TIM_IC_CaptureCallback>
 8007bd2:	e005      	b.n	8007be0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f8e0 	bl	8007d9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f8ef 	bl	8007dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	691b      	ldr	r3, [r3, #16]
 8007bec:	f003 0304 	and.w	r3, r3, #4
 8007bf0:	2b04      	cmp	r3, #4
 8007bf2:	d122      	bne.n	8007c3a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	f003 0304 	and.w	r3, r3, #4
 8007bfe:	2b04      	cmp	r3, #4
 8007c00:	d11b      	bne.n	8007c3a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f06f 0204 	mvn.w	r2, #4
 8007c0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2202      	movs	r2, #2
 8007c10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	699b      	ldr	r3, [r3, #24]
 8007c18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d003      	beq.n	8007c28 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 f8c3 	bl	8007dac <HAL_TIM_IC_CaptureCallback>
 8007c26:	e005      	b.n	8007c34 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 f8b6 	bl	8007d9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f8c5 	bl	8007dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	f003 0308 	and.w	r3, r3, #8
 8007c44:	2b08      	cmp	r3, #8
 8007c46:	d122      	bne.n	8007c8e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	f003 0308 	and.w	r3, r3, #8
 8007c52:	2b08      	cmp	r3, #8
 8007c54:	d11b      	bne.n	8007c8e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f06f 0208 	mvn.w	r2, #8
 8007c5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2204      	movs	r2, #4
 8007c64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	69db      	ldr	r3, [r3, #28]
 8007c6c:	f003 0303 	and.w	r3, r3, #3
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d003      	beq.n	8007c7c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 f899 	bl	8007dac <HAL_TIM_IC_CaptureCallback>
 8007c7a:	e005      	b.n	8007c88 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 f88c 	bl	8007d9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f89b 	bl	8007dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	f003 0310 	and.w	r3, r3, #16
 8007c98:	2b10      	cmp	r3, #16
 8007c9a:	d122      	bne.n	8007ce2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	f003 0310 	and.w	r3, r3, #16
 8007ca6:	2b10      	cmp	r3, #16
 8007ca8:	d11b      	bne.n	8007ce2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f06f 0210 	mvn.w	r2, #16
 8007cb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2208      	movs	r2, #8
 8007cb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	69db      	ldr	r3, [r3, #28]
 8007cc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d003      	beq.n	8007cd0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 f86f 	bl	8007dac <HAL_TIM_IC_CaptureCallback>
 8007cce:	e005      	b.n	8007cdc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 f862 	bl	8007d9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 f871 	bl	8007dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	f003 0301 	and.w	r3, r3, #1
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d10e      	bne.n	8007d0e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d107      	bne.n	8007d0e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f06f 0201 	mvn.w	r2, #1
 8007d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f7fb f901 	bl	8002f10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d18:	2b80      	cmp	r3, #128	; 0x80
 8007d1a:	d10e      	bne.n	8007d3a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d26:	2b80      	cmp	r3, #128	; 0x80
 8007d28:	d107      	bne.n	8007d3a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 f8c0 	bl	8007eba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d44:	2b40      	cmp	r3, #64	; 0x40
 8007d46:	d10e      	bne.n	8007d66 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d52:	2b40      	cmp	r3, #64	; 0x40
 8007d54:	d107      	bne.n	8007d66 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 f835 	bl	8007dd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	f003 0320 	and.w	r3, r3, #32
 8007d70:	2b20      	cmp	r3, #32
 8007d72:	d10e      	bne.n	8007d92 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	f003 0320 	and.w	r3, r3, #32
 8007d7e:	2b20      	cmp	r3, #32
 8007d80:	d107      	bne.n	8007d92 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f06f 0220 	mvn.w	r2, #32
 8007d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 f88b 	bl	8007ea8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d92:	bf00      	nop
 8007d94:	3708      	adds	r7, #8
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b083      	sub	sp, #12
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007da2:	bf00      	nop
 8007da4:	370c      	adds	r7, #12
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bc80      	pop	{r7}
 8007daa:	4770      	bx	lr

08007dac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007db4:	bf00      	nop
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bc80      	pop	{r7}
 8007dbc:	4770      	bx	lr

08007dbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007dbe:	b480      	push	{r7}
 8007dc0:	b083      	sub	sp, #12
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007dc6:	bf00      	nop
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bc80      	pop	{r7}
 8007dce:	4770      	bx	lr

08007dd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007dd8:	bf00      	nop
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bc80      	pop	{r7}
 8007de0:	4770      	bx	lr
	...

08007de4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a29      	ldr	r2, [pc, #164]	; (8007e9c <TIM_Base_SetConfig+0xb8>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d00b      	beq.n	8007e14 <TIM_Base_SetConfig+0x30>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e02:	d007      	beq.n	8007e14 <TIM_Base_SetConfig+0x30>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4a26      	ldr	r2, [pc, #152]	; (8007ea0 <TIM_Base_SetConfig+0xbc>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d003      	beq.n	8007e14 <TIM_Base_SetConfig+0x30>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4a25      	ldr	r2, [pc, #148]	; (8007ea4 <TIM_Base_SetConfig+0xc0>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d108      	bne.n	8007e26 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a1c      	ldr	r2, [pc, #112]	; (8007e9c <TIM_Base_SetConfig+0xb8>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d00b      	beq.n	8007e46 <TIM_Base_SetConfig+0x62>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e34:	d007      	beq.n	8007e46 <TIM_Base_SetConfig+0x62>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a19      	ldr	r2, [pc, #100]	; (8007ea0 <TIM_Base_SetConfig+0xbc>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d003      	beq.n	8007e46 <TIM_Base_SetConfig+0x62>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a18      	ldr	r2, [pc, #96]	; (8007ea4 <TIM_Base_SetConfig+0xc0>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d108      	bne.n	8007e58 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	695b      	ldr	r3, [r3, #20]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	689a      	ldr	r2, [r3, #8]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	4a07      	ldr	r2, [pc, #28]	; (8007e9c <TIM_Base_SetConfig+0xb8>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d103      	bne.n	8007e8c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	691a      	ldr	r2, [r3, #16]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	615a      	str	r2, [r3, #20]
}
 8007e92:	bf00      	nop
 8007e94:	3714      	adds	r7, #20
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bc80      	pop	{r7}
 8007e9a:	4770      	bx	lr
 8007e9c:	40012c00 	.word	0x40012c00
 8007ea0:	40000400 	.word	0x40000400
 8007ea4:	40000800 	.word	0x40000800

08007ea8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007eb0:	bf00      	nop
 8007eb2:	370c      	adds	r7, #12
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bc80      	pop	{r7}
 8007eb8:	4770      	bx	lr

08007eba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007eba:	b480      	push	{r7}
 8007ebc:	b083      	sub	sp, #12
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ec2:	bf00      	nop
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bc80      	pop	{r7}
 8007eca:	4770      	bx	lr

08007ecc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d101      	bne.n	8007ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e03f      	b.n	8007f5e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d106      	bne.n	8007ef8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f7fb f8de 	bl	80030b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2224      	movs	r2, #36	; 0x24
 8007efc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68da      	ldr	r2, [r3, #12]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 fcb5 	bl	8008880 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	691a      	ldr	r2, [r3, #16]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	695a      	ldr	r2, [r3, #20]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68da      	ldr	r2, [r3, #12]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2220      	movs	r2, #32
 8007f50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2220      	movs	r2, #32
 8007f58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3708      	adds	r7, #8
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b088      	sub	sp, #32
 8007f6a:	af02      	add	r7, sp, #8
 8007f6c:	60f8      	str	r0, [r7, #12]
 8007f6e:	60b9      	str	r1, [r7, #8]
 8007f70:	603b      	str	r3, [r7, #0]
 8007f72:	4613      	mov	r3, r2
 8007f74:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007f76:	2300      	movs	r3, #0
 8007f78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	2b20      	cmp	r3, #32
 8007f84:	f040 8083 	bne.w	800808e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d002      	beq.n	8007f94 <HAL_UART_Transmit+0x2e>
 8007f8e:	88fb      	ldrh	r3, [r7, #6]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d101      	bne.n	8007f98 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007f94:	2301      	movs	r3, #1
 8007f96:	e07b      	b.n	8008090 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d101      	bne.n	8007fa6 <HAL_UART_Transmit+0x40>
 8007fa2:	2302      	movs	r3, #2
 8007fa4:	e074      	b.n	8008090 <HAL_UART_Transmit+0x12a>
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2201      	movs	r2, #1
 8007faa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2221      	movs	r2, #33	; 0x21
 8007fb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007fbc:	f7fb fa6c 	bl	8003498 <HAL_GetTick>
 8007fc0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	88fa      	ldrh	r2, [r7, #6]
 8007fc6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	88fa      	ldrh	r2, [r7, #6]
 8007fcc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007fce:	e042      	b.n	8008056 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fe6:	d122      	bne.n	800802e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	9300      	str	r3, [sp, #0]
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	2180      	movs	r1, #128	; 0x80
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f000 fac6 	bl	8008584 <UART_WaitOnFlagUntilTimeout>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d001      	beq.n	8008002 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8007ffe:	2303      	movs	r3, #3
 8008000:	e046      	b.n	8008090 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	881b      	ldrh	r3, [r3, #0]
 800800a:	461a      	mov	r2, r3
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008014:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d103      	bne.n	8008026 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	3302      	adds	r3, #2
 8008022:	60bb      	str	r3, [r7, #8]
 8008024:	e017      	b.n	8008056 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	3301      	adds	r3, #1
 800802a:	60bb      	str	r3, [r7, #8]
 800802c:	e013      	b.n	8008056 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	9300      	str	r3, [sp, #0]
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	2200      	movs	r2, #0
 8008036:	2180      	movs	r1, #128	; 0x80
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	f000 faa3 	bl	8008584 <UART_WaitOnFlagUntilTimeout>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d001      	beq.n	8008048 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8008044:	2303      	movs	r3, #3
 8008046:	e023      	b.n	8008090 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	1c5a      	adds	r2, r3, #1
 800804c:	60ba      	str	r2, [r7, #8]
 800804e:	781a      	ldrb	r2, [r3, #0]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800805a:	b29b      	uxth	r3, r3
 800805c:	2b00      	cmp	r3, #0
 800805e:	d1b7      	bne.n	8007fd0 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	9300      	str	r3, [sp, #0]
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	2200      	movs	r2, #0
 8008068:	2140      	movs	r1, #64	; 0x40
 800806a:	68f8      	ldr	r0, [r7, #12]
 800806c:	f000 fa8a 	bl	8008584 <UART_WaitOnFlagUntilTimeout>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d001      	beq.n	800807a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008076:	2303      	movs	r3, #3
 8008078:	e00a      	b.n	8008090 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2220      	movs	r2, #32
 800807e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2200      	movs	r2, #0
 8008086:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800808a:	2300      	movs	r3, #0
 800808c:	e000      	b.n	8008090 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800808e:	2302      	movs	r3, #2
  }
}
 8008090:	4618      	mov	r0, r3
 8008092:	3718      	adds	r7, #24
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b086      	sub	sp, #24
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	4613      	mov	r3, r2
 80080a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	2b20      	cmp	r3, #32
 80080b0:	d166      	bne.n	8008180 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d002      	beq.n	80080be <HAL_UART_Receive_DMA+0x26>
 80080b8:	88fb      	ldrh	r3, [r7, #6]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d101      	bne.n	80080c2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e05f      	b.n	8008182 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d101      	bne.n	80080d0 <HAL_UART_Receive_DMA+0x38>
 80080cc:	2302      	movs	r3, #2
 80080ce:	e058      	b.n	8008182 <HAL_UART_Receive_DMA+0xea>
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	88fa      	ldrh	r2, [r7, #6]
 80080e2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2200      	movs	r2, #0
 80080e8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2222      	movs	r2, #34	; 0x22
 80080ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080f6:	4a25      	ldr	r2, [pc, #148]	; (800818c <HAL_UART_Receive_DMA+0xf4>)
 80080f8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080fe:	4a24      	ldr	r2, [pc, #144]	; (8008190 <HAL_UART_Receive_DMA+0xf8>)
 8008100:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008106:	4a23      	ldr	r2, [pc, #140]	; (8008194 <HAL_UART_Receive_DMA+0xfc>)
 8008108:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800810e:	2200      	movs	r2, #0
 8008110:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8008112:	f107 0308 	add.w	r3, r7, #8
 8008116:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	3304      	adds	r3, #4
 8008122:	4619      	mov	r1, r3
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	88fb      	ldrh	r3, [r7, #6]
 800812a:	f7fb fb1b 	bl	8003764 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800812e:	2300      	movs	r3, #0
 8008130:	613b      	str	r3, [r7, #16]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	613b      	str	r3, [r7, #16]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	613b      	str	r3, [r7, #16]
 8008142:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	68da      	ldr	r2, [r3, #12]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800815a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	695a      	ldr	r2, [r3, #20]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f042 0201 	orr.w	r2, r2, #1
 800816a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	695a      	ldr	r2, [r3, #20]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800817a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800817c:	2300      	movs	r3, #0
 800817e:	e000      	b.n	8008182 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008180:	2302      	movs	r3, #2
  }
}
 8008182:	4618      	mov	r0, r3
 8008184:	3718      	adds	r7, #24
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	0800846d 	.word	0x0800846d
 8008190:	080084d5 	.word	0x080084d5
 8008194:	080084f1 	.word	0x080084f1

08008198 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80081a0:	2300      	movs	r3, #0
 80081a2:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	695b      	ldr	r3, [r3, #20]
 80081aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	bf14      	ite	ne
 80081b2:	2301      	movne	r3, #1
 80081b4:	2300      	moveq	r3, #0
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	2b21      	cmp	r3, #33	; 0x21
 80081c4:	d116      	bne.n	80081f4 <HAL_UART_DMAStop+0x5c>
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d013      	beq.n	80081f4 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	695a      	ldr	r2, [r3, #20]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081da:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d004      	beq.n	80081ee <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7fb fb1a 	bl	8003822 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 fa12 	bl	8008618 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081fe:	2b00      	cmp	r3, #0
 8008200:	bf14      	ite	ne
 8008202:	2301      	movne	r3, #1
 8008204:	2300      	moveq	r3, #0
 8008206:	b2db      	uxtb	r3, r3
 8008208:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008210:	b2db      	uxtb	r3, r3
 8008212:	2b22      	cmp	r3, #34	; 0x22
 8008214:	d116      	bne.n	8008244 <HAL_UART_DMAStop+0xac>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d013      	beq.n	8008244 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	695a      	ldr	r2, [r3, #20]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800822a:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008230:	2b00      	cmp	r3, #0
 8008232:	d004      	beq.n	800823e <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008238:	4618      	mov	r0, r3
 800823a:	f7fb faf2 	bl	8003822 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f9ff 	bl	8008642 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
	...

08008250 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b088      	sub	sp, #32
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	695b      	ldr	r3, [r3, #20]
 800826e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008270:	2300      	movs	r3, #0
 8008272:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008274:	2300      	movs	r3, #0
 8008276:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	f003 030f 	and.w	r3, r3, #15
 800827e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d10d      	bne.n	80082a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	f003 0320 	and.w	r3, r3, #32
 800828c:	2b00      	cmp	r3, #0
 800828e:	d008      	beq.n	80082a2 <HAL_UART_IRQHandler+0x52>
 8008290:	69bb      	ldr	r3, [r7, #24]
 8008292:	f003 0320 	and.w	r3, r3, #32
 8008296:	2b00      	cmp	r3, #0
 8008298:	d003      	beq.n	80082a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 fa6f 	bl	800877e <UART_Receive_IT>
      return;
 80082a0:	e0cc      	b.n	800843c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f000 80ab 	beq.w	8008400 <HAL_UART_IRQHandler+0x1b0>
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	f003 0301 	and.w	r3, r3, #1
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d105      	bne.n	80082c0 <HAL_UART_IRQHandler+0x70>
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	f000 80a0 	beq.w	8008400 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	f003 0301 	and.w	r3, r3, #1
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d00a      	beq.n	80082e0 <HAL_UART_IRQHandler+0x90>
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d005      	beq.n	80082e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082d8:	f043 0201 	orr.w	r2, r3, #1
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	f003 0304 	and.w	r3, r3, #4
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00a      	beq.n	8008300 <HAL_UART_IRQHandler+0xb0>
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	f003 0301 	and.w	r3, r3, #1
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d005      	beq.n	8008300 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082f8:	f043 0202 	orr.w	r2, r3, #2
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	f003 0302 	and.w	r3, r3, #2
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00a      	beq.n	8008320 <HAL_UART_IRQHandler+0xd0>
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	f003 0301 	and.w	r3, r3, #1
 8008310:	2b00      	cmp	r3, #0
 8008312:	d005      	beq.n	8008320 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008318:	f043 0204 	orr.w	r2, r3, #4
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	f003 0308 	and.w	r3, r3, #8
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00a      	beq.n	8008340 <HAL_UART_IRQHandler+0xf0>
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	f003 0301 	and.w	r3, r3, #1
 8008330:	2b00      	cmp	r3, #0
 8008332:	d005      	beq.n	8008340 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008338:	f043 0208 	orr.w	r2, r3, #8
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008344:	2b00      	cmp	r3, #0
 8008346:	d078      	beq.n	800843a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	f003 0320 	and.w	r3, r3, #32
 800834e:	2b00      	cmp	r3, #0
 8008350:	d007      	beq.n	8008362 <HAL_UART_IRQHandler+0x112>
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	f003 0320 	and.w	r3, r3, #32
 8008358:	2b00      	cmp	r3, #0
 800835a:	d002      	beq.n	8008362 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 fa0e 	bl	800877e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	695b      	ldr	r3, [r3, #20]
 8008368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800836c:	2b00      	cmp	r3, #0
 800836e:	bf14      	ite	ne
 8008370:	2301      	movne	r3, #1
 8008372:	2300      	moveq	r3, #0
 8008374:	b2db      	uxtb	r3, r3
 8008376:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800837c:	f003 0308 	and.w	r3, r3, #8
 8008380:	2b00      	cmp	r3, #0
 8008382:	d102      	bne.n	800838a <HAL_UART_IRQHandler+0x13a>
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d031      	beq.n	80083ee <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 f959 	bl	8008642 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	695b      	ldr	r3, [r3, #20]
 8008396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800839a:	2b00      	cmp	r3, #0
 800839c:	d023      	beq.n	80083e6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	695a      	ldr	r2, [r3, #20]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083ac:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d013      	beq.n	80083de <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ba:	4a22      	ldr	r2, [pc, #136]	; (8008444 <HAL_UART_IRQHandler+0x1f4>)
 80083bc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fb fa68 	bl	8003898 <HAL_DMA_Abort_IT>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d016      	beq.n	80083fc <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80083d8:	4610      	mov	r0, r2
 80083da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083dc:	e00e      	b.n	80083fc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 f83b 	bl	800845a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083e4:	e00a      	b.n	80083fc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 f837 	bl	800845a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083ec:	e006      	b.n	80083fc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 f833 	bl	800845a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80083fa:	e01e      	b.n	800843a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083fc:	bf00      	nop
    return;
 80083fe:	e01c      	b.n	800843a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008406:	2b00      	cmp	r3, #0
 8008408:	d008      	beq.n	800841c <HAL_UART_IRQHandler+0x1cc>
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008410:	2b00      	cmp	r3, #0
 8008412:	d003      	beq.n	800841c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f945 	bl	80086a4 <UART_Transmit_IT>
    return;
 800841a:	e00f      	b.n	800843c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00a      	beq.n	800843c <HAL_UART_IRQHandler+0x1ec>
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800842c:	2b00      	cmp	r3, #0
 800842e:	d005      	beq.n	800843c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 f98c 	bl	800874e <UART_EndTransmit_IT>
    return;
 8008436:	bf00      	nop
 8008438:	e000      	b.n	800843c <HAL_UART_IRQHandler+0x1ec>
    return;
 800843a:	bf00      	nop
  }
}
 800843c:	3720      	adds	r7, #32
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	0800867d 	.word	0x0800867d

08008448 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008450:	bf00      	nop
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	bc80      	pop	{r7}
 8008458:	4770      	bx	lr

0800845a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800845a:	b480      	push	{r7}
 800845c:	b083      	sub	sp, #12
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008462:	bf00      	nop
 8008464:	370c      	adds	r7, #12
 8008466:	46bd      	mov	sp, r7
 8008468:	bc80      	pop	{r7}
 800846a:	4770      	bx	lr

0800846c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008478:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f003 0320 	and.w	r3, r3, #32
 8008484:	2b00      	cmp	r3, #0
 8008486:	d11e      	bne.n	80084c6 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2200      	movs	r2, #0
 800848c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	68da      	ldr	r2, [r3, #12]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800849c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	695a      	ldr	r2, [r3, #20]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f022 0201 	bic.w	r2, r2, #1
 80084ac:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	695a      	ldr	r2, [r3, #20]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084bc:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2220      	movs	r2, #32
 80084c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f7fa fb9c 	bl	8002c04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084cc:	bf00      	nop
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80084e2:	68f8      	ldr	r0, [r7, #12]
 80084e4:	f7fa fb98 	bl	8002c18 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084e8:	bf00      	nop
 80084ea:	3710      	adds	r7, #16
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80084f8:	2300      	movs	r3, #0
 80084fa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008500:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	695b      	ldr	r3, [r3, #20]
 8008508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800850c:	2b00      	cmp	r3, #0
 800850e:	bf14      	ite	ne
 8008510:	2301      	movne	r3, #1
 8008512:	2300      	moveq	r3, #0
 8008514:	b2db      	uxtb	r3, r3
 8008516:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800851e:	b2db      	uxtb	r3, r3
 8008520:	2b21      	cmp	r3, #33	; 0x21
 8008522:	d108      	bne.n	8008536 <UART_DMAError+0x46>
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d005      	beq.n	8008536 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	2200      	movs	r2, #0
 800852e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008530:	68b8      	ldr	r0, [r7, #8]
 8008532:	f000 f871 	bl	8008618 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	695b      	ldr	r3, [r3, #20]
 800853c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008540:	2b00      	cmp	r3, #0
 8008542:	bf14      	ite	ne
 8008544:	2301      	movne	r3, #1
 8008546:	2300      	moveq	r3, #0
 8008548:	b2db      	uxtb	r3, r3
 800854a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008552:	b2db      	uxtb	r3, r3
 8008554:	2b22      	cmp	r3, #34	; 0x22
 8008556:	d108      	bne.n	800856a <UART_DMAError+0x7a>
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d005      	beq.n	800856a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	2200      	movs	r2, #0
 8008562:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008564:	68b8      	ldr	r0, [r7, #8]
 8008566:	f000 f86c 	bl	8008642 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800856e:	f043 0210 	orr.w	r2, r3, #16
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008576:	68b8      	ldr	r0, [r7, #8]
 8008578:	f7ff ff6f 	bl	800845a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800857c:	bf00      	nop
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	60b9      	str	r1, [r7, #8]
 800858e:	603b      	str	r3, [r7, #0]
 8008590:	4613      	mov	r3, r2
 8008592:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008594:	e02c      	b.n	80085f0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800859c:	d028      	beq.n	80085f0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d007      	beq.n	80085b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80085a4:	f7fa ff78 	bl	8003498 <HAL_GetTick>
 80085a8:	4602      	mov	r2, r0
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	69ba      	ldr	r2, [r7, #24]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d21d      	bcs.n	80085f0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68da      	ldr	r2, [r3, #12]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80085c2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	695a      	ldr	r2, [r3, #20]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f022 0201 	bic.w	r2, r2, #1
 80085d2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2220      	movs	r2, #32
 80085d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2220      	movs	r2, #32
 80085e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80085ec:	2303      	movs	r3, #3
 80085ee:	e00f      	b.n	8008610 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	4013      	ands	r3, r2
 80085fa:	68ba      	ldr	r2, [r7, #8]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	bf0c      	ite	eq
 8008600:	2301      	moveq	r3, #1
 8008602:	2300      	movne	r3, #0
 8008604:	b2db      	uxtb	r3, r3
 8008606:	461a      	mov	r2, r3
 8008608:	79fb      	ldrb	r3, [r7, #7]
 800860a:	429a      	cmp	r2, r3
 800860c:	d0c3      	beq.n	8008596 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3710      	adds	r7, #16
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68da      	ldr	r2, [r3, #12]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800862e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2220      	movs	r2, #32
 8008634:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8008638:	bf00      	nop
 800863a:	370c      	adds	r7, #12
 800863c:	46bd      	mov	sp, r7
 800863e:	bc80      	pop	{r7}
 8008640:	4770      	bx	lr

08008642 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008642:	b480      	push	{r7}
 8008644:	b083      	sub	sp, #12
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	68da      	ldr	r2, [r3, #12]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008658:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	695a      	ldr	r2, [r3, #20]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f022 0201 	bic.w	r2, r2, #1
 8008668:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2220      	movs	r2, #32
 800866e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008672:	bf00      	nop
 8008674:	370c      	adds	r7, #12
 8008676:	46bd      	mov	sp, r7
 8008678:	bc80      	pop	{r7}
 800867a:	4770      	bx	lr

0800867c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008688:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2200      	movs	r2, #0
 800868e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2200      	movs	r2, #0
 8008694:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	f7ff fedf 	bl	800845a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800869c:	bf00      	nop
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	2b21      	cmp	r3, #33	; 0x21
 80086b6:	d144      	bne.n	8008742 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086c0:	d11a      	bne.n	80086f8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a1b      	ldr	r3, [r3, #32]
 80086c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	881b      	ldrh	r3, [r3, #0]
 80086cc:	461a      	mov	r2, r3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086d6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d105      	bne.n	80086ec <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a1b      	ldr	r3, [r3, #32]
 80086e4:	1c9a      	adds	r2, r3, #2
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	621a      	str	r2, [r3, #32]
 80086ea:	e00e      	b.n	800870a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6a1b      	ldr	r3, [r3, #32]
 80086f0:	1c5a      	adds	r2, r3, #1
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	621a      	str	r2, [r3, #32]
 80086f6:	e008      	b.n	800870a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6a1b      	ldr	r3, [r3, #32]
 80086fc:	1c59      	adds	r1, r3, #1
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	6211      	str	r1, [r2, #32]
 8008702:	781a      	ldrb	r2, [r3, #0]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800870e:	b29b      	uxth	r3, r3
 8008710:	3b01      	subs	r3, #1
 8008712:	b29b      	uxth	r3, r3
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	4619      	mov	r1, r3
 8008718:	84d1      	strh	r1, [r2, #38]	; 0x26
 800871a:	2b00      	cmp	r3, #0
 800871c:	d10f      	bne.n	800873e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	68da      	ldr	r2, [r3, #12]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800872c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68da      	ldr	r2, [r3, #12]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800873c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800873e:	2300      	movs	r3, #0
 8008740:	e000      	b.n	8008744 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008742:	2302      	movs	r3, #2
  }
}
 8008744:	4618      	mov	r0, r3
 8008746:	3714      	adds	r7, #20
 8008748:	46bd      	mov	sp, r7
 800874a:	bc80      	pop	{r7}
 800874c:	4770      	bx	lr

0800874e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b082      	sub	sp, #8
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	68da      	ldr	r2, [r3, #12]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008764:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2220      	movs	r2, #32
 800876a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f7ff fe6a 	bl	8008448 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3708      	adds	r7, #8
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b084      	sub	sp, #16
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800878c:	b2db      	uxtb	r3, r3
 800878e:	2b22      	cmp	r3, #34	; 0x22
 8008790:	d171      	bne.n	8008876 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800879a:	d123      	bne.n	80087e4 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a0:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	691b      	ldr	r3, [r3, #16]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d10e      	bne.n	80087c8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087b6:	b29a      	uxth	r2, r3
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c0:	1c9a      	adds	r2, r3, #2
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	629a      	str	r2, [r3, #40]	; 0x28
 80087c6:	e029      	b.n	800881c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	b29a      	uxth	r2, r3
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087dc:	1c5a      	adds	r2, r3, #1
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	629a      	str	r2, [r3, #40]	; 0x28
 80087e2:	e01b      	b.n	800881c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	691b      	ldr	r3, [r3, #16]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d10a      	bne.n	8008802 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	6858      	ldr	r0, [r3, #4]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f6:	1c59      	adds	r1, r3, #1
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	6291      	str	r1, [r2, #40]	; 0x28
 80087fc:	b2c2      	uxtb	r2, r0
 80087fe:	701a      	strb	r2, [r3, #0]
 8008800:	e00c      	b.n	800881c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	b2da      	uxtb	r2, r3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800880e:	1c58      	adds	r0, r3, #1
 8008810:	6879      	ldr	r1, [r7, #4]
 8008812:	6288      	str	r0, [r1, #40]	; 0x28
 8008814:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008818:	b2d2      	uxtb	r2, r2
 800881a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008820:	b29b      	uxth	r3, r3
 8008822:	3b01      	subs	r3, #1
 8008824:	b29b      	uxth	r3, r3
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	4619      	mov	r1, r3
 800882a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800882c:	2b00      	cmp	r3, #0
 800882e:	d120      	bne.n	8008872 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	68da      	ldr	r2, [r3, #12]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f022 0220 	bic.w	r2, r2, #32
 800883e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	68da      	ldr	r2, [r3, #12]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800884e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	695a      	ldr	r2, [r3, #20]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f022 0201 	bic.w	r2, r2, #1
 800885e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2220      	movs	r2, #32
 8008864:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f7fa f9cb 	bl	8002c04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800886e:	2300      	movs	r3, #0
 8008870:	e002      	b.n	8008878 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008872:	2300      	movs	r3, #0
 8008874:	e000      	b.n	8008878 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008876:	2302      	movs	r3, #2
  }
}
 8008878:	4618      	mov	r0, r3
 800887a:	3710      	adds	r7, #16
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	691b      	ldr	r3, [r3, #16]
 800888e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	68da      	ldr	r2, [r3, #12]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	430a      	orrs	r2, r1
 800889c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	689a      	ldr	r2, [r3, #8]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	691b      	ldr	r3, [r3, #16]
 80088a6:	431a      	orrs	r2, r3
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	695b      	ldr	r3, [r3, #20]
 80088ac:	4313      	orrs	r3, r2
 80088ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80088ba:	f023 030c 	bic.w	r3, r3, #12
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	6812      	ldr	r2, [r2, #0]
 80088c2:	68f9      	ldr	r1, [r7, #12]
 80088c4:	430b      	orrs	r3, r1
 80088c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	695b      	ldr	r3, [r3, #20]
 80088ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	699a      	ldr	r2, [r3, #24]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	430a      	orrs	r2, r1
 80088dc:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a52      	ldr	r2, [pc, #328]	; (8008a2c <UART_SetConfig+0x1ac>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d14e      	bne.n	8008986 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80088e8:	f7fe fac6 	bl	8006e78 <HAL_RCC_GetPCLK2Freq>
 80088ec:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80088ee:	68ba      	ldr	r2, [r7, #8]
 80088f0:	4613      	mov	r3, r2
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	4413      	add	r3, r2
 80088f6:	009a      	lsls	r2, r3, #2
 80088f8:	441a      	add	r2, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	fbb2 f3f3 	udiv	r3, r2, r3
 8008904:	4a4a      	ldr	r2, [pc, #296]	; (8008a30 <UART_SetConfig+0x1b0>)
 8008906:	fba2 2303 	umull	r2, r3, r2, r3
 800890a:	095b      	lsrs	r3, r3, #5
 800890c:	0119      	lsls	r1, r3, #4
 800890e:	68ba      	ldr	r2, [r7, #8]
 8008910:	4613      	mov	r3, r2
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	4413      	add	r3, r2
 8008916:	009a      	lsls	r2, r3, #2
 8008918:	441a      	add	r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	fbb2 f2f3 	udiv	r2, r2, r3
 8008924:	4b42      	ldr	r3, [pc, #264]	; (8008a30 <UART_SetConfig+0x1b0>)
 8008926:	fba3 0302 	umull	r0, r3, r3, r2
 800892a:	095b      	lsrs	r3, r3, #5
 800892c:	2064      	movs	r0, #100	; 0x64
 800892e:	fb00 f303 	mul.w	r3, r0, r3
 8008932:	1ad3      	subs	r3, r2, r3
 8008934:	011b      	lsls	r3, r3, #4
 8008936:	3332      	adds	r3, #50	; 0x32
 8008938:	4a3d      	ldr	r2, [pc, #244]	; (8008a30 <UART_SetConfig+0x1b0>)
 800893a:	fba2 2303 	umull	r2, r3, r2, r3
 800893e:	095b      	lsrs	r3, r3, #5
 8008940:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008944:	4419      	add	r1, r3
 8008946:	68ba      	ldr	r2, [r7, #8]
 8008948:	4613      	mov	r3, r2
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	4413      	add	r3, r2
 800894e:	009a      	lsls	r2, r3, #2
 8008950:	441a      	add	r2, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	fbb2 f2f3 	udiv	r2, r2, r3
 800895c:	4b34      	ldr	r3, [pc, #208]	; (8008a30 <UART_SetConfig+0x1b0>)
 800895e:	fba3 0302 	umull	r0, r3, r3, r2
 8008962:	095b      	lsrs	r3, r3, #5
 8008964:	2064      	movs	r0, #100	; 0x64
 8008966:	fb00 f303 	mul.w	r3, r0, r3
 800896a:	1ad3      	subs	r3, r2, r3
 800896c:	011b      	lsls	r3, r3, #4
 800896e:	3332      	adds	r3, #50	; 0x32
 8008970:	4a2f      	ldr	r2, [pc, #188]	; (8008a30 <UART_SetConfig+0x1b0>)
 8008972:	fba2 2303 	umull	r2, r3, r2, r3
 8008976:	095b      	lsrs	r3, r3, #5
 8008978:	f003 020f 	and.w	r2, r3, #15
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	440a      	add	r2, r1
 8008982:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8008984:	e04d      	b.n	8008a22 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8008986:	f7fe fa63 	bl	8006e50 <HAL_RCC_GetPCLK1Freq>
 800898a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800898c:	68ba      	ldr	r2, [r7, #8]
 800898e:	4613      	mov	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	4413      	add	r3, r2
 8008994:	009a      	lsls	r2, r3, #2
 8008996:	441a      	add	r2, r3
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	fbb2 f3f3 	udiv	r3, r2, r3
 80089a2:	4a23      	ldr	r2, [pc, #140]	; (8008a30 <UART_SetConfig+0x1b0>)
 80089a4:	fba2 2303 	umull	r2, r3, r2, r3
 80089a8:	095b      	lsrs	r3, r3, #5
 80089aa:	0119      	lsls	r1, r3, #4
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	4613      	mov	r3, r2
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	4413      	add	r3, r2
 80089b4:	009a      	lsls	r2, r3, #2
 80089b6:	441a      	add	r2, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	fbb2 f2f3 	udiv	r2, r2, r3
 80089c2:	4b1b      	ldr	r3, [pc, #108]	; (8008a30 <UART_SetConfig+0x1b0>)
 80089c4:	fba3 0302 	umull	r0, r3, r3, r2
 80089c8:	095b      	lsrs	r3, r3, #5
 80089ca:	2064      	movs	r0, #100	; 0x64
 80089cc:	fb00 f303 	mul.w	r3, r0, r3
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	011b      	lsls	r3, r3, #4
 80089d4:	3332      	adds	r3, #50	; 0x32
 80089d6:	4a16      	ldr	r2, [pc, #88]	; (8008a30 <UART_SetConfig+0x1b0>)
 80089d8:	fba2 2303 	umull	r2, r3, r2, r3
 80089dc:	095b      	lsrs	r3, r3, #5
 80089de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80089e2:	4419      	add	r1, r3
 80089e4:	68ba      	ldr	r2, [r7, #8]
 80089e6:	4613      	mov	r3, r2
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	4413      	add	r3, r2
 80089ec:	009a      	lsls	r2, r3, #2
 80089ee:	441a      	add	r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80089fa:	4b0d      	ldr	r3, [pc, #52]	; (8008a30 <UART_SetConfig+0x1b0>)
 80089fc:	fba3 0302 	umull	r0, r3, r3, r2
 8008a00:	095b      	lsrs	r3, r3, #5
 8008a02:	2064      	movs	r0, #100	; 0x64
 8008a04:	fb00 f303 	mul.w	r3, r0, r3
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	011b      	lsls	r3, r3, #4
 8008a0c:	3332      	adds	r3, #50	; 0x32
 8008a0e:	4a08      	ldr	r2, [pc, #32]	; (8008a30 <UART_SetConfig+0x1b0>)
 8008a10:	fba2 2303 	umull	r2, r3, r2, r3
 8008a14:	095b      	lsrs	r3, r3, #5
 8008a16:	f003 020f 	and.w	r2, r3, #15
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	440a      	add	r2, r1
 8008a20:	609a      	str	r2, [r3, #8]
}
 8008a22:	bf00      	nop
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	40013800 	.word	0x40013800
 8008a30:	51eb851f 	.word	0x51eb851f

08008a34 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008a34:	b084      	sub	sp, #16
 8008a36:	b480      	push	{r7}
 8008a38:	b083      	sub	sp, #12
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
 8008a3e:	f107 0014 	add.w	r0, r7, #20
 8008a42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	370c      	adds	r7, #12
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bc80      	pop	{r7}
 8008a50:	b004      	add	sp, #16
 8008a52:	4770      	bx	lr

08008a54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b085      	sub	sp, #20
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008a5c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008a60:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008a68:	b29a      	uxth	r2, r3
 8008a6a:	89fb      	ldrh	r3, [r7, #14]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	b29a      	uxth	r2, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3714      	adds	r7, #20
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bc80      	pop	{r7}
 8008a80:	4770      	bx	lr

08008a82 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008a82:	b480      	push	{r7}
 8008a84:	b085      	sub	sp, #20
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008a8a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008a8e:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	b21a      	sxth	r2, r3
 8008a9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008a9e:	43db      	mvns	r3, r3
 8008aa0:	b21b      	sxth	r3, r3
 8008aa2:	4013      	ands	r3, r2
 8008aa4:	b21b      	sxth	r3, r3
 8008aa6:	b29a      	uxth	r2, r3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008aae:	2300      	movs	r3, #0
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3714      	adds	r7, #20
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bc80      	pop	{r7}
 8008ab8:	4770      	bx	lr

08008aba <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8008aba:	b480      	push	{r7}
 8008abc:	b083      	sub	sp, #12
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	370c      	adds	r7, #12
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bc80      	pop	{r7}
 8008ad0:	4770      	bx	lr

08008ad2 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	f107 0014 	add.w	r0, r7, #20
 8008ae0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f7ff ffa5 	bl	8008a54 <USB_EnableGlobalInt>

  return HAL_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3708      	adds	r7, #8
 8008b10:	46bd      	mov	sp, r7
 8008b12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b16:	b004      	add	sp, #16
 8008b18:	4770      	bx	lr
	...

08008b1c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b1c:	b490      	push	{r4, r7}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008b26:	2300      	movs	r3, #0
 8008b28:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	4413      	add	r3, r2
 8008b34:	881b      	ldrh	r3, [r3, #0]
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008b3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b40:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	78db      	ldrb	r3, [r3, #3]
 8008b46:	2b03      	cmp	r3, #3
 8008b48:	d819      	bhi.n	8008b7e <USB_ActivateEndpoint+0x62>
 8008b4a:	a201      	add	r2, pc, #4	; (adr r2, 8008b50 <USB_ActivateEndpoint+0x34>)
 8008b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b50:	08008b61 	.word	0x08008b61
 8008b54:	08008b75 	.word	0x08008b75
 8008b58:	08008b85 	.word	0x08008b85
 8008b5c:	08008b6b 	.word	0x08008b6b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008b60:	89bb      	ldrh	r3, [r7, #12]
 8008b62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008b66:	81bb      	strh	r3, [r7, #12]
      break;
 8008b68:	e00d      	b.n	8008b86 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008b6a:	89bb      	ldrh	r3, [r7, #12]
 8008b6c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008b70:	81bb      	strh	r3, [r7, #12]
      break;
 8008b72:	e008      	b.n	8008b86 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008b74:	89bb      	ldrh	r3, [r7, #12]
 8008b76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008b7a:	81bb      	strh	r3, [r7, #12]
      break;
 8008b7c:	e003      	b.n	8008b86 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	73fb      	strb	r3, [r7, #15]
      break;
 8008b82:	e000      	b.n	8008b86 <USB_ActivateEndpoint+0x6a>
      break;
 8008b84:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	441a      	add	r2, r3
 8008b90:	89bb      	ldrh	r3, [r7, #12]
 8008b92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	4413      	add	r3, r2
 8008bb0:	881b      	ldrh	r3, [r3, #0]
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	b29c      	uxth	r4, r3
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	441a      	add	r2, r3
 8008bd2:	4b8a      	ldr	r3, [pc, #552]	; (8008dfc <USB_ActivateEndpoint+0x2e0>)
 8008bd4:	4323      	orrs	r3, r4
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	7b1b      	ldrb	r3, [r3, #12]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	f040 8112 	bne.w	8008e08 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	785b      	ldrb	r3, [r3, #1]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d067      	beq.n	8008cbc <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008bec:	687c      	ldr	r4, [r7, #4]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	441c      	add	r4, r3
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	011b      	lsls	r3, r3, #4
 8008bfe:	4423      	add	r3, r4
 8008c00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c04:	461c      	mov	r4, r3
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	88db      	ldrh	r3, [r3, #6]
 8008c0a:	085b      	lsrs	r3, r3, #1
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	005b      	lsls	r3, r3, #1
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	4413      	add	r3, r2
 8008c1e:	881b      	ldrh	r3, [r3, #0]
 8008c20:	b29c      	uxth	r4, r3
 8008c22:	4623      	mov	r3, r4
 8008c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d014      	beq.n	8008c56 <USB_ActivateEndpoint+0x13a>
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	4413      	add	r3, r2
 8008c36:	881b      	ldrh	r3, [r3, #0]
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c42:	b29c      	uxth	r4, r3
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	441a      	add	r2, r3
 8008c4e:	4b6c      	ldr	r3, [pc, #432]	; (8008e00 <USB_ActivateEndpoint+0x2e4>)
 8008c50:	4323      	orrs	r3, r4
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	78db      	ldrb	r3, [r3, #3]
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d018      	beq.n	8008c90 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	4413      	add	r3, r2
 8008c68:	881b      	ldrh	r3, [r3, #0]
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c74:	b29c      	uxth	r4, r3
 8008c76:	f084 0320 	eor.w	r3, r4, #32
 8008c7a:	b29c      	uxth	r4, r3
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	441a      	add	r2, r3
 8008c86:	4b5d      	ldr	r3, [pc, #372]	; (8008dfc <USB_ActivateEndpoint+0x2e0>)
 8008c88:	4323      	orrs	r3, r4
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	8013      	strh	r3, [r2, #0]
 8008c8e:	e22b      	b.n	80090e8 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	4413      	add	r3, r2
 8008c9a:	881b      	ldrh	r3, [r3, #0]
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ca2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ca6:	b29c      	uxth	r4, r3
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	441a      	add	r2, r3
 8008cb2:	4b52      	ldr	r3, [pc, #328]	; (8008dfc <USB_ActivateEndpoint+0x2e0>)
 8008cb4:	4323      	orrs	r3, r4
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	8013      	strh	r3, [r2, #0]
 8008cba:	e215      	b.n	80090e8 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008cbc:	687c      	ldr	r4, [r7, #4]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	441c      	add	r4, r3
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	011b      	lsls	r3, r3, #4
 8008cce:	4423      	add	r3, r4
 8008cd0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008cd4:	461c      	mov	r4, r3
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	88db      	ldrh	r3, [r3, #6]
 8008cda:	085b      	lsrs	r3, r3, #1
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	005b      	lsls	r3, r3, #1
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008ce4:	687c      	ldr	r4, [r7, #4]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	441c      	add	r4, r3
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	011b      	lsls	r3, r3, #4
 8008cf6:	4423      	add	r3, r4
 8008cf8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008cfc:	461c      	mov	r4, r3
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d10e      	bne.n	8008d24 <USB_ActivateEndpoint+0x208>
 8008d06:	8823      	ldrh	r3, [r4, #0]
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	8023      	strh	r3, [r4, #0]
 8008d12:	8823      	ldrh	r3, [r4, #0]
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	8023      	strh	r3, [r4, #0]
 8008d22:	e02d      	b.n	8008d80 <USB_ActivateEndpoint+0x264>
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	691b      	ldr	r3, [r3, #16]
 8008d28:	2b3e      	cmp	r3, #62	; 0x3e
 8008d2a:	d812      	bhi.n	8008d52 <USB_ActivateEndpoint+0x236>
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	691b      	ldr	r3, [r3, #16]
 8008d30:	085b      	lsrs	r3, r3, #1
 8008d32:	60bb      	str	r3, [r7, #8]
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	691b      	ldr	r3, [r3, #16]
 8008d38:	f003 0301 	and.w	r3, r3, #1
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d002      	beq.n	8008d46 <USB_ActivateEndpoint+0x22a>
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	3301      	adds	r3, #1
 8008d44:	60bb      	str	r3, [r7, #8]
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	029b      	lsls	r3, r3, #10
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	8023      	strh	r3, [r4, #0]
 8008d50:	e016      	b.n	8008d80 <USB_ActivateEndpoint+0x264>
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	691b      	ldr	r3, [r3, #16]
 8008d56:	095b      	lsrs	r3, r3, #5
 8008d58:	60bb      	str	r3, [r7, #8]
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	691b      	ldr	r3, [r3, #16]
 8008d5e:	f003 031f 	and.w	r3, r3, #31
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d102      	bne.n	8008d6c <USB_ActivateEndpoint+0x250>
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	3b01      	subs	r3, #1
 8008d6a:	60bb      	str	r3, [r7, #8]
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	029b      	lsls	r3, r3, #10
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	4413      	add	r3, r2
 8008d8a:	881b      	ldrh	r3, [r3, #0]
 8008d8c:	b29c      	uxth	r4, r3
 8008d8e:	4623      	mov	r3, r4
 8008d90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d014      	beq.n	8008dc2 <USB_ActivateEndpoint+0x2a6>
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	4413      	add	r3, r2
 8008da2:	881b      	ldrh	r3, [r3, #0]
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dae:	b29c      	uxth	r4, r3
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	441a      	add	r2, r3
 8008dba:	4b12      	ldr	r3, [pc, #72]	; (8008e04 <USB_ActivateEndpoint+0x2e8>)
 8008dbc:	4323      	orrs	r3, r4
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	4413      	add	r3, r2
 8008dcc:	881b      	ldrh	r3, [r3, #0]
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dd8:	b29c      	uxth	r4, r3
 8008dda:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008dde:	b29c      	uxth	r4, r3
 8008de0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008de4:	b29c      	uxth	r4, r3
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	441a      	add	r2, r3
 8008df0:	4b02      	ldr	r3, [pc, #8]	; (8008dfc <USB_ActivateEndpoint+0x2e0>)
 8008df2:	4323      	orrs	r3, r4
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	8013      	strh	r3, [r2, #0]
 8008df8:	e176      	b.n	80090e8 <USB_ActivateEndpoint+0x5cc>
 8008dfa:	bf00      	nop
 8008dfc:	ffff8080 	.word	0xffff8080
 8008e00:	ffff80c0 	.word	0xffff80c0
 8008e04:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	4413      	add	r3, r2
 8008e12:	881b      	ldrh	r3, [r3, #0]
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e1e:	b29c      	uxth	r4, r3
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	441a      	add	r2, r3
 8008e2a:	4b96      	ldr	r3, [pc, #600]	; (8009084 <USB_ActivateEndpoint+0x568>)
 8008e2c:	4323      	orrs	r3, r4
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008e32:	687c      	ldr	r4, [r7, #4]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	441c      	add	r4, r3
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	011b      	lsls	r3, r3, #4
 8008e44:	4423      	add	r3, r4
 8008e46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e4a:	461c      	mov	r4, r3
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	891b      	ldrh	r3, [r3, #8]
 8008e50:	085b      	lsrs	r3, r3, #1
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	005b      	lsls	r3, r3, #1
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	8023      	strh	r3, [r4, #0]
 8008e5a:	687c      	ldr	r4, [r7, #4]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	441c      	add	r4, r3
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	011b      	lsls	r3, r3, #4
 8008e6c:	4423      	add	r3, r4
 8008e6e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008e72:	461c      	mov	r4, r3
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	895b      	ldrh	r3, [r3, #10]
 8008e78:	085b      	lsrs	r3, r3, #1
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	005b      	lsls	r3, r3, #1
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	785b      	ldrb	r3, [r3, #1]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	f040 8088 	bne.w	8008f9c <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	4413      	add	r3, r2
 8008e96:	881b      	ldrh	r3, [r3, #0]
 8008e98:	b29c      	uxth	r4, r3
 8008e9a:	4623      	mov	r3, r4
 8008e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d014      	beq.n	8008ece <USB_ActivateEndpoint+0x3b2>
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	4413      	add	r3, r2
 8008eae:	881b      	ldrh	r3, [r3, #0]
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eba:	b29c      	uxth	r4, r3
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	441a      	add	r2, r3
 8008ec6:	4b70      	ldr	r3, [pc, #448]	; (8009088 <USB_ActivateEndpoint+0x56c>)
 8008ec8:	4323      	orrs	r3, r4
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	4413      	add	r3, r2
 8008ed8:	881b      	ldrh	r3, [r3, #0]
 8008eda:	b29c      	uxth	r4, r3
 8008edc:	4623      	mov	r3, r4
 8008ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d014      	beq.n	8008f10 <USB_ActivateEndpoint+0x3f4>
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	4413      	add	r3, r2
 8008ef0:	881b      	ldrh	r3, [r3, #0]
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008efc:	b29c      	uxth	r4, r3
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	441a      	add	r2, r3
 8008f08:	4b60      	ldr	r3, [pc, #384]	; (800908c <USB_ActivateEndpoint+0x570>)
 8008f0a:	4323      	orrs	r3, r4
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	4413      	add	r3, r2
 8008f1a:	881b      	ldrh	r3, [r3, #0]
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f26:	b29c      	uxth	r4, r3
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	441a      	add	r2, r3
 8008f32:	4b56      	ldr	r3, [pc, #344]	; (800908c <USB_ActivateEndpoint+0x570>)
 8008f34:	4323      	orrs	r3, r4
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	4413      	add	r3, r2
 8008f44:	881b      	ldrh	r3, [r3, #0]
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f50:	b29c      	uxth	r4, r3
 8008f52:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008f56:	b29c      	uxth	r4, r3
 8008f58:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008f5c:	b29c      	uxth	r4, r3
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	441a      	add	r2, r3
 8008f68:	4b49      	ldr	r3, [pc, #292]	; (8009090 <USB_ActivateEndpoint+0x574>)
 8008f6a:	4323      	orrs	r3, r4
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	4413      	add	r3, r2
 8008f7a:	881b      	ldrh	r3, [r3, #0]
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f86:	b29c      	uxth	r4, r3
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	441a      	add	r2, r3
 8008f92:	4b3f      	ldr	r3, [pc, #252]	; (8009090 <USB_ActivateEndpoint+0x574>)
 8008f94:	4323      	orrs	r3, r4
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	8013      	strh	r3, [r2, #0]
 8008f9a:	e0a5      	b.n	80090e8 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	4413      	add	r3, r2
 8008fa6:	881b      	ldrh	r3, [r3, #0]
 8008fa8:	b29c      	uxth	r4, r3
 8008faa:	4623      	mov	r3, r4
 8008fac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d014      	beq.n	8008fde <USB_ActivateEndpoint+0x4c2>
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	4413      	add	r3, r2
 8008fbe:	881b      	ldrh	r3, [r3, #0]
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fca:	b29c      	uxth	r4, r3
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	441a      	add	r2, r3
 8008fd6:	4b2c      	ldr	r3, [pc, #176]	; (8009088 <USB_ActivateEndpoint+0x56c>)
 8008fd8:	4323      	orrs	r3, r4
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	4413      	add	r3, r2
 8008fe8:	881b      	ldrh	r3, [r3, #0]
 8008fea:	b29c      	uxth	r4, r3
 8008fec:	4623      	mov	r3, r4
 8008fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d014      	beq.n	8009020 <USB_ActivateEndpoint+0x504>
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	4413      	add	r3, r2
 8009000:	881b      	ldrh	r3, [r3, #0]
 8009002:	b29b      	uxth	r3, r3
 8009004:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800900c:	b29c      	uxth	r4, r3
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	441a      	add	r2, r3
 8009018:	4b1c      	ldr	r3, [pc, #112]	; (800908c <USB_ActivateEndpoint+0x570>)
 800901a:	4323      	orrs	r3, r4
 800901c:	b29b      	uxth	r3, r3
 800901e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	4413      	add	r3, r2
 800902a:	881b      	ldrh	r3, [r3, #0]
 800902c:	b29b      	uxth	r3, r3
 800902e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009036:	b29c      	uxth	r4, r3
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	441a      	add	r2, r3
 8009042:	4b11      	ldr	r3, [pc, #68]	; (8009088 <USB_ActivateEndpoint+0x56c>)
 8009044:	4323      	orrs	r3, r4
 8009046:	b29b      	uxth	r3, r3
 8009048:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	78db      	ldrb	r3, [r3, #3]
 800904e:	2b01      	cmp	r3, #1
 8009050:	d020      	beq.n	8009094 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	4413      	add	r3, r2
 800905c:	881b      	ldrh	r3, [r3, #0]
 800905e:	b29b      	uxth	r3, r3
 8009060:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009068:	b29c      	uxth	r4, r3
 800906a:	f084 0320 	eor.w	r3, r4, #32
 800906e:	b29c      	uxth	r4, r3
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	441a      	add	r2, r3
 800907a:	4b05      	ldr	r3, [pc, #20]	; (8009090 <USB_ActivateEndpoint+0x574>)
 800907c:	4323      	orrs	r3, r4
 800907e:	b29b      	uxth	r3, r3
 8009080:	8013      	strh	r3, [r2, #0]
 8009082:	e01c      	b.n	80090be <USB_ActivateEndpoint+0x5a2>
 8009084:	ffff8180 	.word	0xffff8180
 8009088:	ffffc080 	.word	0xffffc080
 800908c:	ffff80c0 	.word	0xffff80c0
 8009090:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	4413      	add	r3, r2
 800909e:	881b      	ldrh	r3, [r3, #0]
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090aa:	b29c      	uxth	r4, r3
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	441a      	add	r2, r3
 80090b6:	4b0f      	ldr	r3, [pc, #60]	; (80090f4 <USB_ActivateEndpoint+0x5d8>)
 80090b8:	4323      	orrs	r3, r4
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	4413      	add	r3, r2
 80090c8:	881b      	ldrh	r3, [r3, #0]
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80090d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090d4:	b29c      	uxth	r4, r3
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	441a      	add	r2, r3
 80090e0:	4b04      	ldr	r3, [pc, #16]	; (80090f4 <USB_ActivateEndpoint+0x5d8>)
 80090e2:	4323      	orrs	r3, r4
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80090e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bc90      	pop	{r4, r7}
 80090f2:	4770      	bx	lr
 80090f4:	ffff8080 	.word	0xffff8080

080090f8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80090f8:	b490      	push	{r4, r7}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	7b1b      	ldrb	r3, [r3, #12]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d171      	bne.n	80091ee <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	785b      	ldrb	r3, [r3, #1]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d036      	beq.n	8009180 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	4413      	add	r3, r2
 800911c:	881b      	ldrh	r3, [r3, #0]
 800911e:	b29c      	uxth	r4, r3
 8009120:	4623      	mov	r3, r4
 8009122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009126:	2b00      	cmp	r3, #0
 8009128:	d014      	beq.n	8009154 <USB_DeactivateEndpoint+0x5c>
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	4413      	add	r3, r2
 8009134:	881b      	ldrh	r3, [r3, #0]
 8009136:	b29b      	uxth	r3, r3
 8009138:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800913c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009140:	b29c      	uxth	r4, r3
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	441a      	add	r2, r3
 800914c:	4b6b      	ldr	r3, [pc, #428]	; (80092fc <USB_DeactivateEndpoint+0x204>)
 800914e:	4323      	orrs	r3, r4
 8009150:	b29b      	uxth	r3, r3
 8009152:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	4413      	add	r3, r2
 800915e:	881b      	ldrh	r3, [r3, #0]
 8009160:	b29b      	uxth	r3, r3
 8009162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800916a:	b29c      	uxth	r4, r3
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	441a      	add	r2, r3
 8009176:	4b62      	ldr	r3, [pc, #392]	; (8009300 <USB_DeactivateEndpoint+0x208>)
 8009178:	4323      	orrs	r3, r4
 800917a:	b29b      	uxth	r3, r3
 800917c:	8013      	strh	r3, [r2, #0]
 800917e:	e144      	b.n	800940a <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	4413      	add	r3, r2
 800918a:	881b      	ldrh	r3, [r3, #0]
 800918c:	b29c      	uxth	r4, r3
 800918e:	4623      	mov	r3, r4
 8009190:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009194:	2b00      	cmp	r3, #0
 8009196:	d014      	beq.n	80091c2 <USB_DeactivateEndpoint+0xca>
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	4413      	add	r3, r2
 80091a2:	881b      	ldrh	r3, [r3, #0]
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091ae:	b29c      	uxth	r4, r3
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	441a      	add	r2, r3
 80091ba:	4b52      	ldr	r3, [pc, #328]	; (8009304 <USB_DeactivateEndpoint+0x20c>)
 80091bc:	4323      	orrs	r3, r4
 80091be:	b29b      	uxth	r3, r3
 80091c0:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	009b      	lsls	r3, r3, #2
 80091ca:	4413      	add	r3, r2
 80091cc:	881b      	ldrh	r3, [r3, #0]
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091d8:	b29c      	uxth	r4, r3
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	441a      	add	r2, r3
 80091e4:	4b46      	ldr	r3, [pc, #280]	; (8009300 <USB_DeactivateEndpoint+0x208>)
 80091e6:	4323      	orrs	r3, r4
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	8013      	strh	r3, [r2, #0]
 80091ec:	e10d      	b.n	800940a <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	785b      	ldrb	r3, [r3, #1]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	f040 8088 	bne.w	8009308 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	4413      	add	r3, r2
 8009202:	881b      	ldrh	r3, [r3, #0]
 8009204:	b29c      	uxth	r4, r3
 8009206:	4623      	mov	r3, r4
 8009208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800920c:	2b00      	cmp	r3, #0
 800920e:	d014      	beq.n	800923a <USB_DeactivateEndpoint+0x142>
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	4413      	add	r3, r2
 800921a:	881b      	ldrh	r3, [r3, #0]
 800921c:	b29b      	uxth	r3, r3
 800921e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009226:	b29c      	uxth	r4, r3
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	441a      	add	r2, r3
 8009232:	4b34      	ldr	r3, [pc, #208]	; (8009304 <USB_DeactivateEndpoint+0x20c>)
 8009234:	4323      	orrs	r3, r4
 8009236:	b29b      	uxth	r3, r3
 8009238:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	4413      	add	r3, r2
 8009244:	881b      	ldrh	r3, [r3, #0]
 8009246:	b29c      	uxth	r4, r3
 8009248:	4623      	mov	r3, r4
 800924a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800924e:	2b00      	cmp	r3, #0
 8009250:	d014      	beq.n	800927c <USB_DeactivateEndpoint+0x184>
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	4413      	add	r3, r2
 800925c:	881b      	ldrh	r3, [r3, #0]
 800925e:	b29b      	uxth	r3, r3
 8009260:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009268:	b29c      	uxth	r4, r3
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	441a      	add	r2, r3
 8009274:	4b21      	ldr	r3, [pc, #132]	; (80092fc <USB_DeactivateEndpoint+0x204>)
 8009276:	4323      	orrs	r3, r4
 8009278:	b29b      	uxth	r3, r3
 800927a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	4413      	add	r3, r2
 8009286:	881b      	ldrh	r3, [r3, #0]
 8009288:	b29b      	uxth	r3, r3
 800928a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800928e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009292:	b29c      	uxth	r4, r3
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	441a      	add	r2, r3
 800929e:	4b17      	ldr	r3, [pc, #92]	; (80092fc <USB_DeactivateEndpoint+0x204>)
 80092a0:	4323      	orrs	r3, r4
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	4413      	add	r3, r2
 80092b0:	881b      	ldrh	r3, [r3, #0]
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092bc:	b29c      	uxth	r4, r3
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	441a      	add	r2, r3
 80092c8:	4b0d      	ldr	r3, [pc, #52]	; (8009300 <USB_DeactivateEndpoint+0x208>)
 80092ca:	4323      	orrs	r3, r4
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	4413      	add	r3, r2
 80092da:	881b      	ldrh	r3, [r3, #0]
 80092dc:	b29b      	uxth	r3, r3
 80092de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092e6:	b29c      	uxth	r4, r3
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	441a      	add	r2, r3
 80092f2:	4b03      	ldr	r3, [pc, #12]	; (8009300 <USB_DeactivateEndpoint+0x208>)
 80092f4:	4323      	orrs	r3, r4
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	8013      	strh	r3, [r2, #0]
 80092fa:	e086      	b.n	800940a <USB_DeactivateEndpoint+0x312>
 80092fc:	ffff80c0 	.word	0xffff80c0
 8009300:	ffff8080 	.word	0xffff8080
 8009304:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	4413      	add	r3, r2
 8009312:	881b      	ldrh	r3, [r3, #0]
 8009314:	b29c      	uxth	r4, r3
 8009316:	4623      	mov	r3, r4
 8009318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800931c:	2b00      	cmp	r3, #0
 800931e:	d014      	beq.n	800934a <USB_DeactivateEndpoint+0x252>
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	4413      	add	r3, r2
 800932a:	881b      	ldrh	r3, [r3, #0]
 800932c:	b29b      	uxth	r3, r3
 800932e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009336:	b29c      	uxth	r4, r3
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	441a      	add	r2, r3
 8009342:	4b35      	ldr	r3, [pc, #212]	; (8009418 <USB_DeactivateEndpoint+0x320>)
 8009344:	4323      	orrs	r3, r4
 8009346:	b29b      	uxth	r3, r3
 8009348:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	009b      	lsls	r3, r3, #2
 8009352:	4413      	add	r3, r2
 8009354:	881b      	ldrh	r3, [r3, #0]
 8009356:	b29c      	uxth	r4, r3
 8009358:	4623      	mov	r3, r4
 800935a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800935e:	2b00      	cmp	r3, #0
 8009360:	d014      	beq.n	800938c <USB_DeactivateEndpoint+0x294>
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	4413      	add	r3, r2
 800936c:	881b      	ldrh	r3, [r3, #0]
 800936e:	b29b      	uxth	r3, r3
 8009370:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009378:	b29c      	uxth	r4, r3
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	441a      	add	r2, r3
 8009384:	4b25      	ldr	r3, [pc, #148]	; (800941c <USB_DeactivateEndpoint+0x324>)
 8009386:	4323      	orrs	r3, r4
 8009388:	b29b      	uxth	r3, r3
 800938a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800938c:	687a      	ldr	r2, [r7, #4]
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	4413      	add	r3, r2
 8009396:	881b      	ldrh	r3, [r3, #0]
 8009398:	b29b      	uxth	r3, r3
 800939a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800939e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093a2:	b29c      	uxth	r4, r3
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	441a      	add	r2, r3
 80093ae:	4b1a      	ldr	r3, [pc, #104]	; (8009418 <USB_DeactivateEndpoint+0x320>)
 80093b0:	4323      	orrs	r3, r4
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	4413      	add	r3, r2
 80093c0:	881b      	ldrh	r3, [r3, #0]
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093cc:	b29c      	uxth	r4, r3
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	441a      	add	r2, r3
 80093d8:	4b11      	ldr	r3, [pc, #68]	; (8009420 <USB_DeactivateEndpoint+0x328>)
 80093da:	4323      	orrs	r3, r4
 80093dc:	b29b      	uxth	r3, r3
 80093de:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	4413      	add	r3, r2
 80093ea:	881b      	ldrh	r3, [r3, #0]
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80093f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093f6:	b29c      	uxth	r4, r3
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	441a      	add	r2, r3
 8009402:	4b07      	ldr	r3, [pc, #28]	; (8009420 <USB_DeactivateEndpoint+0x328>)
 8009404:	4323      	orrs	r3, r4
 8009406:	b29b      	uxth	r3, r3
 8009408:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bc90      	pop	{r4, r7}
 8009414:	4770      	bx	lr
 8009416:	bf00      	nop
 8009418:	ffffc080 	.word	0xffffc080
 800941c:	ffff80c0 	.word	0xffff80c0
 8009420:	ffff8080 	.word	0xffff8080

08009424 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009424:	b590      	push	{r4, r7, lr}
 8009426:	b08d      	sub	sp, #52	; 0x34
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	785b      	ldrb	r3, [r3, #1]
 8009432:	2b01      	cmp	r3, #1
 8009434:	f040 8160 	bne.w	80096f8 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	699a      	ldr	r2, [r3, #24]
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	429a      	cmp	r2, r3
 8009442:	d909      	bls.n	8009458 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	691b      	ldr	r3, [r3, #16]
 8009448:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	699a      	ldr	r2, [r3, #24]
 800944e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009450:	1ad2      	subs	r2, r2, r3
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	619a      	str	r2, [r3, #24]
 8009456:	e005      	b.n	8009464 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	699b      	ldr	r3, [r3, #24]
 800945c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	2200      	movs	r2, #0
 8009462:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	7b1b      	ldrb	r3, [r3, #12]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d119      	bne.n	80094a0 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	6959      	ldr	r1, [r3, #20]
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	88da      	ldrh	r2, [r3, #6]
 8009474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009476:	b29b      	uxth	r3, r3
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 fba2 	bl	8009bc2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800947e:	687c      	ldr	r4, [r7, #4]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009486:	b29b      	uxth	r3, r3
 8009488:	441c      	add	r4, r3
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	011b      	lsls	r3, r3, #4
 8009490:	4423      	add	r3, r4
 8009492:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009496:	461c      	mov	r4, r3
 8009498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800949a:	b29b      	uxth	r3, r3
 800949c:	8023      	strh	r3, [r4, #0]
 800949e:	e10f      	b.n	80096c0 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	4413      	add	r3, r2
 80094aa:	881b      	ldrh	r3, [r3, #0]
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d065      	beq.n	8009582 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80094b6:	687c      	ldr	r4, [r7, #4]
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	785b      	ldrb	r3, [r3, #1]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d148      	bne.n	8009552 <USB_EPStartXfer+0x12e>
 80094c0:	687c      	ldr	r4, [r7, #4]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	441c      	add	r4, r3
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	011b      	lsls	r3, r3, #4
 80094d2:	4423      	add	r3, r4
 80094d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80094d8:	461c      	mov	r4, r3
 80094da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d10e      	bne.n	80094fe <USB_EPStartXfer+0xda>
 80094e0:	8823      	ldrh	r3, [r4, #0]
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	8023      	strh	r3, [r4, #0]
 80094ec:	8823      	ldrh	r3, [r4, #0]
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	8023      	strh	r3, [r4, #0]
 80094fc:	e03d      	b.n	800957a <USB_EPStartXfer+0x156>
 80094fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009500:	2b3e      	cmp	r3, #62	; 0x3e
 8009502:	d810      	bhi.n	8009526 <USB_EPStartXfer+0x102>
 8009504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009506:	085b      	lsrs	r3, r3, #1
 8009508:	627b      	str	r3, [r7, #36]	; 0x24
 800950a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950c:	f003 0301 	and.w	r3, r3, #1
 8009510:	2b00      	cmp	r3, #0
 8009512:	d002      	beq.n	800951a <USB_EPStartXfer+0xf6>
 8009514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009516:	3301      	adds	r3, #1
 8009518:	627b      	str	r3, [r7, #36]	; 0x24
 800951a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951c:	b29b      	uxth	r3, r3
 800951e:	029b      	lsls	r3, r3, #10
 8009520:	b29b      	uxth	r3, r3
 8009522:	8023      	strh	r3, [r4, #0]
 8009524:	e029      	b.n	800957a <USB_EPStartXfer+0x156>
 8009526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009528:	095b      	lsrs	r3, r3, #5
 800952a:	627b      	str	r3, [r7, #36]	; 0x24
 800952c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952e:	f003 031f 	and.w	r3, r3, #31
 8009532:	2b00      	cmp	r3, #0
 8009534:	d102      	bne.n	800953c <USB_EPStartXfer+0x118>
 8009536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009538:	3b01      	subs	r3, #1
 800953a:	627b      	str	r3, [r7, #36]	; 0x24
 800953c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953e:	b29b      	uxth	r3, r3
 8009540:	029b      	lsls	r3, r3, #10
 8009542:	b29b      	uxth	r3, r3
 8009544:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009548:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800954c:	b29b      	uxth	r3, r3
 800954e:	8023      	strh	r3, [r4, #0]
 8009550:	e013      	b.n	800957a <USB_EPStartXfer+0x156>
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	785b      	ldrb	r3, [r3, #1]
 8009556:	2b01      	cmp	r3, #1
 8009558:	d10f      	bne.n	800957a <USB_EPStartXfer+0x156>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009560:	b29b      	uxth	r3, r3
 8009562:	441c      	add	r4, r3
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	011b      	lsls	r3, r3, #4
 800956a:	4423      	add	r3, r4
 800956c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009570:	60fb      	str	r3, [r7, #12]
 8009572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009574:	b29a      	uxth	r2, r3
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	895b      	ldrh	r3, [r3, #10]
 800957e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009580:	e063      	b.n	800964a <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	785b      	ldrb	r3, [r3, #1]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d148      	bne.n	800961c <USB_EPStartXfer+0x1f8>
 800958a:	687c      	ldr	r4, [r7, #4]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009592:	b29b      	uxth	r3, r3
 8009594:	441c      	add	r4, r3
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	011b      	lsls	r3, r3, #4
 800959c:	4423      	add	r3, r4
 800959e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80095a2:	461c      	mov	r4, r3
 80095a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d10e      	bne.n	80095c8 <USB_EPStartXfer+0x1a4>
 80095aa:	8823      	ldrh	r3, [r4, #0]
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	8023      	strh	r3, [r4, #0]
 80095b6:	8823      	ldrh	r3, [r4, #0]
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	8023      	strh	r3, [r4, #0]
 80095c6:	e03d      	b.n	8009644 <USB_EPStartXfer+0x220>
 80095c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ca:	2b3e      	cmp	r3, #62	; 0x3e
 80095cc:	d810      	bhi.n	80095f0 <USB_EPStartXfer+0x1cc>
 80095ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d0:	085b      	lsrs	r3, r3, #1
 80095d2:	623b      	str	r3, [r7, #32]
 80095d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d6:	f003 0301 	and.w	r3, r3, #1
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d002      	beq.n	80095e4 <USB_EPStartXfer+0x1c0>
 80095de:	6a3b      	ldr	r3, [r7, #32]
 80095e0:	3301      	adds	r3, #1
 80095e2:	623b      	str	r3, [r7, #32]
 80095e4:	6a3b      	ldr	r3, [r7, #32]
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	029b      	lsls	r3, r3, #10
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	8023      	strh	r3, [r4, #0]
 80095ee:	e029      	b.n	8009644 <USB_EPStartXfer+0x220>
 80095f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f2:	095b      	lsrs	r3, r3, #5
 80095f4:	623b      	str	r3, [r7, #32]
 80095f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f8:	f003 031f 	and.w	r3, r3, #31
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d102      	bne.n	8009606 <USB_EPStartXfer+0x1e2>
 8009600:	6a3b      	ldr	r3, [r7, #32]
 8009602:	3b01      	subs	r3, #1
 8009604:	623b      	str	r3, [r7, #32]
 8009606:	6a3b      	ldr	r3, [r7, #32]
 8009608:	b29b      	uxth	r3, r3
 800960a:	029b      	lsls	r3, r3, #10
 800960c:	b29b      	uxth	r3, r3
 800960e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009612:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009616:	b29b      	uxth	r3, r3
 8009618:	8023      	strh	r3, [r4, #0]
 800961a:	e013      	b.n	8009644 <USB_EPStartXfer+0x220>
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	785b      	ldrb	r3, [r3, #1]
 8009620:	2b01      	cmp	r3, #1
 8009622:	d10f      	bne.n	8009644 <USB_EPStartXfer+0x220>
 8009624:	687c      	ldr	r4, [r7, #4]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800962c:	b29b      	uxth	r3, r3
 800962e:	441c      	add	r4, r3
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	781b      	ldrb	r3, [r3, #0]
 8009634:	011b      	lsls	r3, r3, #4
 8009636:	4423      	add	r3, r4
 8009638:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800963c:	461c      	mov	r4, r3
 800963e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009640:	b29b      	uxth	r3, r3
 8009642:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	891b      	ldrh	r3, [r3, #8]
 8009648:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	6959      	ldr	r1, [r3, #20]
 800964e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009650:	b29b      	uxth	r3, r3
 8009652:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 fab4 	bl	8009bc2 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	785b      	ldrb	r3, [r3, #1]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d115      	bne.n	800968e <USB_EPStartXfer+0x26a>
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	4413      	add	r3, r2
 800966c:	881b      	ldrh	r3, [r3, #0]
 800966e:	b29b      	uxth	r3, r3
 8009670:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009678:	b29c      	uxth	r4, r3
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	441a      	add	r2, r3
 8009684:	4b9a      	ldr	r3, [pc, #616]	; (80098f0 <USB_EPStartXfer+0x4cc>)
 8009686:	4323      	orrs	r3, r4
 8009688:	b29b      	uxth	r3, r3
 800968a:	8013      	strh	r3, [r2, #0]
 800968c:	e018      	b.n	80096c0 <USB_EPStartXfer+0x29c>
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	785b      	ldrb	r3, [r3, #1]
 8009692:	2b01      	cmp	r3, #1
 8009694:	d114      	bne.n	80096c0 <USB_EPStartXfer+0x29c>
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	4413      	add	r3, r2
 80096a0:	881b      	ldrh	r3, [r3, #0]
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096ac:	b29c      	uxth	r4, r3
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	441a      	add	r2, r3
 80096b8:	4b8e      	ldr	r3, [pc, #568]	; (80098f4 <USB_EPStartXfer+0x4d0>)
 80096ba:	4323      	orrs	r3, r4
 80096bc:	b29b      	uxth	r3, r3
 80096be:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	4413      	add	r3, r2
 80096ca:	881b      	ldrh	r3, [r3, #0]
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096d6:	b29c      	uxth	r4, r3
 80096d8:	f084 0310 	eor.w	r3, r4, #16
 80096dc:	b29c      	uxth	r4, r3
 80096de:	f084 0320 	eor.w	r3, r4, #32
 80096e2:	b29c      	uxth	r4, r3
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	441a      	add	r2, r3
 80096ee:	4b82      	ldr	r3, [pc, #520]	; (80098f8 <USB_EPStartXfer+0x4d4>)
 80096f0:	4323      	orrs	r3, r4
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	8013      	strh	r3, [r2, #0]
 80096f6:	e146      	b.n	8009986 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	699a      	ldr	r2, [r3, #24]
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	691b      	ldr	r3, [r3, #16]
 8009700:	429a      	cmp	r2, r3
 8009702:	d909      	bls.n	8009718 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	691b      	ldr	r3, [r3, #16]
 8009708:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	699a      	ldr	r2, [r3, #24]
 800970e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009710:	1ad2      	subs	r2, r2, r3
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	619a      	str	r2, [r3, #24]
 8009716:	e005      	b.n	8009724 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	699b      	ldr	r3, [r3, #24]
 800971c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	2200      	movs	r2, #0
 8009722:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	7b1b      	ldrb	r3, [r3, #12]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d148      	bne.n	80097be <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800972c:	687c      	ldr	r4, [r7, #4]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009734:	b29b      	uxth	r3, r3
 8009736:	441c      	add	r4, r3
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	011b      	lsls	r3, r3, #4
 800973e:	4423      	add	r3, r4
 8009740:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009744:	461c      	mov	r4, r3
 8009746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009748:	2b00      	cmp	r3, #0
 800974a:	d10e      	bne.n	800976a <USB_EPStartXfer+0x346>
 800974c:	8823      	ldrh	r3, [r4, #0]
 800974e:	b29b      	uxth	r3, r3
 8009750:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009754:	b29b      	uxth	r3, r3
 8009756:	8023      	strh	r3, [r4, #0]
 8009758:	8823      	ldrh	r3, [r4, #0]
 800975a:	b29b      	uxth	r3, r3
 800975c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009764:	b29b      	uxth	r3, r3
 8009766:	8023      	strh	r3, [r4, #0]
 8009768:	e0f2      	b.n	8009950 <USB_EPStartXfer+0x52c>
 800976a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976c:	2b3e      	cmp	r3, #62	; 0x3e
 800976e:	d810      	bhi.n	8009792 <USB_EPStartXfer+0x36e>
 8009770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009772:	085b      	lsrs	r3, r3, #1
 8009774:	61fb      	str	r3, [r7, #28]
 8009776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009778:	f003 0301 	and.w	r3, r3, #1
 800977c:	2b00      	cmp	r3, #0
 800977e:	d002      	beq.n	8009786 <USB_EPStartXfer+0x362>
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	3301      	adds	r3, #1
 8009784:	61fb      	str	r3, [r7, #28]
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	b29b      	uxth	r3, r3
 800978a:	029b      	lsls	r3, r3, #10
 800978c:	b29b      	uxth	r3, r3
 800978e:	8023      	strh	r3, [r4, #0]
 8009790:	e0de      	b.n	8009950 <USB_EPStartXfer+0x52c>
 8009792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009794:	095b      	lsrs	r3, r3, #5
 8009796:	61fb      	str	r3, [r7, #28]
 8009798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979a:	f003 031f 	and.w	r3, r3, #31
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d102      	bne.n	80097a8 <USB_EPStartXfer+0x384>
 80097a2:	69fb      	ldr	r3, [r7, #28]
 80097a4:	3b01      	subs	r3, #1
 80097a6:	61fb      	str	r3, [r7, #28]
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	029b      	lsls	r3, r3, #10
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	8023      	strh	r3, [r4, #0]
 80097bc:	e0c8      	b.n	8009950 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	785b      	ldrb	r3, [r3, #1]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d148      	bne.n	8009858 <USB_EPStartXfer+0x434>
 80097c6:	687c      	ldr	r4, [r7, #4]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	441c      	add	r4, r3
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	011b      	lsls	r3, r3, #4
 80097d8:	4423      	add	r3, r4
 80097da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80097de:	461c      	mov	r4, r3
 80097e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d10e      	bne.n	8009804 <USB_EPStartXfer+0x3e0>
 80097e6:	8823      	ldrh	r3, [r4, #0]
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	8023      	strh	r3, [r4, #0]
 80097f2:	8823      	ldrh	r3, [r4, #0]
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097fe:	b29b      	uxth	r3, r3
 8009800:	8023      	strh	r3, [r4, #0]
 8009802:	e03d      	b.n	8009880 <USB_EPStartXfer+0x45c>
 8009804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009806:	2b3e      	cmp	r3, #62	; 0x3e
 8009808:	d810      	bhi.n	800982c <USB_EPStartXfer+0x408>
 800980a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800980c:	085b      	lsrs	r3, r3, #1
 800980e:	61bb      	str	r3, [r7, #24]
 8009810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009812:	f003 0301 	and.w	r3, r3, #1
 8009816:	2b00      	cmp	r3, #0
 8009818:	d002      	beq.n	8009820 <USB_EPStartXfer+0x3fc>
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	3301      	adds	r3, #1
 800981e:	61bb      	str	r3, [r7, #24]
 8009820:	69bb      	ldr	r3, [r7, #24]
 8009822:	b29b      	uxth	r3, r3
 8009824:	029b      	lsls	r3, r3, #10
 8009826:	b29b      	uxth	r3, r3
 8009828:	8023      	strh	r3, [r4, #0]
 800982a:	e029      	b.n	8009880 <USB_EPStartXfer+0x45c>
 800982c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800982e:	095b      	lsrs	r3, r3, #5
 8009830:	61bb      	str	r3, [r7, #24]
 8009832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009834:	f003 031f 	and.w	r3, r3, #31
 8009838:	2b00      	cmp	r3, #0
 800983a:	d102      	bne.n	8009842 <USB_EPStartXfer+0x41e>
 800983c:	69bb      	ldr	r3, [r7, #24]
 800983e:	3b01      	subs	r3, #1
 8009840:	61bb      	str	r3, [r7, #24]
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	b29b      	uxth	r3, r3
 8009846:	029b      	lsls	r3, r3, #10
 8009848:	b29b      	uxth	r3, r3
 800984a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800984e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009852:	b29b      	uxth	r3, r3
 8009854:	8023      	strh	r3, [r4, #0]
 8009856:	e013      	b.n	8009880 <USB_EPStartXfer+0x45c>
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	785b      	ldrb	r3, [r3, #1]
 800985c:	2b01      	cmp	r3, #1
 800985e:	d10f      	bne.n	8009880 <USB_EPStartXfer+0x45c>
 8009860:	687c      	ldr	r4, [r7, #4]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009868:	b29b      	uxth	r3, r3
 800986a:	441c      	add	r4, r3
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	011b      	lsls	r3, r3, #4
 8009872:	4423      	add	r3, r4
 8009874:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009878:	461c      	mov	r4, r3
 800987a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987c:	b29b      	uxth	r3, r3
 800987e:	8023      	strh	r3, [r4, #0]
 8009880:	687c      	ldr	r4, [r7, #4]
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	785b      	ldrb	r3, [r3, #1]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d14e      	bne.n	8009928 <USB_EPStartXfer+0x504>
 800988a:	687c      	ldr	r4, [r7, #4]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009892:	b29b      	uxth	r3, r3
 8009894:	441c      	add	r4, r3
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	011b      	lsls	r3, r3, #4
 800989c:	4423      	add	r3, r4
 800989e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80098a2:	461c      	mov	r4, r3
 80098a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d10e      	bne.n	80098c8 <USB_EPStartXfer+0x4a4>
 80098aa:	8823      	ldrh	r3, [r4, #0]
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	8023      	strh	r3, [r4, #0]
 80098b6:	8823      	ldrh	r3, [r4, #0]
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	8023      	strh	r3, [r4, #0]
 80098c6:	e043      	b.n	8009950 <USB_EPStartXfer+0x52c>
 80098c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ca:	2b3e      	cmp	r3, #62	; 0x3e
 80098cc:	d816      	bhi.n	80098fc <USB_EPStartXfer+0x4d8>
 80098ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d0:	085b      	lsrs	r3, r3, #1
 80098d2:	617b      	str	r3, [r7, #20]
 80098d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d6:	f003 0301 	and.w	r3, r3, #1
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d002      	beq.n	80098e4 <USB_EPStartXfer+0x4c0>
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	3301      	adds	r3, #1
 80098e2:	617b      	str	r3, [r7, #20]
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	029b      	lsls	r3, r3, #10
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	8023      	strh	r3, [r4, #0]
 80098ee:	e02f      	b.n	8009950 <USB_EPStartXfer+0x52c>
 80098f0:	ffff80c0 	.word	0xffff80c0
 80098f4:	ffffc080 	.word	0xffffc080
 80098f8:	ffff8080 	.word	0xffff8080
 80098fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fe:	095b      	lsrs	r3, r3, #5
 8009900:	617b      	str	r3, [r7, #20]
 8009902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009904:	f003 031f 	and.w	r3, r3, #31
 8009908:	2b00      	cmp	r3, #0
 800990a:	d102      	bne.n	8009912 <USB_EPStartXfer+0x4ee>
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	3b01      	subs	r3, #1
 8009910:	617b      	str	r3, [r7, #20]
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	b29b      	uxth	r3, r3
 8009916:	029b      	lsls	r3, r3, #10
 8009918:	b29b      	uxth	r3, r3
 800991a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800991e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009922:	b29b      	uxth	r3, r3
 8009924:	8023      	strh	r3, [r4, #0]
 8009926:	e013      	b.n	8009950 <USB_EPStartXfer+0x52c>
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	785b      	ldrb	r3, [r3, #1]
 800992c:	2b01      	cmp	r3, #1
 800992e:	d10f      	bne.n	8009950 <USB_EPStartXfer+0x52c>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009936:	b29b      	uxth	r3, r3
 8009938:	441c      	add	r4, r3
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	011b      	lsls	r3, r3, #4
 8009940:	4423      	add	r3, r4
 8009942:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009946:	613b      	str	r3, [r7, #16]
 8009948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994a:	b29a      	uxth	r2, r3
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	4413      	add	r3, r2
 800995a:	881b      	ldrh	r3, [r3, #0]
 800995c:	b29b      	uxth	r3, r3
 800995e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009966:	b29c      	uxth	r4, r3
 8009968:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800996c:	b29c      	uxth	r4, r3
 800996e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8009972:	b29c      	uxth	r4, r3
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	441a      	add	r2, r3
 800997e:	4b04      	ldr	r3, [pc, #16]	; (8009990 <USB_EPStartXfer+0x56c>)
 8009980:	4323      	orrs	r3, r4
 8009982:	b29b      	uxth	r3, r3
 8009984:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009986:	2300      	movs	r3, #0
}
 8009988:	4618      	mov	r0, r3
 800998a:	3734      	adds	r7, #52	; 0x34
 800998c:	46bd      	mov	sp, r7
 800998e:	bd90      	pop	{r4, r7, pc}
 8009990:	ffff8080 	.word	0xffff8080

08009994 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009994:	b490      	push	{r4, r7}
 8009996:	b082      	sub	sp, #8
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	785b      	ldrb	r3, [r3, #1]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d018      	beq.n	80099d8 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	4413      	add	r3, r2
 80099b0:	881b      	ldrh	r3, [r3, #0]
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099bc:	b29c      	uxth	r4, r3
 80099be:	f084 0310 	eor.w	r3, r4, #16
 80099c2:	b29c      	uxth	r4, r3
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	009b      	lsls	r3, r3, #2
 80099cc:	441a      	add	r2, r3
 80099ce:	4b11      	ldr	r3, [pc, #68]	; (8009a14 <USB_EPSetStall+0x80>)
 80099d0:	4323      	orrs	r3, r4
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	8013      	strh	r3, [r2, #0]
 80099d6:	e017      	b.n	8009a08 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	4413      	add	r3, r2
 80099e2:	881b      	ldrh	r3, [r3, #0]
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099ee:	b29c      	uxth	r4, r3
 80099f0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80099f4:	b29c      	uxth	r4, r3
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	441a      	add	r2, r3
 8009a00:	4b04      	ldr	r3, [pc, #16]	; (8009a14 <USB_EPSetStall+0x80>)
 8009a02:	4323      	orrs	r3, r4
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009a08:	2300      	movs	r3, #0
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3708      	adds	r7, #8
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bc90      	pop	{r4, r7}
 8009a12:	4770      	bx	lr
 8009a14:	ffff8080 	.word	0xffff8080

08009a18 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009a18:	b490      	push	{r4, r7}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	7b1b      	ldrb	r3, [r3, #12]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d17d      	bne.n	8009b26 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	785b      	ldrb	r3, [r3, #1]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d03d      	beq.n	8009aae <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	4413      	add	r3, r2
 8009a3c:	881b      	ldrh	r3, [r3, #0]
 8009a3e:	b29c      	uxth	r4, r3
 8009a40:	4623      	mov	r3, r4
 8009a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d014      	beq.n	8009a74 <USB_EPClearStall+0x5c>
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	4413      	add	r3, r2
 8009a54:	881b      	ldrh	r3, [r3, #0]
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a60:	b29c      	uxth	r4, r3
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	441a      	add	r2, r3
 8009a6c:	4b31      	ldr	r3, [pc, #196]	; (8009b34 <USB_EPClearStall+0x11c>)
 8009a6e:	4323      	orrs	r3, r4
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	78db      	ldrb	r3, [r3, #3]
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d054      	beq.n	8009b26 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	4413      	add	r3, r2
 8009a86:	881b      	ldrh	r3, [r3, #0]
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a92:	b29c      	uxth	r4, r3
 8009a94:	f084 0320 	eor.w	r3, r4, #32
 8009a98:	b29c      	uxth	r4, r3
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	441a      	add	r2, r3
 8009aa4:	4b24      	ldr	r3, [pc, #144]	; (8009b38 <USB_EPClearStall+0x120>)
 8009aa6:	4323      	orrs	r3, r4
 8009aa8:	b29b      	uxth	r3, r3
 8009aaa:	8013      	strh	r3, [r2, #0]
 8009aac:	e03b      	b.n	8009b26 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	4413      	add	r3, r2
 8009ab8:	881b      	ldrh	r3, [r3, #0]
 8009aba:	b29c      	uxth	r4, r3
 8009abc:	4623      	mov	r3, r4
 8009abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d014      	beq.n	8009af0 <USB_EPClearStall+0xd8>
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	4413      	add	r3, r2
 8009ad0:	881b      	ldrh	r3, [r3, #0]
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009adc:	b29c      	uxth	r4, r3
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	441a      	add	r2, r3
 8009ae8:	4b14      	ldr	r3, [pc, #80]	; (8009b3c <USB_EPClearStall+0x124>)
 8009aea:	4323      	orrs	r3, r4
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	4413      	add	r3, r2
 8009afa:	881b      	ldrh	r3, [r3, #0]
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b06:	b29c      	uxth	r4, r3
 8009b08:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8009b0c:	b29c      	uxth	r4, r3
 8009b0e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8009b12:	b29c      	uxth	r4, r3
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	441a      	add	r2, r3
 8009b1e:	4b06      	ldr	r3, [pc, #24]	; (8009b38 <USB_EPClearStall+0x120>)
 8009b20:	4323      	orrs	r3, r4
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009b26:	2300      	movs	r3, #0
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3708      	adds	r7, #8
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bc90      	pop	{r4, r7}
 8009b30:	4770      	bx	lr
 8009b32:	bf00      	nop
 8009b34:	ffff80c0 	.word	0xffff80c0
 8009b38:	ffff8080 	.word	0xffff8080
 8009b3c:	ffffc080 	.word	0xffffc080

08009b40 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b083      	sub	sp, #12
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	460b      	mov	r3, r1
 8009b4a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009b4c:	78fb      	ldrb	r3, [r7, #3]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d103      	bne.n	8009b5a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2280      	movs	r2, #128	; 0x80
 8009b56:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009b5a:	2300      	movs	r3, #0
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	370c      	adds	r7, #12
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bc80      	pop	{r7}
 8009b64:	4770      	bx	lr

08009b66 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009b66:	b480      	push	{r7}
 8009b68:	b083      	sub	sp, #12
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009b6e:	2300      	movs	r3, #0
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	370c      	adds	r7, #12
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bc80      	pop	{r7}
 8009b78:	4770      	bx	lr

08009b7a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009b7a:	b480      	push	{r7}
 8009b7c:	b083      	sub	sp, #12
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009b82:	2300      	movs	r3, #0
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bc80      	pop	{r7}
 8009b8c:	4770      	bx	lr

08009b8e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009b8e:	b480      	push	{r7}
 8009b90:	b085      	sub	sp, #20
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3714      	adds	r7, #20
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bc80      	pop	{r7}
 8009baa:	4770      	bx	lr

08009bac <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009bb6:	2300      	movs	r3, #0
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	370c      	adds	r7, #12
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bc80      	pop	{r7}
 8009bc0:	4770      	bx	lr

08009bc2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009bc2:	b480      	push	{r7}
 8009bc4:	b08d      	sub	sp, #52	; 0x34
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	60f8      	str	r0, [r7, #12]
 8009bca:	60b9      	str	r1, [r7, #8]
 8009bcc:	4611      	mov	r1, r2
 8009bce:	461a      	mov	r2, r3
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	80fb      	strh	r3, [r7, #6]
 8009bd4:	4613      	mov	r3, r2
 8009bd6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009bd8:	88bb      	ldrh	r3, [r7, #4]
 8009bda:	3301      	adds	r3, #1
 8009bdc:	085b      	lsrs	r3, r3, #1
 8009bde:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009be8:	88fb      	ldrh	r3, [r7, #6]
 8009bea:	005a      	lsls	r2, r3, #1
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	4413      	add	r3, r2
 8009bf0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bf4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009bf6:	6a3b      	ldr	r3, [r7, #32]
 8009bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bfa:	e01e      	b.n	8009c3a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c04:	3301      	adds	r3, #1
 8009c06:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	021b      	lsls	r3, r3, #8
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	461a      	mov	r2, r3
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	b29a      	uxth	r2, r3
 8009c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c20:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c24:	3302      	adds	r3, #2
 8009c26:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c2a:	3302      	adds	r3, #2
 8009c2c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8009c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c30:	3301      	adds	r3, #1
 8009c32:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c36:	3b01      	subs	r3, #1
 8009c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d1dd      	bne.n	8009bfc <USB_WritePMA+0x3a>
  }
}
 8009c40:	bf00      	nop
 8009c42:	3734      	adds	r7, #52	; 0x34
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bc80      	pop	{r7}
 8009c48:	4770      	bx	lr

08009c4a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009c4a:	b480      	push	{r7}
 8009c4c:	b08b      	sub	sp, #44	; 0x2c
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	60f8      	str	r0, [r7, #12]
 8009c52:	60b9      	str	r1, [r7, #8]
 8009c54:	4611      	mov	r1, r2
 8009c56:	461a      	mov	r2, r3
 8009c58:	460b      	mov	r3, r1
 8009c5a:	80fb      	strh	r3, [r7, #6]
 8009c5c:	4613      	mov	r3, r2
 8009c5e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009c60:	88bb      	ldrh	r3, [r7, #4]
 8009c62:	085b      	lsrs	r3, r3, #1
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009c70:	88fb      	ldrh	r3, [r7, #6]
 8009c72:	005a      	lsls	r2, r3, #1
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	4413      	add	r3, r2
 8009c78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c7c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009c7e:	69bb      	ldr	r3, [r7, #24]
 8009c80:	627b      	str	r3, [r7, #36]	; 0x24
 8009c82:	e01b      	b.n	8009cbc <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009c84:	6a3b      	ldr	r3, [r7, #32]
 8009c86:	881b      	ldrh	r3, [r3, #0]
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009c8c:	6a3b      	ldr	r3, [r7, #32]
 8009c8e:	3302      	adds	r3, #2
 8009c90:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	b2da      	uxtb	r2, r3
 8009c96:	69fb      	ldr	r3, [r7, #28]
 8009c98:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	0a1b      	lsrs	r3, r3, #8
 8009ca4:	b2da      	uxtb	r2, r3
 8009ca6:	69fb      	ldr	r3, [r7, #28]
 8009ca8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009caa:	69fb      	ldr	r3, [r7, #28]
 8009cac:	3301      	adds	r3, #1
 8009cae:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009cb0:	6a3b      	ldr	r3, [r7, #32]
 8009cb2:	3302      	adds	r3, #2
 8009cb4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8009cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb8:	3b01      	subs	r3, #1
 8009cba:	627b      	str	r3, [r7, #36]	; 0x24
 8009cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d1e0      	bne.n	8009c84 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009cc2:	88bb      	ldrh	r3, [r7, #4]
 8009cc4:	f003 0301 	and.w	r3, r3, #1
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d007      	beq.n	8009cde <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8009cce:	6a3b      	ldr	r3, [r7, #32]
 8009cd0:	881b      	ldrh	r3, [r3, #0]
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	b2da      	uxtb	r2, r3
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	701a      	strb	r2, [r3, #0]
  }
}
 8009cde:	bf00      	nop
 8009ce0:	372c      	adds	r7, #44	; 0x2c
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bc80      	pop	{r7}
 8009ce6:	4770      	bx	lr

08009ce8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	7c1b      	ldrb	r3, [r3, #16]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d115      	bne.n	8009d2c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009d00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d04:	2202      	movs	r2, #2
 8009d06:	2181      	movs	r1, #129	; 0x81
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f001 fe8e 	bl	800ba2a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2201      	movs	r2, #1
 8009d12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009d14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d18:	2202      	movs	r2, #2
 8009d1a:	2101      	movs	r1, #1
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f001 fe84 	bl	800ba2a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2201      	movs	r2, #1
 8009d26:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009d2a:	e012      	b.n	8009d52 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009d2c:	2340      	movs	r3, #64	; 0x40
 8009d2e:	2202      	movs	r2, #2
 8009d30:	2181      	movs	r1, #129	; 0x81
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f001 fe79 	bl	800ba2a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009d3e:	2340      	movs	r3, #64	; 0x40
 8009d40:	2202      	movs	r2, #2
 8009d42:	2101      	movs	r1, #1
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f001 fe70 	bl	800ba2a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009d52:	2308      	movs	r3, #8
 8009d54:	2203      	movs	r2, #3
 8009d56:	2182      	movs	r1, #130	; 0x82
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f001 fe66 	bl	800ba2a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2201      	movs	r2, #1
 8009d62:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009d64:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009d68:	f001 ff80 	bl	800bc6c <USBD_static_malloc>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d102      	bne.n	8009d84 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	73fb      	strb	r3, [r7, #15]
 8009d82:	e026      	b.n	8009dd2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d8a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	2200      	movs	r2, #0
 8009da2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	7c1b      	ldrb	r3, [r3, #16]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d109      	bne.n	8009dc2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009db4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009db8:	2101      	movs	r1, #1
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f001 ff1f 	bl	800bbfe <USBD_LL_PrepareReceive>
 8009dc0:	e007      	b.n	8009dd2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009dc8:	2340      	movs	r3, #64	; 0x40
 8009dca:	2101      	movs	r1, #1
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f001 ff16 	bl	800bbfe <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3710      	adds	r7, #16
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	460b      	mov	r3, r1
 8009de6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009de8:	2300      	movs	r3, #0
 8009dea:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009dec:	2181      	movs	r1, #129	; 0x81
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f001 fe41 	bl	800ba76 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009dfa:	2101      	movs	r1, #1
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f001 fe3a 	bl	800ba76 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009e0a:	2182      	movs	r1, #130	; 0x82
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f001 fe32 	bl	800ba76 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2200      	movs	r2, #0
 8009e16:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d00e      	beq.n	8009e40 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e32:	4618      	mov	r0, r3
 8009e34:	f001 ff26 	bl	800bc84 <USBD_static_free>
    pdev->pClassData = NULL;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3710      	adds	r7, #16
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}

08009e4a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b086      	sub	sp, #24
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
 8009e52:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e5a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009e60:	2300      	movs	r3, #0
 8009e62:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009e64:	2300      	movs	r3, #0
 8009e66:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d039      	beq.n	8009ee8 <USBD_CDC_Setup+0x9e>
 8009e74:	2b20      	cmp	r3, #32
 8009e76:	d17c      	bne.n	8009f72 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	88db      	ldrh	r3, [r3, #6]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d029      	beq.n	8009ed4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	b25b      	sxtb	r3, r3
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	da11      	bge.n	8009eae <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e90:	689b      	ldr	r3, [r3, #8]
 8009e92:	683a      	ldr	r2, [r7, #0]
 8009e94:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009e96:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009e98:	683a      	ldr	r2, [r7, #0]
 8009e9a:	88d2      	ldrh	r2, [r2, #6]
 8009e9c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009e9e:	6939      	ldr	r1, [r7, #16]
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	88db      	ldrh	r3, [r3, #6]
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f001 f9f6 	bl	800b298 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009eac:	e068      	b.n	8009f80 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	785a      	ldrb	r2, [r3, #1]
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	88db      	ldrh	r3, [r3, #6]
 8009ebc:	b2da      	uxtb	r2, r3
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009ec4:	6939      	ldr	r1, [r7, #16]
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	88db      	ldrh	r3, [r3, #6]
 8009eca:	461a      	mov	r2, r3
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f001 fa11 	bl	800b2f4 <USBD_CtlPrepareRx>
      break;
 8009ed2:	e055      	b.n	8009f80 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009eda:	689b      	ldr	r3, [r3, #8]
 8009edc:	683a      	ldr	r2, [r7, #0]
 8009ede:	7850      	ldrb	r0, [r2, #1]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	6839      	ldr	r1, [r7, #0]
 8009ee4:	4798      	blx	r3
      break;
 8009ee6:	e04b      	b.n	8009f80 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	785b      	ldrb	r3, [r3, #1]
 8009eec:	2b0a      	cmp	r3, #10
 8009eee:	d017      	beq.n	8009f20 <USBD_CDC_Setup+0xd6>
 8009ef0:	2b0b      	cmp	r3, #11
 8009ef2:	d029      	beq.n	8009f48 <USBD_CDC_Setup+0xfe>
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d133      	bne.n	8009f60 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009efe:	2b03      	cmp	r3, #3
 8009f00:	d107      	bne.n	8009f12 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009f02:	f107 030c 	add.w	r3, r7, #12
 8009f06:	2202      	movs	r2, #2
 8009f08:	4619      	mov	r1, r3
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f001 f9c4 	bl	800b298 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f10:	e02e      	b.n	8009f70 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8009f12:	6839      	ldr	r1, [r7, #0]
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f001 f955 	bl	800b1c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f1a:	2302      	movs	r3, #2
 8009f1c:	75fb      	strb	r3, [r7, #23]
          break;
 8009f1e:	e027      	b.n	8009f70 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f26:	2b03      	cmp	r3, #3
 8009f28:	d107      	bne.n	8009f3a <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009f2a:	f107 030f 	add.w	r3, r7, #15
 8009f2e:	2201      	movs	r2, #1
 8009f30:	4619      	mov	r1, r3
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f001 f9b0 	bl	800b298 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f38:	e01a      	b.n	8009f70 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8009f3a:	6839      	ldr	r1, [r7, #0]
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f001 f941 	bl	800b1c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f42:	2302      	movs	r3, #2
 8009f44:	75fb      	strb	r3, [r7, #23]
          break;
 8009f46:	e013      	b.n	8009f70 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f4e:	2b03      	cmp	r3, #3
 8009f50:	d00d      	beq.n	8009f6e <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8009f52:	6839      	ldr	r1, [r7, #0]
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f001 f935 	bl	800b1c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f5a:	2302      	movs	r3, #2
 8009f5c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009f5e:	e006      	b.n	8009f6e <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8009f60:	6839      	ldr	r1, [r7, #0]
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f001 f92e 	bl	800b1c4 <USBD_CtlError>
          ret = USBD_FAIL;
 8009f68:	2302      	movs	r3, #2
 8009f6a:	75fb      	strb	r3, [r7, #23]
          break;
 8009f6c:	e000      	b.n	8009f70 <USBD_CDC_Setup+0x126>
          break;
 8009f6e:	bf00      	nop
      }
      break;
 8009f70:	e006      	b.n	8009f80 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8009f72:	6839      	ldr	r1, [r7, #0]
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f001 f925 	bl	800b1c4 <USBD_CtlError>
      ret = USBD_FAIL;
 8009f7a:	2302      	movs	r3, #2
 8009f7c:	75fb      	strb	r3, [r7, #23]
      break;
 8009f7e:	bf00      	nop
  }

  return ret;
 8009f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3718      	adds	r7, #24
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b084      	sub	sp, #16
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
 8009f92:	460b      	mov	r3, r1
 8009f94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f9c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009fa4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d037      	beq.n	800a020 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009fb0:	78fa      	ldrb	r2, [r7, #3]
 8009fb2:	6879      	ldr	r1, [r7, #4]
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	4413      	add	r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	440b      	add	r3, r1
 8009fbe:	331c      	adds	r3, #28
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d026      	beq.n	800a014 <USBD_CDC_DataIn+0x8a>
 8009fc6:	78fa      	ldrb	r2, [r7, #3]
 8009fc8:	6879      	ldr	r1, [r7, #4]
 8009fca:	4613      	mov	r3, r2
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	4413      	add	r3, r2
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	440b      	add	r3, r1
 8009fd4:	331c      	adds	r3, #28
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	78fa      	ldrb	r2, [r7, #3]
 8009fda:	68b9      	ldr	r1, [r7, #8]
 8009fdc:	0152      	lsls	r2, r2, #5
 8009fde:	440a      	add	r2, r1
 8009fe0:	3238      	adds	r2, #56	; 0x38
 8009fe2:	6812      	ldr	r2, [r2, #0]
 8009fe4:	fbb3 f1f2 	udiv	r1, r3, r2
 8009fe8:	fb02 f201 	mul.w	r2, r2, r1
 8009fec:	1a9b      	subs	r3, r3, r2
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d110      	bne.n	800a014 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009ff2:	78fa      	ldrb	r2, [r7, #3]
 8009ff4:	6879      	ldr	r1, [r7, #4]
 8009ff6:	4613      	mov	r3, r2
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	4413      	add	r3, r2
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	440b      	add	r3, r1
 800a000:	331c      	adds	r3, #28
 800a002:	2200      	movs	r2, #0
 800a004:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a006:	78f9      	ldrb	r1, [r7, #3]
 800a008:	2300      	movs	r3, #0
 800a00a:	2200      	movs	r2, #0
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f001 fdd3 	bl	800bbb8 <USBD_LL_Transmit>
 800a012:	e003      	b.n	800a01c <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2200      	movs	r2, #0
 800a018:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a01c:	2300      	movs	r3, #0
 800a01e:	e000      	b.n	800a022 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 800a020:	2302      	movs	r3, #2
  }
}
 800a022:	4618      	mov	r0, r3
 800a024:	3710      	adds	r7, #16
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a02a:	b580      	push	{r7, lr}
 800a02c:	b084      	sub	sp, #16
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
 800a032:	460b      	mov	r3, r1
 800a034:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a03c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a03e:	78fb      	ldrb	r3, [r7, #3]
 800a040:	4619      	mov	r1, r3
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f001 fdfe 	bl	800bc44 <USBD_LL_GetRxDataSize>
 800a048:	4602      	mov	r2, r0
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a056:	2b00      	cmp	r3, #0
 800a058:	d00d      	beq.n	800a076 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	68fa      	ldr	r2, [r7, #12]
 800a064:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a068:	68fa      	ldr	r2, [r7, #12]
 800a06a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a06e:	4611      	mov	r1, r2
 800a070:	4798      	blx	r3

    return USBD_OK;
 800a072:	2300      	movs	r3, #0
 800a074:	e000      	b.n	800a078 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a076:	2302      	movs	r3, #2
  }
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3710      	adds	r7, #16
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a08e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a096:	2b00      	cmp	r3, #0
 800a098:	d015      	beq.n	800a0c6 <USBD_CDC_EP0_RxReady+0x46>
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a0a0:	2bff      	cmp	r3, #255	; 0xff
 800a0a2:	d010      	beq.n	800a0c6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0aa:	689b      	ldr	r3, [r3, #8]
 800a0ac:	68fa      	ldr	r2, [r7, #12]
 800a0ae:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a0b2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a0ba:	b292      	uxth	r2, r2
 800a0bc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	22ff      	movs	r2, #255	; 0xff
 800a0c2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a0c6:	2300      	movs	r3, #0
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3710      	adds	r7, #16
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2243      	movs	r2, #67	; 0x43
 800a0dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a0de:	4b03      	ldr	r3, [pc, #12]	; (800a0ec <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	370c      	adds	r7, #12
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bc80      	pop	{r7}
 800a0e8:	4770      	bx	lr
 800a0ea:	bf00      	nop
 800a0ec:	200000bc 	.word	0x200000bc

0800a0f0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2243      	movs	r2, #67	; 0x43
 800a0fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a0fe:	4b03      	ldr	r3, [pc, #12]	; (800a10c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a100:	4618      	mov	r0, r3
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	bc80      	pop	{r7}
 800a108:	4770      	bx	lr
 800a10a:	bf00      	nop
 800a10c:	20000078 	.word	0x20000078

0800a110 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2243      	movs	r2, #67	; 0x43
 800a11c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a11e:	4b03      	ldr	r3, [pc, #12]	; (800a12c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a120:	4618      	mov	r0, r3
 800a122:	370c      	adds	r7, #12
 800a124:	46bd      	mov	sp, r7
 800a126:	bc80      	pop	{r7}
 800a128:	4770      	bx	lr
 800a12a:	bf00      	nop
 800a12c:	20000100 	.word	0x20000100

0800a130 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a130:	b480      	push	{r7}
 800a132:	b083      	sub	sp, #12
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	220a      	movs	r2, #10
 800a13c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a13e:	4b03      	ldr	r3, [pc, #12]	; (800a14c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a140:	4618      	mov	r0, r3
 800a142:	370c      	adds	r7, #12
 800a144:	46bd      	mov	sp, r7
 800a146:	bc80      	pop	{r7}
 800a148:	4770      	bx	lr
 800a14a:	bf00      	nop
 800a14c:	20000034 	.word	0x20000034

0800a150 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a150:	b480      	push	{r7}
 800a152:	b085      	sub	sp, #20
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a15a:	2302      	movs	r3, #2
 800a15c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d005      	beq.n	800a170 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	683a      	ldr	r2, [r7, #0]
 800a168:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a16c:	2300      	movs	r3, #0
 800a16e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a170:	7bfb      	ldrb	r3, [r7, #15]
}
 800a172:	4618      	mov	r0, r3
 800a174:	3714      	adds	r7, #20
 800a176:	46bd      	mov	sp, r7
 800a178:	bc80      	pop	{r7}
 800a17a:	4770      	bx	lr

0800a17c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b087      	sub	sp, #28
 800a180:	af00      	add	r7, sp, #0
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	60b9      	str	r1, [r7, #8]
 800a186:	4613      	mov	r3, r2
 800a188:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a190:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	68ba      	ldr	r2, [r7, #8]
 800a196:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a19a:	88fa      	ldrh	r2, [r7, #6]
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a1a2:	2300      	movs	r3, #0
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	371c      	adds	r7, #28
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bc80      	pop	{r7}
 800a1ac:	4770      	bx	lr

0800a1ae <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a1ae:	b480      	push	{r7}
 800a1b0:	b085      	sub	sp, #20
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
 800a1b6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1be:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	683a      	ldr	r2, [r7, #0]
 800a1c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a1c8:	2300      	movs	r3, #0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3714      	adds	r7, #20
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bc80      	pop	{r7}
 800a1d2:	4770      	bx	lr

0800a1d4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d01c      	beq.n	800a228 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d115      	bne.n	800a224 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a216:	b29b      	uxth	r3, r3
 800a218:	2181      	movs	r1, #129	; 0x81
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f001 fccc 	bl	800bbb8 <USBD_LL_Transmit>

      return USBD_OK;
 800a220:	2300      	movs	r3, #0
 800a222:	e002      	b.n	800a22a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a224:	2301      	movs	r3, #1
 800a226:	e000      	b.n	800a22a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a228:	2302      	movs	r3, #2
  }
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a232:	b580      	push	{r7, lr}
 800a234:	b084      	sub	sp, #16
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a240:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d017      	beq.n	800a27c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	7c1b      	ldrb	r3, [r3, #16]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d109      	bne.n	800a268 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a25a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a25e:	2101      	movs	r1, #1
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f001 fccc 	bl	800bbfe <USBD_LL_PrepareReceive>
 800a266:	e007      	b.n	800a278 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a26e:	2340      	movs	r3, #64	; 0x40
 800a270:	2101      	movs	r1, #1
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f001 fcc3 	bl	800bbfe <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a278:	2300      	movs	r3, #0
 800a27a:	e000      	b.n	800a27e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a27c:	2302      	movs	r3, #2
  }
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3710      	adds	r7, #16
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}

0800a286 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a286:	b580      	push	{r7, lr}
 800a288:	b084      	sub	sp, #16
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	60f8      	str	r0, [r7, #12]
 800a28e:	60b9      	str	r1, [r7, #8]
 800a290:	4613      	mov	r3, r2
 800a292:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d101      	bne.n	800a29e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a29a:	2302      	movs	r3, #2
 800a29c:	e01a      	b.n	800a2d4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d003      	beq.n	800a2b0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d003      	beq.n	800a2be <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	68ba      	ldr	r2, [r7, #8]
 800a2ba:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2201      	movs	r2, #1
 800a2c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	79fa      	ldrb	r2, [r7, #7]
 800a2ca:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a2cc:	68f8      	ldr	r0, [r7, #12]
 800a2ce:	f001 fb37 	bl	800b940 <USBD_LL_Init>

  return USBD_OK;
 800a2d2:	2300      	movs	r3, #0
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3710      	adds	r7, #16
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b085      	sub	sp, #20
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d006      	beq.n	800a2fe <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	683a      	ldr	r2, [r7, #0]
 800a2f4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	73fb      	strb	r3, [r7, #15]
 800a2fc:	e001      	b.n	800a302 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a2fe:	2302      	movs	r3, #2
 800a300:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a302:	7bfb      	ldrb	r3, [r7, #15]
}
 800a304:	4618      	mov	r0, r3
 800a306:	3714      	adds	r7, #20
 800a308:	46bd      	mov	sp, r7
 800a30a:	bc80      	pop	{r7}
 800a30c:	4770      	bx	lr

0800a30e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b082      	sub	sp, #8
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f001 fb6c 	bl	800b9f4 <USBD_LL_Start>

  return USBD_OK;
 800a31c:	2300      	movs	r3, #0
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3708      	adds	r7, #8
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}

0800a326 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a326:	b480      	push	{r7}
 800a328:	b083      	sub	sp, #12
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a32e:	2300      	movs	r3, #0
}
 800a330:	4618      	mov	r0, r3
 800a332:	370c      	adds	r7, #12
 800a334:	46bd      	mov	sp, r7
 800a336:	bc80      	pop	{r7}
 800a338:	4770      	bx	lr

0800a33a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a33a:	b580      	push	{r7, lr}
 800a33c:	b084      	sub	sp, #16
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
 800a342:	460b      	mov	r3, r1
 800a344:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a346:	2302      	movs	r3, #2
 800a348:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a350:	2b00      	cmp	r3, #0
 800a352:	d00c      	beq.n	800a36e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	78fa      	ldrb	r2, [r7, #3]
 800a35e:	4611      	mov	r1, r2
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	4798      	blx	r3
 800a364:	4603      	mov	r3, r0
 800a366:	2b00      	cmp	r3, #0
 800a368:	d101      	bne.n	800a36e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a36a:	2300      	movs	r3, #0
 800a36c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a36e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a370:	4618      	mov	r0, r3
 800a372:	3710      	adds	r7, #16
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b082      	sub	sp, #8
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	460b      	mov	r3, r1
 800a382:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	78fa      	ldrb	r2, [r7, #3]
 800a38e:	4611      	mov	r1, r2
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	4798      	blx	r3

  return USBD_OK;
 800a394:	2300      	movs	r3, #0
}
 800a396:	4618      	mov	r0, r3
 800a398:	3708      	adds	r7, #8
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}

0800a39e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a39e:	b580      	push	{r7, lr}
 800a3a0:	b082      	sub	sp, #8
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]
 800a3a6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a3ae:	6839      	ldr	r1, [r7, #0]
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f000 fecb 	bl	800b14c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a3c4:	461a      	mov	r2, r3
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a3d2:	f003 031f 	and.w	r3, r3, #31
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	d00c      	beq.n	800a3f4 <USBD_LL_SetupStage+0x56>
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	d302      	bcc.n	800a3e4 <USBD_LL_SetupStage+0x46>
 800a3de:	2b02      	cmp	r3, #2
 800a3e0:	d010      	beq.n	800a404 <USBD_LL_SetupStage+0x66>
 800a3e2:	e017      	b.n	800a414 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 f9cb 	bl	800a788 <USBD_StdDevReq>
      break;
 800a3f2:	e01a      	b.n	800a42a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f000 fa2d 	bl	800a85c <USBD_StdItfReq>
      break;
 800a402:	e012      	b.n	800a42a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a40a:	4619      	mov	r1, r3
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 fa6b 	bl	800a8e8 <USBD_StdEPReq>
      break;
 800a412:	e00a      	b.n	800a42a <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a41a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	4619      	mov	r1, r3
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f001 fb46 	bl	800bab4 <USBD_LL_StallEP>
      break;
 800a428:	bf00      	nop
  }

  return USBD_OK;
 800a42a:	2300      	movs	r3, #0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3708      	adds	r7, #8
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b086      	sub	sp, #24
 800a438:	af00      	add	r7, sp, #0
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	460b      	mov	r3, r1
 800a43e:	607a      	str	r2, [r7, #4]
 800a440:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a442:	7afb      	ldrb	r3, [r7, #11]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d14b      	bne.n	800a4e0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a44e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a456:	2b03      	cmp	r3, #3
 800a458:	d134      	bne.n	800a4c4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	68da      	ldr	r2, [r3, #12]
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	691b      	ldr	r3, [r3, #16]
 800a462:	429a      	cmp	r2, r3
 800a464:	d919      	bls.n	800a49a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	68da      	ldr	r2, [r3, #12]
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	691b      	ldr	r3, [r3, #16]
 800a46e:	1ad2      	subs	r2, r2, r3
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	68da      	ldr	r2, [r3, #12]
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d203      	bcs.n	800a488 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a484:	b29b      	uxth	r3, r3
 800a486:	e002      	b.n	800a48e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	461a      	mov	r2, r3
 800a490:	6879      	ldr	r1, [r7, #4]
 800a492:	68f8      	ldr	r0, [r7, #12]
 800a494:	f000 ff4c 	bl	800b330 <USBD_CtlContinueRx>
 800a498:	e038      	b.n	800a50c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4a0:	691b      	ldr	r3, [r3, #16]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d00a      	beq.n	800a4bc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a4ac:	2b03      	cmp	r3, #3
 800a4ae:	d105      	bne.n	800a4bc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4b6:	691b      	ldr	r3, [r3, #16]
 800a4b8:	68f8      	ldr	r0, [r7, #12]
 800a4ba:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a4bc:	68f8      	ldr	r0, [r7, #12]
 800a4be:	f000 ff49 	bl	800b354 <USBD_CtlSendStatus>
 800a4c2:	e023      	b.n	800a50c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a4ca:	2b05      	cmp	r3, #5
 800a4cc:	d11e      	bne.n	800a50c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a4d6:	2100      	movs	r1, #0
 800a4d8:	68f8      	ldr	r0, [r7, #12]
 800a4da:	f001 faeb 	bl	800bab4 <USBD_LL_StallEP>
 800a4de:	e015      	b.n	800a50c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4e6:	699b      	ldr	r3, [r3, #24]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d00d      	beq.n	800a508 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a4f2:	2b03      	cmp	r3, #3
 800a4f4:	d108      	bne.n	800a508 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4fc:	699b      	ldr	r3, [r3, #24]
 800a4fe:	7afa      	ldrb	r2, [r7, #11]
 800a500:	4611      	mov	r1, r2
 800a502:	68f8      	ldr	r0, [r7, #12]
 800a504:	4798      	blx	r3
 800a506:	e001      	b.n	800a50c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a508:	2302      	movs	r3, #2
 800a50a:	e000      	b.n	800a50e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a50c:	2300      	movs	r3, #0
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3718      	adds	r7, #24
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a516:	b580      	push	{r7, lr}
 800a518:	b086      	sub	sp, #24
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	60f8      	str	r0, [r7, #12]
 800a51e:	460b      	mov	r3, r1
 800a520:	607a      	str	r2, [r7, #4]
 800a522:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a524:	7afb      	ldrb	r3, [r7, #11]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d17f      	bne.n	800a62a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	3314      	adds	r3, #20
 800a52e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a536:	2b02      	cmp	r3, #2
 800a538:	d15c      	bne.n	800a5f4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	68da      	ldr	r2, [r3, #12]
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	691b      	ldr	r3, [r3, #16]
 800a542:	429a      	cmp	r2, r3
 800a544:	d915      	bls.n	800a572 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	68da      	ldr	r2, [r3, #12]
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	691b      	ldr	r3, [r3, #16]
 800a54e:	1ad2      	subs	r2, r2, r3
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	68db      	ldr	r3, [r3, #12]
 800a558:	b29b      	uxth	r3, r3
 800a55a:	461a      	mov	r2, r3
 800a55c:	6879      	ldr	r1, [r7, #4]
 800a55e:	68f8      	ldr	r0, [r7, #12]
 800a560:	f000 feb6 	bl	800b2d0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a564:	2300      	movs	r3, #0
 800a566:	2200      	movs	r2, #0
 800a568:	2100      	movs	r1, #0
 800a56a:	68f8      	ldr	r0, [r7, #12]
 800a56c:	f001 fb47 	bl	800bbfe <USBD_LL_PrepareReceive>
 800a570:	e04e      	b.n	800a610 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	689b      	ldr	r3, [r3, #8]
 800a576:	697a      	ldr	r2, [r7, #20]
 800a578:	6912      	ldr	r2, [r2, #16]
 800a57a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a57e:	fb02 f201 	mul.w	r2, r2, r1
 800a582:	1a9b      	subs	r3, r3, r2
 800a584:	2b00      	cmp	r3, #0
 800a586:	d11c      	bne.n	800a5c2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	689a      	ldr	r2, [r3, #8]
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a590:	429a      	cmp	r2, r3
 800a592:	d316      	bcc.n	800a5c2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	689a      	ldr	r2, [r3, #8]
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d20f      	bcs.n	800a5c2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	2100      	movs	r1, #0
 800a5a6:	68f8      	ldr	r0, [r7, #12]
 800a5a8:	f000 fe92 	bl	800b2d0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	2100      	movs	r1, #0
 800a5ba:	68f8      	ldr	r0, [r7, #12]
 800a5bc:	f001 fb1f 	bl	800bbfe <USBD_LL_PrepareReceive>
 800a5c0:	e026      	b.n	800a610 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5c8:	68db      	ldr	r3, [r3, #12]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d00a      	beq.n	800a5e4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a5d4:	2b03      	cmp	r3, #3
 800a5d6:	d105      	bne.n	800a5e4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5de:	68db      	ldr	r3, [r3, #12]
 800a5e0:	68f8      	ldr	r0, [r7, #12]
 800a5e2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a5e4:	2180      	movs	r1, #128	; 0x80
 800a5e6:	68f8      	ldr	r0, [r7, #12]
 800a5e8:	f001 fa64 	bl	800bab4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a5ec:	68f8      	ldr	r0, [r7, #12]
 800a5ee:	f000 fec4 	bl	800b37a <USBD_CtlReceiveStatus>
 800a5f2:	e00d      	b.n	800a610 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a5fa:	2b04      	cmp	r3, #4
 800a5fc:	d004      	beq.n	800a608 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a604:	2b00      	cmp	r3, #0
 800a606:	d103      	bne.n	800a610 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a608:	2180      	movs	r1, #128	; 0x80
 800a60a:	68f8      	ldr	r0, [r7, #12]
 800a60c:	f001 fa52 	bl	800bab4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a616:	2b01      	cmp	r3, #1
 800a618:	d11d      	bne.n	800a656 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a61a:	68f8      	ldr	r0, [r7, #12]
 800a61c:	f7ff fe83 	bl	800a326 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2200      	movs	r2, #0
 800a624:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a628:	e015      	b.n	800a656 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a630:	695b      	ldr	r3, [r3, #20]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d00d      	beq.n	800a652 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a63c:	2b03      	cmp	r3, #3
 800a63e:	d108      	bne.n	800a652 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a646:	695b      	ldr	r3, [r3, #20]
 800a648:	7afa      	ldrb	r2, [r7, #11]
 800a64a:	4611      	mov	r1, r2
 800a64c:	68f8      	ldr	r0, [r7, #12]
 800a64e:	4798      	blx	r3
 800a650:	e001      	b.n	800a656 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a652:	2302      	movs	r3, #2
 800a654:	e000      	b.n	800a658 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a656:	2300      	movs	r3, #0
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3718      	adds	r7, #24
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b082      	sub	sp, #8
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a668:	2340      	movs	r3, #64	; 0x40
 800a66a:	2200      	movs	r2, #0
 800a66c:	2100      	movs	r1, #0
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f001 f9db 	bl	800ba2a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2201      	movs	r2, #1
 800a678:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2240      	movs	r2, #64	; 0x40
 800a680:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a684:	2340      	movs	r3, #64	; 0x40
 800a686:	2200      	movs	r2, #0
 800a688:	2180      	movs	r1, #128	; 0x80
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f001 f9cd 	bl	800ba2a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2201      	movs	r2, #1
 800a694:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2240      	movs	r2, #64	; 0x40
 800a69a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d009      	beq.n	800a6d8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	687a      	ldr	r2, [r7, #4]
 800a6ce:	6852      	ldr	r2, [r2, #4]
 800a6d0:	b2d2      	uxtb	r2, r2
 800a6d2:	4611      	mov	r1, r2
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	4798      	blx	r3
  }

  return USBD_OK;
 800a6d8:	2300      	movs	r3, #0
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3708      	adds	r7, #8
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}

0800a6e2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a6e2:	b480      	push	{r7}
 800a6e4:	b083      	sub	sp, #12
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6078      	str	r0, [r7, #4]
 800a6ea:	460b      	mov	r3, r1
 800a6ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	78fa      	ldrb	r2, [r7, #3]
 800a6f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a6f4:	2300      	movs	r3, #0
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	370c      	adds	r7, #12
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bc80      	pop	{r7}
 800a6fe:	4770      	bx	lr

0800a700 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a700:	b480      	push	{r7}
 800a702:	b083      	sub	sp, #12
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2204      	movs	r2, #4
 800a718:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a71c:	2300      	movs	r3, #0
}
 800a71e:	4618      	mov	r0, r3
 800a720:	370c      	adds	r7, #12
 800a722:	46bd      	mov	sp, r7
 800a724:	bc80      	pop	{r7}
 800a726:	4770      	bx	lr

0800a728 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a736:	2b04      	cmp	r3, #4
 800a738:	d105      	bne.n	800a746 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a746:	2300      	movs	r3, #0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	370c      	adds	r7, #12
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bc80      	pop	{r7}
 800a750:	4770      	bx	lr

0800a752 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a752:	b580      	push	{r7, lr}
 800a754:	b082      	sub	sp, #8
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a760:	2b03      	cmp	r3, #3
 800a762:	d10b      	bne.n	800a77c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a76a:	69db      	ldr	r3, [r3, #28]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d005      	beq.n	800a77c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a776:	69db      	ldr	r3, [r3, #28]
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a77c:	2300      	movs	r3, #0
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3708      	adds	r7, #8
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
	...

0800a788 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a792:	2300      	movs	r3, #0
 800a794:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	781b      	ldrb	r3, [r3, #0]
 800a79a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a79e:	2b20      	cmp	r3, #32
 800a7a0:	d004      	beq.n	800a7ac <USBD_StdDevReq+0x24>
 800a7a2:	2b40      	cmp	r3, #64	; 0x40
 800a7a4:	d002      	beq.n	800a7ac <USBD_StdDevReq+0x24>
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d008      	beq.n	800a7bc <USBD_StdDevReq+0x34>
 800a7aa:	e04c      	b.n	800a846 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	6839      	ldr	r1, [r7, #0]
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	4798      	blx	r3
      break;
 800a7ba:	e049      	b.n	800a850 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	785b      	ldrb	r3, [r3, #1]
 800a7c0:	2b09      	cmp	r3, #9
 800a7c2:	d83a      	bhi.n	800a83a <USBD_StdDevReq+0xb2>
 800a7c4:	a201      	add	r2, pc, #4	; (adr r2, 800a7cc <USBD_StdDevReq+0x44>)
 800a7c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ca:	bf00      	nop
 800a7cc:	0800a81d 	.word	0x0800a81d
 800a7d0:	0800a831 	.word	0x0800a831
 800a7d4:	0800a83b 	.word	0x0800a83b
 800a7d8:	0800a827 	.word	0x0800a827
 800a7dc:	0800a83b 	.word	0x0800a83b
 800a7e0:	0800a7ff 	.word	0x0800a7ff
 800a7e4:	0800a7f5 	.word	0x0800a7f5
 800a7e8:	0800a83b 	.word	0x0800a83b
 800a7ec:	0800a813 	.word	0x0800a813
 800a7f0:	0800a809 	.word	0x0800a809
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a7f4:	6839      	ldr	r1, [r7, #0]
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 f9d4 	bl	800aba4 <USBD_GetDescriptor>
          break;
 800a7fc:	e022      	b.n	800a844 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a7fe:	6839      	ldr	r1, [r7, #0]
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 fb37 	bl	800ae74 <USBD_SetAddress>
          break;
 800a806:	e01d      	b.n	800a844 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a808:	6839      	ldr	r1, [r7, #0]
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f000 fb74 	bl	800aef8 <USBD_SetConfig>
          break;
 800a810:	e018      	b.n	800a844 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a812:	6839      	ldr	r1, [r7, #0]
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f000 fbfd 	bl	800b014 <USBD_GetConfig>
          break;
 800a81a:	e013      	b.n	800a844 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a81c:	6839      	ldr	r1, [r7, #0]
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 fc2c 	bl	800b07c <USBD_GetStatus>
          break;
 800a824:	e00e      	b.n	800a844 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a826:	6839      	ldr	r1, [r7, #0]
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f000 fc5a 	bl	800b0e2 <USBD_SetFeature>
          break;
 800a82e:	e009      	b.n	800a844 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a830:	6839      	ldr	r1, [r7, #0]
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f000 fc69 	bl	800b10a <USBD_ClrFeature>
          break;
 800a838:	e004      	b.n	800a844 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a83a:	6839      	ldr	r1, [r7, #0]
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f000 fcc1 	bl	800b1c4 <USBD_CtlError>
          break;
 800a842:	bf00      	nop
      }
      break;
 800a844:	e004      	b.n	800a850 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a846:	6839      	ldr	r1, [r7, #0]
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 fcbb 	bl	800b1c4 <USBD_CtlError>
      break;
 800a84e:	bf00      	nop
  }

  return ret;
 800a850:	7bfb      	ldrb	r3, [r7, #15]
}
 800a852:	4618      	mov	r0, r3
 800a854:	3710      	adds	r7, #16
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop

0800a85c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a866:	2300      	movs	r3, #0
 800a868:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a872:	2b20      	cmp	r3, #32
 800a874:	d003      	beq.n	800a87e <USBD_StdItfReq+0x22>
 800a876:	2b40      	cmp	r3, #64	; 0x40
 800a878:	d001      	beq.n	800a87e <USBD_StdItfReq+0x22>
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d12a      	bne.n	800a8d4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a884:	3b01      	subs	r3, #1
 800a886:	2b02      	cmp	r3, #2
 800a888:	d81d      	bhi.n	800a8c6 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	889b      	ldrh	r3, [r3, #4]
 800a88e:	b2db      	uxtb	r3, r3
 800a890:	2b01      	cmp	r3, #1
 800a892:	d813      	bhi.n	800a8bc <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a89a:	689b      	ldr	r3, [r3, #8]
 800a89c:	6839      	ldr	r1, [r7, #0]
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	4798      	blx	r3
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	88db      	ldrh	r3, [r3, #6]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d110      	bne.n	800a8d0 <USBD_StdItfReq+0x74>
 800a8ae:	7bfb      	ldrb	r3, [r7, #15]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d10d      	bne.n	800a8d0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 fd4d 	bl	800b354 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a8ba:	e009      	b.n	800a8d0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800a8bc:	6839      	ldr	r1, [r7, #0]
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 fc80 	bl	800b1c4 <USBD_CtlError>
          break;
 800a8c4:	e004      	b.n	800a8d0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800a8c6:	6839      	ldr	r1, [r7, #0]
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f000 fc7b 	bl	800b1c4 <USBD_CtlError>
          break;
 800a8ce:	e000      	b.n	800a8d2 <USBD_StdItfReq+0x76>
          break;
 800a8d0:	bf00      	nop
      }
      break;
 800a8d2:	e004      	b.n	800a8de <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800a8d4:	6839      	ldr	r1, [r7, #0]
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 fc74 	bl	800b1c4 <USBD_CtlError>
      break;
 800a8dc:	bf00      	nop
  }

  return USBD_OK;
 800a8de:	2300      	movs	r3, #0
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3710      	adds	r7, #16
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	889b      	ldrh	r3, [r3, #4]
 800a8fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	781b      	ldrb	r3, [r3, #0]
 800a900:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a904:	2b20      	cmp	r3, #32
 800a906:	d004      	beq.n	800a912 <USBD_StdEPReq+0x2a>
 800a908:	2b40      	cmp	r3, #64	; 0x40
 800a90a:	d002      	beq.n	800a912 <USBD_StdEPReq+0x2a>
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d008      	beq.n	800a922 <USBD_StdEPReq+0x3a>
 800a910:	e13d      	b.n	800ab8e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a918:	689b      	ldr	r3, [r3, #8]
 800a91a:	6839      	ldr	r1, [r7, #0]
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	4798      	blx	r3
      break;
 800a920:	e13a      	b.n	800ab98 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a92a:	2b20      	cmp	r3, #32
 800a92c:	d10a      	bne.n	800a944 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a934:	689b      	ldr	r3, [r3, #8]
 800a936:	6839      	ldr	r1, [r7, #0]
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	4798      	blx	r3
 800a93c:	4603      	mov	r3, r0
 800a93e:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a940:	7bfb      	ldrb	r3, [r7, #15]
 800a942:	e12a      	b.n	800ab9a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	785b      	ldrb	r3, [r3, #1]
 800a948:	2b01      	cmp	r3, #1
 800a94a:	d03e      	beq.n	800a9ca <USBD_StdEPReq+0xe2>
 800a94c:	2b03      	cmp	r3, #3
 800a94e:	d002      	beq.n	800a956 <USBD_StdEPReq+0x6e>
 800a950:	2b00      	cmp	r3, #0
 800a952:	d070      	beq.n	800aa36 <USBD_StdEPReq+0x14e>
 800a954:	e115      	b.n	800ab82 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a95c:	2b02      	cmp	r3, #2
 800a95e:	d002      	beq.n	800a966 <USBD_StdEPReq+0x7e>
 800a960:	2b03      	cmp	r3, #3
 800a962:	d015      	beq.n	800a990 <USBD_StdEPReq+0xa8>
 800a964:	e02b      	b.n	800a9be <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a966:	7bbb      	ldrb	r3, [r7, #14]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d00c      	beq.n	800a986 <USBD_StdEPReq+0x9e>
 800a96c:	7bbb      	ldrb	r3, [r7, #14]
 800a96e:	2b80      	cmp	r3, #128	; 0x80
 800a970:	d009      	beq.n	800a986 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a972:	7bbb      	ldrb	r3, [r7, #14]
 800a974:	4619      	mov	r1, r3
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f001 f89c 	bl	800bab4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a97c:	2180      	movs	r1, #128	; 0x80
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f001 f898 	bl	800bab4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a984:	e020      	b.n	800a9c8 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800a986:	6839      	ldr	r1, [r7, #0]
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 fc1b 	bl	800b1c4 <USBD_CtlError>
              break;
 800a98e:	e01b      	b.n	800a9c8 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	885b      	ldrh	r3, [r3, #2]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d10e      	bne.n	800a9b6 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800a998:	7bbb      	ldrb	r3, [r7, #14]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d00b      	beq.n	800a9b6 <USBD_StdEPReq+0xce>
 800a99e:	7bbb      	ldrb	r3, [r7, #14]
 800a9a0:	2b80      	cmp	r3, #128	; 0x80
 800a9a2:	d008      	beq.n	800a9b6 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	88db      	ldrh	r3, [r3, #6]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d104      	bne.n	800a9b6 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a9ac:	7bbb      	ldrb	r3, [r7, #14]
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f001 f87f 	bl	800bab4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 fccc 	bl	800b354 <USBD_CtlSendStatus>

              break;
 800a9bc:	e004      	b.n	800a9c8 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800a9be:	6839      	ldr	r1, [r7, #0]
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f000 fbff 	bl	800b1c4 <USBD_CtlError>
              break;
 800a9c6:	bf00      	nop
          }
          break;
 800a9c8:	e0e0      	b.n	800ab8c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9d0:	2b02      	cmp	r3, #2
 800a9d2:	d002      	beq.n	800a9da <USBD_StdEPReq+0xf2>
 800a9d4:	2b03      	cmp	r3, #3
 800a9d6:	d015      	beq.n	800aa04 <USBD_StdEPReq+0x11c>
 800a9d8:	e026      	b.n	800aa28 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9da:	7bbb      	ldrb	r3, [r7, #14]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d00c      	beq.n	800a9fa <USBD_StdEPReq+0x112>
 800a9e0:	7bbb      	ldrb	r3, [r7, #14]
 800a9e2:	2b80      	cmp	r3, #128	; 0x80
 800a9e4:	d009      	beq.n	800a9fa <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a9e6:	7bbb      	ldrb	r3, [r7, #14]
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f001 f862 	bl	800bab4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a9f0:	2180      	movs	r1, #128	; 0x80
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f001 f85e 	bl	800bab4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a9f8:	e01c      	b.n	800aa34 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800a9fa:	6839      	ldr	r1, [r7, #0]
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 fbe1 	bl	800b1c4 <USBD_CtlError>
              break;
 800aa02:	e017      	b.n	800aa34 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	885b      	ldrh	r3, [r3, #2]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d112      	bne.n	800aa32 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aa0c:	7bbb      	ldrb	r3, [r7, #14]
 800aa0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d004      	beq.n	800aa20 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800aa16:	7bbb      	ldrb	r3, [r7, #14]
 800aa18:	4619      	mov	r1, r3
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f001 f869 	bl	800baf2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 fc97 	bl	800b354 <USBD_CtlSendStatus>
              }
              break;
 800aa26:	e004      	b.n	800aa32 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800aa28:	6839      	ldr	r1, [r7, #0]
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f000 fbca 	bl	800b1c4 <USBD_CtlError>
              break;
 800aa30:	e000      	b.n	800aa34 <USBD_StdEPReq+0x14c>
              break;
 800aa32:	bf00      	nop
          }
          break;
 800aa34:	e0aa      	b.n	800ab8c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa3c:	2b02      	cmp	r3, #2
 800aa3e:	d002      	beq.n	800aa46 <USBD_StdEPReq+0x15e>
 800aa40:	2b03      	cmp	r3, #3
 800aa42:	d032      	beq.n	800aaaa <USBD_StdEPReq+0x1c2>
 800aa44:	e097      	b.n	800ab76 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa46:	7bbb      	ldrb	r3, [r7, #14]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d007      	beq.n	800aa5c <USBD_StdEPReq+0x174>
 800aa4c:	7bbb      	ldrb	r3, [r7, #14]
 800aa4e:	2b80      	cmp	r3, #128	; 0x80
 800aa50:	d004      	beq.n	800aa5c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800aa52:	6839      	ldr	r1, [r7, #0]
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f000 fbb5 	bl	800b1c4 <USBD_CtlError>
                break;
 800aa5a:	e091      	b.n	800ab80 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	da0b      	bge.n	800aa7c <USBD_StdEPReq+0x194>
 800aa64:	7bbb      	ldrb	r3, [r7, #14]
 800aa66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa6a:	4613      	mov	r3, r2
 800aa6c:	009b      	lsls	r3, r3, #2
 800aa6e:	4413      	add	r3, r2
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	3310      	adds	r3, #16
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	4413      	add	r3, r2
 800aa78:	3304      	adds	r3, #4
 800aa7a:	e00b      	b.n	800aa94 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa7c:	7bbb      	ldrb	r3, [r7, #14]
 800aa7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa82:	4613      	mov	r3, r2
 800aa84:	009b      	lsls	r3, r3, #2
 800aa86:	4413      	add	r3, r2
 800aa88:	009b      	lsls	r3, r3, #2
 800aa8a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aa8e:	687a      	ldr	r2, [r7, #4]
 800aa90:	4413      	add	r3, r2
 800aa92:	3304      	adds	r3, #4
 800aa94:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	2202      	movs	r2, #2
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 fbf8 	bl	800b298 <USBD_CtlSendData>
              break;
 800aaa8:	e06a      	b.n	800ab80 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aaaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	da11      	bge.n	800aad6 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aab2:	7bbb      	ldrb	r3, [r7, #14]
 800aab4:	f003 020f 	and.w	r2, r3, #15
 800aab8:	6879      	ldr	r1, [r7, #4]
 800aaba:	4613      	mov	r3, r2
 800aabc:	009b      	lsls	r3, r3, #2
 800aabe:	4413      	add	r3, r2
 800aac0:	009b      	lsls	r3, r3, #2
 800aac2:	440b      	add	r3, r1
 800aac4:	3318      	adds	r3, #24
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d117      	bne.n	800aafc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800aacc:	6839      	ldr	r1, [r7, #0]
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f000 fb78 	bl	800b1c4 <USBD_CtlError>
                  break;
 800aad4:	e054      	b.n	800ab80 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aad6:	7bbb      	ldrb	r3, [r7, #14]
 800aad8:	f003 020f 	and.w	r2, r3, #15
 800aadc:	6879      	ldr	r1, [r7, #4]
 800aade:	4613      	mov	r3, r2
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	4413      	add	r3, r2
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	440b      	add	r3, r1
 800aae8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d104      	bne.n	800aafc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800aaf2:	6839      	ldr	r1, [r7, #0]
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 fb65 	bl	800b1c4 <USBD_CtlError>
                  break;
 800aafa:	e041      	b.n	800ab80 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aafc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	da0b      	bge.n	800ab1c <USBD_StdEPReq+0x234>
 800ab04:	7bbb      	ldrb	r3, [r7, #14]
 800ab06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab0a:	4613      	mov	r3, r2
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	4413      	add	r3, r2
 800ab10:	009b      	lsls	r3, r3, #2
 800ab12:	3310      	adds	r3, #16
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	4413      	add	r3, r2
 800ab18:	3304      	adds	r3, #4
 800ab1a:	e00b      	b.n	800ab34 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab1c:	7bbb      	ldrb	r3, [r7, #14]
 800ab1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab22:	4613      	mov	r3, r2
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	4413      	add	r3, r2
 800ab28:	009b      	lsls	r3, r3, #2
 800ab2a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	4413      	add	r3, r2
 800ab32:	3304      	adds	r3, #4
 800ab34:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ab36:	7bbb      	ldrb	r3, [r7, #14]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d002      	beq.n	800ab42 <USBD_StdEPReq+0x25a>
 800ab3c:	7bbb      	ldrb	r3, [r7, #14]
 800ab3e:	2b80      	cmp	r3, #128	; 0x80
 800ab40:	d103      	bne.n	800ab4a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	2200      	movs	r2, #0
 800ab46:	601a      	str	r2, [r3, #0]
 800ab48:	e00e      	b.n	800ab68 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800ab4a:	7bbb      	ldrb	r3, [r7, #14]
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 ffee 	bl	800bb30 <USBD_LL_IsStallEP>
 800ab54:	4603      	mov	r3, r0
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d003      	beq.n	800ab62 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	2201      	movs	r2, #1
 800ab5e:	601a      	str	r2, [r3, #0]
 800ab60:	e002      	b.n	800ab68 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	2200      	movs	r2, #0
 800ab66:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	2202      	movs	r2, #2
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 fb92 	bl	800b298 <USBD_CtlSendData>
              break;
 800ab74:	e004      	b.n	800ab80 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800ab76:	6839      	ldr	r1, [r7, #0]
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 fb23 	bl	800b1c4 <USBD_CtlError>
              break;
 800ab7e:	bf00      	nop
          }
          break;
 800ab80:	e004      	b.n	800ab8c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800ab82:	6839      	ldr	r1, [r7, #0]
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 fb1d 	bl	800b1c4 <USBD_CtlError>
          break;
 800ab8a:	bf00      	nop
      }
      break;
 800ab8c:	e004      	b.n	800ab98 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800ab8e:	6839      	ldr	r1, [r7, #0]
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f000 fb17 	bl	800b1c4 <USBD_CtlError>
      break;
 800ab96:	bf00      	nop
  }

  return ret;
 800ab98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3710      	adds	r7, #16
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
	...

0800aba4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800abae:	2300      	movs	r3, #0
 800abb0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800abb2:	2300      	movs	r3, #0
 800abb4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800abb6:	2300      	movs	r3, #0
 800abb8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	885b      	ldrh	r3, [r3, #2]
 800abbe:	0a1b      	lsrs	r3, r3, #8
 800abc0:	b29b      	uxth	r3, r3
 800abc2:	3b01      	subs	r3, #1
 800abc4:	2b06      	cmp	r3, #6
 800abc6:	f200 8128 	bhi.w	800ae1a <USBD_GetDescriptor+0x276>
 800abca:	a201      	add	r2, pc, #4	; (adr r2, 800abd0 <USBD_GetDescriptor+0x2c>)
 800abcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abd0:	0800abed 	.word	0x0800abed
 800abd4:	0800ac05 	.word	0x0800ac05
 800abd8:	0800ac45 	.word	0x0800ac45
 800abdc:	0800ae1b 	.word	0x0800ae1b
 800abe0:	0800ae1b 	.word	0x0800ae1b
 800abe4:	0800adbb 	.word	0x0800adbb
 800abe8:	0800ade7 	.word	0x0800ade7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	687a      	ldr	r2, [r7, #4]
 800abf6:	7c12      	ldrb	r2, [r2, #16]
 800abf8:	f107 0108 	add.w	r1, r7, #8
 800abfc:	4610      	mov	r0, r2
 800abfe:	4798      	blx	r3
 800ac00:	60f8      	str	r0, [r7, #12]
      break;
 800ac02:	e112      	b.n	800ae2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	7c1b      	ldrb	r3, [r3, #16]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d10d      	bne.n	800ac28 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac14:	f107 0208 	add.w	r2, r7, #8
 800ac18:	4610      	mov	r0, r2
 800ac1a:	4798      	blx	r3
 800ac1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	3301      	adds	r3, #1
 800ac22:	2202      	movs	r2, #2
 800ac24:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ac26:	e100      	b.n	800ae2a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac30:	f107 0208 	add.w	r2, r7, #8
 800ac34:	4610      	mov	r0, r2
 800ac36:	4798      	blx	r3
 800ac38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	2202      	movs	r2, #2
 800ac40:	701a      	strb	r2, [r3, #0]
      break;
 800ac42:	e0f2      	b.n	800ae2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	885b      	ldrh	r3, [r3, #2]
 800ac48:	b2db      	uxtb	r3, r3
 800ac4a:	2b05      	cmp	r3, #5
 800ac4c:	f200 80ac 	bhi.w	800ada8 <USBD_GetDescriptor+0x204>
 800ac50:	a201      	add	r2, pc, #4	; (adr r2, 800ac58 <USBD_GetDescriptor+0xb4>)
 800ac52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac56:	bf00      	nop
 800ac58:	0800ac71 	.word	0x0800ac71
 800ac5c:	0800aca5 	.word	0x0800aca5
 800ac60:	0800acd9 	.word	0x0800acd9
 800ac64:	0800ad0d 	.word	0x0800ad0d
 800ac68:	0800ad41 	.word	0x0800ad41
 800ac6c:	0800ad75 	.word	0x0800ad75
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d00b      	beq.n	800ac94 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	7c12      	ldrb	r2, [r2, #16]
 800ac88:	f107 0108 	add.w	r1, r7, #8
 800ac8c:	4610      	mov	r0, r2
 800ac8e:	4798      	blx	r3
 800ac90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac92:	e091      	b.n	800adb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac94:	6839      	ldr	r1, [r7, #0]
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 fa94 	bl	800b1c4 <USBD_CtlError>
            err++;
 800ac9c:	7afb      	ldrb	r3, [r7, #11]
 800ac9e:	3301      	adds	r3, #1
 800aca0:	72fb      	strb	r3, [r7, #11]
          break;
 800aca2:	e089      	b.n	800adb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800acaa:	689b      	ldr	r3, [r3, #8]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d00b      	beq.n	800acc8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800acb6:	689b      	ldr	r3, [r3, #8]
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	7c12      	ldrb	r2, [r2, #16]
 800acbc:	f107 0108 	add.w	r1, r7, #8
 800acc0:	4610      	mov	r0, r2
 800acc2:	4798      	blx	r3
 800acc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acc6:	e077      	b.n	800adb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800acc8:	6839      	ldr	r1, [r7, #0]
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 fa7a 	bl	800b1c4 <USBD_CtlError>
            err++;
 800acd0:	7afb      	ldrb	r3, [r7, #11]
 800acd2:	3301      	adds	r3, #1
 800acd4:	72fb      	strb	r3, [r7, #11]
          break;
 800acd6:	e06f      	b.n	800adb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800acde:	68db      	ldr	r3, [r3, #12]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d00b      	beq.n	800acfc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800acea:	68db      	ldr	r3, [r3, #12]
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	7c12      	ldrb	r2, [r2, #16]
 800acf0:	f107 0108 	add.w	r1, r7, #8
 800acf4:	4610      	mov	r0, r2
 800acf6:	4798      	blx	r3
 800acf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acfa:	e05d      	b.n	800adb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800acfc:	6839      	ldr	r1, [r7, #0]
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 fa60 	bl	800b1c4 <USBD_CtlError>
            err++;
 800ad04:	7afb      	ldrb	r3, [r7, #11]
 800ad06:	3301      	adds	r3, #1
 800ad08:	72fb      	strb	r3, [r7, #11]
          break;
 800ad0a:	e055      	b.n	800adb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad12:	691b      	ldr	r3, [r3, #16]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d00b      	beq.n	800ad30 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad1e:	691b      	ldr	r3, [r3, #16]
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	7c12      	ldrb	r2, [r2, #16]
 800ad24:	f107 0108 	add.w	r1, r7, #8
 800ad28:	4610      	mov	r0, r2
 800ad2a:	4798      	blx	r3
 800ad2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad2e:	e043      	b.n	800adb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad30:	6839      	ldr	r1, [r7, #0]
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f000 fa46 	bl	800b1c4 <USBD_CtlError>
            err++;
 800ad38:	7afb      	ldrb	r3, [r7, #11]
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	72fb      	strb	r3, [r7, #11]
          break;
 800ad3e:	e03b      	b.n	800adb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad46:	695b      	ldr	r3, [r3, #20]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d00b      	beq.n	800ad64 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad52:	695b      	ldr	r3, [r3, #20]
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	7c12      	ldrb	r2, [r2, #16]
 800ad58:	f107 0108 	add.w	r1, r7, #8
 800ad5c:	4610      	mov	r0, r2
 800ad5e:	4798      	blx	r3
 800ad60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad62:	e029      	b.n	800adb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad64:	6839      	ldr	r1, [r7, #0]
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f000 fa2c 	bl	800b1c4 <USBD_CtlError>
            err++;
 800ad6c:	7afb      	ldrb	r3, [r7, #11]
 800ad6e:	3301      	adds	r3, #1
 800ad70:	72fb      	strb	r3, [r7, #11]
          break;
 800ad72:	e021      	b.n	800adb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad7a:	699b      	ldr	r3, [r3, #24]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d00b      	beq.n	800ad98 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad86:	699b      	ldr	r3, [r3, #24]
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	7c12      	ldrb	r2, [r2, #16]
 800ad8c:	f107 0108 	add.w	r1, r7, #8
 800ad90:	4610      	mov	r0, r2
 800ad92:	4798      	blx	r3
 800ad94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad96:	e00f      	b.n	800adb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad98:	6839      	ldr	r1, [r7, #0]
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f000 fa12 	bl	800b1c4 <USBD_CtlError>
            err++;
 800ada0:	7afb      	ldrb	r3, [r7, #11]
 800ada2:	3301      	adds	r3, #1
 800ada4:	72fb      	strb	r3, [r7, #11]
          break;
 800ada6:	e007      	b.n	800adb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800ada8:	6839      	ldr	r1, [r7, #0]
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 fa0a 	bl	800b1c4 <USBD_CtlError>
          err++;
 800adb0:	7afb      	ldrb	r3, [r7, #11]
 800adb2:	3301      	adds	r3, #1
 800adb4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800adb6:	e038      	b.n	800ae2a <USBD_GetDescriptor+0x286>
 800adb8:	e037      	b.n	800ae2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	7c1b      	ldrb	r3, [r3, #16]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d109      	bne.n	800add6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adca:	f107 0208 	add.w	r2, r7, #8
 800adce:	4610      	mov	r0, r2
 800add0:	4798      	blx	r3
 800add2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800add4:	e029      	b.n	800ae2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800add6:	6839      	ldr	r1, [r7, #0]
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f000 f9f3 	bl	800b1c4 <USBD_CtlError>
        err++;
 800adde:	7afb      	ldrb	r3, [r7, #11]
 800ade0:	3301      	adds	r3, #1
 800ade2:	72fb      	strb	r3, [r7, #11]
      break;
 800ade4:	e021      	b.n	800ae2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	7c1b      	ldrb	r3, [r3, #16]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d10d      	bne.n	800ae0a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adf6:	f107 0208 	add.w	r2, r7, #8
 800adfa:	4610      	mov	r0, r2
 800adfc:	4798      	blx	r3
 800adfe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	3301      	adds	r3, #1
 800ae04:	2207      	movs	r2, #7
 800ae06:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae08:	e00f      	b.n	800ae2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ae0a:	6839      	ldr	r1, [r7, #0]
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 f9d9 	bl	800b1c4 <USBD_CtlError>
        err++;
 800ae12:	7afb      	ldrb	r3, [r7, #11]
 800ae14:	3301      	adds	r3, #1
 800ae16:	72fb      	strb	r3, [r7, #11]
      break;
 800ae18:	e007      	b.n	800ae2a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ae1a:	6839      	ldr	r1, [r7, #0]
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f000 f9d1 	bl	800b1c4 <USBD_CtlError>
      err++;
 800ae22:	7afb      	ldrb	r3, [r7, #11]
 800ae24:	3301      	adds	r3, #1
 800ae26:	72fb      	strb	r3, [r7, #11]
      break;
 800ae28:	bf00      	nop
  }

  if (err != 0U)
 800ae2a:	7afb      	ldrb	r3, [r7, #11]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d11c      	bne.n	800ae6a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800ae30:	893b      	ldrh	r3, [r7, #8]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d011      	beq.n	800ae5a <USBD_GetDescriptor+0x2b6>
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	88db      	ldrh	r3, [r3, #6]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d00d      	beq.n	800ae5a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	88da      	ldrh	r2, [r3, #6]
 800ae42:	893b      	ldrh	r3, [r7, #8]
 800ae44:	4293      	cmp	r3, r2
 800ae46:	bf28      	it	cs
 800ae48:	4613      	movcs	r3, r2
 800ae4a:	b29b      	uxth	r3, r3
 800ae4c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ae4e:	893b      	ldrh	r3, [r7, #8]
 800ae50:	461a      	mov	r2, r3
 800ae52:	68f9      	ldr	r1, [r7, #12]
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 fa1f 	bl	800b298 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	88db      	ldrh	r3, [r3, #6]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d104      	bne.n	800ae6c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f000 fa76 	bl	800b354 <USBD_CtlSendStatus>
 800ae68:	e000      	b.n	800ae6c <USBD_GetDescriptor+0x2c8>
    return;
 800ae6a:	bf00      	nop
    }
  }
}
 800ae6c:	3710      	adds	r7, #16
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}
 800ae72:	bf00      	nop

0800ae74 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b084      	sub	sp, #16
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	889b      	ldrh	r3, [r3, #4]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d130      	bne.n	800aee8 <USBD_SetAddress+0x74>
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	88db      	ldrh	r3, [r3, #6]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d12c      	bne.n	800aee8 <USBD_SetAddress+0x74>
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	885b      	ldrh	r3, [r3, #2]
 800ae92:	2b7f      	cmp	r3, #127	; 0x7f
 800ae94:	d828      	bhi.n	800aee8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	885b      	ldrh	r3, [r3, #2]
 800ae9a:	b2db      	uxtb	r3, r3
 800ae9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aea0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aea8:	2b03      	cmp	r3, #3
 800aeaa:	d104      	bne.n	800aeb6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800aeac:	6839      	ldr	r1, [r7, #0]
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 f988 	bl	800b1c4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aeb4:	e01c      	b.n	800aef0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	7bfa      	ldrb	r2, [r7, #15]
 800aeba:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aebe:	7bfb      	ldrb	r3, [r7, #15]
 800aec0:	4619      	mov	r1, r3
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 fe59 	bl	800bb7a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 fa43 	bl	800b354 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aece:	7bfb      	ldrb	r3, [r7, #15]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d004      	beq.n	800aede <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2202      	movs	r2, #2
 800aed8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aedc:	e008      	b.n	800aef0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2201      	movs	r2, #1
 800aee2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aee6:	e003      	b.n	800aef0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800aee8:	6839      	ldr	r1, [r7, #0]
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 f96a 	bl	800b1c4 <USBD_CtlError>
  }
}
 800aef0:	bf00      	nop
 800aef2:	3710      	adds	r7, #16
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	885b      	ldrh	r3, [r3, #2]
 800af06:	b2da      	uxtb	r2, r3
 800af08:	4b41      	ldr	r3, [pc, #260]	; (800b010 <USBD_SetConfig+0x118>)
 800af0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800af0c:	4b40      	ldr	r3, [pc, #256]	; (800b010 <USBD_SetConfig+0x118>)
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	2b01      	cmp	r3, #1
 800af12:	d904      	bls.n	800af1e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800af14:	6839      	ldr	r1, [r7, #0]
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 f954 	bl	800b1c4 <USBD_CtlError>
 800af1c:	e075      	b.n	800b00a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af24:	2b02      	cmp	r3, #2
 800af26:	d002      	beq.n	800af2e <USBD_SetConfig+0x36>
 800af28:	2b03      	cmp	r3, #3
 800af2a:	d023      	beq.n	800af74 <USBD_SetConfig+0x7c>
 800af2c:	e062      	b.n	800aff4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800af2e:	4b38      	ldr	r3, [pc, #224]	; (800b010 <USBD_SetConfig+0x118>)
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d01a      	beq.n	800af6c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800af36:	4b36      	ldr	r3, [pc, #216]	; (800b010 <USBD_SetConfig+0x118>)
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	461a      	mov	r2, r3
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2203      	movs	r2, #3
 800af44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800af48:	4b31      	ldr	r3, [pc, #196]	; (800b010 <USBD_SetConfig+0x118>)
 800af4a:	781b      	ldrb	r3, [r3, #0]
 800af4c:	4619      	mov	r1, r3
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f7ff f9f3 	bl	800a33a <USBD_SetClassConfig>
 800af54:	4603      	mov	r3, r0
 800af56:	2b02      	cmp	r3, #2
 800af58:	d104      	bne.n	800af64 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800af5a:	6839      	ldr	r1, [r7, #0]
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f000 f931 	bl	800b1c4 <USBD_CtlError>
            return;
 800af62:	e052      	b.n	800b00a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 f9f5 	bl	800b354 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800af6a:	e04e      	b.n	800b00a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f000 f9f1 	bl	800b354 <USBD_CtlSendStatus>
        break;
 800af72:	e04a      	b.n	800b00a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800af74:	4b26      	ldr	r3, [pc, #152]	; (800b010 <USBD_SetConfig+0x118>)
 800af76:	781b      	ldrb	r3, [r3, #0]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d112      	bne.n	800afa2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2202      	movs	r2, #2
 800af80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800af84:	4b22      	ldr	r3, [pc, #136]	; (800b010 <USBD_SetConfig+0x118>)
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	461a      	mov	r2, r3
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800af8e:	4b20      	ldr	r3, [pc, #128]	; (800b010 <USBD_SetConfig+0x118>)
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	4619      	mov	r1, r3
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f7ff f9ef 	bl	800a378 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 f9da 	bl	800b354 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800afa0:	e033      	b.n	800b00a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800afa2:	4b1b      	ldr	r3, [pc, #108]	; (800b010 <USBD_SetConfig+0x118>)
 800afa4:	781b      	ldrb	r3, [r3, #0]
 800afa6:	461a      	mov	r2, r3
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	429a      	cmp	r2, r3
 800afae:	d01d      	beq.n	800afec <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	4619      	mov	r1, r3
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f7ff f9dd 	bl	800a378 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800afbe:	4b14      	ldr	r3, [pc, #80]	; (800b010 <USBD_SetConfig+0x118>)
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	461a      	mov	r2, r3
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800afc8:	4b11      	ldr	r3, [pc, #68]	; (800b010 <USBD_SetConfig+0x118>)
 800afca:	781b      	ldrb	r3, [r3, #0]
 800afcc:	4619      	mov	r1, r3
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f7ff f9b3 	bl	800a33a <USBD_SetClassConfig>
 800afd4:	4603      	mov	r3, r0
 800afd6:	2b02      	cmp	r3, #2
 800afd8:	d104      	bne.n	800afe4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800afda:	6839      	ldr	r1, [r7, #0]
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f000 f8f1 	bl	800b1c4 <USBD_CtlError>
            return;
 800afe2:	e012      	b.n	800b00a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 f9b5 	bl	800b354 <USBD_CtlSendStatus>
        break;
 800afea:	e00e      	b.n	800b00a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f000 f9b1 	bl	800b354 <USBD_CtlSendStatus>
        break;
 800aff2:	e00a      	b.n	800b00a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800aff4:	6839      	ldr	r1, [r7, #0]
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f000 f8e4 	bl	800b1c4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800affc:	4b04      	ldr	r3, [pc, #16]	; (800b010 <USBD_SetConfig+0x118>)
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	4619      	mov	r1, r3
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f7ff f9b8 	bl	800a378 <USBD_ClrClassConfig>
        break;
 800b008:	bf00      	nop
    }
  }
}
 800b00a:	3708      	adds	r7, #8
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}
 800b010:	200005ac 	.word	0x200005ac

0800b014 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b082      	sub	sp, #8
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	88db      	ldrh	r3, [r3, #6]
 800b022:	2b01      	cmp	r3, #1
 800b024:	d004      	beq.n	800b030 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b026:	6839      	ldr	r1, [r7, #0]
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f000 f8cb 	bl	800b1c4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b02e:	e021      	b.n	800b074 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b036:	2b01      	cmp	r3, #1
 800b038:	db17      	blt.n	800b06a <USBD_GetConfig+0x56>
 800b03a:	2b02      	cmp	r3, #2
 800b03c:	dd02      	ble.n	800b044 <USBD_GetConfig+0x30>
 800b03e:	2b03      	cmp	r3, #3
 800b040:	d00b      	beq.n	800b05a <USBD_GetConfig+0x46>
 800b042:	e012      	b.n	800b06a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2200      	movs	r2, #0
 800b048:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	3308      	adds	r3, #8
 800b04e:	2201      	movs	r2, #1
 800b050:	4619      	mov	r1, r3
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f000 f920 	bl	800b298 <USBD_CtlSendData>
        break;
 800b058:	e00c      	b.n	800b074 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	3304      	adds	r3, #4
 800b05e:	2201      	movs	r2, #1
 800b060:	4619      	mov	r1, r3
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 f918 	bl	800b298 <USBD_CtlSendData>
        break;
 800b068:	e004      	b.n	800b074 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800b06a:	6839      	ldr	r1, [r7, #0]
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f000 f8a9 	bl	800b1c4 <USBD_CtlError>
        break;
 800b072:	bf00      	nop
}
 800b074:	bf00      	nop
 800b076:	3708      	adds	r7, #8
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b082      	sub	sp, #8
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b08c:	3b01      	subs	r3, #1
 800b08e:	2b02      	cmp	r3, #2
 800b090:	d81e      	bhi.n	800b0d0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	88db      	ldrh	r3, [r3, #6]
 800b096:	2b02      	cmp	r3, #2
 800b098:	d004      	beq.n	800b0a4 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b09a:	6839      	ldr	r1, [r7, #0]
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f000 f891 	bl	800b1c4 <USBD_CtlError>
        break;
 800b0a2:	e01a      	b.n	800b0da <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d005      	beq.n	800b0c0 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	68db      	ldr	r3, [r3, #12]
 800b0b8:	f043 0202 	orr.w	r2, r3, #2
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	330c      	adds	r3, #12
 800b0c4:	2202      	movs	r2, #2
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f000 f8e5 	bl	800b298 <USBD_CtlSendData>
      break;
 800b0ce:	e004      	b.n	800b0da <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b0d0:	6839      	ldr	r1, [r7, #0]
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 f876 	bl	800b1c4 <USBD_CtlError>
      break;
 800b0d8:	bf00      	nop
  }
}
 800b0da:	bf00      	nop
 800b0dc:	3708      	adds	r7, #8
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}

0800b0e2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b0e2:	b580      	push	{r7, lr}
 800b0e4:	b082      	sub	sp, #8
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	6078      	str	r0, [r7, #4]
 800b0ea:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	885b      	ldrh	r3, [r3, #2]
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d106      	bne.n	800b102 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f000 f929 	bl	800b354 <USBD_CtlSendStatus>
  }
}
 800b102:	bf00      	nop
 800b104:	3708      	adds	r7, #8
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}

0800b10a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b10a:	b580      	push	{r7, lr}
 800b10c:	b082      	sub	sp, #8
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
 800b112:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b11a:	3b01      	subs	r3, #1
 800b11c:	2b02      	cmp	r3, #2
 800b11e:	d80b      	bhi.n	800b138 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	885b      	ldrh	r3, [r3, #2]
 800b124:	2b01      	cmp	r3, #1
 800b126:	d10c      	bne.n	800b142 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2200      	movs	r2, #0
 800b12c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f000 f90f 	bl	800b354 <USBD_CtlSendStatus>
      }
      break;
 800b136:	e004      	b.n	800b142 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b138:	6839      	ldr	r1, [r7, #0]
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f000 f842 	bl	800b1c4 <USBD_CtlError>
      break;
 800b140:	e000      	b.n	800b144 <USBD_ClrFeature+0x3a>
      break;
 800b142:	bf00      	nop
  }
}
 800b144:	bf00      	nop
 800b146:	3708      	adds	r7, #8
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b083      	sub	sp, #12
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	781a      	ldrb	r2, [r3, #0]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	785a      	ldrb	r2, [r3, #1]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	3302      	adds	r3, #2
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	b29a      	uxth	r2, r3
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	3303      	adds	r3, #3
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	b29b      	uxth	r3, r3
 800b176:	021b      	lsls	r3, r3, #8
 800b178:	b29b      	uxth	r3, r3
 800b17a:	4413      	add	r3, r2
 800b17c:	b29a      	uxth	r2, r3
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	3304      	adds	r3, #4
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	b29a      	uxth	r2, r3
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	3305      	adds	r3, #5
 800b18e:	781b      	ldrb	r3, [r3, #0]
 800b190:	b29b      	uxth	r3, r3
 800b192:	021b      	lsls	r3, r3, #8
 800b194:	b29b      	uxth	r3, r3
 800b196:	4413      	add	r3, r2
 800b198:	b29a      	uxth	r2, r3
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	3306      	adds	r3, #6
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	b29a      	uxth	r2, r3
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	3307      	adds	r3, #7
 800b1aa:	781b      	ldrb	r3, [r3, #0]
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	021b      	lsls	r3, r3, #8
 800b1b0:	b29b      	uxth	r3, r3
 800b1b2:	4413      	add	r3, r2
 800b1b4:	b29a      	uxth	r2, r3
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	80da      	strh	r2, [r3, #6]

}
 800b1ba:	bf00      	nop
 800b1bc:	370c      	adds	r7, #12
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bc80      	pop	{r7}
 800b1c2:	4770      	bx	lr

0800b1c4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b082      	sub	sp, #8
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b1ce:	2180      	movs	r1, #128	; 0x80
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 fc6f 	bl	800bab4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b1d6:	2100      	movs	r1, #0
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 fc6b 	bl	800bab4 <USBD_LL_StallEP>
}
 800b1de:	bf00      	nop
 800b1e0:	3708      	adds	r7, #8
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}

0800b1e6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b1e6:	b580      	push	{r7, lr}
 800b1e8:	b086      	sub	sp, #24
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	60f8      	str	r0, [r7, #12]
 800b1ee:	60b9      	str	r1, [r7, #8]
 800b1f0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d032      	beq.n	800b262 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b1fc:	68f8      	ldr	r0, [r7, #12]
 800b1fe:	f000 f834 	bl	800b26a <USBD_GetLen>
 800b202:	4603      	mov	r3, r0
 800b204:	3301      	adds	r3, #1
 800b206:	b29b      	uxth	r3, r3
 800b208:	005b      	lsls	r3, r3, #1
 800b20a:	b29a      	uxth	r2, r3
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b210:	7dfb      	ldrb	r3, [r7, #23]
 800b212:	1c5a      	adds	r2, r3, #1
 800b214:	75fa      	strb	r2, [r7, #23]
 800b216:	461a      	mov	r2, r3
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	4413      	add	r3, r2
 800b21c:	687a      	ldr	r2, [r7, #4]
 800b21e:	7812      	ldrb	r2, [r2, #0]
 800b220:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b222:	7dfb      	ldrb	r3, [r7, #23]
 800b224:	1c5a      	adds	r2, r3, #1
 800b226:	75fa      	strb	r2, [r7, #23]
 800b228:	461a      	mov	r2, r3
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	4413      	add	r3, r2
 800b22e:	2203      	movs	r2, #3
 800b230:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b232:	e012      	b.n	800b25a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	1c5a      	adds	r2, r3, #1
 800b238:	60fa      	str	r2, [r7, #12]
 800b23a:	7dfa      	ldrb	r2, [r7, #23]
 800b23c:	1c51      	adds	r1, r2, #1
 800b23e:	75f9      	strb	r1, [r7, #23]
 800b240:	4611      	mov	r1, r2
 800b242:	68ba      	ldr	r2, [r7, #8]
 800b244:	440a      	add	r2, r1
 800b246:	781b      	ldrb	r3, [r3, #0]
 800b248:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b24a:	7dfb      	ldrb	r3, [r7, #23]
 800b24c:	1c5a      	adds	r2, r3, #1
 800b24e:	75fa      	strb	r2, [r7, #23]
 800b250:	461a      	mov	r2, r3
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	4413      	add	r3, r2
 800b256:	2200      	movs	r2, #0
 800b258:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	781b      	ldrb	r3, [r3, #0]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d1e8      	bne.n	800b234 <USBD_GetString+0x4e>
    }
  }
}
 800b262:	bf00      	nop
 800b264:	3718      	adds	r7, #24
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}

0800b26a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b26a:	b480      	push	{r7}
 800b26c:	b085      	sub	sp, #20
 800b26e:	af00      	add	r7, sp, #0
 800b270:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b272:	2300      	movs	r3, #0
 800b274:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b276:	e005      	b.n	800b284 <USBD_GetLen+0x1a>
  {
    len++;
 800b278:	7bfb      	ldrb	r3, [r7, #15]
 800b27a:	3301      	adds	r3, #1
 800b27c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	3301      	adds	r3, #1
 800b282:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d1f5      	bne.n	800b278 <USBD_GetLen+0xe>
  }

  return len;
 800b28c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3714      	adds	r7, #20
 800b292:	46bd      	mov	sp, r7
 800b294:	bc80      	pop	{r7}
 800b296:	4770      	bx	lr

0800b298 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	60f8      	str	r0, [r7, #12]
 800b2a0:	60b9      	str	r1, [r7, #8]
 800b2a2:	4613      	mov	r3, r2
 800b2a4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2202      	movs	r2, #2
 800b2aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b2ae:	88fa      	ldrh	r2, [r7, #6]
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b2b4:	88fa      	ldrh	r2, [r7, #6]
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b2ba:	88fb      	ldrh	r3, [r7, #6]
 800b2bc:	68ba      	ldr	r2, [r7, #8]
 800b2be:	2100      	movs	r1, #0
 800b2c0:	68f8      	ldr	r0, [r7, #12]
 800b2c2:	f000 fc79 	bl	800bbb8 <USBD_LL_Transmit>

  return USBD_OK;
 800b2c6:	2300      	movs	r3, #0
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3710      	adds	r7, #16
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}

0800b2d0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b084      	sub	sp, #16
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	60f8      	str	r0, [r7, #12]
 800b2d8:	60b9      	str	r1, [r7, #8]
 800b2da:	4613      	mov	r3, r2
 800b2dc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b2de:	88fb      	ldrh	r3, [r7, #6]
 800b2e0:	68ba      	ldr	r2, [r7, #8]
 800b2e2:	2100      	movs	r1, #0
 800b2e4:	68f8      	ldr	r0, [r7, #12]
 800b2e6:	f000 fc67 	bl	800bbb8 <USBD_LL_Transmit>

  return USBD_OK;
 800b2ea:	2300      	movs	r3, #0
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3710      	adds	r7, #16
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}

0800b2f4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b084      	sub	sp, #16
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	60f8      	str	r0, [r7, #12]
 800b2fc:	60b9      	str	r1, [r7, #8]
 800b2fe:	4613      	mov	r3, r2
 800b300:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2203      	movs	r2, #3
 800b306:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b30a:	88fa      	ldrh	r2, [r7, #6]
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b312:	88fa      	ldrh	r2, [r7, #6]
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b31a:	88fb      	ldrh	r3, [r7, #6]
 800b31c:	68ba      	ldr	r2, [r7, #8]
 800b31e:	2100      	movs	r1, #0
 800b320:	68f8      	ldr	r0, [r7, #12]
 800b322:	f000 fc6c 	bl	800bbfe <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b326:	2300      	movs	r3, #0
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3710      	adds	r7, #16
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
 800b336:	60f8      	str	r0, [r7, #12]
 800b338:	60b9      	str	r1, [r7, #8]
 800b33a:	4613      	mov	r3, r2
 800b33c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b33e:	88fb      	ldrh	r3, [r7, #6]
 800b340:	68ba      	ldr	r2, [r7, #8]
 800b342:	2100      	movs	r1, #0
 800b344:	68f8      	ldr	r0, [r7, #12]
 800b346:	f000 fc5a 	bl	800bbfe <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b34a:	2300      	movs	r3, #0
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3710      	adds	r7, #16
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2204      	movs	r2, #4
 800b360:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b364:	2300      	movs	r3, #0
 800b366:	2200      	movs	r2, #0
 800b368:	2100      	movs	r1, #0
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f000 fc24 	bl	800bbb8 <USBD_LL_Transmit>

  return USBD_OK;
 800b370:	2300      	movs	r3, #0
}
 800b372:	4618      	mov	r0, r3
 800b374:	3708      	adds	r7, #8
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}

0800b37a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b082      	sub	sp, #8
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2205      	movs	r2, #5
 800b386:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b38a:	2300      	movs	r3, #0
 800b38c:	2200      	movs	r2, #0
 800b38e:	2100      	movs	r1, #0
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f000 fc34 	bl	800bbfe <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b396:	2300      	movs	r3, #0
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3708      	adds	r7, #8
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	4912      	ldr	r1, [pc, #72]	; (800b3f0 <MX_USB_DEVICE_Init+0x50>)
 800b3a8:	4812      	ldr	r0, [pc, #72]	; (800b3f4 <MX_USB_DEVICE_Init+0x54>)
 800b3aa:	f7fe ff6c 	bl	800a286 <USBD_Init>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d001      	beq.n	800b3b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b3b4:	f7f7 fdbe 	bl	8002f34 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b3b8:	490f      	ldr	r1, [pc, #60]	; (800b3f8 <MX_USB_DEVICE_Init+0x58>)
 800b3ba:	480e      	ldr	r0, [pc, #56]	; (800b3f4 <MX_USB_DEVICE_Init+0x54>)
 800b3bc:	f7fe ff8e 	bl	800a2dc <USBD_RegisterClass>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d001      	beq.n	800b3ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b3c6:	f7f7 fdb5 	bl	8002f34 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b3ca:	490c      	ldr	r1, [pc, #48]	; (800b3fc <MX_USB_DEVICE_Init+0x5c>)
 800b3cc:	4809      	ldr	r0, [pc, #36]	; (800b3f4 <MX_USB_DEVICE_Init+0x54>)
 800b3ce:	f7fe febf 	bl	800a150 <USBD_CDC_RegisterInterface>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d001      	beq.n	800b3dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b3d8:	f7f7 fdac 	bl	8002f34 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b3dc:	4805      	ldr	r0, [pc, #20]	; (800b3f4 <MX_USB_DEVICE_Init+0x54>)
 800b3de:	f7fe ff96 	bl	800a30e <USBD_Start>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d001      	beq.n	800b3ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b3e8:	f7f7 fda4 	bl	8002f34 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b3ec:	bf00      	nop
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	20000154 	.word	0x20000154
 800b3f4:	20001180 	.word	0x20001180
 800b3f8:	20000040 	.word	0x20000040
 800b3fc:	20000144 	.word	0x20000144

0800b400 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b404:	2200      	movs	r2, #0
 800b406:	4905      	ldr	r1, [pc, #20]	; (800b41c <CDC_Init_FS+0x1c>)
 800b408:	4805      	ldr	r0, [pc, #20]	; (800b420 <CDC_Init_FS+0x20>)
 800b40a:	f7fe feb7 	bl	800a17c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b40e:	4905      	ldr	r1, [pc, #20]	; (800b424 <CDC_Init_FS+0x24>)
 800b410:	4803      	ldr	r0, [pc, #12]	; (800b420 <CDC_Init_FS+0x20>)
 800b412:	f7fe fecc 	bl	800a1ae <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b416:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b418:	4618      	mov	r0, r3
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	2000182c 	.word	0x2000182c
 800b420:	20001180 	.word	0x20001180
 800b424:	20001444 	.word	0x20001444

0800b428 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b428:	b480      	push	{r7}
 800b42a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b42c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b42e:	4618      	mov	r0, r3
 800b430:	46bd      	mov	sp, r7
 800b432:	bc80      	pop	{r7}
 800b434:	4770      	bx	lr
	...

0800b438 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b082      	sub	sp, #8
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	4603      	mov	r3, r0
 800b440:	6039      	str	r1, [r7, #0]
 800b442:	71fb      	strb	r3, [r7, #7]
 800b444:	4613      	mov	r3, r2
 800b446:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b448:	79fb      	ldrb	r3, [r7, #7]
 800b44a:	2b23      	cmp	r3, #35	; 0x23
 800b44c:	d866      	bhi.n	800b51c <CDC_Control_FS+0xe4>
 800b44e:	a201      	add	r2, pc, #4	; (adr r2, 800b454 <CDC_Control_FS+0x1c>)
 800b450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b454:	0800b51d 	.word	0x0800b51d
 800b458:	0800b51d 	.word	0x0800b51d
 800b45c:	0800b51d 	.word	0x0800b51d
 800b460:	0800b51d 	.word	0x0800b51d
 800b464:	0800b51d 	.word	0x0800b51d
 800b468:	0800b51d 	.word	0x0800b51d
 800b46c:	0800b51d 	.word	0x0800b51d
 800b470:	0800b51d 	.word	0x0800b51d
 800b474:	0800b51d 	.word	0x0800b51d
 800b478:	0800b51d 	.word	0x0800b51d
 800b47c:	0800b51d 	.word	0x0800b51d
 800b480:	0800b51d 	.word	0x0800b51d
 800b484:	0800b51d 	.word	0x0800b51d
 800b488:	0800b51d 	.word	0x0800b51d
 800b48c:	0800b51d 	.word	0x0800b51d
 800b490:	0800b51d 	.word	0x0800b51d
 800b494:	0800b51d 	.word	0x0800b51d
 800b498:	0800b51d 	.word	0x0800b51d
 800b49c:	0800b51d 	.word	0x0800b51d
 800b4a0:	0800b51d 	.word	0x0800b51d
 800b4a4:	0800b51d 	.word	0x0800b51d
 800b4a8:	0800b51d 	.word	0x0800b51d
 800b4ac:	0800b51d 	.word	0x0800b51d
 800b4b0:	0800b51d 	.word	0x0800b51d
 800b4b4:	0800b51d 	.word	0x0800b51d
 800b4b8:	0800b51d 	.word	0x0800b51d
 800b4bc:	0800b51d 	.word	0x0800b51d
 800b4c0:	0800b51d 	.word	0x0800b51d
 800b4c4:	0800b51d 	.word	0x0800b51d
 800b4c8:	0800b51d 	.word	0x0800b51d
 800b4cc:	0800b51d 	.word	0x0800b51d
 800b4d0:	0800b51d 	.word	0x0800b51d
 800b4d4:	0800b4e5 	.word	0x0800b4e5
 800b4d8:	0800b507 	.word	0x0800b507
 800b4dc:	0800b51d 	.word	0x0800b51d
 800b4e0:	0800b51d 	.word	0x0800b51d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(&linecode,pbuf,length>sizeof(linecode)?(sizeof(linecode)):(length));
 800b4e4:	88bb      	ldrh	r3, [r7, #4]
 800b4e6:	2b0c      	cmp	r3, #12
 800b4e8:	bf28      	it	cs
 800b4ea:	230c      	movcs	r3, #12
 800b4ec:	b29b      	uxth	r3, r3
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	6839      	ldr	r1, [r7, #0]
 800b4f2:	480d      	ldr	r0, [pc, #52]	; (800b528 <CDC_Control_FS+0xf0>)
 800b4f4:	f000 fc2a 	bl	800bd4c <memcpy>
    	linecode.IsUpdate++;
 800b4f8:	4b0b      	ldr	r3, [pc, #44]	; (800b528 <CDC_Control_FS+0xf0>)
 800b4fa:	7a1b      	ldrb	r3, [r3, #8]
 800b4fc:	3301      	adds	r3, #1
 800b4fe:	b2da      	uxtb	r2, r3
 800b500:	4b09      	ldr	r3, [pc, #36]	; (800b528 <CDC_Control_FS+0xf0>)
 800b502:	721a      	strb	r2, [r3, #8]
    break;
 800b504:	e00b      	b.n	800b51e <CDC_Control_FS+0xe6>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf,&linecode,length>sizeof(linecode)?(sizeof(linecode)):(length));
 800b506:	88bb      	ldrh	r3, [r7, #4]
 800b508:	2b0c      	cmp	r3, #12
 800b50a:	bf28      	it	cs
 800b50c:	230c      	movcs	r3, #12
 800b50e:	b29b      	uxth	r3, r3
 800b510:	461a      	mov	r2, r3
 800b512:	4905      	ldr	r1, [pc, #20]	; (800b528 <CDC_Control_FS+0xf0>)
 800b514:	6838      	ldr	r0, [r7, #0]
 800b516:	f000 fc19 	bl	800bd4c <memcpy>
    break;
 800b51a:	e000      	b.n	800b51e <CDC_Control_FS+0xe6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b51c:	bf00      	nop
  }

  return (USBD_OK);
 800b51e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b520:	4618      	mov	r0, r3
 800b522:	3708      	adds	r7, #8
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}
 800b528:	20000004 	.word	0x20000004

0800b52c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  cdc_receive_call(Buf, *Len);
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4619      	mov	r1, r3
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f7f6 fde3 	bl	8002108 <cdc_receive_call>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b542:	6879      	ldr	r1, [r7, #4]
 800b544:	4805      	ldr	r0, [pc, #20]	; (800b55c <CDC_Receive_FS+0x30>)
 800b546:	f7fe fe32 	bl	800a1ae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b54a:	4804      	ldr	r0, [pc, #16]	; (800b55c <CDC_Receive_FS+0x30>)
 800b54c:	f7fe fe71 	bl	800a232 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b550:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b552:	4618      	mov	r0, r3
 800b554:	3708      	adds	r7, #8
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}
 800b55a:	bf00      	nop
 800b55c:	20001180 	.word	0x20001180

0800b560 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b084      	sub	sp, #16
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	460b      	mov	r3, r1
 800b56a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b56c:	2300      	movs	r3, #0
 800b56e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b570:	4b0d      	ldr	r3, [pc, #52]	; (800b5a8 <CDC_Transmit_FS+0x48>)
 800b572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b576:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d001      	beq.n	800b586 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b582:	2301      	movs	r3, #1
 800b584:	e00b      	b.n	800b59e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b586:	887b      	ldrh	r3, [r7, #2]
 800b588:	461a      	mov	r2, r3
 800b58a:	6879      	ldr	r1, [r7, #4]
 800b58c:	4806      	ldr	r0, [pc, #24]	; (800b5a8 <CDC_Transmit_FS+0x48>)
 800b58e:	f7fe fdf5 	bl	800a17c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b592:	4805      	ldr	r0, [pc, #20]	; (800b5a8 <CDC_Transmit_FS+0x48>)
 800b594:	f7fe fe1e 	bl	800a1d4 <USBD_CDC_TransmitPacket>
 800b598:	4603      	mov	r3, r0
 800b59a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b59c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3710      	adds	r7, #16
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}
 800b5a6:	bf00      	nop
 800b5a8:	20001180 	.word	0x20001180

0800b5ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b083      	sub	sp, #12
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	6039      	str	r1, [r7, #0]
 800b5b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	2212      	movs	r2, #18
 800b5bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b5be:	4b03      	ldr	r3, [pc, #12]	; (800b5cc <USBD_FS_DeviceDescriptor+0x20>)
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	370c      	adds	r7, #12
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bc80      	pop	{r7}
 800b5c8:	4770      	bx	lr
 800b5ca:	bf00      	nop
 800b5cc:	20000170 	.word	0x20000170

0800b5d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b083      	sub	sp, #12
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	6039      	str	r1, [r7, #0]
 800b5da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	2204      	movs	r2, #4
 800b5e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b5e2:	4b03      	ldr	r3, [pc, #12]	; (800b5f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	370c      	adds	r7, #12
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bc80      	pop	{r7}
 800b5ec:	4770      	bx	lr
 800b5ee:	bf00      	nop
 800b5f0:	20000184 	.word	0x20000184

0800b5f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	6039      	str	r1, [r7, #0]
 800b5fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b600:	79fb      	ldrb	r3, [r7, #7]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d105      	bne.n	800b612 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b606:	683a      	ldr	r2, [r7, #0]
 800b608:	4907      	ldr	r1, [pc, #28]	; (800b628 <USBD_FS_ProductStrDescriptor+0x34>)
 800b60a:	4808      	ldr	r0, [pc, #32]	; (800b62c <USBD_FS_ProductStrDescriptor+0x38>)
 800b60c:	f7ff fdeb 	bl	800b1e6 <USBD_GetString>
 800b610:	e004      	b.n	800b61c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b612:	683a      	ldr	r2, [r7, #0]
 800b614:	4904      	ldr	r1, [pc, #16]	; (800b628 <USBD_FS_ProductStrDescriptor+0x34>)
 800b616:	4805      	ldr	r0, [pc, #20]	; (800b62c <USBD_FS_ProductStrDescriptor+0x38>)
 800b618:	f7ff fde5 	bl	800b1e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b61c:	4b02      	ldr	r3, [pc, #8]	; (800b628 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3708      	adds	r7, #8
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	20001c14 	.word	0x20001c14
 800b62c:	0800bda0 	.word	0x0800bda0

0800b630 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	4603      	mov	r3, r0
 800b638:	6039      	str	r1, [r7, #0]
 800b63a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b63c:	683a      	ldr	r2, [r7, #0]
 800b63e:	4904      	ldr	r1, [pc, #16]	; (800b650 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b640:	4804      	ldr	r0, [pc, #16]	; (800b654 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b642:	f7ff fdd0 	bl	800b1e6 <USBD_GetString>
  return USBD_StrDesc;
 800b646:	4b02      	ldr	r3, [pc, #8]	; (800b650 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3708      	adds	r7, #8
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}
 800b650:	20001c14 	.word	0x20001c14
 800b654:	0800bdbc 	.word	0x0800bdbc

0800b658 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	4603      	mov	r3, r0
 800b660:	6039      	str	r1, [r7, #0]
 800b662:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	221a      	movs	r2, #26
 800b668:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b66a:	f000 f843 	bl	800b6f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b66e:	4b02      	ldr	r3, [pc, #8]	; (800b678 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b670:	4618      	mov	r0, r3
 800b672:	3708      	adds	r7, #8
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}
 800b678:	20000188 	.word	0x20000188

0800b67c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
 800b682:	4603      	mov	r3, r0
 800b684:	6039      	str	r1, [r7, #0]
 800b686:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b688:	79fb      	ldrb	r3, [r7, #7]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d105      	bne.n	800b69a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b68e:	683a      	ldr	r2, [r7, #0]
 800b690:	4907      	ldr	r1, [pc, #28]	; (800b6b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b692:	4808      	ldr	r0, [pc, #32]	; (800b6b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b694:	f7ff fda7 	bl	800b1e6 <USBD_GetString>
 800b698:	e004      	b.n	800b6a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b69a:	683a      	ldr	r2, [r7, #0]
 800b69c:	4904      	ldr	r1, [pc, #16]	; (800b6b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b69e:	4805      	ldr	r0, [pc, #20]	; (800b6b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b6a0:	f7ff fda1 	bl	800b1e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6a4:	4b02      	ldr	r3, [pc, #8]	; (800b6b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3708      	adds	r7, #8
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	20001c14 	.word	0x20001c14
 800b6b4:	0800bdc0 	.word	0x0800bdc0

0800b6b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b082      	sub	sp, #8
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	4603      	mov	r3, r0
 800b6c0:	6039      	str	r1, [r7, #0]
 800b6c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b6c4:	79fb      	ldrb	r3, [r7, #7]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d105      	bne.n	800b6d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6ca:	683a      	ldr	r2, [r7, #0]
 800b6cc:	4907      	ldr	r1, [pc, #28]	; (800b6ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6ce:	4808      	ldr	r0, [pc, #32]	; (800b6f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6d0:	f7ff fd89 	bl	800b1e6 <USBD_GetString>
 800b6d4:	e004      	b.n	800b6e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6d6:	683a      	ldr	r2, [r7, #0]
 800b6d8:	4904      	ldr	r1, [pc, #16]	; (800b6ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6da:	4805      	ldr	r0, [pc, #20]	; (800b6f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6dc:	f7ff fd83 	bl	800b1e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6e0:	4b02      	ldr	r3, [pc, #8]	; (800b6ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3708      	adds	r7, #8
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop
 800b6ec:	20001c14 	.word	0x20001c14
 800b6f0:	0800bdcc 	.word	0x0800bdcc

0800b6f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b6fa:	4b0f      	ldr	r3, [pc, #60]	; (800b738 <Get_SerialNum+0x44>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b700:	4b0e      	ldr	r3, [pc, #56]	; (800b73c <Get_SerialNum+0x48>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b706:	4b0e      	ldr	r3, [pc, #56]	; (800b740 <Get_SerialNum+0x4c>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b70c:	68fa      	ldr	r2, [r7, #12]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	4413      	add	r3, r2
 800b712:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d009      	beq.n	800b72e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b71a:	2208      	movs	r2, #8
 800b71c:	4909      	ldr	r1, [pc, #36]	; (800b744 <Get_SerialNum+0x50>)
 800b71e:	68f8      	ldr	r0, [r7, #12]
 800b720:	f000 f814 	bl	800b74c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b724:	2204      	movs	r2, #4
 800b726:	4908      	ldr	r1, [pc, #32]	; (800b748 <Get_SerialNum+0x54>)
 800b728:	68b8      	ldr	r0, [r7, #8]
 800b72a:	f000 f80f 	bl	800b74c <IntToUnicode>
  }
}
 800b72e:	bf00      	nop
 800b730:	3710      	adds	r7, #16
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	1ffff7e8 	.word	0x1ffff7e8
 800b73c:	1ffff7ec 	.word	0x1ffff7ec
 800b740:	1ffff7f0 	.word	0x1ffff7f0
 800b744:	2000018a 	.word	0x2000018a
 800b748:	2000019a 	.word	0x2000019a

0800b74c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b087      	sub	sp, #28
 800b750:	af00      	add	r7, sp, #0
 800b752:	60f8      	str	r0, [r7, #12]
 800b754:	60b9      	str	r1, [r7, #8]
 800b756:	4613      	mov	r3, r2
 800b758:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b75a:	2300      	movs	r3, #0
 800b75c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b75e:	2300      	movs	r3, #0
 800b760:	75fb      	strb	r3, [r7, #23]
 800b762:	e027      	b.n	800b7b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	0f1b      	lsrs	r3, r3, #28
 800b768:	2b09      	cmp	r3, #9
 800b76a:	d80b      	bhi.n	800b784 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	0f1b      	lsrs	r3, r3, #28
 800b770:	b2da      	uxtb	r2, r3
 800b772:	7dfb      	ldrb	r3, [r7, #23]
 800b774:	005b      	lsls	r3, r3, #1
 800b776:	4619      	mov	r1, r3
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	440b      	add	r3, r1
 800b77c:	3230      	adds	r2, #48	; 0x30
 800b77e:	b2d2      	uxtb	r2, r2
 800b780:	701a      	strb	r2, [r3, #0]
 800b782:	e00a      	b.n	800b79a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	0f1b      	lsrs	r3, r3, #28
 800b788:	b2da      	uxtb	r2, r3
 800b78a:	7dfb      	ldrb	r3, [r7, #23]
 800b78c:	005b      	lsls	r3, r3, #1
 800b78e:	4619      	mov	r1, r3
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	440b      	add	r3, r1
 800b794:	3237      	adds	r2, #55	; 0x37
 800b796:	b2d2      	uxtb	r2, r2
 800b798:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	011b      	lsls	r3, r3, #4
 800b79e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b7a0:	7dfb      	ldrb	r3, [r7, #23]
 800b7a2:	005b      	lsls	r3, r3, #1
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	68ba      	ldr	r2, [r7, #8]
 800b7a8:	4413      	add	r3, r2
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b7ae:	7dfb      	ldrb	r3, [r7, #23]
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	75fb      	strb	r3, [r7, #23]
 800b7b4:	7dfa      	ldrb	r2, [r7, #23]
 800b7b6:	79fb      	ldrb	r3, [r7, #7]
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	d3d3      	bcc.n	800b764 <IntToUnicode+0x18>
  }
}
 800b7bc:	bf00      	nop
 800b7be:	371c      	adds	r7, #28
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bc80      	pop	{r7}
 800b7c4:	4770      	bx	lr
	...

0800b7c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	4a0d      	ldr	r2, [pc, #52]	; (800b80c <HAL_PCD_MspInit+0x44>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d113      	bne.n	800b802 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b7da:	4b0d      	ldr	r3, [pc, #52]	; (800b810 <HAL_PCD_MspInit+0x48>)
 800b7dc:	69db      	ldr	r3, [r3, #28]
 800b7de:	4a0c      	ldr	r2, [pc, #48]	; (800b810 <HAL_PCD_MspInit+0x48>)
 800b7e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b7e4:	61d3      	str	r3, [r2, #28]
 800b7e6:	4b0a      	ldr	r3, [pc, #40]	; (800b810 <HAL_PCD_MspInit+0x48>)
 800b7e8:	69db      	ldr	r3, [r3, #28]
 800b7ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b7ee:	60fb      	str	r3, [r7, #12]
 800b7f0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 4, 0);
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	2104      	movs	r1, #4
 800b7f6:	2014      	movs	r0, #20
 800b7f8:	f7f7 ff2f 	bl	800365a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b7fc:	2014      	movs	r0, #20
 800b7fe:	f7f7 ff48 	bl	8003692 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b802:	bf00      	nop
 800b804:	3710      	adds	r7, #16
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}
 800b80a:	bf00      	nop
 800b80c:	40005c00 	.word	0x40005c00
 800b810:	40021000 	.word	0x40021000

0800b814 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b082      	sub	sp, #8
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800b828:	4619      	mov	r1, r3
 800b82a:	4610      	mov	r0, r2
 800b82c:	f7fe fdb7 	bl	800a39e <USBD_LL_SetupStage>
}
 800b830:	bf00      	nop
 800b832:	3708      	adds	r7, #8
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	460b      	mov	r3, r1
 800b842:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800b84a:	78fb      	ldrb	r3, [r7, #3]
 800b84c:	687a      	ldr	r2, [r7, #4]
 800b84e:	015b      	lsls	r3, r3, #5
 800b850:	4413      	add	r3, r2
 800b852:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800b856:	681a      	ldr	r2, [r3, #0]
 800b858:	78fb      	ldrb	r3, [r7, #3]
 800b85a:	4619      	mov	r1, r3
 800b85c:	f7fe fdea 	bl	800a434 <USBD_LL_DataOutStage>
}
 800b860:	bf00      	nop
 800b862:	3708      	adds	r7, #8
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}

0800b868 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b082      	sub	sp, #8
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
 800b870:	460b      	mov	r3, r1
 800b872:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800b87a:	78fb      	ldrb	r3, [r7, #3]
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	015b      	lsls	r3, r3, #5
 800b880:	4413      	add	r3, r2
 800b882:	333c      	adds	r3, #60	; 0x3c
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	78fb      	ldrb	r3, [r7, #3]
 800b888:	4619      	mov	r1, r3
 800b88a:	f7fe fe44 	bl	800a516 <USBD_LL_DataInStage>
}
 800b88e:	bf00      	nop
 800b890:	3708      	adds	r7, #8
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}

0800b896 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b896:	b580      	push	{r7, lr}
 800b898:	b082      	sub	sp, #8
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f7fe ff54 	bl	800a752 <USBD_LL_SOF>
}
 800b8aa:	bf00      	nop
 800b8ac:	3708      	adds	r7, #8
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}

0800b8b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800b8b2:	b580      	push	{r7, lr}
 800b8b4:	b084      	sub	sp, #16
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	689b      	ldr	r3, [r3, #8]
 800b8c2:	2b02      	cmp	r3, #2
 800b8c4:	d001      	beq.n	800b8ca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b8c6:	f7f7 fb35 	bl	8002f34 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b8d0:	7bfa      	ldrb	r2, [r7, #15]
 800b8d2:	4611      	mov	r1, r2
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f7fe ff04 	bl	800a6e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f7fe febd 	bl	800a660 <USBD_LL_Reset>
}
 800b8e6:	bf00      	nop
 800b8e8:	3710      	adds	r7, #16
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
	...

0800b8f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b082      	sub	sp, #8
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b8fe:	4618      	mov	r0, r3
 800b900:	f7fe fefe 	bl	800a700 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	699b      	ldr	r3, [r3, #24]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d005      	beq.n	800b918 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b90c:	4b04      	ldr	r3, [pc, #16]	; (800b920 <HAL_PCD_SuspendCallback+0x30>)
 800b90e:	691b      	ldr	r3, [r3, #16]
 800b910:	4a03      	ldr	r2, [pc, #12]	; (800b920 <HAL_PCD_SuspendCallback+0x30>)
 800b912:	f043 0306 	orr.w	r3, r3, #6
 800b916:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b918:	bf00      	nop
 800b91a:	3708      	adds	r7, #8
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}
 800b920:	e000ed00 	.word	0xe000ed00

0800b924 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b082      	sub	sp, #8
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b932:	4618      	mov	r0, r3
 800b934:	f7fe fef8 	bl	800a728 <USBD_LL_Resume>
}
 800b938:	bf00      	nop
 800b93a:	3708      	adds	r7, #8
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b082      	sub	sp, #8
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b948:	4a28      	ldr	r2, [pc, #160]	; (800b9ec <USBD_LL_Init+0xac>)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	4a26      	ldr	r2, [pc, #152]	; (800b9ec <USBD_LL_Init+0xac>)
 800b954:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b958:	4b24      	ldr	r3, [pc, #144]	; (800b9ec <USBD_LL_Init+0xac>)
 800b95a:	4a25      	ldr	r2, [pc, #148]	; (800b9f0 <USBD_LL_Init+0xb0>)
 800b95c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b95e:	4b23      	ldr	r3, [pc, #140]	; (800b9ec <USBD_LL_Init+0xac>)
 800b960:	2208      	movs	r2, #8
 800b962:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b964:	4b21      	ldr	r3, [pc, #132]	; (800b9ec <USBD_LL_Init+0xac>)
 800b966:	2202      	movs	r2, #2
 800b968:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b96a:	4b20      	ldr	r3, [pc, #128]	; (800b9ec <USBD_LL_Init+0xac>)
 800b96c:	2200      	movs	r2, #0
 800b96e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b970:	4b1e      	ldr	r3, [pc, #120]	; (800b9ec <USBD_LL_Init+0xac>)
 800b972:	2200      	movs	r2, #0
 800b974:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b976:	4b1d      	ldr	r3, [pc, #116]	; (800b9ec <USBD_LL_Init+0xac>)
 800b978:	2200      	movs	r2, #0
 800b97a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b97c:	481b      	ldr	r0, [pc, #108]	; (800b9ec <USBD_LL_Init+0xac>)
 800b97e:	f7f9 ffaf 	bl	80058e0 <HAL_PCD_Init>
 800b982:	4603      	mov	r3, r0
 800b984:	2b00      	cmp	r3, #0
 800b986:	d001      	beq.n	800b98c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b988:	f7f7 fad4 	bl	8002f34 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b992:	2318      	movs	r3, #24
 800b994:	2200      	movs	r2, #0
 800b996:	2100      	movs	r1, #0
 800b998:	f7fa fe48 	bl	800662c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b9a2:	2358      	movs	r3, #88	; 0x58
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	2180      	movs	r1, #128	; 0x80
 800b9a8:	f7fa fe40 	bl	800662c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b9b2:	23c0      	movs	r3, #192	; 0xc0
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	2181      	movs	r1, #129	; 0x81
 800b9b8:	f7fa fe38 	bl	800662c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b9c2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	2101      	movs	r1, #1
 800b9ca:	f7fa fe2f 	bl	800662c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b9d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b9d8:	2200      	movs	r2, #0
 800b9da:	2182      	movs	r1, #130	; 0x82
 800b9dc:	f7fa fe26 	bl	800662c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b9e0:	2300      	movs	r3, #0
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3708      	adds	r7, #8
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}
 800b9ea:	bf00      	nop
 800b9ec:	20001e14 	.word	0x20001e14
 800b9f0:	40005c00 	.word	0x40005c00

0800b9f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b084      	sub	sp, #16
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba00:	2300      	movs	r3, #0
 800ba02:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7fa f849 	bl	8005aa2 <HAL_PCD_Start>
 800ba10:	4603      	mov	r3, r0
 800ba12:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba14:	7bfb      	ldrb	r3, [r7, #15]
 800ba16:	4618      	mov	r0, r3
 800ba18:	f000 f948 	bl	800bcac <USBD_Get_USB_Status>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ba20:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3710      	adds	r7, #16
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}

0800ba2a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ba2a:	b580      	push	{r7, lr}
 800ba2c:	b084      	sub	sp, #16
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	6078      	str	r0, [r7, #4]
 800ba32:	4608      	mov	r0, r1
 800ba34:	4611      	mov	r1, r2
 800ba36:	461a      	mov	r2, r3
 800ba38:	4603      	mov	r3, r0
 800ba3a:	70fb      	strb	r3, [r7, #3]
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	70bb      	strb	r3, [r7, #2]
 800ba40:	4613      	mov	r3, r2
 800ba42:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba44:	2300      	movs	r3, #0
 800ba46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ba52:	78bb      	ldrb	r3, [r7, #2]
 800ba54:	883a      	ldrh	r2, [r7, #0]
 800ba56:	78f9      	ldrb	r1, [r7, #3]
 800ba58:	f7fa f97c 	bl	8005d54 <HAL_PCD_EP_Open>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba60:	7bfb      	ldrb	r3, [r7, #15]
 800ba62:	4618      	mov	r0, r3
 800ba64:	f000 f922 	bl	800bcac <USBD_Get_USB_Status>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800ba6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3710      	adds	r7, #16
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}

0800ba76 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba76:	b580      	push	{r7, lr}
 800ba78:	b084      	sub	sp, #16
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
 800ba7e:	460b      	mov	r3, r1
 800ba80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba82:	2300      	movs	r3, #0
 800ba84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba86:	2300      	movs	r3, #0
 800ba88:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba90:	78fa      	ldrb	r2, [r7, #3]
 800ba92:	4611      	mov	r1, r2
 800ba94:	4618      	mov	r0, r3
 800ba96:	f7fa f9bd 	bl	8005e14 <HAL_PCD_EP_Close>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba9e:	7bfb      	ldrb	r3, [r7, #15]
 800baa0:	4618      	mov	r0, r3
 800baa2:	f000 f903 	bl	800bcac <USBD_Get_USB_Status>
 800baa6:	4603      	mov	r3, r0
 800baa8:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800baaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800baac:	4618      	mov	r0, r3
 800baae:	3710      	adds	r7, #16
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}

0800bab4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b084      	sub	sp, #16
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	460b      	mov	r3, r1
 800babe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bac0:	2300      	movs	r3, #0
 800bac2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bac4:	2300      	movs	r3, #0
 800bac6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bace:	78fa      	ldrb	r2, [r7, #3]
 800bad0:	4611      	mov	r1, r2
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7fa fa67 	bl	8005fa6 <HAL_PCD_EP_SetStall>
 800bad8:	4603      	mov	r3, r0
 800bada:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800badc:	7bfb      	ldrb	r3, [r7, #15]
 800bade:	4618      	mov	r0, r3
 800bae0:	f000 f8e4 	bl	800bcac <USBD_Get_USB_Status>
 800bae4:	4603      	mov	r3, r0
 800bae6:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800bae8:	7bbb      	ldrb	r3, [r7, #14]
}
 800baea:	4618      	mov	r0, r3
 800baec:	3710      	adds	r7, #16
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}

0800baf2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800baf2:	b580      	push	{r7, lr}
 800baf4:	b084      	sub	sp, #16
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	6078      	str	r0, [r7, #4]
 800bafa:	460b      	mov	r3, r1
 800bafc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bafe:	2300      	movs	r3, #0
 800bb00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb02:	2300      	movs	r3, #0
 800bb04:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb0c:	78fa      	ldrb	r2, [r7, #3]
 800bb0e:	4611      	mov	r1, r2
 800bb10:	4618      	mov	r0, r3
 800bb12:	f7fa faa2 	bl	800605a <HAL_PCD_EP_ClrStall>
 800bb16:	4603      	mov	r3, r0
 800bb18:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb1a:	7bfb      	ldrb	r3, [r7, #15]
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f000 f8c5 	bl	800bcac <USBD_Get_USB_Status>
 800bb22:	4603      	mov	r3, r0
 800bb24:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 800bb26:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3710      	adds	r7, #16
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b085      	sub	sp, #20
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	460b      	mov	r3, r1
 800bb3a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb42:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800bb44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	da08      	bge.n	800bb5e <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800bb4c:	78fb      	ldrb	r3, [r7, #3]
 800bb4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb52:	68fa      	ldr	r2, [r7, #12]
 800bb54:	015b      	lsls	r3, r3, #5
 800bb56:	4413      	add	r3, r2
 800bb58:	332a      	adds	r3, #42	; 0x2a
 800bb5a:	781b      	ldrb	r3, [r3, #0]
 800bb5c:	e008      	b.n	800bb70 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800bb5e:	78fb      	ldrb	r3, [r7, #3]
 800bb60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb64:	68fa      	ldr	r2, [r7, #12]
 800bb66:	015b      	lsls	r3, r3, #5
 800bb68:	4413      	add	r3, r2
 800bb6a:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800bb6e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3714      	adds	r7, #20
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bc80      	pop	{r7}
 800bb78:	4770      	bx	lr

0800bb7a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bb7a:	b580      	push	{r7, lr}
 800bb7c:	b084      	sub	sp, #16
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	6078      	str	r0, [r7, #4]
 800bb82:	460b      	mov	r3, r1
 800bb84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb86:	2300      	movs	r3, #0
 800bb88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb94:	78fa      	ldrb	r2, [r7, #3]
 800bb96:	4611      	mov	r1, r2
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f7fa f8b6 	bl	8005d0a <HAL_PCD_SetAddress>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800bba2:	7bfb      	ldrb	r3, [r7, #15]
 800bba4:	4618      	mov	r0, r3
 800bba6:	f000 f881 	bl	800bcac <USBD_Get_USB_Status>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800bbae:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3710      	adds	r7, #16
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b086      	sub	sp, #24
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	60f8      	str	r0, [r7, #12]
 800bbc0:	607a      	str	r2, [r7, #4]
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	72fb      	strb	r3, [r7, #11]
 800bbc8:	4613      	mov	r3, r2
 800bbca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bbda:	893b      	ldrh	r3, [r7, #8]
 800bbdc:	7af9      	ldrb	r1, [r7, #11]
 800bbde:	687a      	ldr	r2, [r7, #4]
 800bbe0:	f7fa f9a8 	bl	8005f34 <HAL_PCD_EP_Transmit>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbe8:	7dfb      	ldrb	r3, [r7, #23]
 800bbea:	4618      	mov	r0, r3
 800bbec:	f000 f85e 	bl	800bcac <USBD_Get_USB_Status>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800bbf4:	7dbb      	ldrb	r3, [r7, #22]
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3718      	adds	r7, #24
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}

0800bbfe <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bbfe:	b580      	push	{r7, lr}
 800bc00:	b086      	sub	sp, #24
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	60f8      	str	r0, [r7, #12]
 800bc06:	607a      	str	r2, [r7, #4]
 800bc08:	461a      	mov	r2, r3
 800bc0a:	460b      	mov	r3, r1
 800bc0c:	72fb      	strb	r3, [r7, #11]
 800bc0e:	4613      	mov	r3, r2
 800bc10:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc12:	2300      	movs	r3, #0
 800bc14:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc16:	2300      	movs	r3, #0
 800bc18:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bc20:	893b      	ldrh	r3, [r7, #8]
 800bc22:	7af9      	ldrb	r1, [r7, #11]
 800bc24:	687a      	ldr	r2, [r7, #4]
 800bc26:	f7fa f937 	bl	8005e98 <HAL_PCD_EP_Receive>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc2e:	7dfb      	ldrb	r3, [r7, #23]
 800bc30:	4618      	mov	r0, r3
 800bc32:	f000 f83b 	bl	800bcac <USBD_Get_USB_Status>
 800bc36:	4603      	mov	r3, r0
 800bc38:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800bc3a:	7dbb      	ldrb	r3, [r7, #22]
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3718      	adds	r7, #24
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}

0800bc44 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	460b      	mov	r3, r1
 800bc4e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc56:	78fa      	ldrb	r2, [r7, #3]
 800bc58:	4611      	mov	r1, r2
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7fa f956 	bl	8005f0c <HAL_PCD_EP_GetRxCount>
 800bc60:	4603      	mov	r3, r0
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3708      	adds	r7, #8
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
	...

0800bc6c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b083      	sub	sp, #12
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bc74:	4b02      	ldr	r3, [pc, #8]	; (800bc80 <USBD_static_malloc+0x14>)
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	370c      	adds	r7, #12
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bc80      	pop	{r7}
 800bc7e:	4770      	bx	lr
 800bc80:	200005b0 	.word	0x200005b0

0800bc84 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b083      	sub	sp, #12
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]

}
 800bc8c:	bf00      	nop
 800bc8e:	370c      	adds	r7, #12
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bc80      	pop	{r7}
 800bc94:	4770      	bx	lr

0800bc96 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc96:	b480      	push	{r7}
 800bc98:	b083      	sub	sp, #12
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	6078      	str	r0, [r7, #4]
 800bc9e:	460b      	mov	r3, r1
 800bca0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800bca2:	bf00      	nop
 800bca4:	370c      	adds	r7, #12
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bc80      	pop	{r7}
 800bcaa:	4770      	bx	lr

0800bcac <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b085      	sub	sp, #20
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bcba:	79fb      	ldrb	r3, [r7, #7]
 800bcbc:	2b03      	cmp	r3, #3
 800bcbe:	d817      	bhi.n	800bcf0 <USBD_Get_USB_Status+0x44>
 800bcc0:	a201      	add	r2, pc, #4	; (adr r2, 800bcc8 <USBD_Get_USB_Status+0x1c>)
 800bcc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcc6:	bf00      	nop
 800bcc8:	0800bcd9 	.word	0x0800bcd9
 800bccc:	0800bcdf 	.word	0x0800bcdf
 800bcd0:	0800bce5 	.word	0x0800bce5
 800bcd4:	0800bceb 	.word	0x0800bceb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	73fb      	strb	r3, [r7, #15]
    break;
 800bcdc:	e00b      	b.n	800bcf6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bcde:	2302      	movs	r3, #2
 800bce0:	73fb      	strb	r3, [r7, #15]
    break;
 800bce2:	e008      	b.n	800bcf6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bce4:	2301      	movs	r3, #1
 800bce6:	73fb      	strb	r3, [r7, #15]
    break;
 800bce8:	e005      	b.n	800bcf6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bcea:	2302      	movs	r3, #2
 800bcec:	73fb      	strb	r3, [r7, #15]
    break;
 800bcee:	e002      	b.n	800bcf6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bcf0:	2302      	movs	r3, #2
 800bcf2:	73fb      	strb	r3, [r7, #15]
    break;
 800bcf4:	bf00      	nop
  }
  return usb_status;
 800bcf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3714      	adds	r7, #20
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bc80      	pop	{r7}
 800bd00:	4770      	bx	lr
 800bd02:	bf00      	nop

0800bd04 <__libc_init_array>:
 800bd04:	b570      	push	{r4, r5, r6, lr}
 800bd06:	2500      	movs	r5, #0
 800bd08:	4e0c      	ldr	r6, [pc, #48]	; (800bd3c <__libc_init_array+0x38>)
 800bd0a:	4c0d      	ldr	r4, [pc, #52]	; (800bd40 <__libc_init_array+0x3c>)
 800bd0c:	1ba4      	subs	r4, r4, r6
 800bd0e:	10a4      	asrs	r4, r4, #2
 800bd10:	42a5      	cmp	r5, r4
 800bd12:	d109      	bne.n	800bd28 <__libc_init_array+0x24>
 800bd14:	f000 f82e 	bl	800bd74 <_init>
 800bd18:	2500      	movs	r5, #0
 800bd1a:	4e0a      	ldr	r6, [pc, #40]	; (800bd44 <__libc_init_array+0x40>)
 800bd1c:	4c0a      	ldr	r4, [pc, #40]	; (800bd48 <__libc_init_array+0x44>)
 800bd1e:	1ba4      	subs	r4, r4, r6
 800bd20:	10a4      	asrs	r4, r4, #2
 800bd22:	42a5      	cmp	r5, r4
 800bd24:	d105      	bne.n	800bd32 <__libc_init_array+0x2e>
 800bd26:	bd70      	pop	{r4, r5, r6, pc}
 800bd28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bd2c:	4798      	blx	r3
 800bd2e:	3501      	adds	r5, #1
 800bd30:	e7ee      	b.n	800bd10 <__libc_init_array+0xc>
 800bd32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bd36:	4798      	blx	r3
 800bd38:	3501      	adds	r5, #1
 800bd3a:	e7f2      	b.n	800bd22 <__libc_init_array+0x1e>
 800bd3c:	0800bdf4 	.word	0x0800bdf4
 800bd40:	0800bdf4 	.word	0x0800bdf4
 800bd44:	0800bdf4 	.word	0x0800bdf4
 800bd48:	0800bdf8 	.word	0x0800bdf8

0800bd4c <memcpy>:
 800bd4c:	b510      	push	{r4, lr}
 800bd4e:	1e43      	subs	r3, r0, #1
 800bd50:	440a      	add	r2, r1
 800bd52:	4291      	cmp	r1, r2
 800bd54:	d100      	bne.n	800bd58 <memcpy+0xc>
 800bd56:	bd10      	pop	{r4, pc}
 800bd58:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd60:	e7f7      	b.n	800bd52 <memcpy+0x6>

0800bd62 <memset>:
 800bd62:	4603      	mov	r3, r0
 800bd64:	4402      	add	r2, r0
 800bd66:	4293      	cmp	r3, r2
 800bd68:	d100      	bne.n	800bd6c <memset+0xa>
 800bd6a:	4770      	bx	lr
 800bd6c:	f803 1b01 	strb.w	r1, [r3], #1
 800bd70:	e7f9      	b.n	800bd66 <memset+0x4>
	...

0800bd74 <_init>:
 800bd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd76:	bf00      	nop
 800bd78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd7a:	bc08      	pop	{r3}
 800bd7c:	469e      	mov	lr, r3
 800bd7e:	4770      	bx	lr

0800bd80 <_fini>:
 800bd80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd82:	bf00      	nop
 800bd84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd86:	bc08      	pop	{r3}
 800bd88:	469e      	mov	lr, r3
 800bd8a:	4770      	bx	lr
