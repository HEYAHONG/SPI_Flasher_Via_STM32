
STM32F103C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcf8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800be04  0800be04  0001be04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be6c  0800be6c  000201a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800be6c  0800be6c  000201a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800be6c  0800be6c  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be6c  0800be6c  0001be6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be70  0800be70  0001be70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0800be74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001edc  200001a4  0800c018  000201a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002080  0800c018  00022080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025187  00000000  00000000  000201cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000046a5  00000000  00000000  00045354  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018b8  00000000  00000000  00049a00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001738  00000000  00000000  0004b2b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000199bf  00000000  00000000  0004c9f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000172dc  00000000  00000000  000663af  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007b7c0  00000000  00000000  0007d68b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f8e4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006770  00000000  00000000  000f8ec8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001a4 	.word	0x200001a4
 8000128:	00000000 	.word	0x00000000
 800012c:	0800bdec 	.word	0x0800bdec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001a8 	.word	0x200001a8
 8000148:	0800bdec 	.word	0x0800bdec

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2uiz>:
 80008e8:	004a      	lsls	r2, r1, #1
 80008ea:	d211      	bcs.n	8000910 <__aeabi_d2uiz+0x28>
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d211      	bcs.n	8000916 <__aeabi_d2uiz+0x2e>
 80008f2:	d50d      	bpl.n	8000910 <__aeabi_d2uiz+0x28>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d40e      	bmi.n	800091c <__aeabi_d2uiz+0x34>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	fa23 f002 	lsr.w	r0, r3, r2
 800090e:	4770      	bx	lr
 8000910:	f04f 0000 	mov.w	r0, #0
 8000914:	4770      	bx	lr
 8000916:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091a:	d102      	bne.n	8000922 <__aeabi_d2uiz+0x3a>
 800091c:	f04f 30ff 	mov.w	r0, #4294967295
 8000920:	4770      	bx	lr
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	4770      	bx	lr

08000928 <EEPROM24XX_IsConnected>:
#endif

size_t _EEPROM_SIZE_KBIT=64;//容量设置
//##########################################################################
bool		EEPROM24XX_IsConnected(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	#if	(_EEPROM_USE_WP_PIN==1)
	HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_SET);
	#endif
	if(HAL_I2C_IsDeviceReady(&_EEPROM24XX_I2C,0xa0,1,100)==HAL_OK)
 800092c:	2364      	movs	r3, #100	; 0x64
 800092e:	2201      	movs	r2, #1
 8000930:	21a0      	movs	r1, #160	; 0xa0
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <EEPROM24XX_IsConnected+0x20>)
 8000934:	f004 fa8c 	bl	8004e50 <HAL_I2C_IsDeviceReady>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d101      	bne.n	8000942 <EEPROM24XX_IsConnected+0x1a>
		return true;
 800093e:	2301      	movs	r3, #1
 8000940:	e000      	b.n	8000944 <EEPROM24XX_IsConnected+0x1c>
	else
		return false;	
 8000942:	2300      	movs	r3, #0
}
 8000944:	4618      	mov	r0, r3
 8000946:	bd80      	pop	{r7, pc}
 8000948:	2000100c 	.word	0x2000100c

0800094c <EEPROM24XX_Save_No_Page>:
//##########################################################################
//不跨页写
static bool		EEPROM24XX_Save_No_Page(uint16_t Address,void *data,size_t size_of_data)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	; 0x28
 8000950:	af04      	add	r7, sp, #16
 8000952:	4603      	mov	r3, r0
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
 8000958:	81fb      	strh	r3, [r7, #14]
	uint8_t ret=0;
 800095a:	2300      	movs	r3, #0
 800095c:	75fb      	strb	r3, [r7, #23]
	if ((_EEPROM_SIZE_KBIT==1) || (_EEPROM_SIZE_KBIT==2))
 800095e:	4b62      	ldr	r3, [pc, #392]	; (8000ae8 <EEPROM24XX_Save_No_Page+0x19c>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d003      	beq.n	800096e <EEPROM24XX_Save_No_Page+0x22>
 8000966:	4b60      	ldr	r3, [pc, #384]	; (8000ae8 <EEPROM24XX_Save_No_Page+0x19c>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2b02      	cmp	r3, #2
 800096c:	d104      	bne.n	8000978 <EEPROM24XX_Save_No_Page+0x2c>
		{
			if(size_of_data > 8)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2b08      	cmp	r3, #8
 8000972:	d917      	bls.n	80009a4 <EEPROM24XX_Save_No_Page+0x58>
			return false;
 8000974:	2300      	movs	r3, #0
 8000976:	e0b3      	b.n	8000ae0 <EEPROM24XX_Save_No_Page+0x194>
		}
	else if ((_EEPROM_SIZE_KBIT==4) || (_EEPROM_SIZE_KBIT==8) || (_EEPROM_SIZE_KBIT==16))
 8000978:	4b5b      	ldr	r3, [pc, #364]	; (8000ae8 <EEPROM24XX_Save_No_Page+0x19c>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b04      	cmp	r3, #4
 800097e:	d007      	beq.n	8000990 <EEPROM24XX_Save_No_Page+0x44>
 8000980:	4b59      	ldr	r3, [pc, #356]	; (8000ae8 <EEPROM24XX_Save_No_Page+0x19c>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b08      	cmp	r3, #8
 8000986:	d003      	beq.n	8000990 <EEPROM24XX_Save_No_Page+0x44>
 8000988:	4b57      	ldr	r3, [pc, #348]	; (8000ae8 <EEPROM24XX_Save_No_Page+0x19c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b10      	cmp	r3, #16
 800098e:	d104      	bne.n	800099a <EEPROM24XX_Save_No_Page+0x4e>
		 {
			if(size_of_data > 16)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2b10      	cmp	r3, #16
 8000994:	d906      	bls.n	80009a4 <EEPROM24XX_Save_No_Page+0x58>
			return false;
 8000996:	2300      	movs	r3, #0
 8000998:	e0a2      	b.n	8000ae0 <EEPROM24XX_Save_No_Page+0x194>
		 }
	else
		 {
			if(size_of_data > 32)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2b20      	cmp	r3, #32
 800099e:	d901      	bls.n	80009a4 <EEPROM24XX_Save_No_Page+0x58>
			return false;
 80009a0:	2300      	movs	r3, #0
 80009a2:	e09d      	b.n	8000ae0 <EEPROM24XX_Save_No_Page+0x194>
	
	#if	(_EEPROM_USE_WP_PIN==1)
	HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_RESET);
	#endif
	
	if ((_EEPROM_SIZE_KBIT==1) || (_EEPROM_SIZE_KBIT==2))
 80009a4:	4b50      	ldr	r3, [pc, #320]	; (8000ae8 <EEPROM24XX_Save_No_Page+0x19c>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d003      	beq.n	80009b4 <EEPROM24XX_Save_No_Page+0x68>
 80009ac:	4b4e      	ldr	r3, [pc, #312]	; (8000ae8 <EEPROM24XX_Save_No_Page+0x19c>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	d113      	bne.n	80009dc <EEPROM24XX_Save_No_Page+0x90>
		{
			if(HAL_I2C_Mem_Write(&_EEPROM24XX_I2C,0xa0,Address,I2C_MEMADD_SIZE_8BIT,(uint8_t*)data,size_of_data,100) == HAL_OK) ret=1;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	89f9      	ldrh	r1, [r7, #14]
 80009ba:	2264      	movs	r2, #100	; 0x64
 80009bc:	9202      	str	r2, [sp, #8]
 80009be:	9301      	str	r3, [sp, #4]
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	2301      	movs	r3, #1
 80009c6:	460a      	mov	r2, r1
 80009c8:	21a0      	movs	r1, #160	; 0xa0
 80009ca:	4848      	ldr	r0, [pc, #288]	; (8000aec <EEPROM24XX_Save_No_Page+0x1a0>)
 80009cc:	f003 ff10 	bl	80047f0 <HAL_I2C_Mem_Write>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d17b      	bne.n	8000ace <EEPROM24XX_Save_No_Page+0x182>
 80009d6:	2301      	movs	r3, #1
 80009d8:	75fb      	strb	r3, [r7, #23]
 80009da:	e078      	b.n	8000ace <EEPROM24XX_Save_No_Page+0x182>
		}
	else if	(_EEPROM_SIZE_KBIT==4)
 80009dc:	4b42      	ldr	r3, [pc, #264]	; (8000ae8 <EEPROM24XX_Save_No_Page+0x19c>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b04      	cmp	r3, #4
 80009e2:	d11d      	bne.n	8000a20 <EEPROM24XX_Save_No_Page+0xd4>
		{
			if(HAL_I2C_Mem_Write(&_EEPROM24XX_I2C,0xa0|((Address&0x0100>>7)),(Address&0xff),I2C_MEMADD_SIZE_8BIT,(uint8_t*)data,size_of_data,100) == HAL_OK) ret=1;
 80009e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009e8:	f003 0302 	and.w	r3, r3, #2
 80009ec:	b21b      	sxth	r3, r3
 80009ee:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80009f2:	b21b      	sxth	r3, r3
 80009f4:	b299      	uxth	r1, r3
 80009f6:	89fb      	ldrh	r3, [r7, #14]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	b298      	uxth	r0, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	2264      	movs	r2, #100	; 0x64
 8000a02:	9202      	str	r2, [sp, #8]
 8000a04:	9301      	str	r3, [sp, #4]
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	9300      	str	r3, [sp, #0]
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	4837      	ldr	r0, [pc, #220]	; (8000aec <EEPROM24XX_Save_No_Page+0x1a0>)
 8000a10:	f003 feee 	bl	80047f0 <HAL_I2C_Mem_Write>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d159      	bne.n	8000ace <EEPROM24XX_Save_No_Page+0x182>
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	75fb      	strb	r3, [r7, #23]
 8000a1e:	e056      	b.n	8000ace <EEPROM24XX_Save_No_Page+0x182>
		}
	else if	(_EEPROM_SIZE_KBIT==8)
 8000a20:	4b31      	ldr	r3, [pc, #196]	; (8000ae8 <EEPROM24XX_Save_No_Page+0x19c>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b08      	cmp	r3, #8
 8000a26:	d11d      	bne.n	8000a64 <EEPROM24XX_Save_No_Page+0x118>
		{
			if(HAL_I2C_Mem_Write(&_EEPROM24XX_I2C,0xa0|((Address&0x0300>>7)),(Address&0xff),I2C_MEMADD_SIZE_8BIT,(uint8_t*)data,size_of_data,100) == HAL_OK) ret=1;
 8000a28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a2c:	f003 0306 	and.w	r3, r3, #6
 8000a30:	b21b      	sxth	r3, r3
 8000a32:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000a36:	b21b      	sxth	r3, r3
 8000a38:	b299      	uxth	r1, r3
 8000a3a:	89fb      	ldrh	r3, [r7, #14]
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	b298      	uxth	r0, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	2264      	movs	r2, #100	; 0x64
 8000a46:	9202      	str	r2, [sp, #8]
 8000a48:	9301      	str	r3, [sp, #4]
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	9300      	str	r3, [sp, #0]
 8000a4e:	2301      	movs	r3, #1
 8000a50:	4602      	mov	r2, r0
 8000a52:	4826      	ldr	r0, [pc, #152]	; (8000aec <EEPROM24XX_Save_No_Page+0x1a0>)
 8000a54:	f003 fecc 	bl	80047f0 <HAL_I2C_Mem_Write>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d137      	bne.n	8000ace <EEPROM24XX_Save_No_Page+0x182>
 8000a5e:	2301      	movs	r3, #1
 8000a60:	75fb      	strb	r3, [r7, #23]
 8000a62:	e034      	b.n	8000ace <EEPROM24XX_Save_No_Page+0x182>
		}
	else if(_EEPROM_SIZE_KBIT==16)
 8000a64:	4b20      	ldr	r3, [pc, #128]	; (8000ae8 <EEPROM24XX_Save_No_Page+0x19c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b10      	cmp	r3, #16
 8000a6a:	d11d      	bne.n	8000aa8 <EEPROM24XX_Save_No_Page+0x15c>
		{
			if(HAL_I2C_Mem_Write(&_EEPROM24XX_I2C,0xa0|((Address&0x0700>>7)),(Address&0xff),I2C_MEMADD_SIZE_8BIT,(uint8_t*)data,size_of_data,100) == HAL_OK) ret=1;
 8000a6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a70:	f003 030e 	and.w	r3, r3, #14
 8000a74:	b21b      	sxth	r3, r3
 8000a76:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000a7a:	b21b      	sxth	r3, r3
 8000a7c:	b299      	uxth	r1, r3
 8000a7e:	89fb      	ldrh	r3, [r7, #14]
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	b298      	uxth	r0, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	2264      	movs	r2, #100	; 0x64
 8000a8a:	9202      	str	r2, [sp, #8]
 8000a8c:	9301      	str	r3, [sp, #4]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	9300      	str	r3, [sp, #0]
 8000a92:	2301      	movs	r3, #1
 8000a94:	4602      	mov	r2, r0
 8000a96:	4815      	ldr	r0, [pc, #84]	; (8000aec <EEPROM24XX_Save_No_Page+0x1a0>)
 8000a98:	f003 feaa 	bl	80047f0 <HAL_I2C_Mem_Write>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d115      	bne.n	8000ace <EEPROM24XX_Save_No_Page+0x182>
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	75fb      	strb	r3, [r7, #23]
 8000aa6:	e012      	b.n	8000ace <EEPROM24XX_Save_No_Page+0x182>
		}
	else
		{
			if(HAL_I2C_Mem_Write(&_EEPROM24XX_I2C,0xa0,Address,I2C_MEMADD_SIZE_16BIT,(uint8_t*)data,size_of_data,100) == HAL_OK) ret=1;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	89f9      	ldrh	r1, [r7, #14]
 8000aae:	2264      	movs	r2, #100	; 0x64
 8000ab0:	9202      	str	r2, [sp, #8]
 8000ab2:	9301      	str	r3, [sp, #4]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	9300      	str	r3, [sp, #0]
 8000ab8:	2310      	movs	r3, #16
 8000aba:	460a      	mov	r2, r1
 8000abc:	21a0      	movs	r1, #160	; 0xa0
 8000abe:	480b      	ldr	r0, [pc, #44]	; (8000aec <EEPROM24XX_Save_No_Page+0x1a0>)
 8000ac0:	f003 fe96 	bl	80047f0 <HAL_I2C_Mem_Write>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d101      	bne.n	8000ace <EEPROM24XX_Save_No_Page+0x182>
 8000aca:	2301      	movs	r3, #1
 8000acc:	75fb      	strb	r3, [r7, #23]
		}


	if(ret)
 8000ace:	7dfb      	ldrb	r3, [r7, #23]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d004      	beq.n	8000ade <EEPROM24XX_Save_No_Page+0x192>
	{
		#if (_EEPROM_FREERTOS_IS_ENABLE==1)
		osDelay(7);
		#else
		HAL_Delay(7);
 8000ad4:	2007      	movs	r0, #7
 8000ad6:	f002 fd25 	bl	8003524 <HAL_Delay>
		#endif
		#if	(_EEPROM_USE_WP_PIN==1)
		HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_SET);
		#endif
		return true;
 8000ada:	2301      	movs	r3, #1
 8000adc:	e000      	b.n	8000ae0 <EEPROM24XX_Save_No_Page+0x194>
	else
	{
		#if	(_EEPROM_USE_WP_PIN==1)
		HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_SET);
		#endif
		return false;		
 8000ade:	2300      	movs	r3, #0
	}
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3718      	adds	r7, #24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	2000100c 	.word	0x2000100c

08000af0 <EEPROM24XX_Save>:

//##########################################################################
bool		EEPROM24XX_Save(uint16_t Address,void *data,size_t size_of_data)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	; 0x28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
 8000afc:	81fb      	strh	r3, [r7, #14]
	bool ret=true;
 8000afe:	2301      	movs	r3, #1
 8000b00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	//判断页大小
	size_t page_size=32;
 8000b04:	2320      	movs	r3, #32
 8000b06:	623b      	str	r3, [r7, #32]
	if ((_EEPROM_SIZE_KBIT==1) || (_EEPROM_SIZE_KBIT==2))
 8000b08:	4b48      	ldr	r3, [pc, #288]	; (8000c2c <EEPROM24XX_Save+0x13c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d003      	beq.n	8000b18 <EEPROM24XX_Save+0x28>
 8000b10:	4b46      	ldr	r3, [pc, #280]	; (8000c2c <EEPROM24XX_Save+0x13c>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d102      	bne.n	8000b1e <EEPROM24XX_Save+0x2e>
			{
				page_size = 8;
 8000b18:	2308      	movs	r3, #8
 8000b1a:	623b      	str	r3, [r7, #32]
 8000b1c:	e010      	b.n	8000b40 <EEPROM24XX_Save+0x50>

			}
	else if ((_EEPROM_SIZE_KBIT==4) || (_EEPROM_SIZE_KBIT==8) || (_EEPROM_SIZE_KBIT==16))
 8000b1e:	4b43      	ldr	r3, [pc, #268]	; (8000c2c <EEPROM24XX_Save+0x13c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2b04      	cmp	r3, #4
 8000b24:	d007      	beq.n	8000b36 <EEPROM24XX_Save+0x46>
 8000b26:	4b41      	ldr	r3, [pc, #260]	; (8000c2c <EEPROM24XX_Save+0x13c>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2b08      	cmp	r3, #8
 8000b2c:	d003      	beq.n	8000b36 <EEPROM24XX_Save+0x46>
 8000b2e:	4b3f      	ldr	r3, [pc, #252]	; (8000c2c <EEPROM24XX_Save+0x13c>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2b10      	cmp	r3, #16
 8000b34:	d102      	bne.n	8000b3c <EEPROM24XX_Save+0x4c>
			 {
				page_size = 16;
 8000b36:	2310      	movs	r3, #16
 8000b38:	623b      	str	r3, [r7, #32]
 8000b3a:	e001      	b.n	8000b40 <EEPROM24XX_Save+0x50>
			 }
	else
			 {
				page_size = 32;
 8000b3c:	2320      	movs	r3, #32
 8000b3e:	623b      	str	r3, [r7, #32]
			 }

	size_t data_to_write=size_of_data,data_written=0;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	61fb      	str	r3, [r7, #28]
 8000b44:	2300      	movs	r3, #0
 8000b46:	61bb      	str	r3, [r7, #24]
	uint8_t * buff=(uint8_t *)data;
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	617b      	str	r3, [r7, #20]

	//写开始一页的数据
	data_written=(Address/page_size+1)*page_size-Address;
 8000b4c:	89fa      	ldrh	r2, [r7, #14]
 8000b4e:	6a3b      	ldr	r3, [r7, #32]
 8000b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b54:	3301      	adds	r3, #1
 8000b56:	6a3a      	ldr	r2, [r7, #32]
 8000b58:	fb02 f203 	mul.w	r2, r2, r3
 8000b5c:	89fb      	ldrh	r3, [r7, #14]
 8000b5e:	1ad3      	subs	r3, r2, r3
 8000b60:	61bb      	str	r3, [r7, #24]
	if(data_written > data_to_write) data_written=data_to_write;
 8000b62:	69ba      	ldr	r2, [r7, #24]
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d901      	bls.n	8000b6e <EEPROM24XX_Save+0x7e>
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	61bb      	str	r3, [r7, #24]
	ret &= EEPROM24XX_Save_No_Page(Address,buff,data_written);
 8000b6e:	89fb      	ldrh	r3, [r7, #14]
 8000b70:	69ba      	ldr	r2, [r7, #24]
 8000b72:	6979      	ldr	r1, [r7, #20]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fee9 	bl	800094c <EEPROM24XX_Save_No_Page>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b82:	4013      	ands	r3, r2
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	bf14      	ite	ne
 8000b88:	2301      	movne	r3, #1
 8000b8a:	2300      	moveq	r3, #0
 8000b8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	data_to_write-=data_written;
 8000b90:	69fa      	ldr	r2, [r7, #28]
 8000b92:	69bb      	ldr	r3, [r7, #24]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	61fb      	str	r3, [r7, #28]

	//写中间页
	while(data_to_write>page_size)
 8000b98:	e020      	b.n	8000bdc <EEPROM24XX_Save+0xec>
	{
		ret &=EEPROM24XX_Save_No_Page(Address+size_of_data-data_to_write,buff+size_of_data-data_to_write,page_size);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	89fb      	ldrh	r3, [r7, #14]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	b298      	uxth	r0, r3
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	697a      	ldr	r2, [r7, #20]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	6a3a      	ldr	r2, [r7, #32]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	f7ff fec7 	bl	800094c <EEPROM24XX_Save_No_Page>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	bf14      	ite	ne
 8000bcc:	2301      	movne	r3, #1
 8000bce:	2300      	moveq	r3, #0
 8000bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		data_to_write-=page_size;
 8000bd4:	69fa      	ldr	r2, [r7, #28]
 8000bd6:	6a3b      	ldr	r3, [r7, #32]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	61fb      	str	r3, [r7, #28]
	while(data_to_write>page_size)
 8000bdc:	69fa      	ldr	r2, [r7, #28]
 8000bde:	6a3b      	ldr	r3, [r7, #32]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d8da      	bhi.n	8000b9a <EEPROM24XX_Save+0xaa>
	}

	//写最后一页
	ret &=EEPROM24XX_Save_No_Page(Address+size_of_data-data_to_write,buff+size_of_data-data_to_write,data_to_write);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	b29a      	uxth	r2, r3
 8000be8:	89fb      	ldrh	r3, [r7, #14]
 8000bea:	4413      	add	r3, r2
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	b298      	uxth	r0, r3
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	1ad3      	subs	r3, r2, r3
 8000bfc:	697a      	ldr	r2, [r7, #20]
 8000bfe:	4413      	add	r3, r2
 8000c00:	69fa      	ldr	r2, [r7, #28]
 8000c02:	4619      	mov	r1, r3
 8000c04:	f7ff fea2 	bl	800094c <EEPROM24XX_Save_No_Page>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c10:	4013      	ands	r3, r2
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	bf14      	ite	ne
 8000c16:	2301      	movne	r3, #1
 8000c18:	2300      	moveq	r3, #0
 8000c1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return ret;
 8000c1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3728      	adds	r7, #40	; 0x28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000000 	.word	0x20000000

08000c30 <EEPROM24XX_Load>:

//##########################################################################
bool		EEPROM24XX_Load(uint16_t Address,void *data,size_t size_of_data)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af04      	add	r7, sp, #16
 8000c36:	4603      	mov	r3, r0
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
 8000c3c:	81fb      	strh	r3, [r7, #14]

	uint8_t ret=0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	75fb      	strb	r3, [r7, #23]
	#if	(_EEPROM_USE_WP_PIN==1)
	HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_SET);
	#endif

	if ((_EEPROM_SIZE_KBIT==1) || (_EEPROM_SIZE_KBIT==2))
 8000c42:	4b4f      	ldr	r3, [pc, #316]	; (8000d80 <EEPROM24XX_Load+0x150>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d003      	beq.n	8000c52 <EEPROM24XX_Load+0x22>
 8000c4a:	4b4d      	ldr	r3, [pc, #308]	; (8000d80 <EEPROM24XX_Load+0x150>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d113      	bne.n	8000c7a <EEPROM24XX_Load+0x4a>
		{
			if(HAL_I2C_Mem_Read(&_EEPROM24XX_I2C,0xa0,Address,I2C_MEMADD_SIZE_8BIT,(uint8_t*)data,size_of_data,100) == HAL_OK) ret=1;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	89f9      	ldrh	r1, [r7, #14]
 8000c58:	2264      	movs	r2, #100	; 0x64
 8000c5a:	9202      	str	r2, [sp, #8]
 8000c5c:	9301      	str	r3, [sp, #4]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	2301      	movs	r3, #1
 8000c64:	460a      	mov	r2, r1
 8000c66:	21a0      	movs	r1, #160	; 0xa0
 8000c68:	4846      	ldr	r0, [pc, #280]	; (8000d84 <EEPROM24XX_Load+0x154>)
 8000c6a:	f003 febb 	bl	80049e4 <HAL_I2C_Mem_Read>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d17b      	bne.n	8000d6c <EEPROM24XX_Load+0x13c>
 8000c74:	2301      	movs	r3, #1
 8000c76:	75fb      	strb	r3, [r7, #23]
 8000c78:	e078      	b.n	8000d6c <EEPROM24XX_Load+0x13c>
		}
	else if (_EEPROM_SIZE_KBIT==4)
 8000c7a:	4b41      	ldr	r3, [pc, #260]	; (8000d80 <EEPROM24XX_Load+0x150>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b04      	cmp	r3, #4
 8000c80:	d11d      	bne.n	8000cbe <EEPROM24XX_Load+0x8e>
		{
		 	 if(HAL_I2C_Mem_Read(&_EEPROM24XX_I2C,0xa0|((Address&0x0100>>7)),(Address&0xff),I2C_MEMADD_SIZE_8BIT,(uint8_t*)data,size_of_data,100) == HAL_OK) ret=1;
 8000c82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	b21b      	sxth	r3, r3
 8000c8c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000c90:	b21b      	sxth	r3, r3
 8000c92:	b299      	uxth	r1, r3
 8000c94:	89fb      	ldrh	r3, [r7, #14]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	b298      	uxth	r0, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	2264      	movs	r2, #100	; 0x64
 8000ca0:	9202      	str	r2, [sp, #8]
 8000ca2:	9301      	str	r3, [sp, #4]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	9300      	str	r3, [sp, #0]
 8000ca8:	2301      	movs	r3, #1
 8000caa:	4602      	mov	r2, r0
 8000cac:	4835      	ldr	r0, [pc, #212]	; (8000d84 <EEPROM24XX_Load+0x154>)
 8000cae:	f003 fe99 	bl	80049e4 <HAL_I2C_Mem_Read>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d159      	bne.n	8000d6c <EEPROM24XX_Load+0x13c>
 8000cb8:	2301      	movs	r3, #1
 8000cba:	75fb      	strb	r3, [r7, #23]
 8000cbc:	e056      	b.n	8000d6c <EEPROM24XX_Load+0x13c>
		}
	else if (_EEPROM_SIZE_KBIT==8)
 8000cbe:	4b30      	ldr	r3, [pc, #192]	; (8000d80 <EEPROM24XX_Load+0x150>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b08      	cmp	r3, #8
 8000cc4:	d11d      	bne.n	8000d02 <EEPROM24XX_Load+0xd2>
		{
			if(HAL_I2C_Mem_Read(&_EEPROM24XX_I2C,0xa0|((Address&0x0300>>7)),(Address&0xff),I2C_MEMADD_SIZE_8BIT,(uint8_t*)data,size_of_data,100) == HAL_OK) ret=1;
 8000cc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cca:	f003 0306 	and.w	r3, r3, #6
 8000cce:	b21b      	sxth	r3, r3
 8000cd0:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000cd4:	b21b      	sxth	r3, r3
 8000cd6:	b299      	uxth	r1, r3
 8000cd8:	89fb      	ldrh	r3, [r7, #14]
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	b298      	uxth	r0, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	2264      	movs	r2, #100	; 0x64
 8000ce4:	9202      	str	r2, [sp, #8]
 8000ce6:	9301      	str	r3, [sp, #4]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	2301      	movs	r3, #1
 8000cee:	4602      	mov	r2, r0
 8000cf0:	4824      	ldr	r0, [pc, #144]	; (8000d84 <EEPROM24XX_Load+0x154>)
 8000cf2:	f003 fe77 	bl	80049e4 <HAL_I2C_Mem_Read>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d137      	bne.n	8000d6c <EEPROM24XX_Load+0x13c>
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	75fb      	strb	r3, [r7, #23]
 8000d00:	e034      	b.n	8000d6c <EEPROM24XX_Load+0x13c>
		}
	else if (_EEPROM_SIZE_KBIT==16)
 8000d02:	4b1f      	ldr	r3, [pc, #124]	; (8000d80 <EEPROM24XX_Load+0x150>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2b10      	cmp	r3, #16
 8000d08:	d11d      	bne.n	8000d46 <EEPROM24XX_Load+0x116>
		{
			if(HAL_I2C_Mem_Read(&_EEPROM24XX_I2C,0xa0|((Address&0x0700>>7)),(Address&0xff),I2C_MEMADD_SIZE_8BIT,(uint8_t*)data,size_of_data,100) == HAL_OK) ret=1;
 8000d0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d0e:	f003 030e 	and.w	r3, r3, #14
 8000d12:	b21b      	sxth	r3, r3
 8000d14:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000d18:	b21b      	sxth	r3, r3
 8000d1a:	b299      	uxth	r1, r3
 8000d1c:	89fb      	ldrh	r3, [r7, #14]
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	b298      	uxth	r0, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	2264      	movs	r2, #100	; 0x64
 8000d28:	9202      	str	r2, [sp, #8]
 8000d2a:	9301      	str	r3, [sp, #4]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	9300      	str	r3, [sp, #0]
 8000d30:	2301      	movs	r3, #1
 8000d32:	4602      	mov	r2, r0
 8000d34:	4813      	ldr	r0, [pc, #76]	; (8000d84 <EEPROM24XX_Load+0x154>)
 8000d36:	f003 fe55 	bl	80049e4 <HAL_I2C_Mem_Read>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d115      	bne.n	8000d6c <EEPROM24XX_Load+0x13c>
 8000d40:	2301      	movs	r3, #1
 8000d42:	75fb      	strb	r3, [r7, #23]
 8000d44:	e012      	b.n	8000d6c <EEPROM24XX_Load+0x13c>
		}
	else
		{
			if(HAL_I2C_Mem_Read(&_EEPROM24XX_I2C,0xa0,Address,I2C_MEMADD_SIZE_16BIT,(uint8_t*)data,size_of_data,100) == HAL_OK) ret=1;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	89f9      	ldrh	r1, [r7, #14]
 8000d4c:	2264      	movs	r2, #100	; 0x64
 8000d4e:	9202      	str	r2, [sp, #8]
 8000d50:	9301      	str	r3, [sp, #4]
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	2310      	movs	r3, #16
 8000d58:	460a      	mov	r2, r1
 8000d5a:	21a0      	movs	r1, #160	; 0xa0
 8000d5c:	4809      	ldr	r0, [pc, #36]	; (8000d84 <EEPROM24XX_Load+0x154>)
 8000d5e:	f003 fe41 	bl	80049e4 <HAL_I2C_Mem_Read>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d101      	bne.n	8000d6c <EEPROM24XX_Load+0x13c>
 8000d68:	2301      	movs	r3, #1
 8000d6a:	75fb      	strb	r3, [r7, #23]
		}


	if(ret)
 8000d6c:	7dfb      	ldrb	r3, [r7, #23]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <EEPROM24XX_Load+0x146>
		return true;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e000      	b.n	8000d78 <EEPROM24XX_Load+0x148>
	else
		return false;		
 8000d76:	2300      	movs	r3, #0
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000000 	.word	0x20000000
 8000d84:	2000100c 	.word	0x2000100c

08000d88 <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af02      	add	r7, sp, #8
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 8000d92:	f107 020f 	add.w	r2, r7, #15
 8000d96:	1df9      	adds	r1, r7, #7
 8000d98:	2364      	movs	r3, #100	; 0x64
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	4804      	ldr	r0, [pc, #16]	; (8000db0 <W25qxx_Spi+0x28>)
 8000da0:	f006 fc5c 	bl	800765c <HAL_SPI_TransmitReceive>
	return ret;	
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200010a4 	.word	0x200010a4

08000db4 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2110      	movs	r1, #16
 8000dce:	4813      	ldr	r0, [pc, #76]	; (8000e1c <W25qxx_ReadID+0x68>)
 8000dd0:	f003 f8a2 	bl	8003f18 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x9F);
 8000dd4:	209f      	movs	r0, #159	; 0x9f
 8000dd6:	f7ff ffd7 	bl	8000d88 <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000dda:	20a5      	movs	r0, #165	; 0xa5
 8000ddc:	f7ff ffd4 	bl	8000d88 <W25qxx_Spi>
 8000de0:	4603      	mov	r3, r0
 8000de2:	60bb      	str	r3, [r7, #8]
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000de4:	20a5      	movs	r0, #165	; 0xa5
 8000de6:	f7ff ffcf 	bl	8000d88 <W25qxx_Spi>
 8000dea:	4603      	mov	r3, r0
 8000dec:	607b      	str	r3, [r7, #4]
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000dee:	20a5      	movs	r0, #165	; 0xa5
 8000df0:	f7ff ffca 	bl	8000d88 <W25qxx_Spi>
 8000df4:	4603      	mov	r3, r0
 8000df6:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2110      	movs	r1, #16
 8000dfc:	4807      	ldr	r0, [pc, #28]	; (8000e1c <W25qxx_ReadID+0x68>)
 8000dfe:	f003 f88b 	bl	8003f18 <HAL_GPIO_WritePin>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	041a      	lsls	r2, r3, #16
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	021b      	lsls	r3, r3, #8
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	683a      	ldr	r2, [r7, #0]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]
  return Temp;
 8000e12:	68fb      	ldr	r3, [r7, #12]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40010800 	.word	0x40010800

08000e20 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8000e20:	b590      	push	{r4, r7, lr}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2110      	movs	r1, #16
 8000e2a:	4816      	ldr	r0, [pc, #88]	; (8000e84 <W25qxx_ReadUniqID+0x64>)
 8000e2c:	f003 f874 	bl	8003f18 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x4B);
 8000e30:	204b      	movs	r0, #75	; 0x4b
 8000e32:	f7ff ffa9 	bl	8000d88 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8000e36:	2300      	movs	r3, #0
 8000e38:	71fb      	strb	r3, [r7, #7]
 8000e3a:	e005      	b.n	8000e48 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000e3c:	20a5      	movs	r0, #165	; 0xa5
 8000e3e:	f7ff ffa3 	bl	8000d88 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	3301      	adds	r3, #1
 8000e46:	71fb      	strb	r3, [r7, #7]
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	2b03      	cmp	r3, #3
 8000e4c:	d9f6      	bls.n	8000e3c <W25qxx_ReadUniqID+0x1c>
	for(uint8_t	i=0;i<8;i++)
 8000e4e:	2300      	movs	r3, #0
 8000e50:	71bb      	strb	r3, [r7, #6]
 8000e52:	e00b      	b.n	8000e6c <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000e54:	79bc      	ldrb	r4, [r7, #6]
 8000e56:	20a5      	movs	r0, #165	; 0xa5
 8000e58:	f7ff ff96 	bl	8000d88 <W25qxx_Spi>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <W25qxx_ReadUniqID+0x68>)
 8000e62:	4423      	add	r3, r4
 8000e64:	705a      	strb	r2, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 8000e66:	79bb      	ldrb	r3, [r7, #6]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	71bb      	strb	r3, [r7, #6]
 8000e6c:	79bb      	ldrb	r3, [r7, #6]
 8000e6e:	2b07      	cmp	r3, #7
 8000e70:	d9f0      	bls.n	8000e54 <W25qxx_ReadUniqID+0x34>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000e72:	2201      	movs	r2, #1
 8000e74:	2110      	movs	r1, #16
 8000e76:	4803      	ldr	r0, [pc, #12]	; (8000e84 <W25qxx_ReadUniqID+0x64>)
 8000e78:	f003 f84e 	bl	8003f18 <HAL_GPIO_WritePin>
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd90      	pop	{r4, r7, pc}
 8000e84:	40010800 	.word	0x40010800
 8000e88:	200007d0 	.word	0x200007d0

08000e8c <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2110      	movs	r1, #16
 8000e94:	4807      	ldr	r0, [pc, #28]	; (8000eb4 <W25qxx_WriteEnable+0x28>)
 8000e96:	f003 f83f 	bl	8003f18 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x06);
 8000e9a:	2006      	movs	r0, #6
 8000e9c:	f7ff ff74 	bl	8000d88 <W25qxx_Spi>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2110      	movs	r1, #16
 8000ea4:	4803      	ldr	r0, [pc, #12]	; (8000eb4 <W25qxx_WriteEnable+0x28>)
 8000ea6:	f003 f837 	bl	8003f18 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f002 fb3a 	bl	8003524 <HAL_Delay>
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40010800 	.word	0x40010800

08000eb8 <W25qxx_ReadStatusRegister>:
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
	uint8_t	status=0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2110      	movs	r1, #16
 8000eca:	481c      	ldr	r0, [pc, #112]	; (8000f3c <W25qxx_ReadStatusRegister+0x84>)
 8000ecc:	f003 f824 	bl	8003f18 <HAL_GPIO_WritePin>
	if(SelectStatusRegister_1_2_3==1)
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d10c      	bne.n	8000ef0 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8000ed6:	2005      	movs	r0, #5
 8000ed8:	f7ff ff56 	bl	8000d88 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8000edc:	20a5      	movs	r0, #165	; 0xa5
 8000ede:	f7ff ff53 	bl	8000d88 <W25qxx_Spi>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8000ee6:	4a16      	ldr	r2, [pc, #88]	; (8000f40 <W25qxx_ReadStatusRegister+0x88>)
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
 8000eea:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8000eee:	e01b      	b.n	8000f28 <W25qxx_ReadStatusRegister+0x70>
	}
	else if(SelectStatusRegister_1_2_3==2)
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d10c      	bne.n	8000f10 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8000ef6:	2035      	movs	r0, #53	; 0x35
 8000ef8:	f7ff ff46 	bl	8000d88 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8000efc:	20a5      	movs	r0, #165	; 0xa5
 8000efe:	f7ff ff43 	bl	8000d88 <W25qxx_Spi>
 8000f02:	4603      	mov	r3, r0
 8000f04:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8000f06:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <W25qxx_ReadStatusRegister+0x88>)
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8000f0e:	e00b      	b.n	8000f28 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8000f10:	2015      	movs	r0, #21
 8000f12:	f7ff ff39 	bl	8000d88 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8000f16:	20a5      	movs	r0, #165	; 0xa5
 8000f18:	f7ff ff36 	bl	8000d88 <W25qxx_Spi>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8000f20:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <W25qxx_ReadStatusRegister+0x88>)
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}	
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	2110      	movs	r1, #16
 8000f2c:	4803      	ldr	r0, [pc, #12]	; (8000f3c <W25qxx_ReadStatusRegister+0x84>)
 8000f2e:	f002 fff3 	bl	8003f18 <HAL_GPIO_WritePin>
	return status;
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40010800 	.word	0x40010800
 8000f40:	200007d0 	.word	0x200007d0

08000f44 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8000f48:	2001      	movs	r0, #1
 8000f4a:	f002 faeb 	bl	8003524 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2110      	movs	r1, #16
 8000f52:	480f      	ldr	r0, [pc, #60]	; (8000f90 <W25qxx_WaitForWriteEnd+0x4c>)
 8000f54:	f002 ffe0 	bl	8003f18 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8000f58:	2005      	movs	r0, #5
 8000f5a:	f7ff ff15 	bl	8000d88 <W25qxx_Spi>
  do
  {
    w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000f5e:	20a5      	movs	r0, #165	; 0xa5
 8000f60:	f7ff ff12 	bl	8000d88 <W25qxx_Spi>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461a      	mov	r2, r3
 8000f68:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <W25qxx_WaitForWriteEnd+0x50>)
 8000f6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8000f6e:	2001      	movs	r0, #1
 8000f70:	f002 fad8 	bl	8003524 <HAL_Delay>
  }
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8000f74:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <W25qxx_WaitForWriteEnd+0x50>)
 8000f76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d1ed      	bne.n	8000f5e <W25qxx_WaitForWriteEnd+0x1a>
 HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000f82:	2201      	movs	r2, #1
 8000f84:	2110      	movs	r1, #16
 8000f86:	4802      	ldr	r0, [pc, #8]	; (8000f90 <W25qxx_WaitForWriteEnd+0x4c>)
 8000f88:	f002 ffc6 	bl	8003f18 <HAL_GPIO_WritePin>
}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40010800 	.word	0x40010800
 8000f94:	200007d0 	.word	0x200007d0

08000f98 <W25qxx_Init>:
//###################################################################################################################
bool	W25qxx_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
	w25qxx.Lock=1;	
 8000f9e:	4b60      	ldr	r3, [pc, #384]	; (8001120 <W25qxx_Init+0x188>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick()<100)
 8000fa6:	e002      	b.n	8000fae <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f002 fabb 	bl	8003524 <HAL_Delay>
	while(HAL_GetTick()<100)
 8000fae:	f002 faaf 	bl	8003510 <HAL_GetTick>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b63      	cmp	r3, #99	; 0x63
 8000fb6:	d9f7      	bls.n	8000fa8 <W25qxx_Init+0x10>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2110      	movs	r1, #16
 8000fbc:	4859      	ldr	r0, [pc, #356]	; (8001124 <W25qxx_Init+0x18c>)
 8000fbe:	f002 ffab 	bl	8003f18 <HAL_GPIO_WritePin>
  W25qxx_Delay(100);
 8000fc2:	2064      	movs	r0, #100	; 0x64
 8000fc4:	f002 faae 	bl	8003524 <HAL_Delay>
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Init Begin...\r\n");
	#endif
	id=W25qxx_ReadID();
 8000fc8:	f7ff fef4 	bl	8000db4 <W25qxx_ReadID>
 8000fcc:	6078      	str	r0, [r7, #4]
	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ID:0x%X\r\n",id);
	#endif
	switch(id&0x0000FFFF)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8000fd6:	3b11      	subs	r3, #17
 8000fd8:	2b09      	cmp	r3, #9
 8000fda:	d860      	bhi.n	800109e <W25qxx_Init+0x106>
 8000fdc:	a201      	add	r2, pc, #4	; (adr r2, 8000fe4 <W25qxx_Init+0x4c>)
 8000fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe2:	bf00      	nop
 8000fe4:	08001091 	.word	0x08001091
 8000fe8:	08001083 	.word	0x08001083
 8000fec:	08001075 	.word	0x08001075
 8000ff0:	08001067 	.word	0x08001067
 8000ff4:	08001059 	.word	0x08001059
 8000ff8:	0800104b 	.word	0x0800104b
 8000ffc:	0800103d 	.word	0x0800103d
 8001000:	0800102d 	.word	0x0800102d
 8001004:	0800101d 	.word	0x0800101d
 8001008:	0800100d 	.word	0x0800100d
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 800100c:	4b44      	ldr	r3, [pc, #272]	; (8001120 <W25qxx_Init+0x188>)
 800100e:	220a      	movs	r2, #10
 8001010:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 8001012:	4b43      	ldr	r3, [pc, #268]	; (8001120 <W25qxx_Init+0x188>)
 8001014:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001018:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q512\r\n");
			#endif
		break;
 800101a:	e046      	b.n	80010aa <W25qxx_Init+0x112>
		case 0x4019:	// 	w25q256
			w25qxx.ID=W25Q256;
 800101c:	4b40      	ldr	r3, [pc, #256]	; (8001120 <W25qxx_Init+0x188>)
 800101e:	2209      	movs	r2, #9
 8001020:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 8001022:	4b3f      	ldr	r3, [pc, #252]	; (8001120 <W25qxx_Init+0x188>)
 8001024:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001028:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q256\r\n");
			#endif
		break;
 800102a:	e03e      	b.n	80010aa <W25qxx_Init+0x112>
		case 0x4018:	// 	w25q128
			w25qxx.ID=W25Q128;
 800102c:	4b3c      	ldr	r3, [pc, #240]	; (8001120 <W25qxx_Init+0x188>)
 800102e:	2208      	movs	r2, #8
 8001030:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 8001032:	4b3b      	ldr	r3, [pc, #236]	; (8001120 <W25qxx_Init+0x188>)
 8001034:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001038:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q128\r\n");
			#endif
		break;
 800103a:	e036      	b.n	80010aa <W25qxx_Init+0x112>
		case 0x4017:	//	w25q64
			w25qxx.ID=W25Q64;
 800103c:	4b38      	ldr	r3, [pc, #224]	; (8001120 <W25qxx_Init+0x188>)
 800103e:	2207      	movs	r2, #7
 8001040:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 8001042:	4b37      	ldr	r3, [pc, #220]	; (8001120 <W25qxx_Init+0x188>)
 8001044:	2280      	movs	r2, #128	; 0x80
 8001046:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q64\r\n");
			#endif
		break;
 8001048:	e02f      	b.n	80010aa <W25qxx_Init+0x112>
		case 0x4016:	//	w25q32
			w25qxx.ID=W25Q32;
 800104a:	4b35      	ldr	r3, [pc, #212]	; (8001120 <W25qxx_Init+0x188>)
 800104c:	2206      	movs	r2, #6
 800104e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 8001050:	4b33      	ldr	r3, [pc, #204]	; (8001120 <W25qxx_Init+0x188>)
 8001052:	2240      	movs	r2, #64	; 0x40
 8001054:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q32\r\n");
			#endif
		break;
 8001056:	e028      	b.n	80010aa <W25qxx_Init+0x112>
		case 0x4015:	//	w25q16
			w25qxx.ID=W25Q16;
 8001058:	4b31      	ldr	r3, [pc, #196]	; (8001120 <W25qxx_Init+0x188>)
 800105a:	2205      	movs	r2, #5
 800105c:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 800105e:	4b30      	ldr	r3, [pc, #192]	; (8001120 <W25qxx_Init+0x188>)
 8001060:	2220      	movs	r2, #32
 8001062:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q16\r\n");
			#endif
		break;
 8001064:	e021      	b.n	80010aa <W25qxx_Init+0x112>
		case 0x4014:	//	w25q80
			w25qxx.ID=W25Q80;
 8001066:	4b2e      	ldr	r3, [pc, #184]	; (8001120 <W25qxx_Init+0x188>)
 8001068:	2204      	movs	r2, #4
 800106a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 800106c:	4b2c      	ldr	r3, [pc, #176]	; (8001120 <W25qxx_Init+0x188>)
 800106e:	2210      	movs	r2, #16
 8001070:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q80\r\n");
			#endif
		break;
 8001072:	e01a      	b.n	80010aa <W25qxx_Init+0x112>
		case 0x4013:	//	w25q40
			w25qxx.ID=W25Q40;
 8001074:	4b2a      	ldr	r3, [pc, #168]	; (8001120 <W25qxx_Init+0x188>)
 8001076:	2203      	movs	r2, #3
 8001078:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 800107a:	4b29      	ldr	r3, [pc, #164]	; (8001120 <W25qxx_Init+0x188>)
 800107c:	2208      	movs	r2, #8
 800107e:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q40\r\n");
			#endif
		break;
 8001080:	e013      	b.n	80010aa <W25qxx_Init+0x112>
		case 0x4012:	//	w25q20
			w25qxx.ID=W25Q20;
 8001082:	4b27      	ldr	r3, [pc, #156]	; (8001120 <W25qxx_Init+0x188>)
 8001084:	2202      	movs	r2, #2
 8001086:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 8001088:	4b25      	ldr	r3, [pc, #148]	; (8001120 <W25qxx_Init+0x188>)
 800108a:	2204      	movs	r2, #4
 800108c:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q20\r\n");
			#endif
		break;
 800108e:	e00c      	b.n	80010aa <W25qxx_Init+0x112>
		case 0x4011:	//	w25q10
			w25qxx.ID=W25Q10;
 8001090:	4b23      	ldr	r3, [pc, #140]	; (8001120 <W25qxx_Init+0x188>)
 8001092:	2201      	movs	r2, #1
 8001094:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 8001096:	4b22      	ldr	r3, [pc, #136]	; (8001120 <W25qxx_Init+0x188>)
 8001098:	2202      	movs	r2, #2
 800109a:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q10\r\n");
			#endif
		break;
 800109c:	e005      	b.n	80010aa <W25qxx_Init+0x112>
		default:
				#if (_W25QXX_DEBUG==1)
				printf("w25qxx Unknown ID\r\n");
				#endif
			w25qxx.Lock=0;	
 800109e:	4b20      	ldr	r3, [pc, #128]	; (8001120 <W25qxx_Init+0x188>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return false;
 80010a6:	2300      	movs	r3, #0
 80010a8:	e036      	b.n	8001118 <W25qxx_Init+0x180>
				
	}		
	w25qxx.PageSize=256;
 80010aa:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <W25qxx_Init+0x188>)
 80010ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010b0:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize=0x1000;
 80010b2:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <W25qxx_Init+0x188>)
 80010b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010b8:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 80010ba:	4b19      	ldr	r3, [pc, #100]	; (8001120 <W25qxx_Init+0x188>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	011b      	lsls	r3, r3, #4
 80010c0:	4a17      	ldr	r2, [pc, #92]	; (8001120 <W25qxx_Init+0x188>)
 80010c2:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 80010c4:	4b16      	ldr	r3, [pc, #88]	; (8001120 <W25qxx_Init+0x188>)
 80010c6:	695b      	ldr	r3, [r3, #20]
 80010c8:	4a15      	ldr	r2, [pc, #84]	; (8001120 <W25qxx_Init+0x188>)
 80010ca:	6912      	ldr	r2, [r2, #16]
 80010cc:	fb02 f303 	mul.w	r3, r2, r3
 80010d0:	4a13      	ldr	r2, [pc, #76]	; (8001120 <W25qxx_Init+0x188>)
 80010d2:	8952      	ldrh	r2, [r2, #10]
 80010d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80010d8:	4a11      	ldr	r2, [pc, #68]	; (8001120 <W25qxx_Init+0x188>)
 80010da:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 80010dc:	4b10      	ldr	r3, [pc, #64]	; (8001120 <W25qxx_Init+0x188>)
 80010de:	691b      	ldr	r3, [r3, #16]
 80010e0:	011b      	lsls	r3, r3, #4
 80010e2:	4a0f      	ldr	r2, [pc, #60]	; (8001120 <W25qxx_Init+0x188>)
 80010e4:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <W25qxx_Init+0x188>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4a0d      	ldr	r2, [pc, #52]	; (8001120 <W25qxx_Init+0x188>)
 80010ec:	6912      	ldr	r2, [r2, #16]
 80010ee:	fb02 f303 	mul.w	r3, r2, r3
 80010f2:	0a9b      	lsrs	r3, r3, #10
 80010f4:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <W25qxx_Init+0x188>)
 80010f6:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 80010f8:	f7ff fe92 	bl	8000e20 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f7ff fedb 	bl	8000eb8 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8001102:	2002      	movs	r0, #2
 8001104:	f7ff fed8 	bl	8000eb8 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8001108:	2003      	movs	r0, #3
 800110a:	f7ff fed5 	bl	8000eb8 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
	#endif
	w25qxx.Lock=0;	
 800110e:	4b04      	ldr	r3, [pc, #16]	; (8001120 <W25qxx_Init+0x188>)
 8001110:	2200      	movs	r2, #0
 8001112:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8001116:	2301      	movs	r3, #1
}	
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200007d0 	.word	0x200007d0
 8001124:	40010800 	.word	0x40010800

08001128 <W25qxx_EraseChip>:
//###################################################################################################################
void	W25qxx_EraseChip(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	while(w25qxx.Lock==1)
 800112c:	e002      	b.n	8001134 <W25qxx_EraseChip+0xc>
		W25qxx_Delay(1);
 800112e:	2001      	movs	r0, #1
 8001130:	f002 f9f8 	bl	8003524 <HAL_Delay>
	while(w25qxx.Lock==1)
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <W25qxx_EraseChip+0x54>)
 8001136:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800113a:	2b01      	cmp	r3, #1
 800113c:	d0f7      	beq.n	800112e <W25qxx_EraseChip+0x6>
	w25qxx.Lock=1;	
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <W25qxx_EraseChip+0x54>)
 8001140:	2201      	movs	r2, #1
 8001142:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();	
	printf("w25qxx EraseChip Begin...\r\n");
	#endif
	W25qxx_WriteEnable();
 8001146:	f7ff fea1 	bl	8000e8c <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800114a:	2200      	movs	r2, #0
 800114c:	2110      	movs	r1, #16
 800114e:	480c      	ldr	r0, [pc, #48]	; (8001180 <W25qxx_EraseChip+0x58>)
 8001150:	f002 fee2 	bl	8003f18 <HAL_GPIO_WritePin>
  W25qxx_Spi(0xC7);
 8001154:	20c7      	movs	r0, #199	; 0xc7
 8001156:	f7ff fe17 	bl	8000d88 <W25qxx_Spi>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800115a:	2201      	movs	r2, #1
 800115c:	2110      	movs	r1, #16
 800115e:	4808      	ldr	r0, [pc, #32]	; (8001180 <W25qxx_EraseChip+0x58>)
 8001160:	f002 feda 	bl	8003f18 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8001164:	f7ff feee 	bl	8000f44 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseBlock done after %d ms!\r\n",HAL_GetTick()-StartTime);
	#endif
	W25qxx_Delay(10);
 8001168:	200a      	movs	r0, #10
 800116a:	f002 f9db 	bl	8003524 <HAL_Delay>
	w25qxx.Lock=0;	
 800116e:	4b03      	ldr	r3, [pc, #12]	; (800117c <W25qxx_EraseChip+0x54>)
 8001170:	2200      	movs	r2, #0
 8001172:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200007d0 	.word	0x200007d0
 8001180:	40010800 	.word	0x40010800

08001184 <W25qxx_EraseSector>:
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock==1)
 800118c:	e002      	b.n	8001194 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 800118e:	2001      	movs	r0, #1
 8001190:	f002 f9c8 	bl	8003524 <HAL_Delay>
	while(w25qxx.Lock==1)
 8001194:	4b23      	ldr	r3, [pc, #140]	; (8001224 <W25qxx_EraseSector+0xa0>)
 8001196:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800119a:	2b01      	cmp	r3, #1
 800119c:	d0f7      	beq.n	800118e <W25qxx_EraseSector+0xa>
	w25qxx.Lock=1;	
 800119e:	4b21      	ldr	r3, [pc, #132]	; (8001224 <W25qxx_EraseSector+0xa0>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();	
	printf("w25qxx EraseSector %d Begin...\r\n",SectorAddr);
	#endif
	W25qxx_WaitForWriteEnd();
 80011a6:	f7ff fecd 	bl	8000f44 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 80011aa:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <W25qxx_EraseSector+0xa0>)
 80011ac:	691a      	ldr	r2, [r3, #16]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	fb02 f303 	mul.w	r3, r2, r3
 80011b4:	607b      	str	r3, [r7, #4]
  W25qxx_WriteEnable();
 80011b6:	f7ff fe69 	bl	8000e8c <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2110      	movs	r1, #16
 80011be:	481a      	ldr	r0, [pc, #104]	; (8001228 <W25qxx_EraseSector+0xa4>)
 80011c0:	f002 feaa 	bl	8003f18 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x20);
 80011c4:	2020      	movs	r0, #32
 80011c6:	f7ff fddf 	bl	8000d88 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 80011ca:	4b16      	ldr	r3, [pc, #88]	; (8001224 <W25qxx_EraseSector+0xa0>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b08      	cmp	r3, #8
 80011d0:	d905      	bls.n	80011de <W25qxx_EraseSector+0x5a>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	0e1b      	lsrs	r3, r3, #24
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fdd5 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	0c1b      	lsrs	r3, r3, #16
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fdcf 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	0a1b      	lsrs	r3, r3, #8
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fdc9 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi(SectorAddr & 0xFF);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff fdc4 	bl	8000d88 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001200:	2201      	movs	r2, #1
 8001202:	2110      	movs	r1, #16
 8001204:	4808      	ldr	r0, [pc, #32]	; (8001228 <W25qxx_EraseSector+0xa4>)
 8001206:	f002 fe87 	bl	8003f18 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 800120a:	f7ff fe9b 	bl	8000f44 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseSector done after %d ms\r\n",HAL_GetTick()-StartTime);
	#endif
	W25qxx_Delay(1);
 800120e:	2001      	movs	r0, #1
 8001210:	f002 f988 	bl	8003524 <HAL_Delay>
	w25qxx.Lock=0;
 8001214:	4b03      	ldr	r3, [pc, #12]	; (8001224 <W25qxx_EraseSector+0xa0>)
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	200007d0 	.word	0x200007d0
 8001228:	40010800 	.word	0x40010800

0800122c <W25qxx_EraseBlock>:
//###################################################################################################################
void W25qxx_EraseBlock(uint32_t BlockAddr)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock==1)
 8001234:	e002      	b.n	800123c <W25qxx_EraseBlock+0x10>
		W25qxx_Delay(1);
 8001236:	2001      	movs	r0, #1
 8001238:	f002 f974 	bl	8003524 <HAL_Delay>
	while(w25qxx.Lock==1)
 800123c:	4b24      	ldr	r3, [pc, #144]	; (80012d0 <W25qxx_EraseBlock+0xa4>)
 800123e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001242:	2b01      	cmp	r3, #1
 8001244:	d0f7      	beq.n	8001236 <W25qxx_EraseBlock+0xa>
	w25qxx.Lock=1;	
 8001246:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <W25qxx_EraseBlock+0xa4>)
 8001248:	2201      	movs	r2, #1
 800124a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseBlock %d Begin...\r\n",BlockAddr);
	W25qxx_Delay(100);
	uint32_t	StartTime=HAL_GetTick();	
	#endif
	W25qxx_WaitForWriteEnd();
 800124e:	f7ff fe79 	bl	8000f44 <W25qxx_WaitForWriteEnd>
	BlockAddr = BlockAddr * w25qxx.SectorSize*16;
 8001252:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <W25qxx_EraseBlock+0xa4>)
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	fb02 f303 	mul.w	r3, r2, r3
 800125c:	011b      	lsls	r3, r3, #4
 800125e:	607b      	str	r3, [r7, #4]
  W25qxx_WriteEnable();
 8001260:	f7ff fe14 	bl	8000e8c <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	2110      	movs	r1, #16
 8001268:	481a      	ldr	r0, [pc, #104]	; (80012d4 <W25qxx_EraseBlock+0xa8>)
 800126a:	f002 fe55 	bl	8003f18 <HAL_GPIO_WritePin>
  W25qxx_Spi(0xD8);
 800126e:	20d8      	movs	r0, #216	; 0xd8
 8001270:	f7ff fd8a 	bl	8000d88 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8001274:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <W25qxx_EraseBlock+0xa4>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b08      	cmp	r3, #8
 800127a:	d905      	bls.n	8001288 <W25qxx_EraseBlock+0x5c>
		W25qxx_Spi((BlockAddr & 0xFF000000) >> 24);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	0e1b      	lsrs	r3, r3, #24
 8001280:	b2db      	uxtb	r3, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fd80 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi((BlockAddr & 0xFF0000) >> 16);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	0c1b      	lsrs	r3, r3, #16
 800128c:	b2db      	uxtb	r3, r3
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fd7a 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi((BlockAddr & 0xFF00) >> 8);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	0a1b      	lsrs	r3, r3, #8
 8001298:	b2db      	uxtb	r3, r3
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fd74 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi(BlockAddr & 0xFF);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fd6f 	bl	8000d88 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80012aa:	2201      	movs	r2, #1
 80012ac:	2110      	movs	r1, #16
 80012ae:	4809      	ldr	r0, [pc, #36]	; (80012d4 <W25qxx_EraseBlock+0xa8>)
 80012b0:	f002 fe32 	bl	8003f18 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 80012b4:	f7ff fe46 	bl	8000f44 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseBlock done after %d ms\r\n",HAL_GetTick()-StartTime);
	W25qxx_Delay(100);
	#endif
	W25qxx_Delay(1);
 80012b8:	2001      	movs	r0, #1
 80012ba:	f002 f933 	bl	8003524 <HAL_Delay>
	w25qxx.Lock=0;
 80012be:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <W25qxx_EraseBlock+0xa4>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200007d0 	.word	0x200007d0
 80012d4:	40010800 	.word	0x40010800

080012d8 <W25qxx_SectorToPage>:
{
	return ((SectorAddress*w25qxx.SectorSize)/w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t	W25qxx_SectorToPage(uint32_t	SectorAddress)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	return (SectorAddress*w25qxx.SectorSize)/w25qxx.PageSize;
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <W25qxx_SectorToPage+0x24>)
 80012e2:	691b      	ldr	r3, [r3, #16]
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	fb02 f303 	mul.w	r3, r2, r3
 80012ea:	4a04      	ldr	r2, [pc, #16]	; (80012fc <W25qxx_SectorToPage+0x24>)
 80012ec:	8952      	ldrh	r2, [r2, #10]
 80012ee:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr
 80012fc:	200007d0 	.word	0x200007d0

08001300 <W25qxx_BlockToPage>:
//###################################################################################################################
uint32_t	W25qxx_BlockToPage(uint32_t	BlockAddress)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	return (BlockAddress*w25qxx.BlockSize)/w25qxx.PageSize;
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <W25qxx_BlockToPage+0x24>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	fb02 f303 	mul.w	r3, r2, r3
 8001312:	4a04      	ldr	r2, [pc, #16]	; (8001324 <W25qxx_BlockToPage+0x24>)
 8001314:	8952      	ldrh	r2, [r2, #10]
 8001316:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800131a:	4618      	mov	r0, r3
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	200007d0 	.word	0x200007d0

08001328 <W25qxx_IsEmptyPage>:
//###################################################################################################################
bool 	W25qxx_IsEmptyPage(uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToCheck_up_to_PageSize)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b090      	sub	sp, #64	; 0x40
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
	while(w25qxx.Lock==1)
 8001334:	e002      	b.n	800133c <W25qxx_IsEmptyPage+0x14>
	W25qxx_Delay(1);
 8001336:	2001      	movs	r0, #1
 8001338:	f002 f8f4 	bl	8003524 <HAL_Delay>
	while(w25qxx.Lock==1)
 800133c:	4b6d      	ldr	r3, [pc, #436]	; (80014f4 <W25qxx_IsEmptyPage+0x1cc>)
 800133e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001342:	2b01      	cmp	r3, #1
 8001344:	d0f7      	beq.n	8001336 <W25qxx_IsEmptyPage+0xe>
	w25qxx.Lock=1;	
 8001346:	4b6b      	ldr	r3, [pc, #428]	; (80014f4 <W25qxx_IsEmptyPage+0x1cc>)
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if(((NumByteToCheck_up_to_PageSize+OffsetInByte)>w25qxx.PageSize)||(NumByteToCheck_up_to_PageSize==0))
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	4413      	add	r3, r2
 8001354:	4a67      	ldr	r2, [pc, #412]	; (80014f4 <W25qxx_IsEmptyPage+0x1cc>)
 8001356:	8952      	ldrh	r2, [r2, #10]
 8001358:	4293      	cmp	r3, r2
 800135a:	d802      	bhi.n	8001362 <W25qxx_IsEmptyPage+0x3a>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d105      	bne.n	800136e <W25qxx_IsEmptyPage+0x46>
		NumByteToCheck_up_to_PageSize=w25qxx.PageSize-OffsetInByte;
 8001362:	4b64      	ldr	r3, [pc, #400]	; (80014f4 <W25qxx_IsEmptyPage+0x1cc>)
 8001364:	895b      	ldrh	r3, [r3, #10]
 8001366:	461a      	mov	r2, r3
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	607b      	str	r3, [r7, #4]
	uint32_t	StartTime=HAL_GetTick();
	#endif		
	uint8_t	pBuffer[32];
	uint32_t	WorkAddress;
	uint32_t	i;
	for(i=OffsetInByte; i<w25qxx.PageSize; i+=sizeof(pBuffer))
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001372:	e053      	b.n	800141c <W25qxx_IsEmptyPage+0xf4>
	{
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001374:	2200      	movs	r2, #0
 8001376:	2110      	movs	r1, #16
 8001378:	485f      	ldr	r0, [pc, #380]	; (80014f8 <W25qxx_IsEmptyPage+0x1d0>)
 800137a:	f002 fdcd 	bl	8003f18 <HAL_GPIO_WritePin>
		WorkAddress=(i+Page_Address*w25qxx.PageSize);
 800137e:	4b5d      	ldr	r3, [pc, #372]	; (80014f4 <W25qxx_IsEmptyPage+0x1cc>)
 8001380:	895b      	ldrh	r3, [r3, #10]
 8001382:	461a      	mov	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	fb03 f302 	mul.w	r3, r3, r2
 800138a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800138c:	4413      	add	r3, r2
 800138e:	637b      	str	r3, [r7, #52]	; 0x34
		W25qxx_Spi(0x0B);
 8001390:	200b      	movs	r0, #11
 8001392:	f7ff fcf9 	bl	8000d88 <W25qxx_Spi>
		if(w25qxx.ID>=W25Q256)
 8001396:	4b57      	ldr	r3, [pc, #348]	; (80014f4 <W25qxx_IsEmptyPage+0x1cc>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b08      	cmp	r3, #8
 800139c:	d905      	bls.n	80013aa <W25qxx_IsEmptyPage+0x82>
			W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 800139e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013a0:	0e1b      	lsrs	r3, r3, #24
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fcef 	bl	8000d88 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 80013aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ac:	0c1b      	lsrs	r3, r3, #16
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff fce9 	bl	8000d88 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 80013b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013b8:	0a1b      	lsrs	r3, r3, #8
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fce3 	bl	8000d88 <W25qxx_Spi>
		W25qxx_Spi(WorkAddress & 0xFF);
 80013c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fcde 	bl	8000d88 <W25qxx_Spi>
		W25qxx_Spi(0);
 80013cc:	2000      	movs	r0, #0
 80013ce:	f7ff fcdb 	bl	8000d88 <W25qxx_Spi>
		HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,sizeof(pBuffer),100);	
 80013d2:	f107 0114 	add.w	r1, r7, #20
 80013d6:	2364      	movs	r3, #100	; 0x64
 80013d8:	2220      	movs	r2, #32
 80013da:	4848      	ldr	r0, [pc, #288]	; (80014fc <W25qxx_IsEmptyPage+0x1d4>)
 80013dc:	f006 f835 	bl	800744a <HAL_SPI_Receive>
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);	
 80013e0:	2201      	movs	r2, #1
 80013e2:	2110      	movs	r1, #16
 80013e4:	4844      	ldr	r0, [pc, #272]	; (80014f8 <W25qxx_IsEmptyPage+0x1d0>)
 80013e6:	f002 fd97 	bl	8003f18 <HAL_GPIO_WritePin>
		for(uint8_t x=0;x<sizeof(pBuffer);x++)
 80013ea:	2300      	movs	r3, #0
 80013ec:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80013f0:	e00d      	b.n	800140e <W25qxx_IsEmptyPage+0xe6>
		{
			if(pBuffer[x]!=0xFF)
 80013f2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013f6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80013fa:	4413      	add	r3, r2
 80013fc:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8001400:	2bff      	cmp	r3, #255	; 0xff
 8001402:	d16b      	bne.n	80014dc <W25qxx_IsEmptyPage+0x1b4>
		for(uint8_t x=0;x<sizeof(pBuffer);x++)
 8001404:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001408:	3301      	adds	r3, #1
 800140a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800140e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001412:	2b1f      	cmp	r3, #31
 8001414:	d9ed      	bls.n	80013f2 <W25qxx_IsEmptyPage+0xca>
	for(i=OffsetInByte; i<w25qxx.PageSize; i+=sizeof(pBuffer))
 8001416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001418:	3320      	adds	r3, #32
 800141a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800141c:	4b35      	ldr	r3, [pc, #212]	; (80014f4 <W25qxx_IsEmptyPage+0x1cc>)
 800141e:	895b      	ldrh	r3, [r3, #10]
 8001420:	461a      	mov	r2, r3
 8001422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001424:	4293      	cmp	r3, r2
 8001426:	d3a5      	bcc.n	8001374 <W25qxx_IsEmptyPage+0x4c>
				goto NOT_EMPTY;		
		}			
	}	
	if((w25qxx.PageSize+OffsetInByte)%sizeof(pBuffer)!=0)
 8001428:	4b32      	ldr	r3, [pc, #200]	; (80014f4 <W25qxx_IsEmptyPage+0x1cc>)
 800142a:	895b      	ldrh	r3, [r3, #10]
 800142c:	461a      	mov	r2, r3
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	4413      	add	r3, r2
 8001432:	f003 031f 	and.w	r3, r3, #31
 8001436:	2b00      	cmp	r3, #0
 8001438:	d04a      	beq.n	80014d0 <W25qxx_IsEmptyPage+0x1a8>
	{
		i-=sizeof(pBuffer);
 800143a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800143c:	3b20      	subs	r3, #32
 800143e:	63fb      	str	r3, [r7, #60]	; 0x3c
		for( ; i<w25qxx.PageSize; i++)
 8001440:	e040      	b.n	80014c4 <W25qxx_IsEmptyPage+0x19c>
		{
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001442:	2200      	movs	r2, #0
 8001444:	2110      	movs	r1, #16
 8001446:	482c      	ldr	r0, [pc, #176]	; (80014f8 <W25qxx_IsEmptyPage+0x1d0>)
 8001448:	f002 fd66 	bl	8003f18 <HAL_GPIO_WritePin>
			WorkAddress=(i+Page_Address*w25qxx.PageSize);
 800144c:	4b29      	ldr	r3, [pc, #164]	; (80014f4 <W25qxx_IsEmptyPage+0x1cc>)
 800144e:	895b      	ldrh	r3, [r3, #10]
 8001450:	461a      	mov	r2, r3
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	fb03 f302 	mul.w	r3, r3, r2
 8001458:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800145a:	4413      	add	r3, r2
 800145c:	637b      	str	r3, [r7, #52]	; 0x34
			W25qxx_Spi(0x0B);
 800145e:	200b      	movs	r0, #11
 8001460:	f7ff fc92 	bl	8000d88 <W25qxx_Spi>
			if(w25qxx.ID>=W25Q256)
 8001464:	4b23      	ldr	r3, [pc, #140]	; (80014f4 <W25qxx_IsEmptyPage+0x1cc>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b08      	cmp	r3, #8
 800146a:	d905      	bls.n	8001478 <W25qxx_IsEmptyPage+0x150>
				W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 800146c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800146e:	0e1b      	lsrs	r3, r3, #24
 8001470:	b2db      	uxtb	r3, r3
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fc88 	bl	8000d88 <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8001478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800147a:	0c1b      	lsrs	r3, r3, #16
 800147c:	b2db      	uxtb	r3, r3
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fc82 	bl	8000d88 <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8001484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001486:	0a1b      	lsrs	r3, r3, #8
 8001488:	b2db      	uxtb	r3, r3
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fc7c 	bl	8000d88 <W25qxx_Spi>
			W25qxx_Spi(WorkAddress & 0xFF);
 8001490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001492:	b2db      	uxtb	r3, r3
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fc77 	bl	8000d88 <W25qxx_Spi>
			W25qxx_Spi(0);
 800149a:	2000      	movs	r0, #0
 800149c:	f7ff fc74 	bl	8000d88 <W25qxx_Spi>
			HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,1,100);	
 80014a0:	f107 0114 	add.w	r1, r7, #20
 80014a4:	2364      	movs	r3, #100	; 0x64
 80014a6:	2201      	movs	r2, #1
 80014a8:	4814      	ldr	r0, [pc, #80]	; (80014fc <W25qxx_IsEmptyPage+0x1d4>)
 80014aa:	f005 ffce 	bl	800744a <HAL_SPI_Receive>
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);	
 80014ae:	2201      	movs	r2, #1
 80014b0:	2110      	movs	r1, #16
 80014b2:	4811      	ldr	r0, [pc, #68]	; (80014f8 <W25qxx_IsEmptyPage+0x1d0>)
 80014b4:	f002 fd30 	bl	8003f18 <HAL_GPIO_WritePin>
			if(pBuffer[0]!=0xFF)
 80014b8:	7d3b      	ldrb	r3, [r7, #20]
 80014ba:	2bff      	cmp	r3, #255	; 0xff
 80014bc:	d110      	bne.n	80014e0 <W25qxx_IsEmptyPage+0x1b8>
		for( ; i<w25qxx.PageSize; i++)
 80014be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014c0:	3301      	adds	r3, #1
 80014c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014c4:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <W25qxx_IsEmptyPage+0x1cc>)
 80014c6:	895b      	ldrh	r3, [r3, #10]
 80014c8:	461a      	mov	r2, r3
 80014ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d3b8      	bcc.n	8001442 <W25qxx_IsEmptyPage+0x11a>
	}	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx CheckPage is Empty in %d ms\r\n",HAL_GetTick()-StartTime);
	W25qxx_Delay(100);
	#endif	
	w25qxx.Lock=0;
 80014d0:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <W25qxx_IsEmptyPage+0x1cc>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;	
 80014d8:	2301      	movs	r3, #1
 80014da:	e007      	b.n	80014ec <W25qxx_IsEmptyPage+0x1c4>
				goto NOT_EMPTY;		
 80014dc:	bf00      	nop
 80014de:	e000      	b.n	80014e2 <W25qxx_IsEmptyPage+0x1ba>
				goto NOT_EMPTY;
 80014e0:	bf00      	nop
	NOT_EMPTY:
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx CheckPage is Not Empty in %d ms\r\n",HAL_GetTick()-StartTime);
	W25qxx_Delay(100);
	#endif	
	w25qxx.Lock=0;
 80014e2:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <W25qxx_IsEmptyPage+0x1cc>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return false;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3740      	adds	r7, #64	; 0x40
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	200007d0 	.word	0x200007d0
 80014f8:	40010800 	.word	0x40010800
 80014fc:	200010a4 	.word	0x200010a4

08001500 <W25qxx_IsEmptySector>:
//###################################################################################################################
bool 	W25qxx_IsEmptySector(uint32_t Sector_Address,uint32_t OffsetInByte,uint32_t NumByteToCheck_up_to_SectorSize)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b090      	sub	sp, #64	; 0x40
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
	while(w25qxx.Lock==1)
 800150c:	e002      	b.n	8001514 <W25qxx_IsEmptySector+0x14>
	W25qxx_Delay(1);
 800150e:	2001      	movs	r0, #1
 8001510:	f002 f808 	bl	8003524 <HAL_Delay>
	while(w25qxx.Lock==1)
 8001514:	4b68      	ldr	r3, [pc, #416]	; (80016b8 <W25qxx_IsEmptySector+0x1b8>)
 8001516:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800151a:	2b01      	cmp	r3, #1
 800151c:	d0f7      	beq.n	800150e <W25qxx_IsEmptySector+0xe>
	w25qxx.Lock=1;	
 800151e:	4b66      	ldr	r3, [pc, #408]	; (80016b8 <W25qxx_IsEmptySector+0x1b8>)
 8001520:	2201      	movs	r2, #1
 8001522:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if((NumByteToCheck_up_to_SectorSize>w25qxx.SectorSize)||(NumByteToCheck_up_to_SectorSize==0))
 8001526:	4b64      	ldr	r3, [pc, #400]	; (80016b8 <W25qxx_IsEmptySector+0x1b8>)
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	429a      	cmp	r2, r3
 800152e:	d802      	bhi.n	8001536 <W25qxx_IsEmptySector+0x36>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d102      	bne.n	800153c <W25qxx_IsEmptySector+0x3c>
		NumByteToCheck_up_to_SectorSize=w25qxx.SectorSize;
 8001536:	4b60      	ldr	r3, [pc, #384]	; (80016b8 <W25qxx_IsEmptySector+0x1b8>)
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	607b      	str	r3, [r7, #4]
	uint32_t	StartTime=HAL_GetTick();
	#endif		
	uint8_t	pBuffer[32];
	uint32_t	WorkAddress;
	uint32_t	i;
	for(i=OffsetInByte; i<w25qxx.SectorSize; i+=sizeof(pBuffer))
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001540:	e052      	b.n	80015e8 <W25qxx_IsEmptySector+0xe8>
	{
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	2110      	movs	r1, #16
 8001546:	485d      	ldr	r0, [pc, #372]	; (80016bc <W25qxx_IsEmptySector+0x1bc>)
 8001548:	f002 fce6 	bl	8003f18 <HAL_GPIO_WritePin>
		WorkAddress=(i+Sector_Address*w25qxx.SectorSize);
 800154c:	4b5a      	ldr	r3, [pc, #360]	; (80016b8 <W25qxx_IsEmptySector+0x1b8>)
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	68fa      	ldr	r2, [r7, #12]
 8001552:	fb02 f303 	mul.w	r3, r2, r3
 8001556:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001558:	4413      	add	r3, r2
 800155a:	637b      	str	r3, [r7, #52]	; 0x34
		W25qxx_Spi(0x0B);
 800155c:	200b      	movs	r0, #11
 800155e:	f7ff fc13 	bl	8000d88 <W25qxx_Spi>
		if(w25qxx.ID>=W25Q256)
 8001562:	4b55      	ldr	r3, [pc, #340]	; (80016b8 <W25qxx_IsEmptySector+0x1b8>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b08      	cmp	r3, #8
 8001568:	d905      	bls.n	8001576 <W25qxx_IsEmptySector+0x76>
			W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 800156a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800156c:	0e1b      	lsrs	r3, r3, #24
 800156e:	b2db      	uxtb	r3, r3
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fc09 	bl	8000d88 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8001576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001578:	0c1b      	lsrs	r3, r3, #16
 800157a:	b2db      	uxtb	r3, r3
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fc03 	bl	8000d88 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8001582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001584:	0a1b      	lsrs	r3, r3, #8
 8001586:	b2db      	uxtb	r3, r3
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fbfd 	bl	8000d88 <W25qxx_Spi>
		W25qxx_Spi(WorkAddress & 0xFF);
 800158e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001590:	b2db      	uxtb	r3, r3
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fbf8 	bl	8000d88 <W25qxx_Spi>
		W25qxx_Spi(0);
 8001598:	2000      	movs	r0, #0
 800159a:	f7ff fbf5 	bl	8000d88 <W25qxx_Spi>
		HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,sizeof(pBuffer),100);	
 800159e:	f107 0114 	add.w	r1, r7, #20
 80015a2:	2364      	movs	r3, #100	; 0x64
 80015a4:	2220      	movs	r2, #32
 80015a6:	4846      	ldr	r0, [pc, #280]	; (80016c0 <W25qxx_IsEmptySector+0x1c0>)
 80015a8:	f005 ff4f 	bl	800744a <HAL_SPI_Receive>
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);	
 80015ac:	2201      	movs	r2, #1
 80015ae:	2110      	movs	r1, #16
 80015b0:	4842      	ldr	r0, [pc, #264]	; (80016bc <W25qxx_IsEmptySector+0x1bc>)
 80015b2:	f002 fcb1 	bl	8003f18 <HAL_GPIO_WritePin>
		for(uint8_t x=0;x<sizeof(pBuffer);x++)
 80015b6:	2300      	movs	r3, #0
 80015b8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80015bc:	e00d      	b.n	80015da <W25qxx_IsEmptySector+0xda>
		{
			if(pBuffer[x]!=0xFF)
 80015be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015c2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80015c6:	4413      	add	r3, r2
 80015c8:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80015cc:	2bff      	cmp	r3, #255	; 0xff
 80015ce:	d167      	bne.n	80016a0 <W25qxx_IsEmptySector+0x1a0>
		for(uint8_t x=0;x<sizeof(pBuffer);x++)
 80015d0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015d4:	3301      	adds	r3, #1
 80015d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80015da:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015de:	2b1f      	cmp	r3, #31
 80015e0:	d9ed      	bls.n	80015be <W25qxx_IsEmptySector+0xbe>
	for(i=OffsetInByte; i<w25qxx.SectorSize; i+=sizeof(pBuffer))
 80015e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015e4:	3320      	adds	r3, #32
 80015e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015e8:	4b33      	ldr	r3, [pc, #204]	; (80016b8 <W25qxx_IsEmptySector+0x1b8>)
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d3a7      	bcc.n	8001542 <W25qxx_IsEmptySector+0x42>
				goto NOT_EMPTY;		
		}			
	}	
	if((w25qxx.SectorSize+OffsetInByte)%sizeof(pBuffer)!=0)
 80015f2:	4b31      	ldr	r3, [pc, #196]	; (80016b8 <W25qxx_IsEmptySector+0x1b8>)
 80015f4:	691a      	ldr	r2, [r3, #16]
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	4413      	add	r3, r2
 80015fa:	f003 031f 	and.w	r3, r3, #31
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d048      	beq.n	8001694 <W25qxx_IsEmptySector+0x194>
	{
		i-=sizeof(pBuffer);
 8001602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001604:	3b20      	subs	r3, #32
 8001606:	63fb      	str	r3, [r7, #60]	; 0x3c
		for( ; i<w25qxx.SectorSize; i++)
 8001608:	e03f      	b.n	800168a <W25qxx_IsEmptySector+0x18a>
		{
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800160a:	2200      	movs	r2, #0
 800160c:	2110      	movs	r1, #16
 800160e:	482b      	ldr	r0, [pc, #172]	; (80016bc <W25qxx_IsEmptySector+0x1bc>)
 8001610:	f002 fc82 	bl	8003f18 <HAL_GPIO_WritePin>
			WorkAddress=(i+Sector_Address*w25qxx.SectorSize);
 8001614:	4b28      	ldr	r3, [pc, #160]	; (80016b8 <W25qxx_IsEmptySector+0x1b8>)
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	fb02 f303 	mul.w	r3, r2, r3
 800161e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001620:	4413      	add	r3, r2
 8001622:	637b      	str	r3, [r7, #52]	; 0x34
			W25qxx_Spi(0x0B);
 8001624:	200b      	movs	r0, #11
 8001626:	f7ff fbaf 	bl	8000d88 <W25qxx_Spi>
			if(w25qxx.ID>=W25Q256)
 800162a:	4b23      	ldr	r3, [pc, #140]	; (80016b8 <W25qxx_IsEmptySector+0x1b8>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b08      	cmp	r3, #8
 8001630:	d905      	bls.n	800163e <W25qxx_IsEmptySector+0x13e>
				W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 8001632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001634:	0e1b      	lsrs	r3, r3, #24
 8001636:	b2db      	uxtb	r3, r3
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fba5 	bl	8000d88 <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 800163e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001640:	0c1b      	lsrs	r3, r3, #16
 8001642:	b2db      	uxtb	r3, r3
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fb9f 	bl	8000d88 <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 800164a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800164c:	0a1b      	lsrs	r3, r3, #8
 800164e:	b2db      	uxtb	r3, r3
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fb99 	bl	8000d88 <W25qxx_Spi>
			W25qxx_Spi(WorkAddress & 0xFF);
 8001656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001658:	b2db      	uxtb	r3, r3
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fb94 	bl	8000d88 <W25qxx_Spi>
			W25qxx_Spi(0);
 8001660:	2000      	movs	r0, #0
 8001662:	f7ff fb91 	bl	8000d88 <W25qxx_Spi>
			HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,1,100);	
 8001666:	f107 0114 	add.w	r1, r7, #20
 800166a:	2364      	movs	r3, #100	; 0x64
 800166c:	2201      	movs	r2, #1
 800166e:	4814      	ldr	r0, [pc, #80]	; (80016c0 <W25qxx_IsEmptySector+0x1c0>)
 8001670:	f005 feeb 	bl	800744a <HAL_SPI_Receive>
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);	
 8001674:	2201      	movs	r2, #1
 8001676:	2110      	movs	r1, #16
 8001678:	4810      	ldr	r0, [pc, #64]	; (80016bc <W25qxx_IsEmptySector+0x1bc>)
 800167a:	f002 fc4d 	bl	8003f18 <HAL_GPIO_WritePin>
			if(pBuffer[0]!=0xFF)
 800167e:	7d3b      	ldrb	r3, [r7, #20]
 8001680:	2bff      	cmp	r3, #255	; 0xff
 8001682:	d10f      	bne.n	80016a4 <W25qxx_IsEmptySector+0x1a4>
		for( ; i<w25qxx.SectorSize; i++)
 8001684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001686:	3301      	adds	r3, #1
 8001688:	63fb      	str	r3, [r7, #60]	; 0x3c
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <W25qxx_IsEmptySector+0x1b8>)
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001690:	429a      	cmp	r2, r3
 8001692:	d3ba      	bcc.n	800160a <W25qxx_IsEmptySector+0x10a>
	}	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx CheckSector is Empty in %d ms\r\n",HAL_GetTick()-StartTime);
	W25qxx_Delay(100);
	#endif	
	w25qxx.Lock=0;
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <W25qxx_IsEmptySector+0x1b8>)
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;	
 800169c:	2301      	movs	r3, #1
 800169e:	e007      	b.n	80016b0 <W25qxx_IsEmptySector+0x1b0>
				goto NOT_EMPTY;		
 80016a0:	bf00      	nop
 80016a2:	e000      	b.n	80016a6 <W25qxx_IsEmptySector+0x1a6>
				goto NOT_EMPTY;
 80016a4:	bf00      	nop
	NOT_EMPTY:
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx CheckSector is Not Empty in %d ms\r\n",HAL_GetTick()-StartTime);
	W25qxx_Delay(100);
	#endif	
	w25qxx.Lock=0;
 80016a6:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <W25qxx_IsEmptySector+0x1b8>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return false;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3740      	adds	r7, #64	; 0x40
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	200007d0 	.word	0x200007d0
 80016bc:	40010800 	.word	0x40010800
 80016c0:	200010a4 	.word	0x200010a4

080016c4 <W25qxx_IsEmptyBlock>:
//###################################################################################################################
bool 	W25qxx_IsEmptyBlock(uint32_t Block_Address,uint32_t OffsetInByte,uint32_t NumByteToCheck_up_to_BlockSize)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b090      	sub	sp, #64	; 0x40
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
	while(w25qxx.Lock==1)
 80016d0:	e002      	b.n	80016d8 <W25qxx_IsEmptyBlock+0x14>
	W25qxx_Delay(1);
 80016d2:	2001      	movs	r0, #1
 80016d4:	f001 ff26 	bl	8003524 <HAL_Delay>
	while(w25qxx.Lock==1)
 80016d8:	4b68      	ldr	r3, [pc, #416]	; (800187c <W25qxx_IsEmptyBlock+0x1b8>)
 80016da:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d0f7      	beq.n	80016d2 <W25qxx_IsEmptyBlock+0xe>
	w25qxx.Lock=1;	
 80016e2:	4b66      	ldr	r3, [pc, #408]	; (800187c <W25qxx_IsEmptyBlock+0x1b8>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if((NumByteToCheck_up_to_BlockSize>w25qxx.BlockSize)||(NumByteToCheck_up_to_BlockSize==0))
 80016ea:	4b64      	ldr	r3, [pc, #400]	; (800187c <W25qxx_IsEmptyBlock+0x1b8>)
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d802      	bhi.n	80016fa <W25qxx_IsEmptyBlock+0x36>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d102      	bne.n	8001700 <W25qxx_IsEmptyBlock+0x3c>
		NumByteToCheck_up_to_BlockSize=w25qxx.BlockSize;
 80016fa:	4b60      	ldr	r3, [pc, #384]	; (800187c <W25qxx_IsEmptyBlock+0x1b8>)
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	607b      	str	r3, [r7, #4]
	uint32_t	StartTime=HAL_GetTick();
	#endif		
	uint8_t	pBuffer[32];
	uint32_t	WorkAddress;
	uint32_t	i;
	for(i=OffsetInByte; i<w25qxx.BlockSize; i+=sizeof(pBuffer))
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001704:	e052      	b.n	80017ac <W25qxx_IsEmptyBlock+0xe8>
	{
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001706:	2200      	movs	r2, #0
 8001708:	2110      	movs	r1, #16
 800170a:	485d      	ldr	r0, [pc, #372]	; (8001880 <W25qxx_IsEmptyBlock+0x1bc>)
 800170c:	f002 fc04 	bl	8003f18 <HAL_GPIO_WritePin>
		WorkAddress=(i+Block_Address*w25qxx.BlockSize);
 8001710:	4b5a      	ldr	r3, [pc, #360]	; (800187c <W25qxx_IsEmptyBlock+0x1b8>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	68fa      	ldr	r2, [r7, #12]
 8001716:	fb02 f303 	mul.w	r3, r2, r3
 800171a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800171c:	4413      	add	r3, r2
 800171e:	637b      	str	r3, [r7, #52]	; 0x34
		W25qxx_Spi(0x0B);
 8001720:	200b      	movs	r0, #11
 8001722:	f7ff fb31 	bl	8000d88 <W25qxx_Spi>
		if(w25qxx.ID>=W25Q256)
 8001726:	4b55      	ldr	r3, [pc, #340]	; (800187c <W25qxx_IsEmptyBlock+0x1b8>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b08      	cmp	r3, #8
 800172c:	d905      	bls.n	800173a <W25qxx_IsEmptyBlock+0x76>
			W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 800172e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001730:	0e1b      	lsrs	r3, r3, #24
 8001732:	b2db      	uxtb	r3, r3
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fb27 	bl	8000d88 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 800173a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800173c:	0c1b      	lsrs	r3, r3, #16
 800173e:	b2db      	uxtb	r3, r3
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fb21 	bl	8000d88 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 8001746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001748:	0a1b      	lsrs	r3, r3, #8
 800174a:	b2db      	uxtb	r3, r3
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fb1b 	bl	8000d88 <W25qxx_Spi>
		W25qxx_Spi(WorkAddress & 0xFF);
 8001752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001754:	b2db      	uxtb	r3, r3
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fb16 	bl	8000d88 <W25qxx_Spi>
		W25qxx_Spi(0);
 800175c:	2000      	movs	r0, #0
 800175e:	f7ff fb13 	bl	8000d88 <W25qxx_Spi>
		HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,sizeof(pBuffer),100);	
 8001762:	f107 0114 	add.w	r1, r7, #20
 8001766:	2364      	movs	r3, #100	; 0x64
 8001768:	2220      	movs	r2, #32
 800176a:	4846      	ldr	r0, [pc, #280]	; (8001884 <W25qxx_IsEmptyBlock+0x1c0>)
 800176c:	f005 fe6d 	bl	800744a <HAL_SPI_Receive>
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);	
 8001770:	2201      	movs	r2, #1
 8001772:	2110      	movs	r1, #16
 8001774:	4842      	ldr	r0, [pc, #264]	; (8001880 <W25qxx_IsEmptyBlock+0x1bc>)
 8001776:	f002 fbcf 	bl	8003f18 <HAL_GPIO_WritePin>
		for(uint8_t x=0;x<sizeof(pBuffer);x++)
 800177a:	2300      	movs	r3, #0
 800177c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8001780:	e00d      	b.n	800179e <W25qxx_IsEmptyBlock+0xda>
		{
			if(pBuffer[x]!=0xFF)
 8001782:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001786:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800178a:	4413      	add	r3, r2
 800178c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8001790:	2bff      	cmp	r3, #255	; 0xff
 8001792:	d167      	bne.n	8001864 <W25qxx_IsEmptyBlock+0x1a0>
		for(uint8_t x=0;x<sizeof(pBuffer);x++)
 8001794:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001798:	3301      	adds	r3, #1
 800179a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800179e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80017a2:	2b1f      	cmp	r3, #31
 80017a4:	d9ed      	bls.n	8001782 <W25qxx_IsEmptyBlock+0xbe>
	for(i=OffsetInByte; i<w25qxx.BlockSize; i+=sizeof(pBuffer))
 80017a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017a8:	3320      	adds	r3, #32
 80017aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017ac:	4b33      	ldr	r3, [pc, #204]	; (800187c <W25qxx_IsEmptyBlock+0x1b8>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d3a7      	bcc.n	8001706 <W25qxx_IsEmptyBlock+0x42>
				goto NOT_EMPTY;		
		}			
	}	
	if((w25qxx.BlockSize+OffsetInByte)%sizeof(pBuffer)!=0)
 80017b6:	4b31      	ldr	r3, [pc, #196]	; (800187c <W25qxx_IsEmptyBlock+0x1b8>)
 80017b8:	699a      	ldr	r2, [r3, #24]
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	4413      	add	r3, r2
 80017be:	f003 031f 	and.w	r3, r3, #31
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d048      	beq.n	8001858 <W25qxx_IsEmptyBlock+0x194>
	{
		i-=sizeof(pBuffer);
 80017c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017c8:	3b20      	subs	r3, #32
 80017ca:	63fb      	str	r3, [r7, #60]	; 0x3c
		for( ; i<w25qxx.BlockSize; i++)
 80017cc:	e03f      	b.n	800184e <W25qxx_IsEmptyBlock+0x18a>
		{
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2110      	movs	r1, #16
 80017d2:	482b      	ldr	r0, [pc, #172]	; (8001880 <W25qxx_IsEmptyBlock+0x1bc>)
 80017d4:	f002 fba0 	bl	8003f18 <HAL_GPIO_WritePin>
			WorkAddress=(i+Block_Address*w25qxx.BlockSize);
 80017d8:	4b28      	ldr	r3, [pc, #160]	; (800187c <W25qxx_IsEmptyBlock+0x1b8>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	fb02 f303 	mul.w	r3, r2, r3
 80017e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017e4:	4413      	add	r3, r2
 80017e6:	637b      	str	r3, [r7, #52]	; 0x34
			W25qxx_Spi(0x0B);
 80017e8:	200b      	movs	r0, #11
 80017ea:	f7ff facd 	bl	8000d88 <W25qxx_Spi>
			if(w25qxx.ID>=W25Q256)
 80017ee:	4b23      	ldr	r3, [pc, #140]	; (800187c <W25qxx_IsEmptyBlock+0x1b8>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b08      	cmp	r3, #8
 80017f4:	d905      	bls.n	8001802 <W25qxx_IsEmptyBlock+0x13e>
				W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 80017f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017f8:	0e1b      	lsrs	r3, r3, #24
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fac3 	bl	8000d88 <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 8001802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001804:	0c1b      	lsrs	r3, r3, #16
 8001806:	b2db      	uxtb	r3, r3
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fabd 	bl	8000d88 <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 800180e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001810:	0a1b      	lsrs	r3, r3, #8
 8001812:	b2db      	uxtb	r3, r3
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff fab7 	bl	8000d88 <W25qxx_Spi>
			W25qxx_Spi(WorkAddress & 0xFF);
 800181a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800181c:	b2db      	uxtb	r3, r3
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fab2 	bl	8000d88 <W25qxx_Spi>
			W25qxx_Spi(0);
 8001824:	2000      	movs	r0, #0
 8001826:	f7ff faaf 	bl	8000d88 <W25qxx_Spi>
			HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,1,100);	
 800182a:	f107 0114 	add.w	r1, r7, #20
 800182e:	2364      	movs	r3, #100	; 0x64
 8001830:	2201      	movs	r2, #1
 8001832:	4814      	ldr	r0, [pc, #80]	; (8001884 <W25qxx_IsEmptyBlock+0x1c0>)
 8001834:	f005 fe09 	bl	800744a <HAL_SPI_Receive>
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);	
 8001838:	2201      	movs	r2, #1
 800183a:	2110      	movs	r1, #16
 800183c:	4810      	ldr	r0, [pc, #64]	; (8001880 <W25qxx_IsEmptyBlock+0x1bc>)
 800183e:	f002 fb6b 	bl	8003f18 <HAL_GPIO_WritePin>
			if(pBuffer[0]!=0xFF)
 8001842:	7d3b      	ldrb	r3, [r7, #20]
 8001844:	2bff      	cmp	r3, #255	; 0xff
 8001846:	d10f      	bne.n	8001868 <W25qxx_IsEmptyBlock+0x1a4>
		for( ; i<w25qxx.BlockSize; i++)
 8001848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800184a:	3301      	adds	r3, #1
 800184c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800184e:	4b0b      	ldr	r3, [pc, #44]	; (800187c <W25qxx_IsEmptyBlock+0x1b8>)
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001854:	429a      	cmp	r2, r3
 8001856:	d3ba      	bcc.n	80017ce <W25qxx_IsEmptyBlock+0x10a>
	}	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx CheckBlock is Empty in %d ms\r\n",HAL_GetTick()-StartTime);
	W25qxx_Delay(100);
	#endif	
	w25qxx.Lock=0;
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <W25qxx_IsEmptyBlock+0x1b8>)
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;	
 8001860:	2301      	movs	r3, #1
 8001862:	e007      	b.n	8001874 <W25qxx_IsEmptyBlock+0x1b0>
				goto NOT_EMPTY;		
 8001864:	bf00      	nop
 8001866:	e000      	b.n	800186a <W25qxx_IsEmptyBlock+0x1a6>
				goto NOT_EMPTY;
 8001868:	bf00      	nop
	NOT_EMPTY:
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx CheckBlock is Not Empty in %d ms\r\n",HAL_GetTick()-StartTime);
	W25qxx_Delay(100);
	#endif	
	w25qxx.Lock=0;
 800186a:	4b04      	ldr	r3, [pc, #16]	; (800187c <W25qxx_IsEmptyBlock+0x1b8>)
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return false;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	3740      	adds	r7, #64	; 0x40
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	200007d0 	.word	0x200007d0
 8001880:	40010800 	.word	0x40010800
 8001884:	200010a4 	.word	0x200010a4

08001888 <W25qxx_WriteByte>:
//###################################################################################################################
void W25qxx_WriteByte(uint8_t pBuffer, uint32_t WriteAddr_inBytes)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	6039      	str	r1, [r7, #0]
 8001892:	71fb      	strb	r3, [r7, #7]
	while(w25qxx.Lock==1)
 8001894:	e002      	b.n	800189c <W25qxx_WriteByte+0x14>
		W25qxx_Delay(1);
 8001896:	2001      	movs	r0, #1
 8001898:	f001 fe44 	bl	8003524 <HAL_Delay>
	while(w25qxx.Lock==1)
 800189c:	4b21      	ldr	r3, [pc, #132]	; (8001924 <W25qxx_WriteByte+0x9c>)
 800189e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d0f7      	beq.n	8001896 <W25qxx_WriteByte+0xe>
	w25qxx.Lock=1;
 80018a6:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <W25qxx_WriteByte+0x9c>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();
	printf("w25qxx WriteByte 0x%02X at address %d begin...",pBuffer,WriteAddr_inBytes);
	#endif
	W25qxx_WaitForWriteEnd();
 80018ae:	f7ff fb49 	bl	8000f44 <W25qxx_WaitForWriteEnd>
  W25qxx_WriteEnable();
 80018b2:	f7ff faeb 	bl	8000e8c <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2110      	movs	r1, #16
 80018ba:	481b      	ldr	r0, [pc, #108]	; (8001928 <W25qxx_WriteByte+0xa0>)
 80018bc:	f002 fb2c 	bl	8003f18 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x02);
 80018c0:	2002      	movs	r0, #2
 80018c2:	f7ff fa61 	bl	8000d88 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 80018c6:	4b17      	ldr	r3, [pc, #92]	; (8001924 <W25qxx_WriteByte+0x9c>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b08      	cmp	r3, #8
 80018cc:	d905      	bls.n	80018da <W25qxx_WriteByte+0x52>
		W25qxx_Spi((WriteAddr_inBytes & 0xFF000000) >> 24);
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	0e1b      	lsrs	r3, r3, #24
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fa57 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi((WriteAddr_inBytes & 0xFF0000) >> 16);
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	0c1b      	lsrs	r3, r3, #16
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fa51 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi((WriteAddr_inBytes & 0xFF00) >> 8);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	0a1b      	lsrs	r3, r3, #8
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fa4b 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi(WriteAddr_inBytes & 0xFF);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fa46 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi(pBuffer);
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fa42 	bl	8000d88 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001904:	2201      	movs	r2, #1
 8001906:	2110      	movs	r1, #16
 8001908:	4807      	ldr	r0, [pc, #28]	; (8001928 <W25qxx_WriteByte+0xa0>)
 800190a:	f002 fb05 	bl	8003f18 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 800190e:	f7ff fb19 	bl	8000f44 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx WriteByte done after %d ms\r\n",HAL_GetTick()-StartTime);
	#endif
	w25qxx.Lock=0;
 8001912:	4b04      	ldr	r3, [pc, #16]	; (8001924 <W25qxx_WriteByte+0x9c>)
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	200007d0 	.word	0x200007d0
 8001928:	40010800 	.word	0x40010800

0800192c <W25qxx_WritePage>:
//###################################################################################################################
void 	W25qxx_WritePage(uint8_t *pBuffer	,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToWrite_up_to_PageSize)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
 8001938:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 800193a:	e002      	b.n	8001942 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 800193c:	2001      	movs	r0, #1
 800193e:	f001 fdf1 	bl	8003524 <HAL_Delay>
	while(w25qxx.Lock==1)
 8001942:	4b37      	ldr	r3, [pc, #220]	; (8001a20 <W25qxx_WritePage+0xf4>)
 8001944:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001948:	2b01      	cmp	r3, #1
 800194a:	d0f7      	beq.n	800193c <W25qxx_WritePage+0x10>
	w25qxx.Lock=1;
 800194c:	4b34      	ldr	r3, [pc, #208]	; (8001a20 <W25qxx_WritePage+0xf4>)
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if(((NumByteToWrite_up_to_PageSize+OffsetInByte)>w25qxx.PageSize)||(NumByteToWrite_up_to_PageSize==0))
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4413      	add	r3, r2
 800195a:	4a31      	ldr	r2, [pc, #196]	; (8001a20 <W25qxx_WritePage+0xf4>)
 800195c:	8952      	ldrh	r2, [r2, #10]
 800195e:	4293      	cmp	r3, r2
 8001960:	d802      	bhi.n	8001968 <W25qxx_WritePage+0x3c>
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d105      	bne.n	8001974 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize=w25qxx.PageSize-OffsetInByte;
 8001968:	4b2d      	ldr	r3, [pc, #180]	; (8001a20 <W25qxx_WritePage+0xf4>)
 800196a:	895b      	ldrh	r3, [r3, #10]
 800196c:	461a      	mov	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	603b      	str	r3, [r7, #0]
	if((OffsetInByte+NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	4413      	add	r3, r2
 800197a:	4a29      	ldr	r2, [pc, #164]	; (8001a20 <W25qxx_WritePage+0xf4>)
 800197c:	8952      	ldrh	r2, [r2, #10]
 800197e:	4293      	cmp	r3, r2
 8001980:	d905      	bls.n	800198e <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 8001982:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <W25qxx_WritePage+0xf4>)
 8001984:	895b      	ldrh	r3, [r3, #10]
 8001986:	461a      	mov	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t	StartTime=HAL_GetTick();
	#endif	
	W25qxx_WaitForWriteEnd();
 800198e:	f7ff fad9 	bl	8000f44 <W25qxx_WaitForWriteEnd>
  W25qxx_WriteEnable();
 8001992:	f7ff fa7b 	bl	8000e8c <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001996:	2200      	movs	r2, #0
 8001998:	2110      	movs	r1, #16
 800199a:	4822      	ldr	r0, [pc, #136]	; (8001a24 <W25qxx_WritePage+0xf8>)
 800199c:	f002 fabc 	bl	8003f18 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x02);
 80019a0:	2002      	movs	r0, #2
 80019a2:	f7ff f9f1 	bl	8000d88 <W25qxx_Spi>
	Page_Address = (Page_Address*w25qxx.PageSize)+OffsetInByte;	
 80019a6:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <W25qxx_WritePage+0xf4>)
 80019a8:	895b      	ldrh	r3, [r3, #10]
 80019aa:	461a      	mov	r2, r3
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	fb03 f302 	mul.w	r3, r3, r2
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	60bb      	str	r3, [r7, #8]
	if(w25qxx.ID>=W25Q256)
 80019b8:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <W25qxx_WritePage+0xf4>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b08      	cmp	r3, #8
 80019be:	d905      	bls.n	80019cc <W25qxx_WritePage+0xa0>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	0e1b      	lsrs	r3, r3, #24
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff f9de 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	0c1b      	lsrs	r3, r3, #16
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff f9d8 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	0a1b      	lsrs	r3, r3, #8
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff f9d2 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi(Page_Address&0xFF);
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff f9cd 	bl	8000d88 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI,pBuffer,NumByteToWrite_up_to_PageSize,100);	
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	2364      	movs	r3, #100	; 0x64
 80019f4:	68f9      	ldr	r1, [r7, #12]
 80019f6:	480c      	ldr	r0, [pc, #48]	; (8001a28 <W25qxx_WritePage+0xfc>)
 80019f8:	f005 fbf3 	bl	80071e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80019fc:	2201      	movs	r2, #1
 80019fe:	2110      	movs	r1, #16
 8001a00:	4808      	ldr	r0, [pc, #32]	; (8001a24 <W25qxx_WritePage+0xf8>)
 8001a02:	f002 fa89 	bl	8003f18 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 8001a06:	f7ff fa9d 	bl	8000f44 <W25qxx_WaitForWriteEnd>
	}	
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif	
	W25qxx_Delay(1);
 8001a0a:	2001      	movs	r0, #1
 8001a0c:	f001 fd8a 	bl	8003524 <HAL_Delay>
	w25qxx.Lock=0;
 8001a10:	4b03      	ldr	r3, [pc, #12]	; (8001a20 <W25qxx_WritePage+0xf4>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001a18:	bf00      	nop
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	200007d0 	.word	0x200007d0
 8001a24:	40010800 	.word	0x40010800
 8001a28:	200010a4 	.word	0x200010a4

08001a2c <W25qxx_WriteSector>:
//###################################################################################################################
void 	W25qxx_WriteSector(uint8_t *pBuffer	,uint32_t Sector_Address,uint32_t OffsetInByte	,uint32_t NumByteToWrite_up_to_SectorSize)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
 8001a38:	603b      	str	r3, [r7, #0]
	if((NumByteToWrite_up_to_SectorSize>w25qxx.SectorSize)||(NumByteToWrite_up_to_SectorSize==0))
 8001a3a:	4b2b      	ldr	r3, [pc, #172]	; (8001ae8 <W25qxx_WriteSector+0xbc>)
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d802      	bhi.n	8001a4a <W25qxx_WriteSector+0x1e>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d102      	bne.n	8001a50 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize=w25qxx.SectorSize;
 8001a4a:	4b27      	ldr	r3, [pc, #156]	; (8001ae8 <W25qxx_WriteSector+0xbc>)
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n",Sector_Address,OffsetInByte,NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
	#endif	
	if(OffsetInByte>=w25qxx.SectorSize)
 8001a50:	4b25      	ldr	r3, [pc, #148]	; (8001ae8 <W25qxx_WriteSector+0xbc>)
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d241      	bcs.n	8001ade <W25qxx_WriteSector+0xb2>
		return;
	}	
	uint32_t	StartPage;
	int32_t		BytesToWrite;
	uint32_t	LocalOffset;	
	if((OffsetInByte+NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	441a      	add	r2, r3
 8001a60:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <W25qxx_WriteSector+0xbc>)
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d905      	bls.n	8001a74 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize-OffsetInByte;
 8001a68:	4b1f      	ldr	r3, [pc, #124]	; (8001ae8 <W25qxx_WriteSector+0xbc>)
 8001a6a:	691a      	ldr	r2, [r3, #16]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	61bb      	str	r3, [r7, #24]
 8001a72:	e001      	b.n	8001a78 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;	
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address)+(OffsetInByte/w25qxx.PageSize);
 8001a78:	68b8      	ldr	r0, [r7, #8]
 8001a7a:	f7ff fc2d 	bl	80012d8 <W25qxx_SectorToPage>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <W25qxx_WriteSector+0xbc>)
 8001a82:	895b      	ldrh	r3, [r3, #10]
 8001a84:	4619      	mov	r1, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a8c:	4413      	add	r3, r2
 8001a8e:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;	
 8001a90:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <W25qxx_WriteSector+0xbc>)
 8001a92:	895b      	ldrh	r3, [r3, #10]
 8001a94:	461a      	mov	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a9c:	fb02 f201 	mul.w	r2, r2, r1
 8001aa0:	1a9b      	subs	r3, r3, r2
 8001aa2:	617b      	str	r3, [r7, #20]
	do
	{		
		W25qxx_WritePage(pBuffer,StartPage,LocalOffset,BytesToWrite);
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	69f9      	ldr	r1, [r7, #28]
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f7ff ff3e 	bl	800192c <W25qxx_WritePage>
		StartPage++;
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	61fb      	str	r3, [r7, #28]
		BytesToWrite-=w25qxx.PageSize-LocalOffset;
 8001ab6:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <W25qxx_WriteSector+0xbc>)
 8001ab8:	895b      	ldrh	r3, [r3, #10]
 8001aba:	461a      	mov	r2, r3
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	1a9a      	subs	r2, r3, r2
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
		pBuffer+=w25qxx.PageSize;	
 8001ac6:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <W25qxx_WriteSector+0xbc>)
 8001ac8:	895b      	ldrh	r3, [r3, #10]
 8001aca:	461a      	mov	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4413      	add	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
	}while(BytesToWrite>0);		
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	dce3      	bgt.n	8001aa4 <W25qxx_WriteSector+0x78>
 8001adc:	e000      	b.n	8001ae0 <W25qxx_WriteSector+0xb4>
		return;
 8001ade:	bf00      	nop
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
	#endif	
}
 8001ae0:	3720      	adds	r7, #32
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200007d0 	.word	0x200007d0

08001aec <W25qxx_WriteBlock>:
//###################################################################################################################
void 	W25qxx_WriteBlock	(uint8_t* pBuffer ,uint32_t Block_Address	,uint32_t OffsetInByte	,uint32_t	NumByteToWrite_up_to_BlockSize)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
 8001af8:	603b      	str	r3, [r7, #0]
	if((NumByteToWrite_up_to_BlockSize>w25qxx.BlockSize)||(NumByteToWrite_up_to_BlockSize==0))
 8001afa:	4b2b      	ldr	r3, [pc, #172]	; (8001ba8 <W25qxx_WriteBlock+0xbc>)
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d802      	bhi.n	8001b0a <W25qxx_WriteBlock+0x1e>
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d102      	bne.n	8001b10 <W25qxx_WriteBlock+0x24>
		NumByteToWrite_up_to_BlockSize=w25qxx.BlockSize;
 8001b0a:	4b27      	ldr	r3, [pc, #156]	; (8001ba8 <W25qxx_WriteBlock+0xbc>)
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx WriteBlock:%d, Offset:%d ,Write %d Bytes, begin...\r\n",Block_Address,OffsetInByte,NumByteToWrite_up_to_BlockSize);
	W25qxx_Delay(100);
	#endif	
	if(OffsetInByte>=w25qxx.BlockSize)
 8001b10:	4b25      	ldr	r3, [pc, #148]	; (8001ba8 <W25qxx_WriteBlock+0xbc>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d241      	bcs.n	8001b9e <W25qxx_WriteBlock+0xb2>
		return;
	}	
	uint32_t	StartPage;
	int32_t		BytesToWrite;
	uint32_t	LocalOffset;	
	if((OffsetInByte+NumByteToWrite_up_to_BlockSize) > w25qxx.BlockSize)
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	441a      	add	r2, r3
 8001b20:	4b21      	ldr	r3, [pc, #132]	; (8001ba8 <W25qxx_WriteBlock+0xbc>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d905      	bls.n	8001b34 <W25qxx_WriteBlock+0x48>
		BytesToWrite = w25qxx.BlockSize-OffsetInByte;
 8001b28:	4b1f      	ldr	r3, [pc, #124]	; (8001ba8 <W25qxx_WriteBlock+0xbc>)
 8001b2a:	699a      	ldr	r2, [r3, #24]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	61bb      	str	r3, [r7, #24]
 8001b32:	e001      	b.n	8001b38 <W25qxx_WriteBlock+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_BlockSize;	
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_BlockToPage(Block_Address)+(OffsetInByte/w25qxx.PageSize);
 8001b38:	68b8      	ldr	r0, [r7, #8]
 8001b3a:	f7ff fbe1 	bl	8001300 <W25qxx_BlockToPage>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	4b19      	ldr	r3, [pc, #100]	; (8001ba8 <W25qxx_WriteBlock+0xbc>)
 8001b42:	895b      	ldrh	r3, [r3, #10]
 8001b44:	4619      	mov	r1, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b4c:	4413      	add	r3, r2
 8001b4e:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;	
 8001b50:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <W25qxx_WriteBlock+0xbc>)
 8001b52:	895b      	ldrh	r3, [r3, #10]
 8001b54:	461a      	mov	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b5c:	fb02 f201 	mul.w	r2, r2, r1
 8001b60:	1a9b      	subs	r3, r3, r2
 8001b62:	617b      	str	r3, [r7, #20]
	do
	{		
		W25qxx_WritePage(pBuffer,StartPage,LocalOffset,BytesToWrite);
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	69f9      	ldr	r1, [r7, #28]
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f7ff fede 	bl	800192c <W25qxx_WritePage>
		StartPage++;
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	3301      	adds	r3, #1
 8001b74:	61fb      	str	r3, [r7, #28]
		BytesToWrite-=w25qxx.PageSize-LocalOffset;
 8001b76:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <W25qxx_WriteBlock+0xbc>)
 8001b78:	895b      	ldrh	r3, [r3, #10]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	1a9a      	subs	r2, r3, r2
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	4413      	add	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
		pBuffer+=w25qxx.PageSize;	
 8001b86:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <W25qxx_WriteBlock+0xbc>)
 8001b88:	895b      	ldrh	r3, [r3, #10]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	4413      	add	r3, r2
 8001b90:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
	}while(BytesToWrite>0);		
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	dce3      	bgt.n	8001b64 <W25qxx_WriteBlock+0x78>
 8001b9c:	e000      	b.n	8001ba0 <W25qxx_WriteBlock+0xb4>
		return;
 8001b9e:	bf00      	nop
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx WriteBlock Done\r\n");
	W25qxx_Delay(100);
	#endif	
}
 8001ba0:	3720      	adds	r7, #32
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200007d0 	.word	0x200007d0

08001bac <W25qxx_ReadByte>:
//###################################################################################################################
void 	W25qxx_ReadByte(uint8_t *pBuffer,uint32_t Bytes_Address)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
	while(w25qxx.Lock==1)
 8001bb6:	e002      	b.n	8001bbe <W25qxx_ReadByte+0x12>
		W25qxx_Delay(1);
 8001bb8:	2001      	movs	r0, #1
 8001bba:	f001 fcb3 	bl	8003524 <HAL_Delay>
	while(w25qxx.Lock==1)
 8001bbe:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <W25qxx_ReadByte+0x98>)
 8001bc0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d0f7      	beq.n	8001bb8 <W25qxx_ReadByte+0xc>
	w25qxx.Lock=1;
 8001bc8:	4b1e      	ldr	r3, [pc, #120]	; (8001c44 <W25qxx_ReadByte+0x98>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();
	printf("w25qxx ReadByte at address %d begin...\r\n",Bytes_Address);
	#endif
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2110      	movs	r1, #16
 8001bd4:	481c      	ldr	r0, [pc, #112]	; (8001c48 <W25qxx_ReadByte+0x9c>)
 8001bd6:	f002 f99f 	bl	8003f18 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x0B);
 8001bda:	200b      	movs	r0, #11
 8001bdc:	f7ff f8d4 	bl	8000d88 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8001be0:	4b18      	ldr	r3, [pc, #96]	; (8001c44 <W25qxx_ReadByte+0x98>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	d905      	bls.n	8001bf4 <W25qxx_ReadByte+0x48>
		W25qxx_Spi((Bytes_Address & 0xFF000000) >> 24);
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	0e1b      	lsrs	r3, r3, #24
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff f8ca 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi((Bytes_Address & 0xFF0000) >> 16);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	0c1b      	lsrs	r3, r3, #16
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff f8c4 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi((Bytes_Address& 0xFF00) >> 8);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	0a1b      	lsrs	r3, r3, #8
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff f8be 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi(Bytes_Address & 0xFF);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff f8b9 	bl	8000d88 <W25qxx_Spi>
	W25qxx_Spi(0);
 8001c16:	2000      	movs	r0, #0
 8001c18:	f7ff f8b6 	bl	8000d88 <W25qxx_Spi>
	*pBuffer = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001c1c:	20a5      	movs	r0, #165	; 0xa5
 8001c1e:	f7ff f8b3 	bl	8000d88 <W25qxx_Spi>
 8001c22:	4603      	mov	r3, r0
 8001c24:	461a      	mov	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);	
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	2110      	movs	r1, #16
 8001c2e:	4806      	ldr	r0, [pc, #24]	; (8001c48 <W25qxx_ReadByte+0x9c>)
 8001c30:	f002 f972 	bl	8003f18 <HAL_GPIO_WritePin>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ReadByte 0x%02X done after %d ms\r\n",*pBuffer,HAL_GetTick()-StartTime);
	#endif
	w25qxx.Lock=0;
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <W25qxx_ReadByte+0x98>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001c3c:	bf00      	nop
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	200007d0 	.word	0x200007d0
 8001c48:	40010800 	.word	0x40010800

08001c4c <W25qxx_ReadBytes>:
//###################################################################################################################
void W25qxx_ReadBytes(uint8_t* pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
	while(w25qxx.Lock==1)
 8001c58:	e002      	b.n	8001c60 <W25qxx_ReadBytes+0x14>
		W25qxx_Delay(1);
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	f001 fc62 	bl	8003524 <HAL_Delay>
	while(w25qxx.Lock==1)
 8001c60:	4b23      	ldr	r3, [pc, #140]	; (8001cf0 <W25qxx_ReadBytes+0xa4>)
 8001c62:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d0f7      	beq.n	8001c5a <W25qxx_ReadBytes+0xe>
	w25qxx.Lock=1;
 8001c6a:	4b21      	ldr	r3, [pc, #132]	; (8001cf0 <W25qxx_ReadBytes+0xa4>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();
	printf("w25qxx ReadBytes at Address:%d, %d Bytes  begin...\r\n",ReadAddr,NumByteToRead);
	#endif	
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2110      	movs	r1, #16
 8001c76:	481f      	ldr	r0, [pc, #124]	; (8001cf4 <W25qxx_ReadBytes+0xa8>)
 8001c78:	f002 f94e 	bl	8003f18 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x0B);
 8001c7c:	200b      	movs	r0, #11
 8001c7e:	f7ff f883 	bl	8000d88 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8001c82:	4b1b      	ldr	r3, [pc, #108]	; (8001cf0 <W25qxx_ReadBytes+0xa4>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d905      	bls.n	8001c96 <W25qxx_ReadBytes+0x4a>
		W25qxx_Spi((ReadAddr & 0xFF000000) >> 24);
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	0e1b      	lsrs	r3, r3, #24
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff f879 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi((ReadAddr & 0xFF0000) >> 16);
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	0c1b      	lsrs	r3, r3, #16
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff f873 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi((ReadAddr& 0xFF00) >> 8);
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	0a1b      	lsrs	r3, r3, #8
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff f86d 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi(ReadAddr & 0xFF);
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff f868 	bl	8000d88 <W25qxx_Spi>
	W25qxx_Spi(0);
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f7ff f865 	bl	8000d88 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,NumByteToRead,2000);	
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001cc6:	68f9      	ldr	r1, [r7, #12]
 8001cc8:	480b      	ldr	r0, [pc, #44]	; (8001cf8 <W25qxx_ReadBytes+0xac>)
 8001cca:	f005 fbbe 	bl	800744a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001cce:	2201      	movs	r2, #1
 8001cd0:	2110      	movs	r1, #16
 8001cd2:	4808      	ldr	r0, [pc, #32]	; (8001cf4 <W25qxx_ReadBytes+0xa8>)
 8001cd4:	f002 f920 	bl	8003f18 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadBytes done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif	
	W25qxx_Delay(1);
 8001cd8:	2001      	movs	r0, #1
 8001cda:	f001 fc23 	bl	8003524 <HAL_Delay>
	w25qxx.Lock=0;
 8001cde:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <W25qxx_ReadBytes+0xa4>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200007d0 	.word	0x200007d0
 8001cf4:	40010800 	.word	0x40010800
 8001cf8:	200010a4 	.word	0x200010a4

08001cfc <W25qxx_ReadPage>:
//###################################################################################################################
void 	W25qxx_ReadPage(uint8_t *pBuffer,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToRead_up_to_PageSize)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
 8001d08:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 8001d0a:	e002      	b.n	8001d12 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	f001 fc09 	bl	8003524 <HAL_Delay>
	while(w25qxx.Lock==1)
 8001d12:	4b34      	ldr	r3, [pc, #208]	; (8001de4 <W25qxx_ReadPage+0xe8>)
 8001d14:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d0f7      	beq.n	8001d0c <W25qxx_ReadPage+0x10>
	w25qxx.Lock=1;
 8001d1c:	4b31      	ldr	r3, [pc, #196]	; (8001de4 <W25qxx_ReadPage+0xe8>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if((NumByteToRead_up_to_PageSize>w25qxx.PageSize)||(NumByteToRead_up_to_PageSize==0))
 8001d24:	4b2f      	ldr	r3, [pc, #188]	; (8001de4 <W25qxx_ReadPage+0xe8>)
 8001d26:	895b      	ldrh	r3, [r3, #10]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d802      	bhi.n	8001d36 <W25qxx_ReadPage+0x3a>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d102      	bne.n	8001d3c <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize=w25qxx.PageSize;
 8001d36:	4b2b      	ldr	r3, [pc, #172]	; (8001de4 <W25qxx_ReadPage+0xe8>)
 8001d38:	895b      	ldrh	r3, [r3, #10]
 8001d3a:	603b      	str	r3, [r7, #0]
	if((OffsetInByte+NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	4413      	add	r3, r2
 8001d42:	4a28      	ldr	r2, [pc, #160]	; (8001de4 <W25qxx_ReadPage+0xe8>)
 8001d44:	8952      	ldrh	r2, [r2, #10]
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d905      	bls.n	8001d56 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 8001d4a:	4b26      	ldr	r3, [pc, #152]	; (8001de4 <W25qxx_ReadPage+0xe8>)
 8001d4c:	895b      	ldrh	r3, [r3, #10]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t	StartTime=HAL_GetTick();
	#endif	
	Page_Address = Page_Address*w25qxx.PageSize+OffsetInByte;
 8001d56:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <W25qxx_ReadPage+0xe8>)
 8001d58:	895b      	ldrh	r3, [r3, #10]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	fb03 f302 	mul.w	r3, r3, r2
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	4413      	add	r3, r2
 8001d66:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2110      	movs	r1, #16
 8001d6c:	481e      	ldr	r0, [pc, #120]	; (8001de8 <W25qxx_ReadPage+0xec>)
 8001d6e:	f002 f8d3 	bl	8003f18 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x0B);
 8001d72:	200b      	movs	r0, #11
 8001d74:	f7ff f808 	bl	8000d88 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8001d78:	4b1a      	ldr	r3, [pc, #104]	; (8001de4 <W25qxx_ReadPage+0xe8>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d905      	bls.n	8001d8c <W25qxx_ReadPage+0x90>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	0e1b      	lsrs	r3, r3, #24
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fffe 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	0c1b      	lsrs	r3, r3, #16
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fff8 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi((Page_Address& 0xFF00) >> 8);
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	0a1b      	lsrs	r3, r3, #8
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe fff2 	bl	8000d88 <W25qxx_Spi>
  W25qxx_Spi(Page_Address & 0xFF);
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe ffed 	bl	8000d88 <W25qxx_Spi>
	W25qxx_Spi(0);
 8001dae:	2000      	movs	r0, #0
 8001db0:	f7fe ffea 	bl	8000d88 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,NumByteToRead_up_to_PageSize,100);	
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	2364      	movs	r3, #100	; 0x64
 8001dba:	68f9      	ldr	r1, [r7, #12]
 8001dbc:	480b      	ldr	r0, [pc, #44]	; (8001dec <W25qxx_ReadPage+0xf0>)
 8001dbe:	f005 fb44 	bl	800744a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	2110      	movs	r1, #16
 8001dc6:	4808      	ldr	r0, [pc, #32]	; (8001de8 <W25qxx_ReadPage+0xec>)
 8001dc8:	f002 f8a6 	bl	8003f18 <HAL_GPIO_WritePin>
	}	
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif	
	W25qxx_Delay(1);
 8001dcc:	2001      	movs	r0, #1
 8001dce:	f001 fba9 	bl	8003524 <HAL_Delay>
	w25qxx.Lock=0;
 8001dd2:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <W25qxx_ReadPage+0xe8>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001dda:	bf00      	nop
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	200007d0 	.word	0x200007d0
 8001de8:	40010800 	.word	0x40010800
 8001dec:	200010a4 	.word	0x200010a4

08001df0 <W25qxx_ReadSector>:
//###################################################################################################################
void 	W25qxx_ReadSector(uint8_t *pBuffer,uint32_t Sector_Address,uint32_t OffsetInByte,uint32_t NumByteToRead_up_to_SectorSize)
{	
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
 8001dfc:	603b      	str	r3, [r7, #0]
	if((NumByteToRead_up_to_SectorSize>w25qxx.SectorSize)||(NumByteToRead_up_to_SectorSize==0))
 8001dfe:	4b2b      	ldr	r3, [pc, #172]	; (8001eac <W25qxx_ReadSector+0xbc>)
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d802      	bhi.n	8001e0e <W25qxx_ReadSector+0x1e>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d102      	bne.n	8001e14 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize=w25qxx.SectorSize;
 8001e0e:	4b27      	ldr	r3, [pc, #156]	; (8001eac <W25qxx_ReadSector+0xbc>)
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n",Sector_Address,OffsetInByte,NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
	#endif	
	if(OffsetInByte>=w25qxx.SectorSize)
 8001e14:	4b25      	ldr	r3, [pc, #148]	; (8001eac <W25qxx_ReadSector+0xbc>)
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d241      	bcs.n	8001ea2 <W25qxx_ReadSector+0xb2>
		return;
	}	
	uint32_t	StartPage;
	int32_t		BytesToRead;
	uint32_t	LocalOffset;	
	if((OffsetInByte+NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	441a      	add	r2, r3
 8001e24:	4b21      	ldr	r3, [pc, #132]	; (8001eac <W25qxx_ReadSector+0xbc>)
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d905      	bls.n	8001e38 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize-OffsetInByte;
 8001e2c:	4b1f      	ldr	r3, [pc, #124]	; (8001eac <W25qxx_ReadSector+0xbc>)
 8001e2e:	691a      	ldr	r2, [r3, #16]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	61bb      	str	r3, [r7, #24]
 8001e36:	e001      	b.n	8001e3c <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;	
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address)+(OffsetInByte/w25qxx.PageSize);
 8001e3c:	68b8      	ldr	r0, [r7, #8]
 8001e3e:	f7ff fa4b 	bl	80012d8 <W25qxx_SectorToPage>
 8001e42:	4602      	mov	r2, r0
 8001e44:	4b19      	ldr	r3, [pc, #100]	; (8001eac <W25qxx_ReadSector+0xbc>)
 8001e46:	895b      	ldrh	r3, [r3, #10]
 8001e48:	4619      	mov	r1, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e50:	4413      	add	r3, r2
 8001e52:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;	
 8001e54:	4b15      	ldr	r3, [pc, #84]	; (8001eac <W25qxx_ReadSector+0xbc>)
 8001e56:	895b      	ldrh	r3, [r3, #10]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e60:	fb02 f201 	mul.w	r2, r2, r1
 8001e64:	1a9b      	subs	r3, r3, r2
 8001e66:	617b      	str	r3, [r7, #20]
	do
	{		
		W25qxx_ReadPage(pBuffer,StartPage,LocalOffset,BytesToRead);
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	69f9      	ldr	r1, [r7, #28]
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f7ff ff44 	bl	8001cfc <W25qxx_ReadPage>
		StartPage++;
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	3301      	adds	r3, #1
 8001e78:	61fb      	str	r3, [r7, #28]
		BytesToRead-=w25qxx.PageSize-LocalOffset;
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <W25qxx_ReadSector+0xbc>)
 8001e7c:	895b      	ldrh	r3, [r3, #10]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	1a9a      	subs	r2, r3, r2
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	4413      	add	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
		pBuffer+=w25qxx.PageSize;	
 8001e8a:	4b08      	ldr	r3, [pc, #32]	; (8001eac <W25qxx_ReadSector+0xbc>)
 8001e8c:	895b      	ldrh	r3, [r3, #10]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4413      	add	r3, r2
 8001e94:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
	}while(BytesToRead>0);		
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	dce3      	bgt.n	8001e68 <W25qxx_ReadSector+0x78>
 8001ea0:	e000      	b.n	8001ea4 <W25qxx_ReadSector+0xb4>
		return;
 8001ea2:	bf00      	nop
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
	#endif	
}
 8001ea4:	3720      	adds	r7, #32
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	200007d0 	.word	0x200007d0

08001eb0 <W25qxx_ReadBlock>:
//###################################################################################################################
void 	W25qxx_ReadBlock(uint8_t* pBuffer,uint32_t Block_Address,uint32_t OffsetInByte,uint32_t	NumByteToRead_up_to_BlockSize)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	603b      	str	r3, [r7, #0]
	if((NumByteToRead_up_to_BlockSize>w25qxx.BlockSize)||(NumByteToRead_up_to_BlockSize==0))
 8001ebe:	4b2b      	ldr	r3, [pc, #172]	; (8001f6c <W25qxx_ReadBlock+0xbc>)
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d802      	bhi.n	8001ece <W25qxx_ReadBlock+0x1e>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d102      	bne.n	8001ed4 <W25qxx_ReadBlock+0x24>
		NumByteToRead_up_to_BlockSize=w25qxx.BlockSize;
 8001ece:	4b27      	ldr	r3, [pc, #156]	; (8001f6c <W25qxx_ReadBlock+0xbc>)
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx ReadBlock:%d, Offset:%d ,Read %d Bytes, begin...\r\n",Block_Address,OffsetInByte,NumByteToRead_up_to_BlockSize);
	W25qxx_Delay(100);
	#endif	
	if(OffsetInByte>=w25qxx.BlockSize)
 8001ed4:	4b25      	ldr	r3, [pc, #148]	; (8001f6c <W25qxx_ReadBlock+0xbc>)
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d241      	bcs.n	8001f62 <W25qxx_ReadBlock+0xb2>
		return;
	}	
	uint32_t	StartPage;
	int32_t		BytesToRead;
	uint32_t	LocalOffset;	
	if((OffsetInByte+NumByteToRead_up_to_BlockSize) > w25qxx.BlockSize)
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	441a      	add	r2, r3
 8001ee4:	4b21      	ldr	r3, [pc, #132]	; (8001f6c <W25qxx_ReadBlock+0xbc>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d905      	bls.n	8001ef8 <W25qxx_ReadBlock+0x48>
		BytesToRead = w25qxx.BlockSize-OffsetInByte;
 8001eec:	4b1f      	ldr	r3, [pc, #124]	; (8001f6c <W25qxx_ReadBlock+0xbc>)
 8001eee:	699a      	ldr	r2, [r3, #24]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	61bb      	str	r3, [r7, #24]
 8001ef6:	e001      	b.n	8001efc <W25qxx_ReadBlock+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_BlockSize;	
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_BlockToPage(Block_Address)+(OffsetInByte/w25qxx.PageSize);
 8001efc:	68b8      	ldr	r0, [r7, #8]
 8001efe:	f7ff f9ff 	bl	8001300 <W25qxx_BlockToPage>
 8001f02:	4602      	mov	r2, r0
 8001f04:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <W25qxx_ReadBlock+0xbc>)
 8001f06:	895b      	ldrh	r3, [r3, #10]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f10:	4413      	add	r3, r2
 8001f12:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;	
 8001f14:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <W25qxx_ReadBlock+0xbc>)
 8001f16:	895b      	ldrh	r3, [r3, #10]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001f20:	fb02 f201 	mul.w	r2, r2, r1
 8001f24:	1a9b      	subs	r3, r3, r2
 8001f26:	617b      	str	r3, [r7, #20]
	do
	{		
		W25qxx_ReadPage(pBuffer,StartPage,LocalOffset,BytesToRead);
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	69f9      	ldr	r1, [r7, #28]
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f7ff fee4 	bl	8001cfc <W25qxx_ReadPage>
		StartPage++;
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	3301      	adds	r3, #1
 8001f38:	61fb      	str	r3, [r7, #28]
		BytesToRead-=w25qxx.PageSize-LocalOffset;
 8001f3a:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <W25qxx_ReadBlock+0xbc>)
 8001f3c:	895b      	ldrh	r3, [r3, #10]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	1a9a      	subs	r2, r3, r2
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	4413      	add	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
		pBuffer+=w25qxx.PageSize;	
 8001f4a:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <W25qxx_ReadBlock+0xbc>)
 8001f4c:	895b      	ldrh	r3, [r3, #10]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4413      	add	r3, r2
 8001f54:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
	}while(BytesToRead>0);		
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	dce3      	bgt.n	8001f28 <W25qxx_ReadBlock+0x78>
 8001f60:	e000      	b.n	8001f64 <W25qxx_ReadBlock+0xb4>
		return;
 8001f62:	bf00      	nop
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx ReadBlock Done\r\n");
	W25qxx_Delay(100);
	#endif	
}
 8001f64:	3720      	adds	r7, #32
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	200007d0 	.word	0x200007d0

08001f70 <init_user_call>:
};

WorkMode_t WorkMode=Mode_UART;

void init_user_call()//在硬件初始化完成后调用
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart2,UART_IT_IDLE);//打开总线空闲中断
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <init_user_call+0x1c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <init_user_call+0x1c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0210 	orr.w	r2, r2, #16
 8001f82:	60da      	str	r2, [r3, #12]
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	200010fc 	.word	0x200010fc

08001f90 <loop_user_call>:

void loop_user_call()//在Main函数里循环调用此函数
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
	if(linecode.IsUpdate)
 8001f94:	4b56      	ldr	r3, [pc, #344]	; (80020f0 <loop_user_call+0x160>)
 8001f96:	7a1b      	ldrb	r3, [r3, #8]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 809a 	beq.w	80020d2 <loop_user_call+0x142>
	{
		HAL_Delay(20);//延时20ms设置通信参数
 8001f9e:	2014      	movs	r0, #20
 8001fa0:	f001 fac0 	bl	8003524 <HAL_Delay>
		if(linecode.Rate<1500000)//速率小于1.5Mbps，为串口模式(极其有限的串口支持)
 8001fa4:	4b52      	ldr	r3, [pc, #328]	; (80020f0 <loop_user_call+0x160>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a52      	ldr	r2, [pc, #328]	; (80020f4 <loop_user_call+0x164>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d870      	bhi.n	8002090 <loop_user_call+0x100>
		{//重新初始化串口
			WorkMode=Mode_UART;
 8001fae:	4b52      	ldr	r3, [pc, #328]	; (80020f8 <loop_user_call+0x168>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
			huart2.Instance = USART2;
 8001fb4:	4b51      	ldr	r3, [pc, #324]	; (80020fc <loop_user_call+0x16c>)
 8001fb6:	4a52      	ldr	r2, [pc, #328]	; (8002100 <loop_user_call+0x170>)
 8001fb8:	601a      	str	r2, [r3, #0]

			huart2.Init.BaudRate = linecode.Rate;//linecode的速率
 8001fba:	4b4d      	ldr	r3, [pc, #308]	; (80020f0 <loop_user_call+0x160>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a4f      	ldr	r2, [pc, #316]	; (80020fc <loop_user_call+0x16c>)
 8001fc0:	6053      	str	r3, [r2, #4]

			huart2.Init.WordLength = UART_WORDLENGTH_8B;//只支持8/9数据位（包括校验位）
 8001fc2:	4b4e      	ldr	r3, [pc, #312]	; (80020fc <loop_user_call+0x16c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	609a      	str	r2, [r3, #8]
			if(linecode.DataBits==8 && linecode.Parity!=0)
 8001fc8:	4b49      	ldr	r3, [pc, #292]	; (80020f0 <loop_user_call+0x160>)
 8001fca:	88db      	ldrh	r3, [r3, #6]
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	d107      	bne.n	8001fe0 <loop_user_call+0x50>
 8001fd0:	4b47      	ldr	r3, [pc, #284]	; (80020f0 <loop_user_call+0x160>)
 8001fd2:	795b      	ldrb	r3, [r3, #5]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <loop_user_call+0x50>
			{
				huart2.Init.WordLength=UART_WORDLENGTH_9B;
 8001fd8:	4b48      	ldr	r3, [pc, #288]	; (80020fc <loop_user_call+0x16c>)
 8001fda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fde:	609a      	str	r2, [r3, #8]
			}

			huart2.Init.StopBits = UART_STOPBITS_1;
 8001fe0:	4b46      	ldr	r3, [pc, #280]	; (80020fc <loop_user_call+0x16c>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	60da      	str	r2, [r3, #12]
			if(linecode.StopBits==2)
 8001fe6:	4b42      	ldr	r3, [pc, #264]	; (80020f0 <loop_user_call+0x160>)
 8001fe8:	791b      	ldrb	r3, [r3, #4]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d103      	bne.n	8001ff6 <loop_user_call+0x66>
			{
				huart2.Init.StopBits=UART_STOPBITS_2;
 8001fee:	4b43      	ldr	r3, [pc, #268]	; (80020fc <loop_user_call+0x16c>)
 8001ff0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ff4:	60da      	str	r2, [r3, #12]
			}


			huart2.Init.Parity = UART_PARITY_NONE;
 8001ff6:	4b41      	ldr	r3, [pc, #260]	; (80020fc <loop_user_call+0x16c>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	611a      	str	r2, [r3, #16]
			if(linecode.Parity==1)
 8001ffc:	4b3c      	ldr	r3, [pc, #240]	; (80020f0 <loop_user_call+0x160>)
 8001ffe:	795b      	ldrb	r3, [r3, #5]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d103      	bne.n	800200c <loop_user_call+0x7c>
				huart2.Init.Parity = UART_PARITY_ODD;
 8002004:	4b3d      	ldr	r3, [pc, #244]	; (80020fc <loop_user_call+0x16c>)
 8002006:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800200a:	611a      	str	r2, [r3, #16]
			if(linecode.Parity==2)
 800200c:	4b38      	ldr	r3, [pc, #224]	; (80020f0 <loop_user_call+0x160>)
 800200e:	795b      	ldrb	r3, [r3, #5]
 8002010:	2b02      	cmp	r3, #2
 8002012:	d103      	bne.n	800201c <loop_user_call+0x8c>
				huart2.Init.Parity = UART_PARITY_EVEN;
 8002014:	4b39      	ldr	r3, [pc, #228]	; (80020fc <loop_user_call+0x16c>)
 8002016:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800201a:	611a      	str	r2, [r3, #16]



			huart2.Init.Mode = UART_MODE_TX_RX;
 800201c:	4b37      	ldr	r3, [pc, #220]	; (80020fc <loop_user_call+0x16c>)
 800201e:	220c      	movs	r2, #12
 8002020:	615a      	str	r2, [r3, #20]

			huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;//不支持流控
 8002022:	4b36      	ldr	r3, [pc, #216]	; (80020fc <loop_user_call+0x16c>)
 8002024:	2200      	movs	r2, #0
 8002026:	619a      	str	r2, [r3, #24]

			huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002028:	4b34      	ldr	r3, [pc, #208]	; (80020fc <loop_user_call+0x16c>)
 800202a:	2200      	movs	r2, #0
 800202c:	61da      	str	r2, [r3, #28]

			 if (HAL_UART_Init(&huart2) != HAL_OK)
 800202e:	4833      	ldr	r0, [pc, #204]	; (80020fc <loop_user_call+0x16c>)
 8002030:	f005 ff88 	bl	8007f44 <HAL_UART_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d028      	beq.n	800208c <loop_user_call+0xfc>
			  {//打开失败则使用默认设置
				  huart2.Instance = USART2;
 800203a:	4b30      	ldr	r3, [pc, #192]	; (80020fc <loop_user_call+0x16c>)
 800203c:	4a30      	ldr	r2, [pc, #192]	; (8002100 <loop_user_call+0x170>)
 800203e:	601a      	str	r2, [r3, #0]
				  huart2.Init.BaudRate = 115200;
 8002040:	4b2e      	ldr	r3, [pc, #184]	; (80020fc <loop_user_call+0x16c>)
 8002042:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002046:	605a      	str	r2, [r3, #4]
				  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002048:	4b2c      	ldr	r3, [pc, #176]	; (80020fc <loop_user_call+0x16c>)
 800204a:	2200      	movs	r2, #0
 800204c:	609a      	str	r2, [r3, #8]
				  huart2.Init.StopBits = UART_STOPBITS_1;
 800204e:	4b2b      	ldr	r3, [pc, #172]	; (80020fc <loop_user_call+0x16c>)
 8002050:	2200      	movs	r2, #0
 8002052:	60da      	str	r2, [r3, #12]
				  huart2.Init.Parity = UART_PARITY_NONE;
 8002054:	4b29      	ldr	r3, [pc, #164]	; (80020fc <loop_user_call+0x16c>)
 8002056:	2200      	movs	r2, #0
 8002058:	611a      	str	r2, [r3, #16]
				  huart2.Init.Mode = UART_MODE_TX_RX;
 800205a:	4b28      	ldr	r3, [pc, #160]	; (80020fc <loop_user_call+0x16c>)
 800205c:	220c      	movs	r2, #12
 800205e:	615a      	str	r2, [r3, #20]
				  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002060:	4b26      	ldr	r3, [pc, #152]	; (80020fc <loop_user_call+0x16c>)
 8002062:	2200      	movs	r2, #0
 8002064:	619a      	str	r2, [r3, #24]
				  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002066:	4b25      	ldr	r3, [pc, #148]	; (80020fc <loop_user_call+0x16c>)
 8002068:	2200      	movs	r2, #0
 800206a:	61da      	str	r2, [r3, #28]
				  HAL_UART_Init(&huart2);
 800206c:	4823      	ldr	r0, [pc, #140]	; (80020fc <loop_user_call+0x16c>)
 800206e:	f005 ff69 	bl	8007f44 <HAL_UART_Init>
				  linecode.DataBits=8;
 8002072:	4b1f      	ldr	r3, [pc, #124]	; (80020f0 <loop_user_call+0x160>)
 8002074:	2208      	movs	r2, #8
 8002076:	80da      	strh	r2, [r3, #6]
				  linecode.Parity=0;
 8002078:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <loop_user_call+0x160>)
 800207a:	2200      	movs	r2, #0
 800207c:	715a      	strb	r2, [r3, #5]
				  linecode.Rate=115200;
 800207e:	4b1c      	ldr	r3, [pc, #112]	; (80020f0 <loop_user_call+0x160>)
 8002080:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002084:	601a      	str	r2, [r3, #0]
				  linecode.StopBits=0;
 8002086:	4b1a      	ldr	r3, [pc, #104]	; (80020f0 <loop_user_call+0x160>)
 8002088:	2200      	movs	r2, #0
 800208a:	711a      	strb	r2, [r3, #4]
			  }
			 uart_start_receive();
 800208c:	f000 fd54 	bl	8002b38 <uart_start_receive>
		}

		if(linecode.Rate>=1500000)//切换为i2c模式
 8002090:	4b17      	ldr	r3, [pc, #92]	; (80020f0 <loop_user_call+0x160>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a17      	ldr	r2, [pc, #92]	; (80020f4 <loop_user_call+0x164>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d909      	bls.n	80020ae <loop_user_call+0x11e>
		{
			WorkMode=Mode_I2C_RAW;
 800209a:	4b17      	ldr	r3, [pc, #92]	; (80020f8 <loop_user_call+0x168>)
 800209c:	2203      	movs	r2, #3
 800209e:	701a      	strb	r2, [r3, #0]

			if(linecode.StopBits!=0)
 80020a0:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <loop_user_call+0x160>)
 80020a2:	791b      	ldrb	r3, [r3, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d002      	beq.n	80020ae <loop_user_call+0x11e>
			{
						WorkMode=Mode_I2C_CMD;
 80020a8:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <loop_user_call+0x168>)
 80020aa:	2204      	movs	r2, #4
 80020ac:	701a      	strb	r2, [r3, #0]
			}
		}

		if(linecode.Rate>=2000000)//切换为spi模式
 80020ae:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <loop_user_call+0x160>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a14      	ldr	r2, [pc, #80]	; (8002104 <loop_user_call+0x174>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d909      	bls.n	80020cc <loop_user_call+0x13c>
		{
			WorkMode=Mode_SPI_RAW;
 80020b8:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <loop_user_call+0x168>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	701a      	strb	r2, [r3, #0]

			if(linecode.StopBits!=0)
 80020be:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <loop_user_call+0x160>)
 80020c0:	791b      	ldrb	r3, [r3, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d002      	beq.n	80020cc <loop_user_call+0x13c>
			{
				WorkMode=Mode_SPI_CMD;
 80020c6:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <loop_user_call+0x168>)
 80020c8:	2202      	movs	r2, #2
 80020ca:	701a      	strb	r2, [r3, #0]
			}
		}
		linecode.IsUpdate=0;
 80020cc:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <loop_user_call+0x160>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	721a      	strb	r2, [r3, #8]
	}

	if(WorkMode==Mode_SPI_CMD)
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <loop_user_call+0x168>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d101      	bne.n	80020de <loop_user_call+0x14e>
			spi_cmd_process_call();//调用spi命令处理函数（不在中断中处理）
 80020da:	f000 f9fb 	bl	80024d4 <spi_cmd_process_call>
	if(WorkMode==Mode_I2C_CMD)
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <loop_user_call+0x168>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d101      	bne.n	80020ea <loop_user_call+0x15a>
			i2c_cmd_process_call();//调用i2c命令处理函数（不在中断中处理）
 80020e6:	f000 f8b5 	bl	8002254 <i2c_cmd_process_call>
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000004 	.word	0x20000004
 80020f4:	0016e35f 	.word	0x0016e35f
 80020f8:	200001c0 	.word	0x200001c0
 80020fc:	200010fc 	.word	0x200010fc
 8002100:	40004400 	.word	0x40004400
 8002104:	001e847f 	.word	0x001e847f

08002108 <cdc_receive_call>:

void cdc_receive_call(uint8_t* Buf, uint32_t Len)//由USB CDC/ACM接收数据时调用
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af02      	add	r7, sp, #8
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
	switch(WorkMode)
 8002112:	4b41      	ldr	r3, [pc, #260]	; (8002218 <cdc_receive_call+0x110>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	3b01      	subs	r3, #1
 8002118:	2b03      	cmp	r3, #3
 800211a:	d80b      	bhi.n	8002134 <cdc_receive_call+0x2c>
 800211c:	a201      	add	r2, pc, #4	; (adr r2, 8002124 <cdc_receive_call+0x1c>)
 800211e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002122:	bf00      	nop
 8002124:	0800213f 	.word	0x0800213f
 8002128:	08002157 	.word	0x08002157
 800212c:	08002181 	.word	0x08002181
 8002130:	080021e1 	.word	0x080021e1
	{
	default:
		uart_transmit(Buf,Len);
 8002134:	6839      	ldr	r1, [r7, #0]
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 fcc6 	bl	8002ac8 <uart_transmit>
		break;
 800213c:	e068      	b.n	8002210 <cdc_receive_call+0x108>
	case Mode_SPI_RAW:
		CDC_Transmit_FS(spi_transmitReceive(Buf,Len),Len);
 800213e:	6839      	ldr	r1, [r7, #0]
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f98f 	bl	8002464 <spi_transmitReceive>
 8002146:	4602      	mov	r2, r0
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	b29b      	uxth	r3, r3
 800214c:	4619      	mov	r1, r3
 800214e:	4610      	mov	r0, r2
 8002150:	f009 fa42 	bl	800b5d8 <CDC_Transmit_FS>
		break;
 8002154:	e05c      	b.n	8002210 <cdc_receive_call+0x108>
	case Mode_SPI_CMD:
		if(spi_cmd_data.IsUpdate!=0) break;//上条命令未处理，忽略下一条命令
 8002156:	4b31      	ldr	r3, [pc, #196]	; (800221c <cdc_receive_call+0x114>)
 8002158:	791b      	ldrb	r3, [r3, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d155      	bne.n	800220a <cdc_receive_call+0x102>
		spi_cmd_data.length=Len;
 800215e:	4a2f      	ldr	r2, [pc, #188]	; (800221c <cdc_receive_call+0x114>)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	6013      	str	r3, [r2, #0]
		memcpy(spi_cmd_data.data,Buf,Len);
 8002164:	4b2d      	ldr	r3, [pc, #180]	; (800221c <cdc_receive_call+0x114>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	4618      	mov	r0, r3
 800216e:	f009 fe29 	bl	800bdc4 <memcpy>
		spi_cmd_data.IsUpdate++;
 8002172:	4b2a      	ldr	r3, [pc, #168]	; (800221c <cdc_receive_call+0x114>)
 8002174:	791b      	ldrb	r3, [r3, #4]
 8002176:	3301      	adds	r3, #1
 8002178:	b2da      	uxtb	r2, r3
 800217a:	4b28      	ldr	r3, [pc, #160]	; (800221c <cdc_receive_call+0x114>)
 800217c:	711a      	strb	r2, [r3, #4]
		break;
 800217e:	e047      	b.n	8002210 <cdc_receive_call+0x108>
	case Mode_I2C_RAW:
		if(Buf[0] & 0x01)//首字符表示8位器件地址(最低位表示读/写)，写入/读取长度位Len-1
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b00      	cmp	r3, #0
 800218a:	d011      	beq.n	80021b0 <cdc_receive_call+0xa8>
		{
			HAL_I2C_Master_Receive(&hi2c1,Buf[0],&Buf[1],Len-1,1000+Len);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	b299      	uxth	r1, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	b29b      	uxth	r3, r3
 800219a:	3b01      	subs	r3, #1
 800219c:	b298      	uxth	r0, r3
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	4603      	mov	r3, r0
 80021a8:	481d      	ldr	r0, [pc, #116]	; (8002220 <cdc_receive_call+0x118>)
 80021aa:	f002 f8f3 	bl	8004394 <HAL_I2C_Master_Receive>
 80021ae:	e010      	b.n	80021d2 <cdc_receive_call+0xca>
		}
		else
		{
			HAL_I2C_Master_Transmit(&hi2c1,Buf[0],&Buf[1],Len-1,1000+Len);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	b299      	uxth	r1, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	1c5a      	adds	r2, r3, #1
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	b29b      	uxth	r3, r3
 80021be:	3b01      	subs	r3, #1
 80021c0:	b298      	uxth	r0, r3
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	4603      	mov	r3, r0
 80021cc:	4814      	ldr	r0, [pc, #80]	; (8002220 <cdc_receive_call+0x118>)
 80021ce:	f001 ffe3 	bl	8004198 <HAL_I2C_Master_Transmit>
		}
		CDC_Transmit_FS(Buf,Len);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	4619      	mov	r1, r3
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f009 f9fd 	bl	800b5d8 <CDC_Transmit_FS>
		break;
 80021de:	e017      	b.n	8002210 <cdc_receive_call+0x108>
	case Mode_I2C_CMD:
		if(i2c_cmd_data.IsUpdate!=0) break;//上条命令未处理，忽略下一条命令
 80021e0:	4b10      	ldr	r3, [pc, #64]	; (8002224 <cdc_receive_call+0x11c>)
 80021e2:	791b      	ldrb	r3, [r3, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d112      	bne.n	800220e <cdc_receive_call+0x106>
		i2c_cmd_data.length=Len;
 80021e8:	4a0e      	ldr	r2, [pc, #56]	; (8002224 <cdc_receive_call+0x11c>)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	6013      	str	r3, [r2, #0]
		memcpy(i2c_cmd_data.data,Buf,Len);
 80021ee:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <cdc_receive_call+0x11c>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f009 fde4 	bl	800bdc4 <memcpy>
		i2c_cmd_data.IsUpdate++;
 80021fc:	4b09      	ldr	r3, [pc, #36]	; (8002224 <cdc_receive_call+0x11c>)
 80021fe:	791b      	ldrb	r3, [r3, #4]
 8002200:	3301      	adds	r3, #1
 8002202:	b2da      	uxtb	r2, r3
 8002204:	4b07      	ldr	r3, [pc, #28]	; (8002224 <cdc_receive_call+0x11c>)
 8002206:	711a      	strb	r2, [r3, #4]
		break;
 8002208:	e002      	b.n	8002210 <cdc_receive_call+0x108>
		if(spi_cmd_data.IsUpdate!=0) break;//上条命令未处理，忽略下一条命令
 800220a:	bf00      	nop
 800220c:	e000      	b.n	8002210 <cdc_receive_call+0x108>
		if(i2c_cmd_data.IsUpdate!=0) break;//上条命令未处理，忽略下一条命令
 800220e:	bf00      	nop

	}
}
 8002210:	bf00      	nop
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	200001c0 	.word	0x200001c0
 800221c:	2000001c 	.word	0x2000001c
 8002220:	2000100c 	.word	0x2000100c
 8002224:	20000010 	.word	0x20000010

08002228 <uart_receive_call>:

void uart_receive_call(void * buf,size_t len)//接收数据完成后调用此函数
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
	if(WorkMode!=Mode_UART)
 8002232:	4b07      	ldr	r3, [pc, #28]	; (8002250 <uart_receive_call+0x28>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d106      	bne.n	8002248 <uart_receive_call+0x20>
		return;//检查模式
	CDC_Transmit_FS(buf,len);//发送给上位机
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	b29b      	uxth	r3, r3
 800223e:	4619      	mov	r1, r3
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f009 f9c9 	bl	800b5d8 <CDC_Transmit_FS>
 8002246:	e000      	b.n	800224a <uart_receive_call+0x22>
		return;//检查模式
 8002248:	bf00      	nop
}
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	200001c0 	.word	0x200001c0

08002254 <i2c_cmd_process_call>:
.data=i2c_rx_buff,
.IsUpdate=0
};

void i2c_cmd_process_call()//i2c命令模式处理函数
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
	if(i2c_cmd_data.IsUpdate)
 800225a:	4b6a      	ldr	r3, [pc, #424]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 800225c:	791b      	ldrb	r3, [r3, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	f000 80cc 	beq.w	80023fc <i2c_cmd_process_call+0x1a8>
	{
		switch(i2c_cmd_data.data[0])
 8002264:	4b67      	ldr	r3, [pc, #412]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d047      	beq.n	80022fe <i2c_cmd_process_call+0xaa>
 800226e:	2b03      	cmp	r3, #3
 8002270:	f000 8087 	beq.w	8002382 <i2c_cmd_process_call+0x12e>
 8002274:	2b01      	cmp	r3, #1
 8002276:	d007      	beq.n	8002288 <i2c_cmd_process_call+0x34>
		{
		default:
			i2c_cmd_data.data[0]=0xff;
 8002278:	4b62      	ldr	r3, [pc, #392]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	22ff      	movs	r2, #255	; 0xff
 800227e:	701a      	strb	r2, [r3, #0]
			i2c_cmd_data.length=1;
 8002280:	4b60      	ldr	r3, [pc, #384]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 8002282:	2201      	movs	r2, #1
 8002284:	601a      	str	r2, [r3, #0]
			break;
 8002286:	e0ad      	b.n	80023e4 <i2c_cmd_process_call+0x190>
		case 1://设置目标EEPROM容量，并检测EEPROM,两字节数据（低字节在前）
			if(i2c_cmd_data.length>=3 && EEPROM24XX_IsConnected())
 8002288:	4b5e      	ldr	r3, [pc, #376]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b02      	cmp	r3, #2
 800228e:	d92d      	bls.n	80022ec <i2c_cmd_process_call+0x98>
 8002290:	f7fe fb4a 	bl	8000928 <EEPROM24XX_IsConnected>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d028      	beq.n	80022ec <i2c_cmd_process_call+0x98>
			{
				uint32_t size=i2c_cmd_data.data[1]+(uint32_t)i2c_cmd_data.data[2]*256;
 800229a:	4b5a      	ldr	r3, [pc, #360]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	3301      	adds	r3, #1
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	461a      	mov	r2, r3
 80022a4:	4b57      	ldr	r3, [pc, #348]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	3302      	adds	r3, #2
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	021b      	lsls	r3, r3, #8
 80022ae:	4413      	add	r3, r2
 80022b0:	607b      	str	r3, [r7, #4]
				if(size!=0)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d015      	beq.n	80022e4 <i2c_cmd_process_call+0x90>
				{
					size_t i=0,j=0x01;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	2301      	movs	r3, #1
 80022be:	603b      	str	r3, [r7, #0]
					while(!((j<<i)&size))
 80022c0:	e002      	b.n	80022c8 <i2c_cmd_process_call+0x74>
						i++;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	3301      	adds	r3, #1
 80022c6:	60fb      	str	r3, [r7, #12]
					while(!((j<<i)&size))
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	409a      	lsls	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4013      	ands	r3, r2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f5      	beq.n	80022c2 <i2c_cmd_process_call+0x6e>
					_EEPROM_SIZE_KBIT=(j<<i);
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	4a4a      	ldr	r2, [pc, #296]	; (8002408 <i2c_cmd_process_call+0x1b4>)
 80022e0:	6013      	str	r3, [r2, #0]
			{
 80022e2:	e00b      	b.n	80022fc <i2c_cmd_process_call+0xa8>
				}
				else
				{
					_EEPROM_SIZE_KBIT=64;//默认为64
 80022e4:	4b48      	ldr	r3, [pc, #288]	; (8002408 <i2c_cmd_process_call+0x1b4>)
 80022e6:	2240      	movs	r2, #64	; 0x40
 80022e8:	601a      	str	r2, [r3, #0]
			{
 80022ea:	e007      	b.n	80022fc <i2c_cmd_process_call+0xa8>
				}
			}
			else
			{
				i2c_cmd_data.data[0]=0xff;
 80022ec:	4b45      	ldr	r3, [pc, #276]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	22ff      	movs	r2, #255	; 0xff
 80022f2:	701a      	strb	r2, [r3, #0]
				i2c_cmd_data.length=1;
 80022f4:	4b43      	ldr	r3, [pc, #268]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	601a      	str	r2, [r3, #0]
			}
			break;
 80022fa:	e073      	b.n	80023e4 <i2c_cmd_process_call+0x190>
 80022fc:	e072      	b.n	80023e4 <i2c_cmd_process_call+0x190>
		case 2://读取EEPROM，地址（2字节，低字节在前）+待读取的数据长度（两字节,低字节在前，最多512字节）

			{
				uint32_t i=i2c_cmd_data.data[3]+(uint32_t)i2c_cmd_data.data[4]*256;
 80022fe:	4b41      	ldr	r3, [pc, #260]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	3303      	adds	r3, #3
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	4b3e      	ldr	r3, [pc, #248]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	3304      	adds	r3, #4
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	021b      	lsls	r3, r3, #8
 8002312:	4413      	add	r3, r2
 8002314:	60bb      	str	r3, [r7, #8]
				if(i==0 || i>512)
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d003      	beq.n	8002324 <i2c_cmd_process_call+0xd0>
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002322:	d902      	bls.n	800232a <i2c_cmd_process_call+0xd6>
					i=512;
 8002324:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002328:	60bb      	str	r3, [r7, #8]
				if(!(i2c_cmd_data.length >=5 && EEPROM24XX_Load(i2c_cmd_data.data[1]+(uint32_t)i2c_cmd_data.data[2]*256,&i2c_cmd_data.data[1],i)))
 800232a:	4b36      	ldr	r3, [pc, #216]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2b04      	cmp	r3, #4
 8002330:	d91a      	bls.n	8002368 <i2c_cmd_process_call+0x114>
 8002332:	4b34      	ldr	r3, [pc, #208]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	3301      	adds	r3, #1
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	b29a      	uxth	r2, r3
 800233c:	4b31      	ldr	r3, [pc, #196]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	3302      	adds	r3, #2
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	b29b      	uxth	r3, r3
 8002346:	021b      	lsls	r3, r3, #8
 8002348:	b29b      	uxth	r3, r3
 800234a:	4413      	add	r3, r2
 800234c:	b298      	uxth	r0, r3
 800234e:	4b2d      	ldr	r3, [pc, #180]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	3301      	adds	r3, #1
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	4619      	mov	r1, r3
 8002358:	f7fe fc6a 	bl	8000c30 <EEPROM24XX_Load>
 800235c:	4603      	mov	r3, r0
 800235e:	f083 0301 	eor.w	r3, r3, #1
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	d007      	beq.n	8002378 <i2c_cmd_process_call+0x124>
				{
					i2c_cmd_data.data[0]=0xff;
 8002368:	4b26      	ldr	r3, [pc, #152]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	22ff      	movs	r2, #255	; 0xff
 800236e:	701a      	strb	r2, [r3, #0]
					i2c_cmd_data.length=1;
 8002370:	4b24      	ldr	r3, [pc, #144]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 8002372:	2201      	movs	r2, #1
 8002374:	601a      	str	r2, [r3, #0]
				else
				{
					i2c_cmd_data.length=1+i;
				}
			}
			break;
 8002376:	e035      	b.n	80023e4 <i2c_cmd_process_call+0x190>
					i2c_cmd_data.length=1+i;
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	3301      	adds	r3, #1
 800237c:	4a21      	ldr	r2, [pc, #132]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 800237e:	6013      	str	r3, [r2, #0]
			break;
 8002380:	e030      	b.n	80023e4 <i2c_cmd_process_call+0x190>
		case 3://写入EEPROM,地址（2字节，低字节在前）+待写入的数据
			if(i2c_cmd_data.length<=4)
 8002382:	4b20      	ldr	r3, [pc, #128]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b04      	cmp	r3, #4
 8002388:	d807      	bhi.n	800239a <i2c_cmd_process_call+0x146>
			{
				i2c_cmd_data.data[0]=0xff;
 800238a:	4b1e      	ldr	r3, [pc, #120]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	22ff      	movs	r2, #255	; 0xff
 8002390:	701a      	strb	r2, [r3, #0]
				i2c_cmd_data.length=1;
 8002392:	4b1c      	ldr	r3, [pc, #112]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 8002394:	2201      	movs	r2, #1
 8002396:	601a      	str	r2, [r3, #0]
				break;
 8002398:	e024      	b.n	80023e4 <i2c_cmd_process_call+0x190>
			}

			if(!EEPROM24XX_Save(i2c_cmd_data.data[1]+(uint32_t)i2c_cmd_data.data[2]*256,&i2c_cmd_data.data[3],i2c_cmd_data.length-3))
 800239a:	4b1a      	ldr	r3, [pc, #104]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	3301      	adds	r3, #1
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	4b17      	ldr	r3, [pc, #92]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	3302      	adds	r3, #2
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	021b      	lsls	r3, r3, #8
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	4413      	add	r3, r2
 80023b4:	b298      	uxth	r0, r3
 80023b6:	4b13      	ldr	r3, [pc, #76]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	1cd9      	adds	r1, r3, #3
 80023bc:	4b11      	ldr	r3, [pc, #68]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	3b03      	subs	r3, #3
 80023c2:	461a      	mov	r2, r3
 80023c4:	f7fe fb94 	bl	8000af0 <EEPROM24XX_Save>
 80023c8:	4603      	mov	r3, r0
 80023ca:	f083 0301 	eor.w	r3, r3, #1
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d006      	beq.n	80023e2 <i2c_cmd_process_call+0x18e>
			{
				i2c_cmd_data.data[0]=0xff;
 80023d4:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	22ff      	movs	r2, #255	; 0xff
 80023da:	701a      	strb	r2, [r3, #0]
				i2c_cmd_data.length=1;
 80023dc:	4b09      	ldr	r3, [pc, #36]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 80023de:	2201      	movs	r2, #1
 80023e0:	601a      	str	r2, [r3, #0]
			}
			break;
 80023e2:	bf00      	nop


		}

		CDC_Transmit_FS(i2c_cmd_data.data,i2c_cmd_data.length);
 80023e4:	4b07      	ldr	r3, [pc, #28]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	4619      	mov	r1, r3
 80023f0:	4610      	mov	r0, r2
 80023f2:	f009 f8f1 	bl	800b5d8 <CDC_Transmit_FS>
		i2c_cmd_data.IsUpdate=0;
 80023f6:	4b03      	ldr	r3, [pc, #12]	; (8002404 <i2c_cmd_process_call+0x1b0>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	711a      	strb	r2, [r3, #4]
	}
}
 80023fc:	bf00      	nop
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	20000010 	.word	0x20000010
 8002408:	20000000 	.word	0x20000000

0800240c <U8A2U32>:
#include "w25qxx.h"
#include "userapp.h"

//uint8数组转uint32函数,小端模式
static uint32_t U8A2U32(void * p)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
	uint8_t * data=(uint8_t *)p;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	60fb      	str	r3, [r7, #12]
	return (((uint32_t)data[3])<<24)+(((uint32_t)data[2])<<16)+(((uint32_t)data[1])<<8)+(((uint32_t)data[0])<<0);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	3303      	adds	r3, #3
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	061a      	lsls	r2, r3, #24
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	3302      	adds	r3, #2
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	041b      	lsls	r3, r3, #16
 8002428:	441a      	add	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	3301      	adds	r3, #1
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	021b      	lsls	r3, r3, #8
 8002432:	4413      	add	r3, r2
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	7812      	ldrb	r2, [r2, #0]
 8002438:	4413      	add	r3, r2
}
 800243a:	4618      	mov	r0, r3
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr

08002444 <delay>:
.data=spi_rx_buff,
.length=0
};

void delay(size_t delay)//中断中不能调用HAL_Delay时使用
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
while(delay--);
 800244c:	bf00      	nop
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	1e5a      	subs	r2, r3, #1
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1fa      	bne.n	800244e <delay+0xa>
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr
	...

08002464 <spi_transmitReceive>:
void * spi_transmitReceive(void * txbuff,size_t len)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af02      	add	r7, sp, #8
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
	 SPI_CS_HIGH();
 800246e:	2201      	movs	r2, #1
 8002470:	2110      	movs	r1, #16
 8002472:	4815      	ldr	r0, [pc, #84]	; (80024c8 <spi_transmitReceive+0x64>)
 8002474:	f001 fd50 	bl	8003f18 <HAL_GPIO_WritePin>
	 delay(48*5);//
 8002478:	20f0      	movs	r0, #240	; 0xf0
 800247a:	f7ff ffe3 	bl	8002444 <delay>
	 SPI_CS_LOW();
 800247e:	2200      	movs	r2, #0
 8002480:	2110      	movs	r1, #16
 8002482:	4811      	ldr	r0, [pc, #68]	; (80024c8 <spi_transmitReceive+0x64>)
 8002484:	f001 fd48 	bl	8003f18 <HAL_GPIO_WritePin>
	 delay(48*5);
 8002488:	20f0      	movs	r0, #240	; 0xf0
 800248a:	f7ff ffdb 	bl	8002444 <delay>
	 memset(spi_rx_buff,0,sizeof(spi_rx_buff));
 800248e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002492:	2100      	movs	r1, #0
 8002494:	480d      	ldr	r0, [pc, #52]	; (80024cc <spi_transmitReceive+0x68>)
 8002496:	f009 fca0 	bl	800bdda <memset>
	 HAL_SPI_TransmitReceive(&hspi1,txbuff,spi_rx_buff,len,1000+len);
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	b29a      	uxth	r2, r3
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	4613      	mov	r3, r2
 80024a8:	4a08      	ldr	r2, [pc, #32]	; (80024cc <spi_transmitReceive+0x68>)
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	4808      	ldr	r0, [pc, #32]	; (80024d0 <spi_transmitReceive+0x6c>)
 80024ae:	f005 f8d5 	bl	800765c <HAL_SPI_TransmitReceive>
	 SPI_CS_HIGH();
 80024b2:	2201      	movs	r2, #1
 80024b4:	2110      	movs	r1, #16
 80024b6:	4804      	ldr	r0, [pc, #16]	; (80024c8 <spi_transmitReceive+0x64>)
 80024b8:	f001 fd2e 	bl	8003f18 <HAL_GPIO_WritePin>
	 return spi_rx_buff;
 80024bc:	4b03      	ldr	r3, [pc, #12]	; (80024cc <spi_transmitReceive+0x68>)
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40010800 	.word	0x40010800
 80024cc:	200001c4 	.word	0x200001c4
 80024d0:	200010a4 	.word	0x200010a4

080024d4 <spi_cmd_process_call>:

void spi_cmd_process_call()//spi命令模式处理函数
{
 80024d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024d6:	af00      	add	r7, sp, #0
	if(spi_cmd_data.IsUpdate)//有新的命令
 80024d8:	4baa      	ldr	r3, [pc, #680]	; (8002784 <spi_cmd_process_call+0x2b0>)
 80024da:	791b      	ldrb	r3, [r3, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 82ef 	beq.w	8002ac0 <spi_cmd_process_call+0x5ec>
	{

		switch(spi_cmd_data.data[0])//判断命令号
 80024e2:	4ba8      	ldr	r3, [pc, #672]	; (8002784 <spi_cmd_process_call+0x2b0>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b10      	cmp	r3, #16
 80024ea:	d825      	bhi.n	8002538 <spi_cmd_process_call+0x64>
 80024ec:	a201      	add	r2, pc, #4	; (adr r2, 80024f4 <spi_cmd_process_call+0x20>)
 80024ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f2:	bf00      	nop
 80024f4:	08002549 	.word	0x08002549
 80024f8:	080025ab 	.word	0x080025ab
 80024fc:	080025dd 	.word	0x080025dd
 8002500:	080025e3 	.word	0x080025e3
 8002504:	08002611 	.word	0x08002611
 8002508:	0800263f 	.word	0x0800263f
 800250c:	08002699 	.word	0x08002699
 8002510:	080026f3 	.word	0x080026f3
 8002514:	0800274d 	.word	0x0800274d
 8002518:	08002791 	.word	0x08002791
 800251c:	080027dd 	.word	0x080027dd
 8002520:	08002829 	.word	0x08002829
 8002524:	08002875 	.word	0x08002875
 8002528:	080028b1 	.word	0x080028b1
 800252c:	08002921 	.word	0x08002921
 8002530:	0800299f 	.word	0x0800299f
 8002534:	08002a21 	.word	0x08002a21
		{
		default:
			spi_cmd_data.data[0]=0xff;//无效命令的返回
 8002538:	4b92      	ldr	r3, [pc, #584]	; (8002784 <spi_cmd_process_call+0x2b0>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	22ff      	movs	r2, #255	; 0xff
 800253e:	701a      	strb	r2, [r3, #0]
			spi_cmd_data.length=0x01;
 8002540:	4b90      	ldr	r3, [pc, #576]	; (8002784 <spi_cmd_process_call+0x2b0>)
 8002542:	2201      	movs	r2, #1
 8002544:	601a      	str	r2, [r3, #0]
			break;
 8002546:	e2af      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
		case 0://0号命令，设置spi通信参数，字节1为CPOL,字节2为CPHA,字节3字节序(MSB/LSB))
			if(spi_cmd_data.length>=2)
 8002548:	4b8e      	ldr	r3, [pc, #568]	; (8002784 <spi_cmd_process_call+0x2b0>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d90a      	bls.n	8002566 <spi_cmd_process_call+0x92>
				hspi1.Init.CLKPolarity=spi_cmd_data.data[1]?SPI_POLARITY_HIGH:SPI_POLARITY_LOW;
 8002550:	4b8c      	ldr	r3, [pc, #560]	; (8002784 <spi_cmd_process_call+0x2b0>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	3301      	adds	r3, #1
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <spi_cmd_process_call+0x8c>
 800255c:	2302      	movs	r3, #2
 800255e:	e000      	b.n	8002562 <spi_cmd_process_call+0x8e>
 8002560:	2300      	movs	r3, #0
 8002562:	4a89      	ldr	r2, [pc, #548]	; (8002788 <spi_cmd_process_call+0x2b4>)
 8002564:	6113      	str	r3, [r2, #16]
			if(spi_cmd_data.length>=3)
 8002566:	4b87      	ldr	r3, [pc, #540]	; (8002784 <spi_cmd_process_call+0x2b0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d90a      	bls.n	8002584 <spi_cmd_process_call+0xb0>
				hspi1.Init.CLKPhase=spi_cmd_data.data[2]?SPI_PHASE_2EDGE:SPI_PHASE_1EDGE;
 800256e:	4b85      	ldr	r3, [pc, #532]	; (8002784 <spi_cmd_process_call+0x2b0>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	3302      	adds	r3, #2
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <spi_cmd_process_call+0xaa>
 800257a:	2301      	movs	r3, #1
 800257c:	e000      	b.n	8002580 <spi_cmd_process_call+0xac>
 800257e:	2300      	movs	r3, #0
 8002580:	4a81      	ldr	r2, [pc, #516]	; (8002788 <spi_cmd_process_call+0x2b4>)
 8002582:	6153      	str	r3, [r2, #20]
			if(spi_cmd_data.length>=4)
 8002584:	4b7f      	ldr	r3, [pc, #508]	; (8002784 <spi_cmd_process_call+0x2b0>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b03      	cmp	r3, #3
 800258a:	d90a      	bls.n	80025a2 <spi_cmd_process_call+0xce>
				hspi1.Init.FirstBit=spi_cmd_data.data[3]?SPI_FIRSTBIT_LSB:SPI_FIRSTBIT_MSB;
 800258c:	4b7d      	ldr	r3, [pc, #500]	; (8002784 <spi_cmd_process_call+0x2b0>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	3303      	adds	r3, #3
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <spi_cmd_process_call+0xc8>
 8002598:	2380      	movs	r3, #128	; 0x80
 800259a:	e000      	b.n	800259e <spi_cmd_process_call+0xca>
 800259c:	2300      	movs	r3, #0
 800259e:	4a7a      	ldr	r2, [pc, #488]	; (8002788 <spi_cmd_process_call+0x2b4>)
 80025a0:	6213      	str	r3, [r2, #32]
			HAL_SPI_Init(&hspi1);
 80025a2:	4879      	ldr	r0, [pc, #484]	; (8002788 <spi_cmd_process_call+0x2b4>)
 80025a4:	f004 fdbc 	bl	8007120 <HAL_SPI_Init>

			break;
 80025a8:	e27e      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
		case 1://1号命令，重新初始化spi flash通信
			if(W25qxx_Init())
 80025aa:	f7fe fcf5 	bl	8000f98 <W25qxx_Init>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00b      	beq.n	80025cc <spi_cmd_process_call+0xf8>
			{
				memcpy(&(spi_cmd_data.data[1]),&w25qxx,sizeof(w25qxx));
 80025b4:	4b73      	ldr	r3, [pc, #460]	; (8002784 <spi_cmd_process_call+0x2b0>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	3301      	adds	r3, #1
 80025ba:	2228      	movs	r2, #40	; 0x28
 80025bc:	4973      	ldr	r1, [pc, #460]	; (800278c <spi_cmd_process_call+0x2b8>)
 80025be:	4618      	mov	r0, r3
 80025c0:	f009 fc00 	bl	800bdc4 <memcpy>
				spi_cmd_data.length=sizeof(w25qxx)+1;
 80025c4:	4b6f      	ldr	r3, [pc, #444]	; (8002784 <spi_cmd_process_call+0x2b0>)
 80025c6:	2229      	movs	r2, #41	; 0x29
 80025c8:	601a      	str	r2, [r3, #0]
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
				spi_cmd_data.length=0x01;
			}

			break;
 80025ca:	e26d      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 80025cc:	4b6d      	ldr	r3, [pc, #436]	; (8002784 <spi_cmd_process_call+0x2b0>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	22ff      	movs	r2, #255	; 0xff
 80025d2:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 80025d4:	4b6b      	ldr	r3, [pc, #428]	; (8002784 <spi_cmd_process_call+0x2b0>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	601a      	str	r2, [r3, #0]
			break;
 80025da:	e265      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>

		case 2://2号命令，W25qxx_EraseChip,芯片擦除
			W25qxx_EraseChip();
 80025dc:	f7fe fda4 	bl	8001128 <W25qxx_EraseChip>

			break;
 80025e0:	e262      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
		case 3://3号命令,W25qxx_EraseSector,擦除扇区，前四字节为扇区地址（小端模式）
			if(spi_cmd_data.length>=5)
 80025e2:	4b68      	ldr	r3, [pc, #416]	; (8002784 <spi_cmd_process_call+0x2b0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d90a      	bls.n	8002600 <spi_cmd_process_call+0x12c>
				W25qxx_EraseSector(U8A2U32(&(spi_cmd_data.data[1])));
 80025ea:	4b66      	ldr	r3, [pc, #408]	; (8002784 <spi_cmd_process_call+0x2b0>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	3301      	adds	r3, #1
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ff0b 	bl	800240c <U8A2U32>
 80025f6:	4603      	mov	r3, r0
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fe fdc3 	bl	8001184 <W25qxx_EraseSector>
						spi_cmd_data.data[0]=0xff;//失败命令的返回
						spi_cmd_data.length=0x01;

				}

			break;
 80025fe:	e253      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
						spi_cmd_data.data[0]=0xff;//失败命令的返回
 8002600:	4b60      	ldr	r3, [pc, #384]	; (8002784 <spi_cmd_process_call+0x2b0>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	22ff      	movs	r2, #255	; 0xff
 8002606:	701a      	strb	r2, [r3, #0]
						spi_cmd_data.length=0x01;
 8002608:	4b5e      	ldr	r3, [pc, #376]	; (8002784 <spi_cmd_process_call+0x2b0>)
 800260a:	2201      	movs	r2, #1
 800260c:	601a      	str	r2, [r3, #0]
			break;
 800260e:	e24b      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
		case 4://4号命令，W25qxx_EraseBlock，擦除块，，前四字节为块地址（小端模式）
			if(spi_cmd_data.length>=5)
 8002610:	4b5c      	ldr	r3, [pc, #368]	; (8002784 <spi_cmd_process_call+0x2b0>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2b04      	cmp	r3, #4
 8002616:	d90a      	bls.n	800262e <spi_cmd_process_call+0x15a>
				W25qxx_EraseBlock(U8A2U32(&(spi_cmd_data.data[1])));
 8002618:	4b5a      	ldr	r3, [pc, #360]	; (8002784 <spi_cmd_process_call+0x2b0>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	3301      	adds	r3, #1
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff fef4 	bl	800240c <U8A2U32>
 8002624:	4603      	mov	r3, r0
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe fe00 	bl	800122c <W25qxx_EraseBlock>
					spi_cmd_data.data[0]=0xff;//失败命令的返回
					spi_cmd_data.length=0x01;

				}

			break;
 800262c:	e23c      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
					spi_cmd_data.data[0]=0xff;//失败命令的返回
 800262e:	4b55      	ldr	r3, [pc, #340]	; (8002784 <spi_cmd_process_call+0x2b0>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	22ff      	movs	r2, #255	; 0xff
 8002634:	701a      	strb	r2, [r3, #0]
					spi_cmd_data.length=0x01;
 8002636:	4b53      	ldr	r3, [pc, #332]	; (8002784 <spi_cmd_process_call+0x2b0>)
 8002638:	2201      	movs	r2, #1
 800263a:	601a      	str	r2, [r3, #0]
			break;
 800263c:	e234      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
		case 5://5号命令，W25qxx_IsEmptyPage，检查页是否为空,地址(4字节)+偏移(4字节)+数量(4字节)，均为小端模式
			if(!(spi_cmd_data.length>=13 && W25qxx_IsEmptyPage(U8A2U32(&(spi_cmd_data.data[1])),U8A2U32(&(spi_cmd_data.data[5])),U8A2U32(&(spi_cmd_data.data[9])))))
 800263e:	4b51      	ldr	r3, [pc, #324]	; (8002784 <spi_cmd_process_call+0x2b0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2b0c      	cmp	r3, #12
 8002644:	d920      	bls.n	8002688 <spi_cmd_process_call+0x1b4>
 8002646:	4b4f      	ldr	r3, [pc, #316]	; (8002784 <spi_cmd_process_call+0x2b0>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	3301      	adds	r3, #1
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fedd 	bl	800240c <U8A2U32>
 8002652:	4604      	mov	r4, r0
 8002654:	4b4b      	ldr	r3, [pc, #300]	; (8002784 <spi_cmd_process_call+0x2b0>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	3305      	adds	r3, #5
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff fed6 	bl	800240c <U8A2U32>
 8002660:	4605      	mov	r5, r0
 8002662:	4b48      	ldr	r3, [pc, #288]	; (8002784 <spi_cmd_process_call+0x2b0>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	3309      	adds	r3, #9
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fecf 	bl	800240c <U8A2U32>
 800266e:	4603      	mov	r3, r0
 8002670:	461a      	mov	r2, r3
 8002672:	4629      	mov	r1, r5
 8002674:	4620      	mov	r0, r4
 8002676:	f7fe fe57 	bl	8001328 <W25qxx_IsEmptyPage>
 800267a:	4603      	mov	r3, r0
 800267c:	f083 0301 	eor.w	r3, r3, #1
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 820b 	beq.w	8002a9e <spi_cmd_process_call+0x5ca>
			{
					spi_cmd_data.data[0]=0xff;//失败命令的返回
 8002688:	4b3e      	ldr	r3, [pc, #248]	; (8002784 <spi_cmd_process_call+0x2b0>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	22ff      	movs	r2, #255	; 0xff
 800268e:	701a      	strb	r2, [r3, #0]
					spi_cmd_data.length=0x01;
 8002690:	4b3c      	ldr	r3, [pc, #240]	; (8002784 <spi_cmd_process_call+0x2b0>)
 8002692:	2201      	movs	r2, #1
 8002694:	601a      	str	r2, [r3, #0]
			}

			break;
 8002696:	e202      	b.n	8002a9e <spi_cmd_process_call+0x5ca>
		case 6://6号命令，W25qxx_IsEmptySector,检查扇区是否为空,地址(4字节)+偏移(4字节)+数量(4字节)，均为小端模式
			if(!(spi_cmd_data.length>=13 && W25qxx_IsEmptySector(U8A2U32(&(spi_cmd_data.data[1])),U8A2U32(&(spi_cmd_data.data[5])),U8A2U32(&(spi_cmd_data.data[9])))))
 8002698:	4b3a      	ldr	r3, [pc, #232]	; (8002784 <spi_cmd_process_call+0x2b0>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b0c      	cmp	r3, #12
 800269e:	d920      	bls.n	80026e2 <spi_cmd_process_call+0x20e>
 80026a0:	4b38      	ldr	r3, [pc, #224]	; (8002784 <spi_cmd_process_call+0x2b0>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	3301      	adds	r3, #1
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff feb0 	bl	800240c <U8A2U32>
 80026ac:	4604      	mov	r4, r0
 80026ae:	4b35      	ldr	r3, [pc, #212]	; (8002784 <spi_cmd_process_call+0x2b0>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	3305      	adds	r3, #5
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fea9 	bl	800240c <U8A2U32>
 80026ba:	4605      	mov	r5, r0
 80026bc:	4b31      	ldr	r3, [pc, #196]	; (8002784 <spi_cmd_process_call+0x2b0>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	3309      	adds	r3, #9
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff fea2 	bl	800240c <U8A2U32>
 80026c8:	4603      	mov	r3, r0
 80026ca:	461a      	mov	r2, r3
 80026cc:	4629      	mov	r1, r5
 80026ce:	4620      	mov	r0, r4
 80026d0:	f7fe ff16 	bl	8001500 <W25qxx_IsEmptySector>
 80026d4:	4603      	mov	r3, r0
 80026d6:	f083 0301 	eor.w	r3, r3, #1
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 81e0 	beq.w	8002aa2 <spi_cmd_process_call+0x5ce>
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 80026e2:	4b28      	ldr	r3, [pc, #160]	; (8002784 <spi_cmd_process_call+0x2b0>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	22ff      	movs	r2, #255	; 0xff
 80026e8:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 80026ea:	4b26      	ldr	r3, [pc, #152]	; (8002784 <spi_cmd_process_call+0x2b0>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	601a      	str	r2, [r3, #0]
			}

			break;
 80026f0:	e1d7      	b.n	8002aa2 <spi_cmd_process_call+0x5ce>
		case 7://7号命令，W25qxx_IsEmptyBlock，检查块是否为空,地址(4字节)+偏移(4字节)+数量(4字节)，均为小端模式
			if(!(spi_cmd_data.length>=13 && W25qxx_IsEmptyBlock(U8A2U32(&(spi_cmd_data.data[1])),U8A2U32(&(spi_cmd_data.data[5])),U8A2U32(&(spi_cmd_data.data[9])))))
 80026f2:	4b24      	ldr	r3, [pc, #144]	; (8002784 <spi_cmd_process_call+0x2b0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b0c      	cmp	r3, #12
 80026f8:	d920      	bls.n	800273c <spi_cmd_process_call+0x268>
 80026fa:	4b22      	ldr	r3, [pc, #136]	; (8002784 <spi_cmd_process_call+0x2b0>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	3301      	adds	r3, #1
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff fe83 	bl	800240c <U8A2U32>
 8002706:	4604      	mov	r4, r0
 8002708:	4b1e      	ldr	r3, [pc, #120]	; (8002784 <spi_cmd_process_call+0x2b0>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	3305      	adds	r3, #5
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff fe7c 	bl	800240c <U8A2U32>
 8002714:	4605      	mov	r5, r0
 8002716:	4b1b      	ldr	r3, [pc, #108]	; (8002784 <spi_cmd_process_call+0x2b0>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	3309      	adds	r3, #9
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff fe75 	bl	800240c <U8A2U32>
 8002722:	4603      	mov	r3, r0
 8002724:	461a      	mov	r2, r3
 8002726:	4629      	mov	r1, r5
 8002728:	4620      	mov	r0, r4
 800272a:	f7fe ffcb 	bl	80016c4 <W25qxx_IsEmptyBlock>
 800272e:	4603      	mov	r3, r0
 8002730:	f083 0301 	eor.w	r3, r3, #1
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 81b5 	beq.w	8002aa6 <spi_cmd_process_call+0x5d2>
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 800273c:	4b11      	ldr	r3, [pc, #68]	; (8002784 <spi_cmd_process_call+0x2b0>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	22ff      	movs	r2, #255	; 0xff
 8002742:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 8002744:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <spi_cmd_process_call+0x2b0>)
 8002746:	2201      	movs	r2, #1
 8002748:	601a      	str	r2, [r3, #0]
			}

			break;
 800274a:	e1ac      	b.n	8002aa6 <spi_cmd_process_call+0x5d2>
		case 8://8号命令，W25qxx_WriteByte，写入1字节数据(需要先手动擦除)，地址(4字节)+数据(1字节)
			if(spi_cmd_data.length>=6)
 800274c:	4b0d      	ldr	r3, [pc, #52]	; (8002784 <spi_cmd_process_call+0x2b0>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b05      	cmp	r3, #5
 8002752:	d90f      	bls.n	8002774 <spi_cmd_process_call+0x2a0>
			{
				W25qxx_WriteByte(spi_cmd_data.data[5],U8A2U32(&(spi_cmd_data.data[1])));
 8002754:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <spi_cmd_process_call+0x2b0>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	3305      	adds	r3, #5
 800275a:	781c      	ldrb	r4, [r3, #0]
 800275c:	4b09      	ldr	r3, [pc, #36]	; (8002784 <spi_cmd_process_call+0x2b0>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	3301      	adds	r3, #1
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff fe52 	bl	800240c <U8A2U32>
 8002768:	4603      	mov	r3, r0
 800276a:	4619      	mov	r1, r3
 800276c:	4620      	mov	r0, r4
 800276e:	f7ff f88b 	bl	8001888 <W25qxx_WriteByte>
			else
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
				spi_cmd_data.length=0x01;
			}
			break;
 8002772:	e199      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 8002774:	4b03      	ldr	r3, [pc, #12]	; (8002784 <spi_cmd_process_call+0x2b0>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	22ff      	movs	r2, #255	; 0xff
 800277a:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 800277c:	4b01      	ldr	r3, [pc, #4]	; (8002784 <spi_cmd_process_call+0x2b0>)
 800277e:	2201      	movs	r2, #1
 8002780:	601a      	str	r2, [r3, #0]
			break;
 8002782:	e191      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
 8002784:	2000001c 	.word	0x2000001c
 8002788:	200010a4 	.word	0x200010a4
 800278c:	200007d0 	.word	0x200007d0
		case 9://9号命令，W25qxx_WritePage,按页写入数据，地址(4字节)+偏移(4字节)+数据(不定字节)，均为小端模式
			if(spi_cmd_data.length>=10)
 8002790:	4ba2      	ldr	r3, [pc, #648]	; (8002a1c <spi_cmd_process_call+0x548>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b09      	cmp	r3, #9
 8002796:	d919      	bls.n	80027cc <spi_cmd_process_call+0x2f8>
			{
				W25qxx_WritePage(&(spi_cmd_data.data[9]),U8A2U32(&(spi_cmd_data.data[1])),U8A2U32(&(spi_cmd_data.data[5])),spi_cmd_data.length-9);
 8002798:	4ba0      	ldr	r3, [pc, #640]	; (8002a1c <spi_cmd_process_call+0x548>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f103 0409 	add.w	r4, r3, #9
 80027a0:	4b9e      	ldr	r3, [pc, #632]	; (8002a1c <spi_cmd_process_call+0x548>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	3301      	adds	r3, #1
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fe30 	bl	800240c <U8A2U32>
 80027ac:	4605      	mov	r5, r0
 80027ae:	4b9b      	ldr	r3, [pc, #620]	; (8002a1c <spi_cmd_process_call+0x548>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	3305      	adds	r3, #5
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fe29 	bl	800240c <U8A2U32>
 80027ba:	4602      	mov	r2, r0
 80027bc:	4b97      	ldr	r3, [pc, #604]	; (8002a1c <spi_cmd_process_call+0x548>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	3b09      	subs	r3, #9
 80027c2:	4629      	mov	r1, r5
 80027c4:	4620      	mov	r0, r4
 80027c6:	f7ff f8b1 	bl	800192c <W25qxx_WritePage>
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
				spi_cmd_data.length=0x01;
			}

			break;
 80027ca:	e16d      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 80027cc:	4b93      	ldr	r3, [pc, #588]	; (8002a1c <spi_cmd_process_call+0x548>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	22ff      	movs	r2, #255	; 0xff
 80027d2:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 80027d4:	4b91      	ldr	r3, [pc, #580]	; (8002a1c <spi_cmd_process_call+0x548>)
 80027d6:	2201      	movs	r2, #1
 80027d8:	601a      	str	r2, [r3, #0]
			break;
 80027da:	e165      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
		case 10://10号命令,W25qxx_WriteSector,按扇区写入数据，地址(4字节)+偏移(4字节)+数据(不定字节)，均为小端模式
			if(spi_cmd_data.length>=10)
 80027dc:	4b8f      	ldr	r3, [pc, #572]	; (8002a1c <spi_cmd_process_call+0x548>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b09      	cmp	r3, #9
 80027e2:	d919      	bls.n	8002818 <spi_cmd_process_call+0x344>
			{
				W25qxx_WriteSector(&(spi_cmd_data.data[9]),U8A2U32(&(spi_cmd_data.data[1])),U8A2U32(&(spi_cmd_data.data[5])),spi_cmd_data.length-9);
 80027e4:	4b8d      	ldr	r3, [pc, #564]	; (8002a1c <spi_cmd_process_call+0x548>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f103 0409 	add.w	r4, r3, #9
 80027ec:	4b8b      	ldr	r3, [pc, #556]	; (8002a1c <spi_cmd_process_call+0x548>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	3301      	adds	r3, #1
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff fe0a 	bl	800240c <U8A2U32>
 80027f8:	4605      	mov	r5, r0
 80027fa:	4b88      	ldr	r3, [pc, #544]	; (8002a1c <spi_cmd_process_call+0x548>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	3305      	adds	r3, #5
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff fe03 	bl	800240c <U8A2U32>
 8002806:	4602      	mov	r2, r0
 8002808:	4b84      	ldr	r3, [pc, #528]	; (8002a1c <spi_cmd_process_call+0x548>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	3b09      	subs	r3, #9
 800280e:	4629      	mov	r1, r5
 8002810:	4620      	mov	r0, r4
 8002812:	f7ff f90b 	bl	8001a2c <W25qxx_WriteSector>
			else
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
				spi_cmd_data.length=0x01;
			}
			break;
 8002816:	e147      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 8002818:	4b80      	ldr	r3, [pc, #512]	; (8002a1c <spi_cmd_process_call+0x548>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	22ff      	movs	r2, #255	; 0xff
 800281e:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 8002820:	4b7e      	ldr	r3, [pc, #504]	; (8002a1c <spi_cmd_process_call+0x548>)
 8002822:	2201      	movs	r2, #1
 8002824:	601a      	str	r2, [r3, #0]
			break;
 8002826:	e13f      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
		case 11://11号命令,W25qxx_WriteBlock,按块写入数据，地址(4字节)+偏移(4字节)+数据(不定字节)，均为小端模式
			if(spi_cmd_data.length>=10)
 8002828:	4b7c      	ldr	r3, [pc, #496]	; (8002a1c <spi_cmd_process_call+0x548>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b09      	cmp	r3, #9
 800282e:	d919      	bls.n	8002864 <spi_cmd_process_call+0x390>
			{
				W25qxx_WriteBlock(&(spi_cmd_data.data[9]),U8A2U32(&(spi_cmd_data.data[1])),U8A2U32(&(spi_cmd_data.data[5])),spi_cmd_data.length-9);
 8002830:	4b7a      	ldr	r3, [pc, #488]	; (8002a1c <spi_cmd_process_call+0x548>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f103 0409 	add.w	r4, r3, #9
 8002838:	4b78      	ldr	r3, [pc, #480]	; (8002a1c <spi_cmd_process_call+0x548>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	3301      	adds	r3, #1
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff fde4 	bl	800240c <U8A2U32>
 8002844:	4605      	mov	r5, r0
 8002846:	4b75      	ldr	r3, [pc, #468]	; (8002a1c <spi_cmd_process_call+0x548>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	3305      	adds	r3, #5
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fddd 	bl	800240c <U8A2U32>
 8002852:	4602      	mov	r2, r0
 8002854:	4b71      	ldr	r3, [pc, #452]	; (8002a1c <spi_cmd_process_call+0x548>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	3b09      	subs	r3, #9
 800285a:	4629      	mov	r1, r5
 800285c:	4620      	mov	r0, r4
 800285e:	f7ff f945 	bl	8001aec <W25qxx_WriteBlock>
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
				spi_cmd_data.length=0x01;
			}

			break;
 8002862:	e121      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 8002864:	4b6d      	ldr	r3, [pc, #436]	; (8002a1c <spi_cmd_process_call+0x548>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	22ff      	movs	r2, #255	; 0xff
 800286a:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 800286c:	4b6b      	ldr	r3, [pc, #428]	; (8002a1c <spi_cmd_process_call+0x548>)
 800286e:	2201      	movs	r2, #1
 8002870:	601a      	str	r2, [r3, #0]
			break;
 8002872:	e119      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
		case 12://12号命令，W25qxx_ReadByte，读取1字节数据，地址(4字节)
			if(spi_cmd_data.length>=5)
 8002874:	4b69      	ldr	r3, [pc, #420]	; (8002a1c <spi_cmd_process_call+0x548>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2b04      	cmp	r3, #4
 800287a:	d911      	bls.n	80028a0 <spi_cmd_process_call+0x3cc>
			{
				W25qxx_ReadByte(&spi_cmd_data.data[5],U8A2U32(&spi_cmd_data.data[1]));
 800287c:	4b67      	ldr	r3, [pc, #412]	; (8002a1c <spi_cmd_process_call+0x548>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	1d5c      	adds	r4, r3, #5
 8002882:	4b66      	ldr	r3, [pc, #408]	; (8002a1c <spi_cmd_process_call+0x548>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	3301      	adds	r3, #1
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff fdbf 	bl	800240c <U8A2U32>
 800288e:	4603      	mov	r3, r0
 8002890:	4619      	mov	r1, r3
 8002892:	4620      	mov	r0, r4
 8002894:	f7ff f98a 	bl	8001bac <W25qxx_ReadByte>
				spi_cmd_data.length=6;
 8002898:	4b60      	ldr	r3, [pc, #384]	; (8002a1c <spi_cmd_process_call+0x548>)
 800289a:	2206      	movs	r2, #6
 800289c:	601a      	str	r2, [r3, #0]
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
				spi_cmd_data.length=0x01;
			}

			break;
 800289e:	e103      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 80028a0:	4b5e      	ldr	r3, [pc, #376]	; (8002a1c <spi_cmd_process_call+0x548>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	22ff      	movs	r2, #255	; 0xff
 80028a6:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 80028a8:	4b5c      	ldr	r3, [pc, #368]	; (8002a1c <spi_cmd_process_call+0x548>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	601a      	str	r2, [r3, #0]
			break;
 80028ae:	e0fb      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
		case 13://13号命令，W25qxx_ReadBytes，读多字节数据，地址(4字节)+数量(4字节)
			if(spi_cmd_data.length>=9 && U8A2U32(&spi_cmd_data.data[5]) <= 512)//1次最多读512字节
 80028b0:	4b5a      	ldr	r3, [pc, #360]	; (8002a1c <spi_cmd_process_call+0x548>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d92b      	bls.n	8002910 <spi_cmd_process_call+0x43c>
 80028b8:	4b58      	ldr	r3, [pc, #352]	; (8002a1c <spi_cmd_process_call+0x548>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	3305      	adds	r3, #5
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff fda4 	bl	800240c <U8A2U32>
 80028c4:	4603      	mov	r3, r0
 80028c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028ca:	d821      	bhi.n	8002910 <spi_cmd_process_call+0x43c>
			{
				W25qxx_ReadBytes(&spi_cmd_data.data[9],U8A2U32(&spi_cmd_data.data[1]),U8A2U32(&spi_cmd_data.data[5]));
 80028cc:	4b53      	ldr	r3, [pc, #332]	; (8002a1c <spi_cmd_process_call+0x548>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f103 0409 	add.w	r4, r3, #9
 80028d4:	4b51      	ldr	r3, [pc, #324]	; (8002a1c <spi_cmd_process_call+0x548>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	3301      	adds	r3, #1
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff fd96 	bl	800240c <U8A2U32>
 80028e0:	4605      	mov	r5, r0
 80028e2:	4b4e      	ldr	r3, [pc, #312]	; (8002a1c <spi_cmd_process_call+0x548>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	3305      	adds	r3, #5
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff fd8f 	bl	800240c <U8A2U32>
 80028ee:	4603      	mov	r3, r0
 80028f0:	461a      	mov	r2, r3
 80028f2:	4629      	mov	r1, r5
 80028f4:	4620      	mov	r0, r4
 80028f6:	f7ff f9a9 	bl	8001c4c <W25qxx_ReadBytes>
				spi_cmd_data.length=9+U8A2U32(&spi_cmd_data.data[5]);
 80028fa:	4b48      	ldr	r3, [pc, #288]	; (8002a1c <spi_cmd_process_call+0x548>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	3305      	adds	r3, #5
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff fd83 	bl	800240c <U8A2U32>
 8002906:	4603      	mov	r3, r0
 8002908:	3309      	adds	r3, #9
 800290a:	4a44      	ldr	r2, [pc, #272]	; (8002a1c <spi_cmd_process_call+0x548>)
 800290c:	6013      	str	r3, [r2, #0]
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
				spi_cmd_data.length=0x01;
			}

			break;
 800290e:	e0cb      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 8002910:	4b42      	ldr	r3, [pc, #264]	; (8002a1c <spi_cmd_process_call+0x548>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	22ff      	movs	r2, #255	; 0xff
 8002916:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 8002918:	4b40      	ldr	r3, [pc, #256]	; (8002a1c <spi_cmd_process_call+0x548>)
 800291a:	2201      	movs	r2, #1
 800291c:	601a      	str	r2, [r3, #0]
			break;
 800291e:	e0c3      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
		case 14://14号命令，W25qxx_ReadPage，按页读多字节数据，地址(4字节)+偏移(4字节)+数量(4字节),数量需要大于0
			if(spi_cmd_data.length>=13 && U8A2U32(&spi_cmd_data.data[9]) <= 512)//1次最多读512字节
 8002920:	4b3e      	ldr	r3, [pc, #248]	; (8002a1c <spi_cmd_process_call+0x548>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b0c      	cmp	r3, #12
 8002926:	d932      	bls.n	800298e <spi_cmd_process_call+0x4ba>
 8002928:	4b3c      	ldr	r3, [pc, #240]	; (8002a1c <spi_cmd_process_call+0x548>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	3309      	adds	r3, #9
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff fd6c 	bl	800240c <U8A2U32>
 8002934:	4603      	mov	r3, r0
 8002936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800293a:	d828      	bhi.n	800298e <spi_cmd_process_call+0x4ba>
			{
				W25qxx_ReadPage(&spi_cmd_data.data[13],U8A2U32(&spi_cmd_data.data[1]),U8A2U32(&spi_cmd_data.data[5]),U8A2U32(&spi_cmd_data.data[9]));
 800293c:	4b37      	ldr	r3, [pc, #220]	; (8002a1c <spi_cmd_process_call+0x548>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f103 040d 	add.w	r4, r3, #13
 8002944:	4b35      	ldr	r3, [pc, #212]	; (8002a1c <spi_cmd_process_call+0x548>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	3301      	adds	r3, #1
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff fd5e 	bl	800240c <U8A2U32>
 8002950:	4605      	mov	r5, r0
 8002952:	4b32      	ldr	r3, [pc, #200]	; (8002a1c <spi_cmd_process_call+0x548>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	3305      	adds	r3, #5
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff fd57 	bl	800240c <U8A2U32>
 800295e:	4606      	mov	r6, r0
 8002960:	4b2e      	ldr	r3, [pc, #184]	; (8002a1c <spi_cmd_process_call+0x548>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	3309      	adds	r3, #9
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff fd50 	bl	800240c <U8A2U32>
 800296c:	4603      	mov	r3, r0
 800296e:	4632      	mov	r2, r6
 8002970:	4629      	mov	r1, r5
 8002972:	4620      	mov	r0, r4
 8002974:	f7ff f9c2 	bl	8001cfc <W25qxx_ReadPage>
				spi_cmd_data.length=13+U8A2U32(&spi_cmd_data.data[9]);
 8002978:	4b28      	ldr	r3, [pc, #160]	; (8002a1c <spi_cmd_process_call+0x548>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	3309      	adds	r3, #9
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff fd44 	bl	800240c <U8A2U32>
 8002984:	4603      	mov	r3, r0
 8002986:	330d      	adds	r3, #13
 8002988:	4a24      	ldr	r2, [pc, #144]	; (8002a1c <spi_cmd_process_call+0x548>)
 800298a:	6013      	str	r3, [r2, #0]
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
				spi_cmd_data.length=0x01;
			}

			break;
 800298c:	e08c      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 800298e:	4b23      	ldr	r3, [pc, #140]	; (8002a1c <spi_cmd_process_call+0x548>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	22ff      	movs	r2, #255	; 0xff
 8002994:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 8002996:	4b21      	ldr	r3, [pc, #132]	; (8002a1c <spi_cmd_process_call+0x548>)
 8002998:	2201      	movs	r2, #1
 800299a:	601a      	str	r2, [r3, #0]
			break;
 800299c:	e084      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>

		case 15://15号命令，W25qxx_ReadSector，按页读多字节数据，地址(4字节)+偏移(4字节)+数量(4字节),数量需要大于0
			if(spi_cmd_data.length>=13 && U8A2U32(&spi_cmd_data.data[9]) <= 512)//1次最多读512字节
 800299e:	4b1f      	ldr	r3, [pc, #124]	; (8002a1c <spi_cmd_process_call+0x548>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2b0c      	cmp	r3, #12
 80029a4:	d932      	bls.n	8002a0c <spi_cmd_process_call+0x538>
 80029a6:	4b1d      	ldr	r3, [pc, #116]	; (8002a1c <spi_cmd_process_call+0x548>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	3309      	adds	r3, #9
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff fd2d 	bl	800240c <U8A2U32>
 80029b2:	4603      	mov	r3, r0
 80029b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029b8:	d828      	bhi.n	8002a0c <spi_cmd_process_call+0x538>
			{
				W25qxx_ReadSector(&spi_cmd_data.data[13],U8A2U32(&spi_cmd_data.data[1]),U8A2U32(&spi_cmd_data.data[5]),U8A2U32(&spi_cmd_data.data[9]));
 80029ba:	4b18      	ldr	r3, [pc, #96]	; (8002a1c <spi_cmd_process_call+0x548>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f103 040d 	add.w	r4, r3, #13
 80029c2:	4b16      	ldr	r3, [pc, #88]	; (8002a1c <spi_cmd_process_call+0x548>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	3301      	adds	r3, #1
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff fd1f 	bl	800240c <U8A2U32>
 80029ce:	4605      	mov	r5, r0
 80029d0:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <spi_cmd_process_call+0x548>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	3305      	adds	r3, #5
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff fd18 	bl	800240c <U8A2U32>
 80029dc:	4606      	mov	r6, r0
 80029de:	4b0f      	ldr	r3, [pc, #60]	; (8002a1c <spi_cmd_process_call+0x548>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	3309      	adds	r3, #9
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fd11 	bl	800240c <U8A2U32>
 80029ea:	4603      	mov	r3, r0
 80029ec:	4632      	mov	r2, r6
 80029ee:	4629      	mov	r1, r5
 80029f0:	4620      	mov	r0, r4
 80029f2:	f7ff f9fd 	bl	8001df0 <W25qxx_ReadSector>
				spi_cmd_data.length=13+U8A2U32(&spi_cmd_data.data[9]);
 80029f6:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <spi_cmd_process_call+0x548>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	3309      	adds	r3, #9
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff fd05 	bl	800240c <U8A2U32>
 8002a02:	4603      	mov	r3, r0
 8002a04:	330d      	adds	r3, #13
 8002a06:	4a05      	ldr	r2, [pc, #20]	; (8002a1c <spi_cmd_process_call+0x548>)
 8002a08:	6013      	str	r3, [r2, #0]
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
				spi_cmd_data.length=0x01;
			}

			break;
 8002a0a:	e04d      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 8002a0c:	4b03      	ldr	r3, [pc, #12]	; (8002a1c <spi_cmd_process_call+0x548>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	22ff      	movs	r2, #255	; 0xff
 8002a12:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 8002a14:	4b01      	ldr	r3, [pc, #4]	; (8002a1c <spi_cmd_process_call+0x548>)
 8002a16:	2201      	movs	r2, #1
 8002a18:	601a      	str	r2, [r3, #0]
			break;
 8002a1a:	e045      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
 8002a1c:	2000001c 	.word	0x2000001c

		case 16://16号命令，W25qxx_ReadBlock，按页读多字节数据，地址(4字节)+偏移(4字节)+数量(4字节),数量需要大于0
			if(spi_cmd_data.length>=13 && U8A2U32(&spi_cmd_data.data[9]) <= 512)
 8002a20:	4b28      	ldr	r3, [pc, #160]	; (8002ac4 <spi_cmd_process_call+0x5f0>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b0c      	cmp	r3, #12
 8002a26:	d932      	bls.n	8002a8e <spi_cmd_process_call+0x5ba>
 8002a28:	4b26      	ldr	r3, [pc, #152]	; (8002ac4 <spi_cmd_process_call+0x5f0>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	3309      	adds	r3, #9
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff fcec 	bl	800240c <U8A2U32>
 8002a34:	4603      	mov	r3, r0
 8002a36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a3a:	d828      	bhi.n	8002a8e <spi_cmd_process_call+0x5ba>
			{
				W25qxx_ReadBlock(&spi_cmd_data.data[13],U8A2U32(&spi_cmd_data.data[1]),U8A2U32(&spi_cmd_data.data[5]),U8A2U32(&spi_cmd_data.data[9]));
 8002a3c:	4b21      	ldr	r3, [pc, #132]	; (8002ac4 <spi_cmd_process_call+0x5f0>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f103 040d 	add.w	r4, r3, #13
 8002a44:	4b1f      	ldr	r3, [pc, #124]	; (8002ac4 <spi_cmd_process_call+0x5f0>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff fcde 	bl	800240c <U8A2U32>
 8002a50:	4605      	mov	r5, r0
 8002a52:	4b1c      	ldr	r3, [pc, #112]	; (8002ac4 <spi_cmd_process_call+0x5f0>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	3305      	adds	r3, #5
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff fcd7 	bl	800240c <U8A2U32>
 8002a5e:	4606      	mov	r6, r0
 8002a60:	4b18      	ldr	r3, [pc, #96]	; (8002ac4 <spi_cmd_process_call+0x5f0>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	3309      	adds	r3, #9
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff fcd0 	bl	800240c <U8A2U32>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	4632      	mov	r2, r6
 8002a70:	4629      	mov	r1, r5
 8002a72:	4620      	mov	r0, r4
 8002a74:	f7ff fa1c 	bl	8001eb0 <W25qxx_ReadBlock>
				spi_cmd_data.length=13+U8A2U32(&spi_cmd_data.data[9]);
 8002a78:	4b12      	ldr	r3, [pc, #72]	; (8002ac4 <spi_cmd_process_call+0x5f0>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	3309      	adds	r3, #9
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff fcc4 	bl	800240c <U8A2U32>
 8002a84:	4603      	mov	r3, r0
 8002a86:	330d      	adds	r3, #13
 8002a88:	4a0e      	ldr	r2, [pc, #56]	; (8002ac4 <spi_cmd_process_call+0x5f0>)
 8002a8a:	6013      	str	r3, [r2, #0]
			{
				spi_cmd_data.data[0]=0xff;//失败命令的返回
				spi_cmd_data.length=0x01;
			}

			break;
 8002a8c:	e00c      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
				spi_cmd_data.data[0]=0xff;//失败命令的返回
 8002a8e:	4b0d      	ldr	r3, [pc, #52]	; (8002ac4 <spi_cmd_process_call+0x5f0>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	22ff      	movs	r2, #255	; 0xff
 8002a94:	701a      	strb	r2, [r3, #0]
				spi_cmd_data.length=0x01;
 8002a96:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <spi_cmd_process_call+0x5f0>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]
			break;
 8002a9c:	e004      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
			break;
 8002a9e:	bf00      	nop
 8002aa0:	e002      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
			break;
 8002aa2:	bf00      	nop
 8002aa4:	e000      	b.n	8002aa8 <spi_cmd_process_call+0x5d4>
			break;
 8002aa6:	bf00      	nop
		}

		CDC_Transmit_FS(spi_cmd_data.data,spi_cmd_data.length);
 8002aa8:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <spi_cmd_process_call+0x5f0>)
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <spi_cmd_process_call+0x5f0>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	f008 fd8f 	bl	800b5d8 <CDC_Transmit_FS>
		spi_cmd_data.IsUpdate=0;
 8002aba:	4b02      	ldr	r3, [pc, #8]	; (8002ac4 <spi_cmd_process_call+0x5f0>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	711a      	strb	r2, [r3, #4]
	}
}
 8002ac0:	bf00      	nop
 8002ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ac4:	2000001c 	.word	0x2000001c

08002ac8 <uart_transmit>:

#include "userapp.h"
uint8_t uart_rx_buff[1000];//接收缓冲
//uint8_t uart_tx_buff[1000];//发送缓冲
uint8_t uart_transmit(void * buf,size_t len)//发送数据到串口
{
 8002ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2,buf,len,(uint32_t)(len*(1000.0/linecode.Rate))+1000);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	b29c      	uxth	r4, r3
 8002ad6:	6838      	ldr	r0, [r7, #0]
 8002ad8:	f7fd fc7a 	bl	80003d0 <__aeabi_ui2d>
 8002adc:	4605      	mov	r5, r0
 8002ade:	460e      	mov	r6, r1
 8002ae0:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <uart_transmit+0x64>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fd fc73 	bl	80003d0 <__aeabi_ui2d>
 8002aea:	4602      	mov	r2, r0
 8002aec:	460b      	mov	r3, r1
 8002aee:	f04f 0000 	mov.w	r0, #0
 8002af2:	490f      	ldr	r1, [pc, #60]	; (8002b30 <uart_transmit+0x68>)
 8002af4:	f7fd fe10 	bl	8000718 <__aeabi_ddiv>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4628      	mov	r0, r5
 8002afe:	4631      	mov	r1, r6
 8002b00:	f7fd fce0 	bl	80004c4 <__aeabi_dmul>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	4610      	mov	r0, r2
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	f7fd feec 	bl	80008e8 <__aeabi_d2uiz>
 8002b10:	4603      	mov	r3, r0
 8002b12:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002b16:	4622      	mov	r2, r4
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	4806      	ldr	r0, [pc, #24]	; (8002b34 <uart_transmit+0x6c>)
 8002b1c:	f005 fa5f 	bl	8007fde <HAL_UART_Transmit>
	return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000004 	.word	0x20000004
 8002b30:	408f4000 	.word	0x408f4000
 8002b34:	200010fc 	.word	0x200010fc

08002b38 <uart_start_receive>:

void uart_start_receive()
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
	if(huart2.gState !=HAL_UART_STATE_READY && huart2.gState != HAL_UART_STATE_BUSY_TX)
 8002b3c:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <uart_start_receive+0x4c>)
 8002b3e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b20      	cmp	r3, #32
 8002b46:	d008      	beq.n	8002b5a <uart_start_receive+0x22>
 8002b48:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <uart_start_receive+0x4c>)
 8002b4a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b21      	cmp	r3, #33	; 0x21
 8002b52:	d002      	beq.n	8002b5a <uart_start_receive+0x22>
			HAL_UART_DMAStop(&huart2);
 8002b54:	480b      	ldr	r0, [pc, #44]	; (8002b84 <uart_start_receive+0x4c>)
 8002b56:	f005 fb5b 	bl	8008210 <HAL_UART_DMAStop>
	if(huart2.gState == HAL_UART_STATE_BUSY_TX)
 8002b5a:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <uart_start_receive+0x4c>)
 8002b5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b21      	cmp	r3, #33	; 0x21
 8002b64:	d106      	bne.n	8002b74 <uart_start_receive+0x3c>
			while(huart2.gState!=HAL_UART_STATE_READY);//等待发送完成
 8002b66:	bf00      	nop
 8002b68:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <uart_start_receive+0x4c>)
 8002b6a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b20      	cmp	r3, #32
 8002b72:	d1f9      	bne.n	8002b68 <uart_start_receive+0x30>
	HAL_UART_Receive_DMA(&huart2,uart_rx_buff,sizeof(uart_rx_buff));
 8002b74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b78:	4903      	ldr	r1, [pc, #12]	; (8002b88 <uart_start_receive+0x50>)
 8002b7a:	4802      	ldr	r0, [pc, #8]	; (8002b84 <uart_start_receive+0x4c>)
 8002b7c:	f005 fac8 	bl	8008110 <HAL_UART_Receive_DMA>
}
 8002b80:	bf00      	nop
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	200010fc 	.word	0x200010fc
 8002b88:	20000be0 	.word	0x20000be0

08002b8c <uart_finish_receive>:

void uart_finish_receive()
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
	if(huart2.gState !=HAL_UART_STATE_READY && huart2.gState != HAL_UART_STATE_BUSY_TX)
 8002b92:	4b1a      	ldr	r3, [pc, #104]	; (8002bfc <uart_finish_receive+0x70>)
 8002b94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b20      	cmp	r3, #32
 8002b9c:	d008      	beq.n	8002bb0 <uart_finish_receive+0x24>
 8002b9e:	4b17      	ldr	r3, [pc, #92]	; (8002bfc <uart_finish_receive+0x70>)
 8002ba0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b21      	cmp	r3, #33	; 0x21
 8002ba8:	d002      	beq.n	8002bb0 <uart_finish_receive+0x24>
		HAL_UART_DMAStop(&huart2);
 8002baa:	4814      	ldr	r0, [pc, #80]	; (8002bfc <uart_finish_receive+0x70>)
 8002bac:	f005 fb30 	bl	8008210 <HAL_UART_DMAStop>
	if(huart2.gState == HAL_UART_STATE_BUSY_TX)
 8002bb0:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <uart_finish_receive+0x70>)
 8002bb2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b21      	cmp	r3, #33	; 0x21
 8002bba:	d106      	bne.n	8002bca <uart_finish_receive+0x3e>
		while(huart2.gState!=HAL_UART_STATE_READY);//等待发送完成
 8002bbc:	bf00      	nop
 8002bbe:	4b0f      	ldr	r3, [pc, #60]	; (8002bfc <uart_finish_receive+0x70>)
 8002bc0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b20      	cmp	r3, #32
 8002bc8:	d1f9      	bne.n	8002bbe <uart_finish_receive+0x32>
	size_t count=sizeof(uart_rx_buff)-huart2.hdmarx->Instance->CNDTR;
 8002bca:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <uart_finish_receive+0x70>)
 8002bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8002bd6:	607b      	str	r3, [r7, #4]
	 uart_receive_call(uart_rx_buff,count);
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	4809      	ldr	r0, [pc, #36]	; (8002c00 <uart_finish_receive+0x74>)
 8002bdc:	f7ff fb24 	bl	8002228 <uart_receive_call>
	HAL_UART_DMAStop(&huart2);
 8002be0:	4806      	ldr	r0, [pc, #24]	; (8002bfc <uart_finish_receive+0x70>)
 8002be2:	f005 fb15 	bl	8008210 <HAL_UART_DMAStop>
	HAL_UART_Receive_DMA(&huart2,uart_rx_buff,sizeof(uart_rx_buff));
 8002be6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bea:	4905      	ldr	r1, [pc, #20]	; (8002c00 <uart_finish_receive+0x74>)
 8002bec:	4803      	ldr	r0, [pc, #12]	; (8002bfc <uart_finish_receive+0x70>)
 8002bee:	f005 fa8f 	bl	8008110 <HAL_UART_Receive_DMA>
}
 8002bf2:	bf00      	nop
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	200010fc 	.word	0x200010fc
 8002c00:	20000be0 	.word	0x20000be0

08002c04 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//DMA接收全满
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
	 UNUSED(huart);
	 uart_finish_receive();
 8002c0c:	f7ff ffbe 	bl	8002b8c <uart_finish_receive>
}
 8002c10:	bf00      	nop
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_UART_RxHalfCpltCallback>:
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)//DMA接收半满
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
	 UNUSED(huart);
	 uart_finish_receive();
 8002c20:	f7ff ffb4 	bl	8002b8c <uart_finish_receive>
}
 8002c24:	bf00      	nop
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	{//复位时断开USB连接,再重新连接USB
		{
		  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c32:	1d3b      	adds	r3, r7, #4
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	605a      	str	r2, [r3, #4]
 8002c3a:	609a      	str	r2, [r3, #8]
 8002c3c:	60da      	str	r2, [r3, #12]

		  /* GPIO Ports Clock Enable */
		  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c3e:	4b21      	ldr	r3, [pc, #132]	; (8002cc4 <main+0x98>)
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	4a20      	ldr	r2, [pc, #128]	; (8002cc4 <main+0x98>)
 8002c44:	f043 0304 	orr.w	r3, r3, #4
 8002c48:	6193      	str	r3, [r2, #24]
 8002c4a:	4b1e      	ldr	r3, [pc, #120]	; (8002cc4 <main+0x98>)
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	f003 0304 	and.w	r3, r3, #4
 8002c52:	603b      	str	r3, [r7, #0]
 8002c54:	683b      	ldr	r3, [r7, #0]

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8002c56:	2200      	movs	r2, #0
 8002c58:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002c5c:	481a      	ldr	r0, [pc, #104]	; (8002cc8 <main+0x9c>)
 8002c5e:	f001 f95b 	bl	8003f18 <HAL_GPIO_WritePin>

		  /*Configure GPIO pins : PA11 PA12 */
		  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002c62:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002c66:	607b      	str	r3, [r7, #4]
		  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	60bb      	str	r3, [r7, #8]
		  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	60fb      	str	r3, [r7, #12]
		  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c70:	2302      	movs	r3, #2
 8002c72:	613b      	str	r3, [r7, #16]
		  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c74:	1d3b      	adds	r3, r7, #4
 8002c76:	4619      	mov	r1, r3
 8002c78:	4813      	ldr	r0, [pc, #76]	; (8002cc8 <main+0x9c>)
 8002c7a:	f000 fff3 	bl	8003c64 <HAL_GPIO_Init>

		  /*Configure GPIO pin Output Level */
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002c84:	4810      	ldr	r0, [pc, #64]	; (8002cc8 <main+0x9c>)
 8002c86:	f001 f947 	bl	8003f18 <HAL_GPIO_WritePin>

		}
		{//延时，
			uint32_t count=48000000/100;
 8002c8a:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <main+0xa0>)
 8002c8c:	617b      	str	r3, [r7, #20]
			while(count--);
 8002c8e:	bf00      	nop
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	1e5a      	subs	r2, r3, #1
 8002c94:	617a      	str	r2, [r7, #20]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1fa      	bne.n	8002c90 <main+0x64>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c9a:	f000 fc11 	bl	80034c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c9e:	f000 f817 	bl	8002cd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ca2:	f000 f933 	bl	8002f0c <MX_GPIO_Init>
  MX_DMA_Init();
 8002ca6:	f000 f90b 	bl	8002ec0 <MX_DMA_Init>
  MX_I2C1_Init();
 8002caa:	f000 f869 	bl	8002d80 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002cae:	f000 f8a7 	bl	8002e00 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002cb2:	f000 f8db 	bl	8002e6c <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8002cb6:	f008 fbaf 	bl	800b418 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  init_user_call();
 8002cba:	f7ff f959 	bl	8001f70 <init_user_call>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_user_call();
 8002cbe:	f7ff f967 	bl	8001f90 <loop_user_call>
 8002cc2:	e7fc      	b.n	8002cbe <main+0x92>
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40010800 	.word	0x40010800
 8002ccc:	00075300 	.word	0x00075300

08002cd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b094      	sub	sp, #80	; 0x50
 8002cd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cda:	2228      	movs	r2, #40	; 0x28
 8002cdc:	2100      	movs	r1, #0
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f009 f87b 	bl	800bdda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ce4:	f107 0314 	add.w	r3, r7, #20
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	605a      	str	r2, [r3, #4]
 8002cee:	609a      	str	r2, [r3, #8]
 8002cf0:	60da      	str	r2, [r3, #12]
 8002cf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cf4:	1d3b      	adds	r3, r7, #4
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	605a      	str	r2, [r3, #4]
 8002cfc:	609a      	str	r2, [r3, #8]
 8002cfe:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d00:	2302      	movs	r3, #2
 8002d02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d04:	2301      	movs	r3, #1
 8002d06:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d08:	2310      	movs	r3, #16
 8002d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002d10:	2300      	movs	r3, #0
 8002d12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002d14:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8002d18:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f003 fcfc 	bl	800671c <HAL_RCC_OscConfig>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002d2a:	f000 f93f 	bl	8002fac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d2e:	230f      	movs	r3, #15
 8002d30:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d32:	2302      	movs	r3, #2
 8002d34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d3e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d40:	2300      	movs	r3, #0
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002d44:	f107 0314 	add.w	r3, r7, #20
 8002d48:	2101      	movs	r1, #1
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f003 ff66 	bl	8006c1c <HAL_RCC_ClockConfig>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002d56:	f000 f929 	bl	8002fac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002d5a:	2310      	movs	r3, #16
 8002d5c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002d5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d62:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d64:	1d3b      	adds	r3, r7, #4
 8002d66:	4618      	mov	r0, r3
 8002d68:	f004 f924 	bl	8006fb4 <HAL_RCCEx_PeriphCLKConfig>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002d72:	f000 f91b 	bl	8002fac <Error_Handler>
  }
}
 8002d76:	bf00      	nop
 8002d78:	3750      	adds	r7, #80	; 0x50
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
	...

08002d80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  __HAL_RCC_I2C1_CLK_ENABLE();
 8002d86:	4b1a      	ldr	r3, [pc, #104]	; (8002df0 <MX_I2C1_Init+0x70>)
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	4a19      	ldr	r2, [pc, #100]	; (8002df0 <MX_I2C1_Init+0x70>)
 8002d8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d90:	61d3      	str	r3, [r2, #28]
 8002d92:	4b17      	ldr	r3, [pc, #92]	; (8002df0 <MX_I2C1_Init+0x70>)
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d9a:	607b      	str	r3, [r7, #4]
 8002d9c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d9e:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <MX_I2C1_Init+0x74>)
 8002da0:	4a15      	ldr	r2, [pc, #84]	; (8002df8 <MX_I2C1_Init+0x78>)
 8002da2:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002da4:	4b13      	ldr	r3, [pc, #76]	; (8002df4 <MX_I2C1_Init+0x74>)
 8002da6:	4a15      	ldr	r2, [pc, #84]	; (8002dfc <MX_I2C1_Init+0x7c>)
 8002da8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002daa:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <MX_I2C1_Init+0x74>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002db0:	4b10      	ldr	r3, [pc, #64]	; (8002df4 <MX_I2C1_Init+0x74>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002db6:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <MX_I2C1_Init+0x74>)
 8002db8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002dbc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002dbe:	4b0d      	ldr	r3, [pc, #52]	; (8002df4 <MX_I2C1_Init+0x74>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <MX_I2C1_Init+0x74>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002dca:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <MX_I2C1_Init+0x74>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002dd0:	4b08      	ldr	r3, [pc, #32]	; (8002df4 <MX_I2C1_Init+0x74>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002dd6:	4807      	ldr	r0, [pc, #28]	; (8002df4 <MX_I2C1_Init+0x74>)
 8002dd8:	f001 f8b6 	bl	8003f48 <HAL_I2C_Init>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <MX_I2C1_Init+0x66>
  {
    Error_Handler();
 8002de2:	f000 f8e3 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40021000 	.word	0x40021000
 8002df4:	2000100c 	.word	0x2000100c
 8002df8:	40005400 	.word	0x40005400
 8002dfc:	000186a0 	.word	0x000186a0

08002e00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002e04:	4b17      	ldr	r3, [pc, #92]	; (8002e64 <MX_SPI1_Init+0x64>)
 8002e06:	4a18      	ldr	r2, [pc, #96]	; (8002e68 <MX_SPI1_Init+0x68>)
 8002e08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e0a:	4b16      	ldr	r3, [pc, #88]	; (8002e64 <MX_SPI1_Init+0x64>)
 8002e0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002e12:	4b14      	ldr	r3, [pc, #80]	; (8002e64 <MX_SPI1_Init+0x64>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e18:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <MX_SPI1_Init+0x64>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e1e:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <MX_SPI1_Init+0x64>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e24:	4b0f      	ldr	r3, [pc, #60]	; (8002e64 <MX_SPI1_Init+0x64>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e2a:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <MX_SPI1_Init+0x64>)
 8002e2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002e32:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <MX_SPI1_Init+0x64>)
 8002e34:	2220      	movs	r2, #32
 8002e36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e38:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <MX_SPI1_Init+0x64>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e3e:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <MX_SPI1_Init+0x64>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e44:	4b07      	ldr	r3, [pc, #28]	; (8002e64 <MX_SPI1_Init+0x64>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002e4a:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <MX_SPI1_Init+0x64>)
 8002e4c:	220a      	movs	r2, #10
 8002e4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e50:	4804      	ldr	r0, [pc, #16]	; (8002e64 <MX_SPI1_Init+0x64>)
 8002e52:	f004 f965 	bl	8007120 <HAL_SPI_Init>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002e5c:	f000 f8a6 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e60:	bf00      	nop
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	200010a4 	.word	0x200010a4
 8002e68:	40013000 	.word	0x40013000

08002e6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e70:	4b11      	ldr	r3, [pc, #68]	; (8002eb8 <MX_USART2_UART_Init+0x4c>)
 8002e72:	4a12      	ldr	r2, [pc, #72]	; (8002ebc <MX_USART2_UART_Init+0x50>)
 8002e74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e76:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <MX_USART2_UART_Init+0x4c>)
 8002e78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e7e:	4b0e      	ldr	r3, [pc, #56]	; (8002eb8 <MX_USART2_UART_Init+0x4c>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e84:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <MX_USART2_UART_Init+0x4c>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e8a:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <MX_USART2_UART_Init+0x4c>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e90:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <MX_USART2_UART_Init+0x4c>)
 8002e92:	220c      	movs	r2, #12
 8002e94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002e96:	4b08      	ldr	r3, [pc, #32]	; (8002eb8 <MX_USART2_UART_Init+0x4c>)
 8002e98:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002e9c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e9e:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <MX_USART2_UART_Init+0x4c>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ea4:	4804      	ldr	r0, [pc, #16]	; (8002eb8 <MX_USART2_UART_Init+0x4c>)
 8002ea6:	f005 f84d 	bl	8007f44 <HAL_UART_Init>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8002eb0:	f000 f87c 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002eb4:	bf00      	nop
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	200010fc 	.word	0x200010fc
 8002ebc:	40004400 	.word	0x40004400

08002ec0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ec6:	4b10      	ldr	r3, [pc, #64]	; (8002f08 <MX_DMA_Init+0x48>)
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	4a0f      	ldr	r2, [pc, #60]	; (8002f08 <MX_DMA_Init+0x48>)
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	6153      	str	r3, [r2, #20]
 8002ed2:	4b0d      	ldr	r3, [pc, #52]	; (8002f08 <MX_DMA_Init+0x48>)
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	607b      	str	r3, [r7, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	2010      	movs	r0, #16
 8002ee4:	f000 fbf5 	bl	80036d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002ee8:	2010      	movs	r0, #16
 8002eea:	f000 fc0e 	bl	800370a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	2011      	movs	r0, #17
 8002ef4:	f000 fbed 	bl	80036d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002ef8:	2011      	movs	r0, #17
 8002efa:	f000 fc06 	bl	800370a <HAL_NVIC_EnableIRQ>

}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40021000 	.word	0x40021000

08002f0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f12:	f107 0308 	add.w	r3, r7, #8
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	605a      	str	r2, [r3, #4]
 8002f1c:	609a      	str	r2, [r3, #8]
 8002f1e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f20:	4b17      	ldr	r3, [pc, #92]	; (8002f80 <MX_GPIO_Init+0x74>)
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	4a16      	ldr	r2, [pc, #88]	; (8002f80 <MX_GPIO_Init+0x74>)
 8002f26:	f043 0304 	orr.w	r3, r3, #4
 8002f2a:	6193      	str	r3, [r2, #24]
 8002f2c:	4b14      	ldr	r3, [pc, #80]	; (8002f80 <MX_GPIO_Init+0x74>)
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	607b      	str	r3, [r7, #4]
 8002f36:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f38:	4b11      	ldr	r3, [pc, #68]	; (8002f80 <MX_GPIO_Init+0x74>)
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	4a10      	ldr	r2, [pc, #64]	; (8002f80 <MX_GPIO_Init+0x74>)
 8002f3e:	f043 0308 	orr.w	r3, r3, #8
 8002f42:	6193      	str	r3, [r2, #24]
 8002f44:	4b0e      	ldr	r3, [pc, #56]	; (8002f80 <MX_GPIO_Init+0x74>)
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	f003 0308 	and.w	r3, r3, #8
 8002f4c:	603b      	str	r3, [r7, #0]
 8002f4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002f50:	2201      	movs	r2, #1
 8002f52:	2110      	movs	r1, #16
 8002f54:	480b      	ldr	r0, [pc, #44]	; (8002f84 <MX_GPIO_Init+0x78>)
 8002f56:	f000 ffdf 	bl	8003f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002f5a:	2310      	movs	r3, #16
 8002f5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f62:	2300      	movs	r3, #0
 8002f64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f66:	2303      	movs	r3, #3
 8002f68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f6a:	f107 0308 	add.w	r3, r7, #8
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4804      	ldr	r0, [pc, #16]	; (8002f84 <MX_GPIO_Init+0x78>)
 8002f72:	f000 fe77 	bl	8003c64 <HAL_GPIO_Init>

}
 8002f76:	bf00      	nop
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40021000 	.word	0x40021000
 8002f84:	40010800 	.word	0x40010800

08002f88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a04      	ldr	r2, [pc, #16]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d101      	bne.n	8002f9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002f9a:	f000 faa7 	bl	80034ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002f9e:	bf00      	nop
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40000800 	.word	0x40000800

08002fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002fb0:	bf00      	nop
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002fbe:	4b15      	ldr	r3, [pc, #84]	; (8003014 <HAL_MspInit+0x5c>)
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	4a14      	ldr	r2, [pc, #80]	; (8003014 <HAL_MspInit+0x5c>)
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	6193      	str	r3, [r2, #24]
 8002fca:	4b12      	ldr	r3, [pc, #72]	; (8003014 <HAL_MspInit+0x5c>)
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	60bb      	str	r3, [r7, #8]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fd6:	4b0f      	ldr	r3, [pc, #60]	; (8003014 <HAL_MspInit+0x5c>)
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	4a0e      	ldr	r2, [pc, #56]	; (8003014 <HAL_MspInit+0x5c>)
 8002fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe0:	61d3      	str	r3, [r2, #28]
 8002fe2:	4b0c      	ldr	r3, [pc, #48]	; (8003014 <HAL_MspInit+0x5c>)
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fea:	607b      	str	r3, [r7, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002fee:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <HAL_MspInit+0x60>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	4a04      	ldr	r2, [pc, #16]	; (8003018 <HAL_MspInit+0x60>)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800300a:	bf00      	nop
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr
 8003014:	40021000 	.word	0x40021000
 8003018:	40010000 	.word	0x40010000

0800301c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003024:	f107 0310 	add.w	r3, r7, #16
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	609a      	str	r2, [r3, #8]
 8003030:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a15      	ldr	r2, [pc, #84]	; (800308c <HAL_I2C_MspInit+0x70>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d123      	bne.n	8003084 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800303c:	4b14      	ldr	r3, [pc, #80]	; (8003090 <HAL_I2C_MspInit+0x74>)
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	4a13      	ldr	r2, [pc, #76]	; (8003090 <HAL_I2C_MspInit+0x74>)
 8003042:	f043 0308 	orr.w	r3, r3, #8
 8003046:	6193      	str	r3, [r2, #24]
 8003048:	4b11      	ldr	r3, [pc, #68]	; (8003090 <HAL_I2C_MspInit+0x74>)
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003054:	23c0      	movs	r3, #192	; 0xc0
 8003056:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003058:	2312      	movs	r3, #18
 800305a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800305c:	2303      	movs	r3, #3
 800305e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003060:	f107 0310 	add.w	r3, r7, #16
 8003064:	4619      	mov	r1, r3
 8003066:	480b      	ldr	r0, [pc, #44]	; (8003094 <HAL_I2C_MspInit+0x78>)
 8003068:	f000 fdfc 	bl	8003c64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800306c:	4b08      	ldr	r3, [pc, #32]	; (8003090 <HAL_I2C_MspInit+0x74>)
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	4a07      	ldr	r2, [pc, #28]	; (8003090 <HAL_I2C_MspInit+0x74>)
 8003072:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003076:	61d3      	str	r3, [r2, #28]
 8003078:	4b05      	ldr	r3, [pc, #20]	; (8003090 <HAL_I2C_MspInit+0x74>)
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003080:	60bb      	str	r3, [r7, #8]
 8003082:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003084:	bf00      	nop
 8003086:	3720      	adds	r7, #32
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40005400 	.word	0x40005400
 8003090:	40021000 	.word	0x40021000
 8003094:	40010c00 	.word	0x40010c00

08003098 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a0:	f107 0310 	add.w	r3, r7, #16
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	609a      	str	r2, [r3, #8]
 80030ac:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a1b      	ldr	r2, [pc, #108]	; (8003120 <HAL_SPI_MspInit+0x88>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d12f      	bne.n	8003118 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030b8:	4b1a      	ldr	r3, [pc, #104]	; (8003124 <HAL_SPI_MspInit+0x8c>)
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	4a19      	ldr	r2, [pc, #100]	; (8003124 <HAL_SPI_MspInit+0x8c>)
 80030be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030c2:	6193      	str	r3, [r2, #24]
 80030c4:	4b17      	ldr	r3, [pc, #92]	; (8003124 <HAL_SPI_MspInit+0x8c>)
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030d0:	4b14      	ldr	r3, [pc, #80]	; (8003124 <HAL_SPI_MspInit+0x8c>)
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	4a13      	ldr	r2, [pc, #76]	; (8003124 <HAL_SPI_MspInit+0x8c>)
 80030d6:	f043 0304 	orr.w	r3, r3, #4
 80030da:	6193      	str	r3, [r2, #24]
 80030dc:	4b11      	ldr	r3, [pc, #68]	; (8003124 <HAL_SPI_MspInit+0x8c>)
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80030e8:	23a0      	movs	r3, #160	; 0xa0
 80030ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ec:	2302      	movs	r3, #2
 80030ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030f0:	2303      	movs	r3, #3
 80030f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030f4:	f107 0310 	add.w	r3, r7, #16
 80030f8:	4619      	mov	r1, r3
 80030fa:	480b      	ldr	r0, [pc, #44]	; (8003128 <HAL_SPI_MspInit+0x90>)
 80030fc:	f000 fdb2 	bl	8003c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003100:	2340      	movs	r3, #64	; 0x40
 8003102:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003104:	2300      	movs	r3, #0
 8003106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003108:	2300      	movs	r3, #0
 800310a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800310c:	f107 0310 	add.w	r3, r7, #16
 8003110:	4619      	mov	r1, r3
 8003112:	4805      	ldr	r0, [pc, #20]	; (8003128 <HAL_SPI_MspInit+0x90>)
 8003114:	f000 fda6 	bl	8003c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003118:	bf00      	nop
 800311a:	3720      	adds	r7, #32
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40013000 	.word	0x40013000
 8003124:	40021000 	.word	0x40021000
 8003128:	40010800 	.word	0x40010800

0800312c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b088      	sub	sp, #32
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003134:	f107 0310 	add.w	r3, r7, #16
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	609a      	str	r2, [r3, #8]
 8003140:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a4c      	ldr	r2, [pc, #304]	; (8003278 <HAL_UART_MspInit+0x14c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	f040 8091 	bne.w	8003270 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800314e:	4b4b      	ldr	r3, [pc, #300]	; (800327c <HAL_UART_MspInit+0x150>)
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	4a4a      	ldr	r2, [pc, #296]	; (800327c <HAL_UART_MspInit+0x150>)
 8003154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003158:	61d3      	str	r3, [r2, #28]
 800315a:	4b48      	ldr	r3, [pc, #288]	; (800327c <HAL_UART_MspInit+0x150>)
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003166:	4b45      	ldr	r3, [pc, #276]	; (800327c <HAL_UART_MspInit+0x150>)
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	4a44      	ldr	r2, [pc, #272]	; (800327c <HAL_UART_MspInit+0x150>)
 800316c:	f043 0304 	orr.w	r3, r3, #4
 8003170:	6193      	str	r3, [r2, #24]
 8003172:	4b42      	ldr	r3, [pc, #264]	; (800327c <HAL_UART_MspInit+0x150>)
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	f003 0304 	and.w	r3, r3, #4
 800317a:	60bb      	str	r3, [r7, #8]
 800317c:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> USART2_CTS
    PA1     ------> USART2_RTS
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800317e:	2301      	movs	r3, #1
 8003180:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003186:	2300      	movs	r3, #0
 8003188:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800318a:	f107 0310 	add.w	r3, r7, #16
 800318e:	4619      	mov	r1, r3
 8003190:	483b      	ldr	r0, [pc, #236]	; (8003280 <HAL_UART_MspInit+0x154>)
 8003192:	f000 fd67 	bl	8003c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8003196:	2306      	movs	r3, #6
 8003198:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319a:	2302      	movs	r3, #2
 800319c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800319e:	2303      	movs	r3, #3
 80031a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a2:	f107 0310 	add.w	r3, r7, #16
 80031a6:	4619      	mov	r1, r3
 80031a8:	4835      	ldr	r0, [pc, #212]	; (8003280 <HAL_UART_MspInit+0x154>)
 80031aa:	f000 fd5b 	bl	8003c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80031ae:	2308      	movs	r3, #8
 80031b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031b6:	2301      	movs	r3, #1
 80031b8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ba:	f107 0310 	add.w	r3, r7, #16
 80031be:	4619      	mov	r1, r3
 80031c0:	482f      	ldr	r0, [pc, #188]	; (8003280 <HAL_UART_MspInit+0x154>)
 80031c2:	f000 fd4f 	bl	8003c64 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80031c6:	4b2f      	ldr	r3, [pc, #188]	; (8003284 <HAL_UART_MspInit+0x158>)
 80031c8:	4a2f      	ldr	r2, [pc, #188]	; (8003288 <HAL_UART_MspInit+0x15c>)
 80031ca:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031cc:	4b2d      	ldr	r3, [pc, #180]	; (8003284 <HAL_UART_MspInit+0x158>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031d2:	4b2c      	ldr	r3, [pc, #176]	; (8003284 <HAL_UART_MspInit+0x158>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031d8:	4b2a      	ldr	r3, [pc, #168]	; (8003284 <HAL_UART_MspInit+0x158>)
 80031da:	2280      	movs	r2, #128	; 0x80
 80031dc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031de:	4b29      	ldr	r3, [pc, #164]	; (8003284 <HAL_UART_MspInit+0x158>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031e4:	4b27      	ldr	r3, [pc, #156]	; (8003284 <HAL_UART_MspInit+0x158>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80031ea:	4b26      	ldr	r3, [pc, #152]	; (8003284 <HAL_UART_MspInit+0x158>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80031f0:	4b24      	ldr	r3, [pc, #144]	; (8003284 <HAL_UART_MspInit+0x158>)
 80031f2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80031f6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80031f8:	4822      	ldr	r0, [pc, #136]	; (8003284 <HAL_UART_MspInit+0x158>)
 80031fa:	f000 fa95 	bl	8003728 <HAL_DMA_Init>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <HAL_UART_MspInit+0xdc>
    {
      Error_Handler();
 8003204:	f7ff fed2 	bl	8002fac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a1e      	ldr	r2, [pc, #120]	; (8003284 <HAL_UART_MspInit+0x158>)
 800320c:	635a      	str	r2, [r3, #52]	; 0x34
 800320e:	4a1d      	ldr	r2, [pc, #116]	; (8003284 <HAL_UART_MspInit+0x158>)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8003214:	4b1d      	ldr	r3, [pc, #116]	; (800328c <HAL_UART_MspInit+0x160>)
 8003216:	4a1e      	ldr	r2, [pc, #120]	; (8003290 <HAL_UART_MspInit+0x164>)
 8003218:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800321a:	4b1c      	ldr	r3, [pc, #112]	; (800328c <HAL_UART_MspInit+0x160>)
 800321c:	2210      	movs	r2, #16
 800321e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003220:	4b1a      	ldr	r3, [pc, #104]	; (800328c <HAL_UART_MspInit+0x160>)
 8003222:	2200      	movs	r2, #0
 8003224:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003226:	4b19      	ldr	r3, [pc, #100]	; (800328c <HAL_UART_MspInit+0x160>)
 8003228:	2280      	movs	r2, #128	; 0x80
 800322a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800322c:	4b17      	ldr	r3, [pc, #92]	; (800328c <HAL_UART_MspInit+0x160>)
 800322e:	2200      	movs	r2, #0
 8003230:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003232:	4b16      	ldr	r3, [pc, #88]	; (800328c <HAL_UART_MspInit+0x160>)
 8003234:	2200      	movs	r2, #0
 8003236:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003238:	4b14      	ldr	r3, [pc, #80]	; (800328c <HAL_UART_MspInit+0x160>)
 800323a:	2200      	movs	r2, #0
 800323c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800323e:	4b13      	ldr	r3, [pc, #76]	; (800328c <HAL_UART_MspInit+0x160>)
 8003240:	2200      	movs	r2, #0
 8003242:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003244:	4811      	ldr	r0, [pc, #68]	; (800328c <HAL_UART_MspInit+0x160>)
 8003246:	f000 fa6f 	bl	8003728 <HAL_DMA_Init>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8003250:	f7ff feac 	bl	8002fac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a0d      	ldr	r2, [pc, #52]	; (800328c <HAL_UART_MspInit+0x160>)
 8003258:	631a      	str	r2, [r3, #48]	; 0x30
 800325a:	4a0c      	ldr	r2, [pc, #48]	; (800328c <HAL_UART_MspInit+0x160>)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003260:	2200      	movs	r2, #0
 8003262:	2100      	movs	r1, #0
 8003264:	2026      	movs	r0, #38	; 0x26
 8003266:	f000 fa34 	bl	80036d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800326a:	2026      	movs	r0, #38	; 0x26
 800326c:	f000 fa4d 	bl	800370a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003270:	bf00      	nop
 8003272:	3720      	adds	r7, #32
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40004400 	.word	0x40004400
 800327c:	40021000 	.word	0x40021000
 8003280:	40010800 	.word	0x40010800
 8003284:	20000fc8 	.word	0x20000fc8
 8003288:	4002006c 	.word	0x4002006c
 800328c:	20001060 	.word	0x20001060
 8003290:	40020080 	.word	0x40020080

08003294 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b08c      	sub	sp, #48	; 0x30
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800329c:	2300      	movs	r3, #0
 800329e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 80032a4:	2200      	movs	r2, #0
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	201e      	movs	r0, #30
 80032aa:	f000 fa12 	bl	80036d2 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 80032ae:	201e      	movs	r0, #30
 80032b0:	f000 fa2b 	bl	800370a <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80032b4:	4b1f      	ldr	r3, [pc, #124]	; (8003334 <HAL_InitTick+0xa0>)
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	4a1e      	ldr	r2, [pc, #120]	; (8003334 <HAL_InitTick+0xa0>)
 80032ba:	f043 0304 	orr.w	r3, r3, #4
 80032be:	61d3      	str	r3, [r2, #28]
 80032c0:	4b1c      	ldr	r3, [pc, #112]	; (8003334 <HAL_InitTick+0xa0>)
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	60fb      	str	r3, [r7, #12]
 80032ca:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80032cc:	f107 0210 	add.w	r2, r7, #16
 80032d0:	f107 0314 	add.w	r3, r7, #20
 80032d4:	4611      	mov	r1, r2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f003 fe1e 	bl	8006f18 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80032dc:	f003 fdf4 	bl	8006ec8 <HAL_RCC_GetPCLK1Freq>
 80032e0:	4603      	mov	r3, r0
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80032e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e8:	4a13      	ldr	r2, [pc, #76]	; (8003338 <HAL_InitTick+0xa4>)
 80032ea:	fba2 2303 	umull	r2, r3, r2, r3
 80032ee:	0c9b      	lsrs	r3, r3, #18
 80032f0:	3b01      	subs	r3, #1
 80032f2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80032f4:	4b11      	ldr	r3, [pc, #68]	; (800333c <HAL_InitTick+0xa8>)
 80032f6:	4a12      	ldr	r2, [pc, #72]	; (8003340 <HAL_InitTick+0xac>)
 80032f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 80032fa:	4b10      	ldr	r3, [pc, #64]	; (800333c <HAL_InitTick+0xa8>)
 80032fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003300:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8003302:	4a0e      	ldr	r2, [pc, #56]	; (800333c <HAL_InitTick+0xa8>)
 8003304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003306:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8003308:	4b0c      	ldr	r3, [pc, #48]	; (800333c <HAL_InitTick+0xa8>)
 800330a:	2200      	movs	r2, #0
 800330c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800330e:	4b0b      	ldr	r3, [pc, #44]	; (800333c <HAL_InitTick+0xa8>)
 8003310:	2200      	movs	r2, #0
 8003312:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8003314:	4809      	ldr	r0, [pc, #36]	; (800333c <HAL_InitTick+0xa8>)
 8003316:	f004 fc1d 	bl	8007b54 <HAL_TIM_Base_Init>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d104      	bne.n	800332a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8003320:	4806      	ldr	r0, [pc, #24]	; (800333c <HAL_InitTick+0xa8>)
 8003322:	f004 fc4b 	bl	8007bbc <HAL_TIM_Base_Start_IT>
 8003326:	4603      	mov	r3, r0
 8003328:	e000      	b.n	800332c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
}
 800332c:	4618      	mov	r0, r3
 800332e:	3730      	adds	r7, #48	; 0x30
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40021000 	.word	0x40021000
 8003338:	431bde83 	.word	0x431bde83
 800333c:	2000113c 	.word	0x2000113c
 8003340:	40000800 	.word	0x40000800

08003344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003348:	bf00      	nop
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003354:	e7fe      	b.n	8003354 <HardFault_Handler+0x4>

08003356 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003356:	b480      	push	{r7}
 8003358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800335a:	e7fe      	b.n	800335a <MemManage_Handler+0x4>

0800335c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003360:	e7fe      	b.n	8003360 <BusFault_Handler+0x4>

08003362 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003362:	b480      	push	{r7}
 8003364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003366:	e7fe      	b.n	8003366 <UsageFault_Handler+0x4>

08003368 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800336c:	bf00      	nop
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr

08003374 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003378:	bf00      	nop
 800337a:	46bd      	mov	sp, r7
 800337c:	bc80      	pop	{r7}
 800337e:	4770      	bx	lr

08003380 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003384:	bf00      	nop
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr

0800338c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003390:	bf00      	nop
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr

08003398 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800339c:	4802      	ldr	r0, [pc, #8]	; (80033a8 <DMA1_Channel6_IRQHandler+0x10>)
 800339e:	f000 fb2d 	bl	80039fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80033a2:	bf00      	nop
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	20000fc8 	.word	0x20000fc8

080033ac <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80033b0:	4802      	ldr	r0, [pc, #8]	; (80033bc <DMA1_Channel7_IRQHandler+0x10>)
 80033b2:	f000 fb23 	bl	80039fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80033b6:	bf00      	nop
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	20001060 	.word	0x20001060

080033c0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80033c4:	4802      	ldr	r0, [pc, #8]	; (80033d0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80033c6:	f002 fbce 	bl	8005b66 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80033ca:	bf00      	nop
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20001e14 	.word	0x20001e14

080033d4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80033d8:	4802      	ldr	r0, [pc, #8]	; (80033e4 <TIM4_IRQHandler+0x10>)
 80033da:	f004 fc12 	bl	8007c02 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80033de:	bf00      	nop
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	2000113c 	.word	0x2000113c

080033e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  if(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_IDLE))
 80033ec:	4b06      	ldr	r3, [pc, #24]	; (8003408 <USART2_IRQHandler+0x20>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0310 	and.w	r3, r3, #16
 80033f6:	2b10      	cmp	r3, #16
 80033f8:	d101      	bne.n	80033fe <USART2_IRQHandler+0x16>
	  uart_finish_receive();//空闲中断
 80033fa:	f7ff fbc7 	bl	8002b8c <uart_finish_receive>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80033fe:	4802      	ldr	r0, [pc, #8]	; (8003408 <USART2_IRQHandler+0x20>)
 8003400:	f004 ff62 	bl	80082c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003404:	bf00      	nop
 8003406:	bd80      	pop	{r7, pc}
 8003408:	200010fc 	.word	0x200010fc

0800340c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003410:	4b15      	ldr	r3, [pc, #84]	; (8003468 <SystemInit+0x5c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a14      	ldr	r2, [pc, #80]	; (8003468 <SystemInit+0x5c>)
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800341c:	4b12      	ldr	r3, [pc, #72]	; (8003468 <SystemInit+0x5c>)
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	4911      	ldr	r1, [pc, #68]	; (8003468 <SystemInit+0x5c>)
 8003422:	4b12      	ldr	r3, [pc, #72]	; (800346c <SystemInit+0x60>)
 8003424:	4013      	ands	r3, r2
 8003426:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003428:	4b0f      	ldr	r3, [pc, #60]	; (8003468 <SystemInit+0x5c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a0e      	ldr	r2, [pc, #56]	; (8003468 <SystemInit+0x5c>)
 800342e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003436:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003438:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <SystemInit+0x5c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a0a      	ldr	r2, [pc, #40]	; (8003468 <SystemInit+0x5c>)
 800343e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003442:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003444:	4b08      	ldr	r3, [pc, #32]	; (8003468 <SystemInit+0x5c>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	4a07      	ldr	r2, [pc, #28]	; (8003468 <SystemInit+0x5c>)
 800344a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800344e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003450:	4b05      	ldr	r3, [pc, #20]	; (8003468 <SystemInit+0x5c>)
 8003452:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003456:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003458:	4b05      	ldr	r3, [pc, #20]	; (8003470 <SystemInit+0x64>)
 800345a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800345e:	609a      	str	r2, [r3, #8]
#endif 
}
 8003460:	bf00      	nop
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr
 8003468:	40021000 	.word	0x40021000
 800346c:	f8ff0000 	.word	0xf8ff0000
 8003470:	e000ed00 	.word	0xe000ed00

08003474 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003474:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003476:	e003      	b.n	8003480 <LoopCopyDataInit>

08003478 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003478:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800347a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800347c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800347e:	3104      	adds	r1, #4

08003480 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003480:	480a      	ldr	r0, [pc, #40]	; (80034ac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003482:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003484:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003486:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003488:	d3f6      	bcc.n	8003478 <CopyDataInit>
  ldr r2, =_sbss
 800348a:	4a0a      	ldr	r2, [pc, #40]	; (80034b4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800348c:	e002      	b.n	8003494 <LoopFillZerobss>

0800348e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800348e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003490:	f842 3b04 	str.w	r3, [r2], #4

08003494 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003494:	4b08      	ldr	r3, [pc, #32]	; (80034b8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003496:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003498:	d3f9      	bcc.n	800348e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800349a:	f7ff ffb7 	bl	800340c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800349e:	f008 fc6d 	bl	800bd7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80034a2:	f7ff fbc3 	bl	8002c2c <main>
  bx lr
 80034a6:	4770      	bx	lr
  ldr r3, =_sidata
 80034a8:	0800be74 	.word	0x0800be74
  ldr r0, =_sdata
 80034ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80034b0:	200001a4 	.word	0x200001a4
  ldr r2, =_sbss
 80034b4:	200001a4 	.word	0x200001a4
  ldr r3, = _ebss
 80034b8:	20002080 	.word	0x20002080

080034bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80034bc:	e7fe      	b.n	80034bc <ADC1_2_IRQHandler>
	...

080034c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034c4:	4b08      	ldr	r3, [pc, #32]	; (80034e8 <HAL_Init+0x28>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a07      	ldr	r2, [pc, #28]	; (80034e8 <HAL_Init+0x28>)
 80034ca:	f043 0310 	orr.w	r3, r3, #16
 80034ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034d0:	2003      	movs	r0, #3
 80034d2:	f000 f8f3 	bl	80036bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034d6:	2000      	movs	r0, #0
 80034d8:	f7ff fedc 	bl	8003294 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034dc:	f7ff fd6c 	bl	8002fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40022000 	.word	0x40022000

080034ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034f0:	4b05      	ldr	r3, [pc, #20]	; (8003508 <HAL_IncTick+0x1c>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	461a      	mov	r2, r3
 80034f6:	4b05      	ldr	r3, [pc, #20]	; (800350c <HAL_IncTick+0x20>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4413      	add	r3, r2
 80034fc:	4a03      	ldr	r2, [pc, #12]	; (800350c <HAL_IncTick+0x20>)
 80034fe:	6013      	str	r3, [r2, #0]
}
 8003500:	bf00      	nop
 8003502:	46bd      	mov	sp, r7
 8003504:	bc80      	pop	{r7}
 8003506:	4770      	bx	lr
 8003508:	20000030 	.word	0x20000030
 800350c:	2000117c 	.word	0x2000117c

08003510 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  return uwTick;
 8003514:	4b02      	ldr	r3, [pc, #8]	; (8003520 <HAL_GetTick+0x10>)
 8003516:	681b      	ldr	r3, [r3, #0]
}
 8003518:	4618      	mov	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	bc80      	pop	{r7}
 800351e:	4770      	bx	lr
 8003520:	2000117c 	.word	0x2000117c

08003524 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800352c:	f7ff fff0 	bl	8003510 <HAL_GetTick>
 8003530:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353c:	d005      	beq.n	800354a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800353e:	4b09      	ldr	r3, [pc, #36]	; (8003564 <HAL_Delay+0x40>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4413      	add	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800354a:	bf00      	nop
 800354c:	f7ff ffe0 	bl	8003510 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	429a      	cmp	r2, r3
 800355a:	d8f7      	bhi.n	800354c <HAL_Delay+0x28>
  {
  }
}
 800355c:	bf00      	nop
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	20000030 	.word	0x20000030

08003568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003578:	4b0c      	ldr	r3, [pc, #48]	; (80035ac <__NVIC_SetPriorityGrouping+0x44>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003584:	4013      	ands	r3, r2
 8003586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800359a:	4a04      	ldr	r2, [pc, #16]	; (80035ac <__NVIC_SetPriorityGrouping+0x44>)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	60d3      	str	r3, [r2, #12]
}
 80035a0:	bf00      	nop
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	e000ed00 	.word	0xe000ed00

080035b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035b4:	4b04      	ldr	r3, [pc, #16]	; (80035c8 <__NVIC_GetPriorityGrouping+0x18>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	0a1b      	lsrs	r3, r3, #8
 80035ba:	f003 0307 	and.w	r3, r3, #7
}
 80035be:	4618      	mov	r0, r3
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bc80      	pop	{r7}
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	e000ed00 	.word	0xe000ed00

080035cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	4603      	mov	r3, r0
 80035d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	db0b      	blt.n	80035f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	f003 021f 	and.w	r2, r3, #31
 80035e4:	4906      	ldr	r1, [pc, #24]	; (8003600 <__NVIC_EnableIRQ+0x34>)
 80035e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	2001      	movs	r0, #1
 80035ee:	fa00 f202 	lsl.w	r2, r0, r2
 80035f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr
 8003600:	e000e100 	.word	0xe000e100

08003604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	4603      	mov	r3, r0
 800360c:	6039      	str	r1, [r7, #0]
 800360e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003614:	2b00      	cmp	r3, #0
 8003616:	db0a      	blt.n	800362e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	b2da      	uxtb	r2, r3
 800361c:	490c      	ldr	r1, [pc, #48]	; (8003650 <__NVIC_SetPriority+0x4c>)
 800361e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003622:	0112      	lsls	r2, r2, #4
 8003624:	b2d2      	uxtb	r2, r2
 8003626:	440b      	add	r3, r1
 8003628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800362c:	e00a      	b.n	8003644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	b2da      	uxtb	r2, r3
 8003632:	4908      	ldr	r1, [pc, #32]	; (8003654 <__NVIC_SetPriority+0x50>)
 8003634:	79fb      	ldrb	r3, [r7, #7]
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	3b04      	subs	r3, #4
 800363c:	0112      	lsls	r2, r2, #4
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	440b      	add	r3, r1
 8003642:	761a      	strb	r2, [r3, #24]
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	bc80      	pop	{r7}
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	e000e100 	.word	0xe000e100
 8003654:	e000ed00 	.word	0xe000ed00

08003658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003658:	b480      	push	{r7}
 800365a:	b089      	sub	sp, #36	; 0x24
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f003 0307 	and.w	r3, r3, #7
 800366a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f1c3 0307 	rsb	r3, r3, #7
 8003672:	2b04      	cmp	r3, #4
 8003674:	bf28      	it	cs
 8003676:	2304      	movcs	r3, #4
 8003678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	3304      	adds	r3, #4
 800367e:	2b06      	cmp	r3, #6
 8003680:	d902      	bls.n	8003688 <NVIC_EncodePriority+0x30>
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	3b03      	subs	r3, #3
 8003686:	e000      	b.n	800368a <NVIC_EncodePriority+0x32>
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800368c:	f04f 32ff 	mov.w	r2, #4294967295
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	43da      	mvns	r2, r3
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	401a      	ands	r2, r3
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036a0:	f04f 31ff 	mov.w	r1, #4294967295
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	fa01 f303 	lsl.w	r3, r1, r3
 80036aa:	43d9      	mvns	r1, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036b0:	4313      	orrs	r3, r2
         );
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3724      	adds	r7, #36	; 0x24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc80      	pop	{r7}
 80036ba:	4770      	bx	lr

080036bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7ff ff4f 	bl	8003568 <__NVIC_SetPriorityGrouping>
}
 80036ca:	bf00      	nop
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b086      	sub	sp, #24
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	4603      	mov	r3, r0
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	607a      	str	r2, [r7, #4]
 80036de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036e4:	f7ff ff64 	bl	80035b0 <__NVIC_GetPriorityGrouping>
 80036e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	68b9      	ldr	r1, [r7, #8]
 80036ee:	6978      	ldr	r0, [r7, #20]
 80036f0:	f7ff ffb2 	bl	8003658 <NVIC_EncodePriority>
 80036f4:	4602      	mov	r2, r0
 80036f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036fa:	4611      	mov	r1, r2
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff ff81 	bl	8003604 <__NVIC_SetPriority>
}
 8003702:	bf00      	nop
 8003704:	3718      	adds	r7, #24
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b082      	sub	sp, #8
 800370e:	af00      	add	r7, sp, #0
 8003710:	4603      	mov	r3, r0
 8003712:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003718:	4618      	mov	r0, r3
 800371a:	f7ff ff57 	bl	80035cc <__NVIC_EnableIRQ>
}
 800371e:	bf00      	nop
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
	...

08003728 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e043      	b.n	80037c6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	461a      	mov	r2, r3
 8003744:	4b22      	ldr	r3, [pc, #136]	; (80037d0 <HAL_DMA_Init+0xa8>)
 8003746:	4413      	add	r3, r2
 8003748:	4a22      	ldr	r2, [pc, #136]	; (80037d4 <HAL_DMA_Init+0xac>)
 800374a:	fba2 2303 	umull	r2, r3, r2, r3
 800374e:	091b      	lsrs	r3, r3, #4
 8003750:	009a      	lsls	r2, r3, #2
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a1f      	ldr	r2, [pc, #124]	; (80037d8 <HAL_DMA_Init+0xb0>)
 800375a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003772:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003776:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003780:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800378c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003798:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr
 80037d0:	bffdfff8 	.word	0xbffdfff8
 80037d4:	cccccccd 	.word	0xcccccccd
 80037d8:	40020000 	.word	0x40020000

080037dc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ea:	2300      	movs	r3, #0
 80037ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d101      	bne.n	80037fc <HAL_DMA_Start_IT+0x20>
 80037f8:	2302      	movs	r3, #2
 80037fa:	e04a      	b.n	8003892 <HAL_DMA_Start_IT+0xb6>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800380a:	2b01      	cmp	r3, #1
 800380c:	d13a      	bne.n	8003884 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2202      	movs	r2, #2
 8003812:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0201 	bic.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	68b9      	ldr	r1, [r7, #8]
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f000 f9e8 	bl	8003c08 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383c:	2b00      	cmp	r3, #0
 800383e:	d008      	beq.n	8003852 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 020e 	orr.w	r2, r2, #14
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	e00f      	b.n	8003872 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0204 	bic.w	r2, r2, #4
 8003860:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 020a 	orr.w	r2, r2, #10
 8003870:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f042 0201 	orr.w	r2, r2, #1
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	e005      	b.n	8003890 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800388c:	2302      	movs	r3, #2
 800388e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003890:	7dfb      	ldrb	r3, [r7, #23]
}
 8003892:	4618      	mov	r0, r3
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800389a:	b480      	push	{r7}
 800389c:	b085      	sub	sp, #20
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d008      	beq.n	80038c2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2204      	movs	r2, #4
 80038b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e020      	b.n	8003904 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 020e 	bic.w	r2, r2, #14
 80038d0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0201 	bic.w	r2, r2, #1
 80038e0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ea:	2101      	movs	r1, #1
 80038ec:	fa01 f202 	lsl.w	r2, r1, r2
 80038f0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003902:	7bfb      	ldrb	r3, [r7, #15]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	bc80      	pop	{r7}
 800390c:	4770      	bx	lr
	...

08003910 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003918:	2300      	movs	r3, #0
 800391a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003922:	2b02      	cmp	r3, #2
 8003924:	d005      	beq.n	8003932 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2204      	movs	r2, #4
 800392a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	73fb      	strb	r3, [r7, #15]
 8003930:	e051      	b.n	80039d6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 020e 	bic.w	r2, r2, #14
 8003940:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0201 	bic.w	r2, r2, #1
 8003950:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a22      	ldr	r2, [pc, #136]	; (80039e0 <HAL_DMA_Abort_IT+0xd0>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d029      	beq.n	80039b0 <HAL_DMA_Abort_IT+0xa0>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a20      	ldr	r2, [pc, #128]	; (80039e4 <HAL_DMA_Abort_IT+0xd4>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d022      	beq.n	80039ac <HAL_DMA_Abort_IT+0x9c>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a1f      	ldr	r2, [pc, #124]	; (80039e8 <HAL_DMA_Abort_IT+0xd8>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d01a      	beq.n	80039a6 <HAL_DMA_Abort_IT+0x96>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a1d      	ldr	r2, [pc, #116]	; (80039ec <HAL_DMA_Abort_IT+0xdc>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d012      	beq.n	80039a0 <HAL_DMA_Abort_IT+0x90>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a1c      	ldr	r2, [pc, #112]	; (80039f0 <HAL_DMA_Abort_IT+0xe0>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d00a      	beq.n	800399a <HAL_DMA_Abort_IT+0x8a>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a1a      	ldr	r2, [pc, #104]	; (80039f4 <HAL_DMA_Abort_IT+0xe4>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d102      	bne.n	8003994 <HAL_DMA_Abort_IT+0x84>
 800398e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003992:	e00e      	b.n	80039b2 <HAL_DMA_Abort_IT+0xa2>
 8003994:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003998:	e00b      	b.n	80039b2 <HAL_DMA_Abort_IT+0xa2>
 800399a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800399e:	e008      	b.n	80039b2 <HAL_DMA_Abort_IT+0xa2>
 80039a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039a4:	e005      	b.n	80039b2 <HAL_DMA_Abort_IT+0xa2>
 80039a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039aa:	e002      	b.n	80039b2 <HAL_DMA_Abort_IT+0xa2>
 80039ac:	2310      	movs	r3, #16
 80039ae:	e000      	b.n	80039b2 <HAL_DMA_Abort_IT+0xa2>
 80039b0:	2301      	movs	r3, #1
 80039b2:	4a11      	ldr	r2, [pc, #68]	; (80039f8 <HAL_DMA_Abort_IT+0xe8>)
 80039b4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	4798      	blx	r3
    } 
  }
  return status;
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40020008 	.word	0x40020008
 80039e4:	4002001c 	.word	0x4002001c
 80039e8:	40020030 	.word	0x40020030
 80039ec:	40020044 	.word	0x40020044
 80039f0:	40020058 	.word	0x40020058
 80039f4:	4002006c 	.word	0x4002006c
 80039f8:	40020000 	.word	0x40020000

080039fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	2204      	movs	r2, #4
 8003a1a:	409a      	lsls	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d04f      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0xc8>
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	f003 0304 	and.w	r3, r3, #4
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d04a      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0320 	and.w	r3, r3, #32
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d107      	bne.n	8003a4c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0204 	bic.w	r2, r2, #4
 8003a4a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a66      	ldr	r2, [pc, #408]	; (8003bec <HAL_DMA_IRQHandler+0x1f0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d029      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xae>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a65      	ldr	r2, [pc, #404]	; (8003bf0 <HAL_DMA_IRQHandler+0x1f4>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d022      	beq.n	8003aa6 <HAL_DMA_IRQHandler+0xaa>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a63      	ldr	r2, [pc, #396]	; (8003bf4 <HAL_DMA_IRQHandler+0x1f8>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d01a      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0xa4>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a62      	ldr	r2, [pc, #392]	; (8003bf8 <HAL_DMA_IRQHandler+0x1fc>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d012      	beq.n	8003a9a <HAL_DMA_IRQHandler+0x9e>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a60      	ldr	r2, [pc, #384]	; (8003bfc <HAL_DMA_IRQHandler+0x200>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d00a      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x98>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a5f      	ldr	r2, [pc, #380]	; (8003c00 <HAL_DMA_IRQHandler+0x204>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d102      	bne.n	8003a8e <HAL_DMA_IRQHandler+0x92>
 8003a88:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a8c:	e00e      	b.n	8003aac <HAL_DMA_IRQHandler+0xb0>
 8003a8e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003a92:	e00b      	b.n	8003aac <HAL_DMA_IRQHandler+0xb0>
 8003a94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a98:	e008      	b.n	8003aac <HAL_DMA_IRQHandler+0xb0>
 8003a9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a9e:	e005      	b.n	8003aac <HAL_DMA_IRQHandler+0xb0>
 8003aa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003aa4:	e002      	b.n	8003aac <HAL_DMA_IRQHandler+0xb0>
 8003aa6:	2340      	movs	r3, #64	; 0x40
 8003aa8:	e000      	b.n	8003aac <HAL_DMA_IRQHandler+0xb0>
 8003aaa:	2304      	movs	r3, #4
 8003aac:	4a55      	ldr	r2, [pc, #340]	; (8003c04 <HAL_DMA_IRQHandler+0x208>)
 8003aae:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 8094 	beq.w	8003be2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003ac2:	e08e      	b.n	8003be2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	2202      	movs	r2, #2
 8003aca:	409a      	lsls	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d056      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x186>
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d051      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0320 	and.w	r3, r3, #32
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10b      	bne.n	8003b04 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 020a 	bic.w	r2, r2, #10
 8003afa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a38      	ldr	r2, [pc, #224]	; (8003bec <HAL_DMA_IRQHandler+0x1f0>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d029      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x166>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a37      	ldr	r2, [pc, #220]	; (8003bf0 <HAL_DMA_IRQHandler+0x1f4>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d022      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x162>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a35      	ldr	r2, [pc, #212]	; (8003bf4 <HAL_DMA_IRQHandler+0x1f8>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d01a      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x15c>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a34      	ldr	r2, [pc, #208]	; (8003bf8 <HAL_DMA_IRQHandler+0x1fc>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d012      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x156>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a32      	ldr	r2, [pc, #200]	; (8003bfc <HAL_DMA_IRQHandler+0x200>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d00a      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x150>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a31      	ldr	r2, [pc, #196]	; (8003c00 <HAL_DMA_IRQHandler+0x204>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d102      	bne.n	8003b46 <HAL_DMA_IRQHandler+0x14a>
 8003b40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003b44:	e00e      	b.n	8003b64 <HAL_DMA_IRQHandler+0x168>
 8003b46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b4a:	e00b      	b.n	8003b64 <HAL_DMA_IRQHandler+0x168>
 8003b4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b50:	e008      	b.n	8003b64 <HAL_DMA_IRQHandler+0x168>
 8003b52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b56:	e005      	b.n	8003b64 <HAL_DMA_IRQHandler+0x168>
 8003b58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b5c:	e002      	b.n	8003b64 <HAL_DMA_IRQHandler+0x168>
 8003b5e:	2320      	movs	r3, #32
 8003b60:	e000      	b.n	8003b64 <HAL_DMA_IRQHandler+0x168>
 8003b62:	2302      	movs	r3, #2
 8003b64:	4a27      	ldr	r2, [pc, #156]	; (8003c04 <HAL_DMA_IRQHandler+0x208>)
 8003b66:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d034      	beq.n	8003be2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003b80:	e02f      	b.n	8003be2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	2208      	movs	r2, #8
 8003b88:	409a      	lsls	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d028      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x1e8>
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	f003 0308 	and.w	r3, r3, #8
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d023      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 020e 	bic.w	r2, r2, #14
 8003baa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8003bba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d004      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	4798      	blx	r3
    }
  }
  return;
 8003be2:	bf00      	nop
 8003be4:	bf00      	nop
}
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40020008 	.word	0x40020008
 8003bf0:	4002001c 	.word	0x4002001c
 8003bf4:	40020030 	.word	0x40020030
 8003bf8:	40020044 	.word	0x40020044
 8003bfc:	40020058 	.word	0x40020058
 8003c00:	4002006c 	.word	0x4002006c
 8003c04:	40020000 	.word	0x40020000

08003c08 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
 8003c14:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1e:	2101      	movs	r1, #1
 8003c20:	fa01 f202 	lsl.w	r2, r1, r2
 8003c24:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b10      	cmp	r3, #16
 8003c34:	d108      	bne.n	8003c48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c46:	e007      	b.n	8003c58 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	60da      	str	r2, [r3, #12]
}
 8003c58:	bf00      	nop
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bc80      	pop	{r7}
 8003c60:	4770      	bx	lr
	...

08003c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b08b      	sub	sp, #44	; 0x2c
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003c72:	2300      	movs	r3, #0
 8003c74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c76:	e127      	b.n	8003ec8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003c78:	2201      	movs	r2, #1
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	69fa      	ldr	r2, [r7, #28]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	f040 8116 	bne.w	8003ec2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	2b12      	cmp	r3, #18
 8003c9c:	d034      	beq.n	8003d08 <HAL_GPIO_Init+0xa4>
 8003c9e:	2b12      	cmp	r3, #18
 8003ca0:	d80d      	bhi.n	8003cbe <HAL_GPIO_Init+0x5a>
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d02b      	beq.n	8003cfe <HAL_GPIO_Init+0x9a>
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d804      	bhi.n	8003cb4 <HAL_GPIO_Init+0x50>
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d031      	beq.n	8003d12 <HAL_GPIO_Init+0xae>
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d01c      	beq.n	8003cec <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003cb2:	e048      	b.n	8003d46 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003cb4:	2b03      	cmp	r3, #3
 8003cb6:	d043      	beq.n	8003d40 <HAL_GPIO_Init+0xdc>
 8003cb8:	2b11      	cmp	r3, #17
 8003cba:	d01b      	beq.n	8003cf4 <HAL_GPIO_Init+0x90>
          break;
 8003cbc:	e043      	b.n	8003d46 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003cbe:	4a89      	ldr	r2, [pc, #548]	; (8003ee4 <HAL_GPIO_Init+0x280>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d026      	beq.n	8003d12 <HAL_GPIO_Init+0xae>
 8003cc4:	4a87      	ldr	r2, [pc, #540]	; (8003ee4 <HAL_GPIO_Init+0x280>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d806      	bhi.n	8003cd8 <HAL_GPIO_Init+0x74>
 8003cca:	4a87      	ldr	r2, [pc, #540]	; (8003ee8 <HAL_GPIO_Init+0x284>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d020      	beq.n	8003d12 <HAL_GPIO_Init+0xae>
 8003cd0:	4a86      	ldr	r2, [pc, #536]	; (8003eec <HAL_GPIO_Init+0x288>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d01d      	beq.n	8003d12 <HAL_GPIO_Init+0xae>
          break;
 8003cd6:	e036      	b.n	8003d46 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003cd8:	4a85      	ldr	r2, [pc, #532]	; (8003ef0 <HAL_GPIO_Init+0x28c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d019      	beq.n	8003d12 <HAL_GPIO_Init+0xae>
 8003cde:	4a85      	ldr	r2, [pc, #532]	; (8003ef4 <HAL_GPIO_Init+0x290>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d016      	beq.n	8003d12 <HAL_GPIO_Init+0xae>
 8003ce4:	4a84      	ldr	r2, [pc, #528]	; (8003ef8 <HAL_GPIO_Init+0x294>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d013      	beq.n	8003d12 <HAL_GPIO_Init+0xae>
          break;
 8003cea:	e02c      	b.n	8003d46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	623b      	str	r3, [r7, #32]
          break;
 8003cf2:	e028      	b.n	8003d46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	623b      	str	r3, [r7, #32]
          break;
 8003cfc:	e023      	b.n	8003d46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	3308      	adds	r3, #8
 8003d04:	623b      	str	r3, [r7, #32]
          break;
 8003d06:	e01e      	b.n	8003d46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	330c      	adds	r3, #12
 8003d0e:	623b      	str	r3, [r7, #32]
          break;
 8003d10:	e019      	b.n	8003d46 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d102      	bne.n	8003d20 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d1a:	2304      	movs	r3, #4
 8003d1c:	623b      	str	r3, [r7, #32]
          break;
 8003d1e:	e012      	b.n	8003d46 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d105      	bne.n	8003d34 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d28:	2308      	movs	r3, #8
 8003d2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	69fa      	ldr	r2, [r7, #28]
 8003d30:	611a      	str	r2, [r3, #16]
          break;
 8003d32:	e008      	b.n	8003d46 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d34:	2308      	movs	r3, #8
 8003d36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	69fa      	ldr	r2, [r7, #28]
 8003d3c:	615a      	str	r2, [r3, #20]
          break;
 8003d3e:	e002      	b.n	8003d46 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003d40:	2300      	movs	r3, #0
 8003d42:	623b      	str	r3, [r7, #32]
          break;
 8003d44:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	2bff      	cmp	r3, #255	; 0xff
 8003d4a:	d801      	bhi.n	8003d50 <HAL_GPIO_Init+0xec>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	e001      	b.n	8003d54 <HAL_GPIO_Init+0xf0>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3304      	adds	r3, #4
 8003d54:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	2bff      	cmp	r3, #255	; 0xff
 8003d5a:	d802      	bhi.n	8003d62 <HAL_GPIO_Init+0xfe>
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	e002      	b.n	8003d68 <HAL_GPIO_Init+0x104>
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	3b08      	subs	r3, #8
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	210f      	movs	r1, #15
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	fa01 f303 	lsl.w	r3, r1, r3
 8003d76:	43db      	mvns	r3, r3
 8003d78:	401a      	ands	r2, r3
 8003d7a:	6a39      	ldr	r1, [r7, #32]
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d82:	431a      	orrs	r2, r3
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 8096 	beq.w	8003ec2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003d96:	4b59      	ldr	r3, [pc, #356]	; (8003efc <HAL_GPIO_Init+0x298>)
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	4a58      	ldr	r2, [pc, #352]	; (8003efc <HAL_GPIO_Init+0x298>)
 8003d9c:	f043 0301 	orr.w	r3, r3, #1
 8003da0:	6193      	str	r3, [r2, #24]
 8003da2:	4b56      	ldr	r3, [pc, #344]	; (8003efc <HAL_GPIO_Init+0x298>)
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	60bb      	str	r3, [r7, #8]
 8003dac:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003dae:	4a54      	ldr	r2, [pc, #336]	; (8003f00 <HAL_GPIO_Init+0x29c>)
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	089b      	lsrs	r3, r3, #2
 8003db4:	3302      	adds	r3, #2
 8003db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dba:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	220f      	movs	r2, #15
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a4b      	ldr	r2, [pc, #300]	; (8003f04 <HAL_GPIO_Init+0x2a0>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d013      	beq.n	8003e02 <HAL_GPIO_Init+0x19e>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a4a      	ldr	r2, [pc, #296]	; (8003f08 <HAL_GPIO_Init+0x2a4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d00d      	beq.n	8003dfe <HAL_GPIO_Init+0x19a>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a49      	ldr	r2, [pc, #292]	; (8003f0c <HAL_GPIO_Init+0x2a8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d007      	beq.n	8003dfa <HAL_GPIO_Init+0x196>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a48      	ldr	r2, [pc, #288]	; (8003f10 <HAL_GPIO_Init+0x2ac>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d101      	bne.n	8003df6 <HAL_GPIO_Init+0x192>
 8003df2:	2303      	movs	r3, #3
 8003df4:	e006      	b.n	8003e04 <HAL_GPIO_Init+0x1a0>
 8003df6:	2304      	movs	r3, #4
 8003df8:	e004      	b.n	8003e04 <HAL_GPIO_Init+0x1a0>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	e002      	b.n	8003e04 <HAL_GPIO_Init+0x1a0>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e000      	b.n	8003e04 <HAL_GPIO_Init+0x1a0>
 8003e02:	2300      	movs	r3, #0
 8003e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e06:	f002 0203 	and.w	r2, r2, #3
 8003e0a:	0092      	lsls	r2, r2, #2
 8003e0c:	4093      	lsls	r3, r2
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e14:	493a      	ldr	r1, [pc, #232]	; (8003f00 <HAL_GPIO_Init+0x29c>)
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	089b      	lsrs	r3, r3, #2
 8003e1a:	3302      	adds	r3, #2
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d006      	beq.n	8003e3c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003e2e:	4b39      	ldr	r3, [pc, #228]	; (8003f14 <HAL_GPIO_Init+0x2b0>)
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	4938      	ldr	r1, [pc, #224]	; (8003f14 <HAL_GPIO_Init+0x2b0>)
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	600b      	str	r3, [r1, #0]
 8003e3a:	e006      	b.n	8003e4a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003e3c:	4b35      	ldr	r3, [pc, #212]	; (8003f14 <HAL_GPIO_Init+0x2b0>)
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	43db      	mvns	r3, r3
 8003e44:	4933      	ldr	r1, [pc, #204]	; (8003f14 <HAL_GPIO_Init+0x2b0>)
 8003e46:	4013      	ands	r3, r2
 8003e48:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d006      	beq.n	8003e64 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003e56:	4b2f      	ldr	r3, [pc, #188]	; (8003f14 <HAL_GPIO_Init+0x2b0>)
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	492e      	ldr	r1, [pc, #184]	; (8003f14 <HAL_GPIO_Init+0x2b0>)
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	604b      	str	r3, [r1, #4]
 8003e62:	e006      	b.n	8003e72 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e64:	4b2b      	ldr	r3, [pc, #172]	; (8003f14 <HAL_GPIO_Init+0x2b0>)
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	4929      	ldr	r1, [pc, #164]	; (8003f14 <HAL_GPIO_Init+0x2b0>)
 8003e6e:	4013      	ands	r3, r2
 8003e70:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d006      	beq.n	8003e8c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003e7e:	4b25      	ldr	r3, [pc, #148]	; (8003f14 <HAL_GPIO_Init+0x2b0>)
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	4924      	ldr	r1, [pc, #144]	; (8003f14 <HAL_GPIO_Init+0x2b0>)
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	608b      	str	r3, [r1, #8]
 8003e8a:	e006      	b.n	8003e9a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003e8c:	4b21      	ldr	r3, [pc, #132]	; (8003f14 <HAL_GPIO_Init+0x2b0>)
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	43db      	mvns	r3, r3
 8003e94:	491f      	ldr	r1, [pc, #124]	; (8003f14 <HAL_GPIO_Init+0x2b0>)
 8003e96:	4013      	ands	r3, r2
 8003e98:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d006      	beq.n	8003eb4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003ea6:	4b1b      	ldr	r3, [pc, #108]	; (8003f14 <HAL_GPIO_Init+0x2b0>)
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	491a      	ldr	r1, [pc, #104]	; (8003f14 <HAL_GPIO_Init+0x2b0>)
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60cb      	str	r3, [r1, #12]
 8003eb2:	e006      	b.n	8003ec2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003eb4:	4b17      	ldr	r3, [pc, #92]	; (8003f14 <HAL_GPIO_Init+0x2b0>)
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	43db      	mvns	r3, r3
 8003ebc:	4915      	ldr	r1, [pc, #84]	; (8003f14 <HAL_GPIO_Init+0x2b0>)
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f47f aed0 	bne.w	8003c78 <HAL_GPIO_Init+0x14>
  }
}
 8003ed8:	bf00      	nop
 8003eda:	372c      	adds	r7, #44	; 0x2c
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bc80      	pop	{r7}
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	10210000 	.word	0x10210000
 8003ee8:	10110000 	.word	0x10110000
 8003eec:	10120000 	.word	0x10120000
 8003ef0:	10310000 	.word	0x10310000
 8003ef4:	10320000 	.word	0x10320000
 8003ef8:	10220000 	.word	0x10220000
 8003efc:	40021000 	.word	0x40021000
 8003f00:	40010000 	.word	0x40010000
 8003f04:	40010800 	.word	0x40010800
 8003f08:	40010c00 	.word	0x40010c00
 8003f0c:	40011000 	.word	0x40011000
 8003f10:	40011400 	.word	0x40011400
 8003f14:	40010400 	.word	0x40010400

08003f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	460b      	mov	r3, r1
 8003f22:	807b      	strh	r3, [r7, #2]
 8003f24:	4613      	mov	r3, r2
 8003f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f28:	787b      	ldrb	r3, [r7, #1]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f2e:	887a      	ldrh	r2, [r7, #2]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003f34:	e003      	b.n	8003f3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f36:	887b      	ldrh	r3, [r7, #2]
 8003f38:	041a      	lsls	r2, r3, #16
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	611a      	str	r2, [r3, #16]
}
 8003f3e:	bf00      	nop
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bc80      	pop	{r7}
 8003f46:	4770      	bx	lr

08003f48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e10f      	b.n	800417a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d106      	bne.n	8003f74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7ff f854 	bl	800301c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2224      	movs	r2, #36	; 0x24
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0201 	bic.w	r2, r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f8c:	f002 ff9c 	bl	8006ec8 <HAL_RCC_GetPCLK1Freq>
 8003f90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	4a7b      	ldr	r2, [pc, #492]	; (8004184 <HAL_I2C_Init+0x23c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d807      	bhi.n	8003fac <HAL_I2C_Init+0x64>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4a7a      	ldr	r2, [pc, #488]	; (8004188 <HAL_I2C_Init+0x240>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	bf94      	ite	ls
 8003fa4:	2301      	movls	r3, #1
 8003fa6:	2300      	movhi	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	e006      	b.n	8003fba <HAL_I2C_Init+0x72>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4a77      	ldr	r2, [pc, #476]	; (800418c <HAL_I2C_Init+0x244>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	bf94      	ite	ls
 8003fb4:	2301      	movls	r3, #1
 8003fb6:	2300      	movhi	r3, #0
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e0db      	b.n	800417a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	4a72      	ldr	r2, [pc, #456]	; (8004190 <HAL_I2C_Init+0x248>)
 8003fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fca:	0c9b      	lsrs	r3, r3, #18
 8003fcc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	4a64      	ldr	r2, [pc, #400]	; (8004184 <HAL_I2C_Init+0x23c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d802      	bhi.n	8003ffc <HAL_I2C_Init+0xb4>
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	e009      	b.n	8004010 <HAL_I2C_Init+0xc8>
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004002:	fb02 f303 	mul.w	r3, r2, r3
 8004006:	4a63      	ldr	r2, [pc, #396]	; (8004194 <HAL_I2C_Init+0x24c>)
 8004008:	fba2 2303 	umull	r2, r3, r2, r3
 800400c:	099b      	lsrs	r3, r3, #6
 800400e:	3301      	adds	r3, #1
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	6812      	ldr	r2, [r2, #0]
 8004014:	430b      	orrs	r3, r1
 8004016:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004022:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	4956      	ldr	r1, [pc, #344]	; (8004184 <HAL_I2C_Init+0x23c>)
 800402c:	428b      	cmp	r3, r1
 800402e:	d80d      	bhi.n	800404c <HAL_I2C_Init+0x104>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	1e59      	subs	r1, r3, #1
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	fbb1 f3f3 	udiv	r3, r1, r3
 800403e:	3301      	adds	r3, #1
 8004040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004044:	2b04      	cmp	r3, #4
 8004046:	bf38      	it	cc
 8004048:	2304      	movcc	r3, #4
 800404a:	e04f      	b.n	80040ec <HAL_I2C_Init+0x1a4>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d111      	bne.n	8004078 <HAL_I2C_Init+0x130>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	1e58      	subs	r0, r3, #1
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6859      	ldr	r1, [r3, #4]
 800405c:	460b      	mov	r3, r1
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	440b      	add	r3, r1
 8004062:	fbb0 f3f3 	udiv	r3, r0, r3
 8004066:	3301      	adds	r3, #1
 8004068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800406c:	2b00      	cmp	r3, #0
 800406e:	bf0c      	ite	eq
 8004070:	2301      	moveq	r3, #1
 8004072:	2300      	movne	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	e012      	b.n	800409e <HAL_I2C_Init+0x156>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	1e58      	subs	r0, r3, #1
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6859      	ldr	r1, [r3, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	440b      	add	r3, r1
 8004086:	0099      	lsls	r1, r3, #2
 8004088:	440b      	add	r3, r1
 800408a:	fbb0 f3f3 	udiv	r3, r0, r3
 800408e:	3301      	adds	r3, #1
 8004090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004094:	2b00      	cmp	r3, #0
 8004096:	bf0c      	ite	eq
 8004098:	2301      	moveq	r3, #1
 800409a:	2300      	movne	r3, #0
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <HAL_I2C_Init+0x15e>
 80040a2:	2301      	movs	r3, #1
 80040a4:	e022      	b.n	80040ec <HAL_I2C_Init+0x1a4>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10e      	bne.n	80040cc <HAL_I2C_Init+0x184>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	1e58      	subs	r0, r3, #1
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6859      	ldr	r1, [r3, #4]
 80040b6:	460b      	mov	r3, r1
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	440b      	add	r3, r1
 80040bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80040c0:	3301      	adds	r3, #1
 80040c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ca:	e00f      	b.n	80040ec <HAL_I2C_Init+0x1a4>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	1e58      	subs	r0, r3, #1
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6859      	ldr	r1, [r3, #4]
 80040d4:	460b      	mov	r3, r1
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	440b      	add	r3, r1
 80040da:	0099      	lsls	r1, r3, #2
 80040dc:	440b      	add	r3, r1
 80040de:	fbb0 f3f3 	udiv	r3, r0, r3
 80040e2:	3301      	adds	r3, #1
 80040e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040ec:	6879      	ldr	r1, [r7, #4]
 80040ee:	6809      	ldr	r1, [r1, #0]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	69da      	ldr	r2, [r3, #28]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	430a      	orrs	r2, r1
 800410e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800411a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6911      	ldr	r1, [r2, #16]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	68d2      	ldr	r2, [r2, #12]
 8004126:	4311      	orrs	r1, r2
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	6812      	ldr	r2, [r2, #0]
 800412c:	430b      	orrs	r3, r1
 800412e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	695a      	ldr	r2, [r3, #20]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	430a      	orrs	r2, r1
 800414a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0201 	orr.w	r2, r2, #1
 800415a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2220      	movs	r2, #32
 8004166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	000186a0 	.word	0x000186a0
 8004188:	001e847f 	.word	0x001e847f
 800418c:	003d08ff 	.word	0x003d08ff
 8004190:	431bde83 	.word	0x431bde83
 8004194:	10624dd3 	.word	0x10624dd3

08004198 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b088      	sub	sp, #32
 800419c:	af02      	add	r7, sp, #8
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	607a      	str	r2, [r7, #4]
 80041a2:	461a      	mov	r2, r3
 80041a4:	460b      	mov	r3, r1
 80041a6:	817b      	strh	r3, [r7, #10]
 80041a8:	4613      	mov	r3, r2
 80041aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041ac:	f7ff f9b0 	bl	8003510 <HAL_GetTick>
 80041b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b20      	cmp	r3, #32
 80041bc:	f040 80e0 	bne.w	8004380 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	2319      	movs	r3, #25
 80041c6:	2201      	movs	r2, #1
 80041c8:	4970      	ldr	r1, [pc, #448]	; (800438c <HAL_I2C_Master_Transmit+0x1f4>)
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f001 f9e8 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80041d6:	2302      	movs	r3, #2
 80041d8:	e0d3      	b.n	8004382 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d101      	bne.n	80041e8 <HAL_I2C_Master_Transmit+0x50>
 80041e4:	2302      	movs	r3, #2
 80041e6:	e0cc      	b.n	8004382 <HAL_I2C_Master_Transmit+0x1ea>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d007      	beq.n	800420e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f042 0201 	orr.w	r2, r2, #1
 800420c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800421c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2221      	movs	r2, #33	; 0x21
 8004222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2210      	movs	r2, #16
 800422a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	893a      	ldrh	r2, [r7, #8]
 800423e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004244:	b29a      	uxth	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4a50      	ldr	r2, [pc, #320]	; (8004390 <HAL_I2C_Master_Transmit+0x1f8>)
 800424e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004250:	8979      	ldrh	r1, [r7, #10]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	6a3a      	ldr	r2, [r7, #32]
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 ff1c 	bl	8005094 <I2C_MasterRequestWrite>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e08d      	b.n	8004382 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004266:	2300      	movs	r3, #0
 8004268:	613b      	str	r3, [r7, #16]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	613b      	str	r3, [r7, #16]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	613b      	str	r3, [r7, #16]
 800427a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800427c:	e066      	b.n	800434c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	6a39      	ldr	r1, [r7, #32]
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f001 fa62 	bl	800574c <I2C_WaitOnTXEFlagUntilTimeout>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00d      	beq.n	80042aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	2b04      	cmp	r3, #4
 8004294:	d107      	bne.n	80042a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e06b      	b.n	8004382 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	781a      	ldrb	r2, [r3, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	1c5a      	adds	r2, r3, #1
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d2:	3b01      	subs	r3, #1
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d11b      	bne.n	8004320 <HAL_I2C_Master_Transmit+0x188>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d017      	beq.n	8004320 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	781a      	ldrb	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	1c5a      	adds	r2, r3, #1
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430a:	b29b      	uxth	r3, r3
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004318:	3b01      	subs	r3, #1
 800431a:	b29a      	uxth	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	6a39      	ldr	r1, [r7, #32]
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f001 fa52 	bl	80057ce <I2C_WaitOnBTFFlagUntilTimeout>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00d      	beq.n	800434c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004334:	2b04      	cmp	r3, #4
 8004336:	d107      	bne.n	8004348 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004346:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e01a      	b.n	8004382 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004350:	2b00      	cmp	r3, #0
 8004352:	d194      	bne.n	800427e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004362:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800437c:	2300      	movs	r3, #0
 800437e:	e000      	b.n	8004382 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004380:	2302      	movs	r3, #2
  }
}
 8004382:	4618      	mov	r0, r3
 8004384:	3718      	adds	r7, #24
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	00100002 	.word	0x00100002
 8004390:	ffff0000 	.word	0xffff0000

08004394 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b08c      	sub	sp, #48	; 0x30
 8004398:	af02      	add	r7, sp, #8
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	607a      	str	r2, [r7, #4]
 800439e:	461a      	mov	r2, r3
 80043a0:	460b      	mov	r3, r1
 80043a2:	817b      	strh	r3, [r7, #10]
 80043a4:	4613      	mov	r3, r2
 80043a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043a8:	f7ff f8b2 	bl	8003510 <HAL_GetTick>
 80043ac:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b20      	cmp	r3, #32
 80043b8:	f040 8213 	bne.w	80047e2 <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	2319      	movs	r3, #25
 80043c2:	2201      	movs	r2, #1
 80043c4:	497e      	ldr	r1, [pc, #504]	; (80045c0 <HAL_I2C_Master_Receive+0x22c>)
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f001 f8ea 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80043d2:	2302      	movs	r3, #2
 80043d4:	e206      	b.n	80047e4 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d101      	bne.n	80043e4 <HAL_I2C_Master_Receive+0x50>
 80043e0:	2302      	movs	r3, #2
 80043e2:	e1ff      	b.n	80047e4 <HAL_I2C_Master_Receive+0x450>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d007      	beq.n	800440a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f042 0201 	orr.w	r2, r2, #1
 8004408:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004418:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2222      	movs	r2, #34	; 0x22
 800441e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2210      	movs	r2, #16
 8004426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	893a      	ldrh	r2, [r7, #8]
 800443a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004440:	b29a      	uxth	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4a5e      	ldr	r2, [pc, #376]	; (80045c4 <HAL_I2C_Master_Receive+0x230>)
 800444a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800444c:	8979      	ldrh	r1, [r7, #10]
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f000 fe94 	bl	8005180 <I2C_MasterRequestRead>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e1c0      	b.n	80047e4 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004466:	2b00      	cmp	r3, #0
 8004468:	d113      	bne.n	8004492 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800446a:	2300      	movs	r3, #0
 800446c:	623b      	str	r3, [r7, #32]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	623b      	str	r3, [r7, #32]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	623b      	str	r3, [r7, #32]
 800447e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800448e:	601a      	str	r2, [r3, #0]
 8004490:	e194      	b.n	80047bc <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004496:	2b01      	cmp	r3, #1
 8004498:	d11d      	bne.n	80044d6 <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044a8:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80044aa:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ac:	2300      	movs	r3, #0
 80044ae:	61fb      	str	r3, [r7, #28]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	61fb      	str	r3, [r7, #28]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	61fb      	str	r3, [r7, #28]
 80044c0:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80044d2:	b662      	cpsie	i
 80044d4:	e172      	b.n	80047bc <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d11d      	bne.n	800451a <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80044ee:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044f0:	2300      	movs	r3, #0
 80044f2:	61bb      	str	r3, [r7, #24]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	61bb      	str	r3, [r7, #24]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	61bb      	str	r3, [r7, #24]
 8004504:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004514:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004516:	b662      	cpsie	i
 8004518:	e150      	b.n	80047bc <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004528:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800452a:	2300      	movs	r3, #0
 800452c:	617b      	str	r3, [r7, #20]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	617b      	str	r3, [r7, #20]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	617b      	str	r3, [r7, #20]
 800453e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004540:	e13c      	b.n	80047bc <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004546:	2b03      	cmp	r3, #3
 8004548:	f200 80f5 	bhi.w	8004736 <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004550:	2b01      	cmp	r3, #1
 8004552:	d123      	bne.n	800459c <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004556:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f001 f979 	bl	8005850 <I2C_WaitOnRXNEFlagUntilTimeout>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e13d      	b.n	80047e4 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	691a      	ldr	r2, [r3, #16]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004590:	b29b      	uxth	r3, r3
 8004592:	3b01      	subs	r3, #1
 8004594:	b29a      	uxth	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	855a      	strh	r2, [r3, #42]	; 0x2a
 800459a:	e10f      	b.n	80047bc <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d150      	bne.n	8004646 <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045aa:	2200      	movs	r2, #0
 80045ac:	4906      	ldr	r1, [pc, #24]	; (80045c8 <HAL_I2C_Master_Receive+0x234>)
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 fff6 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d008      	beq.n	80045cc <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e112      	b.n	80047e4 <HAL_I2C_Master_Receive+0x450>
 80045be:	bf00      	nop
 80045c0:	00100002 	.word	0x00100002
 80045c4:	ffff0000 	.word	0xffff0000
 80045c8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80045cc:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045dc:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	691a      	ldr	r2, [r3, #16]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	b2d2      	uxtb	r2, r2
 80045ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	1c5a      	adds	r2, r3, #1
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045fa:	3b01      	subs	r3, #1
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004606:	b29b      	uxth	r3, r3
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004610:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	b2d2      	uxtb	r2, r2
 800461e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800462e:	3b01      	subs	r3, #1
 8004630:	b29a      	uxth	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463a:	b29b      	uxth	r3, r3
 800463c:	3b01      	subs	r3, #1
 800463e:	b29a      	uxth	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004644:	e0ba      	b.n	80047bc <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464c:	2200      	movs	r2, #0
 800464e:	4967      	ldr	r1, [pc, #412]	; (80047ec <HAL_I2C_Master_Receive+0x458>)
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f000 ffa5 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e0c1      	b.n	80047e4 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800466e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004670:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	691a      	ldr	r2, [r3, #16]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467c:	b2d2      	uxtb	r2, r2
 800467e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468e:	3b01      	subs	r3, #1
 8004690:	b29a      	uxth	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469a:	b29b      	uxth	r3, r3
 800469c:	3b01      	subs	r3, #1
 800469e:	b29a      	uxth	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046aa:	2200      	movs	r2, #0
 80046ac:	494f      	ldr	r1, [pc, #316]	; (80047ec <HAL_I2C_Master_Receive+0x458>)
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 ff76 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e092      	b.n	80047e4 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046cc:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	691a      	ldr	r2, [r3, #16]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	b2d2      	uxtb	r2, r2
 80046da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	1c5a      	adds	r2, r3, #1
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ea:	3b01      	subs	r3, #1
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	3b01      	subs	r3, #1
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004700:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	691a      	ldr	r2, [r3, #16]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470c:	b2d2      	uxtb	r2, r2
 800470e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004714:	1c5a      	adds	r2, r3, #1
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800471e:	3b01      	subs	r3, #1
 8004720:	b29a      	uxth	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472a:	b29b      	uxth	r3, r3
 800472c:	3b01      	subs	r3, #1
 800472e:	b29a      	uxth	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004734:	e042      	b.n	80047bc <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004738:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f001 f888 	bl	8005850 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e04c      	b.n	80047e4 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	691a      	ldr	r2, [r3, #16]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	b2d2      	uxtb	r2, r2
 8004756:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	1c5a      	adds	r2, r3, #1
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004766:	3b01      	subs	r3, #1
 8004768:	b29a      	uxth	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004772:	b29b      	uxth	r3, r3
 8004774:	3b01      	subs	r3, #1
 8004776:	b29a      	uxth	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	f003 0304 	and.w	r3, r3, #4
 8004786:	2b04      	cmp	r3, #4
 8004788:	d118      	bne.n	80047bc <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	691a      	ldr	r2, [r3, #16]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004794:	b2d2      	uxtb	r2, r2
 8004796:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	1c5a      	adds	r2, r3, #1
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047a6:	3b01      	subs	r3, #1
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	3b01      	subs	r3, #1
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f47f aebe 	bne.w	8004542 <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2220      	movs	r2, #32
 80047ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80047de:	2300      	movs	r3, #0
 80047e0:	e000      	b.n	80047e4 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 80047e2:	2302      	movs	r3, #2
  }
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3728      	adds	r7, #40	; 0x28
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	00010004 	.word	0x00010004

080047f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af02      	add	r7, sp, #8
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	4608      	mov	r0, r1
 80047fa:	4611      	mov	r1, r2
 80047fc:	461a      	mov	r2, r3
 80047fe:	4603      	mov	r3, r0
 8004800:	817b      	strh	r3, [r7, #10]
 8004802:	460b      	mov	r3, r1
 8004804:	813b      	strh	r3, [r7, #8]
 8004806:	4613      	mov	r3, r2
 8004808:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800480a:	f7fe fe81 	bl	8003510 <HAL_GetTick>
 800480e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b20      	cmp	r3, #32
 800481a:	f040 80d9 	bne.w	80049d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	2319      	movs	r3, #25
 8004824:	2201      	movs	r2, #1
 8004826:	496d      	ldr	r1, [pc, #436]	; (80049dc <HAL_I2C_Mem_Write+0x1ec>)
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 feb9 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004834:	2302      	movs	r3, #2
 8004836:	e0cc      	b.n	80049d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800483e:	2b01      	cmp	r3, #1
 8004840:	d101      	bne.n	8004846 <HAL_I2C_Mem_Write+0x56>
 8004842:	2302      	movs	r3, #2
 8004844:	e0c5      	b.n	80049d2 <HAL_I2C_Mem_Write+0x1e2>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b01      	cmp	r3, #1
 800485a:	d007      	beq.n	800486c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0201 	orr.w	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800487a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2221      	movs	r2, #33	; 0x21
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2240      	movs	r2, #64	; 0x40
 8004888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6a3a      	ldr	r2, [r7, #32]
 8004896:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800489c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4a4d      	ldr	r2, [pc, #308]	; (80049e0 <HAL_I2C_Mem_Write+0x1f0>)
 80048ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048ae:	88f8      	ldrh	r0, [r7, #6]
 80048b0:	893a      	ldrh	r2, [r7, #8]
 80048b2:	8979      	ldrh	r1, [r7, #10]
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	9301      	str	r3, [sp, #4]
 80048b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	4603      	mov	r3, r0
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 fd14 	bl	80052ec <I2C_RequestMemoryWrite>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d052      	beq.n	8004970 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e081      	b.n	80049d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048d2:	68f8      	ldr	r0, [r7, #12]
 80048d4:	f000 ff3a 	bl	800574c <I2C_WaitOnTXEFlagUntilTimeout>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00d      	beq.n	80048fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d107      	bne.n	80048f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e06b      	b.n	80049d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	781a      	ldrb	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	1c5a      	adds	r2, r3, #1
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004920:	b29b      	uxth	r3, r3
 8004922:	3b01      	subs	r3, #1
 8004924:	b29a      	uxth	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b04      	cmp	r3, #4
 8004936:	d11b      	bne.n	8004970 <HAL_I2C_Mem_Write+0x180>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493c:	2b00      	cmp	r3, #0
 800493e:	d017      	beq.n	8004970 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	781a      	ldrb	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	1c5a      	adds	r2, r3, #1
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800495a:	3b01      	subs	r3, #1
 800495c:	b29a      	uxth	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004966:	b29b      	uxth	r3, r3
 8004968:	3b01      	subs	r3, #1
 800496a:	b29a      	uxth	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1aa      	bne.n	80048ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f000 ff26 	bl	80057ce <I2C_WaitOnBTFFlagUntilTimeout>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00d      	beq.n	80049a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498c:	2b04      	cmp	r3, #4
 800498e:	d107      	bne.n	80049a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800499e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e016      	b.n	80049d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2220      	movs	r2, #32
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80049cc:	2300      	movs	r3, #0
 80049ce:	e000      	b.n	80049d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80049d0:	2302      	movs	r3, #2
  }
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3718      	adds	r7, #24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	00100002 	.word	0x00100002
 80049e0:	ffff0000 	.word	0xffff0000

080049e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b08c      	sub	sp, #48	; 0x30
 80049e8:	af02      	add	r7, sp, #8
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	4608      	mov	r0, r1
 80049ee:	4611      	mov	r1, r2
 80049f0:	461a      	mov	r2, r3
 80049f2:	4603      	mov	r3, r0
 80049f4:	817b      	strh	r3, [r7, #10]
 80049f6:	460b      	mov	r3, r1
 80049f8:	813b      	strh	r3, [r7, #8]
 80049fa:	4613      	mov	r3, r2
 80049fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049fe:	f7fe fd87 	bl	8003510 <HAL_GetTick>
 8004a02:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b20      	cmp	r3, #32
 8004a0e:	f040 8218 	bne.w	8004e42 <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	2319      	movs	r3, #25
 8004a18:	2201      	movs	r2, #1
 8004a1a:	4981      	ldr	r1, [pc, #516]	; (8004c20 <HAL_I2C_Mem_Read+0x23c>)
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 fdbf 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004a28:	2302      	movs	r3, #2
 8004a2a:	e20b      	b.n	8004e44 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d101      	bne.n	8004a3a <HAL_I2C_Mem_Read+0x56>
 8004a36:	2302      	movs	r3, #2
 8004a38:	e204      	b.n	8004e44 <HAL_I2C_Mem_Read+0x460>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d007      	beq.n	8004a60 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0201 	orr.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2222      	movs	r2, #34	; 0x22
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2240      	movs	r2, #64	; 0x40
 8004a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004a90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4a61      	ldr	r2, [pc, #388]	; (8004c24 <HAL_I2C_Mem_Read+0x240>)
 8004aa0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004aa2:	88f8      	ldrh	r0, [r7, #6]
 8004aa4:	893a      	ldrh	r2, [r7, #8]
 8004aa6:	8979      	ldrh	r1, [r7, #10]
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	9301      	str	r3, [sp, #4]
 8004aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f000 fca4 	bl	8005400 <I2C_RequestMemoryRead>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e1c0      	b.n	8004e44 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d113      	bne.n	8004af2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aca:	2300      	movs	r3, #0
 8004acc:	623b      	str	r3, [r7, #32]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	623b      	str	r3, [r7, #32]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	623b      	str	r3, [r7, #32]
 8004ade:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	e194      	b.n	8004e1c <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d11d      	bne.n	8004b36 <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004b0a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	61fb      	str	r3, [r7, #28]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	61fb      	str	r3, [r7, #28]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	61fb      	str	r3, [r7, #28]
 8004b20:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004b32:	b662      	cpsie	i
 8004b34:	e172      	b.n	8004e1c <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d11d      	bne.n	8004b7a <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b4c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004b4e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b50:	2300      	movs	r3, #0
 8004b52:	61bb      	str	r3, [r7, #24]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	61bb      	str	r3, [r7, #24]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	61bb      	str	r3, [r7, #24]
 8004b64:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b74:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004b76:	b662      	cpsie	i
 8004b78:	e150      	b.n	8004e1c <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b88:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	617b      	str	r3, [r7, #20]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	617b      	str	r3, [r7, #20]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	617b      	str	r3, [r7, #20]
 8004b9e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004ba0:	e13c      	b.n	8004e1c <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	f200 80f5 	bhi.w	8004d96 <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d123      	bne.n	8004bfc <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f000 fe49 	bl	8005850 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d001      	beq.n	8004bc8 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e13d      	b.n	8004e44 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	691a      	ldr	r2, [r3, #16]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd2:	b2d2      	uxtb	r2, r2
 8004bd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bda:	1c5a      	adds	r2, r3, #1
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be4:	3b01      	subs	r3, #1
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004bfa:	e10f      	b.n	8004e1c <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d150      	bne.n	8004ca6 <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	4906      	ldr	r1, [pc, #24]	; (8004c28 <HAL_I2C_Mem_Read+0x244>)
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f000 fcc6 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d008      	beq.n	8004c2c <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e112      	b.n	8004e44 <HAL_I2C_Mem_Read+0x460>
 8004c1e:	bf00      	nop
 8004c20:	00100002 	.word	0x00100002
 8004c24:	ffff0000 	.word	0xffff0000
 8004c28:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004c2c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c3c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	691a      	ldr	r2, [r3, #16]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	b2d2      	uxtb	r2, r2
 8004c4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	1c5a      	adds	r2, r3, #1
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004c70:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	691a      	ldr	r2, [r3, #16]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	b2d2      	uxtb	r2, r2
 8004c7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c84:	1c5a      	adds	r2, r3, #1
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ca4:	e0ba      	b.n	8004e1c <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cac:	2200      	movs	r2, #0
 8004cae:	4967      	ldr	r1, [pc, #412]	; (8004e4c <HAL_I2C_Mem_Read+0x468>)
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f000 fc75 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e0c1      	b.n	8004e44 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004cd0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	691a      	ldr	r2, [r3, #16]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cdc:	b2d2      	uxtb	r2, r2
 8004cde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	1c5a      	adds	r2, r3, #1
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	494f      	ldr	r1, [pc, #316]	; (8004e4c <HAL_I2C_Mem_Read+0x468>)
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 fc46 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e092      	b.n	8004e44 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d2c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	691a      	ldr	r2, [r3, #16]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	b2d2      	uxtb	r2, r2
 8004d3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d40:	1c5a      	adds	r2, r3, #1
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004d60:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	691a      	ldr	r2, [r3, #16]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	b2d2      	uxtb	r2, r2
 8004d6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	1c5a      	adds	r2, r3, #1
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d94:	e042      	b.n	8004e1c <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 fd58 	bl	8005850 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e04c      	b.n	8004e44 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	691a      	ldr	r2, [r3, #16]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	b2d2      	uxtb	r2, r2
 8004db6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	f003 0304 	and.w	r3, r3, #4
 8004de6:	2b04      	cmp	r3, #4
 8004de8:	d118      	bne.n	8004e1c <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	691a      	ldr	r2, [r3, #16]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df4:	b2d2      	uxtb	r2, r2
 8004df6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f47f aebe 	bne.w	8004ba2 <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	e000      	b.n	8004e44 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 8004e42:	2302      	movs	r3, #2
  }
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3728      	adds	r7, #40	; 0x28
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	00010004 	.word	0x00010004

08004e50 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b08a      	sub	sp, #40	; 0x28
 8004e54:	af02      	add	r7, sp, #8
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	607a      	str	r2, [r7, #4]
 8004e5a:	603b      	str	r3, [r7, #0]
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004e60:	f7fe fb56 	bl	8003510 <HAL_GetTick>
 8004e64:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004e66:	2301      	movs	r3, #1
 8004e68:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b20      	cmp	r3, #32
 8004e74:	f040 8105 	bne.w	8005082 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	2319      	movs	r3, #25
 8004e7e:	2201      	movs	r2, #1
 8004e80:	4982      	ldr	r1, [pc, #520]	; (800508c <HAL_I2C_IsDeviceReady+0x23c>)
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f000 fb8c 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004e8e:	2302      	movs	r3, #2
 8004e90:	e0f8      	b.n	8005084 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_I2C_IsDeviceReady+0x50>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	e0f1      	b.n	8005084 <HAL_I2C_IsDeviceReady+0x234>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d007      	beq.n	8004ec6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f042 0201 	orr.w	r2, r2, #1
 8004ec4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ed4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2224      	movs	r2, #36	; 0x24
 8004eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4a6a      	ldr	r2, [pc, #424]	; (8005090 <HAL_I2C_IsDeviceReady+0x240>)
 8004ee8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ef8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 fb4a 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e0b6      	b.n	8005084 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f16:	897b      	ldrh	r3, [r7, #10]
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f24:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004f26:	f7fe faf3 	bl	8003510 <HAL_GetTick>
 8004f2a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	bf0c      	ite	eq
 8004f3a:	2301      	moveq	r3, #1
 8004f3c:	2300      	movne	r3, #0
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f50:	bf0c      	ite	eq
 8004f52:	2301      	moveq	r3, #1
 8004f54:	2300      	movne	r3, #0
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004f5a:	e025      	b.n	8004fa8 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004f5c:	f7fe fad8 	bl	8003510 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d302      	bcc.n	8004f72 <HAL_I2C_IsDeviceReady+0x122>
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d103      	bne.n	8004f7a <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	22a0      	movs	r2, #160	; 0xa0
 8004f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	bf0c      	ite	eq
 8004f88:	2301      	moveq	r3, #1
 8004f8a:	2300      	movne	r3, #0
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f9e:	bf0c      	ite	eq
 8004fa0:	2301      	moveq	r3, #1
 8004fa2:	2300      	movne	r3, #0
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2ba0      	cmp	r3, #160	; 0xa0
 8004fb2:	d005      	beq.n	8004fc0 <HAL_I2C_IsDeviceReady+0x170>
 8004fb4:	7dfb      	ldrb	r3, [r7, #23]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d102      	bne.n	8004fc0 <HAL_I2C_IsDeviceReady+0x170>
 8004fba:	7dbb      	ldrb	r3, [r7, #22]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0cd      	beq.n	8004f5c <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d129      	bne.n	800502a <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fe4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	613b      	str	r3, [r7, #16]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	613b      	str	r3, [r7, #16]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	613b      	str	r3, [r7, #16]
 8004ffa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	9300      	str	r3, [sp, #0]
 8005000:	2319      	movs	r3, #25
 8005002:	2201      	movs	r2, #1
 8005004:	4921      	ldr	r1, [pc, #132]	; (800508c <HAL_I2C_IsDeviceReady+0x23c>)
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f000 faca 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e036      	b.n	8005084 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2220      	movs	r2, #32
 800501a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005026:	2300      	movs	r3, #0
 8005028:	e02c      	b.n	8005084 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005038:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005042:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	2319      	movs	r3, #25
 800504a:	2201      	movs	r2, #1
 800504c:	490f      	ldr	r1, [pc, #60]	; (800508c <HAL_I2C_IsDeviceReady+0x23c>)
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 faa6 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e012      	b.n	8005084 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	3301      	adds	r3, #1
 8005062:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	429a      	cmp	r2, r3
 800506a:	f4ff af3e 	bcc.w	8004eea <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2220      	movs	r2, #32
 8005072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e000      	b.n	8005084 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8005082:	2302      	movs	r3, #2
  }
}
 8005084:	4618      	mov	r0, r3
 8005086:	3720      	adds	r7, #32
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	00100002 	.word	0x00100002
 8005090:	ffff0000 	.word	0xffff0000

08005094 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b088      	sub	sp, #32
 8005098:	af02      	add	r7, sp, #8
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	607a      	str	r2, [r7, #4]
 800509e:	603b      	str	r3, [r7, #0]
 80050a0:	460b      	mov	r3, r1
 80050a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	2b08      	cmp	r3, #8
 80050ae:	d006      	beq.n	80050be <I2C_MasterRequestWrite+0x2a>
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d003      	beq.n	80050be <I2C_MasterRequestWrite+0x2a>
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050bc:	d108      	bne.n	80050d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	e00b      	b.n	80050e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d4:	2b12      	cmp	r3, #18
 80050d6:	d107      	bne.n	80050e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f000 fa53 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d001      	beq.n	8005104 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e035      	b.n	8005170 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800510c:	d108      	bne.n	8005120 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800510e:	897b      	ldrh	r3, [r7, #10]
 8005110:	b2db      	uxtb	r3, r3
 8005112:	461a      	mov	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800511c:	611a      	str	r2, [r3, #16]
 800511e:	e01b      	b.n	8005158 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005120:	897b      	ldrh	r3, [r7, #10]
 8005122:	11db      	asrs	r3, r3, #7
 8005124:	b2db      	uxtb	r3, r3
 8005126:	f003 0306 	and.w	r3, r3, #6
 800512a:	b2db      	uxtb	r3, r3
 800512c:	f063 030f 	orn	r3, r3, #15
 8005130:	b2da      	uxtb	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	490e      	ldr	r1, [pc, #56]	; (8005178 <I2C_MasterRequestWrite+0xe4>)
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f000 fa85 	bl	800564e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e010      	b.n	8005170 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800514e:	897b      	ldrh	r3, [r7, #10]
 8005150:	b2da      	uxtb	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	4907      	ldr	r1, [pc, #28]	; (800517c <I2C_MasterRequestWrite+0xe8>)
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f000 fa75 	bl	800564e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e000      	b.n	8005170 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3718      	adds	r7, #24
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	00010008 	.word	0x00010008
 800517c:	00010002 	.word	0x00010002

08005180 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b088      	sub	sp, #32
 8005184:	af02      	add	r7, sp, #8
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	607a      	str	r2, [r7, #4]
 800518a:	603b      	str	r3, [r7, #0]
 800518c:	460b      	mov	r3, r1
 800518e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005194:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051a4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d006      	beq.n	80051ba <I2C_MasterRequestRead+0x3a>
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d003      	beq.n	80051ba <I2C_MasterRequestRead+0x3a>
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051b8:	d108      	bne.n	80051cc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	e00b      	b.n	80051e4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d0:	2b11      	cmp	r3, #17
 80051d2:	d107      	bne.n	80051e4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	9300      	str	r3, [sp, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f000 f9d5 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d001      	beq.n	8005200 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e06d      	b.n	80052dc <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005208:	d108      	bne.n	800521c <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800520a:	897b      	ldrh	r3, [r7, #10]
 800520c:	b2db      	uxtb	r3, r3
 800520e:	f043 0301 	orr.w	r3, r3, #1
 8005212:	b2da      	uxtb	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	611a      	str	r2, [r3, #16]
 800521a:	e053      	b.n	80052c4 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800521c:	897b      	ldrh	r3, [r7, #10]
 800521e:	11db      	asrs	r3, r3, #7
 8005220:	b2db      	uxtb	r3, r3
 8005222:	f003 0306 	and.w	r3, r3, #6
 8005226:	b2db      	uxtb	r3, r3
 8005228:	f063 030f 	orn	r3, r3, #15
 800522c:	b2da      	uxtb	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	492a      	ldr	r1, [pc, #168]	; (80052e4 <I2C_MasterRequestRead+0x164>)
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f000 fa07 	bl	800564e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e048      	b.n	80052dc <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800524a:	897b      	ldrh	r3, [r7, #10]
 800524c:	b2da      	uxtb	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	4923      	ldr	r1, [pc, #140]	; (80052e8 <I2C_MasterRequestRead+0x168>)
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 f9f7 	bl	800564e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e038      	b.n	80052dc <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800526a:	2300      	movs	r3, #0
 800526c:	613b      	str	r3, [r7, #16]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	613b      	str	r3, [r7, #16]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	613b      	str	r3, [r7, #16]
 800527e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800528e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f000 f97f 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d001      	beq.n	80052ac <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e017      	b.n	80052dc <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80052ac:	897b      	ldrh	r3, [r7, #10]
 80052ae:	11db      	asrs	r3, r3, #7
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	f003 0306 	and.w	r3, r3, #6
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	f063 030e 	orn	r3, r3, #14
 80052bc:	b2da      	uxtb	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	4907      	ldr	r1, [pc, #28]	; (80052e8 <I2C_MasterRequestRead+0x168>)
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f000 f9bf 	bl	800564e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e000      	b.n	80052dc <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3718      	adds	r7, #24
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	00010008 	.word	0x00010008
 80052e8:	00010002 	.word	0x00010002

080052ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b088      	sub	sp, #32
 80052f0:	af02      	add	r7, sp, #8
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	4608      	mov	r0, r1
 80052f6:	4611      	mov	r1, r2
 80052f8:	461a      	mov	r2, r3
 80052fa:	4603      	mov	r3, r0
 80052fc:	817b      	strh	r3, [r7, #10]
 80052fe:	460b      	mov	r3, r1
 8005300:	813b      	strh	r3, [r7, #8]
 8005302:	4613      	mov	r3, r2
 8005304:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005314:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	2200      	movs	r2, #0
 800531e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 f93c 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e05f      	b.n	80053f2 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005332:	897b      	ldrh	r3, [r7, #10]
 8005334:	b2db      	uxtb	r3, r3
 8005336:	461a      	mov	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005340:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005344:	6a3a      	ldr	r2, [r7, #32]
 8005346:	492d      	ldr	r1, [pc, #180]	; (80053fc <I2C_RequestMemoryWrite+0x110>)
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 f980 	bl	800564e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e04c      	b.n	80053f2 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005358:	2300      	movs	r3, #0
 800535a:	617b      	str	r3, [r7, #20]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	617b      	str	r3, [r7, #20]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	617b      	str	r3, [r7, #20]
 800536c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800536e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005370:	6a39      	ldr	r1, [r7, #32]
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f000 f9ea 	bl	800574c <I2C_WaitOnTXEFlagUntilTimeout>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00d      	beq.n	800539a <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	2b04      	cmp	r3, #4
 8005384:	d107      	bne.n	8005396 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005394:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e02b      	b.n	80053f2 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800539a:	88fb      	ldrh	r3, [r7, #6]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d105      	bne.n	80053ac <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053a0:	893b      	ldrh	r3, [r7, #8]
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	611a      	str	r2, [r3, #16]
 80053aa:	e021      	b.n	80053f0 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053ac:	893b      	ldrh	r3, [r7, #8]
 80053ae:	0a1b      	lsrs	r3, r3, #8
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053bc:	6a39      	ldr	r1, [r7, #32]
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f000 f9c4 	bl	800574c <I2C_WaitOnTXEFlagUntilTimeout>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00d      	beq.n	80053e6 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	d107      	bne.n	80053e2 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e005      	b.n	80053f2 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053e6:	893b      	ldrh	r3, [r7, #8]
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3718      	adds	r7, #24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	00010002 	.word	0x00010002

08005400 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b088      	sub	sp, #32
 8005404:	af02      	add	r7, sp, #8
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	4608      	mov	r0, r1
 800540a:	4611      	mov	r1, r2
 800540c:	461a      	mov	r2, r3
 800540e:	4603      	mov	r3, r0
 8005410:	817b      	strh	r3, [r7, #10]
 8005412:	460b      	mov	r3, r1
 8005414:	813b      	strh	r3, [r7, #8]
 8005416:	4613      	mov	r3, r2
 8005418:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005428:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005438:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800543a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543c:	9300      	str	r3, [sp, #0]
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	2200      	movs	r2, #0
 8005442:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f000 f8aa 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e09e      	b.n	8005594 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005456:	897b      	ldrh	r3, [r7, #10]
 8005458:	b2db      	uxtb	r3, r3
 800545a:	461a      	mov	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005464:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005468:	6a3a      	ldr	r2, [r7, #32]
 800546a:	494c      	ldr	r1, [pc, #304]	; (800559c <I2C_RequestMemoryRead+0x19c>)
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f000 f8ee 	bl	800564e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e08b      	b.n	8005594 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800547c:	2300      	movs	r3, #0
 800547e:	617b      	str	r3, [r7, #20]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	617b      	str	r3, [r7, #20]
 8005490:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005494:	6a39      	ldr	r1, [r7, #32]
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f000 f958 	bl	800574c <I2C_WaitOnTXEFlagUntilTimeout>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00d      	beq.n	80054be <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	d107      	bne.n	80054ba <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e06a      	b.n	8005594 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054be:	88fb      	ldrh	r3, [r7, #6]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d105      	bne.n	80054d0 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054c4:	893b      	ldrh	r3, [r7, #8]
 80054c6:	b2da      	uxtb	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	611a      	str	r2, [r3, #16]
 80054ce:	e021      	b.n	8005514 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054d0:	893b      	ldrh	r3, [r7, #8]
 80054d2:	0a1b      	lsrs	r3, r3, #8
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	b2da      	uxtb	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e0:	6a39      	ldr	r1, [r7, #32]
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f000 f932 	bl	800574c <I2C_WaitOnTXEFlagUntilTimeout>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00d      	beq.n	800550a <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	d107      	bne.n	8005506 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005504:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e044      	b.n	8005594 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800550a:	893b      	ldrh	r3, [r7, #8]
 800550c:	b2da      	uxtb	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005516:	6a39      	ldr	r1, [r7, #32]
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 f917 	bl	800574c <I2C_WaitOnTXEFlagUntilTimeout>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00d      	beq.n	8005540 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005528:	2b04      	cmp	r3, #4
 800552a:	d107      	bne.n	800553c <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800553a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e029      	b.n	8005594 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800554e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	2200      	movs	r2, #0
 8005558:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 f81f 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d001      	beq.n	800556c <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e013      	b.n	8005594 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800556c:	897b      	ldrh	r3, [r7, #10]
 800556e:	b2db      	uxtb	r3, r3
 8005570:	f043 0301 	orr.w	r3, r3, #1
 8005574:	b2da      	uxtb	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800557c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557e:	6a3a      	ldr	r2, [r7, #32]
 8005580:	4906      	ldr	r1, [pc, #24]	; (800559c <I2C_RequestMemoryRead+0x19c>)
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 f863 	bl	800564e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e000      	b.n	8005594 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3718      	adds	r7, #24
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	00010002 	.word	0x00010002

080055a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	603b      	str	r3, [r7, #0]
 80055ac:	4613      	mov	r3, r2
 80055ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055b0:	e025      	b.n	80055fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b8:	d021      	beq.n	80055fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ba:	f7fd ffa9 	bl	8003510 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d302      	bcc.n	80055d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d116      	bne.n	80055fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2220      	movs	r2, #32
 80055da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	f043 0220 	orr.w	r2, r3, #32
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e023      	b.n	8005646 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	0c1b      	lsrs	r3, r3, #16
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b01      	cmp	r3, #1
 8005606:	d10d      	bne.n	8005624 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	43da      	mvns	r2, r3
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	4013      	ands	r3, r2
 8005614:	b29b      	uxth	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	bf0c      	ite	eq
 800561a:	2301      	moveq	r3, #1
 800561c:	2300      	movne	r3, #0
 800561e:	b2db      	uxtb	r3, r3
 8005620:	461a      	mov	r2, r3
 8005622:	e00c      	b.n	800563e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	43da      	mvns	r2, r3
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	4013      	ands	r3, r2
 8005630:	b29b      	uxth	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	bf0c      	ite	eq
 8005636:	2301      	moveq	r3, #1
 8005638:	2300      	movne	r3, #0
 800563a:	b2db      	uxtb	r3, r3
 800563c:	461a      	mov	r2, r3
 800563e:	79fb      	ldrb	r3, [r7, #7]
 8005640:	429a      	cmp	r2, r3
 8005642:	d0b6      	beq.n	80055b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b084      	sub	sp, #16
 8005652:	af00      	add	r7, sp, #0
 8005654:	60f8      	str	r0, [r7, #12]
 8005656:	60b9      	str	r1, [r7, #8]
 8005658:	607a      	str	r2, [r7, #4]
 800565a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800565c:	e051      	b.n	8005702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800566c:	d123      	bne.n	80056b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800567c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005686:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2220      	movs	r2, #32
 8005692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	f043 0204 	orr.w	r2, r3, #4
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e046      	b.n	8005744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056bc:	d021      	beq.n	8005702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056be:	f7fd ff27 	bl	8003510 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d302      	bcc.n	80056d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d116      	bne.n	8005702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2220      	movs	r2, #32
 80056de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ee:	f043 0220 	orr.w	r2, r3, #32
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e020      	b.n	8005744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	0c1b      	lsrs	r3, r3, #16
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b01      	cmp	r3, #1
 800570a:	d10c      	bne.n	8005726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	43da      	mvns	r2, r3
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	4013      	ands	r3, r2
 8005718:	b29b      	uxth	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	bf14      	ite	ne
 800571e:	2301      	movne	r3, #1
 8005720:	2300      	moveq	r3, #0
 8005722:	b2db      	uxtb	r3, r3
 8005724:	e00b      	b.n	800573e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	43da      	mvns	r2, r3
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	4013      	ands	r3, r2
 8005732:	b29b      	uxth	r3, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	bf14      	ite	ne
 8005738:	2301      	movne	r3, #1
 800573a:	2300      	moveq	r3, #0
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d18d      	bne.n	800565e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005758:	e02d      	b.n	80057b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f000 f8ce 	bl	80058fc <I2C_IsAcknowledgeFailed>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d001      	beq.n	800576a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e02d      	b.n	80057c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005770:	d021      	beq.n	80057b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005772:	f7fd fecd 	bl	8003510 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	429a      	cmp	r2, r3
 8005780:	d302      	bcc.n	8005788 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d116      	bne.n	80057b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2220      	movs	r2, #32
 8005792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	f043 0220 	orr.w	r2, r3, #32
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e007      	b.n	80057c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c0:	2b80      	cmp	r3, #128	; 0x80
 80057c2:	d1ca      	bne.n	800575a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b084      	sub	sp, #16
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	60f8      	str	r0, [r7, #12]
 80057d6:	60b9      	str	r1, [r7, #8]
 80057d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057da:	e02d      	b.n	8005838 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f000 f88d 	bl	80058fc <I2C_IsAcknowledgeFailed>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e02d      	b.n	8005848 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f2:	d021      	beq.n	8005838 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057f4:	f7fd fe8c 	bl	8003510 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	429a      	cmp	r2, r3
 8005802:	d302      	bcc.n	800580a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d116      	bne.n	8005838 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2220      	movs	r2, #32
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005824:	f043 0220 	orr.w	r2, r3, #32
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e007      	b.n	8005848 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	f003 0304 	and.w	r3, r3, #4
 8005842:	2b04      	cmp	r3, #4
 8005844:	d1ca      	bne.n	80057dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800585c:	e042      	b.n	80058e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	f003 0310 	and.w	r3, r3, #16
 8005868:	2b10      	cmp	r3, #16
 800586a:	d119      	bne.n	80058a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f06f 0210 	mvn.w	r2, #16
 8005874:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2220      	movs	r2, #32
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e029      	b.n	80058f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058a0:	f7fd fe36 	bl	8003510 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d302      	bcc.n	80058b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d116      	bne.n	80058e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2220      	movs	r2, #32
 80058c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d0:	f043 0220 	orr.w	r2, r3, #32
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e007      	b.n	80058f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ee:	2b40      	cmp	r3, #64	; 0x40
 80058f0:	d1b5      	bne.n	800585e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800590e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005912:	d11b      	bne.n	800594c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800591c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2220      	movs	r2, #32
 8005928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005938:	f043 0204 	orr.w	r2, r3, #4
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e000      	b.n	800594e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	370c      	adds	r7, #12
 8005952:	46bd      	mov	sp, r7
 8005954:	bc80      	pop	{r7}
 8005956:	4770      	bx	lr

08005958 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800595a:	b08b      	sub	sp, #44	; 0x2c
 800595c:	af06      	add	r7, sp, #24
 800595e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e0d3      	b.n	8005b12 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d106      	bne.n	8005984 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f005 ff5e 	bl	800b840 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2203      	movs	r2, #3
 8005988:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4618      	mov	r0, r3
 8005992:	f003 f8b2 	bl	8008afa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	603b      	str	r3, [r7, #0]
 800599c:	687e      	ldr	r6, [r7, #4]
 800599e:	466d      	mov	r5, sp
 80059a0:	f106 0410 	add.w	r4, r6, #16
 80059a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059a8:	6823      	ldr	r3, [r4, #0]
 80059aa:	602b      	str	r3, [r5, #0]
 80059ac:	1d33      	adds	r3, r6, #4
 80059ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059b0:	6838      	ldr	r0, [r7, #0]
 80059b2:	f003 f87b 	bl	8008aac <USB_CoreInit>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d005      	beq.n	80059c8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2202      	movs	r2, #2
 80059c0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e0a4      	b.n	8005b12 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2100      	movs	r1, #0
 80059ce:	4618      	mov	r0, r3
 80059d0:	f003 f8af 	bl	8008b32 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059d4:	2300      	movs	r3, #0
 80059d6:	73fb      	strb	r3, [r7, #15]
 80059d8:	e035      	b.n	8005a46 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80059da:	7bfb      	ldrb	r3, [r7, #15]
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	015b      	lsls	r3, r3, #5
 80059e0:	4413      	add	r3, r2
 80059e2:	3329      	adds	r3, #41	; 0x29
 80059e4:	2201      	movs	r2, #1
 80059e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	015b      	lsls	r3, r3, #5
 80059ee:	4413      	add	r3, r2
 80059f0:	3328      	adds	r3, #40	; 0x28
 80059f2:	7bfa      	ldrb	r2, [r7, #15]
 80059f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80059f6:	7bfb      	ldrb	r3, [r7, #15]
 80059f8:	7bfa      	ldrb	r2, [r7, #15]
 80059fa:	b291      	uxth	r1, r2
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	015b      	lsls	r3, r3, #5
 8005a00:	4413      	add	r3, r2
 8005a02:	3336      	adds	r3, #54	; 0x36
 8005a04:	460a      	mov	r2, r1
 8005a06:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005a08:	7bfb      	ldrb	r3, [r7, #15]
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	015b      	lsls	r3, r3, #5
 8005a0e:	4413      	add	r3, r2
 8005a10:	332b      	adds	r3, #43	; 0x2b
 8005a12:	2200      	movs	r2, #0
 8005a14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005a16:	7bfb      	ldrb	r3, [r7, #15]
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	015b      	lsls	r3, r3, #5
 8005a1c:	4413      	add	r3, r2
 8005a1e:	3338      	adds	r3, #56	; 0x38
 8005a20:	2200      	movs	r2, #0
 8005a22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005a24:	7bfb      	ldrb	r3, [r7, #15]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	015b      	lsls	r3, r3, #5
 8005a2a:	4413      	add	r3, r2
 8005a2c:	333c      	adds	r3, #60	; 0x3c
 8005a2e:	2200      	movs	r2, #0
 8005a30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005a32:	7bfb      	ldrb	r3, [r7, #15]
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	3302      	adds	r3, #2
 8005a38:	015b      	lsls	r3, r3, #5
 8005a3a:	4413      	add	r3, r2
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
 8005a42:	3301      	adds	r3, #1
 8005a44:	73fb      	strb	r3, [r7, #15]
 8005a46:	7bfa      	ldrb	r2, [r7, #15]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d3c4      	bcc.n	80059da <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a50:	2300      	movs	r3, #0
 8005a52:	73fb      	strb	r3, [r7, #15]
 8005a54:	e031      	b.n	8005aba <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005a56:	7bfb      	ldrb	r3, [r7, #15]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	015b      	lsls	r3, r3, #5
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f203 1329 	addw	r3, r3, #297	; 0x129
 8005a62:	2200      	movs	r2, #0
 8005a64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005a66:	7bfb      	ldrb	r3, [r7, #15]
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	015b      	lsls	r3, r3, #5
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005a72:	7bfa      	ldrb	r2, [r7, #15]
 8005a74:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005a76:	7bfb      	ldrb	r3, [r7, #15]
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	015b      	lsls	r3, r3, #5
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8005a82:	2200      	movs	r2, #0
 8005a84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005a86:	7bfb      	ldrb	r3, [r7, #15]
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	015b      	lsls	r3, r3, #5
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8005a92:	2200      	movs	r2, #0
 8005a94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005a96:	7bfb      	ldrb	r3, [r7, #15]
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	015b      	lsls	r3, r3, #5
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005aa6:	7bfb      	ldrb	r3, [r7, #15]
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	330a      	adds	r3, #10
 8005aac:	015b      	lsls	r3, r3, #5
 8005aae:	4413      	add	r3, r2
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ab4:	7bfb      	ldrb	r3, [r7, #15]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	73fb      	strb	r3, [r7, #15]
 8005aba:	7bfa      	ldrb	r2, [r7, #15]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d3c8      	bcc.n	8005a56 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	603b      	str	r3, [r7, #0]
 8005aca:	687e      	ldr	r6, [r7, #4]
 8005acc:	466d      	mov	r5, sp
 8005ace:	f106 0410 	add.w	r4, r6, #16
 8005ad2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ad4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ad6:	6823      	ldr	r3, [r4, #0]
 8005ad8:	602b      	str	r3, [r5, #0]
 8005ada:	1d33      	adds	r3, r6, #4
 8005adc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ade:	6838      	ldr	r0, [r7, #0]
 8005ae0:	f003 f833 	bl	8008b4a <USB_DevInit>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d005      	beq.n	8005af6 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2202      	movs	r2, #2
 8005aee:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e00d      	b.n	8005b12 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f004 f871 	bl	8009bf2 <USB_DevDisconnect>

  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b1a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b082      	sub	sp, #8
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d101      	bne.n	8005b30 <HAL_PCD_Start+0x16>
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	e016      	b.n	8005b5e <HAL_PCD_Start+0x44>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8005b38:	2101      	movs	r1, #1
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f006 f8e7 	bl	800bd0e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f004 f84a 	bl	8009bde <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f002 ffbc 	bl	8008acc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b082      	sub	sp, #8
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f004 f847 	bl	8009c06 <USB_ReadInterrupts>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b82:	d102      	bne.n	8005b8a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 faf3 	bl	8006170 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f004 f839 	bl	8009c06 <USB_ReadInterrupts>
 8005b94:	4603      	mov	r3, r0
 8005b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b9e:	d112      	bne.n	8005bc6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bb2:	b292      	uxth	r2, r2
 8005bb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f005 feb6 	bl	800b92a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 f8de 	bl	8005d82 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f004 f81b 	bl	8009c06 <USB_ReadInterrupts>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bda:	d10b      	bne.n	8005bf4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005bee:	b292      	uxth	r2, r2
 8005bf0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f004 f804 	bl	8009c06 <USB_ReadInterrupts>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c08:	d10b      	bne.n	8005c22 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c1c:	b292      	uxth	r2, r2
 8005c1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f003 ffed 	bl	8009c06 <USB_ReadInterrupts>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c36:	d126      	bne.n	8005c86 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f022 0204 	bic.w	r2, r2, #4
 8005c4a:	b292      	uxth	r2, r2
 8005c4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f022 0208 	bic.w	r2, r2, #8
 8005c62:	b292      	uxth	r2, r2
 8005c64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f005 fe97 	bl	800b99c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c80:	b292      	uxth	r2, r2
 8005c82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f003 ffbb 	bl	8009c06 <USB_ReadInterrupts>
 8005c90:	4603      	mov	r3, r0
 8005c92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c9a:	d13d      	bne.n	8005d18 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f042 0208 	orr.w	r2, r2, #8
 8005cae:	b292      	uxth	r2, r2
 8005cb0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cc6:	b292      	uxth	r2, r2
 8005cc8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f042 0204 	orr.w	r2, r2, #4
 8005cde:	b292      	uxth	r2, r2
 8005ce0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f003 ff8c 	bl	8009c06 <USB_ReadInterrupts>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cf8:	d10b      	bne.n	8005d12 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d0c:	b292      	uxth	r2, r2
 8005d0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f005 fe28 	bl	800b968 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f003 ff72 	bl	8009c06 <USB_ReadInterrupts>
 8005d22:	4603      	mov	r3, r0
 8005d24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d2c:	d10e      	bne.n	8005d4c <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005d40:	b292      	uxth	r2, r2
 8005d42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f005 fde1 	bl	800b90e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f003 ff58 	bl	8009c06 <USB_ReadInterrupts>
 8005d56:	4603      	mov	r3, r0
 8005d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d60:	d10b      	bne.n	8005d7a <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d74:	b292      	uxth	r2, r2
 8005d76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8005d7a:	bf00      	nop
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b082      	sub	sp, #8
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d101      	bne.n	8005d9c <HAL_PCD_SetAddress+0x1a>
 8005d98:	2302      	movs	r3, #2
 8005d9a:	e013      	b.n	8005dc4 <HAL_PCD_SetAddress+0x42>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	78fa      	ldrb	r2, [r7, #3]
 8005da8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	78fa      	ldrb	r2, [r7, #3]
 8005db2:	4611      	mov	r1, r2
 8005db4:	4618      	mov	r0, r3
 8005db6:	f003 feff 	bl	8009bb8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3708      	adds	r7, #8
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	4608      	mov	r0, r1
 8005dd6:	4611      	mov	r1, r2
 8005dd8:	461a      	mov	r2, r3
 8005dda:	4603      	mov	r3, r0
 8005ddc:	70fb      	strb	r3, [r7, #3]
 8005dde:	460b      	mov	r3, r1
 8005de0:	803b      	strh	r3, [r7, #0]
 8005de2:	4613      	mov	r3, r2
 8005de4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005de6:	2300      	movs	r3, #0
 8005de8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005dea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	da0b      	bge.n	8005e0a <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005df2:	78fb      	ldrb	r3, [r7, #3]
 8005df4:	f003 0307 	and.w	r3, r3, #7
 8005df8:	015b      	lsls	r3, r3, #5
 8005dfa:	3328      	adds	r3, #40	; 0x28
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	4413      	add	r3, r2
 8005e00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2201      	movs	r2, #1
 8005e06:	705a      	strb	r2, [r3, #1]
 8005e08:	e00b      	b.n	8005e22 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e0a:	78fb      	ldrb	r3, [r7, #3]
 8005e0c:	f003 0307 	and.w	r3, r3, #7
 8005e10:	015b      	lsls	r3, r3, #5
 8005e12:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	4413      	add	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005e22:	78fb      	ldrb	r3, [r7, #3]
 8005e24:	f003 0307 	and.w	r3, r3, #7
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005e2e:	883a      	ldrh	r2, [r7, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	78ba      	ldrb	r2, [r7, #2]
 8005e38:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	785b      	ldrb	r3, [r3, #1]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d004      	beq.n	8005e4c <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005e4c:	78bb      	ldrb	r3, [r7, #2]
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d102      	bne.n	8005e58 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d101      	bne.n	8005e66 <HAL_PCD_EP_Open+0x9a>
 8005e62:	2302      	movs	r3, #2
 8005e64:	e00e      	b.n	8005e84 <HAL_PCD_EP_Open+0xb8>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68f9      	ldr	r1, [r7, #12]
 8005e74:	4618      	mov	r0, r3
 8005e76:	f002 fe8d 	bl	8008b94 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8005e82:	7afb      	ldrb	r3, [r7, #11]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	460b      	mov	r3, r1
 8005e96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005e98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	da0b      	bge.n	8005eb8 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ea0:	78fb      	ldrb	r3, [r7, #3]
 8005ea2:	f003 0307 	and.w	r3, r3, #7
 8005ea6:	015b      	lsls	r3, r3, #5
 8005ea8:	3328      	adds	r3, #40	; 0x28
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	4413      	add	r3, r2
 8005eae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	705a      	strb	r2, [r3, #1]
 8005eb6:	e00b      	b.n	8005ed0 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005eb8:	78fb      	ldrb	r3, [r7, #3]
 8005eba:	f003 0307 	and.w	r3, r3, #7
 8005ebe:	015b      	lsls	r3, r3, #5
 8005ec0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005ed0:	78fb      	ldrb	r3, [r7, #3]
 8005ed2:	f003 0307 	and.w	r3, r3, #7
 8005ed6:	b2da      	uxtb	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d101      	bne.n	8005eea <HAL_PCD_EP_Close+0x5e>
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	e00e      	b.n	8005f08 <HAL_PCD_EP_Close+0x7c>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68f9      	ldr	r1, [r7, #12]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f003 f939 	bl	8009170 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	607a      	str	r2, [r7, #4]
 8005f1a:	603b      	str	r3, [r7, #0]
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f20:	7afb      	ldrb	r3, [r7, #11]
 8005f22:	f003 0307 	and.w	r3, r3, #7
 8005f26:	015b      	lsls	r3, r3, #5
 8005f28:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	4413      	add	r3, r2
 8005f30:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	683a      	ldr	r2, [r7, #0]
 8005f3c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	2200      	movs	r2, #0
 8005f42:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	2200      	movs	r2, #0
 8005f48:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f4a:	7afb      	ldrb	r3, [r7, #11]
 8005f4c:	f003 0307 	and.w	r3, r3, #7
 8005f50:	b2da      	uxtb	r2, r3
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005f56:	7afb      	ldrb	r3, [r7, #11]
 8005f58:	f003 0307 	and.w	r3, r3, #7
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d106      	bne.n	8005f6e <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6979      	ldr	r1, [r7, #20]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f003 fa98 	bl	800949c <USB_EPStartXfer>
 8005f6c:	e005      	b.n	8005f7a <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	6979      	ldr	r1, [r7, #20]
 8005f74:	4618      	mov	r0, r3
 8005f76:	f003 fa91 	bl	800949c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3718      	adds	r7, #24
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005f90:	78fb      	ldrb	r3, [r7, #3]
 8005f92:	f003 0307 	and.w	r3, r3, #7
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	330a      	adds	r3, #10
 8005f9a:	015b      	lsls	r3, r3, #5
 8005f9c:	4413      	add	r3, r2
 8005f9e:	3304      	adds	r3, #4
 8005fa0:	681b      	ldr	r3, [r3, #0]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bc80      	pop	{r7}
 8005faa:	4770      	bx	lr

08005fac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	607a      	str	r2, [r7, #4]
 8005fb6:	603b      	str	r3, [r7, #0]
 8005fb8:	460b      	mov	r3, r1
 8005fba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fbc:	7afb      	ldrb	r3, [r7, #11]
 8005fbe:	f003 0307 	and.w	r3, r3, #7
 8005fc2:	015b      	lsls	r3, r3, #5
 8005fc4:	3328      	adds	r3, #40	; 0x28
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	4413      	add	r3, r2
 8005fca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005fe4:	7afb      	ldrb	r3, [r7, #11]
 8005fe6:	f003 0307 	and.w	r3, r3, #7
 8005fea:	b2da      	uxtb	r2, r3
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ff0:	7afb      	ldrb	r3, [r7, #11]
 8005ff2:	f003 0307 	and.w	r3, r3, #7
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d106      	bne.n	8006008 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	6979      	ldr	r1, [r7, #20]
 8006000:	4618      	mov	r0, r3
 8006002:	f003 fa4b 	bl	800949c <USB_EPStartXfer>
 8006006:	e005      	b.n	8006014 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6979      	ldr	r1, [r7, #20]
 800600e:	4618      	mov	r0, r3
 8006010:	f003 fa44 	bl	800949c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3718      	adds	r7, #24
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b084      	sub	sp, #16
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	460b      	mov	r3, r1
 8006028:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800602a:	78fb      	ldrb	r3, [r7, #3]
 800602c:	f003 0207 	and.w	r2, r3, #7
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	429a      	cmp	r2, r3
 8006036:	d901      	bls.n	800603c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e046      	b.n	80060ca <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800603c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006040:	2b00      	cmp	r3, #0
 8006042:	da0b      	bge.n	800605c <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006044:	78fb      	ldrb	r3, [r7, #3]
 8006046:	f003 0307 	and.w	r3, r3, #7
 800604a:	015b      	lsls	r3, r3, #5
 800604c:	3328      	adds	r3, #40	; 0x28
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	4413      	add	r3, r2
 8006052:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2201      	movs	r2, #1
 8006058:	705a      	strb	r2, [r3, #1]
 800605a:	e009      	b.n	8006070 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800605c:	78fb      	ldrb	r3, [r7, #3]
 800605e:	015b      	lsls	r3, r3, #5
 8006060:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	4413      	add	r3, r2
 8006068:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2201      	movs	r2, #1
 8006074:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006076:	78fb      	ldrb	r3, [r7, #3]
 8006078:	f003 0307 	and.w	r3, r3, #7
 800607c:	b2da      	uxtb	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8006088:	2b01      	cmp	r3, #1
 800608a:	d101      	bne.n	8006090 <HAL_PCD_EP_SetStall+0x72>
 800608c:	2302      	movs	r3, #2
 800608e:	e01c      	b.n	80060ca <HAL_PCD_EP_SetStall+0xac>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68f9      	ldr	r1, [r7, #12]
 800609e:	4618      	mov	r0, r3
 80060a0:	f003 fcb4 	bl	8009a0c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80060a4:	78fb      	ldrb	r3, [r7, #3]
 80060a6:	f003 0307 	and.w	r3, r3, #7
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d108      	bne.n	80060c0 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80060b8:	4619      	mov	r1, r3
 80060ba:	4610      	mov	r0, r2
 80060bc:	f003 fdb2 	bl	8009c24 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b084      	sub	sp, #16
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
 80060da:	460b      	mov	r3, r1
 80060dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80060de:	78fb      	ldrb	r3, [r7, #3]
 80060e0:	f003 020f 	and.w	r2, r3, #15
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d901      	bls.n	80060f0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e03a      	b.n	8006166 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80060f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	da0b      	bge.n	8006110 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060f8:	78fb      	ldrb	r3, [r7, #3]
 80060fa:	f003 0307 	and.w	r3, r3, #7
 80060fe:	015b      	lsls	r3, r3, #5
 8006100:	3328      	adds	r3, #40	; 0x28
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	4413      	add	r3, r2
 8006106:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2201      	movs	r2, #1
 800610c:	705a      	strb	r2, [r3, #1]
 800610e:	e00b      	b.n	8006128 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006110:	78fb      	ldrb	r3, [r7, #3]
 8006112:	f003 0307 	and.w	r3, r3, #7
 8006116:	015b      	lsls	r3, r3, #5
 8006118:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	4413      	add	r3, r2
 8006120:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800612e:	78fb      	ldrb	r3, [r7, #3]
 8006130:	f003 0307 	and.w	r3, r3, #7
 8006134:	b2da      	uxtb	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8006140:	2b01      	cmp	r3, #1
 8006142:	d101      	bne.n	8006148 <HAL_PCD_EP_ClrStall+0x76>
 8006144:	2302      	movs	r3, #2
 8006146:	e00e      	b.n	8006166 <HAL_PCD_EP_ClrStall+0x94>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68f9      	ldr	r1, [r7, #12]
 8006156:	4618      	mov	r0, r3
 8006158:	f003 fc9a 	bl	8009a90 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
	...

08006170 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006170:	b590      	push	{r4, r7, lr}
 8006172:	b089      	sub	sp, #36	; 0x24
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006178:	e282      	b.n	8006680 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006182:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006184:	8afb      	ldrh	r3, [r7, #22]
 8006186:	b2db      	uxtb	r3, r3
 8006188:	f003 030f 	and.w	r3, r3, #15
 800618c:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 800618e:	7d7b      	ldrb	r3, [r7, #21]
 8006190:	2b00      	cmp	r3, #0
 8006192:	f040 8142 	bne.w	800641a <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006196:	8afb      	ldrh	r3, [r7, #22]
 8006198:	f003 0310 	and.w	r3, r3, #16
 800619c:	2b00      	cmp	r3, #0
 800619e:	d151      	bne.n	8006244 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	881b      	ldrh	r3, [r3, #0]
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80061ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b0:	b29c      	uxth	r4, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80061ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061be:	b29b      	uxth	r3, r3
 80061c0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	3328      	adds	r3, #40	; 0x28
 80061c6:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	461a      	mov	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	4413      	add	r3, r2
 80061dc:	3302      	adds	r3, #2
 80061de:	005b      	lsls	r3, r3, #1
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	6812      	ldr	r2, [r2, #0]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061ea:	881b      	ldrh	r3, [r3, #0]
 80061ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	695a      	ldr	r2, [r3, #20]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	69db      	ldr	r3, [r3, #28]
 80061fc:	441a      	add	r2, r3
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006202:	2100      	movs	r1, #0
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f005 fb6b 	bl	800b8e0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006210:	b2db      	uxtb	r3, r3
 8006212:	2b00      	cmp	r3, #0
 8006214:	f000 8234 	beq.w	8006680 <PCD_EP_ISR_Handler+0x510>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	2b00      	cmp	r3, #0
 800621e:	f040 822f 	bne.w	8006680 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006228:	b2db      	uxtb	r3, r3
 800622a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800622e:	b2da      	uxtb	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	b292      	uxth	r2, r2
 8006236:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006242:	e21d      	b.n	8006680 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800624a:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	881b      	ldrh	r3, [r3, #0]
 8006252:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006254:	8a7b      	ldrh	r3, [r7, #18]
 8006256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800625a:	2b00      	cmp	r3, #0
 800625c:	d033      	beq.n	80062c6 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006266:	b29b      	uxth	r3, r3
 8006268:	461a      	mov	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	00db      	lsls	r3, r3, #3
 8006270:	4413      	add	r3, r2
 8006272:	3306      	adds	r3, #6
 8006274:	005b      	lsls	r3, r3, #1
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	6812      	ldr	r2, [r2, #0]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6818      	ldr	r0, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800629c:	b29b      	uxth	r3, r3
 800629e:	f003 fd10 	bl	8009cc2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	881b      	ldrh	r3, [r3, #0]
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80062ae:	4013      	ands	r3, r2
 80062b0:	b29c      	uxth	r4, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80062ba:	b292      	uxth	r2, r2
 80062bc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f005 fae4 	bl	800b88c <HAL_PCD_SetupStageCallback>
 80062c4:	e1dc      	b.n	8006680 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80062c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f280 81d8 	bge.w	8006680 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	881b      	ldrh	r3, [r3, #0]
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80062dc:	4013      	ands	r3, r2
 80062de:	b29c      	uxth	r4, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80062e8:	b292      	uxth	r2, r2
 80062ea:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	461a      	mov	r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	00db      	lsls	r3, r3, #3
 80062fe:	4413      	add	r3, r2
 8006300:	3306      	adds	r3, #6
 8006302:	005b      	lsls	r3, r3, #1
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	6812      	ldr	r2, [r2, #0]
 8006308:	4413      	add	r3, r2
 800630a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800630e:	881b      	ldrh	r3, [r3, #0]
 8006310:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	69db      	ldr	r3, [r3, #28]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d019      	beq.n	8006354 <PCD_EP_ISR_Handler+0x1e4>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d015      	beq.n	8006354 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6818      	ldr	r0, [r3, #0]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6959      	ldr	r1, [r3, #20]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006338:	b29b      	uxth	r3, r3
 800633a:	f003 fcc2 	bl	8009cc2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	695a      	ldr	r2, [r3, #20]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	441a      	add	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800634c:	2100      	movs	r1, #0
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f005 faae 	bl	800b8b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	461c      	mov	r4, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006362:	b29b      	uxth	r3, r3
 8006364:	441c      	add	r4, r3
 8006366:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 800636a:	461c      	mov	r4, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10e      	bne.n	8006392 <PCD_EP_ISR_Handler+0x222>
 8006374:	8823      	ldrh	r3, [r4, #0]
 8006376:	b29b      	uxth	r3, r3
 8006378:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800637c:	b29b      	uxth	r3, r3
 800637e:	8023      	strh	r3, [r4, #0]
 8006380:	8823      	ldrh	r3, [r4, #0]
 8006382:	b29b      	uxth	r3, r3
 8006384:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006388:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800638c:	b29b      	uxth	r3, r3
 800638e:	8023      	strh	r3, [r4, #0]
 8006390:	e02d      	b.n	80063ee <PCD_EP_ISR_Handler+0x27e>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	2b3e      	cmp	r3, #62	; 0x3e
 8006398:	d812      	bhi.n	80063c0 <PCD_EP_ISR_Handler+0x250>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	085b      	lsrs	r3, r3, #1
 80063a0:	61bb      	str	r3, [r7, #24]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d002      	beq.n	80063b4 <PCD_EP_ISR_Handler+0x244>
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	3301      	adds	r3, #1
 80063b2:	61bb      	str	r3, [r7, #24]
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	029b      	lsls	r3, r3, #10
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	8023      	strh	r3, [r4, #0]
 80063be:	e016      	b.n	80063ee <PCD_EP_ISR_Handler+0x27e>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	095b      	lsrs	r3, r3, #5
 80063c6:	61bb      	str	r3, [r7, #24]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	f003 031f 	and.w	r3, r3, #31
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d102      	bne.n	80063da <PCD_EP_ISR_Handler+0x26a>
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	3b01      	subs	r3, #1
 80063d8:	61bb      	str	r3, [r7, #24]
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	b29b      	uxth	r3, r3
 80063de:	029b      	lsls	r3, r3, #10
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	881b      	ldrh	r3, [r3, #0]
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063fe:	b29c      	uxth	r4, r3
 8006400:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006404:	b29c      	uxth	r4, r3
 8006406:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800640a:	b29c      	uxth	r4, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	4ba2      	ldr	r3, [pc, #648]	; (800669c <PCD_EP_ISR_Handler+0x52c>)
 8006412:	4323      	orrs	r3, r4
 8006414:	b29b      	uxth	r3, r3
 8006416:	8013      	strh	r3, [r2, #0]
 8006418:	e132      	b.n	8006680 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	461a      	mov	r2, r3
 8006420:	7d7b      	ldrb	r3, [r7, #21]
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	4413      	add	r3, r2
 8006426:	881b      	ldrh	r3, [r3, #0]
 8006428:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800642a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800642e:	2b00      	cmp	r3, #0
 8006430:	f280 80d1 	bge.w	80065d6 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	461a      	mov	r2, r3
 800643a:	7d7b      	ldrb	r3, [r7, #21]
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4413      	add	r3, r2
 8006440:	881b      	ldrh	r3, [r3, #0]
 8006442:	b29a      	uxth	r2, r3
 8006444:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006448:	4013      	ands	r3, r2
 800644a:	b29c      	uxth	r4, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	461a      	mov	r2, r3
 8006452:	7d7b      	ldrb	r3, [r7, #21]
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	4413      	add	r3, r2
 8006458:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800645c:	b292      	uxth	r2, r2
 800645e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006460:	7d7b      	ldrb	r3, [r7, #21]
 8006462:	015b      	lsls	r3, r3, #5
 8006464:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	4413      	add	r3, r2
 800646c:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	7b1b      	ldrb	r3, [r3, #12]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d121      	bne.n	80064ba <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800647e:	b29b      	uxth	r3, r3
 8006480:	461a      	mov	r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	00db      	lsls	r3, r3, #3
 8006488:	4413      	add	r3, r2
 800648a:	3306      	adds	r3, #6
 800648c:	005b      	lsls	r3, r3, #1
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	6812      	ldr	r2, [r2, #0]
 8006492:	4413      	add	r3, r2
 8006494:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006498:	881b      	ldrh	r3, [r3, #0]
 800649a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800649e:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80064a0:	8bfb      	ldrh	r3, [r7, #30]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d072      	beq.n	800658c <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6818      	ldr	r0, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6959      	ldr	r1, [r3, #20]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	88da      	ldrh	r2, [r3, #6]
 80064b2:	8bfb      	ldrh	r3, [r7, #30]
 80064b4:	f003 fc05 	bl	8009cc2 <USB_ReadPMA>
 80064b8:	e068      	b.n	800658c <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	461a      	mov	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	881b      	ldrh	r3, [r3, #0]
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d021      	beq.n	8006518 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064dc:	b29b      	uxth	r3, r3
 80064de:	461a      	mov	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	00db      	lsls	r3, r3, #3
 80064e6:	4413      	add	r3, r2
 80064e8:	3302      	adds	r3, #2
 80064ea:	005b      	lsls	r3, r3, #1
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	6812      	ldr	r2, [r2, #0]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064f6:	881b      	ldrh	r3, [r3, #0]
 80064f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064fc:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80064fe:	8bfb      	ldrh	r3, [r7, #30]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d02a      	beq.n	800655a <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6818      	ldr	r0, [r3, #0]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6959      	ldr	r1, [r3, #20]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	891a      	ldrh	r2, [r3, #8]
 8006510:	8bfb      	ldrh	r3, [r7, #30]
 8006512:	f003 fbd6 	bl	8009cc2 <USB_ReadPMA>
 8006516:	e020      	b.n	800655a <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006520:	b29b      	uxth	r3, r3
 8006522:	461a      	mov	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	00db      	lsls	r3, r3, #3
 800652a:	4413      	add	r3, r2
 800652c:	3306      	adds	r3, #6
 800652e:	005b      	lsls	r3, r3, #1
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	6812      	ldr	r2, [r2, #0]
 8006534:	4413      	add	r3, r2
 8006536:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800653a:	881b      	ldrh	r3, [r3, #0]
 800653c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006540:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8006542:	8bfb      	ldrh	r3, [r7, #30]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d008      	beq.n	800655a <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6818      	ldr	r0, [r3, #0]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6959      	ldr	r1, [r3, #20]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	895a      	ldrh	r2, [r3, #10]
 8006554:	8bfb      	ldrh	r3, [r7, #30]
 8006556:	f003 fbb4 	bl	8009cc2 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	461a      	mov	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	4413      	add	r3, r2
 8006568:	881b      	ldrh	r3, [r3, #0]
 800656a:	b29b      	uxth	r3, r3
 800656c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006574:	b29c      	uxth	r4, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	461a      	mov	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	441a      	add	r2, r3
 8006584:	4b46      	ldr	r3, [pc, #280]	; (80066a0 <PCD_EP_ISR_Handler+0x530>)
 8006586:	4323      	orrs	r3, r4
 8006588:	b29b      	uxth	r3, r3
 800658a:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	69da      	ldr	r2, [r3, #28]
 8006590:	8bfb      	ldrh	r3, [r7, #30]
 8006592:	441a      	add	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	695a      	ldr	r2, [r3, #20]
 800659c:	8bfb      	ldrh	r3, [r7, #30]
 800659e:	441a      	add	r2, r3
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d004      	beq.n	80065b6 <PCD_EP_ISR_Handler+0x446>
 80065ac:	8bfa      	ldrh	r2, [r7, #30]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d206      	bcs.n	80065c4 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	4619      	mov	r1, r3
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f005 f977 	bl	800b8b0 <HAL_PCD_DataOutStageCallback>
 80065c2:	e008      	b.n	80065d6 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	7819      	ldrb	r1, [r3, #0]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	695a      	ldr	r2, [r3, #20]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	699b      	ldr	r3, [r3, #24]
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7ff fc9d 	bl	8005f10 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80065d6:	8a7b      	ldrh	r3, [r7, #18]
 80065d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d04f      	beq.n	8006680 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 80065e0:	7d7b      	ldrb	r3, [r7, #21]
 80065e2:	015b      	lsls	r3, r3, #5
 80065e4:	3328      	adds	r3, #40	; 0x28
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	4413      	add	r3, r2
 80065ea:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	461a      	mov	r2, r3
 80065f2:	7d7b      	ldrb	r3, [r7, #21]
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4413      	add	r3, r2
 80065f8:	881b      	ldrh	r3, [r3, #0]
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006604:	b29c      	uxth	r4, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	461a      	mov	r2, r3
 800660c:	7d7b      	ldrb	r3, [r7, #21]
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	441a      	add	r2, r3
 8006612:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8006616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800661a:	b29b      	uxth	r3, r3
 800661c:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006626:	b29b      	uxth	r3, r3
 8006628:	461a      	mov	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	00db      	lsls	r3, r3, #3
 8006630:	4413      	add	r3, r2
 8006632:	3302      	adds	r3, #2
 8006634:	005b      	lsls	r3, r3, #1
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	6812      	ldr	r2, [r2, #0]
 800663a:	4413      	add	r3, r2
 800663c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006640:	881b      	ldrh	r3, [r3, #0]
 8006642:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	695a      	ldr	r2, [r3, #20]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	441a      	add	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d106      	bne.n	800666e <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	4619      	mov	r1, r3
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f005 f93a 	bl	800b8e0 <HAL_PCD_DataInStageCallback>
 800666c:	e008      	b.n	8006680 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	7819      	ldrb	r1, [r3, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	695a      	ldr	r2, [r3, #20]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f7ff fc96 	bl	8005fac <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006688:	b29b      	uxth	r3, r3
 800668a:	b21b      	sxth	r3, r3
 800668c:	2b00      	cmp	r3, #0
 800668e:	f6ff ad74 	blt.w	800617a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3724      	adds	r7, #36	; 0x24
 8006698:	46bd      	mov	sp, r7
 800669a:	bd90      	pop	{r4, r7, pc}
 800669c:	ffff8080 	.word	0xffff8080
 80066a0:	ffff80c0 	.word	0xffff80c0

080066a4 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	607b      	str	r3, [r7, #4]
 80066ae:	460b      	mov	r3, r1
 80066b0:	817b      	strh	r3, [r7, #10]
 80066b2:	4613      	mov	r3, r2
 80066b4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80066b6:	897b      	ldrh	r3, [r7, #10]
 80066b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066bc:	b29b      	uxth	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d008      	beq.n	80066d4 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066c2:	897b      	ldrh	r3, [r7, #10]
 80066c4:	f003 0307 	and.w	r3, r3, #7
 80066c8:	015b      	lsls	r3, r3, #5
 80066ca:	3328      	adds	r3, #40	; 0x28
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	4413      	add	r3, r2
 80066d0:	617b      	str	r3, [r7, #20]
 80066d2:	e006      	b.n	80066e2 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80066d4:	897b      	ldrh	r3, [r7, #10]
 80066d6:	015b      	lsls	r3, r3, #5
 80066d8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	4413      	add	r3, r2
 80066e0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80066e2:	893b      	ldrh	r3, [r7, #8]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d107      	bne.n	80066f8 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	2200      	movs	r2, #0
 80066ec:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	80da      	strh	r2, [r3, #6]
 80066f6:	e00b      	b.n	8006710 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	2201      	movs	r2, #1
 80066fc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	b29a      	uxth	r2, r3
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	0c1b      	lsrs	r3, r3, #16
 800670a:	b29a      	uxth	r2, r3
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	371c      	adds	r7, #28
 8006716:	46bd      	mov	sp, r7
 8006718:	bc80      	pop	{r7}
 800671a:	4770      	bx	lr

0800671c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b086      	sub	sp, #24
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d101      	bne.n	800672e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e26c      	b.n	8006c08 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	2b00      	cmp	r3, #0
 8006738:	f000 8087 	beq.w	800684a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800673c:	4b92      	ldr	r3, [pc, #584]	; (8006988 <HAL_RCC_OscConfig+0x26c>)
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f003 030c 	and.w	r3, r3, #12
 8006744:	2b04      	cmp	r3, #4
 8006746:	d00c      	beq.n	8006762 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006748:	4b8f      	ldr	r3, [pc, #572]	; (8006988 <HAL_RCC_OscConfig+0x26c>)
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	f003 030c 	and.w	r3, r3, #12
 8006750:	2b08      	cmp	r3, #8
 8006752:	d112      	bne.n	800677a <HAL_RCC_OscConfig+0x5e>
 8006754:	4b8c      	ldr	r3, [pc, #560]	; (8006988 <HAL_RCC_OscConfig+0x26c>)
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800675c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006760:	d10b      	bne.n	800677a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006762:	4b89      	ldr	r3, [pc, #548]	; (8006988 <HAL_RCC_OscConfig+0x26c>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d06c      	beq.n	8006848 <HAL_RCC_OscConfig+0x12c>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d168      	bne.n	8006848 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e246      	b.n	8006c08 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006782:	d106      	bne.n	8006792 <HAL_RCC_OscConfig+0x76>
 8006784:	4b80      	ldr	r3, [pc, #512]	; (8006988 <HAL_RCC_OscConfig+0x26c>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a7f      	ldr	r2, [pc, #508]	; (8006988 <HAL_RCC_OscConfig+0x26c>)
 800678a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800678e:	6013      	str	r3, [r2, #0]
 8006790:	e02e      	b.n	80067f0 <HAL_RCC_OscConfig+0xd4>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10c      	bne.n	80067b4 <HAL_RCC_OscConfig+0x98>
 800679a:	4b7b      	ldr	r3, [pc, #492]	; (8006988 <HAL_RCC_OscConfig+0x26c>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a7a      	ldr	r2, [pc, #488]	; (8006988 <HAL_RCC_OscConfig+0x26c>)
 80067a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067a4:	6013      	str	r3, [r2, #0]
 80067a6:	4b78      	ldr	r3, [pc, #480]	; (8006988 <HAL_RCC_OscConfig+0x26c>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a77      	ldr	r2, [pc, #476]	; (8006988 <HAL_RCC_OscConfig+0x26c>)
 80067ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067b0:	6013      	str	r3, [r2, #0]
 80067b2:	e01d      	b.n	80067f0 <HAL_RCC_OscConfig+0xd4>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067bc:	d10c      	bne.n	80067d8 <HAL_RCC_OscConfig+0xbc>
 80067be:	4b72      	ldr	r3, [pc, #456]	; (8006988 <HAL_RCC_OscConfig+0x26c>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a71      	ldr	r2, [pc, #452]	; (8006988 <HAL_RCC_OscConfig+0x26c>)
 80067c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067c8:	6013      	str	r3, [r2, #0]
 80067ca:	4b6f      	ldr	r3, [pc, #444]	; (8006988 <HAL_RCC_OscConfig+0x26c>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a6e      	ldr	r2, [pc, #440]	; (8006988 <HAL_RCC_OscConfig+0x26c>)
 80067d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067d4:	6013      	str	r3, [r2, #0]
 80067d6:	e00b      	b.n	80067f0 <HAL_RCC_OscConfig+0xd4>
 80067d8:	4b6b      	ldr	r3, [pc, #428]	; (8006988 <HAL_RCC_OscConfig+0x26c>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a6a      	ldr	r2, [pc, #424]	; (8006988 <HAL_RCC_OscConfig+0x26c>)
 80067de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067e2:	6013      	str	r3, [r2, #0]
 80067e4:	4b68      	ldr	r3, [pc, #416]	; (8006988 <HAL_RCC_OscConfig+0x26c>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a67      	ldr	r2, [pc, #412]	; (8006988 <HAL_RCC_OscConfig+0x26c>)
 80067ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d013      	beq.n	8006820 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067f8:	f7fc fe8a 	bl	8003510 <HAL_GetTick>
 80067fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067fe:	e008      	b.n	8006812 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006800:	f7fc fe86 	bl	8003510 <HAL_GetTick>
 8006804:	4602      	mov	r2, r0
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	2b64      	cmp	r3, #100	; 0x64
 800680c:	d901      	bls.n	8006812 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e1fa      	b.n	8006c08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006812:	4b5d      	ldr	r3, [pc, #372]	; (8006988 <HAL_RCC_OscConfig+0x26c>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d0f0      	beq.n	8006800 <HAL_RCC_OscConfig+0xe4>
 800681e:	e014      	b.n	800684a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006820:	f7fc fe76 	bl	8003510 <HAL_GetTick>
 8006824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006826:	e008      	b.n	800683a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006828:	f7fc fe72 	bl	8003510 <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	2b64      	cmp	r3, #100	; 0x64
 8006834:	d901      	bls.n	800683a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e1e6      	b.n	8006c08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800683a:	4b53      	ldr	r3, [pc, #332]	; (8006988 <HAL_RCC_OscConfig+0x26c>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1f0      	bne.n	8006828 <HAL_RCC_OscConfig+0x10c>
 8006846:	e000      	b.n	800684a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	2b00      	cmp	r3, #0
 8006854:	d063      	beq.n	800691e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006856:	4b4c      	ldr	r3, [pc, #304]	; (8006988 <HAL_RCC_OscConfig+0x26c>)
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f003 030c 	and.w	r3, r3, #12
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00b      	beq.n	800687a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006862:	4b49      	ldr	r3, [pc, #292]	; (8006988 <HAL_RCC_OscConfig+0x26c>)
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	f003 030c 	and.w	r3, r3, #12
 800686a:	2b08      	cmp	r3, #8
 800686c:	d11c      	bne.n	80068a8 <HAL_RCC_OscConfig+0x18c>
 800686e:	4b46      	ldr	r3, [pc, #280]	; (8006988 <HAL_RCC_OscConfig+0x26c>)
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d116      	bne.n	80068a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800687a:	4b43      	ldr	r3, [pc, #268]	; (8006988 <HAL_RCC_OscConfig+0x26c>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0302 	and.w	r3, r3, #2
 8006882:	2b00      	cmp	r3, #0
 8006884:	d005      	beq.n	8006892 <HAL_RCC_OscConfig+0x176>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d001      	beq.n	8006892 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e1ba      	b.n	8006c08 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006892:	4b3d      	ldr	r3, [pc, #244]	; (8006988 <HAL_RCC_OscConfig+0x26c>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	00db      	lsls	r3, r3, #3
 80068a0:	4939      	ldr	r1, [pc, #228]	; (8006988 <HAL_RCC_OscConfig+0x26c>)
 80068a2:	4313      	orrs	r3, r2
 80068a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068a6:	e03a      	b.n	800691e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d020      	beq.n	80068f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068b0:	4b36      	ldr	r3, [pc, #216]	; (800698c <HAL_RCC_OscConfig+0x270>)
 80068b2:	2201      	movs	r2, #1
 80068b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068b6:	f7fc fe2b 	bl	8003510 <HAL_GetTick>
 80068ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068bc:	e008      	b.n	80068d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068be:	f7fc fe27 	bl	8003510 <HAL_GetTick>
 80068c2:	4602      	mov	r2, r0
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d901      	bls.n	80068d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e19b      	b.n	8006c08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068d0:	4b2d      	ldr	r3, [pc, #180]	; (8006988 <HAL_RCC_OscConfig+0x26c>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0302 	and.w	r3, r3, #2
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d0f0      	beq.n	80068be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068dc:	4b2a      	ldr	r3, [pc, #168]	; (8006988 <HAL_RCC_OscConfig+0x26c>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	00db      	lsls	r3, r3, #3
 80068ea:	4927      	ldr	r1, [pc, #156]	; (8006988 <HAL_RCC_OscConfig+0x26c>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	600b      	str	r3, [r1, #0]
 80068f0:	e015      	b.n	800691e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068f2:	4b26      	ldr	r3, [pc, #152]	; (800698c <HAL_RCC_OscConfig+0x270>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068f8:	f7fc fe0a 	bl	8003510 <HAL_GetTick>
 80068fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068fe:	e008      	b.n	8006912 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006900:	f7fc fe06 	bl	8003510 <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	2b02      	cmp	r3, #2
 800690c:	d901      	bls.n	8006912 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e17a      	b.n	8006c08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006912:	4b1d      	ldr	r3, [pc, #116]	; (8006988 <HAL_RCC_OscConfig+0x26c>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0302 	and.w	r3, r3, #2
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1f0      	bne.n	8006900 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0308 	and.w	r3, r3, #8
 8006926:	2b00      	cmp	r3, #0
 8006928:	d03a      	beq.n	80069a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d019      	beq.n	8006966 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006932:	4b17      	ldr	r3, [pc, #92]	; (8006990 <HAL_RCC_OscConfig+0x274>)
 8006934:	2201      	movs	r2, #1
 8006936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006938:	f7fc fdea 	bl	8003510 <HAL_GetTick>
 800693c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800693e:	e008      	b.n	8006952 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006940:	f7fc fde6 	bl	8003510 <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	2b02      	cmp	r3, #2
 800694c:	d901      	bls.n	8006952 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e15a      	b.n	8006c08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006952:	4b0d      	ldr	r3, [pc, #52]	; (8006988 <HAL_RCC_OscConfig+0x26c>)
 8006954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006956:	f003 0302 	and.w	r3, r3, #2
 800695a:	2b00      	cmp	r3, #0
 800695c:	d0f0      	beq.n	8006940 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800695e:	2001      	movs	r0, #1
 8006960:	f000 fb0a 	bl	8006f78 <RCC_Delay>
 8006964:	e01c      	b.n	80069a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006966:	4b0a      	ldr	r3, [pc, #40]	; (8006990 <HAL_RCC_OscConfig+0x274>)
 8006968:	2200      	movs	r2, #0
 800696a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800696c:	f7fc fdd0 	bl	8003510 <HAL_GetTick>
 8006970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006972:	e00f      	b.n	8006994 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006974:	f7fc fdcc 	bl	8003510 <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	2b02      	cmp	r3, #2
 8006980:	d908      	bls.n	8006994 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e140      	b.n	8006c08 <HAL_RCC_OscConfig+0x4ec>
 8006986:	bf00      	nop
 8006988:	40021000 	.word	0x40021000
 800698c:	42420000 	.word	0x42420000
 8006990:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006994:	4b9e      	ldr	r3, [pc, #632]	; (8006c10 <HAL_RCC_OscConfig+0x4f4>)
 8006996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006998:	f003 0302 	and.w	r3, r3, #2
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1e9      	bne.n	8006974 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0304 	and.w	r3, r3, #4
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f000 80a6 	beq.w	8006afa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069ae:	2300      	movs	r3, #0
 80069b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069b2:	4b97      	ldr	r3, [pc, #604]	; (8006c10 <HAL_RCC_OscConfig+0x4f4>)
 80069b4:	69db      	ldr	r3, [r3, #28]
 80069b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10d      	bne.n	80069da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069be:	4b94      	ldr	r3, [pc, #592]	; (8006c10 <HAL_RCC_OscConfig+0x4f4>)
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	4a93      	ldr	r2, [pc, #588]	; (8006c10 <HAL_RCC_OscConfig+0x4f4>)
 80069c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069c8:	61d3      	str	r3, [r2, #28]
 80069ca:	4b91      	ldr	r3, [pc, #580]	; (8006c10 <HAL_RCC_OscConfig+0x4f4>)
 80069cc:	69db      	ldr	r3, [r3, #28]
 80069ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069d2:	60bb      	str	r3, [r7, #8]
 80069d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069d6:	2301      	movs	r3, #1
 80069d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069da:	4b8e      	ldr	r3, [pc, #568]	; (8006c14 <HAL_RCC_OscConfig+0x4f8>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d118      	bne.n	8006a18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069e6:	4b8b      	ldr	r3, [pc, #556]	; (8006c14 <HAL_RCC_OscConfig+0x4f8>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a8a      	ldr	r2, [pc, #552]	; (8006c14 <HAL_RCC_OscConfig+0x4f8>)
 80069ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069f2:	f7fc fd8d 	bl	8003510 <HAL_GetTick>
 80069f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069f8:	e008      	b.n	8006a0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069fa:	f7fc fd89 	bl	8003510 <HAL_GetTick>
 80069fe:	4602      	mov	r2, r0
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	2b64      	cmp	r3, #100	; 0x64
 8006a06:	d901      	bls.n	8006a0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e0fd      	b.n	8006c08 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a0c:	4b81      	ldr	r3, [pc, #516]	; (8006c14 <HAL_RCC_OscConfig+0x4f8>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d0f0      	beq.n	80069fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d106      	bne.n	8006a2e <HAL_RCC_OscConfig+0x312>
 8006a20:	4b7b      	ldr	r3, [pc, #492]	; (8006c10 <HAL_RCC_OscConfig+0x4f4>)
 8006a22:	6a1b      	ldr	r3, [r3, #32]
 8006a24:	4a7a      	ldr	r2, [pc, #488]	; (8006c10 <HAL_RCC_OscConfig+0x4f4>)
 8006a26:	f043 0301 	orr.w	r3, r3, #1
 8006a2a:	6213      	str	r3, [r2, #32]
 8006a2c:	e02d      	b.n	8006a8a <HAL_RCC_OscConfig+0x36e>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10c      	bne.n	8006a50 <HAL_RCC_OscConfig+0x334>
 8006a36:	4b76      	ldr	r3, [pc, #472]	; (8006c10 <HAL_RCC_OscConfig+0x4f4>)
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	4a75      	ldr	r2, [pc, #468]	; (8006c10 <HAL_RCC_OscConfig+0x4f4>)
 8006a3c:	f023 0301 	bic.w	r3, r3, #1
 8006a40:	6213      	str	r3, [r2, #32]
 8006a42:	4b73      	ldr	r3, [pc, #460]	; (8006c10 <HAL_RCC_OscConfig+0x4f4>)
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	4a72      	ldr	r2, [pc, #456]	; (8006c10 <HAL_RCC_OscConfig+0x4f4>)
 8006a48:	f023 0304 	bic.w	r3, r3, #4
 8006a4c:	6213      	str	r3, [r2, #32]
 8006a4e:	e01c      	b.n	8006a8a <HAL_RCC_OscConfig+0x36e>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	2b05      	cmp	r3, #5
 8006a56:	d10c      	bne.n	8006a72 <HAL_RCC_OscConfig+0x356>
 8006a58:	4b6d      	ldr	r3, [pc, #436]	; (8006c10 <HAL_RCC_OscConfig+0x4f4>)
 8006a5a:	6a1b      	ldr	r3, [r3, #32]
 8006a5c:	4a6c      	ldr	r2, [pc, #432]	; (8006c10 <HAL_RCC_OscConfig+0x4f4>)
 8006a5e:	f043 0304 	orr.w	r3, r3, #4
 8006a62:	6213      	str	r3, [r2, #32]
 8006a64:	4b6a      	ldr	r3, [pc, #424]	; (8006c10 <HAL_RCC_OscConfig+0x4f4>)
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	4a69      	ldr	r2, [pc, #420]	; (8006c10 <HAL_RCC_OscConfig+0x4f4>)
 8006a6a:	f043 0301 	orr.w	r3, r3, #1
 8006a6e:	6213      	str	r3, [r2, #32]
 8006a70:	e00b      	b.n	8006a8a <HAL_RCC_OscConfig+0x36e>
 8006a72:	4b67      	ldr	r3, [pc, #412]	; (8006c10 <HAL_RCC_OscConfig+0x4f4>)
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	4a66      	ldr	r2, [pc, #408]	; (8006c10 <HAL_RCC_OscConfig+0x4f4>)
 8006a78:	f023 0301 	bic.w	r3, r3, #1
 8006a7c:	6213      	str	r3, [r2, #32]
 8006a7e:	4b64      	ldr	r3, [pc, #400]	; (8006c10 <HAL_RCC_OscConfig+0x4f4>)
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	4a63      	ldr	r2, [pc, #396]	; (8006c10 <HAL_RCC_OscConfig+0x4f4>)
 8006a84:	f023 0304 	bic.w	r3, r3, #4
 8006a88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d015      	beq.n	8006abe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a92:	f7fc fd3d 	bl	8003510 <HAL_GetTick>
 8006a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a98:	e00a      	b.n	8006ab0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a9a:	f7fc fd39 	bl	8003510 <HAL_GetTick>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d901      	bls.n	8006ab0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006aac:	2303      	movs	r3, #3
 8006aae:	e0ab      	b.n	8006c08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ab0:	4b57      	ldr	r3, [pc, #348]	; (8006c10 <HAL_RCC_OscConfig+0x4f4>)
 8006ab2:	6a1b      	ldr	r3, [r3, #32]
 8006ab4:	f003 0302 	and.w	r3, r3, #2
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d0ee      	beq.n	8006a9a <HAL_RCC_OscConfig+0x37e>
 8006abc:	e014      	b.n	8006ae8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006abe:	f7fc fd27 	bl	8003510 <HAL_GetTick>
 8006ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ac4:	e00a      	b.n	8006adc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ac6:	f7fc fd23 	bl	8003510 <HAL_GetTick>
 8006aca:	4602      	mov	r2, r0
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d901      	bls.n	8006adc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	e095      	b.n	8006c08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006adc:	4b4c      	ldr	r3, [pc, #304]	; (8006c10 <HAL_RCC_OscConfig+0x4f4>)
 8006ade:	6a1b      	ldr	r3, [r3, #32]
 8006ae0:	f003 0302 	and.w	r3, r3, #2
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1ee      	bne.n	8006ac6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006ae8:	7dfb      	ldrb	r3, [r7, #23]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d105      	bne.n	8006afa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006aee:	4b48      	ldr	r3, [pc, #288]	; (8006c10 <HAL_RCC_OscConfig+0x4f4>)
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	4a47      	ldr	r2, [pc, #284]	; (8006c10 <HAL_RCC_OscConfig+0x4f4>)
 8006af4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006af8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	69db      	ldr	r3, [r3, #28]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f000 8081 	beq.w	8006c06 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b04:	4b42      	ldr	r3, [pc, #264]	; (8006c10 <HAL_RCC_OscConfig+0x4f4>)
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f003 030c 	and.w	r3, r3, #12
 8006b0c:	2b08      	cmp	r3, #8
 8006b0e:	d061      	beq.n	8006bd4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	69db      	ldr	r3, [r3, #28]
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d146      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b18:	4b3f      	ldr	r3, [pc, #252]	; (8006c18 <HAL_RCC_OscConfig+0x4fc>)
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b1e:	f7fc fcf7 	bl	8003510 <HAL_GetTick>
 8006b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b24:	e008      	b.n	8006b38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b26:	f7fc fcf3 	bl	8003510 <HAL_GetTick>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d901      	bls.n	8006b38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006b34:	2303      	movs	r3, #3
 8006b36:	e067      	b.n	8006c08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b38:	4b35      	ldr	r3, [pc, #212]	; (8006c10 <HAL_RCC_OscConfig+0x4f4>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1f0      	bne.n	8006b26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a1b      	ldr	r3, [r3, #32]
 8006b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b4c:	d108      	bne.n	8006b60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006b4e:	4b30      	ldr	r3, [pc, #192]	; (8006c10 <HAL_RCC_OscConfig+0x4f4>)
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	492d      	ldr	r1, [pc, #180]	; (8006c10 <HAL_RCC_OscConfig+0x4f4>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b60:	4b2b      	ldr	r3, [pc, #172]	; (8006c10 <HAL_RCC_OscConfig+0x4f4>)
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a19      	ldr	r1, [r3, #32]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b70:	430b      	orrs	r3, r1
 8006b72:	4927      	ldr	r1, [pc, #156]	; (8006c10 <HAL_RCC_OscConfig+0x4f4>)
 8006b74:	4313      	orrs	r3, r2
 8006b76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b78:	4b27      	ldr	r3, [pc, #156]	; (8006c18 <HAL_RCC_OscConfig+0x4fc>)
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b7e:	f7fc fcc7 	bl	8003510 <HAL_GetTick>
 8006b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006b84:	e008      	b.n	8006b98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b86:	f7fc fcc3 	bl	8003510 <HAL_GetTick>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d901      	bls.n	8006b98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006b94:	2303      	movs	r3, #3
 8006b96:	e037      	b.n	8006c08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006b98:	4b1d      	ldr	r3, [pc, #116]	; (8006c10 <HAL_RCC_OscConfig+0x4f4>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d0f0      	beq.n	8006b86 <HAL_RCC_OscConfig+0x46a>
 8006ba4:	e02f      	b.n	8006c06 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ba6:	4b1c      	ldr	r3, [pc, #112]	; (8006c18 <HAL_RCC_OscConfig+0x4fc>)
 8006ba8:	2200      	movs	r2, #0
 8006baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bac:	f7fc fcb0 	bl	8003510 <HAL_GetTick>
 8006bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006bb2:	e008      	b.n	8006bc6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bb4:	f7fc fcac 	bl	8003510 <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d901      	bls.n	8006bc6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e020      	b.n	8006c08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006bc6:	4b12      	ldr	r3, [pc, #72]	; (8006c10 <HAL_RCC_OscConfig+0x4f4>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1f0      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x498>
 8006bd2:	e018      	b.n	8006c06 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	69db      	ldr	r3, [r3, #28]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d101      	bne.n	8006be0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e013      	b.n	8006c08 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006be0:	4b0b      	ldr	r3, [pc, #44]	; (8006c10 <HAL_RCC_OscConfig+0x4f4>)
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a1b      	ldr	r3, [r3, #32]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d106      	bne.n	8006c02 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d001      	beq.n	8006c06 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e000      	b.n	8006c08 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3718      	adds	r7, #24
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	40021000 	.word	0x40021000
 8006c14:	40007000 	.word	0x40007000
 8006c18:	42420060 	.word	0x42420060

08006c1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d101      	bne.n	8006c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e0d0      	b.n	8006dd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c30:	4b6a      	ldr	r3, [pc, #424]	; (8006ddc <HAL_RCC_ClockConfig+0x1c0>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0307 	and.w	r3, r3, #7
 8006c38:	683a      	ldr	r2, [r7, #0]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d910      	bls.n	8006c60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c3e:	4b67      	ldr	r3, [pc, #412]	; (8006ddc <HAL_RCC_ClockConfig+0x1c0>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f023 0207 	bic.w	r2, r3, #7
 8006c46:	4965      	ldr	r1, [pc, #404]	; (8006ddc <HAL_RCC_ClockConfig+0x1c0>)
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c4e:	4b63      	ldr	r3, [pc, #396]	; (8006ddc <HAL_RCC_ClockConfig+0x1c0>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0307 	and.w	r3, r3, #7
 8006c56:	683a      	ldr	r2, [r7, #0]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d001      	beq.n	8006c60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e0b8      	b.n	8006dd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0302 	and.w	r3, r3, #2
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d020      	beq.n	8006cae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0304 	and.w	r3, r3, #4
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d005      	beq.n	8006c84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c78:	4b59      	ldr	r3, [pc, #356]	; (8006de0 <HAL_RCC_ClockConfig+0x1c4>)
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	4a58      	ldr	r2, [pc, #352]	; (8006de0 <HAL_RCC_ClockConfig+0x1c4>)
 8006c7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006c82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 0308 	and.w	r3, r3, #8
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d005      	beq.n	8006c9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c90:	4b53      	ldr	r3, [pc, #332]	; (8006de0 <HAL_RCC_ClockConfig+0x1c4>)
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	4a52      	ldr	r2, [pc, #328]	; (8006de0 <HAL_RCC_ClockConfig+0x1c4>)
 8006c96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006c9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c9c:	4b50      	ldr	r3, [pc, #320]	; (8006de0 <HAL_RCC_ClockConfig+0x1c4>)
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	494d      	ldr	r1, [pc, #308]	; (8006de0 <HAL_RCC_ClockConfig+0x1c4>)
 8006caa:	4313      	orrs	r3, r2
 8006cac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d040      	beq.n	8006d3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d107      	bne.n	8006cd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cc2:	4b47      	ldr	r3, [pc, #284]	; (8006de0 <HAL_RCC_ClockConfig+0x1c4>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d115      	bne.n	8006cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e07f      	b.n	8006dd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d107      	bne.n	8006cea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cda:	4b41      	ldr	r3, [pc, #260]	; (8006de0 <HAL_RCC_ClockConfig+0x1c4>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d109      	bne.n	8006cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e073      	b.n	8006dd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cea:	4b3d      	ldr	r3, [pc, #244]	; (8006de0 <HAL_RCC_ClockConfig+0x1c4>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0302 	and.w	r3, r3, #2
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e06b      	b.n	8006dd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006cfa:	4b39      	ldr	r3, [pc, #228]	; (8006de0 <HAL_RCC_ClockConfig+0x1c4>)
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	f023 0203 	bic.w	r2, r3, #3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	4936      	ldr	r1, [pc, #216]	; (8006de0 <HAL_RCC_ClockConfig+0x1c4>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d0c:	f7fc fc00 	bl	8003510 <HAL_GetTick>
 8006d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d12:	e00a      	b.n	8006d2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d14:	f7fc fbfc 	bl	8003510 <HAL_GetTick>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d901      	bls.n	8006d2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e053      	b.n	8006dd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d2a:	4b2d      	ldr	r3, [pc, #180]	; (8006de0 <HAL_RCC_ClockConfig+0x1c4>)
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	f003 020c 	and.w	r2, r3, #12
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d1eb      	bne.n	8006d14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d3c:	4b27      	ldr	r3, [pc, #156]	; (8006ddc <HAL_RCC_ClockConfig+0x1c0>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0307 	and.w	r3, r3, #7
 8006d44:	683a      	ldr	r2, [r7, #0]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d210      	bcs.n	8006d6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d4a:	4b24      	ldr	r3, [pc, #144]	; (8006ddc <HAL_RCC_ClockConfig+0x1c0>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f023 0207 	bic.w	r2, r3, #7
 8006d52:	4922      	ldr	r1, [pc, #136]	; (8006ddc <HAL_RCC_ClockConfig+0x1c0>)
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d5a:	4b20      	ldr	r3, [pc, #128]	; (8006ddc <HAL_RCC_ClockConfig+0x1c0>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0307 	and.w	r3, r3, #7
 8006d62:	683a      	ldr	r2, [r7, #0]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d001      	beq.n	8006d6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e032      	b.n	8006dd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0304 	and.w	r3, r3, #4
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d008      	beq.n	8006d8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d78:	4b19      	ldr	r3, [pc, #100]	; (8006de0 <HAL_RCC_ClockConfig+0x1c4>)
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	4916      	ldr	r1, [pc, #88]	; (8006de0 <HAL_RCC_ClockConfig+0x1c4>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 0308 	and.w	r3, r3, #8
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d009      	beq.n	8006daa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006d96:	4b12      	ldr	r3, [pc, #72]	; (8006de0 <HAL_RCC_ClockConfig+0x1c4>)
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	00db      	lsls	r3, r3, #3
 8006da4:	490e      	ldr	r1, [pc, #56]	; (8006de0 <HAL_RCC_ClockConfig+0x1c4>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006daa:	f000 f821 	bl	8006df0 <HAL_RCC_GetSysClockFreq>
 8006dae:	4601      	mov	r1, r0
 8006db0:	4b0b      	ldr	r3, [pc, #44]	; (8006de0 <HAL_RCC_ClockConfig+0x1c4>)
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	091b      	lsrs	r3, r3, #4
 8006db6:	f003 030f 	and.w	r3, r3, #15
 8006dba:	4a0a      	ldr	r2, [pc, #40]	; (8006de4 <HAL_RCC_ClockConfig+0x1c8>)
 8006dbc:	5cd3      	ldrb	r3, [r2, r3]
 8006dbe:	fa21 f303 	lsr.w	r3, r1, r3
 8006dc2:	4a09      	ldr	r2, [pc, #36]	; (8006de8 <HAL_RCC_ClockConfig+0x1cc>)
 8006dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006dc6:	4b09      	ldr	r3, [pc, #36]	; (8006dec <HAL_RCC_ClockConfig+0x1d0>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7fc fa62 	bl	8003294 <HAL_InitTick>

  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	40022000 	.word	0x40022000
 8006de0:	40021000 	.word	0x40021000
 8006de4:	0800be54 	.word	0x0800be54
 8006de8:	20000028 	.word	0x20000028
 8006dec:	2000002c 	.word	0x2000002c

08006df0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006df0:	b490      	push	{r4, r7}
 8006df2:	b08a      	sub	sp, #40	; 0x28
 8006df4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006df6:	4b2a      	ldr	r3, [pc, #168]	; (8006ea0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006df8:	1d3c      	adds	r4, r7, #4
 8006dfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006dfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006e00:	4b28      	ldr	r3, [pc, #160]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006e02:	881b      	ldrh	r3, [r3, #0]
 8006e04:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006e06:	2300      	movs	r3, #0
 8006e08:	61fb      	str	r3, [r7, #28]
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	61bb      	str	r3, [r7, #24]
 8006e0e:	2300      	movs	r3, #0
 8006e10:	627b      	str	r3, [r7, #36]	; 0x24
 8006e12:	2300      	movs	r3, #0
 8006e14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006e16:	2300      	movs	r3, #0
 8006e18:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006e1a:	4b23      	ldr	r3, [pc, #140]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	f003 030c 	and.w	r3, r3, #12
 8006e26:	2b04      	cmp	r3, #4
 8006e28:	d002      	beq.n	8006e30 <HAL_RCC_GetSysClockFreq+0x40>
 8006e2a:	2b08      	cmp	r3, #8
 8006e2c:	d003      	beq.n	8006e36 <HAL_RCC_GetSysClockFreq+0x46>
 8006e2e:	e02d      	b.n	8006e8c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006e30:	4b1e      	ldr	r3, [pc, #120]	; (8006eac <HAL_RCC_GetSysClockFreq+0xbc>)
 8006e32:	623b      	str	r3, [r7, #32]
      break;
 8006e34:	e02d      	b.n	8006e92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	0c9b      	lsrs	r3, r3, #18
 8006e3a:	f003 030f 	and.w	r3, r3, #15
 8006e3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006e42:	4413      	add	r3, r2
 8006e44:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006e48:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d013      	beq.n	8006e7c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006e54:	4b14      	ldr	r3, [pc, #80]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	0c5b      	lsrs	r3, r3, #17
 8006e5a:	f003 0301 	and.w	r3, r3, #1
 8006e5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006e62:	4413      	add	r3, r2
 8006e64:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006e68:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	4a0f      	ldr	r2, [pc, #60]	; (8006eac <HAL_RCC_GetSysClockFreq+0xbc>)
 8006e6e:	fb02 f203 	mul.w	r2, r2, r3
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e78:	627b      	str	r3, [r7, #36]	; 0x24
 8006e7a:	e004      	b.n	8006e86 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	4a0c      	ldr	r2, [pc, #48]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006e80:	fb02 f303 	mul.w	r3, r2, r3
 8006e84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e88:	623b      	str	r3, [r7, #32]
      break;
 8006e8a:	e002      	b.n	8006e92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006e8c:	4b07      	ldr	r3, [pc, #28]	; (8006eac <HAL_RCC_GetSysClockFreq+0xbc>)
 8006e8e:	623b      	str	r3, [r7, #32]
      break;
 8006e90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e92:	6a3b      	ldr	r3, [r7, #32]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3728      	adds	r7, #40	; 0x28
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bc90      	pop	{r4, r7}
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	0800be04 	.word	0x0800be04
 8006ea4:	0800be14 	.word	0x0800be14
 8006ea8:	40021000 	.word	0x40021000
 8006eac:	007a1200 	.word	0x007a1200
 8006eb0:	003d0900 	.word	0x003d0900

08006eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006eb8:	4b02      	ldr	r3, [pc, #8]	; (8006ec4 <HAL_RCC_GetHCLKFreq+0x10>)
 8006eba:	681b      	ldr	r3, [r3, #0]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bc80      	pop	{r7}
 8006ec2:	4770      	bx	lr
 8006ec4:	20000028 	.word	0x20000028

08006ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ecc:	f7ff fff2 	bl	8006eb4 <HAL_RCC_GetHCLKFreq>
 8006ed0:	4601      	mov	r1, r0
 8006ed2:	4b05      	ldr	r3, [pc, #20]	; (8006ee8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	0a1b      	lsrs	r3, r3, #8
 8006ed8:	f003 0307 	and.w	r3, r3, #7
 8006edc:	4a03      	ldr	r2, [pc, #12]	; (8006eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ede:	5cd3      	ldrb	r3, [r2, r3]
 8006ee0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	40021000 	.word	0x40021000
 8006eec:	0800be64 	.word	0x0800be64

08006ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006ef4:	f7ff ffde 	bl	8006eb4 <HAL_RCC_GetHCLKFreq>
 8006ef8:	4601      	mov	r1, r0
 8006efa:	4b05      	ldr	r3, [pc, #20]	; (8006f10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	0adb      	lsrs	r3, r3, #11
 8006f00:	f003 0307 	and.w	r3, r3, #7
 8006f04:	4a03      	ldr	r2, [pc, #12]	; (8006f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f06:	5cd3      	ldrb	r3, [r2, r3]
 8006f08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	40021000 	.word	0x40021000
 8006f14:	0800be64 	.word	0x0800be64

08006f18 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	220f      	movs	r2, #15
 8006f26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006f28:	4b11      	ldr	r3, [pc, #68]	; (8006f70 <HAL_RCC_GetClockConfig+0x58>)
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	f003 0203 	and.w	r2, r3, #3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006f34:	4b0e      	ldr	r3, [pc, #56]	; (8006f70 <HAL_RCC_GetClockConfig+0x58>)
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006f40:	4b0b      	ldr	r3, [pc, #44]	; (8006f70 <HAL_RCC_GetClockConfig+0x58>)
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006f4c:	4b08      	ldr	r3, [pc, #32]	; (8006f70 <HAL_RCC_GetClockConfig+0x58>)
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	08db      	lsrs	r3, r3, #3
 8006f52:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006f5a:	4b06      	ldr	r3, [pc, #24]	; (8006f74 <HAL_RCC_GetClockConfig+0x5c>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0207 	and.w	r2, r3, #7
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8006f66:	bf00      	nop
 8006f68:	370c      	adds	r7, #12
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bc80      	pop	{r7}
 8006f6e:	4770      	bx	lr
 8006f70:	40021000 	.word	0x40021000
 8006f74:	40022000 	.word	0x40022000

08006f78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006f80:	4b0a      	ldr	r3, [pc, #40]	; (8006fac <RCC_Delay+0x34>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a0a      	ldr	r2, [pc, #40]	; (8006fb0 <RCC_Delay+0x38>)
 8006f86:	fba2 2303 	umull	r2, r3, r2, r3
 8006f8a:	0a5b      	lsrs	r3, r3, #9
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	fb02 f303 	mul.w	r3, r2, r3
 8006f92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006f94:	bf00      	nop
  }
  while (Delay --);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	1e5a      	subs	r2, r3, #1
 8006f9a:	60fa      	str	r2, [r7, #12]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1f9      	bne.n	8006f94 <RCC_Delay+0x1c>
}
 8006fa0:	bf00      	nop
 8006fa2:	3714      	adds	r7, #20
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bc80      	pop	{r7}
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	20000028 	.word	0x20000028
 8006fb0:	10624dd3 	.word	0x10624dd3

08006fb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b086      	sub	sp, #24
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	613b      	str	r3, [r7, #16]
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0301 	and.w	r3, r3, #1
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d07d      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fd4:	4b4f      	ldr	r3, [pc, #316]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fd6:	69db      	ldr	r3, [r3, #28]
 8006fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d10d      	bne.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fe0:	4b4c      	ldr	r3, [pc, #304]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fe2:	69db      	ldr	r3, [r3, #28]
 8006fe4:	4a4b      	ldr	r2, [pc, #300]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fea:	61d3      	str	r3, [r2, #28]
 8006fec:	4b49      	ldr	r3, [pc, #292]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fee:	69db      	ldr	r3, [r3, #28]
 8006ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ff4:	60bb      	str	r3, [r7, #8]
 8006ff6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ffc:	4b46      	ldr	r3, [pc, #280]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007004:	2b00      	cmp	r3, #0
 8007006:	d118      	bne.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007008:	4b43      	ldr	r3, [pc, #268]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a42      	ldr	r2, [pc, #264]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800700e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007012:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007014:	f7fc fa7c 	bl	8003510 <HAL_GetTick>
 8007018:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800701a:	e008      	b.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800701c:	f7fc fa78 	bl	8003510 <HAL_GetTick>
 8007020:	4602      	mov	r2, r0
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	2b64      	cmp	r3, #100	; 0x64
 8007028:	d901      	bls.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800702a:	2303      	movs	r3, #3
 800702c:	e06d      	b.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800702e:	4b3a      	ldr	r3, [pc, #232]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007036:	2b00      	cmp	r3, #0
 8007038:	d0f0      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800703a:	4b36      	ldr	r3, [pc, #216]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800703c:	6a1b      	ldr	r3, [r3, #32]
 800703e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007042:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d02e      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	429a      	cmp	r2, r3
 8007056:	d027      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007058:	4b2e      	ldr	r3, [pc, #184]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800705a:	6a1b      	ldr	r3, [r3, #32]
 800705c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007060:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007062:	4b2e      	ldr	r3, [pc, #184]	; (800711c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007064:	2201      	movs	r2, #1
 8007066:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007068:	4b2c      	ldr	r3, [pc, #176]	; (800711c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800706a:	2200      	movs	r2, #0
 800706c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800706e:	4a29      	ldr	r2, [pc, #164]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f003 0301 	and.w	r3, r3, #1
 800707a:	2b00      	cmp	r3, #0
 800707c:	d014      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800707e:	f7fc fa47 	bl	8003510 <HAL_GetTick>
 8007082:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007084:	e00a      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007086:	f7fc fa43 	bl	8003510 <HAL_GetTick>
 800708a:	4602      	mov	r2, r0
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	f241 3288 	movw	r2, #5000	; 0x1388
 8007094:	4293      	cmp	r3, r2
 8007096:	d901      	bls.n	800709c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e036      	b.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800709c:	4b1d      	ldr	r3, [pc, #116]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800709e:	6a1b      	ldr	r3, [r3, #32]
 80070a0:	f003 0302 	and.w	r3, r3, #2
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d0ee      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070a8:	4b1a      	ldr	r3, [pc, #104]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070aa:	6a1b      	ldr	r3, [r3, #32]
 80070ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	4917      	ldr	r1, [pc, #92]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070b6:	4313      	orrs	r3, r2
 80070b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80070ba:	7dfb      	ldrb	r3, [r7, #23]
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d105      	bne.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070c0:	4b14      	ldr	r3, [pc, #80]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070c2:	69db      	ldr	r3, [r3, #28]
 80070c4:	4a13      	ldr	r2, [pc, #76]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0302 	and.w	r3, r3, #2
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d008      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80070d8:	4b0e      	ldr	r3, [pc, #56]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	490b      	ldr	r1, [pc, #44]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070e6:	4313      	orrs	r3, r2
 80070e8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 0310 	and.w	r3, r3, #16
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d008      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80070f6:	4b07      	ldr	r3, [pc, #28]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	4904      	ldr	r1, [pc, #16]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007104:	4313      	orrs	r3, r2
 8007106:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3718      	adds	r7, #24
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	40021000 	.word	0x40021000
 8007118:	40007000 	.word	0x40007000
 800711c:	42420440 	.word	0x42420440

08007120 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d101      	bne.n	8007132 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e053      	b.n	80071da <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800713e:	b2db      	uxtb	r3, r3
 8007140:	2b00      	cmp	r3, #0
 8007142:	d106      	bne.n	8007152 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f7fb ffa3 	bl	8003098 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2202      	movs	r2, #2
 8007156:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007168:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	685a      	ldr	r2, [r3, #4]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	431a      	orrs	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	431a      	orrs	r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	431a      	orrs	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	695b      	ldr	r3, [r3, #20]
 8007184:	431a      	orrs	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800718e:	431a      	orrs	r2, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	69db      	ldr	r3, [r3, #28]
 8007194:	431a      	orrs	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	ea42 0103 	orr.w	r1, r2, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	430a      	orrs	r2, r1
 80071a8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	0c1a      	lsrs	r2, r3, #16
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f002 0204 	and.w	r2, r2, #4
 80071b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	69da      	ldr	r2, [r3, #28]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b088      	sub	sp, #32
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	60f8      	str	r0, [r7, #12]
 80071ea:	60b9      	str	r1, [r7, #8]
 80071ec:	603b      	str	r3, [r7, #0]
 80071ee:	4613      	mov	r3, r2
 80071f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80071f2:	2300      	movs	r3, #0
 80071f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d101      	bne.n	8007204 <HAL_SPI_Transmit+0x22>
 8007200:	2302      	movs	r3, #2
 8007202:	e11e      	b.n	8007442 <HAL_SPI_Transmit+0x260>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800720c:	f7fc f980 	bl	8003510 <HAL_GetTick>
 8007210:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007212:	88fb      	ldrh	r3, [r7, #6]
 8007214:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800721c:	b2db      	uxtb	r3, r3
 800721e:	2b01      	cmp	r3, #1
 8007220:	d002      	beq.n	8007228 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007222:	2302      	movs	r3, #2
 8007224:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007226:	e103      	b.n	8007430 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d002      	beq.n	8007234 <HAL_SPI_Transmit+0x52>
 800722e:	88fb      	ldrh	r3, [r7, #6]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d102      	bne.n	800723a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007238:	e0fa      	b.n	8007430 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2203      	movs	r2, #3
 800723e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2200      	movs	r2, #0
 8007246:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	88fa      	ldrh	r2, [r7, #6]
 8007252:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	88fa      	ldrh	r2, [r7, #6]
 8007258:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007280:	d107      	bne.n	8007292 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007290:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800729c:	2b40      	cmp	r3, #64	; 0x40
 800729e:	d007      	beq.n	80072b0 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072b8:	d14b      	bne.n	8007352 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d002      	beq.n	80072c8 <HAL_SPI_Transmit+0xe6>
 80072c2:	8afb      	ldrh	r3, [r7, #22]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d13e      	bne.n	8007346 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072cc:	881a      	ldrh	r2, [r3, #0]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d8:	1c9a      	adds	r2, r3, #2
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	3b01      	subs	r3, #1
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80072ec:	e02b      	b.n	8007346 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	f003 0302 	and.w	r3, r3, #2
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d112      	bne.n	8007322 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007300:	881a      	ldrh	r2, [r3, #0]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730c:	1c9a      	adds	r2, r3, #2
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007316:	b29b      	uxth	r3, r3
 8007318:	3b01      	subs	r3, #1
 800731a:	b29a      	uxth	r2, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007320:	e011      	b.n	8007346 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007322:	f7fc f8f5 	bl	8003510 <HAL_GetTick>
 8007326:	4602      	mov	r2, r0
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	683a      	ldr	r2, [r7, #0]
 800732e:	429a      	cmp	r2, r3
 8007330:	d803      	bhi.n	800733a <HAL_SPI_Transmit+0x158>
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007338:	d102      	bne.n	8007340 <HAL_SPI_Transmit+0x15e>
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d102      	bne.n	8007346 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007344:	e074      	b.n	8007430 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800734a:	b29b      	uxth	r3, r3
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1ce      	bne.n	80072ee <HAL_SPI_Transmit+0x10c>
 8007350:	e04c      	b.n	80073ec <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d002      	beq.n	8007360 <HAL_SPI_Transmit+0x17e>
 800735a:	8afb      	ldrh	r3, [r7, #22]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d140      	bne.n	80073e2 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	330c      	adds	r3, #12
 800736a:	7812      	ldrb	r2, [r2, #0]
 800736c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007372:	1c5a      	adds	r2, r3, #1
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800737c:	b29b      	uxth	r3, r3
 800737e:	3b01      	subs	r3, #1
 8007380:	b29a      	uxth	r2, r3
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007386:	e02c      	b.n	80073e2 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	f003 0302 	and.w	r3, r3, #2
 8007392:	2b02      	cmp	r3, #2
 8007394:	d113      	bne.n	80073be <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	330c      	adds	r3, #12
 80073a0:	7812      	ldrb	r2, [r2, #0]
 80073a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a8:	1c5a      	adds	r2, r3, #1
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	3b01      	subs	r3, #1
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80073bc:	e011      	b.n	80073e2 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073be:	f7fc f8a7 	bl	8003510 <HAL_GetTick>
 80073c2:	4602      	mov	r2, r0
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	683a      	ldr	r2, [r7, #0]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d803      	bhi.n	80073d6 <HAL_SPI_Transmit+0x1f4>
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d4:	d102      	bne.n	80073dc <HAL_SPI_Transmit+0x1fa>
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d102      	bne.n	80073e2 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80073dc:	2303      	movs	r3, #3
 80073de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80073e0:	e026      	b.n	8007430 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1cd      	bne.n	8007388 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073ec:	69ba      	ldr	r2, [r7, #24]
 80073ee:	6839      	ldr	r1, [r7, #0]
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f000 fb91 	bl	8007b18 <SPI_EndRxTxTransaction>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d002      	beq.n	8007402 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2220      	movs	r2, #32
 8007400:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10a      	bne.n	8007420 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800740a:	2300      	movs	r3, #0
 800740c:	613b      	str	r3, [r7, #16]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	613b      	str	r3, [r7, #16]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	613b      	str	r3, [r7, #16]
 800741e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007424:	2b00      	cmp	r3, #0
 8007426:	d002      	beq.n	800742e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	77fb      	strb	r3, [r7, #31]
 800742c:	e000      	b.n	8007430 <HAL_SPI_Transmit+0x24e>
  }

error:
 800742e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007440:	7ffb      	ldrb	r3, [r7, #31]
}
 8007442:	4618      	mov	r0, r3
 8007444:	3720      	adds	r7, #32
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b088      	sub	sp, #32
 800744e:	af02      	add	r7, sp, #8
 8007450:	60f8      	str	r0, [r7, #12]
 8007452:	60b9      	str	r1, [r7, #8]
 8007454:	603b      	str	r3, [r7, #0]
 8007456:	4613      	mov	r3, r2
 8007458:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800745a:	2300      	movs	r3, #0
 800745c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007466:	d112      	bne.n	800748e <HAL_SPI_Receive+0x44>
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d10e      	bne.n	800748e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2204      	movs	r2, #4
 8007474:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007478:	88fa      	ldrh	r2, [r7, #6]
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	9300      	str	r3, [sp, #0]
 800747e:	4613      	mov	r3, r2
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	68b9      	ldr	r1, [r7, #8]
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f000 f8e9 	bl	800765c <HAL_SPI_TransmitReceive>
 800748a:	4603      	mov	r3, r0
 800748c:	e0e2      	b.n	8007654 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007494:	2b01      	cmp	r3, #1
 8007496:	d101      	bne.n	800749c <HAL_SPI_Receive+0x52>
 8007498:	2302      	movs	r3, #2
 800749a:	e0db      	b.n	8007654 <HAL_SPI_Receive+0x20a>
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074a4:	f7fc f834 	bl	8003510 <HAL_GetTick>
 80074a8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d002      	beq.n	80074bc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80074b6:	2302      	movs	r3, #2
 80074b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80074ba:	e0c2      	b.n	8007642 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d002      	beq.n	80074c8 <HAL_SPI_Receive+0x7e>
 80074c2:	88fb      	ldrh	r3, [r7, #6]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d102      	bne.n	80074ce <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80074cc:	e0b9      	b.n	8007642 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2204      	movs	r2, #4
 80074d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	68ba      	ldr	r2, [r7, #8]
 80074e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	88fa      	ldrh	r2, [r7, #6]
 80074e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	88fa      	ldrh	r2, [r7, #6]
 80074ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2200      	movs	r2, #0
 80074f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007514:	d107      	bne.n	8007526 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007524:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007530:	2b40      	cmp	r3, #64	; 0x40
 8007532:	d007      	beq.n	8007544 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007542:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d162      	bne.n	8007612 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800754c:	e02e      	b.n	80075ac <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f003 0301 	and.w	r3, r3, #1
 8007558:	2b01      	cmp	r3, #1
 800755a:	d115      	bne.n	8007588 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f103 020c 	add.w	r2, r3, #12
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007568:	7812      	ldrb	r2, [r2, #0]
 800756a:	b2d2      	uxtb	r2, r2
 800756c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007572:	1c5a      	adds	r2, r3, #1
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800757c:	b29b      	uxth	r3, r3
 800757e:	3b01      	subs	r3, #1
 8007580:	b29a      	uxth	r2, r3
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007586:	e011      	b.n	80075ac <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007588:	f7fb ffc2 	bl	8003510 <HAL_GetTick>
 800758c:	4602      	mov	r2, r0
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	683a      	ldr	r2, [r7, #0]
 8007594:	429a      	cmp	r2, r3
 8007596:	d803      	bhi.n	80075a0 <HAL_SPI_Receive+0x156>
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800759e:	d102      	bne.n	80075a6 <HAL_SPI_Receive+0x15c>
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d102      	bne.n	80075ac <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80075aa:	e04a      	b.n	8007642 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1cb      	bne.n	800754e <HAL_SPI_Receive+0x104>
 80075b6:	e031      	b.n	800761c <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	f003 0301 	and.w	r3, r3, #1
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d113      	bne.n	80075ee <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68da      	ldr	r2, [r3, #12]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d0:	b292      	uxth	r2, r2
 80075d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d8:	1c9a      	adds	r2, r3, #2
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	3b01      	subs	r3, #1
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80075ec:	e011      	b.n	8007612 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075ee:	f7fb ff8f 	bl	8003510 <HAL_GetTick>
 80075f2:	4602      	mov	r2, r0
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d803      	bhi.n	8007606 <HAL_SPI_Receive+0x1bc>
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007604:	d102      	bne.n	800760c <HAL_SPI_Receive+0x1c2>
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d102      	bne.n	8007612 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800760c:	2303      	movs	r3, #3
 800760e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007610:	e017      	b.n	8007642 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007616:	b29b      	uxth	r3, r3
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1cd      	bne.n	80075b8 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	6839      	ldr	r1, [r7, #0]
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f000 fa27 	bl	8007a74 <SPI_EndRxTransaction>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d002      	beq.n	8007632 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2220      	movs	r2, #32
 8007630:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007636:	2b00      	cmp	r3, #0
 8007638:	d002      	beq.n	8007640 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	75fb      	strb	r3, [r7, #23]
 800763e:	e000      	b.n	8007642 <HAL_SPI_Receive+0x1f8>
  }

error :
 8007640:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2201      	movs	r2, #1
 8007646:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007652:	7dfb      	ldrb	r3, [r7, #23]
}
 8007654:	4618      	mov	r0, r3
 8007656:	3718      	adds	r7, #24
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b08c      	sub	sp, #48	; 0x30
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	607a      	str	r2, [r7, #4]
 8007668:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800766a:	2301      	movs	r3, #1
 800766c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800766e:	2300      	movs	r3, #0
 8007670:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800767a:	2b01      	cmp	r3, #1
 800767c:	d101      	bne.n	8007682 <HAL_SPI_TransmitReceive+0x26>
 800767e:	2302      	movs	r3, #2
 8007680:	e18a      	b.n	8007998 <HAL_SPI_TransmitReceive+0x33c>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800768a:	f7fb ff41 	bl	8003510 <HAL_GetTick>
 800768e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80076a0:	887b      	ldrh	r3, [r7, #2]
 80076a2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80076a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d00f      	beq.n	80076cc <HAL_SPI_TransmitReceive+0x70>
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076b2:	d107      	bne.n	80076c4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d103      	bne.n	80076c4 <HAL_SPI_TransmitReceive+0x68>
 80076bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076c0:	2b04      	cmp	r3, #4
 80076c2:	d003      	beq.n	80076cc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80076c4:	2302      	movs	r3, #2
 80076c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80076ca:	e15b      	b.n	8007984 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d005      	beq.n	80076de <HAL_SPI_TransmitReceive+0x82>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d002      	beq.n	80076de <HAL_SPI_TransmitReceive+0x82>
 80076d8:	887b      	ldrh	r3, [r7, #2]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d103      	bne.n	80076e6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80076e4:	e14e      	b.n	8007984 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	2b04      	cmp	r3, #4
 80076f0:	d003      	beq.n	80076fa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2205      	movs	r2, #5
 80076f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	887a      	ldrh	r2, [r7, #2]
 800770a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	887a      	ldrh	r2, [r7, #2]
 8007710:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	68ba      	ldr	r2, [r7, #8]
 8007716:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	887a      	ldrh	r2, [r7, #2]
 800771c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	887a      	ldrh	r2, [r7, #2]
 8007722:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2200      	movs	r2, #0
 8007728:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800773a:	2b40      	cmp	r3, #64	; 0x40
 800773c:	d007      	beq.n	800774e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800774c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007756:	d178      	bne.n	800784a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d002      	beq.n	8007766 <HAL_SPI_TransmitReceive+0x10a>
 8007760:	8b7b      	ldrh	r3, [r7, #26]
 8007762:	2b01      	cmp	r3, #1
 8007764:	d166      	bne.n	8007834 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800776a:	881a      	ldrh	r2, [r3, #0]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007776:	1c9a      	adds	r2, r3, #2
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007780:	b29b      	uxth	r3, r3
 8007782:	3b01      	subs	r3, #1
 8007784:	b29a      	uxth	r2, r3
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800778a:	e053      	b.n	8007834 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f003 0302 	and.w	r3, r3, #2
 8007796:	2b02      	cmp	r3, #2
 8007798:	d11b      	bne.n	80077d2 <HAL_SPI_TransmitReceive+0x176>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800779e:	b29b      	uxth	r3, r3
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d016      	beq.n	80077d2 <HAL_SPI_TransmitReceive+0x176>
 80077a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d113      	bne.n	80077d2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ae:	881a      	ldrh	r2, [r3, #0]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ba:	1c9a      	adds	r2, r3, #2
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	3b01      	subs	r3, #1
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077ce:	2300      	movs	r3, #0
 80077d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d119      	bne.n	8007814 <HAL_SPI_TransmitReceive+0x1b8>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d014      	beq.n	8007814 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68da      	ldr	r2, [r3, #12]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f4:	b292      	uxth	r2, r2
 80077f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fc:	1c9a      	adds	r2, r3, #2
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007806:	b29b      	uxth	r3, r3
 8007808:	3b01      	subs	r3, #1
 800780a:	b29a      	uxth	r2, r3
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007810:	2301      	movs	r3, #1
 8007812:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007814:	f7fb fe7c 	bl	8003510 <HAL_GetTick>
 8007818:	4602      	mov	r2, r0
 800781a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007820:	429a      	cmp	r2, r3
 8007822:	d807      	bhi.n	8007834 <HAL_SPI_TransmitReceive+0x1d8>
 8007824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782a:	d003      	beq.n	8007834 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800782c:	2303      	movs	r3, #3
 800782e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007832:	e0a7      	b.n	8007984 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007838:	b29b      	uxth	r3, r3
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1a6      	bne.n	800778c <HAL_SPI_TransmitReceive+0x130>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007842:	b29b      	uxth	r3, r3
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1a1      	bne.n	800778c <HAL_SPI_TransmitReceive+0x130>
 8007848:	e07c      	b.n	8007944 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d002      	beq.n	8007858 <HAL_SPI_TransmitReceive+0x1fc>
 8007852:	8b7b      	ldrh	r3, [r7, #26]
 8007854:	2b01      	cmp	r3, #1
 8007856:	d16b      	bne.n	8007930 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	330c      	adds	r3, #12
 8007862:	7812      	ldrb	r2, [r2, #0]
 8007864:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786a:	1c5a      	adds	r2, r3, #1
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007874:	b29b      	uxth	r3, r3
 8007876:	3b01      	subs	r3, #1
 8007878:	b29a      	uxth	r2, r3
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800787e:	e057      	b.n	8007930 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	f003 0302 	and.w	r3, r3, #2
 800788a:	2b02      	cmp	r3, #2
 800788c:	d11c      	bne.n	80078c8 <HAL_SPI_TransmitReceive+0x26c>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007892:	b29b      	uxth	r3, r3
 8007894:	2b00      	cmp	r3, #0
 8007896:	d017      	beq.n	80078c8 <HAL_SPI_TransmitReceive+0x26c>
 8007898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789a:	2b01      	cmp	r3, #1
 800789c:	d114      	bne.n	80078c8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	330c      	adds	r3, #12
 80078a8:	7812      	ldrb	r2, [r2, #0]
 80078aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b0:	1c5a      	adds	r2, r3, #1
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	3b01      	subs	r3, #1
 80078be:	b29a      	uxth	r2, r3
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80078c4:	2300      	movs	r3, #0
 80078c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	f003 0301 	and.w	r3, r3, #1
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d119      	bne.n	800790a <HAL_SPI_TransmitReceive+0x2ae>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078da:	b29b      	uxth	r3, r3
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d014      	beq.n	800790a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68da      	ldr	r2, [r3, #12]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ea:	b2d2      	uxtb	r2, r2
 80078ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f2:	1c5a      	adds	r2, r3, #1
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	3b01      	subs	r3, #1
 8007900:	b29a      	uxth	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007906:	2301      	movs	r3, #1
 8007908:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800790a:	f7fb fe01 	bl	8003510 <HAL_GetTick>
 800790e:	4602      	mov	r2, r0
 8007910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007916:	429a      	cmp	r2, r3
 8007918:	d803      	bhi.n	8007922 <HAL_SPI_TransmitReceive+0x2c6>
 800791a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007920:	d102      	bne.n	8007928 <HAL_SPI_TransmitReceive+0x2cc>
 8007922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007924:	2b00      	cmp	r3, #0
 8007926:	d103      	bne.n	8007930 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007928:	2303      	movs	r3, #3
 800792a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800792e:	e029      	b.n	8007984 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007934:	b29b      	uxth	r3, r3
 8007936:	2b00      	cmp	r3, #0
 8007938:	d1a2      	bne.n	8007880 <HAL_SPI_TransmitReceive+0x224>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800793e:	b29b      	uxth	r3, r3
 8007940:	2b00      	cmp	r3, #0
 8007942:	d19d      	bne.n	8007880 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007946:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	f000 f8e5 	bl	8007b18 <SPI_EndRxTxTransaction>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d006      	beq.n	8007962 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2220      	movs	r2, #32
 800795e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007960:	e010      	b.n	8007984 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10b      	bne.n	8007982 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800796a:	2300      	movs	r3, #0
 800796c:	617b      	str	r3, [r7, #20]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	617b      	str	r3, [r7, #20]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	617b      	str	r3, [r7, #20]
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	e000      	b.n	8007984 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007982:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2200      	movs	r2, #0
 8007990:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007994:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007998:	4618      	mov	r0, r3
 800799a:	3730      	adds	r7, #48	; 0x30
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	603b      	str	r3, [r7, #0]
 80079ac:	4613      	mov	r3, r2
 80079ae:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079b0:	e04c      	b.n	8007a4c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b8:	d048      	beq.n	8007a4c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80079ba:	f7fb fda9 	bl	8003510 <HAL_GetTick>
 80079be:	4602      	mov	r2, r0
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	683a      	ldr	r2, [r7, #0]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d902      	bls.n	80079d0 <SPI_WaitFlagStateUntilTimeout+0x30>
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d13d      	bne.n	8007a4c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	685a      	ldr	r2, [r3, #4]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80079de:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079e8:	d111      	bne.n	8007a0e <SPI_WaitFlagStateUntilTimeout+0x6e>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079f2:	d004      	beq.n	80079fe <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079fc:	d107      	bne.n	8007a0e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a0c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a16:	d10f      	bne.n	8007a38 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a26:	601a      	str	r2, [r3, #0]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a36:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	e00f      	b.n	8007a6c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	689a      	ldr	r2, [r3, #8]
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	4013      	ands	r3, r2
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	bf0c      	ite	eq
 8007a5c:	2301      	moveq	r3, #1
 8007a5e:	2300      	movne	r3, #0
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	461a      	mov	r2, r3
 8007a64:	79fb      	ldrb	r3, [r7, #7]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d1a3      	bne.n	80079b2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3710      	adds	r7, #16
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af02      	add	r7, sp, #8
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a88:	d111      	bne.n	8007aae <SPI_EndRxTransaction+0x3a>
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a92:	d004      	beq.n	8007a9e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a9c:	d107      	bne.n	8007aae <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007aac:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ab6:	d117      	bne.n	8007ae8 <SPI_EndRxTransaction+0x74>
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ac0:	d112      	bne.n	8007ae8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	9300      	str	r3, [sp, #0]
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	2101      	movs	r1, #1
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f7ff ff67 	bl	80079a0 <SPI_WaitFlagStateUntilTimeout>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d01a      	beq.n	8007b0e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007adc:	f043 0220 	orr.w	r2, r3, #32
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e013      	b.n	8007b10 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	9300      	str	r3, [sp, #0]
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	2200      	movs	r2, #0
 8007af0:	2180      	movs	r1, #128	; 0x80
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f7ff ff54 	bl	80079a0 <SPI_WaitFlagStateUntilTimeout>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d007      	beq.n	8007b0e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b02:	f043 0220 	orr.w	r2, r3, #32
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e000      	b.n	8007b10 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af02      	add	r7, sp, #8
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	2180      	movs	r1, #128	; 0x80
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	f7ff ff36 	bl	80079a0 <SPI_WaitFlagStateUntilTimeout>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d007      	beq.n	8007b4a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b3e:	f043 0220 	orr.w	r2, r3, #32
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007b46:	2303      	movs	r3, #3
 8007b48:	e000      	b.n	8007b4c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d101      	bne.n	8007b66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e01d      	b.n	8007ba2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d106      	bne.n	8007b80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f815 	bl	8007baa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2202      	movs	r2, #2
 8007b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	3304      	adds	r3, #4
 8007b90:	4619      	mov	r1, r3
 8007b92:	4610      	mov	r0, r2
 8007b94:	f000 f962 	bl	8007e5c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007baa:	b480      	push	{r7}
 8007bac:	b083      	sub	sp, #12
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007bb2:	bf00      	nop
 8007bb4:	370c      	adds	r7, #12
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bc80      	pop	{r7}
 8007bba:	4770      	bx	lr

08007bbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68da      	ldr	r2, [r3, #12]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f042 0201 	orr.w	r2, r2, #1
 8007bd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	f003 0307 	and.w	r3, r3, #7
 8007bde:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2b06      	cmp	r3, #6
 8007be4:	d007      	beq.n	8007bf6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f042 0201 	orr.w	r2, r2, #1
 8007bf4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3714      	adds	r7, #20
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bc80      	pop	{r7}
 8007c00:	4770      	bx	lr

08007c02 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b082      	sub	sp, #8
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	f003 0302 	and.w	r3, r3, #2
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	d122      	bne.n	8007c5e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	f003 0302 	and.w	r3, r3, #2
 8007c22:	2b02      	cmp	r3, #2
 8007c24:	d11b      	bne.n	8007c5e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f06f 0202 	mvn.w	r2, #2
 8007c2e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	699b      	ldr	r3, [r3, #24]
 8007c3c:	f003 0303 	and.w	r3, r3, #3
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d003      	beq.n	8007c4c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 f8ed 	bl	8007e24 <HAL_TIM_IC_CaptureCallback>
 8007c4a:	e005      	b.n	8007c58 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 f8e0 	bl	8007e12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 f8ef 	bl	8007e36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	f003 0304 	and.w	r3, r3, #4
 8007c68:	2b04      	cmp	r3, #4
 8007c6a:	d122      	bne.n	8007cb2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	f003 0304 	and.w	r3, r3, #4
 8007c76:	2b04      	cmp	r3, #4
 8007c78:	d11b      	bne.n	8007cb2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f06f 0204 	mvn.w	r2, #4
 8007c82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2202      	movs	r2, #2
 8007c88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	699b      	ldr	r3, [r3, #24]
 8007c90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d003      	beq.n	8007ca0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 f8c3 	bl	8007e24 <HAL_TIM_IC_CaptureCallback>
 8007c9e:	e005      	b.n	8007cac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 f8b6 	bl	8007e12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 f8c5 	bl	8007e36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	f003 0308 	and.w	r3, r3, #8
 8007cbc:	2b08      	cmp	r3, #8
 8007cbe:	d122      	bne.n	8007d06 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	f003 0308 	and.w	r3, r3, #8
 8007cca:	2b08      	cmp	r3, #8
 8007ccc:	d11b      	bne.n	8007d06 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f06f 0208 	mvn.w	r2, #8
 8007cd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2204      	movs	r2, #4
 8007cdc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	69db      	ldr	r3, [r3, #28]
 8007ce4:	f003 0303 	and.w	r3, r3, #3
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d003      	beq.n	8007cf4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 f899 	bl	8007e24 <HAL_TIM_IC_CaptureCallback>
 8007cf2:	e005      	b.n	8007d00 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f88c 	bl	8007e12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 f89b 	bl	8007e36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	691b      	ldr	r3, [r3, #16]
 8007d0c:	f003 0310 	and.w	r3, r3, #16
 8007d10:	2b10      	cmp	r3, #16
 8007d12:	d122      	bne.n	8007d5a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	f003 0310 	and.w	r3, r3, #16
 8007d1e:	2b10      	cmp	r3, #16
 8007d20:	d11b      	bne.n	8007d5a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f06f 0210 	mvn.w	r2, #16
 8007d2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2208      	movs	r2, #8
 8007d30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	69db      	ldr	r3, [r3, #28]
 8007d38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d003      	beq.n	8007d48 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f86f 	bl	8007e24 <HAL_TIM_IC_CaptureCallback>
 8007d46:	e005      	b.n	8007d54 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 f862 	bl	8007e12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 f871 	bl	8007e36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	f003 0301 	and.w	r3, r3, #1
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d10e      	bne.n	8007d86 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	f003 0301 	and.w	r3, r3, #1
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d107      	bne.n	8007d86 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f06f 0201 	mvn.w	r2, #1
 8007d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f7fb f901 	bl	8002f88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	691b      	ldr	r3, [r3, #16]
 8007d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d90:	2b80      	cmp	r3, #128	; 0x80
 8007d92:	d10e      	bne.n	8007db2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d9e:	2b80      	cmp	r3, #128	; 0x80
 8007da0:	d107      	bne.n	8007db2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007daa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 f8c0 	bl	8007f32 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dbc:	2b40      	cmp	r3, #64	; 0x40
 8007dbe:	d10e      	bne.n	8007dde <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dca:	2b40      	cmp	r3, #64	; 0x40
 8007dcc:	d107      	bne.n	8007dde <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 f835 	bl	8007e48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	f003 0320 	and.w	r3, r3, #32
 8007de8:	2b20      	cmp	r3, #32
 8007dea:	d10e      	bne.n	8007e0a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	f003 0320 	and.w	r3, r3, #32
 8007df6:	2b20      	cmp	r3, #32
 8007df8:	d107      	bne.n	8007e0a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f06f 0220 	mvn.w	r2, #32
 8007e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 f88b 	bl	8007f20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e0a:	bf00      	nop
 8007e0c:	3708      	adds	r7, #8
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e12:	b480      	push	{r7}
 8007e14:	b083      	sub	sp, #12
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e1a:	bf00      	nop
 8007e1c:	370c      	adds	r7, #12
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bc80      	pop	{r7}
 8007e22:	4770      	bx	lr

08007e24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e2c:	bf00      	nop
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bc80      	pop	{r7}
 8007e34:	4770      	bx	lr

08007e36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e36:	b480      	push	{r7}
 8007e38:	b083      	sub	sp, #12
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e3e:	bf00      	nop
 8007e40:	370c      	adds	r7, #12
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bc80      	pop	{r7}
 8007e46:	4770      	bx	lr

08007e48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e50:	bf00      	nop
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bc80      	pop	{r7}
 8007e58:	4770      	bx	lr
	...

08007e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b085      	sub	sp, #20
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4a29      	ldr	r2, [pc, #164]	; (8007f14 <TIM_Base_SetConfig+0xb8>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d00b      	beq.n	8007e8c <TIM_Base_SetConfig+0x30>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e7a:	d007      	beq.n	8007e8c <TIM_Base_SetConfig+0x30>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	4a26      	ldr	r2, [pc, #152]	; (8007f18 <TIM_Base_SetConfig+0xbc>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d003      	beq.n	8007e8c <TIM_Base_SetConfig+0x30>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	4a25      	ldr	r2, [pc, #148]	; (8007f1c <TIM_Base_SetConfig+0xc0>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d108      	bne.n	8007e9e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a1c      	ldr	r2, [pc, #112]	; (8007f14 <TIM_Base_SetConfig+0xb8>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d00b      	beq.n	8007ebe <TIM_Base_SetConfig+0x62>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eac:	d007      	beq.n	8007ebe <TIM_Base_SetConfig+0x62>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a19      	ldr	r2, [pc, #100]	; (8007f18 <TIM_Base_SetConfig+0xbc>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d003      	beq.n	8007ebe <TIM_Base_SetConfig+0x62>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a18      	ldr	r2, [pc, #96]	; (8007f1c <TIM_Base_SetConfig+0xc0>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d108      	bne.n	8007ed0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	689a      	ldr	r2, [r3, #8]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a07      	ldr	r2, [pc, #28]	; (8007f14 <TIM_Base_SetConfig+0xb8>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d103      	bne.n	8007f04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	691a      	ldr	r2, [r3, #16]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	615a      	str	r2, [r3, #20]
}
 8007f0a:	bf00      	nop
 8007f0c:	3714      	adds	r7, #20
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bc80      	pop	{r7}
 8007f12:	4770      	bx	lr
 8007f14:	40012c00 	.word	0x40012c00
 8007f18:	40000400 	.word	0x40000400
 8007f1c:	40000800 	.word	0x40000800

08007f20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bc80      	pop	{r7}
 8007f30:	4770      	bx	lr

08007f32 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b083      	sub	sp, #12
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f3a:	bf00      	nop
 8007f3c:	370c      	adds	r7, #12
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bc80      	pop	{r7}
 8007f42:	4770      	bx	lr

08007f44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e03f      	b.n	8007fd6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d106      	bne.n	8007f70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f7fb f8de 	bl	800312c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2224      	movs	r2, #36	; 0x24
 8007f74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	68da      	ldr	r2, [r3, #12]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fcb5 	bl	80088f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	691a      	ldr	r2, [r3, #16]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	695a      	ldr	r2, [r3, #20]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	68da      	ldr	r2, [r3, #12]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2220      	movs	r2, #32
 8007fd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b088      	sub	sp, #32
 8007fe2:	af02      	add	r7, sp, #8
 8007fe4:	60f8      	str	r0, [r7, #12]
 8007fe6:	60b9      	str	r1, [r7, #8]
 8007fe8:	603b      	str	r3, [r7, #0]
 8007fea:	4613      	mov	r3, r2
 8007fec:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	2b20      	cmp	r3, #32
 8007ffc:	f040 8083 	bne.w	8008106 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d002      	beq.n	800800c <HAL_UART_Transmit+0x2e>
 8008006:	88fb      	ldrh	r3, [r7, #6]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d101      	bne.n	8008010 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	e07b      	b.n	8008108 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008016:	2b01      	cmp	r3, #1
 8008018:	d101      	bne.n	800801e <HAL_UART_Transmit+0x40>
 800801a:	2302      	movs	r3, #2
 800801c:	e074      	b.n	8008108 <HAL_UART_Transmit+0x12a>
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2201      	movs	r2, #1
 8008022:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2200      	movs	r2, #0
 800802a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2221      	movs	r2, #33	; 0x21
 8008030:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008034:	f7fb fa6c 	bl	8003510 <HAL_GetTick>
 8008038:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	88fa      	ldrh	r2, [r7, #6]
 800803e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	88fa      	ldrh	r2, [r7, #6]
 8008044:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008046:	e042      	b.n	80080ce <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800804c:	b29b      	uxth	r3, r3
 800804e:	3b01      	subs	r3, #1
 8008050:	b29a      	uxth	r2, r3
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800805e:	d122      	bne.n	80080a6 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	9300      	str	r3, [sp, #0]
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	2200      	movs	r2, #0
 8008068:	2180      	movs	r1, #128	; 0x80
 800806a:	68f8      	ldr	r0, [r7, #12]
 800806c:	f000 fac6 	bl	80085fc <UART_WaitOnFlagUntilTimeout>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d001      	beq.n	800807a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8008076:	2303      	movs	r3, #3
 8008078:	e046      	b.n	8008108 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	881b      	ldrh	r3, [r3, #0]
 8008082:	461a      	mov	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800808c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d103      	bne.n	800809e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	3302      	adds	r3, #2
 800809a:	60bb      	str	r3, [r7, #8]
 800809c:	e017      	b.n	80080ce <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	3301      	adds	r3, #1
 80080a2:	60bb      	str	r3, [r7, #8]
 80080a4:	e013      	b.n	80080ce <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	9300      	str	r3, [sp, #0]
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	2200      	movs	r2, #0
 80080ae:	2180      	movs	r1, #128	; 0x80
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f000 faa3 	bl	80085fc <UART_WaitOnFlagUntilTimeout>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d001      	beq.n	80080c0 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80080bc:	2303      	movs	r3, #3
 80080be:	e023      	b.n	8008108 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	1c5a      	adds	r2, r3, #1
 80080c4:	60ba      	str	r2, [r7, #8]
 80080c6:	781a      	ldrb	r2, [r3, #0]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1b7      	bne.n	8008048 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	2200      	movs	r2, #0
 80080e0:	2140      	movs	r1, #64	; 0x40
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f000 fa8a 	bl	80085fc <UART_WaitOnFlagUntilTimeout>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d001      	beq.n	80080f2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80080ee:	2303      	movs	r3, #3
 80080f0:	e00a      	b.n	8008108 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2220      	movs	r2, #32
 80080f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8008102:	2300      	movs	r3, #0
 8008104:	e000      	b.n	8008108 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008106:	2302      	movs	r3, #2
  }
}
 8008108:	4618      	mov	r0, r3
 800810a:	3718      	adds	r7, #24
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b086      	sub	sp, #24
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	4613      	mov	r3, r2
 800811c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008124:	b2db      	uxtb	r3, r3
 8008126:	2b20      	cmp	r3, #32
 8008128:	d166      	bne.n	80081f8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d002      	beq.n	8008136 <HAL_UART_Receive_DMA+0x26>
 8008130:	88fb      	ldrh	r3, [r7, #6]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d101      	bne.n	800813a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	e05f      	b.n	80081fa <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008140:	2b01      	cmp	r3, #1
 8008142:	d101      	bne.n	8008148 <HAL_UART_Receive_DMA+0x38>
 8008144:	2302      	movs	r3, #2
 8008146:	e058      	b.n	80081fa <HAL_UART_Receive_DMA+0xea>
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008150:	68ba      	ldr	r2, [r7, #8]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	88fa      	ldrh	r2, [r7, #6]
 800815a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2222      	movs	r2, #34	; 0x22
 8008166:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800816e:	4a25      	ldr	r2, [pc, #148]	; (8008204 <HAL_UART_Receive_DMA+0xf4>)
 8008170:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008176:	4a24      	ldr	r2, [pc, #144]	; (8008208 <HAL_UART_Receive_DMA+0xf8>)
 8008178:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800817e:	4a23      	ldr	r2, [pc, #140]	; (800820c <HAL_UART_Receive_DMA+0xfc>)
 8008180:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008186:	2200      	movs	r2, #0
 8008188:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 800818a:	f107 0308 	add.w	r3, r7, #8
 800818e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	3304      	adds	r3, #4
 800819a:	4619      	mov	r1, r3
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	88fb      	ldrh	r3, [r7, #6]
 80081a2:	f7fb fb1b 	bl	80037dc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80081a6:	2300      	movs	r3, #0
 80081a8:	613b      	str	r3, [r7, #16]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	613b      	str	r3, [r7, #16]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	613b      	str	r3, [r7, #16]
 80081ba:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68da      	ldr	r2, [r3, #12]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081d2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	695a      	ldr	r2, [r3, #20]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f042 0201 	orr.w	r2, r2, #1
 80081e2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	695a      	ldr	r2, [r3, #20]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081f2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80081f4:	2300      	movs	r3, #0
 80081f6:	e000      	b.n	80081fa <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80081f8:	2302      	movs	r3, #2
  }
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3718      	adds	r7, #24
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	080084e5 	.word	0x080084e5
 8008208:	0800854d 	.word	0x0800854d
 800820c:	08008569 	.word	0x08008569

08008210 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008218:	2300      	movs	r3, #0
 800821a:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	695b      	ldr	r3, [r3, #20]
 8008222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008226:	2b00      	cmp	r3, #0
 8008228:	bf14      	ite	ne
 800822a:	2301      	movne	r3, #1
 800822c:	2300      	moveq	r3, #0
 800822e:	b2db      	uxtb	r3, r3
 8008230:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008238:	b2db      	uxtb	r3, r3
 800823a:	2b21      	cmp	r3, #33	; 0x21
 800823c:	d116      	bne.n	800826c <HAL_UART_DMAStop+0x5c>
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d013      	beq.n	800826c <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	695a      	ldr	r2, [r3, #20]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008252:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008258:	2b00      	cmp	r3, #0
 800825a:	d004      	beq.n	8008266 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008260:	4618      	mov	r0, r3
 8008262:	f7fb fb1a 	bl	800389a <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fa12 	bl	8008690 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	695b      	ldr	r3, [r3, #20]
 8008272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008276:	2b00      	cmp	r3, #0
 8008278:	bf14      	ite	ne
 800827a:	2301      	movne	r3, #1
 800827c:	2300      	moveq	r3, #0
 800827e:	b2db      	uxtb	r3, r3
 8008280:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008288:	b2db      	uxtb	r3, r3
 800828a:	2b22      	cmp	r3, #34	; 0x22
 800828c:	d116      	bne.n	80082bc <HAL_UART_DMAStop+0xac>
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d013      	beq.n	80082bc <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	695a      	ldr	r2, [r3, #20]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082a2:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d004      	beq.n	80082b6 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7fb faf2 	bl	800389a <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f9ff 	bl	80086ba <UART_EndRxTransfer>
  }

  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
	...

080082c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b088      	sub	sp, #32
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	695b      	ldr	r3, [r3, #20]
 80082e6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80082e8:	2300      	movs	r3, #0
 80082ea:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80082ec:	2300      	movs	r3, #0
 80082ee:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	f003 030f 	and.w	r3, r3, #15
 80082f6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d10d      	bne.n	800831a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	f003 0320 	and.w	r3, r3, #32
 8008304:	2b00      	cmp	r3, #0
 8008306:	d008      	beq.n	800831a <HAL_UART_IRQHandler+0x52>
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	f003 0320 	and.w	r3, r3, #32
 800830e:	2b00      	cmp	r3, #0
 8008310:	d003      	beq.n	800831a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 fa6f 	bl	80087f6 <UART_Receive_IT>
      return;
 8008318:	e0cc      	b.n	80084b4 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	2b00      	cmp	r3, #0
 800831e:	f000 80ab 	beq.w	8008478 <HAL_UART_IRQHandler+0x1b0>
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	f003 0301 	and.w	r3, r3, #1
 8008328:	2b00      	cmp	r3, #0
 800832a:	d105      	bne.n	8008338 <HAL_UART_IRQHandler+0x70>
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008332:	2b00      	cmp	r3, #0
 8008334:	f000 80a0 	beq.w	8008478 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	f003 0301 	and.w	r3, r3, #1
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00a      	beq.n	8008358 <HAL_UART_IRQHandler+0x90>
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008348:	2b00      	cmp	r3, #0
 800834a:	d005      	beq.n	8008358 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008350:	f043 0201 	orr.w	r2, r3, #1
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	f003 0304 	and.w	r3, r3, #4
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00a      	beq.n	8008378 <HAL_UART_IRQHandler+0xb0>
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	f003 0301 	and.w	r3, r3, #1
 8008368:	2b00      	cmp	r3, #0
 800836a:	d005      	beq.n	8008378 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008370:	f043 0202 	orr.w	r2, r3, #2
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	f003 0302 	and.w	r3, r3, #2
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00a      	beq.n	8008398 <HAL_UART_IRQHandler+0xd0>
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	f003 0301 	and.w	r3, r3, #1
 8008388:	2b00      	cmp	r3, #0
 800838a:	d005      	beq.n	8008398 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008390:	f043 0204 	orr.w	r2, r3, #4
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	f003 0308 	and.w	r3, r3, #8
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00a      	beq.n	80083b8 <HAL_UART_IRQHandler+0xf0>
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	f003 0301 	and.w	r3, r3, #1
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d005      	beq.n	80083b8 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083b0:	f043 0208 	orr.w	r2, r3, #8
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d078      	beq.n	80084b2 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	f003 0320 	and.w	r3, r3, #32
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d007      	beq.n	80083da <HAL_UART_IRQHandler+0x112>
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	f003 0320 	and.w	r3, r3, #32
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d002      	beq.n	80083da <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fa0e 	bl	80087f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	695b      	ldr	r3, [r3, #20]
 80083e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	bf14      	ite	ne
 80083e8:	2301      	movne	r3, #1
 80083ea:	2300      	moveq	r3, #0
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083f4:	f003 0308 	and.w	r3, r3, #8
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d102      	bne.n	8008402 <HAL_UART_IRQHandler+0x13a>
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d031      	beq.n	8008466 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f959 	bl	80086ba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	695b      	ldr	r3, [r3, #20]
 800840e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008412:	2b00      	cmp	r3, #0
 8008414:	d023      	beq.n	800845e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	695a      	ldr	r2, [r3, #20]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008424:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800842a:	2b00      	cmp	r3, #0
 800842c:	d013      	beq.n	8008456 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008432:	4a22      	ldr	r2, [pc, #136]	; (80084bc <HAL_UART_IRQHandler+0x1f4>)
 8008434:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800843a:	4618      	mov	r0, r3
 800843c:	f7fb fa68 	bl	8003910 <HAL_DMA_Abort_IT>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d016      	beq.n	8008474 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800844a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008450:	4610      	mov	r0, r2
 8008452:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008454:	e00e      	b.n	8008474 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f83b 	bl	80084d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800845c:	e00a      	b.n	8008474 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f837 	bl	80084d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008464:	e006      	b.n	8008474 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 f833 	bl	80084d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008472:	e01e      	b.n	80084b2 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008474:	bf00      	nop
    return;
 8008476:	e01c      	b.n	80084b2 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008478:	69fb      	ldr	r3, [r7, #28]
 800847a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800847e:	2b00      	cmp	r3, #0
 8008480:	d008      	beq.n	8008494 <HAL_UART_IRQHandler+0x1cc>
 8008482:	69bb      	ldr	r3, [r7, #24]
 8008484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008488:	2b00      	cmp	r3, #0
 800848a:	d003      	beq.n	8008494 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 f945 	bl	800871c <UART_Transmit_IT>
    return;
 8008492:	e00f      	b.n	80084b4 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008494:	69fb      	ldr	r3, [r7, #28]
 8008496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00a      	beq.n	80084b4 <HAL_UART_IRQHandler+0x1ec>
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d005      	beq.n	80084b4 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 f98c 	bl	80087c6 <UART_EndTransmit_IT>
    return;
 80084ae:	bf00      	nop
 80084b0:	e000      	b.n	80084b4 <HAL_UART_IRQHandler+0x1ec>
    return;
 80084b2:	bf00      	nop
  }
}
 80084b4:	3720      	adds	r7, #32
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	080086f5 	.word	0x080086f5

080084c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80084c8:	bf00      	nop
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bc80      	pop	{r7}
 80084d0:	4770      	bx	lr

080084d2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80084d2:	b480      	push	{r7}
 80084d4:	b083      	sub	sp, #12
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80084da:	bf00      	nop
 80084dc:	370c      	adds	r7, #12
 80084de:	46bd      	mov	sp, r7
 80084e0:	bc80      	pop	{r7}
 80084e2:	4770      	bx	lr

080084e4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f003 0320 	and.w	r3, r3, #32
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d11e      	bne.n	800853e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2200      	movs	r2, #0
 8008504:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68da      	ldr	r2, [r3, #12]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008514:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	695a      	ldr	r2, [r3, #20]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f022 0201 	bic.w	r2, r2, #1
 8008524:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	695a      	ldr	r2, [r3, #20]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008534:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2220      	movs	r2, #32
 800853a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f7fa fb60 	bl	8002c04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008544:	bf00      	nop
 8008546:	3710      	adds	r7, #16
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008558:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f7fa fb5c 	bl	8002c18 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008560:	bf00      	nop
 8008562:	3710      	adds	r7, #16
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008570:	2300      	movs	r3, #0
 8008572:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008578:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	695b      	ldr	r3, [r3, #20]
 8008580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008584:	2b00      	cmp	r3, #0
 8008586:	bf14      	ite	ne
 8008588:	2301      	movne	r3, #1
 800858a:	2300      	moveq	r3, #0
 800858c:	b2db      	uxtb	r3, r3
 800858e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008596:	b2db      	uxtb	r3, r3
 8008598:	2b21      	cmp	r3, #33	; 0x21
 800859a:	d108      	bne.n	80085ae <UART_DMAError+0x46>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d005      	beq.n	80085ae <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	2200      	movs	r2, #0
 80085a6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80085a8:	68b8      	ldr	r0, [r7, #8]
 80085aa:	f000 f871 	bl	8008690 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	695b      	ldr	r3, [r3, #20]
 80085b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	bf14      	ite	ne
 80085bc:	2301      	movne	r3, #1
 80085be:	2300      	moveq	r3, #0
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	2b22      	cmp	r3, #34	; 0x22
 80085ce:	d108      	bne.n	80085e2 <UART_DMAError+0x7a>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d005      	beq.n	80085e2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	2200      	movs	r2, #0
 80085da:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80085dc:	68b8      	ldr	r0, [r7, #8]
 80085de:	f000 f86c 	bl	80086ba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085e6:	f043 0210 	orr.w	r2, r3, #16
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085ee:	68b8      	ldr	r0, [r7, #8]
 80085f0:	f7ff ff6f 	bl	80084d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085f4:	bf00      	nop
 80085f6:	3710      	adds	r7, #16
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	603b      	str	r3, [r7, #0]
 8008608:	4613      	mov	r3, r2
 800860a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800860c:	e02c      	b.n	8008668 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008614:	d028      	beq.n	8008668 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d007      	beq.n	800862c <UART_WaitOnFlagUntilTimeout+0x30>
 800861c:	f7fa ff78 	bl	8003510 <HAL_GetTick>
 8008620:	4602      	mov	r2, r0
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	1ad3      	subs	r3, r2, r3
 8008626:	69ba      	ldr	r2, [r7, #24]
 8008628:	429a      	cmp	r2, r3
 800862a:	d21d      	bcs.n	8008668 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	68da      	ldr	r2, [r3, #12]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800863a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	695a      	ldr	r2, [r3, #20]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f022 0201 	bic.w	r2, r2, #1
 800864a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2220      	movs	r2, #32
 8008650:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2220      	movs	r2, #32
 8008658:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2200      	movs	r2, #0
 8008660:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008664:	2303      	movs	r3, #3
 8008666:	e00f      	b.n	8008688 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	4013      	ands	r3, r2
 8008672:	68ba      	ldr	r2, [r7, #8]
 8008674:	429a      	cmp	r2, r3
 8008676:	bf0c      	ite	eq
 8008678:	2301      	moveq	r3, #1
 800867a:	2300      	movne	r3, #0
 800867c:	b2db      	uxtb	r3, r3
 800867e:	461a      	mov	r2, r3
 8008680:	79fb      	ldrb	r3, [r7, #7]
 8008682:	429a      	cmp	r2, r3
 8008684:	d0c3      	beq.n	800860e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	68da      	ldr	r2, [r3, #12]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80086a6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2220      	movs	r2, #32
 80086ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80086b0:	bf00      	nop
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bc80      	pop	{r7}
 80086b8:	4770      	bx	lr

080086ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086ba:	b480      	push	{r7}
 80086bc:	b083      	sub	sp, #12
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	68da      	ldr	r2, [r3, #12]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80086d0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	695a      	ldr	r2, [r3, #20]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f022 0201 	bic.w	r2, r2, #1
 80086e0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2220      	movs	r2, #32
 80086e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80086ea:	bf00      	nop
 80086ec:	370c      	adds	r7, #12
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bc80      	pop	{r7}
 80086f2:	4770      	bx	lr

080086f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008700:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2200      	movs	r2, #0
 8008706:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2200      	movs	r2, #0
 800870c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800870e:	68f8      	ldr	r0, [r7, #12]
 8008710:	f7ff fedf 	bl	80084d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008714:	bf00      	nop
 8008716:	3710      	adds	r7, #16
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800872a:	b2db      	uxtb	r3, r3
 800872c:	2b21      	cmp	r3, #33	; 0x21
 800872e:	d144      	bne.n	80087ba <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008738:	d11a      	bne.n	8008770 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a1b      	ldr	r3, [r3, #32]
 800873e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	881b      	ldrh	r3, [r3, #0]
 8008744:	461a      	mov	r2, r3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800874e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	691b      	ldr	r3, [r3, #16]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d105      	bne.n	8008764 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6a1b      	ldr	r3, [r3, #32]
 800875c:	1c9a      	adds	r2, r3, #2
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	621a      	str	r2, [r3, #32]
 8008762:	e00e      	b.n	8008782 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6a1b      	ldr	r3, [r3, #32]
 8008768:	1c5a      	adds	r2, r3, #1
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	621a      	str	r2, [r3, #32]
 800876e:	e008      	b.n	8008782 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a1b      	ldr	r3, [r3, #32]
 8008774:	1c59      	adds	r1, r3, #1
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	6211      	str	r1, [r2, #32]
 800877a:	781a      	ldrb	r2, [r3, #0]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008786:	b29b      	uxth	r3, r3
 8008788:	3b01      	subs	r3, #1
 800878a:	b29b      	uxth	r3, r3
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	4619      	mov	r1, r3
 8008790:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008792:	2b00      	cmp	r3, #0
 8008794:	d10f      	bne.n	80087b6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	68da      	ldr	r2, [r3, #12]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68da      	ldr	r2, [r3, #12]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80087b6:	2300      	movs	r3, #0
 80087b8:	e000      	b.n	80087bc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80087ba:	2302      	movs	r3, #2
  }
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3714      	adds	r7, #20
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bc80      	pop	{r7}
 80087c4:	4770      	bx	lr

080087c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b082      	sub	sp, #8
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68da      	ldr	r2, [r3, #12]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2220      	movs	r2, #32
 80087e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f7ff fe6a 	bl	80084c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3708      	adds	r7, #8
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b084      	sub	sp, #16
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008804:	b2db      	uxtb	r3, r3
 8008806:	2b22      	cmp	r3, #34	; 0x22
 8008808:	d171      	bne.n	80088ee <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008812:	d123      	bne.n	800885c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008818:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d10e      	bne.n	8008840 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	b29b      	uxth	r3, r3
 800882a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800882e:	b29a      	uxth	r2, r3
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008838:	1c9a      	adds	r2, r3, #2
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	629a      	str	r2, [r3, #40]	; 0x28
 800883e:	e029      	b.n	8008894 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	b29b      	uxth	r3, r3
 8008848:	b2db      	uxtb	r3, r3
 800884a:	b29a      	uxth	r2, r3
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008854:	1c5a      	adds	r2, r3, #1
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	629a      	str	r2, [r3, #40]	; 0x28
 800885a:	e01b      	b.n	8008894 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d10a      	bne.n	800887a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	6858      	ldr	r0, [r3, #4]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800886e:	1c59      	adds	r1, r3, #1
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	6291      	str	r1, [r2, #40]	; 0x28
 8008874:	b2c2      	uxtb	r2, r0
 8008876:	701a      	strb	r2, [r3, #0]
 8008878:	e00c      	b.n	8008894 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	b2da      	uxtb	r2, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008886:	1c58      	adds	r0, r3, #1
 8008888:	6879      	ldr	r1, [r7, #4]
 800888a:	6288      	str	r0, [r1, #40]	; 0x28
 800888c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008890:	b2d2      	uxtb	r2, r2
 8008892:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008898:	b29b      	uxth	r3, r3
 800889a:	3b01      	subs	r3, #1
 800889c:	b29b      	uxth	r3, r3
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	4619      	mov	r1, r3
 80088a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d120      	bne.n	80088ea <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68da      	ldr	r2, [r3, #12]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f022 0220 	bic.w	r2, r2, #32
 80088b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	68da      	ldr	r2, [r3, #12]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80088c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	695a      	ldr	r2, [r3, #20]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f022 0201 	bic.w	r2, r2, #1
 80088d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2220      	movs	r2, #32
 80088dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f7fa f98f 	bl	8002c04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80088e6:	2300      	movs	r3, #0
 80088e8:	e002      	b.n	80088f0 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80088ea:	2300      	movs	r3, #0
 80088ec:	e000      	b.n	80088f0 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80088ee:	2302      	movs	r3, #2
  }
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3710      	adds	r7, #16
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	68da      	ldr	r2, [r3, #12]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	430a      	orrs	r2, r1
 8008914:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	689a      	ldr	r2, [r3, #8]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	691b      	ldr	r3, [r3, #16]
 800891e:	431a      	orrs	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	695b      	ldr	r3, [r3, #20]
 8008924:	4313      	orrs	r3, r2
 8008926:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	68db      	ldr	r3, [r3, #12]
 800892e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008932:	f023 030c 	bic.w	r3, r3, #12
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	6812      	ldr	r2, [r2, #0]
 800893a:	68f9      	ldr	r1, [r7, #12]
 800893c:	430b      	orrs	r3, r1
 800893e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	695b      	ldr	r3, [r3, #20]
 8008946:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	699a      	ldr	r2, [r3, #24]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	430a      	orrs	r2, r1
 8008954:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a52      	ldr	r2, [pc, #328]	; (8008aa4 <UART_SetConfig+0x1ac>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d14e      	bne.n	80089fe <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008960:	f7fe fac6 	bl	8006ef0 <HAL_RCC_GetPCLK2Freq>
 8008964:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008966:	68ba      	ldr	r2, [r7, #8]
 8008968:	4613      	mov	r3, r2
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	4413      	add	r3, r2
 800896e:	009a      	lsls	r2, r3, #2
 8008970:	441a      	add	r2, r3
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	fbb2 f3f3 	udiv	r3, r2, r3
 800897c:	4a4a      	ldr	r2, [pc, #296]	; (8008aa8 <UART_SetConfig+0x1b0>)
 800897e:	fba2 2303 	umull	r2, r3, r2, r3
 8008982:	095b      	lsrs	r3, r3, #5
 8008984:	0119      	lsls	r1, r3, #4
 8008986:	68ba      	ldr	r2, [r7, #8]
 8008988:	4613      	mov	r3, r2
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	4413      	add	r3, r2
 800898e:	009a      	lsls	r2, r3, #2
 8008990:	441a      	add	r2, r3
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	fbb2 f2f3 	udiv	r2, r2, r3
 800899c:	4b42      	ldr	r3, [pc, #264]	; (8008aa8 <UART_SetConfig+0x1b0>)
 800899e:	fba3 0302 	umull	r0, r3, r3, r2
 80089a2:	095b      	lsrs	r3, r3, #5
 80089a4:	2064      	movs	r0, #100	; 0x64
 80089a6:	fb00 f303 	mul.w	r3, r0, r3
 80089aa:	1ad3      	subs	r3, r2, r3
 80089ac:	011b      	lsls	r3, r3, #4
 80089ae:	3332      	adds	r3, #50	; 0x32
 80089b0:	4a3d      	ldr	r2, [pc, #244]	; (8008aa8 <UART_SetConfig+0x1b0>)
 80089b2:	fba2 2303 	umull	r2, r3, r2, r3
 80089b6:	095b      	lsrs	r3, r3, #5
 80089b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80089bc:	4419      	add	r1, r3
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	4613      	mov	r3, r2
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	4413      	add	r3, r2
 80089c6:	009a      	lsls	r2, r3, #2
 80089c8:	441a      	add	r2, r3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80089d4:	4b34      	ldr	r3, [pc, #208]	; (8008aa8 <UART_SetConfig+0x1b0>)
 80089d6:	fba3 0302 	umull	r0, r3, r3, r2
 80089da:	095b      	lsrs	r3, r3, #5
 80089dc:	2064      	movs	r0, #100	; 0x64
 80089de:	fb00 f303 	mul.w	r3, r0, r3
 80089e2:	1ad3      	subs	r3, r2, r3
 80089e4:	011b      	lsls	r3, r3, #4
 80089e6:	3332      	adds	r3, #50	; 0x32
 80089e8:	4a2f      	ldr	r2, [pc, #188]	; (8008aa8 <UART_SetConfig+0x1b0>)
 80089ea:	fba2 2303 	umull	r2, r3, r2, r3
 80089ee:	095b      	lsrs	r3, r3, #5
 80089f0:	f003 020f 	and.w	r2, r3, #15
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	440a      	add	r2, r1
 80089fa:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80089fc:	e04d      	b.n	8008a9a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80089fe:	f7fe fa63 	bl	8006ec8 <HAL_RCC_GetPCLK1Freq>
 8008a02:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008a04:	68ba      	ldr	r2, [r7, #8]
 8008a06:	4613      	mov	r3, r2
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	4413      	add	r3, r2
 8008a0c:	009a      	lsls	r2, r3, #2
 8008a0e:	441a      	add	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a1a:	4a23      	ldr	r2, [pc, #140]	; (8008aa8 <UART_SetConfig+0x1b0>)
 8008a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a20:	095b      	lsrs	r3, r3, #5
 8008a22:	0119      	lsls	r1, r3, #4
 8008a24:	68ba      	ldr	r2, [r7, #8]
 8008a26:	4613      	mov	r3, r2
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	4413      	add	r3, r2
 8008a2c:	009a      	lsls	r2, r3, #2
 8008a2e:	441a      	add	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	fbb2 f2f3 	udiv	r2, r2, r3
 8008a3a:	4b1b      	ldr	r3, [pc, #108]	; (8008aa8 <UART_SetConfig+0x1b0>)
 8008a3c:	fba3 0302 	umull	r0, r3, r3, r2
 8008a40:	095b      	lsrs	r3, r3, #5
 8008a42:	2064      	movs	r0, #100	; 0x64
 8008a44:	fb00 f303 	mul.w	r3, r0, r3
 8008a48:	1ad3      	subs	r3, r2, r3
 8008a4a:	011b      	lsls	r3, r3, #4
 8008a4c:	3332      	adds	r3, #50	; 0x32
 8008a4e:	4a16      	ldr	r2, [pc, #88]	; (8008aa8 <UART_SetConfig+0x1b0>)
 8008a50:	fba2 2303 	umull	r2, r3, r2, r3
 8008a54:	095b      	lsrs	r3, r3, #5
 8008a56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a5a:	4419      	add	r1, r3
 8008a5c:	68ba      	ldr	r2, [r7, #8]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	4413      	add	r3, r2
 8008a64:	009a      	lsls	r2, r3, #2
 8008a66:	441a      	add	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008a72:	4b0d      	ldr	r3, [pc, #52]	; (8008aa8 <UART_SetConfig+0x1b0>)
 8008a74:	fba3 0302 	umull	r0, r3, r3, r2
 8008a78:	095b      	lsrs	r3, r3, #5
 8008a7a:	2064      	movs	r0, #100	; 0x64
 8008a7c:	fb00 f303 	mul.w	r3, r0, r3
 8008a80:	1ad3      	subs	r3, r2, r3
 8008a82:	011b      	lsls	r3, r3, #4
 8008a84:	3332      	adds	r3, #50	; 0x32
 8008a86:	4a08      	ldr	r2, [pc, #32]	; (8008aa8 <UART_SetConfig+0x1b0>)
 8008a88:	fba2 2303 	umull	r2, r3, r2, r3
 8008a8c:	095b      	lsrs	r3, r3, #5
 8008a8e:	f003 020f 	and.w	r2, r3, #15
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	440a      	add	r2, r1
 8008a98:	609a      	str	r2, [r3, #8]
}
 8008a9a:	bf00      	nop
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	40013800 	.word	0x40013800
 8008aa8:	51eb851f 	.word	0x51eb851f

08008aac <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008aac:	b084      	sub	sp, #16
 8008aae:	b480      	push	{r7}
 8008ab0:	b083      	sub	sp, #12
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
 8008ab6:	f107 0014 	add.w	r0, r7, #20
 8008aba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bc80      	pop	{r7}
 8008ac8:	b004      	add	sp, #16
 8008aca:	4770      	bx	lr

08008acc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b085      	sub	sp, #20
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008ad4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008ad8:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008ae0:	b29a      	uxth	r2, r3
 8008ae2:	89fb      	ldrh	r3, [r7, #14]
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	b29a      	uxth	r2, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3714      	adds	r7, #20
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bc80      	pop	{r7}
 8008af8:	4770      	bx	lr

08008afa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008afa:	b480      	push	{r7}
 8008afc:	b085      	sub	sp, #20
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008b02:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008b06:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	b21a      	sxth	r2, r3
 8008b12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008b16:	43db      	mvns	r3, r3
 8008b18:	b21b      	sxth	r3, r3
 8008b1a:	4013      	ands	r3, r2
 8008b1c:	b21b      	sxth	r3, r3
 8008b1e:	b29a      	uxth	r2, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3714      	adds	r7, #20
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bc80      	pop	{r7}
 8008b30:	4770      	bx	lr

08008b32 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8008b32:	b480      	push	{r7}
 8008b34:	b083      	sub	sp, #12
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bc80      	pop	{r7}
 8008b48:	4770      	bx	lr

08008b4a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	f107 0014 	add.w	r0, r7, #20
 8008b58:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f7ff ffa5 	bl	8008acc <USB_EnableGlobalInt>

  return HAL_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3708      	adds	r7, #8
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b8e:	b004      	add	sp, #16
 8008b90:	4770      	bx	lr
	...

08008b94 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b94:	b490      	push	{r4, r7}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	4413      	add	r3, r2
 8008bac:	881b      	ldrh	r3, [r3, #0]
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bb8:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	78db      	ldrb	r3, [r3, #3]
 8008bbe:	2b03      	cmp	r3, #3
 8008bc0:	d819      	bhi.n	8008bf6 <USB_ActivateEndpoint+0x62>
 8008bc2:	a201      	add	r2, pc, #4	; (adr r2, 8008bc8 <USB_ActivateEndpoint+0x34>)
 8008bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc8:	08008bd9 	.word	0x08008bd9
 8008bcc:	08008bed 	.word	0x08008bed
 8008bd0:	08008bfd 	.word	0x08008bfd
 8008bd4:	08008be3 	.word	0x08008be3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008bd8:	89bb      	ldrh	r3, [r7, #12]
 8008bda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008bde:	81bb      	strh	r3, [r7, #12]
      break;
 8008be0:	e00d      	b.n	8008bfe <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008be2:	89bb      	ldrh	r3, [r7, #12]
 8008be4:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008be8:	81bb      	strh	r3, [r7, #12]
      break;
 8008bea:	e008      	b.n	8008bfe <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008bec:	89bb      	ldrh	r3, [r7, #12]
 8008bee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008bf2:	81bb      	strh	r3, [r7, #12]
      break;
 8008bf4:	e003      	b.n	8008bfe <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	73fb      	strb	r3, [r7, #15]
      break;
 8008bfa:	e000      	b.n	8008bfe <USB_ActivateEndpoint+0x6a>
      break;
 8008bfc:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	441a      	add	r2, r3
 8008c08:	89bb      	ldrh	r3, [r7, #12]
 8008c0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	4413      	add	r3, r2
 8008c28:	881b      	ldrh	r3, [r3, #0]
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c34:	b29a      	uxth	r2, r3
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	b29c      	uxth	r4, r3
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	441a      	add	r2, r3
 8008c4a:	4b8a      	ldr	r3, [pc, #552]	; (8008e74 <USB_ActivateEndpoint+0x2e0>)
 8008c4c:	4323      	orrs	r3, r4
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	7b1b      	ldrb	r3, [r3, #12]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	f040 8112 	bne.w	8008e80 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	785b      	ldrb	r3, [r3, #1]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d067      	beq.n	8008d34 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008c64:	687c      	ldr	r4, [r7, #4]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	441c      	add	r4, r3
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	011b      	lsls	r3, r3, #4
 8008c76:	4423      	add	r3, r4
 8008c78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c7c:	461c      	mov	r4, r3
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	88db      	ldrh	r3, [r3, #6]
 8008c82:	085b      	lsrs	r3, r3, #1
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	005b      	lsls	r3, r3, #1
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	4413      	add	r3, r2
 8008c96:	881b      	ldrh	r3, [r3, #0]
 8008c98:	b29c      	uxth	r4, r3
 8008c9a:	4623      	mov	r3, r4
 8008c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d014      	beq.n	8008cce <USB_ActivateEndpoint+0x13a>
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	4413      	add	r3, r2
 8008cae:	881b      	ldrh	r3, [r3, #0]
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cba:	b29c      	uxth	r4, r3
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	441a      	add	r2, r3
 8008cc6:	4b6c      	ldr	r3, [pc, #432]	; (8008e78 <USB_ActivateEndpoint+0x2e4>)
 8008cc8:	4323      	orrs	r3, r4
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	78db      	ldrb	r3, [r3, #3]
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d018      	beq.n	8008d08 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	4413      	add	r3, r2
 8008ce0:	881b      	ldrh	r3, [r3, #0]
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cec:	b29c      	uxth	r4, r3
 8008cee:	f084 0320 	eor.w	r3, r4, #32
 8008cf2:	b29c      	uxth	r4, r3
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	441a      	add	r2, r3
 8008cfe:	4b5d      	ldr	r3, [pc, #372]	; (8008e74 <USB_ActivateEndpoint+0x2e0>)
 8008d00:	4323      	orrs	r3, r4
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	8013      	strh	r3, [r2, #0]
 8008d06:	e22b      	b.n	8009160 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	4413      	add	r3, r2
 8008d12:	881b      	ldrh	r3, [r3, #0]
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d1e:	b29c      	uxth	r4, r3
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	441a      	add	r2, r3
 8008d2a:	4b52      	ldr	r3, [pc, #328]	; (8008e74 <USB_ActivateEndpoint+0x2e0>)
 8008d2c:	4323      	orrs	r3, r4
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	8013      	strh	r3, [r2, #0]
 8008d32:	e215      	b.n	8009160 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008d34:	687c      	ldr	r4, [r7, #4]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	441c      	add	r4, r3
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	011b      	lsls	r3, r3, #4
 8008d46:	4423      	add	r3, r4
 8008d48:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008d4c:	461c      	mov	r4, r3
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	88db      	ldrh	r3, [r3, #6]
 8008d52:	085b      	lsrs	r3, r3, #1
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	005b      	lsls	r3, r3, #1
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008d5c:	687c      	ldr	r4, [r7, #4]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	441c      	add	r4, r3
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	011b      	lsls	r3, r3, #4
 8008d6e:	4423      	add	r3, r4
 8008d70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008d74:	461c      	mov	r4, r3
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	691b      	ldr	r3, [r3, #16]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d10e      	bne.n	8008d9c <USB_ActivateEndpoint+0x208>
 8008d7e:	8823      	ldrh	r3, [r4, #0]
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	8023      	strh	r3, [r4, #0]
 8008d8a:	8823      	ldrh	r3, [r4, #0]
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	8023      	strh	r3, [r4, #0]
 8008d9a:	e02d      	b.n	8008df8 <USB_ActivateEndpoint+0x264>
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	691b      	ldr	r3, [r3, #16]
 8008da0:	2b3e      	cmp	r3, #62	; 0x3e
 8008da2:	d812      	bhi.n	8008dca <USB_ActivateEndpoint+0x236>
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	691b      	ldr	r3, [r3, #16]
 8008da8:	085b      	lsrs	r3, r3, #1
 8008daa:	60bb      	str	r3, [r7, #8]
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	f003 0301 	and.w	r3, r3, #1
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d002      	beq.n	8008dbe <USB_ActivateEndpoint+0x22a>
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	3301      	adds	r3, #1
 8008dbc:	60bb      	str	r3, [r7, #8]
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	029b      	lsls	r3, r3, #10
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	8023      	strh	r3, [r4, #0]
 8008dc8:	e016      	b.n	8008df8 <USB_ActivateEndpoint+0x264>
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	691b      	ldr	r3, [r3, #16]
 8008dce:	095b      	lsrs	r3, r3, #5
 8008dd0:	60bb      	str	r3, [r7, #8]
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	f003 031f 	and.w	r3, r3, #31
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d102      	bne.n	8008de4 <USB_ActivateEndpoint+0x250>
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	3b01      	subs	r3, #1
 8008de2:	60bb      	str	r3, [r7, #8]
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	029b      	lsls	r3, r3, #10
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008df0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	4413      	add	r3, r2
 8008e02:	881b      	ldrh	r3, [r3, #0]
 8008e04:	b29c      	uxth	r4, r3
 8008e06:	4623      	mov	r3, r4
 8008e08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d014      	beq.n	8008e3a <USB_ActivateEndpoint+0x2a6>
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	4413      	add	r3, r2
 8008e1a:	881b      	ldrh	r3, [r3, #0]
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e26:	b29c      	uxth	r4, r3
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	441a      	add	r2, r3
 8008e32:	4b12      	ldr	r3, [pc, #72]	; (8008e7c <USB_ActivateEndpoint+0x2e8>)
 8008e34:	4323      	orrs	r3, r4
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	4413      	add	r3, r2
 8008e44:	881b      	ldrh	r3, [r3, #0]
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e50:	b29c      	uxth	r4, r3
 8008e52:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008e56:	b29c      	uxth	r4, r3
 8008e58:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008e5c:	b29c      	uxth	r4, r3
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	441a      	add	r2, r3
 8008e68:	4b02      	ldr	r3, [pc, #8]	; (8008e74 <USB_ActivateEndpoint+0x2e0>)
 8008e6a:	4323      	orrs	r3, r4
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	8013      	strh	r3, [r2, #0]
 8008e70:	e176      	b.n	8009160 <USB_ActivateEndpoint+0x5cc>
 8008e72:	bf00      	nop
 8008e74:	ffff8080 	.word	0xffff8080
 8008e78:	ffff80c0 	.word	0xffff80c0
 8008e7c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	4413      	add	r3, r2
 8008e8a:	881b      	ldrh	r3, [r3, #0]
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e96:	b29c      	uxth	r4, r3
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	441a      	add	r2, r3
 8008ea2:	4b96      	ldr	r3, [pc, #600]	; (80090fc <USB_ActivateEndpoint+0x568>)
 8008ea4:	4323      	orrs	r3, r4
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008eaa:	687c      	ldr	r4, [r7, #4]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	441c      	add	r4, r3
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	011b      	lsls	r3, r3, #4
 8008ebc:	4423      	add	r3, r4
 8008ebe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ec2:	461c      	mov	r4, r3
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	891b      	ldrh	r3, [r3, #8]
 8008ec8:	085b      	lsrs	r3, r3, #1
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	005b      	lsls	r3, r3, #1
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	8023      	strh	r3, [r4, #0]
 8008ed2:	687c      	ldr	r4, [r7, #4]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	441c      	add	r4, r3
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	011b      	lsls	r3, r3, #4
 8008ee4:	4423      	add	r3, r4
 8008ee6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008eea:	461c      	mov	r4, r3
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	895b      	ldrh	r3, [r3, #10]
 8008ef0:	085b      	lsrs	r3, r3, #1
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	005b      	lsls	r3, r3, #1
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	785b      	ldrb	r3, [r3, #1]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	f040 8088 	bne.w	8009014 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	4413      	add	r3, r2
 8008f0e:	881b      	ldrh	r3, [r3, #0]
 8008f10:	b29c      	uxth	r4, r3
 8008f12:	4623      	mov	r3, r4
 8008f14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d014      	beq.n	8008f46 <USB_ActivateEndpoint+0x3b2>
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	4413      	add	r3, r2
 8008f26:	881b      	ldrh	r3, [r3, #0]
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f32:	b29c      	uxth	r4, r3
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	441a      	add	r2, r3
 8008f3e:	4b70      	ldr	r3, [pc, #448]	; (8009100 <USB_ActivateEndpoint+0x56c>)
 8008f40:	4323      	orrs	r3, r4
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	4413      	add	r3, r2
 8008f50:	881b      	ldrh	r3, [r3, #0]
 8008f52:	b29c      	uxth	r4, r3
 8008f54:	4623      	mov	r3, r4
 8008f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d014      	beq.n	8008f88 <USB_ActivateEndpoint+0x3f4>
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	4413      	add	r3, r2
 8008f68:	881b      	ldrh	r3, [r3, #0]
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f74:	b29c      	uxth	r4, r3
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	441a      	add	r2, r3
 8008f80:	4b60      	ldr	r3, [pc, #384]	; (8009104 <USB_ActivateEndpoint+0x570>)
 8008f82:	4323      	orrs	r3, r4
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	4413      	add	r3, r2
 8008f92:	881b      	ldrh	r3, [r3, #0]
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f9e:	b29c      	uxth	r4, r3
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	441a      	add	r2, r3
 8008faa:	4b56      	ldr	r3, [pc, #344]	; (8009104 <USB_ActivateEndpoint+0x570>)
 8008fac:	4323      	orrs	r3, r4
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	4413      	add	r3, r2
 8008fbc:	881b      	ldrh	r3, [r3, #0]
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fc8:	b29c      	uxth	r4, r3
 8008fca:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8008fce:	b29c      	uxth	r4, r3
 8008fd0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8008fd4:	b29c      	uxth	r4, r3
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	441a      	add	r2, r3
 8008fe0:	4b49      	ldr	r3, [pc, #292]	; (8009108 <USB_ActivateEndpoint+0x574>)
 8008fe2:	4323      	orrs	r3, r4
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	4413      	add	r3, r2
 8008ff2:	881b      	ldrh	r3, [r3, #0]
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ffa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ffe:	b29c      	uxth	r4, r3
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	441a      	add	r2, r3
 800900a:	4b3f      	ldr	r3, [pc, #252]	; (8009108 <USB_ActivateEndpoint+0x574>)
 800900c:	4323      	orrs	r3, r4
 800900e:	b29b      	uxth	r3, r3
 8009010:	8013      	strh	r3, [r2, #0]
 8009012:	e0a5      	b.n	8009160 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	4413      	add	r3, r2
 800901e:	881b      	ldrh	r3, [r3, #0]
 8009020:	b29c      	uxth	r4, r3
 8009022:	4623      	mov	r3, r4
 8009024:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009028:	2b00      	cmp	r3, #0
 800902a:	d014      	beq.n	8009056 <USB_ActivateEndpoint+0x4c2>
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	4413      	add	r3, r2
 8009036:	881b      	ldrh	r3, [r3, #0]
 8009038:	b29b      	uxth	r3, r3
 800903a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800903e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009042:	b29c      	uxth	r4, r3
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	441a      	add	r2, r3
 800904e:	4b2c      	ldr	r3, [pc, #176]	; (8009100 <USB_ActivateEndpoint+0x56c>)
 8009050:	4323      	orrs	r3, r4
 8009052:	b29b      	uxth	r3, r3
 8009054:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	009b      	lsls	r3, r3, #2
 800905e:	4413      	add	r3, r2
 8009060:	881b      	ldrh	r3, [r3, #0]
 8009062:	b29c      	uxth	r4, r3
 8009064:	4623      	mov	r3, r4
 8009066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800906a:	2b00      	cmp	r3, #0
 800906c:	d014      	beq.n	8009098 <USB_ActivateEndpoint+0x504>
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	4413      	add	r3, r2
 8009078:	881b      	ldrh	r3, [r3, #0]
 800907a:	b29b      	uxth	r3, r3
 800907c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009084:	b29c      	uxth	r4, r3
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	441a      	add	r2, r3
 8009090:	4b1c      	ldr	r3, [pc, #112]	; (8009104 <USB_ActivateEndpoint+0x570>)
 8009092:	4323      	orrs	r3, r4
 8009094:	b29b      	uxth	r3, r3
 8009096:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	4413      	add	r3, r2
 80090a2:	881b      	ldrh	r3, [r3, #0]
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090ae:	b29c      	uxth	r4, r3
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	441a      	add	r2, r3
 80090ba:	4b11      	ldr	r3, [pc, #68]	; (8009100 <USB_ActivateEndpoint+0x56c>)
 80090bc:	4323      	orrs	r3, r4
 80090be:	b29b      	uxth	r3, r3
 80090c0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	78db      	ldrb	r3, [r3, #3]
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d020      	beq.n	800910c <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	4413      	add	r3, r2
 80090d4:	881b      	ldrh	r3, [r3, #0]
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090e0:	b29c      	uxth	r4, r3
 80090e2:	f084 0320 	eor.w	r3, r4, #32
 80090e6:	b29c      	uxth	r4, r3
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	441a      	add	r2, r3
 80090f2:	4b05      	ldr	r3, [pc, #20]	; (8009108 <USB_ActivateEndpoint+0x574>)
 80090f4:	4323      	orrs	r3, r4
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	8013      	strh	r3, [r2, #0]
 80090fa:	e01c      	b.n	8009136 <USB_ActivateEndpoint+0x5a2>
 80090fc:	ffff8180 	.word	0xffff8180
 8009100:	ffffc080 	.word	0xffffc080
 8009104:	ffff80c0 	.word	0xffff80c0
 8009108:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	4413      	add	r3, r2
 8009116:	881b      	ldrh	r3, [r3, #0]
 8009118:	b29b      	uxth	r3, r3
 800911a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800911e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009122:	b29c      	uxth	r4, r3
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	441a      	add	r2, r3
 800912e:	4b0f      	ldr	r3, [pc, #60]	; (800916c <USB_ActivateEndpoint+0x5d8>)
 8009130:	4323      	orrs	r3, r4
 8009132:	b29b      	uxth	r3, r3
 8009134:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	4413      	add	r3, r2
 8009140:	881b      	ldrh	r3, [r3, #0]
 8009142:	b29b      	uxth	r3, r3
 8009144:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800914c:	b29c      	uxth	r4, r3
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	441a      	add	r2, r3
 8009158:	4b04      	ldr	r3, [pc, #16]	; (800916c <USB_ActivateEndpoint+0x5d8>)
 800915a:	4323      	orrs	r3, r4
 800915c:	b29b      	uxth	r3, r3
 800915e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8009160:	7bfb      	ldrb	r3, [r7, #15]
}
 8009162:	4618      	mov	r0, r3
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bc90      	pop	{r4, r7}
 800916a:	4770      	bx	lr
 800916c:	ffff8080 	.word	0xffff8080

08009170 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009170:	b490      	push	{r4, r7}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	7b1b      	ldrb	r3, [r3, #12]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d171      	bne.n	8009266 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	785b      	ldrb	r3, [r3, #1]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d036      	beq.n	80091f8 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	4413      	add	r3, r2
 8009194:	881b      	ldrh	r3, [r3, #0]
 8009196:	b29c      	uxth	r4, r3
 8009198:	4623      	mov	r3, r4
 800919a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d014      	beq.n	80091cc <USB_DeactivateEndpoint+0x5c>
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	4413      	add	r3, r2
 80091ac:	881b      	ldrh	r3, [r3, #0]
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091b8:	b29c      	uxth	r4, r3
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	441a      	add	r2, r3
 80091c4:	4b6b      	ldr	r3, [pc, #428]	; (8009374 <USB_DeactivateEndpoint+0x204>)
 80091c6:	4323      	orrs	r3, r4
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	4413      	add	r3, r2
 80091d6:	881b      	ldrh	r3, [r3, #0]
 80091d8:	b29b      	uxth	r3, r3
 80091da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091e2:	b29c      	uxth	r4, r3
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	441a      	add	r2, r3
 80091ee:	4b62      	ldr	r3, [pc, #392]	; (8009378 <USB_DeactivateEndpoint+0x208>)
 80091f0:	4323      	orrs	r3, r4
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	8013      	strh	r3, [r2, #0]
 80091f6:	e144      	b.n	8009482 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	4413      	add	r3, r2
 8009202:	881b      	ldrh	r3, [r3, #0]
 8009204:	b29c      	uxth	r4, r3
 8009206:	4623      	mov	r3, r4
 8009208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800920c:	2b00      	cmp	r3, #0
 800920e:	d014      	beq.n	800923a <USB_DeactivateEndpoint+0xca>
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	4413      	add	r3, r2
 800921a:	881b      	ldrh	r3, [r3, #0]
 800921c:	b29b      	uxth	r3, r3
 800921e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009226:	b29c      	uxth	r4, r3
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	441a      	add	r2, r3
 8009232:	4b52      	ldr	r3, [pc, #328]	; (800937c <USB_DeactivateEndpoint+0x20c>)
 8009234:	4323      	orrs	r3, r4
 8009236:	b29b      	uxth	r3, r3
 8009238:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	4413      	add	r3, r2
 8009244:	881b      	ldrh	r3, [r3, #0]
 8009246:	b29b      	uxth	r3, r3
 8009248:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800924c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009250:	b29c      	uxth	r4, r3
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	441a      	add	r2, r3
 800925c:	4b46      	ldr	r3, [pc, #280]	; (8009378 <USB_DeactivateEndpoint+0x208>)
 800925e:	4323      	orrs	r3, r4
 8009260:	b29b      	uxth	r3, r3
 8009262:	8013      	strh	r3, [r2, #0]
 8009264:	e10d      	b.n	8009482 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	785b      	ldrb	r3, [r3, #1]
 800926a:	2b00      	cmp	r3, #0
 800926c:	f040 8088 	bne.w	8009380 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	4413      	add	r3, r2
 800927a:	881b      	ldrh	r3, [r3, #0]
 800927c:	b29c      	uxth	r4, r3
 800927e:	4623      	mov	r3, r4
 8009280:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009284:	2b00      	cmp	r3, #0
 8009286:	d014      	beq.n	80092b2 <USB_DeactivateEndpoint+0x142>
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	4413      	add	r3, r2
 8009292:	881b      	ldrh	r3, [r3, #0]
 8009294:	b29b      	uxth	r3, r3
 8009296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800929a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800929e:	b29c      	uxth	r4, r3
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	441a      	add	r2, r3
 80092aa:	4b34      	ldr	r3, [pc, #208]	; (800937c <USB_DeactivateEndpoint+0x20c>)
 80092ac:	4323      	orrs	r3, r4
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	4413      	add	r3, r2
 80092bc:	881b      	ldrh	r3, [r3, #0]
 80092be:	b29c      	uxth	r4, r3
 80092c0:	4623      	mov	r3, r4
 80092c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d014      	beq.n	80092f4 <USB_DeactivateEndpoint+0x184>
 80092ca:	687a      	ldr	r2, [r7, #4]
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	4413      	add	r3, r2
 80092d4:	881b      	ldrh	r3, [r3, #0]
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092e0:	b29c      	uxth	r4, r3
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	441a      	add	r2, r3
 80092ec:	4b21      	ldr	r3, [pc, #132]	; (8009374 <USB_DeactivateEndpoint+0x204>)
 80092ee:	4323      	orrs	r3, r4
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	4413      	add	r3, r2
 80092fe:	881b      	ldrh	r3, [r3, #0]
 8009300:	b29b      	uxth	r3, r3
 8009302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800930a:	b29c      	uxth	r4, r3
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	441a      	add	r2, r3
 8009316:	4b17      	ldr	r3, [pc, #92]	; (8009374 <USB_DeactivateEndpoint+0x204>)
 8009318:	4323      	orrs	r3, r4
 800931a:	b29b      	uxth	r3, r3
 800931c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	4413      	add	r3, r2
 8009328:	881b      	ldrh	r3, [r3, #0]
 800932a:	b29b      	uxth	r3, r3
 800932c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009334:	b29c      	uxth	r4, r3
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	441a      	add	r2, r3
 8009340:	4b0d      	ldr	r3, [pc, #52]	; (8009378 <USB_DeactivateEndpoint+0x208>)
 8009342:	4323      	orrs	r3, r4
 8009344:	b29b      	uxth	r3, r3
 8009346:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	4413      	add	r3, r2
 8009352:	881b      	ldrh	r3, [r3, #0]
 8009354:	b29b      	uxth	r3, r3
 8009356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800935a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800935e:	b29c      	uxth	r4, r3
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	441a      	add	r2, r3
 800936a:	4b03      	ldr	r3, [pc, #12]	; (8009378 <USB_DeactivateEndpoint+0x208>)
 800936c:	4323      	orrs	r3, r4
 800936e:	b29b      	uxth	r3, r3
 8009370:	8013      	strh	r3, [r2, #0]
 8009372:	e086      	b.n	8009482 <USB_DeactivateEndpoint+0x312>
 8009374:	ffff80c0 	.word	0xffff80c0
 8009378:	ffff8080 	.word	0xffff8080
 800937c:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	4413      	add	r3, r2
 800938a:	881b      	ldrh	r3, [r3, #0]
 800938c:	b29c      	uxth	r4, r3
 800938e:	4623      	mov	r3, r4
 8009390:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009394:	2b00      	cmp	r3, #0
 8009396:	d014      	beq.n	80093c2 <USB_DeactivateEndpoint+0x252>
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	4413      	add	r3, r2
 80093a2:	881b      	ldrh	r3, [r3, #0]
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093ae:	b29c      	uxth	r4, r3
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	441a      	add	r2, r3
 80093ba:	4b35      	ldr	r3, [pc, #212]	; (8009490 <USB_DeactivateEndpoint+0x320>)
 80093bc:	4323      	orrs	r3, r4
 80093be:	b29b      	uxth	r3, r3
 80093c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	4413      	add	r3, r2
 80093cc:	881b      	ldrh	r3, [r3, #0]
 80093ce:	b29c      	uxth	r4, r3
 80093d0:	4623      	mov	r3, r4
 80093d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d014      	beq.n	8009404 <USB_DeactivateEndpoint+0x294>
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	4413      	add	r3, r2
 80093e4:	881b      	ldrh	r3, [r3, #0]
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093f0:	b29c      	uxth	r4, r3
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	441a      	add	r2, r3
 80093fc:	4b25      	ldr	r3, [pc, #148]	; (8009494 <USB_DeactivateEndpoint+0x324>)
 80093fe:	4323      	orrs	r3, r4
 8009400:	b29b      	uxth	r3, r3
 8009402:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	4413      	add	r3, r2
 800940e:	881b      	ldrh	r3, [r3, #0]
 8009410:	b29b      	uxth	r3, r3
 8009412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800941a:	b29c      	uxth	r4, r3
 800941c:	687a      	ldr	r2, [r7, #4]
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	441a      	add	r2, r3
 8009426:	4b1a      	ldr	r3, [pc, #104]	; (8009490 <USB_DeactivateEndpoint+0x320>)
 8009428:	4323      	orrs	r3, r4
 800942a:	b29b      	uxth	r3, r3
 800942c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	4413      	add	r3, r2
 8009438:	881b      	ldrh	r3, [r3, #0]
 800943a:	b29b      	uxth	r3, r3
 800943c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009444:	b29c      	uxth	r4, r3
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	441a      	add	r2, r3
 8009450:	4b11      	ldr	r3, [pc, #68]	; (8009498 <USB_DeactivateEndpoint+0x328>)
 8009452:	4323      	orrs	r3, r4
 8009454:	b29b      	uxth	r3, r3
 8009456:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	4413      	add	r3, r2
 8009462:	881b      	ldrh	r3, [r3, #0]
 8009464:	b29b      	uxth	r3, r3
 8009466:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800946a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800946e:	b29c      	uxth	r4, r3
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	441a      	add	r2, r3
 800947a:	4b07      	ldr	r3, [pc, #28]	; (8009498 <USB_DeactivateEndpoint+0x328>)
 800947c:	4323      	orrs	r3, r4
 800947e:	b29b      	uxth	r3, r3
 8009480:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009482:	2300      	movs	r3, #0
}
 8009484:	4618      	mov	r0, r3
 8009486:	3708      	adds	r7, #8
 8009488:	46bd      	mov	sp, r7
 800948a:	bc90      	pop	{r4, r7}
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	ffffc080 	.word	0xffffc080
 8009494:	ffff80c0 	.word	0xffff80c0
 8009498:	ffff8080 	.word	0xffff8080

0800949c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800949c:	b590      	push	{r4, r7, lr}
 800949e:	b08d      	sub	sp, #52	; 0x34
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	785b      	ldrb	r3, [r3, #1]
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	f040 8160 	bne.w	8009770 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	699a      	ldr	r2, [r3, #24]
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	691b      	ldr	r3, [r3, #16]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d909      	bls.n	80094d0 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	691b      	ldr	r3, [r3, #16]
 80094c0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	699a      	ldr	r2, [r3, #24]
 80094c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c8:	1ad2      	subs	r2, r2, r3
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	619a      	str	r2, [r3, #24]
 80094ce:	e005      	b.n	80094dc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	699b      	ldr	r3, [r3, #24]
 80094d4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	2200      	movs	r2, #0
 80094da:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	7b1b      	ldrb	r3, [r3, #12]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d119      	bne.n	8009518 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	6959      	ldr	r1, [r3, #20]
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	88da      	ldrh	r2, [r3, #6]
 80094ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 fba2 	bl	8009c3a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80094f6:	687c      	ldr	r4, [r7, #4]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094fe:	b29b      	uxth	r3, r3
 8009500:	441c      	add	r4, r3
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	011b      	lsls	r3, r3, #4
 8009508:	4423      	add	r3, r4
 800950a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800950e:	461c      	mov	r4, r3
 8009510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009512:	b29b      	uxth	r3, r3
 8009514:	8023      	strh	r3, [r4, #0]
 8009516:	e10f      	b.n	8009738 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	4413      	add	r3, r2
 8009522:	881b      	ldrh	r3, [r3, #0]
 8009524:	b29b      	uxth	r3, r3
 8009526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800952a:	2b00      	cmp	r3, #0
 800952c:	d065      	beq.n	80095fa <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800952e:	687c      	ldr	r4, [r7, #4]
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	785b      	ldrb	r3, [r3, #1]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d148      	bne.n	80095ca <USB_EPStartXfer+0x12e>
 8009538:	687c      	ldr	r4, [r7, #4]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009540:	b29b      	uxth	r3, r3
 8009542:	441c      	add	r4, r3
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	011b      	lsls	r3, r3, #4
 800954a:	4423      	add	r3, r4
 800954c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009550:	461c      	mov	r4, r3
 8009552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009554:	2b00      	cmp	r3, #0
 8009556:	d10e      	bne.n	8009576 <USB_EPStartXfer+0xda>
 8009558:	8823      	ldrh	r3, [r4, #0]
 800955a:	b29b      	uxth	r3, r3
 800955c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009560:	b29b      	uxth	r3, r3
 8009562:	8023      	strh	r3, [r4, #0]
 8009564:	8823      	ldrh	r3, [r4, #0]
 8009566:	b29b      	uxth	r3, r3
 8009568:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800956c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009570:	b29b      	uxth	r3, r3
 8009572:	8023      	strh	r3, [r4, #0]
 8009574:	e03d      	b.n	80095f2 <USB_EPStartXfer+0x156>
 8009576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009578:	2b3e      	cmp	r3, #62	; 0x3e
 800957a:	d810      	bhi.n	800959e <USB_EPStartXfer+0x102>
 800957c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957e:	085b      	lsrs	r3, r3, #1
 8009580:	627b      	str	r3, [r7, #36]	; 0x24
 8009582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009584:	f003 0301 	and.w	r3, r3, #1
 8009588:	2b00      	cmp	r3, #0
 800958a:	d002      	beq.n	8009592 <USB_EPStartXfer+0xf6>
 800958c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958e:	3301      	adds	r3, #1
 8009590:	627b      	str	r3, [r7, #36]	; 0x24
 8009592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009594:	b29b      	uxth	r3, r3
 8009596:	029b      	lsls	r3, r3, #10
 8009598:	b29b      	uxth	r3, r3
 800959a:	8023      	strh	r3, [r4, #0]
 800959c:	e029      	b.n	80095f2 <USB_EPStartXfer+0x156>
 800959e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a0:	095b      	lsrs	r3, r3, #5
 80095a2:	627b      	str	r3, [r7, #36]	; 0x24
 80095a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a6:	f003 031f 	and.w	r3, r3, #31
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d102      	bne.n	80095b4 <USB_EPStartXfer+0x118>
 80095ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b0:	3b01      	subs	r3, #1
 80095b2:	627b      	str	r3, [r7, #36]	; 0x24
 80095b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	029b      	lsls	r3, r3, #10
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	8023      	strh	r3, [r4, #0]
 80095c8:	e013      	b.n	80095f2 <USB_EPStartXfer+0x156>
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	785b      	ldrb	r3, [r3, #1]
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d10f      	bne.n	80095f2 <USB_EPStartXfer+0x156>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095d8:	b29b      	uxth	r3, r3
 80095da:	441c      	add	r4, r3
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	011b      	lsls	r3, r3, #4
 80095e2:	4423      	add	r3, r4
 80095e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80095e8:	60fb      	str	r3, [r7, #12]
 80095ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ec:	b29a      	uxth	r2, r3
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	895b      	ldrh	r3, [r3, #10]
 80095f6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80095f8:	e063      	b.n	80096c2 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	785b      	ldrb	r3, [r3, #1]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d148      	bne.n	8009694 <USB_EPStartXfer+0x1f8>
 8009602:	687c      	ldr	r4, [r7, #4]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800960a:	b29b      	uxth	r3, r3
 800960c:	441c      	add	r4, r3
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	011b      	lsls	r3, r3, #4
 8009614:	4423      	add	r3, r4
 8009616:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800961a:	461c      	mov	r4, r3
 800961c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961e:	2b00      	cmp	r3, #0
 8009620:	d10e      	bne.n	8009640 <USB_EPStartXfer+0x1a4>
 8009622:	8823      	ldrh	r3, [r4, #0]
 8009624:	b29b      	uxth	r3, r3
 8009626:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800962a:	b29b      	uxth	r3, r3
 800962c:	8023      	strh	r3, [r4, #0]
 800962e:	8823      	ldrh	r3, [r4, #0]
 8009630:	b29b      	uxth	r3, r3
 8009632:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800963a:	b29b      	uxth	r3, r3
 800963c:	8023      	strh	r3, [r4, #0]
 800963e:	e03d      	b.n	80096bc <USB_EPStartXfer+0x220>
 8009640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009642:	2b3e      	cmp	r3, #62	; 0x3e
 8009644:	d810      	bhi.n	8009668 <USB_EPStartXfer+0x1cc>
 8009646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009648:	085b      	lsrs	r3, r3, #1
 800964a:	623b      	str	r3, [r7, #32]
 800964c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964e:	f003 0301 	and.w	r3, r3, #1
 8009652:	2b00      	cmp	r3, #0
 8009654:	d002      	beq.n	800965c <USB_EPStartXfer+0x1c0>
 8009656:	6a3b      	ldr	r3, [r7, #32]
 8009658:	3301      	adds	r3, #1
 800965a:	623b      	str	r3, [r7, #32]
 800965c:	6a3b      	ldr	r3, [r7, #32]
 800965e:	b29b      	uxth	r3, r3
 8009660:	029b      	lsls	r3, r3, #10
 8009662:	b29b      	uxth	r3, r3
 8009664:	8023      	strh	r3, [r4, #0]
 8009666:	e029      	b.n	80096bc <USB_EPStartXfer+0x220>
 8009668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966a:	095b      	lsrs	r3, r3, #5
 800966c:	623b      	str	r3, [r7, #32]
 800966e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009670:	f003 031f 	and.w	r3, r3, #31
 8009674:	2b00      	cmp	r3, #0
 8009676:	d102      	bne.n	800967e <USB_EPStartXfer+0x1e2>
 8009678:	6a3b      	ldr	r3, [r7, #32]
 800967a:	3b01      	subs	r3, #1
 800967c:	623b      	str	r3, [r7, #32]
 800967e:	6a3b      	ldr	r3, [r7, #32]
 8009680:	b29b      	uxth	r3, r3
 8009682:	029b      	lsls	r3, r3, #10
 8009684:	b29b      	uxth	r3, r3
 8009686:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800968a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800968e:	b29b      	uxth	r3, r3
 8009690:	8023      	strh	r3, [r4, #0]
 8009692:	e013      	b.n	80096bc <USB_EPStartXfer+0x220>
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	785b      	ldrb	r3, [r3, #1]
 8009698:	2b01      	cmp	r3, #1
 800969a:	d10f      	bne.n	80096bc <USB_EPStartXfer+0x220>
 800969c:	687c      	ldr	r4, [r7, #4]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	441c      	add	r4, r3
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	011b      	lsls	r3, r3, #4
 80096ae:	4423      	add	r3, r4
 80096b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80096b4:	461c      	mov	r4, r3
 80096b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	891b      	ldrh	r3, [r3, #8]
 80096c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	6959      	ldr	r1, [r3, #20]
 80096c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 fab4 	bl	8009c3a <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	785b      	ldrb	r3, [r3, #1]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d115      	bne.n	8009706 <USB_EPStartXfer+0x26a>
 80096da:	687a      	ldr	r2, [r7, #4]
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	4413      	add	r3, r2
 80096e4:	881b      	ldrh	r3, [r3, #0]
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096f0:	b29c      	uxth	r4, r3
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	441a      	add	r2, r3
 80096fc:	4b9a      	ldr	r3, [pc, #616]	; (8009968 <USB_EPStartXfer+0x4cc>)
 80096fe:	4323      	orrs	r3, r4
 8009700:	b29b      	uxth	r3, r3
 8009702:	8013      	strh	r3, [r2, #0]
 8009704:	e018      	b.n	8009738 <USB_EPStartXfer+0x29c>
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	785b      	ldrb	r3, [r3, #1]
 800970a:	2b01      	cmp	r3, #1
 800970c:	d114      	bne.n	8009738 <USB_EPStartXfer+0x29c>
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	4413      	add	r3, r2
 8009718:	881b      	ldrh	r3, [r3, #0]
 800971a:	b29b      	uxth	r3, r3
 800971c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009724:	b29c      	uxth	r4, r3
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	441a      	add	r2, r3
 8009730:	4b8e      	ldr	r3, [pc, #568]	; (800996c <USB_EPStartXfer+0x4d0>)
 8009732:	4323      	orrs	r3, r4
 8009734:	b29b      	uxth	r3, r3
 8009736:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	4413      	add	r3, r2
 8009742:	881b      	ldrh	r3, [r3, #0]
 8009744:	b29b      	uxth	r3, r3
 8009746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800974a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800974e:	b29c      	uxth	r4, r3
 8009750:	f084 0310 	eor.w	r3, r4, #16
 8009754:	b29c      	uxth	r4, r3
 8009756:	f084 0320 	eor.w	r3, r4, #32
 800975a:	b29c      	uxth	r4, r3
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	441a      	add	r2, r3
 8009766:	4b82      	ldr	r3, [pc, #520]	; (8009970 <USB_EPStartXfer+0x4d4>)
 8009768:	4323      	orrs	r3, r4
 800976a:	b29b      	uxth	r3, r3
 800976c:	8013      	strh	r3, [r2, #0]
 800976e:	e146      	b.n	80099fe <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	699a      	ldr	r2, [r3, #24]
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	429a      	cmp	r2, r3
 800977a:	d909      	bls.n	8009790 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	691b      	ldr	r3, [r3, #16]
 8009780:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	699a      	ldr	r2, [r3, #24]
 8009786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009788:	1ad2      	subs	r2, r2, r3
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	619a      	str	r2, [r3, #24]
 800978e:	e005      	b.n	800979c <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	699b      	ldr	r3, [r3, #24]
 8009794:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	2200      	movs	r2, #0
 800979a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	7b1b      	ldrb	r3, [r3, #12]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d148      	bne.n	8009836 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80097a4:	687c      	ldr	r4, [r7, #4]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	441c      	add	r4, r3
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	011b      	lsls	r3, r3, #4
 80097b6:	4423      	add	r3, r4
 80097b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80097bc:	461c      	mov	r4, r3
 80097be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d10e      	bne.n	80097e2 <USB_EPStartXfer+0x346>
 80097c4:	8823      	ldrh	r3, [r4, #0]
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	8023      	strh	r3, [r4, #0]
 80097d0:	8823      	ldrh	r3, [r4, #0]
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097dc:	b29b      	uxth	r3, r3
 80097de:	8023      	strh	r3, [r4, #0]
 80097e0:	e0f2      	b.n	80099c8 <USB_EPStartXfer+0x52c>
 80097e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e4:	2b3e      	cmp	r3, #62	; 0x3e
 80097e6:	d810      	bhi.n	800980a <USB_EPStartXfer+0x36e>
 80097e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ea:	085b      	lsrs	r3, r3, #1
 80097ec:	61fb      	str	r3, [r7, #28]
 80097ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f0:	f003 0301 	and.w	r3, r3, #1
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d002      	beq.n	80097fe <USB_EPStartXfer+0x362>
 80097f8:	69fb      	ldr	r3, [r7, #28]
 80097fa:	3301      	adds	r3, #1
 80097fc:	61fb      	str	r3, [r7, #28]
 80097fe:	69fb      	ldr	r3, [r7, #28]
 8009800:	b29b      	uxth	r3, r3
 8009802:	029b      	lsls	r3, r3, #10
 8009804:	b29b      	uxth	r3, r3
 8009806:	8023      	strh	r3, [r4, #0]
 8009808:	e0de      	b.n	80099c8 <USB_EPStartXfer+0x52c>
 800980a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800980c:	095b      	lsrs	r3, r3, #5
 800980e:	61fb      	str	r3, [r7, #28]
 8009810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009812:	f003 031f 	and.w	r3, r3, #31
 8009816:	2b00      	cmp	r3, #0
 8009818:	d102      	bne.n	8009820 <USB_EPStartXfer+0x384>
 800981a:	69fb      	ldr	r3, [r7, #28]
 800981c:	3b01      	subs	r3, #1
 800981e:	61fb      	str	r3, [r7, #28]
 8009820:	69fb      	ldr	r3, [r7, #28]
 8009822:	b29b      	uxth	r3, r3
 8009824:	029b      	lsls	r3, r3, #10
 8009826:	b29b      	uxth	r3, r3
 8009828:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800982c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009830:	b29b      	uxth	r3, r3
 8009832:	8023      	strh	r3, [r4, #0]
 8009834:	e0c8      	b.n	80099c8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	785b      	ldrb	r3, [r3, #1]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d148      	bne.n	80098d0 <USB_EPStartXfer+0x434>
 800983e:	687c      	ldr	r4, [r7, #4]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009846:	b29b      	uxth	r3, r3
 8009848:	441c      	add	r4, r3
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	011b      	lsls	r3, r3, #4
 8009850:	4423      	add	r3, r4
 8009852:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009856:	461c      	mov	r4, r3
 8009858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985a:	2b00      	cmp	r3, #0
 800985c:	d10e      	bne.n	800987c <USB_EPStartXfer+0x3e0>
 800985e:	8823      	ldrh	r3, [r4, #0]
 8009860:	b29b      	uxth	r3, r3
 8009862:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009866:	b29b      	uxth	r3, r3
 8009868:	8023      	strh	r3, [r4, #0]
 800986a:	8823      	ldrh	r3, [r4, #0]
 800986c:	b29b      	uxth	r3, r3
 800986e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009872:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009876:	b29b      	uxth	r3, r3
 8009878:	8023      	strh	r3, [r4, #0]
 800987a:	e03d      	b.n	80098f8 <USB_EPStartXfer+0x45c>
 800987c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987e:	2b3e      	cmp	r3, #62	; 0x3e
 8009880:	d810      	bhi.n	80098a4 <USB_EPStartXfer+0x408>
 8009882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009884:	085b      	lsrs	r3, r3, #1
 8009886:	61bb      	str	r3, [r7, #24]
 8009888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800988a:	f003 0301 	and.w	r3, r3, #1
 800988e:	2b00      	cmp	r3, #0
 8009890:	d002      	beq.n	8009898 <USB_EPStartXfer+0x3fc>
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	3301      	adds	r3, #1
 8009896:	61bb      	str	r3, [r7, #24]
 8009898:	69bb      	ldr	r3, [r7, #24]
 800989a:	b29b      	uxth	r3, r3
 800989c:	029b      	lsls	r3, r3, #10
 800989e:	b29b      	uxth	r3, r3
 80098a0:	8023      	strh	r3, [r4, #0]
 80098a2:	e029      	b.n	80098f8 <USB_EPStartXfer+0x45c>
 80098a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a6:	095b      	lsrs	r3, r3, #5
 80098a8:	61bb      	str	r3, [r7, #24]
 80098aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ac:	f003 031f 	and.w	r3, r3, #31
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d102      	bne.n	80098ba <USB_EPStartXfer+0x41e>
 80098b4:	69bb      	ldr	r3, [r7, #24]
 80098b6:	3b01      	subs	r3, #1
 80098b8:	61bb      	str	r3, [r7, #24]
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	b29b      	uxth	r3, r3
 80098be:	029b      	lsls	r3, r3, #10
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	8023      	strh	r3, [r4, #0]
 80098ce:	e013      	b.n	80098f8 <USB_EPStartXfer+0x45c>
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	785b      	ldrb	r3, [r3, #1]
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d10f      	bne.n	80098f8 <USB_EPStartXfer+0x45c>
 80098d8:	687c      	ldr	r4, [r7, #4]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	441c      	add	r4, r3
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	011b      	lsls	r3, r3, #4
 80098ea:	4423      	add	r3, r4
 80098ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80098f0:	461c      	mov	r4, r3
 80098f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	8023      	strh	r3, [r4, #0]
 80098f8:	687c      	ldr	r4, [r7, #4]
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	785b      	ldrb	r3, [r3, #1]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d14e      	bne.n	80099a0 <USB_EPStartXfer+0x504>
 8009902:	687c      	ldr	r4, [r7, #4]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800990a:	b29b      	uxth	r3, r3
 800990c:	441c      	add	r4, r3
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	011b      	lsls	r3, r3, #4
 8009914:	4423      	add	r3, r4
 8009916:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800991a:	461c      	mov	r4, r3
 800991c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991e:	2b00      	cmp	r3, #0
 8009920:	d10e      	bne.n	8009940 <USB_EPStartXfer+0x4a4>
 8009922:	8823      	ldrh	r3, [r4, #0]
 8009924:	b29b      	uxth	r3, r3
 8009926:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800992a:	b29b      	uxth	r3, r3
 800992c:	8023      	strh	r3, [r4, #0]
 800992e:	8823      	ldrh	r3, [r4, #0]
 8009930:	b29b      	uxth	r3, r3
 8009932:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009936:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800993a:	b29b      	uxth	r3, r3
 800993c:	8023      	strh	r3, [r4, #0]
 800993e:	e043      	b.n	80099c8 <USB_EPStartXfer+0x52c>
 8009940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009942:	2b3e      	cmp	r3, #62	; 0x3e
 8009944:	d816      	bhi.n	8009974 <USB_EPStartXfer+0x4d8>
 8009946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009948:	085b      	lsrs	r3, r3, #1
 800994a:	617b      	str	r3, [r7, #20]
 800994c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994e:	f003 0301 	and.w	r3, r3, #1
 8009952:	2b00      	cmp	r3, #0
 8009954:	d002      	beq.n	800995c <USB_EPStartXfer+0x4c0>
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	3301      	adds	r3, #1
 800995a:	617b      	str	r3, [r7, #20]
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	b29b      	uxth	r3, r3
 8009960:	029b      	lsls	r3, r3, #10
 8009962:	b29b      	uxth	r3, r3
 8009964:	8023      	strh	r3, [r4, #0]
 8009966:	e02f      	b.n	80099c8 <USB_EPStartXfer+0x52c>
 8009968:	ffff80c0 	.word	0xffff80c0
 800996c:	ffffc080 	.word	0xffffc080
 8009970:	ffff8080 	.word	0xffff8080
 8009974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009976:	095b      	lsrs	r3, r3, #5
 8009978:	617b      	str	r3, [r7, #20]
 800997a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997c:	f003 031f 	and.w	r3, r3, #31
 8009980:	2b00      	cmp	r3, #0
 8009982:	d102      	bne.n	800998a <USB_EPStartXfer+0x4ee>
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	3b01      	subs	r3, #1
 8009988:	617b      	str	r3, [r7, #20]
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	b29b      	uxth	r3, r3
 800998e:	029b      	lsls	r3, r3, #10
 8009990:	b29b      	uxth	r3, r3
 8009992:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009996:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800999a:	b29b      	uxth	r3, r3
 800999c:	8023      	strh	r3, [r4, #0]
 800999e:	e013      	b.n	80099c8 <USB_EPStartXfer+0x52c>
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	785b      	ldrb	r3, [r3, #1]
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	d10f      	bne.n	80099c8 <USB_EPStartXfer+0x52c>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	441c      	add	r4, r3
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	011b      	lsls	r3, r3, #4
 80099b8:	4423      	add	r3, r4
 80099ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80099be:	613b      	str	r3, [r7, #16]
 80099c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c2:	b29a      	uxth	r2, r3
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	009b      	lsls	r3, r3, #2
 80099d0:	4413      	add	r3, r2
 80099d2:	881b      	ldrh	r3, [r3, #0]
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099de:	b29c      	uxth	r4, r3
 80099e0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80099e4:	b29c      	uxth	r4, r3
 80099e6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80099ea:	b29c      	uxth	r4, r3
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	441a      	add	r2, r3
 80099f6:	4b04      	ldr	r3, [pc, #16]	; (8009a08 <USB_EPStartXfer+0x56c>)
 80099f8:	4323      	orrs	r3, r4
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80099fe:	2300      	movs	r3, #0
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3734      	adds	r7, #52	; 0x34
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd90      	pop	{r4, r7, pc}
 8009a08:	ffff8080 	.word	0xffff8080

08009a0c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009a0c:	b490      	push	{r4, r7}
 8009a0e:	b082      	sub	sp, #8
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	785b      	ldrb	r3, [r3, #1]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d018      	beq.n	8009a50 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	4413      	add	r3, r2
 8009a28:	881b      	ldrh	r3, [r3, #0]
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a34:	b29c      	uxth	r4, r3
 8009a36:	f084 0310 	eor.w	r3, r4, #16
 8009a3a:	b29c      	uxth	r4, r3
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	441a      	add	r2, r3
 8009a46:	4b11      	ldr	r3, [pc, #68]	; (8009a8c <USB_EPSetStall+0x80>)
 8009a48:	4323      	orrs	r3, r4
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	8013      	strh	r3, [r2, #0]
 8009a4e:	e017      	b.n	8009a80 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	4413      	add	r3, r2
 8009a5a:	881b      	ldrh	r3, [r3, #0]
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a66:	b29c      	uxth	r4, r3
 8009a68:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8009a6c:	b29c      	uxth	r4, r3
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	441a      	add	r2, r3
 8009a78:	4b04      	ldr	r3, [pc, #16]	; (8009a8c <USB_EPSetStall+0x80>)
 8009a7a:	4323      	orrs	r3, r4
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009a80:	2300      	movs	r3, #0
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3708      	adds	r7, #8
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bc90      	pop	{r4, r7}
 8009a8a:	4770      	bx	lr
 8009a8c:	ffff8080 	.word	0xffff8080

08009a90 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009a90:	b490      	push	{r4, r7}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	7b1b      	ldrb	r3, [r3, #12]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d17d      	bne.n	8009b9e <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	785b      	ldrb	r3, [r3, #1]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d03d      	beq.n	8009b26 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	4413      	add	r3, r2
 8009ab4:	881b      	ldrh	r3, [r3, #0]
 8009ab6:	b29c      	uxth	r4, r3
 8009ab8:	4623      	mov	r3, r4
 8009aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d014      	beq.n	8009aec <USB_EPClearStall+0x5c>
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	4413      	add	r3, r2
 8009acc:	881b      	ldrh	r3, [r3, #0]
 8009ace:	b29b      	uxth	r3, r3
 8009ad0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ad8:	b29c      	uxth	r4, r3
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	441a      	add	r2, r3
 8009ae4:	4b31      	ldr	r3, [pc, #196]	; (8009bac <USB_EPClearStall+0x11c>)
 8009ae6:	4323      	orrs	r3, r4
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	78db      	ldrb	r3, [r3, #3]
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d054      	beq.n	8009b9e <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	4413      	add	r3, r2
 8009afe:	881b      	ldrh	r3, [r3, #0]
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b0a:	b29c      	uxth	r4, r3
 8009b0c:	f084 0320 	eor.w	r3, r4, #32
 8009b10:	b29c      	uxth	r4, r3
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	009b      	lsls	r3, r3, #2
 8009b1a:	441a      	add	r2, r3
 8009b1c:	4b24      	ldr	r3, [pc, #144]	; (8009bb0 <USB_EPClearStall+0x120>)
 8009b1e:	4323      	orrs	r3, r4
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	8013      	strh	r3, [r2, #0]
 8009b24:	e03b      	b.n	8009b9e <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	4413      	add	r3, r2
 8009b30:	881b      	ldrh	r3, [r3, #0]
 8009b32:	b29c      	uxth	r4, r3
 8009b34:	4623      	mov	r3, r4
 8009b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d014      	beq.n	8009b68 <USB_EPClearStall+0xd8>
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	4413      	add	r3, r2
 8009b48:	881b      	ldrh	r3, [r3, #0]
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b54:	b29c      	uxth	r4, r3
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	441a      	add	r2, r3
 8009b60:	4b14      	ldr	r3, [pc, #80]	; (8009bb4 <USB_EPClearStall+0x124>)
 8009b62:	4323      	orrs	r3, r4
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	4413      	add	r3, r2
 8009b72:	881b      	ldrh	r3, [r3, #0]
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b7e:	b29c      	uxth	r4, r3
 8009b80:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8009b84:	b29c      	uxth	r4, r3
 8009b86:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8009b8a:	b29c      	uxth	r4, r3
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	009b      	lsls	r3, r3, #2
 8009b94:	441a      	add	r2, r3
 8009b96:	4b06      	ldr	r3, [pc, #24]	; (8009bb0 <USB_EPClearStall+0x120>)
 8009b98:	4323      	orrs	r3, r4
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009b9e:	2300      	movs	r3, #0
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3708      	adds	r7, #8
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bc90      	pop	{r4, r7}
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop
 8009bac:	ffff80c0 	.word	0xffff80c0
 8009bb0:	ffff8080 	.word	0xffff8080
 8009bb4:	ffffc080 	.word	0xffffc080

08009bb8 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009bc4:	78fb      	ldrb	r3, [r7, #3]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d103      	bne.n	8009bd2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2280      	movs	r2, #128	; 0x80
 8009bce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009bd2:	2300      	movs	r3, #0
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	370c      	adds	r7, #12
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bc80      	pop	{r7}
 8009bdc:	4770      	bx	lr

08009bde <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009bde:	b480      	push	{r7}
 8009be0:	b083      	sub	sp, #12
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009be6:	2300      	movs	r3, #0
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	370c      	adds	r7, #12
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bc80      	pop	{r7}
 8009bf0:	4770      	bx	lr

08009bf2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009bf2:	b480      	push	{r7}
 8009bf4:	b083      	sub	sp, #12
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009bfa:	2300      	movs	r3, #0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	370c      	adds	r7, #12
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bc80      	pop	{r7}
 8009c04:	4770      	bx	lr

08009c06 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009c06:	b480      	push	{r7}
 8009c08:	b085      	sub	sp, #20
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009c18:	68fb      	ldr	r3, [r7, #12]
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3714      	adds	r7, #20
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bc80      	pop	{r7}
 8009c22:	4770      	bx	lr

08009c24 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009c2e:	2300      	movs	r3, #0
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	370c      	adds	r7, #12
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bc80      	pop	{r7}
 8009c38:	4770      	bx	lr

08009c3a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009c3a:	b480      	push	{r7}
 8009c3c:	b08d      	sub	sp, #52	; 0x34
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	60f8      	str	r0, [r7, #12]
 8009c42:	60b9      	str	r1, [r7, #8]
 8009c44:	4611      	mov	r1, r2
 8009c46:	461a      	mov	r2, r3
 8009c48:	460b      	mov	r3, r1
 8009c4a:	80fb      	strh	r3, [r7, #6]
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009c50:	88bb      	ldrh	r3, [r7, #4]
 8009c52:	3301      	adds	r3, #1
 8009c54:	085b      	lsrs	r3, r3, #1
 8009c56:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009c60:	88fb      	ldrh	r3, [r7, #6]
 8009c62:	005a      	lsls	r2, r3, #1
 8009c64:	69fb      	ldr	r3, [r7, #28]
 8009c66:	4413      	add	r3, r2
 8009c68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c6c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009c6e:	6a3b      	ldr	r3, [r7, #32]
 8009c70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c72:	e01e      	b.n	8009cb2 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	021b      	lsls	r3, r3, #8
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	b29a      	uxth	r2, r3
 8009c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c98:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c9c:	3302      	adds	r3, #2
 8009c9e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca2:	3302      	adds	r3, #2
 8009ca4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8009ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca8:	3301      	adds	r3, #1
 8009caa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d1dd      	bne.n	8009c74 <USB_WritePMA+0x3a>
  }
}
 8009cb8:	bf00      	nop
 8009cba:	3734      	adds	r7, #52	; 0x34
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bc80      	pop	{r7}
 8009cc0:	4770      	bx	lr

08009cc2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009cc2:	b480      	push	{r7}
 8009cc4:	b08b      	sub	sp, #44	; 0x2c
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	60f8      	str	r0, [r7, #12]
 8009cca:	60b9      	str	r1, [r7, #8]
 8009ccc:	4611      	mov	r1, r2
 8009cce:	461a      	mov	r2, r3
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	80fb      	strh	r3, [r7, #6]
 8009cd4:	4613      	mov	r3, r2
 8009cd6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009cd8:	88bb      	ldrh	r3, [r7, #4]
 8009cda:	085b      	lsrs	r3, r3, #1
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009ce8:	88fb      	ldrh	r3, [r7, #6]
 8009cea:	005a      	lsls	r2, r3, #1
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	4413      	add	r3, r2
 8009cf0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cf4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8009cfa:	e01b      	b.n	8009d34 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009cfc:	6a3b      	ldr	r3, [r7, #32]
 8009cfe:	881b      	ldrh	r3, [r3, #0]
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009d04:	6a3b      	ldr	r3, [r7, #32]
 8009d06:	3302      	adds	r3, #2
 8009d08:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	b2da      	uxtb	r2, r3
 8009d0e:	69fb      	ldr	r3, [r7, #28]
 8009d10:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	3301      	adds	r3, #1
 8009d16:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	0a1b      	lsrs	r3, r3, #8
 8009d1c:	b2da      	uxtb	r2, r3
 8009d1e:	69fb      	ldr	r3, [r7, #28]
 8009d20:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009d22:	69fb      	ldr	r3, [r7, #28]
 8009d24:	3301      	adds	r3, #1
 8009d26:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009d28:	6a3b      	ldr	r3, [r7, #32]
 8009d2a:	3302      	adds	r3, #2
 8009d2c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8009d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d30:	3b01      	subs	r3, #1
 8009d32:	627b      	str	r3, [r7, #36]	; 0x24
 8009d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d1e0      	bne.n	8009cfc <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009d3a:	88bb      	ldrh	r3, [r7, #4]
 8009d3c:	f003 0301 	and.w	r3, r3, #1
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d007      	beq.n	8009d56 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8009d46:	6a3b      	ldr	r3, [r7, #32]
 8009d48:	881b      	ldrh	r3, [r3, #0]
 8009d4a:	b29b      	uxth	r3, r3
 8009d4c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	b2da      	uxtb	r2, r3
 8009d52:	69fb      	ldr	r3, [r7, #28]
 8009d54:	701a      	strb	r2, [r3, #0]
  }
}
 8009d56:	bf00      	nop
 8009d58:	372c      	adds	r7, #44	; 0x2c
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bc80      	pop	{r7}
 8009d5e:	4770      	bx	lr

08009d60 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	460b      	mov	r3, r1
 8009d6a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	7c1b      	ldrb	r3, [r3, #16]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d115      	bne.n	8009da4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009d78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d7c:	2202      	movs	r2, #2
 8009d7e:	2181      	movs	r1, #129	; 0x81
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f001 fe8e 	bl	800baa2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2201      	movs	r2, #1
 8009d8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009d8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d90:	2202      	movs	r2, #2
 8009d92:	2101      	movs	r1, #1
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f001 fe84 	bl	800baa2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009da2:	e012      	b.n	8009dca <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009da4:	2340      	movs	r3, #64	; 0x40
 8009da6:	2202      	movs	r2, #2
 8009da8:	2181      	movs	r1, #129	; 0x81
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f001 fe79 	bl	800baa2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2201      	movs	r2, #1
 8009db4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009db6:	2340      	movs	r3, #64	; 0x40
 8009db8:	2202      	movs	r2, #2
 8009dba:	2101      	movs	r1, #1
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f001 fe70 	bl	800baa2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009dca:	2308      	movs	r3, #8
 8009dcc:	2203      	movs	r2, #3
 8009dce:	2182      	movs	r1, #130	; 0x82
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f001 fe66 	bl	800baa2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009ddc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009de0:	f001 ff80 	bl	800bce4 <USBD_static_malloc>
 8009de4:	4602      	mov	r2, r0
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d102      	bne.n	8009dfc <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009df6:	2301      	movs	r3, #1
 8009df8:	73fb      	strb	r3, [r7, #15]
 8009dfa:	e026      	b.n	8009e4a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e02:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	2200      	movs	r2, #0
 8009e12:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	7c1b      	ldrb	r3, [r3, #16]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d109      	bne.n	8009e3a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e30:	2101      	movs	r1, #1
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f001 ff1f 	bl	800bc76 <USBD_LL_PrepareReceive>
 8009e38:	e007      	b.n	8009e4a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e40:	2340      	movs	r3, #64	; 0x40
 8009e42:	2101      	movs	r1, #1
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f001 ff16 	bl	800bc76 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3710      	adds	r7, #16
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009e60:	2300      	movs	r3, #0
 8009e62:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009e64:	2181      	movs	r1, #129	; 0x81
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f001 fe41 	bl	800baee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009e72:	2101      	movs	r1, #1
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f001 fe3a 	bl	800baee <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009e82:	2182      	movs	r1, #130	; 0x82
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f001 fe32 	bl	800baee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d00e      	beq.n	8009eb8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f001 ff26 	bl	800bcfc <USBD_static_free>
    pdev->pClassData = NULL;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3710      	adds	r7, #16
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b086      	sub	sp, #24
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
 8009eca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ed2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009edc:	2300      	movs	r3, #0
 8009ede:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d039      	beq.n	8009f60 <USBD_CDC_Setup+0x9e>
 8009eec:	2b20      	cmp	r3, #32
 8009eee:	d17c      	bne.n	8009fea <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	88db      	ldrh	r3, [r3, #6]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d029      	beq.n	8009f4c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	b25b      	sxtb	r3, r3
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	da11      	bge.n	8009f26 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	683a      	ldr	r2, [r7, #0]
 8009f0c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009f0e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009f10:	683a      	ldr	r2, [r7, #0]
 8009f12:	88d2      	ldrh	r2, [r2, #6]
 8009f14:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009f16:	6939      	ldr	r1, [r7, #16]
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	88db      	ldrh	r3, [r3, #6]
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f001 f9f6 	bl	800b310 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009f24:	e068      	b.n	8009ff8 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	785a      	ldrb	r2, [r3, #1]
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	88db      	ldrh	r3, [r3, #6]
 8009f34:	b2da      	uxtb	r2, r3
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009f3c:	6939      	ldr	r1, [r7, #16]
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	88db      	ldrh	r3, [r3, #6]
 8009f42:	461a      	mov	r2, r3
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f001 fa11 	bl	800b36c <USBD_CtlPrepareRx>
      break;
 8009f4a:	e055      	b.n	8009ff8 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f52:	689b      	ldr	r3, [r3, #8]
 8009f54:	683a      	ldr	r2, [r7, #0]
 8009f56:	7850      	ldrb	r0, [r2, #1]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	6839      	ldr	r1, [r7, #0]
 8009f5c:	4798      	blx	r3
      break;
 8009f5e:	e04b      	b.n	8009ff8 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	785b      	ldrb	r3, [r3, #1]
 8009f64:	2b0a      	cmp	r3, #10
 8009f66:	d017      	beq.n	8009f98 <USBD_CDC_Setup+0xd6>
 8009f68:	2b0b      	cmp	r3, #11
 8009f6a:	d029      	beq.n	8009fc0 <USBD_CDC_Setup+0xfe>
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d133      	bne.n	8009fd8 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f76:	2b03      	cmp	r3, #3
 8009f78:	d107      	bne.n	8009f8a <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009f7a:	f107 030c 	add.w	r3, r7, #12
 8009f7e:	2202      	movs	r2, #2
 8009f80:	4619      	mov	r1, r3
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f001 f9c4 	bl	800b310 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f88:	e02e      	b.n	8009fe8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8009f8a:	6839      	ldr	r1, [r7, #0]
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f001 f955 	bl	800b23c <USBD_CtlError>
            ret = USBD_FAIL;
 8009f92:	2302      	movs	r3, #2
 8009f94:	75fb      	strb	r3, [r7, #23]
          break;
 8009f96:	e027      	b.n	8009fe8 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f9e:	2b03      	cmp	r3, #3
 8009fa0:	d107      	bne.n	8009fb2 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009fa2:	f107 030f 	add.w	r3, r7, #15
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	4619      	mov	r1, r3
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f001 f9b0 	bl	800b310 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009fb0:	e01a      	b.n	8009fe8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8009fb2:	6839      	ldr	r1, [r7, #0]
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f001 f941 	bl	800b23c <USBD_CtlError>
            ret = USBD_FAIL;
 8009fba:	2302      	movs	r3, #2
 8009fbc:	75fb      	strb	r3, [r7, #23]
          break;
 8009fbe:	e013      	b.n	8009fe8 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fc6:	2b03      	cmp	r3, #3
 8009fc8:	d00d      	beq.n	8009fe6 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8009fca:	6839      	ldr	r1, [r7, #0]
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f001 f935 	bl	800b23c <USBD_CtlError>
            ret = USBD_FAIL;
 8009fd2:	2302      	movs	r3, #2
 8009fd4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009fd6:	e006      	b.n	8009fe6 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8009fd8:	6839      	ldr	r1, [r7, #0]
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f001 f92e 	bl	800b23c <USBD_CtlError>
          ret = USBD_FAIL;
 8009fe0:	2302      	movs	r3, #2
 8009fe2:	75fb      	strb	r3, [r7, #23]
          break;
 8009fe4:	e000      	b.n	8009fe8 <USBD_CDC_Setup+0x126>
          break;
 8009fe6:	bf00      	nop
      }
      break;
 8009fe8:	e006      	b.n	8009ff8 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8009fea:	6839      	ldr	r1, [r7, #0]
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f001 f925 	bl	800b23c <USBD_CtlError>
      ret = USBD_FAIL;
 8009ff2:	2302      	movs	r3, #2
 8009ff4:	75fb      	strb	r3, [r7, #23]
      break;
 8009ff6:	bf00      	nop
  }

  return ret;
 8009ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3718      	adds	r7, #24
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a002:	b580      	push	{r7, lr}
 800a004:	b084      	sub	sp, #16
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
 800a00a:	460b      	mov	r3, r1
 800a00c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a014:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a01c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a024:	2b00      	cmp	r3, #0
 800a026:	d037      	beq.n	800a098 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a028:	78fa      	ldrb	r2, [r7, #3]
 800a02a:	6879      	ldr	r1, [r7, #4]
 800a02c:	4613      	mov	r3, r2
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	4413      	add	r3, r2
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	440b      	add	r3, r1
 800a036:	331c      	adds	r3, #28
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d026      	beq.n	800a08c <USBD_CDC_DataIn+0x8a>
 800a03e:	78fa      	ldrb	r2, [r7, #3]
 800a040:	6879      	ldr	r1, [r7, #4]
 800a042:	4613      	mov	r3, r2
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	4413      	add	r3, r2
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	440b      	add	r3, r1
 800a04c:	331c      	adds	r3, #28
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	78fa      	ldrb	r2, [r7, #3]
 800a052:	68b9      	ldr	r1, [r7, #8]
 800a054:	0152      	lsls	r2, r2, #5
 800a056:	440a      	add	r2, r1
 800a058:	3238      	adds	r2, #56	; 0x38
 800a05a:	6812      	ldr	r2, [r2, #0]
 800a05c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a060:	fb02 f201 	mul.w	r2, r2, r1
 800a064:	1a9b      	subs	r3, r3, r2
 800a066:	2b00      	cmp	r3, #0
 800a068:	d110      	bne.n	800a08c <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a06a:	78fa      	ldrb	r2, [r7, #3]
 800a06c:	6879      	ldr	r1, [r7, #4]
 800a06e:	4613      	mov	r3, r2
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	4413      	add	r3, r2
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	440b      	add	r3, r1
 800a078:	331c      	adds	r3, #28
 800a07a:	2200      	movs	r2, #0
 800a07c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a07e:	78f9      	ldrb	r1, [r7, #3]
 800a080:	2300      	movs	r3, #0
 800a082:	2200      	movs	r2, #0
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f001 fdd3 	bl	800bc30 <USBD_LL_Transmit>
 800a08a:	e003      	b.n	800a094 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2200      	movs	r2, #0
 800a090:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a094:	2300      	movs	r3, #0
 800a096:	e000      	b.n	800a09a <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 800a098:	2302      	movs	r3, #2
  }
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3710      	adds	r7, #16
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b084      	sub	sp, #16
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0b4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a0b6:	78fb      	ldrb	r3, [r7, #3]
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f001 fdfe 	bl	800bcbc <USBD_LL_GetRxDataSize>
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d00d      	beq.n	800a0ee <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0d8:	68db      	ldr	r3, [r3, #12]
 800a0da:	68fa      	ldr	r2, [r7, #12]
 800a0dc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a0e0:	68fa      	ldr	r2, [r7, #12]
 800a0e2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a0e6:	4611      	mov	r1, r2
 800a0e8:	4798      	blx	r3

    return USBD_OK;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	e000      	b.n	800a0f0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a0ee:	2302      	movs	r3, #2
  }
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3710      	adds	r7, #16
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a106:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d015      	beq.n	800a13e <USBD_CDC_EP0_RxReady+0x46>
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a118:	2bff      	cmp	r3, #255	; 0xff
 800a11a:	d010      	beq.n	800a13e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a122:	689b      	ldr	r3, [r3, #8]
 800a124:	68fa      	ldr	r2, [r7, #12]
 800a126:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a12a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a12c:	68fa      	ldr	r2, [r7, #12]
 800a12e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a132:	b292      	uxth	r2, r2
 800a134:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	22ff      	movs	r2, #255	; 0xff
 800a13a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a13e:	2300      	movs	r3, #0
}
 800a140:	4618      	mov	r0, r3
 800a142:	3710      	adds	r7, #16
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a148:	b480      	push	{r7}
 800a14a:	b083      	sub	sp, #12
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2243      	movs	r2, #67	; 0x43
 800a154:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a156:	4b03      	ldr	r3, [pc, #12]	; (800a164 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a158:	4618      	mov	r0, r3
 800a15a:	370c      	adds	r7, #12
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bc80      	pop	{r7}
 800a160:	4770      	bx	lr
 800a162:	bf00      	nop
 800a164:	200000bc 	.word	0x200000bc

0800a168 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2243      	movs	r2, #67	; 0x43
 800a174:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a176:	4b03      	ldr	r3, [pc, #12]	; (800a184 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a178:	4618      	mov	r0, r3
 800a17a:	370c      	adds	r7, #12
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bc80      	pop	{r7}
 800a180:	4770      	bx	lr
 800a182:	bf00      	nop
 800a184:	20000078 	.word	0x20000078

0800a188 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2243      	movs	r2, #67	; 0x43
 800a194:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a196:	4b03      	ldr	r3, [pc, #12]	; (800a1a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a198:	4618      	mov	r0, r3
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bc80      	pop	{r7}
 800a1a0:	4770      	bx	lr
 800a1a2:	bf00      	nop
 800a1a4:	20000100 	.word	0x20000100

0800a1a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	220a      	movs	r2, #10
 800a1b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a1b6:	4b03      	ldr	r3, [pc, #12]	; (800a1c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	370c      	adds	r7, #12
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bc80      	pop	{r7}
 800a1c0:	4770      	bx	lr
 800a1c2:	bf00      	nop
 800a1c4:	20000034 	.word	0x20000034

0800a1c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b085      	sub	sp, #20
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a1d2:	2302      	movs	r3, #2
 800a1d4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d005      	beq.n	800a1e8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	683a      	ldr	r2, [r7, #0]
 800a1e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a1e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3714      	adds	r7, #20
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bc80      	pop	{r7}
 800a1f2:	4770      	bx	lr

0800a1f4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b087      	sub	sp, #28
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	4613      	mov	r3, r2
 800a200:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a208:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	68ba      	ldr	r2, [r7, #8]
 800a20e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a212:	88fa      	ldrh	r2, [r7, #6]
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a21a:	2300      	movs	r3, #0
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	371c      	adds	r7, #28
 800a220:	46bd      	mov	sp, r7
 800a222:	bc80      	pop	{r7}
 800a224:	4770      	bx	lr

0800a226 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a226:	b480      	push	{r7}
 800a228:	b085      	sub	sp, #20
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
 800a22e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a236:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	683a      	ldr	r2, [r7, #0]
 800a23c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a240:	2300      	movs	r3, #0
}
 800a242:	4618      	mov	r0, r3
 800a244:	3714      	adds	r7, #20
 800a246:	46bd      	mov	sp, r7
 800a248:	bc80      	pop	{r7}
 800a24a:	4770      	bx	lr

0800a24c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a25a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a262:	2b00      	cmp	r3, #0
 800a264:	d01c      	beq.n	800a2a0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d115      	bne.n	800a29c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2201      	movs	r2, #1
 800a274:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a28e:	b29b      	uxth	r3, r3
 800a290:	2181      	movs	r1, #129	; 0x81
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f001 fccc 	bl	800bc30 <USBD_LL_Transmit>

      return USBD_OK;
 800a298:	2300      	movs	r3, #0
 800a29a:	e002      	b.n	800a2a2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a29c:	2301      	movs	r3, #1
 800a29e:	e000      	b.n	800a2a2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a2a0:	2302      	movs	r3, #2
  }
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3710      	adds	r7, #16
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b084      	sub	sp, #16
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2b8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d017      	beq.n	800a2f4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	7c1b      	ldrb	r3, [r3, #16]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d109      	bne.n	800a2e0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a2d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2d6:	2101      	movs	r1, #1
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f001 fccc 	bl	800bc76 <USBD_LL_PrepareReceive>
 800a2de:	e007      	b.n	800a2f0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a2e6:	2340      	movs	r3, #64	; 0x40
 800a2e8:	2101      	movs	r1, #1
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f001 fcc3 	bl	800bc76 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	e000      	b.n	800a2f6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a2f4:	2302      	movs	r3, #2
  }
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3710      	adds	r7, #16
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}

0800a2fe <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b084      	sub	sp, #16
 800a302:	af00      	add	r7, sp, #0
 800a304:	60f8      	str	r0, [r7, #12]
 800a306:	60b9      	str	r1, [r7, #8]
 800a308:	4613      	mov	r3, r2
 800a30a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d101      	bne.n	800a316 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a312:	2302      	movs	r3, #2
 800a314:	e01a      	b.n	800a34c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d003      	beq.n	800a328 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2200      	movs	r2, #0
 800a324:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d003      	beq.n	800a336 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	68ba      	ldr	r2, [r7, #8]
 800a332:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2201      	movs	r2, #1
 800a33a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	79fa      	ldrb	r2, [r7, #7]
 800a342:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a344:	68f8      	ldr	r0, [r7, #12]
 800a346:	f001 fb37 	bl	800b9b8 <USBD_LL_Init>

  return USBD_OK;
 800a34a:	2300      	movs	r3, #0
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3710      	adds	r7, #16
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a354:	b480      	push	{r7}
 800a356:	b085      	sub	sp, #20
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a35e:	2300      	movs	r3, #0
 800a360:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d006      	beq.n	800a376 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	683a      	ldr	r2, [r7, #0]
 800a36c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a370:	2300      	movs	r3, #0
 800a372:	73fb      	strb	r3, [r7, #15]
 800a374:	e001      	b.n	800a37a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a376:	2302      	movs	r3, #2
 800a378:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a37a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3714      	adds	r7, #20
 800a380:	46bd      	mov	sp, r7
 800a382:	bc80      	pop	{r7}
 800a384:	4770      	bx	lr

0800a386 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a386:	b580      	push	{r7, lr}
 800a388:	b082      	sub	sp, #8
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f001 fb6c 	bl	800ba6c <USBD_LL_Start>

  return USBD_OK;
 800a394:	2300      	movs	r3, #0
}
 800a396:	4618      	mov	r0, r3
 800a398:	3708      	adds	r7, #8
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}

0800a39e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a39e:	b480      	push	{r7}
 800a3a0:	b083      	sub	sp, #12
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a3a6:	2300      	movs	r3, #0
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	370c      	adds	r7, #12
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bc80      	pop	{r7}
 800a3b0:	4770      	bx	lr

0800a3b2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b084      	sub	sp, #16
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
 800a3ba:	460b      	mov	r3, r1
 800a3bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a3be:	2302      	movs	r3, #2
 800a3c0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d00c      	beq.n	800a3e6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	78fa      	ldrb	r2, [r7, #3]
 800a3d6:	4611      	mov	r1, r2
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	4798      	blx	r3
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d101      	bne.n	800a3e6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a3e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3710      	adds	r7, #16
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	78fa      	ldrb	r2, [r7, #3]
 800a406:	4611      	mov	r1, r2
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	4798      	blx	r3

  return USBD_OK;
 800a40c:	2300      	movs	r3, #0
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3708      	adds	r7, #8
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}

0800a416 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a416:	b580      	push	{r7, lr}
 800a418:	b082      	sub	sp, #8
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
 800a41e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a426:	6839      	ldr	r1, [r7, #0]
 800a428:	4618      	mov	r0, r3
 800a42a:	f000 fecb 	bl	800b1c4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2201      	movs	r2, #1
 800a432:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a43c:	461a      	mov	r2, r3
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a44a:	f003 031f 	and.w	r3, r3, #31
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d00c      	beq.n	800a46c <USBD_LL_SetupStage+0x56>
 800a452:	2b01      	cmp	r3, #1
 800a454:	d302      	bcc.n	800a45c <USBD_LL_SetupStage+0x46>
 800a456:	2b02      	cmp	r3, #2
 800a458:	d010      	beq.n	800a47c <USBD_LL_SetupStage+0x66>
 800a45a:	e017      	b.n	800a48c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a462:	4619      	mov	r1, r3
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 f9cb 	bl	800a800 <USBD_StdDevReq>
      break;
 800a46a:	e01a      	b.n	800a4a2 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a472:	4619      	mov	r1, r3
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f000 fa2d 	bl	800a8d4 <USBD_StdItfReq>
      break;
 800a47a:	e012      	b.n	800a4a2 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a482:	4619      	mov	r1, r3
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f000 fa6b 	bl	800a960 <USBD_StdEPReq>
      break;
 800a48a:	e00a      	b.n	800a4a2 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a492:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a496:	b2db      	uxtb	r3, r3
 800a498:	4619      	mov	r1, r3
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f001 fb46 	bl	800bb2c <USBD_LL_StallEP>
      break;
 800a4a0:	bf00      	nop
  }

  return USBD_OK;
 800a4a2:	2300      	movs	r3, #0
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3708      	adds	r7, #8
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b086      	sub	sp, #24
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	60f8      	str	r0, [r7, #12]
 800a4b4:	460b      	mov	r3, r1
 800a4b6:	607a      	str	r2, [r7, #4]
 800a4b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a4ba:	7afb      	ldrb	r3, [r7, #11]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d14b      	bne.n	800a558 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a4c6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a4ce:	2b03      	cmp	r3, #3
 800a4d0:	d134      	bne.n	800a53c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	68da      	ldr	r2, [r3, #12]
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	691b      	ldr	r3, [r3, #16]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d919      	bls.n	800a512 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	68da      	ldr	r2, [r3, #12]
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	691b      	ldr	r3, [r3, #16]
 800a4e6:	1ad2      	subs	r2, r2, r3
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	68da      	ldr	r2, [r3, #12]
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d203      	bcs.n	800a500 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	e002      	b.n	800a506 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a504:	b29b      	uxth	r3, r3
 800a506:	461a      	mov	r2, r3
 800a508:	6879      	ldr	r1, [r7, #4]
 800a50a:	68f8      	ldr	r0, [r7, #12]
 800a50c:	f000 ff4c 	bl	800b3a8 <USBD_CtlContinueRx>
 800a510:	e038      	b.n	800a584 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d00a      	beq.n	800a534 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a524:	2b03      	cmp	r3, #3
 800a526:	d105      	bne.n	800a534 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a52e:	691b      	ldr	r3, [r3, #16]
 800a530:	68f8      	ldr	r0, [r7, #12]
 800a532:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a534:	68f8      	ldr	r0, [r7, #12]
 800a536:	f000 ff49 	bl	800b3cc <USBD_CtlSendStatus>
 800a53a:	e023      	b.n	800a584 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a542:	2b05      	cmp	r3, #5
 800a544:	d11e      	bne.n	800a584 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2200      	movs	r2, #0
 800a54a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a54e:	2100      	movs	r1, #0
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f001 faeb 	bl	800bb2c <USBD_LL_StallEP>
 800a556:	e015      	b.n	800a584 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a55e:	699b      	ldr	r3, [r3, #24]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d00d      	beq.n	800a580 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a56a:	2b03      	cmp	r3, #3
 800a56c:	d108      	bne.n	800a580 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a574:	699b      	ldr	r3, [r3, #24]
 800a576:	7afa      	ldrb	r2, [r7, #11]
 800a578:	4611      	mov	r1, r2
 800a57a:	68f8      	ldr	r0, [r7, #12]
 800a57c:	4798      	blx	r3
 800a57e:	e001      	b.n	800a584 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a580:	2302      	movs	r3, #2
 800a582:	e000      	b.n	800a586 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a584:	2300      	movs	r3, #0
}
 800a586:	4618      	mov	r0, r3
 800a588:	3718      	adds	r7, #24
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}

0800a58e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a58e:	b580      	push	{r7, lr}
 800a590:	b086      	sub	sp, #24
 800a592:	af00      	add	r7, sp, #0
 800a594:	60f8      	str	r0, [r7, #12]
 800a596:	460b      	mov	r3, r1
 800a598:	607a      	str	r2, [r7, #4]
 800a59a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a59c:	7afb      	ldrb	r3, [r7, #11]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d17f      	bne.n	800a6a2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	3314      	adds	r3, #20
 800a5a6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a5ae:	2b02      	cmp	r3, #2
 800a5b0:	d15c      	bne.n	800a66c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	68da      	ldr	r2, [r3, #12]
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	691b      	ldr	r3, [r3, #16]
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	d915      	bls.n	800a5ea <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	68da      	ldr	r2, [r3, #12]
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	691b      	ldr	r3, [r3, #16]
 800a5c6:	1ad2      	subs	r2, r2, r3
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	68db      	ldr	r3, [r3, #12]
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	6879      	ldr	r1, [r7, #4]
 800a5d6:	68f8      	ldr	r0, [r7, #12]
 800a5d8:	f000 feb6 	bl	800b348 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5dc:	2300      	movs	r3, #0
 800a5de:	2200      	movs	r2, #0
 800a5e0:	2100      	movs	r1, #0
 800a5e2:	68f8      	ldr	r0, [r7, #12]
 800a5e4:	f001 fb47 	bl	800bc76 <USBD_LL_PrepareReceive>
 800a5e8:	e04e      	b.n	800a688 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	697a      	ldr	r2, [r7, #20]
 800a5f0:	6912      	ldr	r2, [r2, #16]
 800a5f2:	fbb3 f1f2 	udiv	r1, r3, r2
 800a5f6:	fb02 f201 	mul.w	r2, r2, r1
 800a5fa:	1a9b      	subs	r3, r3, r2
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d11c      	bne.n	800a63a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	689a      	ldr	r2, [r3, #8]
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a608:	429a      	cmp	r2, r3
 800a60a:	d316      	bcc.n	800a63a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	689a      	ldr	r2, [r3, #8]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a616:	429a      	cmp	r2, r3
 800a618:	d20f      	bcs.n	800a63a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a61a:	2200      	movs	r2, #0
 800a61c:	2100      	movs	r1, #0
 800a61e:	68f8      	ldr	r0, [r7, #12]
 800a620:	f000 fe92 	bl	800b348 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	2200      	movs	r2, #0
 800a628:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a62c:	2300      	movs	r3, #0
 800a62e:	2200      	movs	r2, #0
 800a630:	2100      	movs	r1, #0
 800a632:	68f8      	ldr	r0, [r7, #12]
 800a634:	f001 fb1f 	bl	800bc76 <USBD_LL_PrepareReceive>
 800a638:	e026      	b.n	800a688 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a640:	68db      	ldr	r3, [r3, #12]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d00a      	beq.n	800a65c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a64c:	2b03      	cmp	r3, #3
 800a64e:	d105      	bne.n	800a65c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a65c:	2180      	movs	r1, #128	; 0x80
 800a65e:	68f8      	ldr	r0, [r7, #12]
 800a660:	f001 fa64 	bl	800bb2c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a664:	68f8      	ldr	r0, [r7, #12]
 800a666:	f000 fec4 	bl	800b3f2 <USBD_CtlReceiveStatus>
 800a66a:	e00d      	b.n	800a688 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a672:	2b04      	cmp	r3, #4
 800a674:	d004      	beq.n	800a680 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d103      	bne.n	800a688 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a680:	2180      	movs	r1, #128	; 0x80
 800a682:	68f8      	ldr	r0, [r7, #12]
 800a684:	f001 fa52 	bl	800bb2c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a68e:	2b01      	cmp	r3, #1
 800a690:	d11d      	bne.n	800a6ce <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a692:	68f8      	ldr	r0, [r7, #12]
 800a694:	f7ff fe83 	bl	800a39e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2200      	movs	r2, #0
 800a69c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a6a0:	e015      	b.n	800a6ce <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6a8:	695b      	ldr	r3, [r3, #20]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d00d      	beq.n	800a6ca <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a6b4:	2b03      	cmp	r3, #3
 800a6b6:	d108      	bne.n	800a6ca <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6be:	695b      	ldr	r3, [r3, #20]
 800a6c0:	7afa      	ldrb	r2, [r7, #11]
 800a6c2:	4611      	mov	r1, r2
 800a6c4:	68f8      	ldr	r0, [r7, #12]
 800a6c6:	4798      	blx	r3
 800a6c8:	e001      	b.n	800a6ce <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a6ca:	2302      	movs	r3, #2
 800a6cc:	e000      	b.n	800a6d0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a6ce:	2300      	movs	r3, #0
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3718      	adds	r7, #24
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b082      	sub	sp, #8
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a6e0:	2340      	movs	r3, #64	; 0x40
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	2100      	movs	r1, #0
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f001 f9db 	bl	800baa2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2240      	movs	r2, #64	; 0x40
 800a6f8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a6fc:	2340      	movs	r3, #64	; 0x40
 800a6fe:	2200      	movs	r2, #0
 800a700:	2180      	movs	r1, #128	; 0x80
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f001 f9cd 	bl	800baa2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2201      	movs	r2, #1
 800a70c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2240      	movs	r2, #64	; 0x40
 800a712:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2201      	movs	r2, #1
 800a718:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2200      	movs	r2, #0
 800a720:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2200      	movs	r2, #0
 800a728:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2200      	movs	r2, #0
 800a72e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d009      	beq.n	800a750 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	6852      	ldr	r2, [r2, #4]
 800a748:	b2d2      	uxtb	r2, r2
 800a74a:	4611      	mov	r1, r2
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	4798      	blx	r3
  }

  return USBD_OK;
 800a750:	2300      	movs	r3, #0
}
 800a752:	4618      	mov	r0, r3
 800a754:	3708      	adds	r7, #8
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}

0800a75a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a75a:	b480      	push	{r7}
 800a75c:	b083      	sub	sp, #12
 800a75e:	af00      	add	r7, sp, #0
 800a760:	6078      	str	r0, [r7, #4]
 800a762:	460b      	mov	r3, r1
 800a764:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	78fa      	ldrb	r2, [r7, #3]
 800a76a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a76c:	2300      	movs	r3, #0
}
 800a76e:	4618      	mov	r0, r3
 800a770:	370c      	adds	r7, #12
 800a772:	46bd      	mov	sp, r7
 800a774:	bc80      	pop	{r7}
 800a776:	4770      	bx	lr

0800a778 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a778:	b480      	push	{r7}
 800a77a:	b083      	sub	sp, #12
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2204      	movs	r2, #4
 800a790:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a794:	2300      	movs	r3, #0
}
 800a796:	4618      	mov	r0, r3
 800a798:	370c      	adds	r7, #12
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bc80      	pop	{r7}
 800a79e:	4770      	bx	lr

0800a7a0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b083      	sub	sp, #12
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7ae:	2b04      	cmp	r3, #4
 800a7b0:	d105      	bne.n	800a7be <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a7be:	2300      	movs	r3, #0
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	370c      	adds	r7, #12
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bc80      	pop	{r7}
 800a7c8:	4770      	bx	lr

0800a7ca <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a7ca:	b580      	push	{r7, lr}
 800a7cc:	b082      	sub	sp, #8
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7d8:	2b03      	cmp	r3, #3
 800a7da:	d10b      	bne.n	800a7f4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7e2:	69db      	ldr	r3, [r3, #28]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d005      	beq.n	800a7f4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7ee:	69db      	ldr	r3, [r3, #28]
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3708      	adds	r7, #8
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
	...

0800a800 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a80a:	2300      	movs	r3, #0
 800a80c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a816:	2b20      	cmp	r3, #32
 800a818:	d004      	beq.n	800a824 <USBD_StdDevReq+0x24>
 800a81a:	2b40      	cmp	r3, #64	; 0x40
 800a81c:	d002      	beq.n	800a824 <USBD_StdDevReq+0x24>
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d008      	beq.n	800a834 <USBD_StdDevReq+0x34>
 800a822:	e04c      	b.n	800a8be <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a82a:	689b      	ldr	r3, [r3, #8]
 800a82c:	6839      	ldr	r1, [r7, #0]
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	4798      	blx	r3
      break;
 800a832:	e049      	b.n	800a8c8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	785b      	ldrb	r3, [r3, #1]
 800a838:	2b09      	cmp	r3, #9
 800a83a:	d83a      	bhi.n	800a8b2 <USBD_StdDevReq+0xb2>
 800a83c:	a201      	add	r2, pc, #4	; (adr r2, 800a844 <USBD_StdDevReq+0x44>)
 800a83e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a842:	bf00      	nop
 800a844:	0800a895 	.word	0x0800a895
 800a848:	0800a8a9 	.word	0x0800a8a9
 800a84c:	0800a8b3 	.word	0x0800a8b3
 800a850:	0800a89f 	.word	0x0800a89f
 800a854:	0800a8b3 	.word	0x0800a8b3
 800a858:	0800a877 	.word	0x0800a877
 800a85c:	0800a86d 	.word	0x0800a86d
 800a860:	0800a8b3 	.word	0x0800a8b3
 800a864:	0800a88b 	.word	0x0800a88b
 800a868:	0800a881 	.word	0x0800a881
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a86c:	6839      	ldr	r1, [r7, #0]
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f000 f9d4 	bl	800ac1c <USBD_GetDescriptor>
          break;
 800a874:	e022      	b.n	800a8bc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a876:	6839      	ldr	r1, [r7, #0]
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 fb37 	bl	800aeec <USBD_SetAddress>
          break;
 800a87e:	e01d      	b.n	800a8bc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a880:	6839      	ldr	r1, [r7, #0]
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 fb74 	bl	800af70 <USBD_SetConfig>
          break;
 800a888:	e018      	b.n	800a8bc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a88a:	6839      	ldr	r1, [r7, #0]
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 fbfd 	bl	800b08c <USBD_GetConfig>
          break;
 800a892:	e013      	b.n	800a8bc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a894:	6839      	ldr	r1, [r7, #0]
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 fc2c 	bl	800b0f4 <USBD_GetStatus>
          break;
 800a89c:	e00e      	b.n	800a8bc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a89e:	6839      	ldr	r1, [r7, #0]
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 fc5a 	bl	800b15a <USBD_SetFeature>
          break;
 800a8a6:	e009      	b.n	800a8bc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a8a8:	6839      	ldr	r1, [r7, #0]
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 fc69 	bl	800b182 <USBD_ClrFeature>
          break;
 800a8b0:	e004      	b.n	800a8bc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a8b2:	6839      	ldr	r1, [r7, #0]
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 fcc1 	bl	800b23c <USBD_CtlError>
          break;
 800a8ba:	bf00      	nop
      }
      break;
 800a8bc:	e004      	b.n	800a8c8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a8be:	6839      	ldr	r1, [r7, #0]
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f000 fcbb 	bl	800b23c <USBD_CtlError>
      break;
 800a8c6:	bf00      	nop
  }

  return ret;
 800a8c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3710      	adds	r7, #16
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop

0800a8d4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b084      	sub	sp, #16
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	781b      	ldrb	r3, [r3, #0]
 800a8e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8ea:	2b20      	cmp	r3, #32
 800a8ec:	d003      	beq.n	800a8f6 <USBD_StdItfReq+0x22>
 800a8ee:	2b40      	cmp	r3, #64	; 0x40
 800a8f0:	d001      	beq.n	800a8f6 <USBD_StdItfReq+0x22>
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d12a      	bne.n	800a94c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8fc:	3b01      	subs	r3, #1
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	d81d      	bhi.n	800a93e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	889b      	ldrh	r3, [r3, #4]
 800a906:	b2db      	uxtb	r3, r3
 800a908:	2b01      	cmp	r3, #1
 800a90a:	d813      	bhi.n	800a934 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a912:	689b      	ldr	r3, [r3, #8]
 800a914:	6839      	ldr	r1, [r7, #0]
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	4798      	blx	r3
 800a91a:	4603      	mov	r3, r0
 800a91c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	88db      	ldrh	r3, [r3, #6]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d110      	bne.n	800a948 <USBD_StdItfReq+0x74>
 800a926:	7bfb      	ldrb	r3, [r7, #15]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d10d      	bne.n	800a948 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f000 fd4d 	bl	800b3cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a932:	e009      	b.n	800a948 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800a934:	6839      	ldr	r1, [r7, #0]
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 fc80 	bl	800b23c <USBD_CtlError>
          break;
 800a93c:	e004      	b.n	800a948 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800a93e:	6839      	ldr	r1, [r7, #0]
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 fc7b 	bl	800b23c <USBD_CtlError>
          break;
 800a946:	e000      	b.n	800a94a <USBD_StdItfReq+0x76>
          break;
 800a948:	bf00      	nop
      }
      break;
 800a94a:	e004      	b.n	800a956 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800a94c:	6839      	ldr	r1, [r7, #0]
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 fc74 	bl	800b23c <USBD_CtlError>
      break;
 800a954:	bf00      	nop
  }

  return USBD_OK;
 800a956:	2300      	movs	r3, #0
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3710      	adds	r7, #16
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b084      	sub	sp, #16
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a96a:	2300      	movs	r3, #0
 800a96c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	889b      	ldrh	r3, [r3, #4]
 800a972:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a97c:	2b20      	cmp	r3, #32
 800a97e:	d004      	beq.n	800a98a <USBD_StdEPReq+0x2a>
 800a980:	2b40      	cmp	r3, #64	; 0x40
 800a982:	d002      	beq.n	800a98a <USBD_StdEPReq+0x2a>
 800a984:	2b00      	cmp	r3, #0
 800a986:	d008      	beq.n	800a99a <USBD_StdEPReq+0x3a>
 800a988:	e13d      	b.n	800ac06 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a990:	689b      	ldr	r3, [r3, #8]
 800a992:	6839      	ldr	r1, [r7, #0]
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	4798      	blx	r3
      break;
 800a998:	e13a      	b.n	800ac10 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	781b      	ldrb	r3, [r3, #0]
 800a99e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a9a2:	2b20      	cmp	r3, #32
 800a9a4:	d10a      	bne.n	800a9bc <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9ac:	689b      	ldr	r3, [r3, #8]
 800a9ae:	6839      	ldr	r1, [r7, #0]
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	4798      	blx	r3
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a9b8:	7bfb      	ldrb	r3, [r7, #15]
 800a9ba:	e12a      	b.n	800ac12 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	785b      	ldrb	r3, [r3, #1]
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d03e      	beq.n	800aa42 <USBD_StdEPReq+0xe2>
 800a9c4:	2b03      	cmp	r3, #3
 800a9c6:	d002      	beq.n	800a9ce <USBD_StdEPReq+0x6e>
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d070      	beq.n	800aaae <USBD_StdEPReq+0x14e>
 800a9cc:	e115      	b.n	800abfa <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9d4:	2b02      	cmp	r3, #2
 800a9d6:	d002      	beq.n	800a9de <USBD_StdEPReq+0x7e>
 800a9d8:	2b03      	cmp	r3, #3
 800a9da:	d015      	beq.n	800aa08 <USBD_StdEPReq+0xa8>
 800a9dc:	e02b      	b.n	800aa36 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9de:	7bbb      	ldrb	r3, [r7, #14]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d00c      	beq.n	800a9fe <USBD_StdEPReq+0x9e>
 800a9e4:	7bbb      	ldrb	r3, [r7, #14]
 800a9e6:	2b80      	cmp	r3, #128	; 0x80
 800a9e8:	d009      	beq.n	800a9fe <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a9ea:	7bbb      	ldrb	r3, [r7, #14]
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f001 f89c 	bl	800bb2c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a9f4:	2180      	movs	r1, #128	; 0x80
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f001 f898 	bl	800bb2c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a9fc:	e020      	b.n	800aa40 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800a9fe:	6839      	ldr	r1, [r7, #0]
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 fc1b 	bl	800b23c <USBD_CtlError>
              break;
 800aa06:	e01b      	b.n	800aa40 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	885b      	ldrh	r3, [r3, #2]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d10e      	bne.n	800aa2e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800aa10:	7bbb      	ldrb	r3, [r7, #14]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d00b      	beq.n	800aa2e <USBD_StdEPReq+0xce>
 800aa16:	7bbb      	ldrb	r3, [r7, #14]
 800aa18:	2b80      	cmp	r3, #128	; 0x80
 800aa1a:	d008      	beq.n	800aa2e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	88db      	ldrh	r3, [r3, #6]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d104      	bne.n	800aa2e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800aa24:	7bbb      	ldrb	r3, [r7, #14]
 800aa26:	4619      	mov	r1, r3
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f001 f87f 	bl	800bb2c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 fccc 	bl	800b3cc <USBD_CtlSendStatus>

              break;
 800aa34:	e004      	b.n	800aa40 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800aa36:	6839      	ldr	r1, [r7, #0]
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 fbff 	bl	800b23c <USBD_CtlError>
              break;
 800aa3e:	bf00      	nop
          }
          break;
 800aa40:	e0e0      	b.n	800ac04 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa48:	2b02      	cmp	r3, #2
 800aa4a:	d002      	beq.n	800aa52 <USBD_StdEPReq+0xf2>
 800aa4c:	2b03      	cmp	r3, #3
 800aa4e:	d015      	beq.n	800aa7c <USBD_StdEPReq+0x11c>
 800aa50:	e026      	b.n	800aaa0 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa52:	7bbb      	ldrb	r3, [r7, #14]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d00c      	beq.n	800aa72 <USBD_StdEPReq+0x112>
 800aa58:	7bbb      	ldrb	r3, [r7, #14]
 800aa5a:	2b80      	cmp	r3, #128	; 0x80
 800aa5c:	d009      	beq.n	800aa72 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800aa5e:	7bbb      	ldrb	r3, [r7, #14]
 800aa60:	4619      	mov	r1, r3
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f001 f862 	bl	800bb2c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800aa68:	2180      	movs	r1, #128	; 0x80
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f001 f85e 	bl	800bb2c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aa70:	e01c      	b.n	800aaac <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800aa72:	6839      	ldr	r1, [r7, #0]
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f000 fbe1 	bl	800b23c <USBD_CtlError>
              break;
 800aa7a:	e017      	b.n	800aaac <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	885b      	ldrh	r3, [r3, #2]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d112      	bne.n	800aaaa <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aa84:	7bbb      	ldrb	r3, [r7, #14]
 800aa86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d004      	beq.n	800aa98 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800aa8e:	7bbb      	ldrb	r3, [r7, #14]
 800aa90:	4619      	mov	r1, r3
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f001 f869 	bl	800bb6a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 fc97 	bl	800b3cc <USBD_CtlSendStatus>
              }
              break;
 800aa9e:	e004      	b.n	800aaaa <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800aaa0:	6839      	ldr	r1, [r7, #0]
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 fbca 	bl	800b23c <USBD_CtlError>
              break;
 800aaa8:	e000      	b.n	800aaac <USBD_StdEPReq+0x14c>
              break;
 800aaaa:	bf00      	nop
          }
          break;
 800aaac:	e0aa      	b.n	800ac04 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aab4:	2b02      	cmp	r3, #2
 800aab6:	d002      	beq.n	800aabe <USBD_StdEPReq+0x15e>
 800aab8:	2b03      	cmp	r3, #3
 800aaba:	d032      	beq.n	800ab22 <USBD_StdEPReq+0x1c2>
 800aabc:	e097      	b.n	800abee <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aabe:	7bbb      	ldrb	r3, [r7, #14]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d007      	beq.n	800aad4 <USBD_StdEPReq+0x174>
 800aac4:	7bbb      	ldrb	r3, [r7, #14]
 800aac6:	2b80      	cmp	r3, #128	; 0x80
 800aac8:	d004      	beq.n	800aad4 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800aaca:	6839      	ldr	r1, [r7, #0]
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f000 fbb5 	bl	800b23c <USBD_CtlError>
                break;
 800aad2:	e091      	b.n	800abf8 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aad4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	da0b      	bge.n	800aaf4 <USBD_StdEPReq+0x194>
 800aadc:	7bbb      	ldrb	r3, [r7, #14]
 800aade:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aae2:	4613      	mov	r3, r2
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	4413      	add	r3, r2
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	3310      	adds	r3, #16
 800aaec:	687a      	ldr	r2, [r7, #4]
 800aaee:	4413      	add	r3, r2
 800aaf0:	3304      	adds	r3, #4
 800aaf2:	e00b      	b.n	800ab0c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aaf4:	7bbb      	ldrb	r3, [r7, #14]
 800aaf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aafa:	4613      	mov	r3, r2
 800aafc:	009b      	lsls	r3, r3, #2
 800aafe:	4413      	add	r3, r2
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	4413      	add	r3, r2
 800ab0a:	3304      	adds	r3, #4
 800ab0c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	2200      	movs	r2, #0
 800ab12:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	2202      	movs	r2, #2
 800ab18:	4619      	mov	r1, r3
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f000 fbf8 	bl	800b310 <USBD_CtlSendData>
              break;
 800ab20:	e06a      	b.n	800abf8 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ab22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	da11      	bge.n	800ab4e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ab2a:	7bbb      	ldrb	r3, [r7, #14]
 800ab2c:	f003 020f 	and.w	r2, r3, #15
 800ab30:	6879      	ldr	r1, [r7, #4]
 800ab32:	4613      	mov	r3, r2
 800ab34:	009b      	lsls	r3, r3, #2
 800ab36:	4413      	add	r3, r2
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	440b      	add	r3, r1
 800ab3c:	3318      	adds	r3, #24
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d117      	bne.n	800ab74 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800ab44:	6839      	ldr	r1, [r7, #0]
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 fb78 	bl	800b23c <USBD_CtlError>
                  break;
 800ab4c:	e054      	b.n	800abf8 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ab4e:	7bbb      	ldrb	r3, [r7, #14]
 800ab50:	f003 020f 	and.w	r2, r3, #15
 800ab54:	6879      	ldr	r1, [r7, #4]
 800ab56:	4613      	mov	r3, r2
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	4413      	add	r3, r2
 800ab5c:	009b      	lsls	r3, r3, #2
 800ab5e:	440b      	add	r3, r1
 800ab60:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d104      	bne.n	800ab74 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800ab6a:	6839      	ldr	r1, [r7, #0]
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 fb65 	bl	800b23c <USBD_CtlError>
                  break;
 800ab72:	e041      	b.n	800abf8 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	da0b      	bge.n	800ab94 <USBD_StdEPReq+0x234>
 800ab7c:	7bbb      	ldrb	r3, [r7, #14]
 800ab7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab82:	4613      	mov	r3, r2
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	4413      	add	r3, r2
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	3310      	adds	r3, #16
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	4413      	add	r3, r2
 800ab90:	3304      	adds	r3, #4
 800ab92:	e00b      	b.n	800abac <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab94:	7bbb      	ldrb	r3, [r7, #14]
 800ab96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab9a:	4613      	mov	r3, r2
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	4413      	add	r3, r2
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aba6:	687a      	ldr	r2, [r7, #4]
 800aba8:	4413      	add	r3, r2
 800abaa:	3304      	adds	r3, #4
 800abac:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800abae:	7bbb      	ldrb	r3, [r7, #14]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d002      	beq.n	800abba <USBD_StdEPReq+0x25a>
 800abb4:	7bbb      	ldrb	r3, [r7, #14]
 800abb6:	2b80      	cmp	r3, #128	; 0x80
 800abb8:	d103      	bne.n	800abc2 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	2200      	movs	r2, #0
 800abbe:	601a      	str	r2, [r3, #0]
 800abc0:	e00e      	b.n	800abe0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800abc2:	7bbb      	ldrb	r3, [r7, #14]
 800abc4:	4619      	mov	r1, r3
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f000 ffee 	bl	800bba8 <USBD_LL_IsStallEP>
 800abcc:	4603      	mov	r3, r0
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d003      	beq.n	800abda <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	2201      	movs	r2, #1
 800abd6:	601a      	str	r2, [r3, #0]
 800abd8:	e002      	b.n	800abe0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	2200      	movs	r2, #0
 800abde:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	2202      	movs	r2, #2
 800abe4:	4619      	mov	r1, r3
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f000 fb92 	bl	800b310 <USBD_CtlSendData>
              break;
 800abec:	e004      	b.n	800abf8 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800abee:	6839      	ldr	r1, [r7, #0]
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f000 fb23 	bl	800b23c <USBD_CtlError>
              break;
 800abf6:	bf00      	nop
          }
          break;
 800abf8:	e004      	b.n	800ac04 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800abfa:	6839      	ldr	r1, [r7, #0]
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f000 fb1d 	bl	800b23c <USBD_CtlError>
          break;
 800ac02:	bf00      	nop
      }
      break;
 800ac04:	e004      	b.n	800ac10 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800ac06:	6839      	ldr	r1, [r7, #0]
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f000 fb17 	bl	800b23c <USBD_CtlError>
      break;
 800ac0e:	bf00      	nop
  }

  return ret;
 800ac10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3710      	adds	r7, #16
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
	...

0800ac1c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ac26:	2300      	movs	r3, #0
 800ac28:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	885b      	ldrh	r3, [r3, #2]
 800ac36:	0a1b      	lsrs	r3, r3, #8
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	3b01      	subs	r3, #1
 800ac3c:	2b06      	cmp	r3, #6
 800ac3e:	f200 8128 	bhi.w	800ae92 <USBD_GetDescriptor+0x276>
 800ac42:	a201      	add	r2, pc, #4	; (adr r2, 800ac48 <USBD_GetDescriptor+0x2c>)
 800ac44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac48:	0800ac65 	.word	0x0800ac65
 800ac4c:	0800ac7d 	.word	0x0800ac7d
 800ac50:	0800acbd 	.word	0x0800acbd
 800ac54:	0800ae93 	.word	0x0800ae93
 800ac58:	0800ae93 	.word	0x0800ae93
 800ac5c:	0800ae33 	.word	0x0800ae33
 800ac60:	0800ae5f 	.word	0x0800ae5f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	687a      	ldr	r2, [r7, #4]
 800ac6e:	7c12      	ldrb	r2, [r2, #16]
 800ac70:	f107 0108 	add.w	r1, r7, #8
 800ac74:	4610      	mov	r0, r2
 800ac76:	4798      	blx	r3
 800ac78:	60f8      	str	r0, [r7, #12]
      break;
 800ac7a:	e112      	b.n	800aea2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	7c1b      	ldrb	r3, [r3, #16]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d10d      	bne.n	800aca0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac8c:	f107 0208 	add.w	r2, r7, #8
 800ac90:	4610      	mov	r0, r2
 800ac92:	4798      	blx	r3
 800ac94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	3301      	adds	r3, #1
 800ac9a:	2202      	movs	r2, #2
 800ac9c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ac9e:	e100      	b.n	800aea2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aca8:	f107 0208 	add.w	r2, r7, #8
 800acac:	4610      	mov	r0, r2
 800acae:	4798      	blx	r3
 800acb0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	3301      	adds	r3, #1
 800acb6:	2202      	movs	r2, #2
 800acb8:	701a      	strb	r2, [r3, #0]
      break;
 800acba:	e0f2      	b.n	800aea2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	885b      	ldrh	r3, [r3, #2]
 800acc0:	b2db      	uxtb	r3, r3
 800acc2:	2b05      	cmp	r3, #5
 800acc4:	f200 80ac 	bhi.w	800ae20 <USBD_GetDescriptor+0x204>
 800acc8:	a201      	add	r2, pc, #4	; (adr r2, 800acd0 <USBD_GetDescriptor+0xb4>)
 800acca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acce:	bf00      	nop
 800acd0:	0800ace9 	.word	0x0800ace9
 800acd4:	0800ad1d 	.word	0x0800ad1d
 800acd8:	0800ad51 	.word	0x0800ad51
 800acdc:	0800ad85 	.word	0x0800ad85
 800ace0:	0800adb9 	.word	0x0800adb9
 800ace4:	0800aded 	.word	0x0800aded
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d00b      	beq.n	800ad0c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800acfa:	685b      	ldr	r3, [r3, #4]
 800acfc:	687a      	ldr	r2, [r7, #4]
 800acfe:	7c12      	ldrb	r2, [r2, #16]
 800ad00:	f107 0108 	add.w	r1, r7, #8
 800ad04:	4610      	mov	r0, r2
 800ad06:	4798      	blx	r3
 800ad08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad0a:	e091      	b.n	800ae30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad0c:	6839      	ldr	r1, [r7, #0]
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 fa94 	bl	800b23c <USBD_CtlError>
            err++;
 800ad14:	7afb      	ldrb	r3, [r7, #11]
 800ad16:	3301      	adds	r3, #1
 800ad18:	72fb      	strb	r3, [r7, #11]
          break;
 800ad1a:	e089      	b.n	800ae30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad22:	689b      	ldr	r3, [r3, #8]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d00b      	beq.n	800ad40 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	7c12      	ldrb	r2, [r2, #16]
 800ad34:	f107 0108 	add.w	r1, r7, #8
 800ad38:	4610      	mov	r0, r2
 800ad3a:	4798      	blx	r3
 800ad3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad3e:	e077      	b.n	800ae30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad40:	6839      	ldr	r1, [r7, #0]
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 fa7a 	bl	800b23c <USBD_CtlError>
            err++;
 800ad48:	7afb      	ldrb	r3, [r7, #11]
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	72fb      	strb	r3, [r7, #11]
          break;
 800ad4e:	e06f      	b.n	800ae30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad56:	68db      	ldr	r3, [r3, #12]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d00b      	beq.n	800ad74 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad62:	68db      	ldr	r3, [r3, #12]
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	7c12      	ldrb	r2, [r2, #16]
 800ad68:	f107 0108 	add.w	r1, r7, #8
 800ad6c:	4610      	mov	r0, r2
 800ad6e:	4798      	blx	r3
 800ad70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad72:	e05d      	b.n	800ae30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad74:	6839      	ldr	r1, [r7, #0]
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 fa60 	bl	800b23c <USBD_CtlError>
            err++;
 800ad7c:	7afb      	ldrb	r3, [r7, #11]
 800ad7e:	3301      	adds	r3, #1
 800ad80:	72fb      	strb	r3, [r7, #11]
          break;
 800ad82:	e055      	b.n	800ae30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad8a:	691b      	ldr	r3, [r3, #16]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d00b      	beq.n	800ada8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ad96:	691b      	ldr	r3, [r3, #16]
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	7c12      	ldrb	r2, [r2, #16]
 800ad9c:	f107 0108 	add.w	r1, r7, #8
 800ada0:	4610      	mov	r0, r2
 800ada2:	4798      	blx	r3
 800ada4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ada6:	e043      	b.n	800ae30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ada8:	6839      	ldr	r1, [r7, #0]
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 fa46 	bl	800b23c <USBD_CtlError>
            err++;
 800adb0:	7afb      	ldrb	r3, [r7, #11]
 800adb2:	3301      	adds	r3, #1
 800adb4:	72fb      	strb	r3, [r7, #11]
          break;
 800adb6:	e03b      	b.n	800ae30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800adbe:	695b      	ldr	r3, [r3, #20]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d00b      	beq.n	800addc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800adca:	695b      	ldr	r3, [r3, #20]
 800adcc:	687a      	ldr	r2, [r7, #4]
 800adce:	7c12      	ldrb	r2, [r2, #16]
 800add0:	f107 0108 	add.w	r1, r7, #8
 800add4:	4610      	mov	r0, r2
 800add6:	4798      	blx	r3
 800add8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adda:	e029      	b.n	800ae30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800addc:	6839      	ldr	r1, [r7, #0]
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f000 fa2c 	bl	800b23c <USBD_CtlError>
            err++;
 800ade4:	7afb      	ldrb	r3, [r7, #11]
 800ade6:	3301      	adds	r3, #1
 800ade8:	72fb      	strb	r3, [r7, #11]
          break;
 800adea:	e021      	b.n	800ae30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800adf2:	699b      	ldr	r3, [r3, #24]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d00b      	beq.n	800ae10 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800adfe:	699b      	ldr	r3, [r3, #24]
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	7c12      	ldrb	r2, [r2, #16]
 800ae04:	f107 0108 	add.w	r1, r7, #8
 800ae08:	4610      	mov	r0, r2
 800ae0a:	4798      	blx	r3
 800ae0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae0e:	e00f      	b.n	800ae30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae10:	6839      	ldr	r1, [r7, #0]
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 fa12 	bl	800b23c <USBD_CtlError>
            err++;
 800ae18:	7afb      	ldrb	r3, [r7, #11]
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	72fb      	strb	r3, [r7, #11]
          break;
 800ae1e:	e007      	b.n	800ae30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800ae20:	6839      	ldr	r1, [r7, #0]
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 fa0a 	bl	800b23c <USBD_CtlError>
          err++;
 800ae28:	7afb      	ldrb	r3, [r7, #11]
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800ae2e:	e038      	b.n	800aea2 <USBD_GetDescriptor+0x286>
 800ae30:	e037      	b.n	800aea2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	7c1b      	ldrb	r3, [r3, #16]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d109      	bne.n	800ae4e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae42:	f107 0208 	add.w	r2, r7, #8
 800ae46:	4610      	mov	r0, r2
 800ae48:	4798      	blx	r3
 800ae4a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae4c:	e029      	b.n	800aea2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ae4e:	6839      	ldr	r1, [r7, #0]
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f000 f9f3 	bl	800b23c <USBD_CtlError>
        err++;
 800ae56:	7afb      	ldrb	r3, [r7, #11]
 800ae58:	3301      	adds	r3, #1
 800ae5a:	72fb      	strb	r3, [r7, #11]
      break;
 800ae5c:	e021      	b.n	800aea2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	7c1b      	ldrb	r3, [r3, #16]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d10d      	bne.n	800ae82 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae6e:	f107 0208 	add.w	r2, r7, #8
 800ae72:	4610      	mov	r0, r2
 800ae74:	4798      	blx	r3
 800ae76:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	2207      	movs	r2, #7
 800ae7e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae80:	e00f      	b.n	800aea2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ae82:	6839      	ldr	r1, [r7, #0]
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 f9d9 	bl	800b23c <USBD_CtlError>
        err++;
 800ae8a:	7afb      	ldrb	r3, [r7, #11]
 800ae8c:	3301      	adds	r3, #1
 800ae8e:	72fb      	strb	r3, [r7, #11]
      break;
 800ae90:	e007      	b.n	800aea2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ae92:	6839      	ldr	r1, [r7, #0]
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 f9d1 	bl	800b23c <USBD_CtlError>
      err++;
 800ae9a:	7afb      	ldrb	r3, [r7, #11]
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	72fb      	strb	r3, [r7, #11]
      break;
 800aea0:	bf00      	nop
  }

  if (err != 0U)
 800aea2:	7afb      	ldrb	r3, [r7, #11]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d11c      	bne.n	800aee2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800aea8:	893b      	ldrh	r3, [r7, #8]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d011      	beq.n	800aed2 <USBD_GetDescriptor+0x2b6>
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	88db      	ldrh	r3, [r3, #6]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d00d      	beq.n	800aed2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	88da      	ldrh	r2, [r3, #6]
 800aeba:	893b      	ldrh	r3, [r7, #8]
 800aebc:	4293      	cmp	r3, r2
 800aebe:	bf28      	it	cs
 800aec0:	4613      	movcs	r3, r2
 800aec2:	b29b      	uxth	r3, r3
 800aec4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aec6:	893b      	ldrh	r3, [r7, #8]
 800aec8:	461a      	mov	r2, r3
 800aeca:	68f9      	ldr	r1, [r7, #12]
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 fa1f 	bl	800b310 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	88db      	ldrh	r3, [r3, #6]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d104      	bne.n	800aee4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 fa76 	bl	800b3cc <USBD_CtlSendStatus>
 800aee0:	e000      	b.n	800aee4 <USBD_GetDescriptor+0x2c8>
    return;
 800aee2:	bf00      	nop
    }
  }
}
 800aee4:	3710      	adds	r7, #16
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop

0800aeec <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	889b      	ldrh	r3, [r3, #4]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d130      	bne.n	800af60 <USBD_SetAddress+0x74>
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	88db      	ldrh	r3, [r3, #6]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d12c      	bne.n	800af60 <USBD_SetAddress+0x74>
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	885b      	ldrh	r3, [r3, #2]
 800af0a:	2b7f      	cmp	r3, #127	; 0x7f
 800af0c:	d828      	bhi.n	800af60 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	885b      	ldrh	r3, [r3, #2]
 800af12:	b2db      	uxtb	r3, r3
 800af14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af18:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af20:	2b03      	cmp	r3, #3
 800af22:	d104      	bne.n	800af2e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800af24:	6839      	ldr	r1, [r7, #0]
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f000 f988 	bl	800b23c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af2c:	e01c      	b.n	800af68 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	7bfa      	ldrb	r2, [r7, #15]
 800af32:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800af36:	7bfb      	ldrb	r3, [r7, #15]
 800af38:	4619      	mov	r1, r3
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 fe59 	bl	800bbf2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f000 fa43 	bl	800b3cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800af46:	7bfb      	ldrb	r3, [r7, #15]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d004      	beq.n	800af56 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2202      	movs	r2, #2
 800af50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af54:	e008      	b.n	800af68 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2201      	movs	r2, #1
 800af5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af5e:	e003      	b.n	800af68 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800af60:	6839      	ldr	r1, [r7, #0]
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f000 f96a 	bl	800b23c <USBD_CtlError>
  }
}
 800af68:	bf00      	nop
 800af6a:	3710      	adds	r7, #16
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b082      	sub	sp, #8
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	885b      	ldrh	r3, [r3, #2]
 800af7e:	b2da      	uxtb	r2, r3
 800af80:	4b41      	ldr	r3, [pc, #260]	; (800b088 <USBD_SetConfig+0x118>)
 800af82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800af84:	4b40      	ldr	r3, [pc, #256]	; (800b088 <USBD_SetConfig+0x118>)
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	2b01      	cmp	r3, #1
 800af8a:	d904      	bls.n	800af96 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800af8c:	6839      	ldr	r1, [r7, #0]
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f000 f954 	bl	800b23c <USBD_CtlError>
 800af94:	e075      	b.n	800b082 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af9c:	2b02      	cmp	r3, #2
 800af9e:	d002      	beq.n	800afa6 <USBD_SetConfig+0x36>
 800afa0:	2b03      	cmp	r3, #3
 800afa2:	d023      	beq.n	800afec <USBD_SetConfig+0x7c>
 800afa4:	e062      	b.n	800b06c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800afa6:	4b38      	ldr	r3, [pc, #224]	; (800b088 <USBD_SetConfig+0x118>)
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d01a      	beq.n	800afe4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800afae:	4b36      	ldr	r3, [pc, #216]	; (800b088 <USBD_SetConfig+0x118>)
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	461a      	mov	r2, r3
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2203      	movs	r2, #3
 800afbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800afc0:	4b31      	ldr	r3, [pc, #196]	; (800b088 <USBD_SetConfig+0x118>)
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	4619      	mov	r1, r3
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f7ff f9f3 	bl	800a3b2 <USBD_SetClassConfig>
 800afcc:	4603      	mov	r3, r0
 800afce:	2b02      	cmp	r3, #2
 800afd0:	d104      	bne.n	800afdc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800afd2:	6839      	ldr	r1, [r7, #0]
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f000 f931 	bl	800b23c <USBD_CtlError>
            return;
 800afda:	e052      	b.n	800b082 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f000 f9f5 	bl	800b3cc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800afe2:	e04e      	b.n	800b082 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 f9f1 	bl	800b3cc <USBD_CtlSendStatus>
        break;
 800afea:	e04a      	b.n	800b082 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800afec:	4b26      	ldr	r3, [pc, #152]	; (800b088 <USBD_SetConfig+0x118>)
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d112      	bne.n	800b01a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2202      	movs	r2, #2
 800aff8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800affc:	4b22      	ldr	r3, [pc, #136]	; (800b088 <USBD_SetConfig+0x118>)
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	461a      	mov	r2, r3
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b006:	4b20      	ldr	r3, [pc, #128]	; (800b088 <USBD_SetConfig+0x118>)
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	4619      	mov	r1, r3
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f7ff f9ef 	bl	800a3f0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 f9da 	bl	800b3cc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b018:	e033      	b.n	800b082 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b01a:	4b1b      	ldr	r3, [pc, #108]	; (800b088 <USBD_SetConfig+0x118>)
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	461a      	mov	r2, r3
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	429a      	cmp	r2, r3
 800b026:	d01d      	beq.n	800b064 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	4619      	mov	r1, r3
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f7ff f9dd 	bl	800a3f0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b036:	4b14      	ldr	r3, [pc, #80]	; (800b088 <USBD_SetConfig+0x118>)
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	461a      	mov	r2, r3
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b040:	4b11      	ldr	r3, [pc, #68]	; (800b088 <USBD_SetConfig+0x118>)
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	4619      	mov	r1, r3
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f7ff f9b3 	bl	800a3b2 <USBD_SetClassConfig>
 800b04c:	4603      	mov	r3, r0
 800b04e:	2b02      	cmp	r3, #2
 800b050:	d104      	bne.n	800b05c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b052:	6839      	ldr	r1, [r7, #0]
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f000 f8f1 	bl	800b23c <USBD_CtlError>
            return;
 800b05a:	e012      	b.n	800b082 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f000 f9b5 	bl	800b3cc <USBD_CtlSendStatus>
        break;
 800b062:	e00e      	b.n	800b082 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f000 f9b1 	bl	800b3cc <USBD_CtlSendStatus>
        break;
 800b06a:	e00a      	b.n	800b082 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b06c:	6839      	ldr	r1, [r7, #0]
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 f8e4 	bl	800b23c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b074:	4b04      	ldr	r3, [pc, #16]	; (800b088 <USBD_SetConfig+0x118>)
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	4619      	mov	r1, r3
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f7ff f9b8 	bl	800a3f0 <USBD_ClrClassConfig>
        break;
 800b080:	bf00      	nop
    }
  }
}
 800b082:	3708      	adds	r7, #8
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}
 800b088:	200005ac 	.word	0x200005ac

0800b08c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	88db      	ldrh	r3, [r3, #6]
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d004      	beq.n	800b0a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b09e:	6839      	ldr	r1, [r7, #0]
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f000 f8cb 	bl	800b23c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b0a6:	e021      	b.n	800b0ec <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0ae:	2b01      	cmp	r3, #1
 800b0b0:	db17      	blt.n	800b0e2 <USBD_GetConfig+0x56>
 800b0b2:	2b02      	cmp	r3, #2
 800b0b4:	dd02      	ble.n	800b0bc <USBD_GetConfig+0x30>
 800b0b6:	2b03      	cmp	r3, #3
 800b0b8:	d00b      	beq.n	800b0d2 <USBD_GetConfig+0x46>
 800b0ba:	e012      	b.n	800b0e2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	3308      	adds	r3, #8
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	4619      	mov	r1, r3
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 f920 	bl	800b310 <USBD_CtlSendData>
        break;
 800b0d0:	e00c      	b.n	800b0ec <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	3304      	adds	r3, #4
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	4619      	mov	r1, r3
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f000 f918 	bl	800b310 <USBD_CtlSendData>
        break;
 800b0e0:	e004      	b.n	800b0ec <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800b0e2:	6839      	ldr	r1, [r7, #0]
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 f8a9 	bl	800b23c <USBD_CtlError>
        break;
 800b0ea:	bf00      	nop
}
 800b0ec:	bf00      	nop
 800b0ee:	3708      	adds	r7, #8
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b082      	sub	sp, #8
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b104:	3b01      	subs	r3, #1
 800b106:	2b02      	cmp	r3, #2
 800b108:	d81e      	bhi.n	800b148 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	88db      	ldrh	r3, [r3, #6]
 800b10e:	2b02      	cmp	r3, #2
 800b110:	d004      	beq.n	800b11c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b112:	6839      	ldr	r1, [r7, #0]
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f000 f891 	bl	800b23c <USBD_CtlError>
        break;
 800b11a:	e01a      	b.n	800b152 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2201      	movs	r2, #1
 800b120:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d005      	beq.n	800b138 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	68db      	ldr	r3, [r3, #12]
 800b130:	f043 0202 	orr.w	r2, r3, #2
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	330c      	adds	r3, #12
 800b13c:	2202      	movs	r2, #2
 800b13e:	4619      	mov	r1, r3
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 f8e5 	bl	800b310 <USBD_CtlSendData>
      break;
 800b146:	e004      	b.n	800b152 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b148:	6839      	ldr	r1, [r7, #0]
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 f876 	bl	800b23c <USBD_CtlError>
      break;
 800b150:	bf00      	nop
  }
}
 800b152:	bf00      	nop
 800b154:	3708      	adds	r7, #8
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}

0800b15a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b082      	sub	sp, #8
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
 800b162:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	885b      	ldrh	r3, [r3, #2]
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d106      	bne.n	800b17a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2201      	movs	r2, #1
 800b170:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f000 f929 	bl	800b3cc <USBD_CtlSendStatus>
  }
}
 800b17a:	bf00      	nop
 800b17c:	3708      	adds	r7, #8
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}

0800b182 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b182:	b580      	push	{r7, lr}
 800b184:	b082      	sub	sp, #8
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]
 800b18a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b192:	3b01      	subs	r3, #1
 800b194:	2b02      	cmp	r3, #2
 800b196:	d80b      	bhi.n	800b1b0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	885b      	ldrh	r3, [r3, #2]
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d10c      	bne.n	800b1ba <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 f90f 	bl	800b3cc <USBD_CtlSendStatus>
      }
      break;
 800b1ae:	e004      	b.n	800b1ba <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b1b0:	6839      	ldr	r1, [r7, #0]
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f000 f842 	bl	800b23c <USBD_CtlError>
      break;
 800b1b8:	e000      	b.n	800b1bc <USBD_ClrFeature+0x3a>
      break;
 800b1ba:	bf00      	nop
  }
}
 800b1bc:	bf00      	nop
 800b1be:	3708      	adds	r7, #8
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b083      	sub	sp, #12
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	781a      	ldrb	r2, [r3, #0]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	785a      	ldrb	r2, [r3, #1]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	3302      	adds	r3, #2
 800b1e2:	781b      	ldrb	r3, [r3, #0]
 800b1e4:	b29a      	uxth	r2, r3
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	3303      	adds	r3, #3
 800b1ea:	781b      	ldrb	r3, [r3, #0]
 800b1ec:	b29b      	uxth	r3, r3
 800b1ee:	021b      	lsls	r3, r3, #8
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	4413      	add	r3, r2
 800b1f4:	b29a      	uxth	r2, r3
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	3304      	adds	r3, #4
 800b1fe:	781b      	ldrb	r3, [r3, #0]
 800b200:	b29a      	uxth	r2, r3
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	3305      	adds	r3, #5
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	b29b      	uxth	r3, r3
 800b20a:	021b      	lsls	r3, r3, #8
 800b20c:	b29b      	uxth	r3, r3
 800b20e:	4413      	add	r3, r2
 800b210:	b29a      	uxth	r2, r3
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	3306      	adds	r3, #6
 800b21a:	781b      	ldrb	r3, [r3, #0]
 800b21c:	b29a      	uxth	r2, r3
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	3307      	adds	r3, #7
 800b222:	781b      	ldrb	r3, [r3, #0]
 800b224:	b29b      	uxth	r3, r3
 800b226:	021b      	lsls	r3, r3, #8
 800b228:	b29b      	uxth	r3, r3
 800b22a:	4413      	add	r3, r2
 800b22c:	b29a      	uxth	r2, r3
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	80da      	strh	r2, [r3, #6]

}
 800b232:	bf00      	nop
 800b234:	370c      	adds	r7, #12
 800b236:	46bd      	mov	sp, r7
 800b238:	bc80      	pop	{r7}
 800b23a:	4770      	bx	lr

0800b23c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b246:	2180      	movs	r1, #128	; 0x80
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f000 fc6f 	bl	800bb2c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b24e:	2100      	movs	r1, #0
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f000 fc6b 	bl	800bb2c <USBD_LL_StallEP>
}
 800b256:	bf00      	nop
 800b258:	3708      	adds	r7, #8
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}

0800b25e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b25e:	b580      	push	{r7, lr}
 800b260:	b086      	sub	sp, #24
 800b262:	af00      	add	r7, sp, #0
 800b264:	60f8      	str	r0, [r7, #12]
 800b266:	60b9      	str	r1, [r7, #8]
 800b268:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b26a:	2300      	movs	r3, #0
 800b26c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d032      	beq.n	800b2da <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b274:	68f8      	ldr	r0, [r7, #12]
 800b276:	f000 f834 	bl	800b2e2 <USBD_GetLen>
 800b27a:	4603      	mov	r3, r0
 800b27c:	3301      	adds	r3, #1
 800b27e:	b29b      	uxth	r3, r3
 800b280:	005b      	lsls	r3, r3, #1
 800b282:	b29a      	uxth	r2, r3
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b288:	7dfb      	ldrb	r3, [r7, #23]
 800b28a:	1c5a      	adds	r2, r3, #1
 800b28c:	75fa      	strb	r2, [r7, #23]
 800b28e:	461a      	mov	r2, r3
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	4413      	add	r3, r2
 800b294:	687a      	ldr	r2, [r7, #4]
 800b296:	7812      	ldrb	r2, [r2, #0]
 800b298:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b29a:	7dfb      	ldrb	r3, [r7, #23]
 800b29c:	1c5a      	adds	r2, r3, #1
 800b29e:	75fa      	strb	r2, [r7, #23]
 800b2a0:	461a      	mov	r2, r3
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	4413      	add	r3, r2
 800b2a6:	2203      	movs	r2, #3
 800b2a8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b2aa:	e012      	b.n	800b2d2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	1c5a      	adds	r2, r3, #1
 800b2b0:	60fa      	str	r2, [r7, #12]
 800b2b2:	7dfa      	ldrb	r2, [r7, #23]
 800b2b4:	1c51      	adds	r1, r2, #1
 800b2b6:	75f9      	strb	r1, [r7, #23]
 800b2b8:	4611      	mov	r1, r2
 800b2ba:	68ba      	ldr	r2, [r7, #8]
 800b2bc:	440a      	add	r2, r1
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b2c2:	7dfb      	ldrb	r3, [r7, #23]
 800b2c4:	1c5a      	adds	r2, r3, #1
 800b2c6:	75fa      	strb	r2, [r7, #23]
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	4413      	add	r3, r2
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d1e8      	bne.n	800b2ac <USBD_GetString+0x4e>
    }
  }
}
 800b2da:	bf00      	nop
 800b2dc:	3718      	adds	r7, #24
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}

0800b2e2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b2e2:	b480      	push	{r7}
 800b2e4:	b085      	sub	sp, #20
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b2ee:	e005      	b.n	800b2fc <USBD_GetLen+0x1a>
  {
    len++;
 800b2f0:	7bfb      	ldrb	r3, [r7, #15]
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d1f5      	bne.n	800b2f0 <USBD_GetLen+0xe>
  }

  return len;
 800b304:	7bfb      	ldrb	r3, [r7, #15]
}
 800b306:	4618      	mov	r0, r3
 800b308:	3714      	adds	r7, #20
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bc80      	pop	{r7}
 800b30e:	4770      	bx	lr

0800b310 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b084      	sub	sp, #16
 800b314:	af00      	add	r7, sp, #0
 800b316:	60f8      	str	r0, [r7, #12]
 800b318:	60b9      	str	r1, [r7, #8]
 800b31a:	4613      	mov	r3, r2
 800b31c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2202      	movs	r2, #2
 800b322:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b326:	88fa      	ldrh	r2, [r7, #6]
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b32c:	88fa      	ldrh	r2, [r7, #6]
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b332:	88fb      	ldrh	r3, [r7, #6]
 800b334:	68ba      	ldr	r2, [r7, #8]
 800b336:	2100      	movs	r1, #0
 800b338:	68f8      	ldr	r0, [r7, #12]
 800b33a:	f000 fc79 	bl	800bc30 <USBD_LL_Transmit>

  return USBD_OK;
 800b33e:	2300      	movs	r3, #0
}
 800b340:	4618      	mov	r0, r3
 800b342:	3710      	adds	r7, #16
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b084      	sub	sp, #16
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	60f8      	str	r0, [r7, #12]
 800b350:	60b9      	str	r1, [r7, #8]
 800b352:	4613      	mov	r3, r2
 800b354:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b356:	88fb      	ldrh	r3, [r7, #6]
 800b358:	68ba      	ldr	r2, [r7, #8]
 800b35a:	2100      	movs	r1, #0
 800b35c:	68f8      	ldr	r0, [r7, #12]
 800b35e:	f000 fc67 	bl	800bc30 <USBD_LL_Transmit>

  return USBD_OK;
 800b362:	2300      	movs	r3, #0
}
 800b364:	4618      	mov	r0, r3
 800b366:	3710      	adds	r7, #16
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b084      	sub	sp, #16
 800b370:	af00      	add	r7, sp, #0
 800b372:	60f8      	str	r0, [r7, #12]
 800b374:	60b9      	str	r1, [r7, #8]
 800b376:	4613      	mov	r3, r2
 800b378:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2203      	movs	r2, #3
 800b37e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b382:	88fa      	ldrh	r2, [r7, #6]
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b38a:	88fa      	ldrh	r2, [r7, #6]
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b392:	88fb      	ldrh	r3, [r7, #6]
 800b394:	68ba      	ldr	r2, [r7, #8]
 800b396:	2100      	movs	r1, #0
 800b398:	68f8      	ldr	r0, [r7, #12]
 800b39a:	f000 fc6c 	bl	800bc76 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b39e:	2300      	movs	r3, #0
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3710      	adds	r7, #16
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	60f8      	str	r0, [r7, #12]
 800b3b0:	60b9      	str	r1, [r7, #8]
 800b3b2:	4613      	mov	r3, r2
 800b3b4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b3b6:	88fb      	ldrh	r3, [r7, #6]
 800b3b8:	68ba      	ldr	r2, [r7, #8]
 800b3ba:	2100      	movs	r1, #0
 800b3bc:	68f8      	ldr	r0, [r7, #12]
 800b3be:	f000 fc5a 	bl	800bc76 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3c2:	2300      	movs	r3, #0
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3710      	adds	r7, #16
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b082      	sub	sp, #8
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2204      	movs	r2, #4
 800b3d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b3dc:	2300      	movs	r3, #0
 800b3de:	2200      	movs	r2, #0
 800b3e0:	2100      	movs	r1, #0
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 fc24 	bl	800bc30 <USBD_LL_Transmit>

  return USBD_OK;
 800b3e8:	2300      	movs	r3, #0
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3708      	adds	r7, #8
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}

0800b3f2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b3f2:	b580      	push	{r7, lr}
 800b3f4:	b082      	sub	sp, #8
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2205      	movs	r2, #5
 800b3fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b402:	2300      	movs	r3, #0
 800b404:	2200      	movs	r2, #0
 800b406:	2100      	movs	r1, #0
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f000 fc34 	bl	800bc76 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b40e:	2300      	movs	r3, #0
}
 800b410:	4618      	mov	r0, r3
 800b412:	3708      	adds	r7, #8
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b41c:	2200      	movs	r2, #0
 800b41e:	4912      	ldr	r1, [pc, #72]	; (800b468 <MX_USB_DEVICE_Init+0x50>)
 800b420:	4812      	ldr	r0, [pc, #72]	; (800b46c <MX_USB_DEVICE_Init+0x54>)
 800b422:	f7fe ff6c 	bl	800a2fe <USBD_Init>
 800b426:	4603      	mov	r3, r0
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d001      	beq.n	800b430 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b42c:	f7f7 fdbe 	bl	8002fac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b430:	490f      	ldr	r1, [pc, #60]	; (800b470 <MX_USB_DEVICE_Init+0x58>)
 800b432:	480e      	ldr	r0, [pc, #56]	; (800b46c <MX_USB_DEVICE_Init+0x54>)
 800b434:	f7fe ff8e 	bl	800a354 <USBD_RegisterClass>
 800b438:	4603      	mov	r3, r0
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d001      	beq.n	800b442 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b43e:	f7f7 fdb5 	bl	8002fac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b442:	490c      	ldr	r1, [pc, #48]	; (800b474 <MX_USB_DEVICE_Init+0x5c>)
 800b444:	4809      	ldr	r0, [pc, #36]	; (800b46c <MX_USB_DEVICE_Init+0x54>)
 800b446:	f7fe febf 	bl	800a1c8 <USBD_CDC_RegisterInterface>
 800b44a:	4603      	mov	r3, r0
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d001      	beq.n	800b454 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b450:	f7f7 fdac 	bl	8002fac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b454:	4805      	ldr	r0, [pc, #20]	; (800b46c <MX_USB_DEVICE_Init+0x54>)
 800b456:	f7fe ff96 	bl	800a386 <USBD_Start>
 800b45a:	4603      	mov	r3, r0
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d001      	beq.n	800b464 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b460:	f7f7 fda4 	bl	8002fac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b464:	bf00      	nop
 800b466:	bd80      	pop	{r7, pc}
 800b468:	20000154 	.word	0x20000154
 800b46c:	20001180 	.word	0x20001180
 800b470:	20000040 	.word	0x20000040
 800b474:	20000144 	.word	0x20000144

0800b478 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b47c:	2200      	movs	r2, #0
 800b47e:	4905      	ldr	r1, [pc, #20]	; (800b494 <CDC_Init_FS+0x1c>)
 800b480:	4805      	ldr	r0, [pc, #20]	; (800b498 <CDC_Init_FS+0x20>)
 800b482:	f7fe feb7 	bl	800a1f4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b486:	4905      	ldr	r1, [pc, #20]	; (800b49c <CDC_Init_FS+0x24>)
 800b488:	4803      	ldr	r0, [pc, #12]	; (800b498 <CDC_Init_FS+0x20>)
 800b48a:	f7fe fecc 	bl	800a226 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b48e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b490:	4618      	mov	r0, r3
 800b492:	bd80      	pop	{r7, pc}
 800b494:	2000182c 	.word	0x2000182c
 800b498:	20001180 	.word	0x20001180
 800b49c:	20001444 	.word	0x20001444

0800b4a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b4a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bc80      	pop	{r7}
 800b4ac:	4770      	bx	lr
	...

0800b4b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	6039      	str	r1, [r7, #0]
 800b4ba:	71fb      	strb	r3, [r7, #7]
 800b4bc:	4613      	mov	r3, r2
 800b4be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b4c0:	79fb      	ldrb	r3, [r7, #7]
 800b4c2:	2b23      	cmp	r3, #35	; 0x23
 800b4c4:	d866      	bhi.n	800b594 <CDC_Control_FS+0xe4>
 800b4c6:	a201      	add	r2, pc, #4	; (adr r2, 800b4cc <CDC_Control_FS+0x1c>)
 800b4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4cc:	0800b595 	.word	0x0800b595
 800b4d0:	0800b595 	.word	0x0800b595
 800b4d4:	0800b595 	.word	0x0800b595
 800b4d8:	0800b595 	.word	0x0800b595
 800b4dc:	0800b595 	.word	0x0800b595
 800b4e0:	0800b595 	.word	0x0800b595
 800b4e4:	0800b595 	.word	0x0800b595
 800b4e8:	0800b595 	.word	0x0800b595
 800b4ec:	0800b595 	.word	0x0800b595
 800b4f0:	0800b595 	.word	0x0800b595
 800b4f4:	0800b595 	.word	0x0800b595
 800b4f8:	0800b595 	.word	0x0800b595
 800b4fc:	0800b595 	.word	0x0800b595
 800b500:	0800b595 	.word	0x0800b595
 800b504:	0800b595 	.word	0x0800b595
 800b508:	0800b595 	.word	0x0800b595
 800b50c:	0800b595 	.word	0x0800b595
 800b510:	0800b595 	.word	0x0800b595
 800b514:	0800b595 	.word	0x0800b595
 800b518:	0800b595 	.word	0x0800b595
 800b51c:	0800b595 	.word	0x0800b595
 800b520:	0800b595 	.word	0x0800b595
 800b524:	0800b595 	.word	0x0800b595
 800b528:	0800b595 	.word	0x0800b595
 800b52c:	0800b595 	.word	0x0800b595
 800b530:	0800b595 	.word	0x0800b595
 800b534:	0800b595 	.word	0x0800b595
 800b538:	0800b595 	.word	0x0800b595
 800b53c:	0800b595 	.word	0x0800b595
 800b540:	0800b595 	.word	0x0800b595
 800b544:	0800b595 	.word	0x0800b595
 800b548:	0800b595 	.word	0x0800b595
 800b54c:	0800b55d 	.word	0x0800b55d
 800b550:	0800b57f 	.word	0x0800b57f
 800b554:	0800b595 	.word	0x0800b595
 800b558:	0800b595 	.word	0x0800b595
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(&linecode,pbuf,length>sizeof(linecode)?(sizeof(linecode)):(length));
 800b55c:	88bb      	ldrh	r3, [r7, #4]
 800b55e:	2b0c      	cmp	r3, #12
 800b560:	bf28      	it	cs
 800b562:	230c      	movcs	r3, #12
 800b564:	b29b      	uxth	r3, r3
 800b566:	461a      	mov	r2, r3
 800b568:	6839      	ldr	r1, [r7, #0]
 800b56a:	480d      	ldr	r0, [pc, #52]	; (800b5a0 <CDC_Control_FS+0xf0>)
 800b56c:	f000 fc2a 	bl	800bdc4 <memcpy>
    	linecode.IsUpdate++;
 800b570:	4b0b      	ldr	r3, [pc, #44]	; (800b5a0 <CDC_Control_FS+0xf0>)
 800b572:	7a1b      	ldrb	r3, [r3, #8]
 800b574:	3301      	adds	r3, #1
 800b576:	b2da      	uxtb	r2, r3
 800b578:	4b09      	ldr	r3, [pc, #36]	; (800b5a0 <CDC_Control_FS+0xf0>)
 800b57a:	721a      	strb	r2, [r3, #8]
    break;
 800b57c:	e00b      	b.n	800b596 <CDC_Control_FS+0xe6>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf,&linecode,length>sizeof(linecode)?(sizeof(linecode)):(length));
 800b57e:	88bb      	ldrh	r3, [r7, #4]
 800b580:	2b0c      	cmp	r3, #12
 800b582:	bf28      	it	cs
 800b584:	230c      	movcs	r3, #12
 800b586:	b29b      	uxth	r3, r3
 800b588:	461a      	mov	r2, r3
 800b58a:	4905      	ldr	r1, [pc, #20]	; (800b5a0 <CDC_Control_FS+0xf0>)
 800b58c:	6838      	ldr	r0, [r7, #0]
 800b58e:	f000 fc19 	bl	800bdc4 <memcpy>
    break;
 800b592:	e000      	b.n	800b596 <CDC_Control_FS+0xe6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b594:	bf00      	nop
  }

  return (USBD_OK);
 800b596:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3708      	adds	r7, #8
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}
 800b5a0:	20000004 	.word	0x20000004

0800b5a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b082      	sub	sp, #8
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  cdc_receive_call(Buf, *Len);
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f7f6 fda7 	bl	8002108 <cdc_receive_call>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b5ba:	6879      	ldr	r1, [r7, #4]
 800b5bc:	4805      	ldr	r0, [pc, #20]	; (800b5d4 <CDC_Receive_FS+0x30>)
 800b5be:	f7fe fe32 	bl	800a226 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b5c2:	4804      	ldr	r0, [pc, #16]	; (800b5d4 <CDC_Receive_FS+0x30>)
 800b5c4:	f7fe fe71 	bl	800a2aa <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b5c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3708      	adds	r7, #8
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
 800b5d2:	bf00      	nop
 800b5d4:	20001180 	.word	0x20001180

0800b5d8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b084      	sub	sp, #16
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b5e8:	4b0d      	ldr	r3, [pc, #52]	; (800b620 <CDC_Transmit_FS+0x48>)
 800b5ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5ee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d001      	beq.n	800b5fe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	e00b      	b.n	800b616 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b5fe:	887b      	ldrh	r3, [r7, #2]
 800b600:	461a      	mov	r2, r3
 800b602:	6879      	ldr	r1, [r7, #4]
 800b604:	4806      	ldr	r0, [pc, #24]	; (800b620 <CDC_Transmit_FS+0x48>)
 800b606:	f7fe fdf5 	bl	800a1f4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b60a:	4805      	ldr	r0, [pc, #20]	; (800b620 <CDC_Transmit_FS+0x48>)
 800b60c:	f7fe fe1e 	bl	800a24c <USBD_CDC_TransmitPacket>
 800b610:	4603      	mov	r3, r0
 800b612:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b614:	7bfb      	ldrb	r3, [r7, #15]
}
 800b616:	4618      	mov	r0, r3
 800b618:	3710      	adds	r7, #16
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	bf00      	nop
 800b620:	20001180 	.word	0x20001180

0800b624 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b624:	b480      	push	{r7}
 800b626:	b083      	sub	sp, #12
 800b628:	af00      	add	r7, sp, #0
 800b62a:	4603      	mov	r3, r0
 800b62c:	6039      	str	r1, [r7, #0]
 800b62e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	2212      	movs	r2, #18
 800b634:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b636:	4b03      	ldr	r3, [pc, #12]	; (800b644 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b638:	4618      	mov	r0, r3
 800b63a:	370c      	adds	r7, #12
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bc80      	pop	{r7}
 800b640:	4770      	bx	lr
 800b642:	bf00      	nop
 800b644:	20000170 	.word	0x20000170

0800b648 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b648:	b480      	push	{r7}
 800b64a:	b083      	sub	sp, #12
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	4603      	mov	r3, r0
 800b650:	6039      	str	r1, [r7, #0]
 800b652:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	2204      	movs	r2, #4
 800b658:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b65a:	4b03      	ldr	r3, [pc, #12]	; (800b668 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	370c      	adds	r7, #12
 800b660:	46bd      	mov	sp, r7
 800b662:	bc80      	pop	{r7}
 800b664:	4770      	bx	lr
 800b666:	bf00      	nop
 800b668:	20000184 	.word	0x20000184

0800b66c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b082      	sub	sp, #8
 800b670:	af00      	add	r7, sp, #0
 800b672:	4603      	mov	r3, r0
 800b674:	6039      	str	r1, [r7, #0]
 800b676:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b678:	79fb      	ldrb	r3, [r7, #7]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d105      	bne.n	800b68a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b67e:	683a      	ldr	r2, [r7, #0]
 800b680:	4907      	ldr	r1, [pc, #28]	; (800b6a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b682:	4808      	ldr	r0, [pc, #32]	; (800b6a4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b684:	f7ff fdeb 	bl	800b25e <USBD_GetString>
 800b688:	e004      	b.n	800b694 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b68a:	683a      	ldr	r2, [r7, #0]
 800b68c:	4904      	ldr	r1, [pc, #16]	; (800b6a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b68e:	4805      	ldr	r0, [pc, #20]	; (800b6a4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b690:	f7ff fde5 	bl	800b25e <USBD_GetString>
  }
  return USBD_StrDesc;
 800b694:	4b02      	ldr	r3, [pc, #8]	; (800b6a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b696:	4618      	mov	r0, r3
 800b698:	3708      	adds	r7, #8
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	20001c14 	.word	0x20001c14
 800b6a4:	0800be18 	.word	0x0800be18

0800b6a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b082      	sub	sp, #8
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	6039      	str	r1, [r7, #0]
 800b6b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b6b4:	683a      	ldr	r2, [r7, #0]
 800b6b6:	4904      	ldr	r1, [pc, #16]	; (800b6c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b6b8:	4804      	ldr	r0, [pc, #16]	; (800b6cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b6ba:	f7ff fdd0 	bl	800b25e <USBD_GetString>
  return USBD_StrDesc;
 800b6be:	4b02      	ldr	r3, [pc, #8]	; (800b6c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3708      	adds	r7, #8
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}
 800b6c8:	20001c14 	.word	0x20001c14
 800b6cc:	0800be34 	.word	0x0800be34

0800b6d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b082      	sub	sp, #8
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	6039      	str	r1, [r7, #0]
 800b6da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	221a      	movs	r2, #26
 800b6e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b6e2:	f000 f843 	bl	800b76c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b6e6:	4b02      	ldr	r3, [pc, #8]	; (800b6f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3708      	adds	r7, #8
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}
 800b6f0:	20000188 	.word	0x20000188

0800b6f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b082      	sub	sp, #8
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	6039      	str	r1, [r7, #0]
 800b6fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b700:	79fb      	ldrb	r3, [r7, #7]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d105      	bne.n	800b712 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b706:	683a      	ldr	r2, [r7, #0]
 800b708:	4907      	ldr	r1, [pc, #28]	; (800b728 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b70a:	4808      	ldr	r0, [pc, #32]	; (800b72c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b70c:	f7ff fda7 	bl	800b25e <USBD_GetString>
 800b710:	e004      	b.n	800b71c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b712:	683a      	ldr	r2, [r7, #0]
 800b714:	4904      	ldr	r1, [pc, #16]	; (800b728 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b716:	4805      	ldr	r0, [pc, #20]	; (800b72c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b718:	f7ff fda1 	bl	800b25e <USBD_GetString>
  }
  return USBD_StrDesc;
 800b71c:	4b02      	ldr	r3, [pc, #8]	; (800b728 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3708      	adds	r7, #8
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	20001c14 	.word	0x20001c14
 800b72c:	0800be38 	.word	0x0800be38

0800b730 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b082      	sub	sp, #8
 800b734:	af00      	add	r7, sp, #0
 800b736:	4603      	mov	r3, r0
 800b738:	6039      	str	r1, [r7, #0]
 800b73a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b73c:	79fb      	ldrb	r3, [r7, #7]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d105      	bne.n	800b74e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b742:	683a      	ldr	r2, [r7, #0]
 800b744:	4907      	ldr	r1, [pc, #28]	; (800b764 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b746:	4808      	ldr	r0, [pc, #32]	; (800b768 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b748:	f7ff fd89 	bl	800b25e <USBD_GetString>
 800b74c:	e004      	b.n	800b758 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b74e:	683a      	ldr	r2, [r7, #0]
 800b750:	4904      	ldr	r1, [pc, #16]	; (800b764 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b752:	4805      	ldr	r0, [pc, #20]	; (800b768 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b754:	f7ff fd83 	bl	800b25e <USBD_GetString>
  }
  return USBD_StrDesc;
 800b758:	4b02      	ldr	r3, [pc, #8]	; (800b764 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3708      	adds	r7, #8
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
 800b762:	bf00      	nop
 800b764:	20001c14 	.word	0x20001c14
 800b768:	0800be44 	.word	0x0800be44

0800b76c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b772:	4b0f      	ldr	r3, [pc, #60]	; (800b7b0 <Get_SerialNum+0x44>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b778:	4b0e      	ldr	r3, [pc, #56]	; (800b7b4 <Get_SerialNum+0x48>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b77e:	4b0e      	ldr	r3, [pc, #56]	; (800b7b8 <Get_SerialNum+0x4c>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b784:	68fa      	ldr	r2, [r7, #12]
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	4413      	add	r3, r2
 800b78a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d009      	beq.n	800b7a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b792:	2208      	movs	r2, #8
 800b794:	4909      	ldr	r1, [pc, #36]	; (800b7bc <Get_SerialNum+0x50>)
 800b796:	68f8      	ldr	r0, [r7, #12]
 800b798:	f000 f814 	bl	800b7c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b79c:	2204      	movs	r2, #4
 800b79e:	4908      	ldr	r1, [pc, #32]	; (800b7c0 <Get_SerialNum+0x54>)
 800b7a0:	68b8      	ldr	r0, [r7, #8]
 800b7a2:	f000 f80f 	bl	800b7c4 <IntToUnicode>
  }
}
 800b7a6:	bf00      	nop
 800b7a8:	3710      	adds	r7, #16
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
 800b7ae:	bf00      	nop
 800b7b0:	1ffff7e8 	.word	0x1ffff7e8
 800b7b4:	1ffff7ec 	.word	0x1ffff7ec
 800b7b8:	1ffff7f0 	.word	0x1ffff7f0
 800b7bc:	2000018a 	.word	0x2000018a
 800b7c0:	2000019a 	.word	0x2000019a

0800b7c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b087      	sub	sp, #28
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	60f8      	str	r0, [r7, #12]
 800b7cc:	60b9      	str	r1, [r7, #8]
 800b7ce:	4613      	mov	r3, r2
 800b7d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	75fb      	strb	r3, [r7, #23]
 800b7da:	e027      	b.n	800b82c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	0f1b      	lsrs	r3, r3, #28
 800b7e0:	2b09      	cmp	r3, #9
 800b7e2:	d80b      	bhi.n	800b7fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	0f1b      	lsrs	r3, r3, #28
 800b7e8:	b2da      	uxtb	r2, r3
 800b7ea:	7dfb      	ldrb	r3, [r7, #23]
 800b7ec:	005b      	lsls	r3, r3, #1
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	440b      	add	r3, r1
 800b7f4:	3230      	adds	r2, #48	; 0x30
 800b7f6:	b2d2      	uxtb	r2, r2
 800b7f8:	701a      	strb	r2, [r3, #0]
 800b7fa:	e00a      	b.n	800b812 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	0f1b      	lsrs	r3, r3, #28
 800b800:	b2da      	uxtb	r2, r3
 800b802:	7dfb      	ldrb	r3, [r7, #23]
 800b804:	005b      	lsls	r3, r3, #1
 800b806:	4619      	mov	r1, r3
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	440b      	add	r3, r1
 800b80c:	3237      	adds	r2, #55	; 0x37
 800b80e:	b2d2      	uxtb	r2, r2
 800b810:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	011b      	lsls	r3, r3, #4
 800b816:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b818:	7dfb      	ldrb	r3, [r7, #23]
 800b81a:	005b      	lsls	r3, r3, #1
 800b81c:	3301      	adds	r3, #1
 800b81e:	68ba      	ldr	r2, [r7, #8]
 800b820:	4413      	add	r3, r2
 800b822:	2200      	movs	r2, #0
 800b824:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b826:	7dfb      	ldrb	r3, [r7, #23]
 800b828:	3301      	adds	r3, #1
 800b82a:	75fb      	strb	r3, [r7, #23]
 800b82c:	7dfa      	ldrb	r2, [r7, #23]
 800b82e:	79fb      	ldrb	r3, [r7, #7]
 800b830:	429a      	cmp	r2, r3
 800b832:	d3d3      	bcc.n	800b7dc <IntToUnicode+0x18>
  }
}
 800b834:	bf00      	nop
 800b836:	371c      	adds	r7, #28
 800b838:	46bd      	mov	sp, r7
 800b83a:	bc80      	pop	{r7}
 800b83c:	4770      	bx	lr
	...

0800b840 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b084      	sub	sp, #16
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	4a0d      	ldr	r2, [pc, #52]	; (800b884 <HAL_PCD_MspInit+0x44>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d113      	bne.n	800b87a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b852:	4b0d      	ldr	r3, [pc, #52]	; (800b888 <HAL_PCD_MspInit+0x48>)
 800b854:	69db      	ldr	r3, [r3, #28]
 800b856:	4a0c      	ldr	r2, [pc, #48]	; (800b888 <HAL_PCD_MspInit+0x48>)
 800b858:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b85c:	61d3      	str	r3, [r2, #28]
 800b85e:	4b0a      	ldr	r3, [pc, #40]	; (800b888 <HAL_PCD_MspInit+0x48>)
 800b860:	69db      	ldr	r3, [r3, #28]
 800b862:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b866:	60fb      	str	r3, [r7, #12]
 800b868:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 4, 0);
 800b86a:	2200      	movs	r2, #0
 800b86c:	2104      	movs	r1, #4
 800b86e:	2014      	movs	r0, #20
 800b870:	f7f7 ff2f 	bl	80036d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b874:	2014      	movs	r0, #20
 800b876:	f7f7 ff48 	bl	800370a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b87a:	bf00      	nop
 800b87c:	3710      	adds	r7, #16
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
 800b882:	bf00      	nop
 800b884:	40005c00 	.word	0x40005c00
 800b888:	40021000 	.word	0x40021000

0800b88c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b082      	sub	sp, #8
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	4610      	mov	r0, r2
 800b8a4:	f7fe fdb7 	bl	800a416 <USBD_LL_SetupStage>
}
 800b8a8:	bf00      	nop
 800b8aa:	3708      	adds	r7, #8
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}

0800b8b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b082      	sub	sp, #8
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	460b      	mov	r3, r1
 800b8ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800b8c2:	78fb      	ldrb	r3, [r7, #3]
 800b8c4:	687a      	ldr	r2, [r7, #4]
 800b8c6:	015b      	lsls	r3, r3, #5
 800b8c8:	4413      	add	r3, r2
 800b8ca:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800b8ce:	681a      	ldr	r2, [r3, #0]
 800b8d0:	78fb      	ldrb	r3, [r7, #3]
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	f7fe fdea 	bl	800a4ac <USBD_LL_DataOutStage>
}
 800b8d8:	bf00      	nop
 800b8da:	3708      	adds	r7, #8
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b082      	sub	sp, #8
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800b8f2:	78fb      	ldrb	r3, [r7, #3]
 800b8f4:	687a      	ldr	r2, [r7, #4]
 800b8f6:	015b      	lsls	r3, r3, #5
 800b8f8:	4413      	add	r3, r2
 800b8fa:	333c      	adds	r3, #60	; 0x3c
 800b8fc:	681a      	ldr	r2, [r3, #0]
 800b8fe:	78fb      	ldrb	r3, [r7, #3]
 800b900:	4619      	mov	r1, r3
 800b902:	f7fe fe44 	bl	800a58e <USBD_LL_DataInStage>
}
 800b906:	bf00      	nop
 800b908:	3708      	adds	r7, #8
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}

0800b90e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b90e:	b580      	push	{r7, lr}
 800b910:	b082      	sub	sp, #8
 800b912:	af00      	add	r7, sp, #0
 800b914:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b91c:	4618      	mov	r0, r3
 800b91e:	f7fe ff54 	bl	800a7ca <USBD_LL_SOF>
}
 800b922:	bf00      	nop
 800b924:	3708      	adds	r7, #8
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}

0800b92a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800b92a:	b580      	push	{r7, lr}
 800b92c:	b084      	sub	sp, #16
 800b92e:	af00      	add	r7, sp, #0
 800b930:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b932:	2301      	movs	r3, #1
 800b934:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	689b      	ldr	r3, [r3, #8]
 800b93a:	2b02      	cmp	r3, #2
 800b93c:	d001      	beq.n	800b942 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b93e:	f7f7 fb35 	bl	8002fac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b948:	7bfa      	ldrb	r2, [r7, #15]
 800b94a:	4611      	mov	r1, r2
 800b94c:	4618      	mov	r0, r3
 800b94e:	f7fe ff04 	bl	800a75a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b958:	4618      	mov	r0, r3
 800b95a:	f7fe febd 	bl	800a6d8 <USBD_LL_Reset>
}
 800b95e:	bf00      	nop
 800b960:	3710      	adds	r7, #16
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
	...

0800b968 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b082      	sub	sp, #8
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b976:	4618      	mov	r0, r3
 800b978:	f7fe fefe 	bl	800a778 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	699b      	ldr	r3, [r3, #24]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d005      	beq.n	800b990 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b984:	4b04      	ldr	r3, [pc, #16]	; (800b998 <HAL_PCD_SuspendCallback+0x30>)
 800b986:	691b      	ldr	r3, [r3, #16]
 800b988:	4a03      	ldr	r2, [pc, #12]	; (800b998 <HAL_PCD_SuspendCallback+0x30>)
 800b98a:	f043 0306 	orr.w	r3, r3, #6
 800b98e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b990:	bf00      	nop
 800b992:	3708      	adds	r7, #8
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}
 800b998:	e000ed00 	.word	0xe000ed00

0800b99c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b082      	sub	sp, #8
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7fe fef8 	bl	800a7a0 <USBD_LL_Resume>
}
 800b9b0:	bf00      	nop
 800b9b2:	3708      	adds	r7, #8
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b082      	sub	sp, #8
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b9c0:	4a28      	ldr	r2, [pc, #160]	; (800ba64 <USBD_LL_Init+0xac>)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	4a26      	ldr	r2, [pc, #152]	; (800ba64 <USBD_LL_Init+0xac>)
 800b9cc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b9d0:	4b24      	ldr	r3, [pc, #144]	; (800ba64 <USBD_LL_Init+0xac>)
 800b9d2:	4a25      	ldr	r2, [pc, #148]	; (800ba68 <USBD_LL_Init+0xb0>)
 800b9d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b9d6:	4b23      	ldr	r3, [pc, #140]	; (800ba64 <USBD_LL_Init+0xac>)
 800b9d8:	2208      	movs	r2, #8
 800b9da:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b9dc:	4b21      	ldr	r3, [pc, #132]	; (800ba64 <USBD_LL_Init+0xac>)
 800b9de:	2202      	movs	r2, #2
 800b9e0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b9e2:	4b20      	ldr	r3, [pc, #128]	; (800ba64 <USBD_LL_Init+0xac>)
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b9e8:	4b1e      	ldr	r3, [pc, #120]	; (800ba64 <USBD_LL_Init+0xac>)
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b9ee:	4b1d      	ldr	r3, [pc, #116]	; (800ba64 <USBD_LL_Init+0xac>)
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b9f4:	481b      	ldr	r0, [pc, #108]	; (800ba64 <USBD_LL_Init+0xac>)
 800b9f6:	f7f9 ffaf 	bl	8005958 <HAL_PCD_Init>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d001      	beq.n	800ba04 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ba00:	f7f7 fad4 	bl	8002fac <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ba0a:	2318      	movs	r3, #24
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	2100      	movs	r1, #0
 800ba10:	f7fa fe48 	bl	80066a4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ba1a:	2358      	movs	r3, #88	; 0x58
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	2180      	movs	r1, #128	; 0x80
 800ba20:	f7fa fe40 	bl	80066a4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ba2a:	23c0      	movs	r3, #192	; 0xc0
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	2181      	movs	r1, #129	; 0x81
 800ba30:	f7fa fe38 	bl	80066a4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ba3a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ba3e:	2200      	movs	r2, #0
 800ba40:	2101      	movs	r1, #1
 800ba42:	f7fa fe2f 	bl	80066a4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ba4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba50:	2200      	movs	r2, #0
 800ba52:	2182      	movs	r1, #130	; 0x82
 800ba54:	f7fa fe26 	bl	80066a4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ba58:	2300      	movs	r3, #0
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3708      	adds	r7, #8
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
 800ba62:	bf00      	nop
 800ba64:	20001e14 	.word	0x20001e14
 800ba68:	40005c00 	.word	0x40005c00

0800ba6c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b084      	sub	sp, #16
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba74:	2300      	movs	r3, #0
 800ba76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba82:	4618      	mov	r0, r3
 800ba84:	f7fa f849 	bl	8005b1a <HAL_PCD_Start>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba8c:	7bfb      	ldrb	r3, [r7, #15]
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f000 f948 	bl	800bd24 <USBD_Get_USB_Status>
 800ba94:	4603      	mov	r3, r0
 800ba96:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ba98:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3710      	adds	r7, #16
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}

0800baa2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800baa2:	b580      	push	{r7, lr}
 800baa4:	b084      	sub	sp, #16
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	6078      	str	r0, [r7, #4]
 800baaa:	4608      	mov	r0, r1
 800baac:	4611      	mov	r1, r2
 800baae:	461a      	mov	r2, r3
 800bab0:	4603      	mov	r3, r0
 800bab2:	70fb      	strb	r3, [r7, #3]
 800bab4:	460b      	mov	r3, r1
 800bab6:	70bb      	strb	r3, [r7, #2]
 800bab8:	4613      	mov	r3, r2
 800baba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800babc:	2300      	movs	r3, #0
 800babe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bac0:	2300      	movs	r3, #0
 800bac2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800baca:	78bb      	ldrb	r3, [r7, #2]
 800bacc:	883a      	ldrh	r2, [r7, #0]
 800bace:	78f9      	ldrb	r1, [r7, #3]
 800bad0:	f7fa f97c 	bl	8005dcc <HAL_PCD_EP_Open>
 800bad4:	4603      	mov	r3, r0
 800bad6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bad8:	7bfb      	ldrb	r3, [r7, #15]
 800bada:	4618      	mov	r0, r3
 800badc:	f000 f922 	bl	800bd24 <USBD_Get_USB_Status>
 800bae0:	4603      	mov	r3, r0
 800bae2:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800bae4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3710      	adds	r7, #16
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}

0800baee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800baee:	b580      	push	{r7, lr}
 800baf0:	b084      	sub	sp, #16
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
 800baf6:	460b      	mov	r3, r1
 800baf8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bafa:	2300      	movs	r3, #0
 800bafc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bafe:	2300      	movs	r3, #0
 800bb00:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb08:	78fa      	ldrb	r2, [r7, #3]
 800bb0a:	4611      	mov	r1, r2
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f7fa f9bd 	bl	8005e8c <HAL_PCD_EP_Close>
 800bb12:	4603      	mov	r3, r0
 800bb14:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb16:	7bfb      	ldrb	r3, [r7, #15]
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f000 f903 	bl	800bd24 <USBD_Get_USB_Status>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800bb22:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3710      	adds	r7, #16
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b084      	sub	sp, #16
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	460b      	mov	r3, r1
 800bb36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb46:	78fa      	ldrb	r2, [r7, #3]
 800bb48:	4611      	mov	r1, r2
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7fa fa67 	bl	800601e <HAL_PCD_EP_SetStall>
 800bb50:	4603      	mov	r3, r0
 800bb52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb54:	7bfb      	ldrb	r3, [r7, #15]
 800bb56:	4618      	mov	r0, r3
 800bb58:	f000 f8e4 	bl	800bd24 <USBD_Get_USB_Status>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800bb60:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3710      	adds	r7, #16
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}

0800bb6a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb6a:	b580      	push	{r7, lr}
 800bb6c:	b084      	sub	sp, #16
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	6078      	str	r0, [r7, #4]
 800bb72:	460b      	mov	r3, r1
 800bb74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb76:	2300      	movs	r3, #0
 800bb78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb84:	78fa      	ldrb	r2, [r7, #3]
 800bb86:	4611      	mov	r1, r2
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f7fa faa2 	bl	80060d2 <HAL_PCD_EP_ClrStall>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb92:	7bfb      	ldrb	r3, [r7, #15]
 800bb94:	4618      	mov	r0, r3
 800bb96:	f000 f8c5 	bl	800bd24 <USBD_Get_USB_Status>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 800bb9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3710      	adds	r7, #16
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}

0800bba8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b085      	sub	sp, #20
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	460b      	mov	r3, r1
 800bbb2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bbba:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800bbbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	da08      	bge.n	800bbd6 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800bbc4:	78fb      	ldrb	r3, [r7, #3]
 800bbc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbca:	68fa      	ldr	r2, [r7, #12]
 800bbcc:	015b      	lsls	r3, r3, #5
 800bbce:	4413      	add	r3, r2
 800bbd0:	332a      	adds	r3, #42	; 0x2a
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	e008      	b.n	800bbe8 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800bbd6:	78fb      	ldrb	r3, [r7, #3]
 800bbd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbdc:	68fa      	ldr	r2, [r7, #12]
 800bbde:	015b      	lsls	r3, r3, #5
 800bbe0:	4413      	add	r3, r2
 800bbe2:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800bbe6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3714      	adds	r7, #20
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bc80      	pop	{r7}
 800bbf0:	4770      	bx	lr

0800bbf2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bbf2:	b580      	push	{r7, lr}
 800bbf4:	b084      	sub	sp, #16
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	6078      	str	r0, [r7, #4]
 800bbfa:	460b      	mov	r3, r1
 800bbfc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc02:	2300      	movs	r3, #0
 800bc04:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc0c:	78fa      	ldrb	r2, [r7, #3]
 800bc0e:	4611      	mov	r1, r2
 800bc10:	4618      	mov	r0, r3
 800bc12:	f7fa f8b6 	bl	8005d82 <HAL_PCD_SetAddress>
 800bc16:	4603      	mov	r3, r0
 800bc18:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc1a:	7bfb      	ldrb	r3, [r7, #15]
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f000 f881 	bl	800bd24 <USBD_Get_USB_Status>
 800bc22:	4603      	mov	r3, r0
 800bc24:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800bc26:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3710      	adds	r7, #16
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b086      	sub	sp, #24
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	60f8      	str	r0, [r7, #12]
 800bc38:	607a      	str	r2, [r7, #4]
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	460b      	mov	r3, r1
 800bc3e:	72fb      	strb	r3, [r7, #11]
 800bc40:	4613      	mov	r3, r2
 800bc42:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc44:	2300      	movs	r3, #0
 800bc46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bc52:	893b      	ldrh	r3, [r7, #8]
 800bc54:	7af9      	ldrb	r1, [r7, #11]
 800bc56:	687a      	ldr	r2, [r7, #4]
 800bc58:	f7fa f9a8 	bl	8005fac <HAL_PCD_EP_Transmit>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc60:	7dfb      	ldrb	r3, [r7, #23]
 800bc62:	4618      	mov	r0, r3
 800bc64:	f000 f85e 	bl	800bd24 <USBD_Get_USB_Status>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800bc6c:	7dbb      	ldrb	r3, [r7, #22]
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3718      	adds	r7, #24
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}

0800bc76 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bc76:	b580      	push	{r7, lr}
 800bc78:	b086      	sub	sp, #24
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	60f8      	str	r0, [r7, #12]
 800bc7e:	607a      	str	r2, [r7, #4]
 800bc80:	461a      	mov	r2, r3
 800bc82:	460b      	mov	r3, r1
 800bc84:	72fb      	strb	r3, [r7, #11]
 800bc86:	4613      	mov	r3, r2
 800bc88:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bc98:	893b      	ldrh	r3, [r7, #8]
 800bc9a:	7af9      	ldrb	r1, [r7, #11]
 800bc9c:	687a      	ldr	r2, [r7, #4]
 800bc9e:	f7fa f937 	bl	8005f10 <HAL_PCD_EP_Receive>
 800bca2:	4603      	mov	r3, r0
 800bca4:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800bca6:	7dfb      	ldrb	r3, [r7, #23]
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f000 f83b 	bl	800bd24 <USBD_Get_USB_Status>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800bcb2:	7dbb      	ldrb	r3, [r7, #22]
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3718      	adds	r7, #24
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b082      	sub	sp, #8
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bcce:	78fa      	ldrb	r2, [r7, #3]
 800bcd0:	4611      	mov	r1, r2
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f7fa f956 	bl	8005f84 <HAL_PCD_EP_GetRxCount>
 800bcd8:	4603      	mov	r3, r0
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3708      	adds	r7, #8
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
	...

0800bce4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b083      	sub	sp, #12
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bcec:	4b02      	ldr	r3, [pc, #8]	; (800bcf8 <USBD_static_malloc+0x14>)
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	370c      	adds	r7, #12
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bc80      	pop	{r7}
 800bcf6:	4770      	bx	lr
 800bcf8:	200005b0 	.word	0x200005b0

0800bcfc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b083      	sub	sp, #12
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]

}
 800bd04:	bf00      	nop
 800bd06:	370c      	adds	r7, #12
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bc80      	pop	{r7}
 800bd0c:	4770      	bx	lr

0800bd0e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd0e:	b480      	push	{r7}
 800bd10:	b083      	sub	sp, #12
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	6078      	str	r0, [r7, #4]
 800bd16:	460b      	mov	r3, r1
 800bd18:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800bd1a:	bf00      	nop
 800bd1c:	370c      	adds	r7, #12
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bc80      	pop	{r7}
 800bd22:	4770      	bx	lr

0800bd24 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bd24:	b480      	push	{r7}
 800bd26:	b085      	sub	sp, #20
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bd32:	79fb      	ldrb	r3, [r7, #7]
 800bd34:	2b03      	cmp	r3, #3
 800bd36:	d817      	bhi.n	800bd68 <USBD_Get_USB_Status+0x44>
 800bd38:	a201      	add	r2, pc, #4	; (adr r2, 800bd40 <USBD_Get_USB_Status+0x1c>)
 800bd3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd3e:	bf00      	nop
 800bd40:	0800bd51 	.word	0x0800bd51
 800bd44:	0800bd57 	.word	0x0800bd57
 800bd48:	0800bd5d 	.word	0x0800bd5d
 800bd4c:	0800bd63 	.word	0x0800bd63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bd50:	2300      	movs	r3, #0
 800bd52:	73fb      	strb	r3, [r7, #15]
    break;
 800bd54:	e00b      	b.n	800bd6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bd56:	2302      	movs	r3, #2
 800bd58:	73fb      	strb	r3, [r7, #15]
    break;
 800bd5a:	e008      	b.n	800bd6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	73fb      	strb	r3, [r7, #15]
    break;
 800bd60:	e005      	b.n	800bd6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bd62:	2302      	movs	r3, #2
 800bd64:	73fb      	strb	r3, [r7, #15]
    break;
 800bd66:	e002      	b.n	800bd6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bd68:	2302      	movs	r3, #2
 800bd6a:	73fb      	strb	r3, [r7, #15]
    break;
 800bd6c:	bf00      	nop
  }
  return usb_status;
 800bd6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3714      	adds	r7, #20
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bc80      	pop	{r7}
 800bd78:	4770      	bx	lr
 800bd7a:	bf00      	nop

0800bd7c <__libc_init_array>:
 800bd7c:	b570      	push	{r4, r5, r6, lr}
 800bd7e:	2500      	movs	r5, #0
 800bd80:	4e0c      	ldr	r6, [pc, #48]	; (800bdb4 <__libc_init_array+0x38>)
 800bd82:	4c0d      	ldr	r4, [pc, #52]	; (800bdb8 <__libc_init_array+0x3c>)
 800bd84:	1ba4      	subs	r4, r4, r6
 800bd86:	10a4      	asrs	r4, r4, #2
 800bd88:	42a5      	cmp	r5, r4
 800bd8a:	d109      	bne.n	800bda0 <__libc_init_array+0x24>
 800bd8c:	f000 f82e 	bl	800bdec <_init>
 800bd90:	2500      	movs	r5, #0
 800bd92:	4e0a      	ldr	r6, [pc, #40]	; (800bdbc <__libc_init_array+0x40>)
 800bd94:	4c0a      	ldr	r4, [pc, #40]	; (800bdc0 <__libc_init_array+0x44>)
 800bd96:	1ba4      	subs	r4, r4, r6
 800bd98:	10a4      	asrs	r4, r4, #2
 800bd9a:	42a5      	cmp	r5, r4
 800bd9c:	d105      	bne.n	800bdaa <__libc_init_array+0x2e>
 800bd9e:	bd70      	pop	{r4, r5, r6, pc}
 800bda0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bda4:	4798      	blx	r3
 800bda6:	3501      	adds	r5, #1
 800bda8:	e7ee      	b.n	800bd88 <__libc_init_array+0xc>
 800bdaa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bdae:	4798      	blx	r3
 800bdb0:	3501      	adds	r5, #1
 800bdb2:	e7f2      	b.n	800bd9a <__libc_init_array+0x1e>
 800bdb4:	0800be6c 	.word	0x0800be6c
 800bdb8:	0800be6c 	.word	0x0800be6c
 800bdbc:	0800be6c 	.word	0x0800be6c
 800bdc0:	0800be70 	.word	0x0800be70

0800bdc4 <memcpy>:
 800bdc4:	b510      	push	{r4, lr}
 800bdc6:	1e43      	subs	r3, r0, #1
 800bdc8:	440a      	add	r2, r1
 800bdca:	4291      	cmp	r1, r2
 800bdcc:	d100      	bne.n	800bdd0 <memcpy+0xc>
 800bdce:	bd10      	pop	{r4, pc}
 800bdd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bdd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bdd8:	e7f7      	b.n	800bdca <memcpy+0x6>

0800bdda <memset>:
 800bdda:	4603      	mov	r3, r0
 800bddc:	4402      	add	r2, r0
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d100      	bne.n	800bde4 <memset+0xa>
 800bde2:	4770      	bx	lr
 800bde4:	f803 1b01 	strb.w	r1, [r3], #1
 800bde8:	e7f9      	b.n	800bdde <memset+0x4>
	...

0800bdec <_init>:
 800bdec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdee:	bf00      	nop
 800bdf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdf2:	bc08      	pop	{r3}
 800bdf4:	469e      	mov	lr, r3
 800bdf6:	4770      	bx	lr

0800bdf8 <_fini>:
 800bdf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdfa:	bf00      	nop
 800bdfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdfe:	bc08      	pop	{r3}
 800be00:	469e      	mov	lr, r3
 800be02:	4770      	bx	lr
